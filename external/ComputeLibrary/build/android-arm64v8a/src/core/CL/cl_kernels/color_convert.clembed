R"(

/*
 * Copyright (c) 2016-2018 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*
 * Copyright (c) 2016-2020 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifndef ARM_COMPUTE_HELPER_H
#define ARM_COMPUTE_HELPER_H

/*
 * Copyright (c) 2020 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** Store the 0 to (n-1)th rows of the given variables
 * @name STORE_ROW_n
 *
 * @param[in] N0        The width of the passed in vector. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define STORE_ROW_1(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    VSTORE(N0)                                                 \
    (BASENAME##0, 0, (__global DATA_TYPE *)(PTR + 0 * STRIDE_Y + Z##0));

#define STORE_ROW_2(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_1(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##1, 0, (__global DATA_TYPE *)(PTR + 1 * STRIDE_Y + Z##1));

#define STORE_ROW_3(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_2(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##2, 0, (__global DATA_TYPE *)(PTR + 2 * STRIDE_Y + Z##2));

#define STORE_ROW_4(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_3(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##3, 0, (__global DATA_TYPE *)(PTR + 3 * STRIDE_Y + Z##3));

#define STORE_ROW_5(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_4(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##4, 0, (__global DATA_TYPE *)(PTR + 4 * STRIDE_Y + Z##4));

#define STORE_ROW_6(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_5(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##5, 0, (__global DATA_TYPE *)(PTR + 5 * STRIDE_Y + Z##5));

#define STORE_ROW_7(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_6(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##6, 0, (__global DATA_TYPE *)(PTR + 6 * STRIDE_Y + Z##6));

#define STORE_ROW_8(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_7(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##7, 0, (__global DATA_TYPE *)(PTR + 7 * STRIDE_Y + Z##7));

#define STORE_ROW_9(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_8(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                 \
    (BASENAME##8, 0, (__global DATA_TYPE *)(PTR + 8 * STRIDE_Y + Z##8));

#define STORE_ROW_10(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_9(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)      \
    VSTORE(N0)                                                  \
    (BASENAME##9, 0, (__global DATA_TYPE *)(PTR + 9 * STRIDE_Y + Z##9));

#define STORE_ROW_11(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_10(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##A, 0, (__global DATA_TYPE *)(PTR + 10 * STRIDE_Y + Z##A));

#define STORE_ROW_12(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_11(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##B, 0, (__global DATA_TYPE *)(PTR + 11 * STRIDE_Y + Z##B));

#define STORE_ROW_13(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_12(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##C, 0, (__global DATA_TYPE *)(PTR + 12 * STRIDE_Y + Z##C));

#define STORE_ROW_14(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_13(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##D, 0, (__global DATA_TYPE *)(PTR + 13 * STRIDE_Y + Z##D));

#define STORE_ROW_15(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_14(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##E, 0, (__global DATA_TYPE *)(PTR + 14 * STRIDE_Y + Z##E));

#define STORE_ROW_16(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_15(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                  \
    (BASENAME##F, 0, (__global DATA_TYPE *)(PTR + 15 * STRIDE_Y + Z##F));
/** @} */ // end of groupd STORE_ROW_n

/** Convert and store the 0th to (n-1)th rows of the given variables
 * @name CONVERT_STORE_ROW_n
 *
 * @param[in] N0        The size of the vectors
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define CONVERT_STORE_ROW_1(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##0), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 0 * STRIDE_Y + Z##0));

#define CONVERT_STORE_ROW_2(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_1(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##1), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 1 * STRIDE_Y + Z##1));

#define CONVERT_STORE_ROW_3(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_2(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##2), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 2 * STRIDE_Y + Z##2));

#define CONVERT_STORE_ROW_4(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_3(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##3), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 3 * STRIDE_Y + Z##3));

#define CONVERT_STORE_ROW_5(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_4(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##4), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 4 * STRIDE_Y + Z##4));

#define CONVERT_STORE_ROW_6(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_5(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##5), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 5 * STRIDE_Y + Z##5));

#define CONVERT_STORE_ROW_7(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_6(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##6), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 6 * STRIDE_Y + Z##6));

#define CONVERT_STORE_ROW_8(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_7(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##7), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 7 * STRIDE_Y + Z##7));

#define CONVERT_STORE_ROW_9(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_8(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                         \
    (CONVERT_SAT((BASENAME##8), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 8 * STRIDE_Y + Z##8));

#define CONVERT_STORE_ROW_10(N0, DATA, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_9(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    VSTORE(N0)                                                     \
    (CONVERT_SAT((BASENAME##9), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 9 * STRIDE_Y + Z##9));

#define CONVERT_STORE_ROW_11(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_10(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##A), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 10 * STRIDE_Y + Z##A));

#define CONVERT_STORE_ROW_12(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_11(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##B), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 11 * STRIDE_Y + Z##B));

#define CONVERT_STORE_ROW_13(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_12(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##C), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 12 * STRIDE_Y + Z##C));

#define CONVERT_STORE_ROW_14(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_13(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##D), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 13 * STRIDE_Y + Z##D));

#define CONVERT_STORE_ROW_15(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_14(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##E), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 14 * STRIDE_Y + Z##E));

#define CONVERT_STORE_ROW_16(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    CONVERT_STORE_ROW_15(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE(N0)                                                          \
    (CONVERT_SAT((BASENAME##F), VEC_DATA_TYPE(DATA_TYPE, N0)), 0, (__global DATA_TYPE *)(PTR + 15 * STRIDE_Y + Z##F));

/** @} */ // end of groupd CONVERT_STORE_ROW_n

/** Store a block of the given size M0xN0
 * @name STORE_BLOCK
 *
 * Supported cases are M0=1,2,3,...,16 and N0=2,3,4,8,16.
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0        The number of rows to store
 * @param[in] N0        The size of each vector
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define STORE_BLOCK_STR(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) STORE_ROW_##M0(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
#define STORE_BLOCK(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) STORE_BLOCK_STR(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
/** @} */ // end of group STORE_BLOCK

/** Convert and store a block of the given size M0xN0
 * @name CONVERT_STORE_BLOCK
 *
 * Supported cases are M0=1,2,3,...,16 and N0=2,3,4,8,16.
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0        The number of rows to store
 * @param[in] N0        The size of each vector
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define CONVERT_STORE_BLOCK_STR(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) CONVERT_STORE_ROW_##M0(N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
#define CONVERT_STORE_BLOCK(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) CONVERT_STORE_BLOCK_STR(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
/** @} */ // end of group CONVERT_STORE_BLOCK

/** Partially store the 0 to (n-1)th rows of the given variables
 * @name STORE_ROW_PARTIAL_n
 * Within each row, store the lower @p STORE_N0 elements of vectors of width @p N0
 *
 * @note in case @p STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * @param[in] N0        The width of the passed in vector. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] STORE_N0  The **lower** size of the vectors to store. Supported: [1-16 and <= @p N0
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define STORE_ROW_PARTIAL_1(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##0, 0, (__global DATA_TYPE *)(PTR + 0 * STRIDE_Y + Z##0));

#define STORE_ROW_PARTIAL_2(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_1(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##1, 0, (__global DATA_TYPE *)(PTR + 1 * STRIDE_Y + Z##1));

#define STORE_ROW_PARTIAL_3(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_2(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##2, 0, (__global DATA_TYPE *)(PTR + 2 * STRIDE_Y + Z##2));

#define STORE_ROW_PARTIAL_4(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_3(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##3, 0, (__global DATA_TYPE *)(PTR + 3 * STRIDE_Y + Z##3));

#define STORE_ROW_PARTIAL_5(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_4(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##4, 0, (__global DATA_TYPE *)(PTR + 4 * STRIDE_Y + Z##4));

#define STORE_ROW_PARTIAL_6(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_5(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##5, 0, (__global DATA_TYPE *)(PTR + 5 * STRIDE_Y + Z##5));

#define STORE_ROW_PARTIAL_7(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_6(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##6, 0, (__global DATA_TYPE *)(PTR + 6 * STRIDE_Y + Z##6));

#define STORE_ROW_PARTIAL_8(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_7(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##7, 0, (__global DATA_TYPE *)(PTR + 7 * STRIDE_Y + Z##7));

#define STORE_ROW_PARTIAL_9(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_8(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                 \
    (BASENAME##8, 0, (__global DATA_TYPE *)(PTR + 8 * STRIDE_Y + Z##8));

#define STORE_ROW_PARTIAL_10(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_9(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)      \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##9, 0, (__global DATA_TYPE *)(PTR + 9 * STRIDE_Y + Z##9));

#define STORE_ROW_PARTIAL_11(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_10(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##A, 0, (__global DATA_TYPE *)(PTR + 10 * STRIDE_Y + Z##A));

#define STORE_ROW_PARTIAL_12(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_11(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##B, 0, (__global DATA_TYPE *)(PTR + 11 * STRIDE_Y + Z##B));

#define STORE_ROW_PARTIAL_13(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_12(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##C, 0, (__global DATA_TYPE *)(PTR + 12 * STRIDE_Y + Z##C));

#define STORE_ROW_PARTIAL_14(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_13(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##D, 0, (__global DATA_TYPE *)(PTR + 13 * STRIDE_Y + Z##D));

#define STORE_ROW_PARTIAL_15(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_14(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##E, 0, (__global DATA_TYPE *)(PTR + 14 * STRIDE_Y + Z##E));

#define STORE_ROW_PARTIAL_16(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) \
    STORE_ROW_PARTIAL_15(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)     \
    VSTORE_PARTIAL(N0, STORE_N0)                                                  \
    (BASENAME##F, 0, (__global DATA_TYPE *)(PTR + 15 * STRIDE_Y + Z##F));
/** @} */ // end of groupd STORE_ROW_PARTIAL_n

/** Partially store a block of the given size STORE_M0xSTORE_N0
 * @name STORE_BLOCK_PARTIAL
 *
 * @note The vector width @p N0 is also required for correct partial storing behaviour.
 * @note in case @p STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * The data to store is expected to have consecutive names for each row.
 * E.g., for STORE_M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for STORE_M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] STORE_M0  The number of rows to store. Supported: 1-16
 * @param[in] STORE_N0  The lower number of elements of vectors to store. Supported: 1-16 and <= @p N0
 * @param[in] N0        The size of each vector. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE The data type of the vectors
 * @param[in] BASENAME  The basename of the variables
 * @param[in] PTR       The base pointer
 * @param[in] STRIDE_Y  The stride value in y-axis direction
 * @param[in] Z         The offset in z-axis direction
 * @{
 */
#define STORE_BLOCK_PARTIAL_STR(STORE_M0, STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) STORE_ROW_PARTIAL_##STORE_M0(N0, STORE_N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
#define STORE_BLOCK_PARTIAL(STORE_M0, STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z) STORE_BLOCK_PARTIAL_STR(STORE_M0, STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)
/** Store a block that can be partial in both x and y dimensions
 *
 * @note in cases @p PARTIAL_STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0               The number of rows to store, for non-partial blocks. Supported: 1-16
 * @param[in] N0               The size of each vector, for non-partial blocks. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE        The data type of the vectors
 * @param[in] BASENAME         The basename of the variables
 * @param[in] PTR              The base pointer
 * @param[in] STRIDE_Y         The stride value in y-axis direction
 * @param[in] Z                The offset in z-axis direction
 * @param[in] PARTIAL_STORE_M0 The partial size in y, for partial blocks. Supported range: [1, @p M0)
 * @param[in] PARTIAL_STORE_N0 The partial size in x, for partial blocks. Supported range: [1, @p N0)
 * @param[in] PARTIAL_COND_Y   Condition on the y axis to perform the partial store Y. True to use PARTIAL_STORE_M0 rather than M0.
 * @param[in] PARTIAL_COND_X   Condition on the x axis to perform the partial store X. True to use PARTIAL_STORE_N0 rather than N0.
 */
#define STORE_BLOCK_PARTIAL_IN_X_AND_Y(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X) \
    if(!(PARTIAL_COND_X) && !(PARTIAL_COND_Y))                                                                                                            \
    {                                                                                                                                                     \
        STORE_BLOCK_PARTIAL(M0, N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                                                           \
    }                                                                                                                                                     \
    else if((PARTIAL_COND_Y) && !(PARTIAL_COND_X))                                                                                                        \
    {                                                                                                                                                     \
        STORE_BLOCK_PARTIAL(PARTIAL_STORE_M0, N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                                             \
    }                                                                                                                                                     \
    else if(!(PARTIAL_COND_Y) && (PARTIAL_COND_X))                                                                                                        \
    {                                                                                                                                                     \
        STORE_BLOCK_PARTIAL(M0, PARTIAL_STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                                             \
    }                                                                                                                                                     \
    else                                                                                                                                                  \
    {                                                                                                                                                     \
        STORE_BLOCK_PARTIAL(PARTIAL_STORE_M0, PARTIAL_STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                               \
    }
/** Store a block that can only be partial in x but not y.
 *
 * @note in case @p N0 or @p PARTIAL_STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0               The number of rows to store, for non-partial blocks. Supported: 1-16
 * @param[in] N0               The size of each vector, for non-partial blocks. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE        The data type of the vectors
 * @param[in] BASENAME         The basename of the variables
 * @param[in] PTR              The base pointer
 * @param[in] STRIDE_Y         The stride value in y-axis direction
 * @param[in] Z                The offset in z-axis direction
 * @param[in] PARTIAL_STORE_N0 The partial size in x, for partial blocks. Supported range: [1, @p N0)
 * @param[in] PARTIAL_COND_X   Condition on the x axis to perform the partial store X. True to use PARTIAL_STORE_N0 rather than N0.
 */
#define STORE_BLOCK_PARTIAL_IN_X(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_N0, PARTIAL_COND_X) \
    if(!(PARTIAL_COND_X))                                                                                         \
    {                                                                                                             \
        STORE_BLOCK_PARTIAL(M0, N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                   \
    }                                                                                                             \
    else                                                                                                          \
    {                                                                                                             \
        STORE_BLOCK_PARTIAL(M0, PARTIAL_STORE_N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                     \
    }
/** Store a block that can only be partial in y but not x.
 *
 * @note in case @p N0 or @p PARTIAL_STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0               The number of rows to store, for non-partial blocks. Supported: 1-16
 * @param[in] N0               The size of each vector, for non-partial blocks. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE        The data type of the vectors
 * @param[in] BASENAME         The basename of the variables
 * @param[in] PTR              The base pointer
 * @param[in] STRIDE_Y         The stride value in y-axis direction
 * @param[in] Z                The offset in z-axis direction
 * @param[in] PARTIAL_STORE_M0 The partial size in y, for partial blocks. Supported range: [1, @p M0)
 * @param[in] PARTIAL_COND_Y   Condition on the y axis to perform the partial store Y. True to use PARTIAL_STORE_M0 rather than M0.
 */
#define STORE_BLOCK_PARTIAL_IN_Y(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_COND_Y) \
    if(!(PARTIAL_COND_Y))                                                                                         \
    {                                                                                                             \
        STORE_BLOCK_PARTIAL(M0, N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                                   \
    }                                                                                                             \
    else                                                                                                          \
    {                                                                                                             \
        STORE_BLOCK_PARTIAL(PARTIAL_STORE_M0, N0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z);                     \
    }
/** @} */ // end of group STORE_BLOCK_PARTIAL

#if defined(PARTIAL_STORE_M0) && defined(PARTIAL_STORE_N0)

/** Boundary-aware GEMM block store
 * @name STORE_BLOCK_BOUNDARY_AWARE
 * This macro assumes the following schemes to achieve boundary-awareness:
 *  - Overlapping load in Y axis from lhs tensor. This implies lhs has no padding along y dim.
 *  - Non-Overlapping(normal) load from rhs tensor. This imples rhs can have paddings.
 *  - Overlapping load in Y axis from bias tensor. This implies rhs has no padding along y dim.
 * The macro then ensures that the dst tensor can be stored without any paddings in both x and y dim.
 *
 * In the y dimension, we place the partial blocks **at the beginning** while in the x dimension, we place the partial
 * blocks **at the end**.
 * Say, the dst tensor is of shape MxN and we have M0 and N0 as the block size, this is how we define "partial blocks"/
 * "boundary block" (we use the 2 terms "partial blocks" and "boundary blocks" interchangeably) and its various parameters:
 *
 *  *--x-->                         x == 0                        x == 1
 *  |                  |<------------------------------N-------------------------->|
 *  y                  |<--------------N0------------->|<----PARTIAL_STORE_N0----->|
 *  |     -------------#############################################################
 *  *     |          | |...............................|...........................|
 * y == 0 | PAR_..._M0 |......Boundary block in y......|.Boundary block in x and y.|
 *        |          | |...............................|...........................|
 *        M          --#############################################################
 *        |          | |                               |...........................|
 * y == 1 |         M0 |      Non-boundary block       |....Boundary block in x....|
 *        |          | |                               |...........................|
 *        |------------#############################################################
 *
 * Then @p PARTIAL_STORE_M0 = M % M0      and @p PARTIAL_STORE_N0 = N % N0
 *
 * @note in cases @p PARTIAL_STORE_N0 != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * It automatically detects if a giving M,N,M0,N0 combination can yield partial blocks in either X and Y dimension,
 * and select corresponding store methods such that the boundary detection logic is only added when needed.
 *
 * The data to store is expected to have consecutive names for each row.
 * E.g., for M0=3 and basename=c, the expected names are c0, c1 and c2.
 * The Z offset is expected to have consecutive names.
 * E.g., for M0=3 and Z=zin, the expected z offset names are zin0, zin1 and zin2.
 *
 * @param[in] M0               The number of rows to store, for non-partial blocks. Supported: 1-16
 * @param[in] N0               The size of each vector, for non-partial blocks. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] DATA_TYPE        The data type of the vectors
 * @param[in] BASENAME         The basename of the variables
 * @param[in] PTR              The base pointer
 * @param[in] STRIDE_Y         The stride value in y-axis direction
 * @param[in] Z                The offset in z-axis direction
 * @param[in] PARTIAL_STORE_M0 The partial size in y, for partial blocks. Supported: [0, @p M0)
 * @param[in] PARTIAL_STORE_N0 The partial size in x, for partial blocks. Supported: [0, @p N0)
 * @param[in] PARTIAL_COND_Y   Condition on the y axis to perform the partial store Y. True to use PARTIAL_STORE_M0 rather than M0.
 * @param[in] PARTIAL_COND_X   Condition on the x axis to perform the partial store X. True to use PARTIAL_STORE_N0 rather than N0.
 * @{
 */
#if PARTIAL_STORE_M0 == 0 && PARTIAL_STORE_N0 == 0
// Case1: No partial blocks in either x or y
#define STORE_BLOCK_BOUNDARY_AWARE(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X) \
    STORE_BLOCK(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z)

#elif PARTIAL_STORE_M0 > 0 && PARTIAL_STORE_N0 == 0
// Case2: Partial blocks in y
#define STORE_BLOCK_BOUNDARY_AWARE(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X) \
    STORE_BLOCK_PARTIAL_IN_Y(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_COND_Y)

#elif PARTIAL_STORE_M0 == 0 && PARTIAL_STORE_N0 > 0
// Case3: Partial blocks in x
#define STORE_BLOCK_BOUNDARY_AWARE(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X) \
    STORE_BLOCK_PARTIAL_IN_X(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_N0, PARTIAL_COND_X)

#else // PARTIAL_STORE_M0 == 0 && PARTIAL_STORE_N0 == 0
// Case4: Partial blocks in both x and y
#define STORE_BLOCK_BOUNDARY_AWARE(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X) \
    STORE_BLOCK_PARTIAL_IN_X_AND_Y(M0, N0, DATA_TYPE, BASENAME, PTR, STRIDE_Y, Z, PARTIAL_STORE_M0, PARTIAL_STORE_N0, PARTIAL_COND_Y, PARTIAL_COND_X)

#endif // PARTIAL_STORE_M0 == 0 && PARTIAL_STORE_N0 == 0

#endif    // defined(PARTIAL_STORE_M0) && defined(PARTIAL_STORE_N0)
/** @} */ // end of group STORE_BLOCK_BOUNDARY_AWARE

#if defined(PARTIAL_STORE_M0)
/** Compute the start m0 row (LHS, BIAS and DST) in a boundary-aware way so as to avoid padding
 * @name COMPUTE_M0_START_ROW
 * If there're any partial blocks in y dimension, they are placed at the beginning of the rows.
 * This shift amount is added to all rows such that the partial block (at the beginning) overlaps with the subsequent
 * blocks in the y dimension to avoid any padding.
 * EG: M0=4, PARTIAL_STORE_M0=1:
 *                  | Non-overlapping | +M0_ROW_SHIFT (Overlapping)
 * block 0 (partial)| start row = 0   | start row = 0
 * block 1 (full)   | start row = 4   | start row = 1
 * block 2 (full)   | start row = 8   | start row = 5
 *
 * @param[in] y                Global id of current block in y.
 * @param[in] M0               The number of rows to store, for non-partial blocks. Supported: 1-16
 * @param[in] PARTIAL_STORE_M0 The partial size in y, for partial blocks. Supported: [0, @p M0)
 * @{
 */
#define COMPUTE_M0_START_ROW(y, M0, PARTIAL_STORE_M0) \
    ((uint)(max(0, (int)(y * M0) - (int)((M0 - PARTIAL_STORE_M0) % M0))))
#else // defined(PARTIAL_STORE_M0)
#define COMPUTE_M0_START_ROW(y, M0, PARTIAL_STORE_M0) \
    ((uint)(y * M0))
#endif    // defined(PARTIAL_STORE_M0)
/** @} */ // end of group COMPUTE_M0_START_ROW

/** Store a vector that can only be partial in x.
 *
 * @note in case @p vec_size or @p leftover != 1, 2, 3, 4, 8, 16, extra vstore(s) will be invoked, thus incurring small performance penalty.
 *
 * The data to store is expected to end in a 0.
 * E.g., for basename=c, the expected name is c0.
 *
 * @param[in] basename  The name of the variable without trailing 0
 * @param[in] data_type The data type of the vector
 * @param[in] ptr       The base pointer
 * @param[in] vec_size  The vector size if cond = false. Supported: 1, 2, 3, 4, 8, 16
 * @param[in] leftover  The vector size if cond = true. Supported range: [1, @p vec_size0)
 * @param[in] cond      Condition to select either vec_size0 or vec_size1
 * @{
 */
#define STORE_VECTOR_SELECT(basename, data_type, ptr, vec_size, leftover, cond) \
    STORE_BLOCK_PARTIAL_IN_X(1, vec_size, data_type, basename, ptr, 0, 0, leftover, cond)
/** @} */ // end of group STORE_VECTOR_SELECT

#if defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) && defined(cl_khr_fp16)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif // defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) && defined(cl_khr_fp16)

#if defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) && defined(cl_arm_integer_dot_product_int8)
#pragma OPENCL EXTENSION cl_arm_integer_dot_product_int8 : enable
#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ENABLED) && defined(cl_arm_integer_dot_product_int8)

#if defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) && defined(cl_arm_integer_dot_product_accumulate_int8)
#pragma OPENCL EXTENSION cl_arm_integer_dot_product_accumulate_int8 : enable
#endif // defined(ARM_COMPUTE_OPENCL_DOT8_ACC_ENABLED) && defined(cl_arm_integer_dot_product_accumulate_int8)

#if defined(ARM_COMPUTE_DEBUG_ENABLED) && defined(cl_arm_printf)
#pragma OPENCL EXTENSION cl_arm_printf : enable
#endif // defined(ARM_COMPUTE_DEBUG_ENABLED) && defined(cl_arm_printf)

#define GPU_ARCH_MIDGARD 0x100
#define GPU_ARCH_BIFROST 0x200

/** Concatenate two inputs.
 *
 * @param[in] a The first input to be concatenated
 * @param[in] b The second input to be concatenated
 *
 * @return The concatenated output
 */
#define CONCAT(a, b) a##b

/** Expand the given vector
 *
 * @param[in] x The vector to be expanded
 *
 * @return The expanded output
 */
#define EXPAND(x) x

/** Clamp the given value between an upper and lower bound.
 *
 * @param[in] x       The value to be clamped
 * @param[in] min_val The lower bound
 * @param[in] max_val The upper bound
 *
 * @return The clamped value.
 */
#define CLAMP(x, min_val, max_val) min(max(x, min_val), max_val)

/** REVn reverses the given vector whose size is n.
 * @name REVn
 *
 * @param[in] x The vector to be reversed
 *
 * @return The reversed vector
 * @{
 */
#define REV1(x) ((x))
#define REV2(x) ((x).s10)
#define REV3(x) ((x).s210)
#define REV4(x) ((x).s3210)
#define REV8(x) ((x).s76543210)
#define REV16(x) ((x).sFEDCBA9876543210)
/** @} */ // end of group REVn

/** Reverse the given vector.
 * @name REVERSE
 *
 * @param[in] x The vector to be reversed
 * @param[in] s The size of the vector
 *
 * @return The reversed vector
 * @{
 */
#define REVERSE_STR(x, s) REV##s((x))
#define REVERSE(x, s) REVERSE_STR(x, s)
/** @} */ // end of group REVERSE

/** Circular-right-shift (rotate-right) the vector of size s by the amount of n.
 * @name ROTs_n
 *
 * @param[in] x The vector to be shifted
 *
 * @return The shifted vector
 * @{
 */
#define ROT1_0(x) ((x))

#define ROT2_0(x) ((x))
#define ROT2_1(x) ((x).s10)

#define ROT3_0(x) ((x))
#define ROT3_1(x) ((x).s201)
#define ROT3_2(x) ((x).s120)

#define ROT4_0(x) ((x))
#define ROT4_1(x) ((x).s3012)
#define ROT4_2(x) ((x).s2301)
#define ROT4_3(x) ((x).s1230)

#define ROT8_0(x) ((x))
#define ROT8_1(x) ((x).s70123456)
#define ROT8_2(x) ((x).s67012345)
#define ROT8_3(x) ((x).s56701234)
#define ROT8_4(x) ((x).s45670123)
#define ROT8_5(x) ((x).s34567012)
#define ROT8_6(x) ((x).s23456701)
#define ROT8_7(x) ((x).s12345670)

#define ROT16_0(x) ((x))
#define ROT16_1(x) ((x).sF0123456789ABCDE)
#define ROT16_2(x) ((x).sEF0123456789ABCD)
#define ROT16_3(x) ((x).sDEF0123456789ABC)
#define ROT16_4(x) ((x).sCDEF0123456789AB)
#define ROT16_5(x) ((x).sBCDEF0123456789A)
#define ROT16_6(x) ((x).sABCDEF0123456789)
#define ROT16_7(x) ((x).s9ABCDEF012345678)
#define ROT16_8(x) ((x).s89ABCDEF01234567)
#define ROT16_9(x) ((x).s789ABCDEF0123456)
#define ROT16_10(x) ((x).s6789ABCDEF012345)
#define ROT16_11(x) ((x).s56789ABCDEF01234)
#define ROT16_12(x) ((x).s456789ABCDEF0123)
#define ROT16_13(x) ((x).s3456789ABCDEF012)
#define ROT16_14(x) ((x).s23456789ABCDEF01)
#define ROT16_15(x) ((x).s123456789ABCDEF0)
/** @} */ // end of group ROTs_n

/** Circular-right-shift (rotate-right) the given vector by the given amount.
 * @name ROTATE
 *
 * @param[in] x The vector to be shifted
 * @param[in] s The size of the vector
 * @param[in] n The amount to be shifted
 *
 * @return The shifted vector
 * @{
 */
#define ROTATE_STR(x, s, n) ROT##s##_##n(x)
#define ROTATE(x, s, n) ROTATE_STR(x, s, n)
/** @} */ // end of group ROTATE

/** Creates a vector of size n filled with offset values corresponding to the location of each element.
 * @name V_OFFSn
 *
 * @param[in] dt The data type of the output vector
 *
 * @return The vector filled with offset values
 * @{
 */
#define V_OFFS1(dt) (dt##1)(0)
#define V_OFFS2(dt) (dt##2)(0, 1)
#define V_OFFS3(dt) (dt##3)(0, 1, 2)
#define V_OFFS4(dt) (dt##4)(0, 1, 2, 3)
#define V_OFFS8(dt) (dt##8)(0, 1, 2, 3, 4, 5, 6, 7)
#define V_OFFS16(dt) (dt##16)(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
/** @} */ // end of group V_OFFSn

/** Create a vector filled with offset values corresponding to the location of each element.
 * @name VEC_OFFS
 *
 * @param[in] dt The data type of the output vector
 * @param[in] s  The size of the output vector
 *
 * @return The vector filled with offset values
 * @{
 */
#define VEC_OFFS_STR(dt, s) V_OFFS##s(dt)
#define VEC_OFFS(dt, s) VEC_OFFS_STR(dt, s)
/** @} */ // end of group VEC_OFFS

#define VLOAD_STR(size) vload##size
#define VLOAD(size) VLOAD_STR(size)

#define PIXEL_UNIT4 1
#define PIXEL_UNIT8 2
#define PIXEL_UNIT16 4

/** Utility macro to convert a vector size in pixel unit.
 *
 * @name CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT
 *
 * @param[in] vec_size Vector size. Only 4,8 and 16 is supported
 *
 * @return The pixel unit (number of pixels)
 * @{
 */
#define CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT_STR(vec_size) PIXEL_UNIT##vec_size
#define CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT(vec_size) CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT_STR(vec_size)
/** @} */ // end of group CONVERT_VECTOR_SIZE_TO_PIXEL_UNIT

#define read_image2d_floatx1(img, x_coord, y_coord) (float4)(read_imagef(img, (int2)(x_coord, y_coord)));
#define read_image2d_floatx2(img, x_coord, y_coord) (float8)(read_imagef(img, (int2)(x_coord, y_coord)), read_imagef(img, (int2)(x_coord + 1, y_coord)));
#define read_image2d_floatx4(img, x_coord, y_coord) (float16)(read_imagef(img, (int2)(x_coord, y_coord)), read_imagef(img, (int2)(x_coord + 1, y_coord)), read_imagef(img, (int2)(x_coord + 2, y_coord)), read_imagef(img, (int2)(x_coord + 3, y_coord)));

#if defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) && defined(cl_khr_fp16)
#define read_image2d_halfx1(img, x_coord, y_coord) (half4)(read_imageh(img, (int2)(x_coord, y_coord)));
#define read_image2d_halfx2(img, x_coord, y_coord) (half8)(read_imageh(img, (int2)(x_coord, y_coord)), read_imageh(img, (int2)(x_coord + 1, y_coord)));
#define read_image2d_halfx4(img, x_coord, y_coord) (half16)(read_imageh(img, (int2)(x_coord, y_coord)), read_imageh(img, (int2)(x_coord + 1, y_coord)), read_imageh(img, (int2)(x_coord + 2, y_coord)), read_imageh(img, (int2)(x_coord + 3, y_coord)));
#endif // defined(ARM_COMPUTE_OPENCL_FP16_ENABLED) && defined(cl_khr_fp16)

/** Utility macro to read a 2D OpenCL image object.
 *
 * @note Coordinates are not normalized
 *
 * @param[in] data_type Data type
 * @param[in] n0        Number of pixel to read. Only 1,2 and 4 is supported
 * @param[in] img       OpenCL image object
 * @param[in] x_coord   The x coordinate for the top-left pixel
 * @param[in] y_coord   The y coordinate for the top-left pixel
 *
 * @return Pixels from the 2D OpenCL image object
 * @{
 */
#define READ_IMAGE2D_STR(data_type, n0, img, x_coord, y_coord) read_image2d_##data_type##x##n0(img, x_coord, y_coord)
#define READ_IMAGE2D(data_type, n0, img, x_coord, y_coord) READ_IMAGE2D_STR(data_type, n0, img, x_coord, y_coord)

#define VSTORE_STR(size) vstore##size
#define VSTORE(size) VSTORE_STR(size)

#define float1 float
#define half1 half
#define char1 char
#define uchar1 uchar
#define short1 short
#define ushort1 ushort
#define int1 int
#define uint1 uint
#define long1 long
#define ulong1 ulong
#define double1 double

#define vload1(OFFSET, PTR) *(OFFSET + PTR)
#define vstore1(DATA, OFFSET, PTR) *(OFFSET + PTR) = DATA

/** Extended partial vstore that correctly handles scalar values as well.
 * Store the **lower** 0 to (n-1)th elements of the given vector while minimising the amount of vstore ops
 * @name VSTORE_PARTIAL
 *
 * @note With this macro, the passed data can be both a vector and a scalar
 * @note @p store_size needs to be <= @p size
 * eg 1: Valid
 * VSTORE_PARTIAL(16, 15) ...;
 * eg 2: Invalid
 * VSTORE_PARTIAL(4, 7) ...;
 *
 * @param[in] size       The width of @p DATA. Supported values: 1(scalar), 2, 3, 4, 8, 16
 * @param[in] store_size The number of lower elements to store. Supported values: 1-16, but has to be <= @p size
 * @{
 */
#define VSTORE_PARTIAL_STR(size, store_size) vstore_partial_##size##_##store_size
#define VSTORE_PARTIAL(size, store_size) VSTORE_PARTIAL_STR(size, store_size)

#define NO_STORE(data, offs, ptr) \
    {                             \
    }

// Size == 1 (scalar)
#define vstore_partial_1_0 NO_STORE
#define vstore_partial_1_1 vstore1
#define vstore_partial_1_2 NO_STORE
#define vstore_partial_1_3 NO_STORE
#define vstore_partial_1_4 NO_STORE
#define vstore_partial_1_5 NO_STORE
#define vstore_partial_1_6 NO_STORE
#define vstore_partial_1_7 NO_STORE
#define vstore_partial_1_8 NO_STORE
#define vstore_partial_1_9 NO_STORE
#define vstore_partial_1_10 NO_STORE
#define vstore_partial_1_11 NO_STORE
#define vstore_partial_1_12 NO_STORE
#define vstore_partial_1_13 NO_STORE
#define vstore_partial_1_14 NO_STORE
#define vstore_partial_1_15 NO_STORE
#define vstore_partial_1_16 NO_STORE
// Size == 2
#define vstore_partial_2_0 NO_STORE
#define vstore_partial_2_1 vstore_partial_1
#define vstore_partial_2_2 vstore_partial_2
#define vstore_partial_2_3 NO_STORE
#define vstore_partial_2_4 NO_STORE
#define vstore_partial_2_5 NO_STORE
#define vstore_partial_2_6 NO_STORE
#define vstore_partial_2_7 NO_STORE
#define vstore_partial_2_8 NO_STORE
#define vstore_partial_2_9 NO_STORE
#define vstore_partial_2_10 NO_STORE
#define vstore_partial_2_11 NO_STORE
#define vstore_partial_2_12 NO_STORE
#define vstore_partial_2_13 NO_STORE
#define vstore_partial_2_14 NO_STORE
#define vstore_partial_2_15 NO_STORE
#define vstore_partial_2_16 NO_STORE
// Size == 3
#define vstore_partial_3_0 NO_STORE
#define vstore_partial_3_1 vstore_partial_1
#define vstore_partial_3_2 vstore_partial_2
#define vstore_partial_3_3 vstore_partial_3
#define vstore_partial_3_4 NO_STORE
#define vstore_partial_3_5 NO_STORE
#define vstore_partial_3_6 NO_STORE
#define vstore_partial_3_7 NO_STORE
#define vstore_partial_3_8 NO_STORE
#define vstore_partial_3_9 NO_STORE
#define vstore_partial_3_10 NO_STORE
#define vstore_partial_3_11 NO_STORE
#define vstore_partial_3_12 NO_STORE
#define vstore_partial_3_13 NO_STORE
#define vstore_partial_3_14 NO_STORE
#define vstore_partial_3_15 NO_STORE
#define vstore_partial_3_16 NO_STORE
// Size == 4
#define vstore_partial_4_0 NO_STORE
#define vstore_partial_4_1 vstore_partial_1
#define vstore_partial_4_2 vstore_partial_2
#define vstore_partial_4_3 vstore_partial_3
#define vstore_partial_4_4 vstore_partial_4
#define vstore_partial_4_5 NO_STORE
#define vstore_partial_4_6 NO_STORE
#define vstore_partial_4_7 NO_STORE
#define vstore_partial_4_8 NO_STORE
#define vstore_partial_4_9 NO_STORE
#define vstore_partial_4_10 NO_STORE
#define vstore_partial_4_11 NO_STORE
#define vstore_partial_4_12 NO_STORE
#define vstore_partial_4_13 NO_STORE
#define vstore_partial_4_14 NO_STORE
#define vstore_partial_4_15 NO_STORE
#define vstore_partial_4_16 NO_STORE
// Size == 8
#define vstore_partial_8_0 NO_STORE
#define vstore_partial_8_1 vstore_partial_1
#define vstore_partial_8_2 vstore_partial_2
#define vstore_partial_8_3 vstore_partial_3
#define vstore_partial_8_4 vstore_partial_4
#define vstore_partial_8_5 vstore_partial_5
#define vstore_partial_8_6 vstore_partial_6
#define vstore_partial_8_7 vstore_partial_7
#define vstore_partial_8_8 vstore_partial_8
#define vstore_partial_8_9 NO_STORE
#define vstore_partial_8_10 NO_STORE
#define vstore_partial_8_11 NO_STORE
#define vstore_partial_8_12 NO_STORE
#define vstore_partial_8_13 NO_STORE
#define vstore_partial_8_14 NO_STORE
#define vstore_partial_8_15 NO_STORE
#define vstore_partial_8_16 NO_STORE
// Size == 16
#define vstore_partial_16_0 NO_STORE
#define vstore_partial_16_1 vstore_partial_1
#define vstore_partial_16_2 vstore_partial_2
#define vstore_partial_16_3 vstore_partial_3
#define vstore_partial_16_4 vstore_partial_4
#define vstore_partial_16_5 vstore_partial_5
#define vstore_partial_16_6 vstore_partial_6
#define vstore_partial_16_7 vstore_partial_7
#define vstore_partial_16_8 vstore_partial_8
#define vstore_partial_16_9 vstore_partial_9
#define vstore_partial_16_10 vstore_partial_10
#define vstore_partial_16_11 vstore_partial_11
#define vstore_partial_16_12 vstore_partial_12
#define vstore_partial_16_13 vstore_partial_13
#define vstore_partial_16_14 vstore_partial_14
#define vstore_partial_16_15 vstore_partial_15
#define vstore_partial_16_16 vstore_partial_16

/** Partial vstore. Store the **lower** 0 to (n-1)th elements of the given vector while minimising the amount of vstore ops
 * @name vstore_partial_n
 *
 * @note @p DATA needs to be a vector not a scalar
 * @note n needs to be <= the vector width of the input variable @p DATA
 * eg 1: Valid
 * vstore_partial_15(var:float16, 0, 0xabcd);
 * eg 2: Invalid
 * vstore_partial_7(var:float4, 0, 0xabcd);
 *
 * @note in cases n == 1, 2, 3, 4, 8, 16, no extra vstore is invoked, thus there's no performance penalty.
 *
 * @param[in] DATA   The name of the variable
 * @param[in] OFFSET Offset in n
 * @param[in] PTR    The base pointer
 * @{
 */
#define vstore_partial_1(DATA, OFFSET, PTR) \
    vstore1(DATA.s0, OFFSET, PTR);

#define vstore_partial_2(DATA, OFFSET, PTR) \
    vstore2(DATA.s01, OFFSET, PTR);

#define vstore_partial_3(DATA, OFFSET, PTR) \
    vstore3(DATA.s012, OFFSET, PTR);

#define vstore_partial_4(DATA, OFFSET, PTR) \
    vstore4(DATA.s0123, OFFSET, PTR);

#define vstore_partial_5(DATA, OFFSET, PTR)    \
    vstore_partial_4(DATA.s0123, OFFSET, PTR); \
    vstore1(DATA.s4, OFFSET, PTR + 4);

#define vstore_partial_6(DATA, OFFSET, PTR)    \
    vstore_partial_4(DATA.s0123, OFFSET, PTR); \
    vstore_partial_2(DATA.s45, OFFSET, PTR + 4);

#define vstore_partial_7(DATA, OFFSET, PTR)    \
    vstore_partial_4(DATA.s0123, OFFSET, PTR); \
    vstore_partial_3(DATA.s456, OFFSET, PTR + 4);

#define vstore_partial_8(DATA, OFFSET, PTR) \
    vstore8(DATA.s01234567, OFFSET, PTR);

#define vstore_partial_9(DATA, OFFSET, PTR)        \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore1(DATA.s8, OFFSET, PTR + 8);

#define vstore_partial_10(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_2(DATA.s89, OFFSET, PTR + 8);

#define vstore_partial_11(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_3(DATA.s89a, OFFSET, PTR + 8);

#define vstore_partial_12(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_4(DATA.s89ab, OFFSET, PTR + 8);

#define vstore_partial_13(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_5(DATA.s89abcdef, OFFSET, PTR + 8);

#define vstore_partial_14(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_6(DATA.s89abcdef, OFFSET, PTR + 8);

#define vstore_partial_15(DATA, OFFSET, PTR)       \
    vstore_partial_8(DATA.s01234567, OFFSET, PTR); \
    vstore_partial_7(DATA.s89abcdef, OFFSET, PTR + 8);

#define vstore_partial_16(DATA, OFFSET, PTR) \
    vstore16(DATA, OFFSET, PTR);
/** @} */ // end of groupd vstore_partial_n
/** @} */ // end of groupd VSTORE_PARTIAL

// Convert built-in functions with _sat modifier are not supported in floating point so we create defines
// without _sat to overcome this issue
#define convert_float_sat convert_float
#define convert_float1_sat convert_float
#define convert_float2_sat convert_float2
#define convert_float3_sat convert_float3
#define convert_float4_sat convert_float4
#define convert_float8_sat convert_float8
#define convert_float16_sat convert_float16
#define convert_half_sat convert_float
#define convert_half1_sat convert_half
#define convert_half2_sat convert_half2
#define convert_half3_sat convert_half3
#define convert_half4_sat convert_half4
#define convert_half8_sat convert_half8
#define convert_half16_sat convert_half16

#define convert_float1 convert_float
#define convert_half1 convert_half
#define convert_char1 convert_char
#define convert_uchar1 convert_uchar
#define convert_short1 convert_short
#define convert_ushort1 convert_ushort
#define convert_int1 convert_int
#define convert_uint1 convert_uint
#define convert_long1 convert_long
#define convert_ulong1 convert_ulong
#define convert_double1 convert_double

#define convert_char1_sat convert_char_sat
#define convert_uchar1_sat convert_uchar_sat
#define convert_short1_sat convert_short_sat
#define convert_ushort1_sat convert_ushort_sat
#define convert_int1_sat convert_int_sat
#define convert_uint1_sat convert_uint_sat
#define convert_long1_sat convert_long_sat
#define convert_ulong1_sat convert_ulong_sat
#define convert_double1_sat convert_double_sat

#define VEC_DATA_TYPE_STR(type, size) type##size
#define VEC_DATA_TYPE(type, size) VEC_DATA_TYPE_STR(type, size)

#define CONVERT_STR(x, type) (convert_##type((x)))
#define CONVERT(x, type) CONVERT_STR(x, type)

#define CONVERT_SAT_STR(x, type) (convert_##type##_sat((x)))
#define CONVERT_SAT(x, type) CONVERT_SAT_STR(x, type)

#define CONVERT_SAT_ROUND_STR(x, type, round) (convert_##type##_sat_##round((x)))
#define CONVERT_SAT_ROUND(x, type, round) CONVERT_SAT_ROUND_STR(x, type, round)

#define select_vec_dt_uchar(size) uchar##size
#define select_vec_dt_char(size) char##size
#define select_vec_dt_ushort(size) ushort##size
#define select_vec_dt_short(size) short##size
#define select_vec_dt_half(size) short##size
#define select_vec_dt_uint(size) uint##size
#define select_vec_dt_int(size) int##size
#define select_vec_dt_float(size) int##size
#define select_vec_dt_ulong(size) ulong##size
#define select_vec_dt_long(size) long##size

#define SELECT_VEC_DATA_TYPE_STR(type, size) select_vec_dt_##type(size)
#define SELECT_VEC_DATA_TYPE(type, size) SELECT_VEC_DATA_TYPE_STR(type, size)
#define SELECT_DATA_TYPE(type) SELECT_VEC_DATA_TYPE_STR(type, 1)

#define sum_reduce_1(x) (x)
#define sum_reduce_2(x) ((x).s0) + ((x).s1)
#define sum_reduce_3(x) sum_reduce_2((x).s01) + ((x).s2)
#define sum_reduce_4(x) sum_reduce_2((x).s01) + sum_reduce_2((x).s23)
#define sum_reduce_8(x) sum_reduce_4((x).s0123) + sum_reduce_4((x).s4567)
#define sum_reduce_16(x) sum_reduce_8((x).s01234567) + sum_reduce_8((x).s89ABCDEF)

#define SUM_REDUCE_STR(x, size) sum_reduce_##size(x)
#define SUM_REDUCE(x, size) SUM_REDUCE_STR(x, size)

#define max_reduce_1(x) (x)
#define max_reduce_2(x) max(((x).s0), ((x).s1))
#define max_reduce_3(x) max(max_reduce_2((x).s01), ((x).s2))
#define max_reduce_4(x) max(max_reduce_2((x).s01), max_reduce_2((x).s23))
#define max_reduce_8(x) max(max_reduce_4((x).s0123), max_reduce_4((x).s4567))
#define max_reduce_16(x) max(max_reduce_8((x).s01234567), max_reduce_8((x).s89ABCDEF))

#define MAX_REDUCE_STR(x, size) max_reduce_##size(x)
#define MAX_REDUCE(x, size) MAX_REDUCE_STR(x, size)

#define VECTOR_DECLARATION(name)     \
    __global uchar *name##_ptr,      \
    uint        name##_stride_x, \
    uint        name##_step_x,   \
    uint        name##_offset_first_element_in_bytes

#define IMAGE_DECLARATION(name)      \
    __global uchar *name##_ptr,      \
    uint        name##_stride_x, \
    uint        name##_step_x,   \
    uint        name##_stride_y, \
    uint        name##_step_y,   \
    uint        name##_offset_first_element_in_bytes

#define TENSOR3D_DECLARATION(name)   \
    __global uchar *name##_ptr,      \
    uint        name##_stride_x, \
    uint        name##_step_x,   \
    uint        name##_stride_y, \
    uint        name##_step_y,   \
    uint        name##_stride_z, \
    uint        name##_step_z,   \
    uint        name##_offset_first_element_in_bytes

#define TENSOR4D_DECLARATION(name)   \
    __global uchar *name##_ptr,      \
    uint        name##_stride_x, \
    uint        name##_step_x,   \
    uint        name##_stride_y, \
    uint        name##_step_y,   \
    uint        name##_stride_z, \
    uint        name##_step_z,   \
    uint        name##_stride_w, \
    uint        name##_step_w,   \
    uint        name##_offset_first_element_in_bytes

#define CONVERT_TO_VECTOR_STRUCT(name) \
    update_vector_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x)

#define CONVERT_TO_VECTOR_STRUCT_NO_STEP(name) \
    update_vector_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, 0)

#define CONVERT_TO_IMAGE_STRUCT(name) \
    update_image_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y)

#define CONVERT_TO_IMAGE_STRUCT_NO_STEP(name) \
    update_image_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, 0, name##_stride_y, 0)

#define CONVERT_TENSOR3D_TO_IMAGE_STRUCT(name) \
    update_image_from_tensor3D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y, name##_stride_z, name##_step_z)

#define CONVERT_TENSOR3D_TO_IMAGE_STRUCT_NO_STEP(name) \
    update_image_from_tensor3D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, 0, name##_stride_y, 0, name##_stride_z, name##_step_z)

#define CONVERT_TENSOR3D_TO_IMAGE_STRUCT(name) \
    update_image_from_tensor3D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y, name##_stride_z, name##_step_z)

#define CONVERT_TO_TENSOR3D_STRUCT(name)                                                                                                           \
    update_tensor3D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y, \
                                 name##_stride_z, name##_step_z)

#define CONVERT_TO_TENSOR3D_STRUCT_NO_STEP(name) \
    update_tensor3D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, 0, name##_stride_y, 0, name##_stride_z, 0)

#define CONVERT_TO_TENSOR4D_STRUCT(name, mod_size)                                                                                                 \
    update_tensor4D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y, \
                                 name##_stride_z, name##_step_z, name##_stride_w, name##_step_w, mod_size)

#define CONVERT_TO_TENSOR4D_STRUCT_NO_STEP(name, mod_size) \
    update_tensor4D_workitem_ptr(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, 0, name##_stride_y, 0, name##_stride_z, 0, name##_stride_w, 0, mod_size)

#define CONVERT_TO_TENSOR3D_STRUCT_NO_UPDATE_PTR(name)                                                                                       \
    tensor3D_ptr_no_update(name##_ptr, name##_offset_first_element_in_bytes, name##_stride_x, name##_step_x, name##_stride_y, name##_step_y, \
                           name##_stride_z, name##_step_z)

/** Structure to hold Vector information */
typedef struct Vector
{
    __global uchar *ptr;                           /**< Pointer to the starting postion of the buffer */
    int             offset_first_element_in_bytes; /**< The offset of the first element in the source image */
    int             stride_x;                      /**< Stride of the image in X dimension (in bytes) */
} Vector;

/** Structure to hold Image information */
typedef struct Image
{
    __global uchar *ptr;                           /**< Pointer to the starting postion of the buffer */
    int             offset_first_element_in_bytes; /**< The offset of the first element in the source image */
    int             stride_x;                      /**< Stride of the image in X dimension (in bytes) */
    int             stride_y;                      /**< Stride of the image in Y dimension (in bytes) */
} Image;

/** Structure to hold 3D tensor information */
typedef struct Tensor3D
{
    __global uchar *ptr;                           /**< Pointer to the starting postion of the buffer */
    int             offset_first_element_in_bytes; /**< The offset of the first element in the source image */
    int             stride_x;                      /**< Stride of the image in X dimension (in bytes) */
    int             stride_y;                      /**< Stride of the image in Y dimension (in bytes) */
    int             stride_z;                      /**< Stride of the image in Z dimension (in bytes) */
} Tensor3D;

/** Structure to hold 4D tensor information */
typedef struct Tensor4D
{
    __global uchar *ptr;                           /**< Pointer to the starting postion of the buffer */
    int             offset_first_element_in_bytes; /**< The offset of the first element in the source image */
    int             stride_x;                      /**< Stride of the image in X dimension (in bytes) */
    int             stride_y;                      /**< Stride of the image in Y dimension (in bytes) */
    int             stride_z;                      /**< Stride of the image in Z dimension (in bytes) */
    int             stride_w;                      /**< Stride of the image in W dimension (in bytes) */
} Tensor4D;

/** Wrap vector information into an Vector structure, and make the pointer point at this workitem's data.
 *
 * @param[in] ptr                           Pointer to the starting postion of the buffer
 * @param[in] offset_first_element_in_bytes The offset of the first element in the source vector
 * @param[in] stride_x                      Stride of the vector in X dimension (in bytes)
 * @param[in] step_x                        stride_x * number of elements along X processed per workitem(in bytes)
 *
 * @return An image object
 */
inline Vector update_vector_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x)
{
    Vector vector =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
    };
    vector.ptr += vector.offset_first_element_in_bytes + get_global_id(0) * step_x;
    return vector;
}

/** Wrap image information into an Image structure, and make the pointer point at this workitem's data.
 *
 * @param[in] ptr                           Pointer to the starting postion of the buffer
 * @param[in] offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in] stride_x                      Stride of the image in X dimension (in bytes)
 * @param[in] step_x                        stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in] stride_y                      Stride of the image in Y dimension (in bytes)
 * @param[in] step_y                        stride_y * number of elements along Y processed per workitem(in bytes)
 *
 * @return An image object
 */
inline Image update_image_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y)
{
    Image img =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
        .stride_y                      = stride_y
    };
    img.ptr += img.offset_first_element_in_bytes + get_global_id(0) * step_x + get_global_id(1) * step_y;
    return img;
}

/** Wrap 3D tensor information into an image structure, and make the pointer point at this workitem's data.
 *
 * @param[in] ptr                           Pointer to the starting postion of the buffer
 * @param[in] offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in] stride_x                      Stride of the image in X dimension (in bytes)
 * @param[in] step_x                        stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in] stride_y                      Stride of the image in Y dimension (in bytes)
 * @param[in] step_y                        stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in] stride_z                      Stride of the image in Z dimension (in bytes)
 * @param[in] step_z                        stride_z * number of elements along Z processed per workitem(in bytes)
 *
 * @return A 3D tensor object
 */
inline Image update_image_from_tensor3D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)
{
    Image img =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
        .stride_y                      = stride_y
    };
    img.ptr += img.offset_first_element_in_bytes + get_global_id(0) * step_x + get_global_id(1) * step_y + get_global_id(2) * step_z;
    return img;
}

/** Wrap 3D tensor information into an tensor structure, and make the pointer point at this workitem's data.
 *
 * @param[in] ptr                           Pointer to the starting postion of the buffer
 * @param[in] offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in] stride_x                      Stride of the image in X dimension (in bytes)
 * @param[in] step_x                        stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in] stride_y                      Stride of the image in Y dimension (in bytes)
 * @param[in] step_y                        stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in] stride_z                      Stride of the image in Z dimension (in bytes)
 * @param[in] step_z                        stride_z * number of elements along Z processed per workitem(in bytes)
 *
 * @return A 3D tensor object
 */
inline Tensor3D update_tensor3D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)
{
    Tensor3D tensor =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
        .stride_y                      = stride_y,
        .stride_z                      = stride_z
    };
    tensor.ptr += tensor.offset_first_element_in_bytes + get_global_id(0) * step_x + get_global_id(1) * step_y + get_global_id(2) * step_z;
    return tensor;
}

/** Wrap 3D tensor information into an tensor structure.
 *
 * @param[in] ptr                           Pointer to the starting postion of the buffer
 * @param[in] offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in] stride_x                      Stride of the image in X dimension (in bytes)
 * @param[in] step_x                        stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in] stride_y                      Stride of the image in Y dimension (in bytes)
 * @param[in] step_y                        stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in] stride_z                      Stride of the image in Z dimension (in bytes)
 * @param[in] step_z                        stride_z * number of elements along Z processed per workitem(in bytes)
 *
 * @return A 3D tensor object
 */
inline Tensor3D tensor3D_ptr_no_update(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z)
{
    Tensor3D tensor =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
        .stride_y                      = stride_y,
        .stride_z                      = stride_z
    };
    return tensor;
}

inline Tensor4D update_tensor4D_workitem_ptr(__global uchar *ptr, uint offset_first_element_in_bytes, uint stride_x, uint step_x, uint stride_y, uint step_y, uint stride_z, uint step_z, uint stride_w,
                                             uint step_w,
                                             uint mod_size)
{
    Tensor4D tensor =
    {
        .ptr                           = ptr,
        .offset_first_element_in_bytes = offset_first_element_in_bytes,
        .stride_x                      = stride_x,
        .stride_y                      = stride_y,
        .stride_z                      = stride_z,
        .stride_w                      = stride_w
    };

    tensor.ptr += tensor.offset_first_element_in_bytes + get_global_id(0) * step_x + get_global_id(1) * step_y + (get_global_id(2) % mod_size) * step_z + (get_global_id(2) / mod_size) * step_w;
    return tensor;
}

/** Get the pointer position of a Vector
 *
 * @param[in] vec Pointer to the starting position of the buffer
 * @param[in] x   Relative X position
 */
inline __global const uchar *vector_offset(const Vector *vec, int x)
{
    return vec->ptr + x * vec->stride_x;
}

/** Get the pointer position of a Image
 *
 * @param[in] img Pointer to the starting position of the buffer
 * @param[in] x   Relative X position
 * @param[in] y   Relative Y position
 */
inline __global uchar *offset(const Image *img, int x, int y)
{
    return img->ptr + x * img->stride_x + y * img->stride_y;
}

/** Get the pointer position of a Tensor3D
 *
 * @param[in] tensor Pointer to the starting position of the buffer
 * @param[in] x      Relative X position
 * @param[in] y      Relative Y position
 * @param[in] z      Relative Z position
 */
inline __global const uchar *tensor3D_offset(const Tensor3D *tensor, int x, int y, int z)
{
    return tensor->ptr + x * tensor->stride_x + y * tensor->stride_y + z * tensor->stride_z;
}

/** Get the pointer position of a Tensor4D
 *
 * @param[in] tensor Pointer to the starting position of the buffer
 * @param[in] x      Relative X position
 * @param[in] y      Relative Y position
 * @param[in] z      Relative Z position
 * @param[in] w      Relative W position
 */
inline __global const uchar *tensor4D_offset(const Tensor4D *tensor, int x, int y, int z, int w)
{
    return tensor->ptr + x * tensor->stride_x + y * tensor->stride_y + z * tensor->stride_z + w * tensor->stride_w;
}

/** Get the offset for a given linear index of a Tensor3D
 *
 * @param[in] tensor Pointer to the starting position of the buffer
 * @param[in] width  Width of the input tensor
 * @param[in] height Height of the input tensor
 * @param[in] depth  Depth of the input tensor
 * @param[in] index  Linear index
 */
inline __global const uchar *tensor3D_index2ptr(const Tensor3D *tensor, uint width, uint height, uint depth, uint index)
{
    uint num_elements = width * height;

    const uint z = index / num_elements;

    index %= num_elements;

    const uint y = index / width;

    index %= width;

    const uint x = index;

    return tensor->ptr + x * tensor->stride_x + y * tensor->stride_y + z * tensor->stride_z + tensor->offset_first_element_in_bytes;
}

#endif // _HELPER_H

/** Convert an RGB888 image to RGBX8888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void RGB888_to_RGBA8888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 16 pixels every time
    uchar16 rgb_0 = vload16(0, in.ptr);
    uchar16 rgb_1 = vload16(0, in.ptr + 16);
    uchar16 rgb_2 = vload16(0, in.ptr + 32);

    uchar16 rgba_0 = (uchar16)(rgb_0.s012, 255, rgb_0.s345, 255, rgb_0.s678, 255, rgb_0.s9ab, 255);
    uchar16 rgba_1 = (uchar16)(rgb_0.scde, 255, rgb_0.sf, rgb_1.s01, 255, rgb_1.s234, 255, rgb_1.s567, 255);
    uchar16 rgba_2 = (uchar16)(rgb_1.s89a, 255, rgb_1.sbcd, 255, rgb_1.sef, rgb_2.s0, 255, rgb_2.s123, 255);
    uchar16 rgba_3 = (uchar16)(rgb_2.s456, 255, rgb_2.s789, 255, rgb_2.sabc, 255, rgb_2.sdef, 255);

    vstore16(rgba_0, 0, out.ptr);
    vstore16(rgba_1, 0, out.ptr + 16);
    vstore16(rgba_2, 0, out.ptr + 32);
    vstore16(rgba_3, 0, out.ptr + 48);
}

/** Convert an RGB888 image to U8
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: RGB888
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void RGB888_to_U8_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 16 pixels every time
    const uchar16 rgb_0 = vload16(0, in.ptr);
    const uchar16 rgb_1 = vload16(0, in.ptr + 16);
    const uchar16 rgb_2 = vload16(0, in.ptr + 32);

    //Resequence values from a sequence of 16 RGB values to sequence of 16 R, 16 G, 16 B values
    const uchar16 rgb_r = (uchar16)(rgb_0.s0369, rgb_0.scf, rgb_1.s258b, rgb_1.se, rgb_2.s147a, rgb_2.sd);
    const uchar16 rgb_g = (uchar16)(rgb_0.s147a, rgb_0.sd, rgb_1.s0369, rgb_1.scf, rgb_2.s258b, rgb_2.se);
    const uchar16 rgb_b = (uchar16)(rgb_0.s258b, rgb_0.se, rgb_1.s147a, rgb_1.sd, rgb_2.s0369, rgb_2.scf);

    const float16 rgb2u8_red_coef_bt709   = 0.2126f;
    const float16 rgb2u8_green_coef_bt709 = 0.7152f;
    const float16 rgb2u8_blue_coef_bt709  = 0.0722f;

    //Computation of 16 greyscale values in float
    const float16 greyscale_f_0 = rgb2u8_red_coef_bt709 * convert_float16(rgb_r) + rgb2u8_green_coef_bt709 * convert_float16(rgb_g) + rgb2u8_blue_coef_bt709 * convert_float16(rgb_b);

    //Convert it to 16 grayscale uchar values
    const uchar16 greyscale_u8_0 = convert_uchar16_sat_rtz(greyscale_f_0);

    vstore16(greyscale_u8_0, 0, out.ptr);
}

/** Convert an RGB888 image to RGBX8888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void RGBA8888_to_RGB888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);
    // handle 16 pixels every time
    uchar16 rgba_0 = vload16(0, in.ptr);
    uchar16 rgba_1 = vload16(0, in.ptr + 16);
    uchar16 rgba_2 = vload16(0, in.ptr + 32);
    uchar16 rgba_3 = vload16(0, in.ptr + 48);

    uchar16 rgb_0 = (uchar16)(rgba_0.s01245689, rgba_0.sacde, rgba_1.s0124);
    uchar16 rgb_1 = (uchar16)(rgba_1.s5689acde, rgba_2.s01245689);
    uchar16 rgb_2 = (uchar16)(rgba_2.sacde, rgba_3.s01245689, rgba_3.sacde);

    vstore16(rgb_0, 0, out.ptr);
    vstore16(rgb_1, 0, out.ptr + 16);
    vstore16(rgb_2, 0, out.ptr + 32);
}

/** Convert a UYVY422 image to RGB888 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void UYVY422_to_RGB888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 8 pixels every time
    uchar16 uyvy = vload16(0, in.ptr);

    uchar8 luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);
    char8  cb   = (char8)(uyvy.s0, uyvy.s0, uyvy.s4, uyvy.s4, uyvy.s8, uyvy.s8, uyvy.sc, uyvy.sc) - (char8)(128);
    char8  cr   = (char8)(uyvy.s2, uyvy.s2, uyvy.s6, uyvy.s6, uyvy.sa, uyvy.sa, uyvy.se, uyvy.se) - (char8)(128);

    float8 red_coef_bt709    = (float8)(1.5748f);
    float8 green_coef_bt709  = (float8)(-0.1873f);
    float8 green_coef2_bt709 = (float8)(-0.4681f);
    float8 blue_coef_bt709   = (float8)(1.8556f);
    float8 lumav             = convert_float8(luma);

    float8 f_r = red_coef_bt709 * convert_float8(cr);
    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);
    float8 f_b = blue_coef_bt709 * convert_float8(cb);

    f_r += lumav;
    f_g += lumav;
    f_b += lumav;

    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);
    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);
    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);

    uchar16 rgb_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2, b_0.s2,
                              r_0.s3, g_0.s3, b_0.s3, r_0.s4, g_0.s4, b_0.s4, r_0.s5);
    uchar8 rgb_1 = (uchar8)(g_0.s5, b_0.s5, r_0.s6, g_0.s6, b_0.s6, r_0.s7, g_0.s7, b_0.s7);

    vstore16(rgb_0, 0, out.ptr);
    vstore8(rgb_1, 0, out.ptr + 16);
}

/** Convert a UYVY422 image to RGBX8888 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void UYVY422_to_RGBA8888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 8 pixels every time
    uchar16 uyvy = vload16(0, in.ptr);

    uchar8 luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);
    char8  cb   = (char8)(uyvy.s0, uyvy.s0, uyvy.s4, uyvy.s4, uyvy.s8, uyvy.s8, uyvy.sc, uyvy.sc) - (char8)(128);
    char8  cr   = (char8)(uyvy.s2, uyvy.s2, uyvy.s6, uyvy.s6, uyvy.sa, uyvy.sa, uyvy.se, uyvy.se) - (char8)(128);

    float8 red_coef_bt709    = (float8)(1.5748f);
    float8 green_coef_bt709  = (float8)(-0.1873f);
    float8 green_coef2_bt709 = (float8)(-0.4681f);
    float8 blue_coef_bt709   = (float8)(1.8556f);
    float8 lumav             = convert_float8(luma);

    float8 f_r = red_coef_bt709 * convert_float8(cr);
    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);
    float8 f_b = blue_coef_bt709 * convert_float8(cb);

    f_r += lumav;
    f_g += lumav;
    f_b += lumav;

    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);
    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);
    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);

    uchar16 rgba_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255,
                               r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    uchar16 rgba_1 = (uchar16)(r_0.s4, g_0.s4, b_0.s4, 255, r_0.s5, g_0.s5, b_0.s5, 255,
                               r_0.s6, g_0.s6, b_0.s6, 255, r_0.s7, g_0.s7, b_0.s7, 255);

    vstore16(rgba_0, 0, out.ptr);
    vstore16(rgba_1, 0, out.ptr + 16);
}

/** Convert a YUYV422 image to RGB888 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void YUYV422_to_RGB888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 8 pixels every time
    uchar16 uyvy = vload16(0, in.ptr);

    uchar8 luma = (uchar8)(uyvy.s0, uyvy.s2, uyvy.s4, uyvy.s6, uyvy.s8, uyvy.sa, uyvy.sc, uyvy.se);
    char8  cb   = (char8)(uyvy.s1, uyvy.s1, uyvy.s5, uyvy.s5, uyvy.s9, uyvy.s9, uyvy.sd, uyvy.sd) - (char8)(128);
    char8  cr   = (char8)(uyvy.s3, uyvy.s3, uyvy.s7, uyvy.s7, uyvy.sb, uyvy.sb, uyvy.sf, uyvy.sf) - (char8)(128);

    float8 red_coef_bt709    = (float8)(1.5748f);
    float8 green_coef_bt709  = (float8)(-0.1873f);
    float8 green_coef2_bt709 = (float8)(-0.4681f);
    float8 blue_coef_bt709   = (float8)(1.8556f);
    float8 lumav             = convert_float8(luma);

    float8 f_r = red_coef_bt709 * convert_float8(cr);
    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);
    float8 f_b = blue_coef_bt709 * convert_float8(cb);

    f_r += lumav;
    f_g += lumav;
    f_b += lumav;

    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);
    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);
    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);

    uchar16 rgb_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2, b_0.s2,
                              r_0.s3, g_0.s3, b_0.s3, r_0.s4, g_0.s4, b_0.s4, r_0.s5);
    uchar8 rgb_1 = (uchar8)(g_0.s5, b_0.s5, r_0.s6, g_0.s6, b_0.s6, r_0.s7, g_0.s7, b_0.s7);

    vstore16(rgb_0, 0, out.ptr);
    vstore8(rgb_1, 0, out.ptr + 16);
}

/** Convert a YUYV422 image to RGBX8888 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                         input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  output_step_x                        output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void YUYV422_to_RGBA8888_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(output))
{
    Image in  = CONVERT_TO_IMAGE_STRUCT(input);
    Image out = CONVERT_TO_IMAGE_STRUCT(output);

    // handle 8 pixels every time
    uchar16 uyvy = vload16(0, in.ptr);

    uchar8 luma = (uchar8)(uyvy.s0, uyvy.s2, uyvy.s4, uyvy.s6, uyvy.s8, uyvy.sa, uyvy.sc, uyvy.se);
    char8  cb   = (char8)(uyvy.s1, uyvy.s1, uyvy.s5, uyvy.s5, uyvy.s9, uyvy.s9, uyvy.sd, uyvy.sd) - (char8)(128);
    char8  cr   = (char8)(uyvy.s3, uyvy.s3, uyvy.s7, uyvy.s7, uyvy.sb, uyvy.sb, uyvy.sf, uyvy.sf) - (char8)(128);

    float8 red_coef_bt709    = (float8)(1.5748f);
    float8 green_coef_bt709  = (float8)(-0.1873f);
    float8 green_coef2_bt709 = (float8)(-0.4681f);
    float8 blue_coef_bt709   = (float8)(1.8556f);
    float8 lumav             = convert_float8(luma);

    float8 f_r = red_coef_bt709 * convert_float8(cr);
    float8 f_g = green_coef_bt709 * convert_float8(cb) + green_coef2_bt709 * convert_float8(cr);
    float8 f_b = blue_coef_bt709 * convert_float8(cb);

    f_r += lumav;
    f_g += lumav;
    f_b += lumav;

    uchar8 r_0 = convert_uchar8_sat_rtz(f_r);
    uchar8 g_0 = convert_uchar8_sat_rtz(f_g);
    uchar8 b_0 = convert_uchar8_sat_rtz(f_b);

    uchar16 rgba_0 = (uchar16)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255,
                               r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    uchar16 rgba_1 = (uchar16)(r_0.s4, g_0.s4, b_0.s4, 255, r_0.s5, g_0.s5, b_0.s5, 255,
                               r_0.s6, g_0.s6, b_0.s6, 255, r_0.s7, g_0.s7, b_0.s7, 255);

    vstore16(rgba_0, 0, out.ptr);
    vstore16(rgba_1, 0, out.ptr + 16);
}

/** Convert a RGB image to NV12 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  input_ptr                           Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                      Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                        input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                      Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                        input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[out] luma_ptr                            Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_stride_x                       Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_step_x                         luma_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_stride_y                       Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_step_y                         luma_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_offset_first_element_in_bytes  The offset of the first element in the destination image luma channel
 * @param[out] uv_ptr                              Pointer to the destination uv channel. Supported Format: U8
 * @param[in]  uv_stride_x                         Stride of the destination uv channel in X dimension (in bytes)
 * @param[in]  uv_step_x                           uv_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_stride_y                         Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  uv_step_y                           uv_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_offset_first_element_in_bytes    The offset of the first element in the destination image uv channel
 *
 */
__kernel void RGB888_to_NV12_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(luma),
    IMAGE_DECLARATION(uv))
{
    Image in     = CONVERT_TO_IMAGE_STRUCT(input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma);
    Image out_uv = CONVERT_TO_IMAGE_STRUCT(uv);

    // handle 4 pixels every time, two lines, each line for 2 pixels
    // Read 2 pixel of the first line
    uchar8 rgb_0 = vload8(0, in.ptr);
    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s3);
    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s4);
    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s5);

    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);
    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);
    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);

    short2 i_y = convert_short2_rtz(f_y);
    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);
    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_0, 0, out_y.ptr);

    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));

    // Read 2 pixel of the second line
    uchar8 rgb_1 = vload8(0, in.ptr + input_stride_y);
    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s3);
    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s4);
    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s5);

    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);
    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);
    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);

    i_y = convert_short2_rtz(f_y);
    i_u = convert_short2_rtz(f_u) + (short2)(128);
    i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_1, 0, out_y.ptr + luma_stride_y);

    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));
    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),
                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));

    vstore2(cbcr, 0, out_uv.ptr);
}

/*
    R'= Y' + 0.0000*U + 1.5748*V
    G'= Y' - 0.1873*U - 0.4681*V
    B'= Y' + 1.8556*U + 0.0000*V
*/

/** Convert an NV12 image to RGB888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                           Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                      Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                        luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                      Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                        luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in]  uv_input_ptr                             Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                        Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                          uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                        Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                          uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes   The offset of the first element in the source image
 * @param[out] rgb_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgb_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgb_output_step_x                        rgb_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgb_output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void NV12_to_RGB888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(rgb_output))
{
    Image in_luma = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv   = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_output);

    // handle 8 pixels every time, two lines, each line for 4 pixels
    uchar4 luma_0 = vload4(0, in_luma.ptr);
    uchar4 luma_1 = vload4(0, in_luma.ptr + luma_input_stride_y);
    uchar4 cbcr   = vload4(0, in_uv.ptr);
    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);
    char4  cr     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore4(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr + rgb_output_stride_y);
    vstore4(rgb_1, 0, out_rgb.ptr + rgb_output_stride_y + 8);
}

/** Convert a RGB image to YUV444 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  rgb_input_ptr                             Pointer to the source image. Supported Format: U8
 * @param[in]  rgb_input_stride_x                        Stride of the source image in X dimension (in bytes)
 * @param[in]  rgb_input_step_x                          input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_input_stride_y                        Stride of the source image in Y dimension (in bytes)
 * @param[in]  rgb_input_step_y                          rgb_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_input_offset_first_element_in_bytes   The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination image V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void RGB888_to_YUV444_bt709(
    IMAGE_DECLARATION(rgb_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    // handle 4 pixels every time
    Image in_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u  = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v  = CONVERT_TO_IMAGE_STRUCT(v_output);

    // Read 4 pixel
    uchar16 rgb_0 = vload16(0, in_rgb.ptr);
    uchar4  r_0   = (uchar4)(rgb_0.s0, rgb_0.s3, rgb_0.s6, rgb_0.s9);
    uchar4  g_0   = (uchar4)(rgb_0.s1, rgb_0.s4, rgb_0.s7, rgb_0.sa);
    uchar4  b_0   = (uchar4)(rgb_0.s2, rgb_0.s5, rgb_0.s8, rgb_0.sb);

    float4 f_y = (float4)(0.0000f) + (float4)(0.2126f) * convert_float4(r_0) + (float4)(0.7152f) * convert_float4(g_0) + (float4)(0.0722f) * convert_float4(b_0);
    float4 f_u = (float4)(0.0000f) - (float4)(0.1146f) * convert_float4(r_0) - (float4)(0.3854f) * convert_float4(g_0) + (float4)(0.5000f) * convert_float4(b_0);
    float4 f_v = (float4)(0.0000f) + (float4)(0.5000f) * convert_float4(r_0) - (float4)(0.4542f) * convert_float4(g_0) - (float4)(0.0458f) * convert_float4(b_0);

    short4 i_y = convert_short4_rtz(f_y);
    short4 i_u = convert_short4_rtz(f_u) + (short4)(128);
    short4 i_v = convert_short4_rtz(f_v) + (short4)(128);

    uchar4 luma_0 = convert_uchar4(max((short4)(0), min(i_y, (short4)(255))));
    vstore4(luma_0, 0, out_y.ptr);

    uchar4 cb_0 = convert_uchar4(max((short4)(0), min(i_u, (short4)(255))));
    uchar4 cr_0 = convert_uchar4(max((short4)(0), min(i_v, (short4)(255))));
    vstore4(cb_0, 0, out_u.ptr);
    vstore4(cr_0, 0, out_v.ptr);
}

/** Convert a RGB image to IYUV using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 2), height ]
 * No offset.
 *
 * @param[in]  rgb_input_ptr                             Pointer to the source image. Supported Format: U8
 * @param[in]  rgb_input_stride_x                        Stride of the source image in X dimension (in bytes)
 * @param[in]  rgb_input_step_x                          input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_input_stride_y                        Stride of the source image in Y dimension (in bytes)
 * @param[in]  rgb_input_step_y                          rgb_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_input_offset_first_element_in_bytes   The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void RGB888_to_IYUV_bt709(
    IMAGE_DECLARATION(rgb_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    // handle 4 pixels every time, two lines, each line for 2 pixels
    Image in_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u  = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v  = CONVERT_TO_IMAGE_STRUCT(v_output);

    // Read 2 pixel of the first line
    uchar8 rgb_0 = vload8(0, in_rgb.ptr);
    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s3);
    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s4);
    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s5);

    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);
    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);
    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);

    short2 i_y = convert_short2_rtz(f_y);
    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);
    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_0, 0, out_y.ptr);

    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));

    // Read 2 pixel of the second line
    uchar8 rgb_1 = vload8(0, in_rgb.ptr + rgb_input_stride_y);
    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s3);
    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s4);
    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s5);

    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);
    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);
    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);

    i_y = convert_short2_rtz(f_y);
    i_u = convert_short2_rtz(f_u) + (short2)(128);
    i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_1, 0, out_y.ptr + luma_output_stride_y);

    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));
    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),
                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));
    *out_u.ptr = cbcr.x;
    *out_v.ptr = cbcr.y;
}

/** Convert a RGBA image to YUV444 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  rgba_input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  rgba_input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  rgba_input_step_x                         input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgba_input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  rgba_input_step_y                         rgb_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgba_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination image V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void RGBA8888_to_YUV444_bt709(
    IMAGE_DECLARATION(rgba_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    // handle 4 pixels every time
    Image in_rgba = CONVERT_TO_IMAGE_STRUCT(rgba_input);
    Image out_y   = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u   = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v   = CONVERT_TO_IMAGE_STRUCT(v_output);

    // Read 4 pixel
    uchar16 rgb_0 = vload16(0, in_rgba.ptr);
    uchar4  r_0   = (uchar4)(rgb_0.s0, rgb_0.s4, rgb_0.s8, rgb_0.sc);
    uchar4  g_0   = (uchar4)(rgb_0.s1, rgb_0.s5, rgb_0.s9, rgb_0.sd);
    uchar4  b_0   = (uchar4)(rgb_0.s2, rgb_0.s6, rgb_0.sa, rgb_0.se);

    float4 f_y = (float4)(0.0000f) + (float4)(0.2126f) * convert_float4(r_0) + (float4)(0.7152f) * convert_float4(g_0) + (float4)(0.0722f) * convert_float4(b_0);
    float4 f_u = (float4)(0.0000f) - (float4)(0.1146f) * convert_float4(r_0) - (float4)(0.3854f) * convert_float4(g_0) + (float4)(0.5000f) * convert_float4(b_0);
    float4 f_v = (float4)(0.0000f) + (float4)(0.5000f) * convert_float4(r_0) - (float4)(0.4542f) * convert_float4(g_0) - (float4)(0.0458f) * convert_float4(b_0);

    short4 i_y = convert_short4(f_y);
    short4 i_u = convert_short4(f_u) + (short4)(128);
    short4 i_v = convert_short4(f_v) + (short4)(128);

    uchar4 luma_0 = convert_uchar4_sat(max((short4)(0), min(i_y, (short4)(255))));
    vstore4(luma_0, 0, out_y.ptr);

    uchar4 cb_0 = convert_uchar4_sat(max((short4)(0), min(i_u, (short4)(255))));
    uchar4 cr_0 = convert_uchar4_sat(max((short4)(0), min(i_v, (short4)(255))));
    vstore4(cb_0, 0, out_u.ptr);
    vstore4(cr_0, 0, out_v.ptr);
}

/** Convert a RGBA image to NV12 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 2), height ]
 * No offset.
 *
 * @param[in]  input_ptr                                 Pointer to the source image. Supported Format: U8
 * @param[in]  input_stride_x                            Stride of the source image in X dimension (in bytes)
 * @param[in]  input_step_x                              input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_stride_y                            Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_step_y                              input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_offset_first_element_in_bytes       The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination image luma channel
 * @param[out] uv_output_ptr                             Pointer to the destination uv channel. Supported Format: U8
 * @param[in]  uv_output_stride_x                        Stride of the destination uv channel in X dimension (in bytes)
 * @param[in]  uv_output_step_x                          uv_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_output_stride_y                        Stride of the destination image uv channel in Y dimension (in bytes)
 * @param[in]  uv_output_step_y                          uv_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_output_offset_first_element_in_bytes   The offset of the first element in the destination image uv channel
 *
 */
__kernel void RGBA8888_to_NV12_bt709(
    IMAGE_DECLARATION(input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(uv_output))
{
    Image in     = CONVERT_TO_IMAGE_STRUCT(input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_uv = CONVERT_TO_IMAGE_STRUCT(uv_output);

    // Read 2 pixel of the first line
    uchar8 rgb_0 = vload8(0, in.ptr);
    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s4);
    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s5);
    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s6);

    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);
    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);
    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);

    short2 i_y = convert_short2_rtz(f_y);
    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);
    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_0, 0, out_y.ptr);

    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));

    // Read 2 pixel of the second line
    uchar8 rgb_1 = vload8(0, in.ptr + input_stride_y);
    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s4);
    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s5);
    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s6);

    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);
    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);
    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);

    i_y = convert_short2_rtz(f_y);
    i_u = convert_short2_rtz(f_u) + (short2)(128);
    i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_1, 0, out_y.ptr + luma_output_stride_y);

    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));
    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),
                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));
    vstore2(cbcr, 0, out_uv.ptr);
}

/** Convert a RGBA image to IYUV using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 2), height ]
 * No offset.
 *
 * @param[in]  rgba_input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  rgba_input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  rgba_input_step_x                         rgba_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgba_input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  rgba_input_step_y                         rgba_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgba_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void RGBA8888_to_IYUV_bt709(
    IMAGE_DECLARATION(rgba_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    // handle 4 pixels every time, two lines, each line for 2 pixels
    Image in_rgb = CONVERT_TO_IMAGE_STRUCT(rgba_input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u  = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v  = CONVERT_TO_IMAGE_STRUCT(v_output);

    // Read 2 pixel of the first line
    uchar8 rgb_0 = vload8(0, in_rgb.ptr);
    uchar2 r_0   = (uchar2)(rgb_0.s0, rgb_0.s4);
    uchar2 g_0   = (uchar2)(rgb_0.s1, rgb_0.s5);
    uchar2 b_0   = (uchar2)(rgb_0.s2, rgb_0.s6);

    float2 f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_0) + (float2)(0.7152f) * convert_float2(g_0) + (float2)(0.0722f) * convert_float2(b_0);
    float2 f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_0) - (float2)(0.3854f) * convert_float2(g_0) + (float2)(0.5000f) * convert_float2(b_0);
    float2 f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_0) - (float2)(0.4542f) * convert_float2(g_0) - (float2)(0.0458f) * convert_float2(b_0);

    short2 i_y = convert_short2_rtz(f_y);
    short2 i_u = convert_short2_rtz(f_u) + (short2)(128);
    short2 i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_0 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_0, 0, out_y.ptr);

    uchar2 cb_0 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_0 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));

    // Read 2 pixel of the second line
    uchar8 rgb_1 = vload8(0, in_rgb.ptr + rgba_input_stride_y);
    uchar2 r_1   = (uchar2)(rgb_1.s0, rgb_1.s4);
    uchar2 g_1   = (uchar2)(rgb_1.s1, rgb_1.s5);
    uchar2 b_1   = (uchar2)(rgb_1.s2, rgb_1.s6);

    f_y = (float2)(0.0000f) + (float2)(0.2126f) * convert_float2(r_1) + (float2)(0.7152f) * convert_float2(g_1) + (float2)(0.0722f) * convert_float2(b_1);
    f_u = (float2)(0.0000f) - (float2)(0.1146f) * convert_float2(r_1) - (float2)(0.3854f) * convert_float2(g_1) + (float2)(0.5000f) * convert_float2(b_1);
    f_v = (float2)(0.0000f) + (float2)(0.5000f) * convert_float2(r_1) - (float2)(0.4542f) * convert_float2(g_1) - (float2)(0.0458f) * convert_float2(b_1);

    i_y = convert_short2_rtz(f_y);
    i_u = convert_short2_rtz(f_u) + (short2)(128);
    i_v = convert_short2_rtz(f_v) + (short2)(128);

    uchar2 luma_1 = convert_uchar2(max((short2)(0), min(i_y, (short2)(255))));
    vstore2(luma_1, 0, out_y.ptr + luma_output_stride_y);

    uchar2 cb_1 = convert_uchar2(max((short2)(0), min(i_u, (short2)(255))));
    uchar2 cr_1 = convert_uchar2(max((short2)(0), min(i_v, (short2)(255))));
    uchar2 cbcr = (uchar2)(((cb_0.s0 + cb_0.s1 + cb_1.s0 + cb_1.s1) / 4),
                           ((cr_0.s0 + cr_0.s1 + cr_1.s0 + cr_1.s1) / 4));
    *out_u.ptr = cbcr.x;
    *out_v.ptr = cbcr.y;
}

/** Convert an NV12 image to RGB8888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                           Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                      Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                        luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                      Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                        luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in]  uv_input_ptr                             Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                        Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                          uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                        Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                          uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes   The offset of the first element in the source image
 * @param[out] rgb_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgb_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgb_output_step_x                        rgb_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgb_output_step_y                        rgb_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void NV12_to_RGBA8888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(rgb_output))
{
    Image in_luma = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv   = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_output);

    uchar4 luma_0 = vload4(0, in_luma.ptr);
    uchar4 luma_1 = vload4(0, in_luma.ptr + luma_input_stride_y);
    uchar4 cbcr   = vload4(0, in_uv.ptr);
    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);
    char4  cr     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore8(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr + rgb_output_stride_y);
    vstore8(rgb_1, 0, out_rgb.ptr + rgb_output_stride_y + 8);
}

/** Convert an NV12 image to IYUV
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  uv_input_ptr                              Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                         Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                           uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                           uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes    The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 */
__kernel void NV12_to_IYUV_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_y  = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_y = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 32 pixels every time, two lines, each line for 16 pixels
    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar16 cbcr   = vload16(0, in_uv.ptr);
    uchar8  cb     = (uchar8)(cbcr.s0, cbcr.s2, cbcr.s4, cbcr.s6, cbcr.s8, cbcr.sa, cbcr.sc, cbcr.se);
    uchar8  cr     = (uchar8)(cbcr.s1, cbcr.s3, cbcr.s5, cbcr.s7, cbcr.s9, cbcr.sb, cbcr.sd, cbcr.sf);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore8(cb, 0, out_u.ptr);
    vstore8(cr, 0, out_v.ptr);
}

/** Convert an NV12 image to YUV444
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  uv_input_ptr                              Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                         Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                           uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                           uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes    The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 */
__kernel void NV12_to_YUV444_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_y  = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_y = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 32 pixels every time, two lines, each line for 16 pixels
    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar16 cbcr   = vload16(0, in_uv.ptr);
    uchar16 cb     = (uchar16)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2, cbcr.s4, cbcr.s4, cbcr.s6, cbcr.s6, cbcr.s8, cbcr.s8,
                               cbcr.sa, cbcr.sa, cbcr.sc, cbcr.sc, cbcr.se, cbcr.se);
    uchar16 cr = (uchar16)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3, cbcr.s5, cbcr.s5, cbcr.s7, cbcr.s7, cbcr.s9, cbcr.s9,
                           cbcr.sb, cbcr.sb, cbcr.sd, cbcr.sd, cbcr.sf, cbcr.sf);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore16(cb, 0, out_u.ptr);
    vstore16(cb, 0, out_u.ptr + u_output_stride_y);
    vstore16(cr, 0, out_v.ptr);
    vstore16(cr, 0, out_v.ptr + v_output_stride_y);
}

/** Convert an NV21 image to RGB888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                           Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                      Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                        luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                      Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                        luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in]  uv_input_ptr                             Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                        Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                          uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                        Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                          uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes   The offset of the first element in the source image
 * @param[out] rgb_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgb_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgb_output_step_x                        rgb_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgb_output_step_y                        output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void NV21_to_RGB888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(rgb_output))
{
    Image in_y    = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv   = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_output);

    // handle 8 pixels every time, two lines, each line for 4 pixels
    uchar4 luma_0 = vload4(0, in_y.ptr);
    uchar4 luma_1 = vload4(0, in_y.ptr + luma_input_stride_y);
    uchar4 cbcr   = vload4(0, in_uv.ptr);
    char4  cr     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);
    char4  cb     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore4(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr + rgb_output_stride_y);
    vstore4(rgb_1, 0, out_rgb.ptr + rgb_output_stride_y + 8);
}

/** Convert an NV12 image to RGB8888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  uv_input_ptr                              Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                         Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                           uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                           uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes    The offset of the first element in the source image
 * @param[out] rgba_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgba_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgba_output_step_x                        rgba_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgba_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgba_output_step_y                        rgba_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgba_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void NV21_to_RGBA8888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(rgba_output))
{
    Image in_luma = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv   = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgba_output);

    // handle 8 pixels every time, two lines, each line for 4 pixels
    uchar4 luma_0 = vload4(0, in_luma.ptr);
    uchar4 luma_1 = vload4(0, in_luma.ptr + luma_input_stride_y);
    uchar4 cbcr   = vload4(0, in_uv.ptr);
    char4  cr     = (char4)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2) - (char4)(128);
    char4  cb     = (char4)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore8(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr + rgba_output_stride_y);
    vstore8(rgb_1, 0, out_rgb.ptr + rgba_output_stride_y + 8);
}

/** Convert an NV21 image to YUV444
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  uv_input_ptr                              Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                         Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                           uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                           uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes    The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 */
__kernel void NV21_to_YUV444_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_y  = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_y = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 32 pixels every time, two lines, each line for 16 pixels
    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar16 cbcr   = vload16(0, in_uv.ptr);
    uchar16 cr     = (uchar16)(cbcr.s0, cbcr.s0, cbcr.s2, cbcr.s2, cbcr.s4, cbcr.s4, cbcr.s6, cbcr.s6, cbcr.s8, cbcr.s8,
                               cbcr.sa, cbcr.sa, cbcr.sc, cbcr.sc, cbcr.se, cbcr.se);
    uchar16 cb = (uchar16)(cbcr.s1, cbcr.s1, cbcr.s3, cbcr.s3, cbcr.s5, cbcr.s5, cbcr.s7, cbcr.s7, cbcr.s9, cbcr.s9,
                           cbcr.sb, cbcr.sb, cbcr.sd, cbcr.sd, cbcr.sf, cbcr.sf);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore16(cb, 0, out_u.ptr);
    vstore16(cb, 0, out_u.ptr + u_output_stride_y);
    vstore16(cr, 0, out_v.ptr);
    vstore16(cr, 0, out_v.ptr + v_output_stride_y);
}

/** Convert an NV21 image to IYUV
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  uv_input_ptr                              Pointer to the source uv channel. Supported Format: U8
 * @param[in]  uv_input_stride_x                         Stride of the source image uv channel in X dimension (in bytes)
 * @param[in]  uv_input_step_x                           uv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  uv_input_step_y                           uv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_input_offset_first_element_in_bytes    The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 */
__kernel void NV21_to_IYUV_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(uv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_y  = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_uv = CONVERT_TO_IMAGE_STRUCT(uv_input);
    Image out_y = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v = CONVERT_TO_IMAGE_STRUCT(v_output);

    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar16 cbcr   = vload16(0, in_uv.ptr);
    uchar8  cr     = (uchar8)(cbcr.s0, cbcr.s2, cbcr.s4, cbcr.s6, cbcr.s8, cbcr.sa, cbcr.sc, cbcr.se);
    uchar8  cb     = (uchar8)(cbcr.s1, cbcr.s3, cbcr.s5, cbcr.s7, cbcr.s9, cbcr.sb, cbcr.sd, cbcr.sf);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore8(cb, 0, out_u.ptr);
    vstore8(cr, 0, out_v.ptr);
}

/** Convert a UYVY image to IYUV using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  uyvy_input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  uyvy_input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  uyvy_input_step_x                         uyvy_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uyvy_input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  uyvy_input_step_y                         uyvy_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uyvy_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void UYVY422_to_IYUV_bt709(
    IMAGE_DECLARATION(uyvy_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_uyvy = CONVERT_TO_IMAGE_STRUCT(uyvy_input);
    Image out_y   = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u   = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v   = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 16 pixels every time, each line 8 pixels
    uchar16 uyvy = vload16(0, in_uyvy.ptr);
    uchar8  luma = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);
    ushort4 cb_0 = (ushort4)(uyvy.s0, uyvy.s4, uyvy.s8, uyvy.sc);
    ushort4 cr_0 = (ushort4)(uyvy.s2, uyvy.s6, uyvy.sa, uyvy.se);
    vstore8(luma, 0, out_y.ptr);

    uyvy         = vload16(0, in_uyvy.ptr + uyvy_input_stride_y);
    luma         = (uchar8)(uyvy.s1, uyvy.s3, uyvy.s5, uyvy.s7, uyvy.s9, uyvy.sb, uyvy.sd, uyvy.sf);
    ushort4 cb_1 = (ushort4)(uyvy.s0, uyvy.s4, uyvy.s8, uyvy.sc);
    ushort4 cr_1 = (ushort4)(uyvy.s2, uyvy.s6, uyvy.sa, uyvy.se);
    vstore8(luma, 0, out_y.ptr + luma_output_stride_y);

    uchar4 cb = convert_uchar4((cb_0 + cb_1) / (ushort4)(2));
    uchar4 cr = convert_uchar4((cr_0 + cr_1) / (ushort4)(2));
    vstore4(cb, 0, out_u.ptr);
    vstore4(cr, 0, out_v.ptr);
}

/** Convert a YUYV image to IYUV using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  yuyv_input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  yuyv_input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  yuyv_input_step_x                         yuyv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  yuyv_input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  yuyv_input_step_y                         yuyv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  yuyv_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void YUYV422_to_IYUV_bt709(
    IMAGE_DECLARATION(yuyv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_yuyv = CONVERT_TO_IMAGE_STRUCT(yuyv_input);
    Image out_y   = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u   = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v   = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 16 pixels every time, each line 8 pixels
    uchar16 yuyv = vload16(0, in_yuyv.ptr);
    uchar8  luma = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);
    ushort4 cb_0 = (ushort4)(yuyv.s1, yuyv.s5, yuyv.s9, yuyv.sd);
    ushort4 cr_0 = (ushort4)(yuyv.s3, yuyv.s7, yuyv.sb, yuyv.sf);
    vstore8(luma, 0, out_y.ptr);

    yuyv         = vload16(0, in_yuyv.ptr + yuyv_input_stride_y);
    luma         = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);
    ushort4 cb_1 = (ushort4)(yuyv.s1, yuyv.s5, yuyv.s9, yuyv.sd);
    ushort4 cr_1 = (ushort4)(yuyv.s3, yuyv.s7, yuyv.sb, yuyv.sf);
    vstore8(luma, 0, out_y.ptr + luma_output_stride_y);

    uchar4 cb = convert_uchar4((cb_0 + cb_1) / (ushort4)(2));
    uchar4 cr = convert_uchar4((cr_0 + cr_1) / (ushort4)(2));
    vstore4(cb, 0, out_u.ptr);
    vstore4(cr, 0, out_v.ptr);
}

/** Convert an IYUV image to RGB888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                           Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                      Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                        luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                      Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                        luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[in]  u_input_ptr                              Pointer to the source U channel. Supported Format: U8
 * @param[in]  u_input_stride_x                         Stride of the source image U channel in X dimension (in bytes)
 * @param[in]  u_input_step_x                           u_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_input_stride_y                         Stride of the source image in Y dimension (in bytes)
 * @param[in]  u_input_step_y                           u_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_input_offset_first_element_in_bytes    The offset of the first element in the source U channel
 * @param[in]  v_input_ptr                              Pointer to the source V channel. Supported Format: U8
 * @param[in]  v_input_stride_x                         Stride of the source image V channel in X dimension (in bytes)
 * @param[in]  v_input_step_x                           v_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_input_stride_y                         Stride of the source image V channel in Y dimension (in bytes)
 * @param[in]  v_input_step_y                           v_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_input_offset_first_element_in_bytes    The offset of the first element in the source image V channel
 * @param[out] rgb_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgb_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgb_output_step_x                        rgb_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgb_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgb_output_step_y                        rgb_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgb_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void IYUV_to_RGB888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(u_input),
    IMAGE_DECLARATION(v_input),
    IMAGE_DECLARATION(rgb_output))
{
    Image in_y    = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_u    = CONVERT_TO_IMAGE_STRUCT(u_input);
    Image in_v    = CONVERT_TO_IMAGE_STRUCT(v_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgb_output);

    // handle 8 pixels every time, two lines, each line for 4 pixels
    uchar4 luma_0 = vload4(0, in_y.ptr);
    uchar4 luma_1 = vload4(0, in_y.ptr + luma_input_stride_y);
    uchar4 cbcr   = (uchar4)(vload2(0, in_u.ptr), vload2(0, in_v.ptr));
    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s1, cbcr.s1) - (char4)(128);
    char4  cr     = (char4)(cbcr.s2, cbcr.s2, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    uchar4 rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore4(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, r_0.s1, g_0.s1, b_0.s1, r_0.s2, g_0.s2);
    rgb_1 = (uchar4)(b_0.s2, r_0.s3, g_0.s3, b_0.s3);
    vstore8(rgb_0, 0, out_rgb.ptr + rgb_output_stride_y);
    vstore4(rgb_1, 0, out_rgb.ptr + rgb_output_stride_y + 8);
}

/** Convert an IYUV image to RGB8888
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  u_input_ptr                               Pointer to the source U channel. Supported Format: U8
 * @param[in]  u_input_stride_x                          Stride of the source image U channel in X dimension (in bytes)
 * @param[in]  u_input_step_x                            u_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_input_stride_y                          Stride of the source image in Y dimension (in bytes)
 * @param[in]  u_input_step_y                            u_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_input_offset_first_element_in_bytes     The offset of the first element in the source U channel
 * @param[in]  v_input_ptr                               Pointer to the source V channel. Supported Format: U8
 * @param[in]  v_input_stride_x                          Stride of the source image V channel in X dimension (in bytes)
 * @param[in]  v_input_step_x                            v_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_input_stride_y                          Stride of the source image V channel in Y dimension (in bytes)
 * @param[in]  v_input_step_y                            v_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_input_offset_first_element_in_bytes     The offset of the first element in the source image V channel
 * @param[out] rgba_output_ptr                           Pointer to the destination image. Supported Format: U8
 * @param[in]  rgba_output_stride_x                      Stride of the destination image in X dimension (in bytes)
 * @param[in]  rgba_output_step_x                        rgba_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  rgba_output_stride_y                      Stride of the destination image in Y dimension (in bytes)
 * @param[in]  rgba_output_step_y                        rgba_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  rgba_output_offset_first_element_in_bytes The offset of the first element in the destination image
 */
__kernel void IYUV_to_RGBA8888_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(u_input),
    IMAGE_DECLARATION(v_input),
    IMAGE_DECLARATION(rgba_output))
{
    Image in_y    = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_u    = CONVERT_TO_IMAGE_STRUCT(u_input);
    Image in_v    = CONVERT_TO_IMAGE_STRUCT(v_input);
    Image out_rgb = CONVERT_TO_IMAGE_STRUCT(rgba_output);

    // handle 8 pixels every time, two lines, each line for 4 pixels
    uchar4 luma_0 = vload4(0, in_y.ptr);
    uchar4 luma_1 = vload4(0, in_y.ptr + luma_input_stride_y);
    uchar4 cbcr   = (uchar4)(vload2(0, in_u.ptr), vload2(0, in_v.ptr));
    char4  cb     = (char4)(cbcr.s0, cbcr.s0, cbcr.s1, cbcr.s1) - (char4)(128);
    char4  cr     = (char4)(cbcr.s2, cbcr.s2, cbcr.s3, cbcr.s3) - (char4)(128);

    float4 temp0 = (float4)(0.0000f) + (float4)(0.0000f) * convert_float4(cb) + (float4)(1.5748f) * convert_float4(cr);
    float4 temp1 = (float4)(0.0000f) - (float4)(0.1873f) * convert_float4(cb) - (float4)(0.4681f) * convert_float4(cr);
    float4 temp2 = (float4)(0.0000f) + (float4)(1.8556f) * convert_float4(cb) + (float4)(0.0000f) * convert_float4(cr);

    float4 f_r = convert_float4(luma_0) + temp0;
    float4 f_g = convert_float4(luma_0) + temp1;
    float4 f_b = convert_float4(luma_0) + temp2;

    uchar4 r_0 = convert_uchar4_sat_rtz(f_r);
    uchar4 g_0 = convert_uchar4_sat_rtz(f_g);
    uchar4 b_0 = convert_uchar4_sat_rtz(f_b);

    uchar8 rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    uchar8 rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr);
    vstore8(rgb_1, 0, out_rgb.ptr + 8);

    f_r = convert_float4(luma_1) + temp0;
    f_g = convert_float4(luma_1) + temp1;
    f_b = convert_float4(luma_1) + temp2;

    r_0 = convert_uchar4_sat_rtz(f_r);
    g_0 = convert_uchar4_sat_rtz(f_g);
    b_0 = convert_uchar4_sat_rtz(f_b);

    rgb_0 = (uchar8)(r_0.s0, g_0.s0, b_0.s0, 255, r_0.s1, g_0.s1, b_0.s1, 255);
    rgb_1 = (uchar8)(r_0.s2, g_0.s2, b_0.s2, 255, r_0.s3, g_0.s3, b_0.s3, 255);
    vstore8(rgb_0, 0, out_rgb.ptr + rgba_output_stride_y);
    vstore8(rgb_1, 0, out_rgb.ptr + rgba_output_stride_y + 8);
}

/** Convert an IYUV image to YUV444
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  u_input_ptr                               Pointer to the source U channel. Supported Format: U8
 * @param[in]  u_input_stride_x                          Stride of the source image U channel in X dimension (in bytes)
 * @param[in]  u_input_step_x                            u_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_input_stride_y                          Stride of the source image in Y dimension (in bytes)
 * @param[in]  u_input_step_y                            u_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_input_offset_first_element_in_bytes     The offset of the first element in the source U channel
 * @param[in]  v_input_ptr                               Pointer to the source V channel. Supported Format: U8
 * @param[in]  v_input_stride_x                          Stride of the source image V channel in X dimension (in bytes)
 * @param[in]  v_input_step_x                            v_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_input_stride_y                          Stride of the source image V channel in Y dimension (in bytes)
 * @param[in]  v_input_step_y                            v_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_input_offset_first_element_in_bytes     The offset of the first element in the source image V channel
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] u_output_ptr                              Pointer to the destination U channel. Supported Format: U8
 * @param[in]  u_output_stride_x                         Stride of the destination U channel in X dimension (in bytes)
 * @param[in]  u_output_step_x                           u_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_output_stride_y                         Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  u_output_step_y                           u_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_output_offset_first_element_in_bytes    The offset of the first element in the destination U channel
 * @param[out] v_output_ptr                              Pointer to the destination V channel. Supported Format: U8
 * @param[in]  v_output_stride_x                         Stride of the destination V channel in X dimension (in bytes)
 * @param[in]  v_output_step_x                           v_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_output_stride_y                         Stride of the destination V channel in Y dimension (in bytes)
 * @param[in]  v_output_step_y                           v_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_output_offset_first_element_in_bytes    The offset of the first element in the destination V channel
 *
 */
__kernel void IYUV_to_YUV444_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(u_input),
    IMAGE_DECLARATION(v_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(u_output),
    IMAGE_DECLARATION(v_output))
{
    Image in_y  = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_u  = CONVERT_TO_IMAGE_STRUCT(u_input);
    Image in_v  = CONVERT_TO_IMAGE_STRUCT(v_input);
    Image out_y = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_u = CONVERT_TO_IMAGE_STRUCT(u_output);
    Image out_v = CONVERT_TO_IMAGE_STRUCT(v_output);

    // handle 32 pixels every time, two lines, each line for 16 pixels
    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar8  cb_src = vload8(0, in_u.ptr);
    uchar8  cr_src = vload8(0, in_v.ptr);
    uchar16 cb     = (uchar16)(cb_src.s0, cb_src.s0, cb_src.s1, cb_src.s1, cb_src.s2, cb_src.s2, cb_src.s3, cb_src.s3,
                               cb_src.s4, cb_src.s4, cb_src.s5, cb_src.s5, cb_src.s6, cb_src.s6, cb_src.s7, cb_src.s7);
    uchar16 cr = (uchar16)(cr_src.s0, cr_src.s0, cr_src.s1, cr_src.s1, cr_src.s2, cr_src.s2, cr_src.s3, cr_src.s3,
                           cr_src.s4, cr_src.s4, cr_src.s5, cr_src.s5, cr_src.s6, cr_src.s6, cr_src.s7, cr_src.s7);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore16(cb, 0, out_u.ptr);
    vstore16(cb, 0, out_u.ptr + u_output_stride_y);
    vstore16(cr, 0, out_v.ptr);
    vstore16(cr, 0, out_v.ptr + v_output_stride_y);
}

/** Convert an IYUV image to NV12
 *
 * Global Workgroup Size [ DIV_CEIL(width, 16), height ]
 * No offset.
 *
 * @param[in]  luma_input_ptr                            Pointer to the source luma channel. Supported Format: U8
 * @param[in]  luma_input_stride_x                       Stride of the luma image in X dimension (in bytes)
 * @param[in]  luma_input_step_x                         luma_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_input_stride_y                       Stride of the source luma channel in Y dimension (in bytes)
 * @param[in]  luma_input_step_y                         luma_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[in]  u_input_ptr                               Pointer to the source U channel. Supported Format: U8
 * @param[in]  u_input_stride_x                          Stride of the source image U channel in X dimension (in bytes)
 * @param[in]  u_input_step_x                            u_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  u_input_stride_y                          Stride of the source image in Y dimension (in bytes)
 * @param[in]  u_input_step_y                            u_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  u_input_offset_first_element_in_bytes     The offset of the first element in the source U channel
 * @param[in]  v_input_ptr                               Pointer to the source V channel. Supported Format: U8
 * @param[in]  v_input_stride_x                          Stride of the source image V channel in X dimension (in bytes)
 * @param[in]  v_input_step_x                            v_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  v_input_stride_y                          Stride of the source image V channel in Y dimension (in bytes)
 * @param[in]  v_input_step_y                            v_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  v_input_offset_first_element_in_bytes     The offset of the first element in the source image V channel
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] uv_output_ptr                             Pointer to the destination UV channel. Supported Format: U8
 * @param[in]  uv_output_stride_x                        Stride of the destination UV channel in X dimension (in bytes)
 * @param[in]  uv_output_step_x                          uv_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_output_stride_y                        Stride of the destination image U channel in Y dimension (in bytes)
 * @param[in]  uv_output_step_y                          uv_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_output_offset_first_element_in_bytes   The offset of the first element in the destination UV channel
 *
 */
__kernel void IYUV_to_NV12_bt709(
    IMAGE_DECLARATION(luma_input),
    IMAGE_DECLARATION(u_input),
    IMAGE_DECLARATION(v_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(uv_output))
{
    Image in_y   = CONVERT_TO_IMAGE_STRUCT(luma_input);
    Image in_u   = CONVERT_TO_IMAGE_STRUCT(u_input);
    Image in_v   = CONVERT_TO_IMAGE_STRUCT(v_input);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_uv = CONVERT_TO_IMAGE_STRUCT(uv_output);

    // handle 32 pixels every time, two lines, each line for 16 pixels
    uchar16 luma_0 = vload16(0, in_y.ptr);
    uchar16 luma_1 = vload16(0, in_y.ptr + luma_input_stride_y);
    uchar8  cb     = vload8(0, in_u.ptr);
    uchar8  cr     = vload8(0, in_v.ptr);
    uchar16 cbcr   = (uchar16)(cb.s0, cr.s0, cb.s1, cr.s1, cb.s2, cr.s2, cb.s3, cr.s3, cb.s4, cr.s4, cb.s5, cr.s5, cb.s6,
                               cr.s6, cb.s7, cr.s7);

    vstore16(luma_0, 0, out_y.ptr);
    vstore16(luma_1, 0, out_y.ptr + luma_output_stride_y);
    vstore16(cbcr, 0, out_uv.ptr);
}

/** Convert a YUYV image to NV12 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 8), height ]
 * No offset.
 *
 * @param[in]  yuyv_input_ptr                            Pointer to the source image. Supported Format: U8
 * @param[in]  yuyv_input_stride_x                       Stride of the source image in X dimension (in bytes)
 * @param[in]  yuyv_input_step_x                         yuyv_input_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  yuyv_input_stride_y                       Stride of the source image in Y dimension (in bytes)
 * @param[in]  yuyv_input_step_y                         yuyv_input_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  yuyv_input_offset_first_element_in_bytes  The offset of the first element in the source image
 * @param[out] luma_output_ptr                           Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_output_stride_x                      Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_output_step_x                        luma_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_output_stride_y                      Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_output_step_y                        luma_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_output_offset_first_element_in_bytes The offset of the first element in the destination luma channel
 * @param[out] uv_output_ptr                             Pointer to the destination UV channel. Supported Format: U8
 * @param[in]  uv_output_stride_x                        Stride of the destination UV channel in X dimension (in bytes)
 * @param[in]  uv_output_step_x                          uv_output_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_output_stride_y                        Stride of the destination image UV channel in Y dimension (in bytes)
 * @param[in]  uv_output_step_y                          uv_output_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_output_offset_first_element_in_bytes   The offset of the first element in the destination UV channel
 *
 */
__kernel void YUYV422_to_NV12_bt709(
    IMAGE_DECLARATION(yuyv_input),
    IMAGE_DECLARATION(luma_output),
    IMAGE_DECLARATION(uv_output))
{
    Image in_yuyv = CONVERT_TO_IMAGE_STRUCT(yuyv_input);
    Image out_y   = CONVERT_TO_IMAGE_STRUCT(luma_output);
    Image out_uv  = CONVERT_TO_IMAGE_STRUCT(uv_output);

    // handle 16 pixels every time, each line 8 pixels
    uchar16 yuyv   = vload16(0, in_yuyv.ptr);
    ushort8 cbcr_0 = (ushort8)(yuyv.s1, yuyv.s3, yuyv.s5, yuyv.s7, yuyv.s9, yuyv.sb, yuyv.sd, yuyv.sf);
    uchar8  luma   = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);
    vstore8(luma, 0, out_y.ptr);

    yuyv           = vload16(0, in_yuyv.ptr + yuyv_input_stride_y);
    ushort8 cbcr_1 = (ushort8)(yuyv.s1, yuyv.s3, yuyv.s5, yuyv.s7, yuyv.s9, yuyv.sb, yuyv.sd, yuyv.sf);
    luma           = (uchar8)(yuyv.s0, yuyv.s2, yuyv.s4, yuyv.s6, yuyv.s8, yuyv.sa, yuyv.sc, yuyv.se);
    vstore8(luma, 0, out_y.ptr + luma_output_stride_y);

    uchar8 cbcr = convert_uchar8((cbcr_0 + cbcr_1) / (ushort8)(2));
    vstore8(cbcr, 0, out_uv.ptr);
}

/** Convert a UYVY image to NV12 using BT709 color space
 *
 * Global Workgroup Size [ DIV_CEIL(width, 4), height ]
 * No offset.
 *
 * @param[in]  input_uyvy_ptr                           Pointer to the source image. Supported Format: U8
 * @param[in]  input_uyvy_stride_x                      Stride of the source image in X dimension (in bytes)
 * @param[in]  input_uyvy_step_x                        input_uyvy_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  input_uyvy_stride_y                      Stride of the source image in Y dimension (in bytes)
 * @param[in]  input_uyvy_step_y                        input_uyvy_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  input_uyvy_offset_first_element_in_bytes The offset of the first element in the source image
 * @param[out] luma_ptr                                 Pointer to the destination luma channel. Supported Format: U8
 * @param[in]  luma_stride_x                            Stride of the destination luma channel in X dimension (in bytes)
 * @param[in]  luma_step_x                              luma_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  luma_stride_y                            Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  luma_step_y                              luma_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  luma_offset_first_element_in_bytes       The offset of the first element in the destination image luma channel
 * @param[out] uv_ptr                                   Pointer to the destination uv channel. Supported Format: U8
 * @param[in]  uv_stride_x                              Stride of the destination uv channel in X dimension (in bytes)
 * @param[in]  uv_step_x                                uv_stride_x * number of elements along X processed per workitem(in bytes)
 * @param[in]  uv_stride_y                              Stride of the destination image luma channel in Y dimension (in bytes)
 * @param[in]  uv_step_y                                uv_stride_y * number of elements along Y processed per workitem(in bytes)
 * @param[in]  uv_offset_first_element_in_bytes         The offset of the first element in the destination image uv channel
 *
 */
__kernel void UYVY422_to_NV12_bt709(
    IMAGE_DECLARATION(input_uyvy),
    IMAGE_DECLARATION(luma),
    IMAGE_DECLARATION(uv))
{
    Image in     = CONVERT_TO_IMAGE_STRUCT(input_uyvy);
    Image out_y  = CONVERT_TO_IMAGE_STRUCT(luma);
    Image out_uv = CONVERT_TO_IMAGE_STRUCT(uv);

    // handle 16 pixels every time, each line 8 pixels
    const uchar16 uyvy_t = vload16(0, in.ptr);
    vstore8(uyvy_t.s13579bdf, 0, out_y.ptr);

    const uchar16 uyvy_b = vload16(0, in.ptr + input_uyvy_stride_y);
    vstore8(uyvy_b.s13579bdf, 0, out_y.ptr + luma_stride_y);

    const ushort8 cbcr_t = (ushort8)(uyvy_t.s0, uyvy_t.s2, uyvy_t.s4, uyvy_t.s6, uyvy_t.s8, uyvy_t.sa, uyvy_t.sc, uyvy_t.se);
    const ushort8 cbcr_b = (ushort8)(uyvy_b.s0, uyvy_b.s2, uyvy_b.s4, uyvy_b.s6, uyvy_b.s8, uyvy_b.sa, uyvy_b.sc, uyvy_b.se);
    const uchar8  cbcr   = convert_uchar8((cbcr_t + cbcr_b) / (ushort8)(2));
    vstore8(cbcr, 0, out_uv.ptr);
}

)"