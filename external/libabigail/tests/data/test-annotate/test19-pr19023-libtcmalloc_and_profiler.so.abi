<abi-corpus version='2.0' architecture='elf-amd-x86_64' soname='libtcmalloc_and_profiler.so.4'>
  <elf-needed>
    <dependency name='libunwind.so.8'/>
    <dependency name='libpthread.so.0'/>
    <dependency name='libstdc++.so.6'/>
    <dependency name='libm.so.6'/>
    <dependency name='libc.so.6'/>
    <dependency name='ld-linux-x86-64.so.2'/>
    <dependency name='libgcc_s.so.1'/>
  </elf-needed>
  <elf-function-symbols>
    <!-- GetHeapProfile -->
    <elf-symbol name='GetHeapProfile' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerDump -->
    <elf-symbol name='HeapProfilerDump' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerStart -->
    <elf-symbol name='HeapProfilerStart' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfilerStop -->
    <elf-symbol name='HeapProfilerStop' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- IsHeapProfilerRunning -->
    <elf-symbol name='IsHeapProfilerRunning' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetAllocatedSize -->
    <elf-symbol name='MallocExtension_GetAllocatedSize' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetEstimatedAllocatedSize -->
    <elf-symbol name='MallocExtension_GetEstimatedAllocatedSize' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetNumericProperty -->
    <elf-symbol name='MallocExtension_GetNumericProperty' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetOwnership -->
    <elf-symbol name='MallocExtension_GetOwnership' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_GetStats -->
    <elf-symbol name='MallocExtension_GetStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MallocMemoryStats -->
    <elf-symbol name='MallocExtension_MallocMemoryStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MarkThreadBusy -->
    <elf-symbol name='MallocExtension_MarkThreadBusy' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_MarkThreadIdle -->
    <elf-symbol name='MallocExtension_MarkThreadIdle' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_ReleaseFreeMemory -->
    <elf-symbol name='MallocExtension_ReleaseFreeMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_ReleaseToSystem -->
    <elf-symbol name='MallocExtension_ReleaseToSystem' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_SetNumericProperty -->
    <elf-symbol name='MallocExtension_SetNumericProperty' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyAllMemory -->
    <elf-symbol name='MallocExtension_VerifyAllMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyArrayNewMemory -->
    <elf-symbol name='MallocExtension_VerifyArrayNewMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyMallocMemory -->
    <elf-symbol name='MallocExtension_VerifyMallocMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension_VerifyNewMemory -->
    <elf-symbol name='MallocExtension_VerifyNewMemory' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddDeleteHook -->
    <elf-symbol name='MallocHook_AddDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMmapHook -->
    <elf-symbol name='MallocHook_AddMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMremapHook -->
    <elf-symbol name='MallocHook_AddMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddMunmapHook -->
    <elf-symbol name='MallocHook_AddMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddNewHook -->
    <elf-symbol name='MallocHook_AddNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddPreMmapHook -->
    <elf-symbol name='MallocHook_AddPreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddPreSbrkHook -->
    <elf-symbol name='MallocHook_AddPreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_AddSbrkHook -->
    <elf-symbol name='MallocHook_AddSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_GetCallerStackTrace -->
    <elf-symbol name='MallocHook_GetCallerStackTrace' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_InitAtFirstAllocation_HeapLeakChecker -->
    <elf-symbol name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveDeleteHook -->
    <elf-symbol name='MallocHook_RemoveDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMmapHook -->
    <elf-symbol name='MallocHook_RemoveMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMmapReplacement -->
    <elf-symbol name='MallocHook_RemoveMmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMremapHook -->
    <elf-symbol name='MallocHook_RemoveMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMunmapHook -->
    <elf-symbol name='MallocHook_RemoveMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveMunmapReplacement -->
    <elf-symbol name='MallocHook_RemoveMunmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveNewHook -->
    <elf-symbol name='MallocHook_RemoveNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemovePreMmapHook -->
    <elf-symbol name='MallocHook_RemovePreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemovePreSbrkHook -->
    <elf-symbol name='MallocHook_RemovePreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_RemoveSbrkHook -->
    <elf-symbol name='MallocHook_RemoveSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetDeleteHook -->
    <elf-symbol name='MallocHook_SetDeleteHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMmapHook -->
    <elf-symbol name='MallocHook_SetMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMmapReplacement -->
    <elf-symbol name='MallocHook_SetMmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMremapHook -->
    <elf-symbol name='MallocHook_SetMremapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMunmapHook -->
    <elf-symbol name='MallocHook_SetMunmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetMunmapReplacement -->
    <elf-symbol name='MallocHook_SetMunmapReplacement' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetNewHook -->
    <elf-symbol name='MallocHook_SetNewHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetPreMmapHook -->
    <elf-symbol name='MallocHook_SetPreMmapHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetPreSbrkHook -->
    <elf-symbol name='MallocHook_SetPreSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook_SetSbrkHook -->
    <elf-symbol name='MallocHook_SetSbrkHook' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerGetState -->
    <elf-symbol name='ProfileHandlerGetState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerRegisterCallback -->
    <elf-symbol name='ProfileHandlerRegisterCallback' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerRegisterThread -->
    <elf-symbol name='ProfileHandlerRegisterThread' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerReset -->
    <elf-symbol name='ProfileHandlerReset' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandlerUnregisterCallback -->
    <elf-symbol name='ProfileHandlerUnregisterCallback' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerDisable -->
    <elf-symbol name='ProfilerDisable' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerEnable -->
    <elf-symbol name='ProfilerEnable' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerFlush -->
    <elf-symbol name='ProfilerFlush' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerGetCurrentState -->
    <elf-symbol name='ProfilerGetCurrentState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerRegisterThread -->
    <elf-symbol name='ProfilerRegisterThread' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStart -->
    <elf-symbol name='ProfilerStart' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStartWithOptions -->
    <elf-symbol name='ProfilerStartWithOptions' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilerStop -->
    <elf-symbol name='ProfilerStop' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfilingIsEnabledForAllThreads -->
    <elf-symbol name='ProfilingIsEnabledForAllThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RunningOnValgrind -->
    <elf-symbol name='RunningOnValgrind' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGetenvSafe -->
    <elf-symbol name='TCMallocGetenvSafe' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_ListAllProcessThreads -->
    <elf-symbol name='TCMalloc_ListAllProcessThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_ResumeAllProcessThreads -->
    <elf-symbol name='TCMalloc_ResumeAllProcessThreads' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ValgrindSlowdown -->
    <elf-symbol name='ValgrindSlowdown' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackTrace(void**, int, int) -->
    <elf-symbol name='_Z13GetStackTracePPvii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackFrames(void**, int*, int, int) -->
    <elf-symbol name='_Z14GetStackFramesPPvPiii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CyclesPerSecond() -->
    <elf-symbol name='_Z15CyclesPerSecondv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HasPosixThreads() -->
    <elf-symbol name='_Z15HasPosixThreadsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetenvBeforeMain(char const*) -->
    <elf-symbol name='_Z16GetenvBeforeMainPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawOpenForWriting(char const*) -->
    <elf-symbol name='_Z17RawOpenForWritingPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetUniquePathFromEnv(char const*, char*) -->
    <elf-symbol name='_Z20GetUniquePathFromEnvPKcPc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- InitSystemAllocators() -->
    <elf-symbol name='_Z20InitSystemAllocatorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SleepForMilliseconds(int) -->
    <elf-symbol name='_Z20SleepForMillisecondsi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemAlloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_Z20TCMalloc_SystemAllocmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemCommit(void*, unsigned long) -->
    <elf-symbol name='_Z21TCMalloc_SystemCommitPvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_SystemRelease(void*, unsigned long) -->
    <elf-symbol name='_Z22TCMalloc_SystemReleasePvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_once(int*, void (*)()) -->
    <elf-symbol name='_Z22perftools_pthread_oncePiPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackTraceWithContext(void**, int, int, void const*) -->
    <elf-symbol name='_Z24GetStackTraceWithContextPPviiPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_get_sysalloc_override(SysAllocator*) -->
    <elf-symbol name='_Z24tc_get_sysalloc_overrideP12SysAllocator' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GetStackFramesWithContext(void**, int*, int, int, void const*) -->
    <elf-symbol name='_Z25GetStackFramesWithContextPPvPiiiPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_key_create(unsigned int*, void (*)(void*)) -->
    <elf-symbol name='_Z28perftools_pthread_key_createPjPFvPvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_key_delete(unsigned int) -->
    <elf-symbol name='_Z28perftools_pthread_key_deletej' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_getspecific(unsigned int) -->
    <elf-symbol name='_Z29perftools_pthread_getspecificj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- perftools_pthread_setspecific(unsigned int, void*) -->
    <elf-symbol name='_Z29perftools_pthread_setspecificjPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_RunHeapCleanups() -->
    <elf-symbol name='_Z31HeapLeakChecker_RunHeapCleanupsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_AfterDestructors() -->
    <elf-symbol name='_Z32HeapLeakChecker_AfterDestructorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_InternalInitStart() -->
    <elf-symbol name='_Z33HeapLeakChecker_InternalInitStartv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker_BeforeConstructors() -->
    <elf-symbol name='_Z34HeapLeakChecker_BeforeConstructorsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- NumCPUs() -->
    <elf-symbol name='_Z7NumCPUsv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RAW_LOG(int, char const*, ...) -->
    <elf-symbol name='_Z7RAW_LOGiPKcz' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RAW_VLOG(int, char const*, ...) -->
    <elf-symbol name='_Z8RAW_VLOGiPKcz' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawClose(int) -->
    <elf-symbol name='_Z8RawClosei' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- RawWrite(int, char const*, unsigned long) -->
    <elf-symbol name='_Z8RawWriteiPKcm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LogPrintf(int, char const*, __va_list_tag*) -->
    <elf-symbol name='_Z9LogPrintfiPKcP13__va_list_tag' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Insert(void const*, HeapProfileTable::AllocValue) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (*)(unsigned long), void (*)(void*)) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC1EPFPvmEPFvS3_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (*)(unsigned long), void (*)(void*)) -->
    <elf-symbol name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC1EPFPvmEPFvS3_E' is-defined='yes'/>
    <!-- MallocHook::UnhookedMMap(void*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook12UnhookedMMapEPvmiiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::UnhookedMUnmap(void*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook14UnhookedMUnmapEPvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeNewHookSlow(void const*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook17InvokeNewHookSlowEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMmapHookSlow(void const*, void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeSbrkHookSlow(void const*, long) -->
    <elf-symbol name='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeDeleteHookSlow(void const*) -->
    <elf-symbol name='_ZN10MallocHook20InvokeDeleteHookSlowEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMremapHookSlow(void const*, void const*, unsigned long, unsigned long, int, void const*) -->
    <elf-symbol name='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMunmapHookSlow(void const*, unsigned long) -->
    <elf-symbol name='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokePreMmapHookSlow(void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokePreSbrkHookSlow(long) -->
    <elf-symbol name='_ZN10MallocHook21InvokePreSbrkHookSlowEl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMmapReplacementSlow(void const*, unsigned long, int, int, int, long, void**) -->
    <elf-symbol name='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocHook::InvokeMunmapReplacementSlow(void const*, unsigned long, int*) -->
    <elf-symbol name='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::FlushTable() -->
    <elf-symbol name='_ZN11CpuProfiler10FlushTableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::prof_handler(int, siginfo*, void*, void*) -->
    <elf-symbol name='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::EnableHandler() -->
    <elf-symbol name='_ZN11CpuProfiler13EnableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::DisableHandler() -->
    <elf-symbol name='_ZN11CpuProfiler14DisableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::GetCurrentState(ProfilerState*) -->
    <elf-symbol name='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Stop() -->
    <elf-symbol name='_ZN11CpuProfiler4StopEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Start(char const*, ProfilerOptions const*) -->
    <elf-symbol name='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::Enabled() -->
    <elf-symbol name='_ZN11CpuProfiler7EnabledEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11CpuProfilerC2Ev' is-defined='yes'/>
    <!-- CpuProfiler::CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::~CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11CpuProfilerD2Ev' is-defined='yes'/>
    <!-- CpuProfiler::~CpuProfiler() -->
    <elf-symbol name='_ZN11CpuProfilerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::RunHeapCleanups() -->
    <elf-symbol name='_ZN11HeapCleaner15RunHeapCleanupsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::HeapCleaner(void (*)()) -->
    <elf-symbol name='_ZN11HeapCleanerC1EPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11HeapCleanerC2EPFvvE' is-defined='yes'/>
    <!-- HeapCleaner::HeapCleaner(void (*)()) -->
    <elf-symbol name='_ZN11HeapCleanerC2EPFvvE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::FlushTable() -->
    <elf-symbol name='_ZN11ProfileData10FlushTableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::FlushEvicted() -->
    <elf-symbol name='_ZN11ProfileData12FlushEvictedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Add(int, void const* const*) -->
    <elf-symbol name='_ZN11ProfileData3AddEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Stop() -->
    <elf-symbol name='_ZN11ProfileData4StopEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Evict(ProfileData::Entry const&) -->
    <elf-symbol name='_ZN11ProfileData5EvictERKNS_5EntryE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Reset() -->
    <elf-symbol name='_ZN11ProfileData5ResetEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Start(char const*, ProfileData::Options const&) -->
    <elf-symbol name='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::Options::Options() -->
    <elf-symbol name='_ZN11ProfileData7OptionsC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileData7OptionsC2Ev' is-defined='yes'/>
    <!-- ProfileData::Options::Options() -->
    <elf-symbol name='_ZN11ProfileData7OptionsC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileDataC2Ev' is-defined='yes'/>
    <!-- ProfileData::ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::~ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN11ProfileDataD2Ev' is-defined='yes'/>
    <!-- ProfileData::~ProfileData() -->
    <elf-symbol name='_ZN11ProfileDataD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::Add(void const*) -->
    <elf-symbol name='_ZN11SymbolTable3AddEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::GetSymbol(void const*) -->
    <elf-symbol name='_ZN11SymbolTable9GetSymbolEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SymbolTable::Symbolize() -->
    <elf-symbol name='_ZN11SymbolTable9SymbolizeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD0Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN12SysAllocatorD2Ev' is-defined='yes'/>
    <!-- SysAllocator::~SysAllocator() -->
    <elf-symbol name='_ZN12SysAllocatorD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::DeleteArena(LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::DefaultArena() -->
    <elf-symbol name='_ZN13LowLevelAlloc12DefaultArenaEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::AllocWithArena(unsigned long, LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::Free(void*) -->
    <elf-symbol name='_ZN13LowLevelAlloc4FreeEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::Alloc(unsigned long) -->
    <elf-symbol name='_ZN13LowLevelAlloc5AllocEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- LowLevelAlloc::NewArena(int, LowLevelAlloc::Arena*) -->
    <elf-symbol name='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGuard::TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN13TCMallocGuardC2Ev' is-defined='yes'/>
    <!-- TCMallocGuard::TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocGuard::~TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN13TCMallocGuardD2Ev' is-defined='yes'/>
    <!-- TCMallocGuard::~TCMallocGuard() -->
    <elf-symbol name='_ZN13TCMallocGuardD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::StartTimer() -->
    <elf-symbol name='_ZN14ProfileHandler10StartTimerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::EnableHandler() -->
    <elf-symbol name='_ZN14ProfileHandler13EnableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::SignalHandler(int, siginfo*, void*) -->
    <elf-symbol name='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::DisableHandler() -->
    <elf-symbol name='_ZN14ProfileHandler14DisableHandlerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::IsTimerRunning() -->
    <elf-symbol name='_ZN14ProfileHandler14IsTimerRunningEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::RegisterThread() -->
    <elf-symbol name='_ZN14ProfileHandler14RegisterThreadEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::RegisterCallback(void (*)(int, siginfo*, void*, void*), void*) -->
    <elf-symbol name='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::UnregisterCallback(ProfileHandlerToken*) -->
    <elf-symbol name='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::IsSignalHandlerAvailable() -->
    <elf-symbol name='_ZN14ProfileHandler24IsSignalHandlerAvailableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Init() -->
    <elf-symbol name='_ZN14ProfileHandler4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Reset() -->
    <elf-symbol name='_ZN14ProfileHandler5ResetEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::GetState(ProfileHandlerState*) -->
    <elf-symbol name='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::Instance() -->
    <elf-symbol name='_ZN14ProfileHandler8InstanceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::StopTimer() -->
    <elf-symbol name='_ZN14ProfileHandler9StopTimerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN14ProfileHandlerC2Ev' is-defined='yes'/>
    <!-- ProfileHandler::ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::~ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN14ProfileHandlerD2Ev' is-defined='yes'/>
    <!-- ProfileHandler::~ProfileHandler() -->
    <elf-symbol name='_ZN14ProfileHandlerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
    <elf-symbol name='_ZN14SpinLockHolderC1EP8SpinLock' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
    <elf-symbol name='_ZN14SpinLockHolderC2EP8SpinLock' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN14SpinLockHolderC1EP8SpinLock' is-defined='yes'/>
    <!-- SpinLockHolder::~SpinLockHolder() -->
    <elf-symbol name='_ZN14SpinLockHolderD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN14SpinLockHolderD2Ev' is-defined='yes'/>
    <!-- SpinLockHolder::~SpinLockHolder() -->
    <elf-symbol name='_ZN14SpinLockHolderD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::GlobalChecker() -->
    <elf-symbol name='_ZN15HeapLeakChecker13GlobalCheckerEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::NoGlobalLeaks() -->
    <elf-symbol name='_ZN15HeapLeakChecker13NoGlobalLeaksEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoIgnoreObject(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::GetAllocCaller(void*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14GetAllocCallerEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::UnIgnoreObject(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableChecksIn(char const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker15DisableChecksInEPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoMainHeapCheck() -->
    <elf-symbol name='_ZN15HeapLeakChecker15DoMainHeapCheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::CancelGlobalCheck() -->
    <elf-symbol name='_ZN15HeapLeakChecker17CancelGlobalCheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::UseProcMapsLocked(HeapLeakChecker::ProcMapsTask) -->
    <elf-symbol name='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::TurnItselfOffLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker19TurnItselfOffLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::MakeProfileNameLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker21MakeProfileNameLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreLiveObjectsLocked(char const*, char const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreLiveThreadsLocked(void*, int, int*, __va_list_tag*) -->
    <elf-symbol name='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::BeforeConstructorsLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableChecksFromToLocked(void const*, void const*, int) -->
    <elf-symbol name='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DisableLibraryAllocsLocked(char const*, unsigned long, unsigned long) -->
    <elf-symbol name='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreAllLiveObjectsLocked(void const*) -->
    <elf-symbol name='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::NoGlobalLeaksMaybeSymbolize(HeapLeakChecker::ShouldSymbolize) -->
    <elf-symbol name='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IgnoreNonThreadLiveObjectsLocked() -->
    <elf-symbol name='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Create(char const*, bool) -->
    <elf-symbol name='_ZN15HeapLeakChecker6CreateEPKcb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakChecker8DisablerC2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::~Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakChecker8DisablerD2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::Disabler::~Disabler() -->
    <elf-symbol name='_ZN15HeapLeakChecker8DisablerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::IsActive() -->
    <elf-symbol name='_ZN15HeapLeakChecker8IsActiveEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::Free(void*) -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator4FreeEPv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::Allocate(unsigned long) -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator8AllocateEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::DoNoLeaks(HeapLeakChecker::ShouldSymbolize) -->
    <elf-symbol name='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker(char const*) -->
    <elf-symbol name='_ZN15HeapLeakCheckerC1EPKc' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerC2EPKc' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerC2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker(char const*) -->
    <elf-symbol name='_ZN15HeapLeakCheckerC2EPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::~HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15HeapLeakCheckerD2Ev' is-defined='yes'/>
    <!-- HeapLeakChecker::~HeapLeakChecker() -->
    <elf-symbol name='_ZN15HeapLeakCheckerD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Initialize() -->
    <elf-symbol name='_ZN15MallocExtension10InitializeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetOwnership(void const*) -->
    <elf-symbol name='_ZN15MallocExtension12GetOwnershipEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetHeapSample(std::string*) -->
    <elf-symbol name='_ZN15MallocExtension13GetHeapSampleEPSs' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MarkThreadBusy() -->
    <elf-symbol name='_ZN15MallocExtension14MarkThreadBusyEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MarkThreadIdle() -->
    <elf-symbol name='_ZN15MallocExtension14MarkThreadIdleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReadStackTraces(int*) -->
    <elf-symbol name='_ZN15MallocExtension15ReadStackTracesEPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReleaseToSystem(unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension15ReleaseToSystemEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyAllMemory() -->
    <elf-symbol name='_ZN15MallocExtension15VerifyAllMemoryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyNewMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension15VerifyNewMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetAllocatedSize(void const*) -->
    <elf-symbol name='_ZN15MallocExtension16GetAllocatedSizeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
    <elf-symbol name='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::MallocMemoryStats(int*, unsigned long*, int*) -->
    <elf-symbol name='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReleaseFreeMemory() -->
    <elf-symbol name='_ZN15MallocExtension17ReleaseFreeMemoryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetNumericProperty(char const*, unsigned long*) -->
    <elf-symbol name='_ZN15MallocExtension18GetNumericPropertyEPKcPm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetSystemAllocator() -->
    <elf-symbol name='_ZN15MallocExtension18GetSystemAllocatorEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetNumericProperty(char const*, unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension18SetNumericPropertyEPKcm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetSystemAllocator(SysAllocator*) -->
    <elf-symbol name='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyMallocMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension18VerifyMallocMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetHeapGrowthStacks(std::string*) -->
    <elf-symbol name='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetMemoryReleaseRate() -->
    <elf-symbol name='_ZN15MallocExtension20GetMemoryReleaseRateEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::SetMemoryReleaseRate(double) -->
    <elf-symbol name='_ZN15MallocExtension20SetMemoryReleaseRateEd' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::VerifyArrayNewMemory(void const*) -->
    <elf-symbol name='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetEstimatedAllocatedSize(unsigned long) -->
    <elf-symbol name='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::ReadHeapGrowthStackTraces() -->
    <elf-symbol name='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Ranges(void*, void (*)(void*, base::MallocRange const*)) -->
    <elf-symbol name='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::GetStats(char*, int) -->
    <elf-symbol name='_ZN15MallocExtension8GetStatsEPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::Register(MallocExtension*) -->
    <elf-symbol name='_ZN15MallocExtension8RegisterEPS_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::instance() -->
    <elf-symbol name='_ZN15MallocExtension8instanceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD0Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN15MallocExtensionD2Ev' is-defined='yes'/>
    <!-- MallocExtension::~MallocExtension() -->
    <elf-symbol name='_ZN15MallocExtensionD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::FindRegion(unsigned long, MemoryRegionMap::Region*) -->
    <elf-symbol name='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::LockIsHeld() -->
    <elf-symbol name='_ZN15MemoryRegionMap10LockIsHeldEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MremapHook(void const*, void const*, unsigned long, unsigned long, int, void const*) -->
    <elf-symbol name='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MunmapHook(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap10MunmapHookEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::LogAllLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap12LogAllLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::EndRegionLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap15EndRegionLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::BeginRegionLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap17BeginRegionLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::IsRecordingLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap17IsRecordingLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::DoFindRegionLocked(unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap18DoFindRegionLockedEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::InsertRegionLocked(MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionRemoval(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::DoInsertRegionLocked(MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionAddition(void const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::FindAndMarkStackRegion(unsigned long, MemoryRegionMap::Region*) -->
    <elf-symbol name='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::HandleSavedRegionsLocked(void (*)(MemoryRegionMap::Region const&)) -->
    <elf-symbol name='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RestoreSavedBucketsLocked() -->
    <elf-symbol name='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::RecordRegionRemovalInBucket(int, void const* const*, unsigned long) -->
    <elf-symbol name='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Init(int, bool) -->
    <elf-symbol name='_ZN15MemoryRegionMap4InitEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Lock() -->
    <elf-symbol name='_ZN15MemoryRegionMap4LockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Unlock() -->
    <elf-symbol name='_ZN15MemoryRegionMap6UnlockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::MmapHook(void const*, void const*, unsigned long, int, int, int, long) -->
    <elf-symbol name='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::SbrkHook(void const*, long) -->
    <elf-symbol name='_ZN15MemoryRegionMap8SbrkHookEPKvl' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::Shutdown() -->
    <elf-symbol name='_ZN15MemoryRegionMap8ShutdownEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::GetBucket(int, void const* const*) -->
    <elf-symbol name='_ZN15MemoryRegionMap9GetBucketEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MarkAsLive(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable10MarkAsLiveEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::RecordFree(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable10RecordFreeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::RecordAlloc(void const*, unsigned long, int, void const* const*) -->
    <elf-symbol name='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AddIfNonLive(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
    <elf-symbol name='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::TakeSnapshot() -->
    <elf-symbol name='_ZN16HeapProfileTable12TakeSnapshotEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::WriteProfile(char const*, HeapProfileBucket const&, AddressMap<HeapProfileTable::AllocValue>*) -->
    <elf-symbol name='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AddToSnapshot(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MarkAsIgnored(void const*) -->
    <elf-symbol name='_ZN16HeapProfileTable13MarkAsIgnoredEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::UnparseBucket(HeapProfileBucket const&, char*, int, int, char const*, HeapProfileStats*) -->
    <elf-symbol name='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::AllocValueSize(HeapProfileTable::AllocValue const&) -->
    <elf-symbol name='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::NonLiveSnapshot(HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::ReleaseSnapshot(HeapProfileTable::Snapshot*) -->
    <elf-symbol name='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::CleanupOldProfiles(char const*) -->
    <elf-symbol name='_ZN16HeapProfileTable18CleanupOldProfilesEPKc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::DumpBucketIterator(HeapProfileBucket const*, HeapProfileTable::BufferArgs*) -->
    <elf-symbol name='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::DumpNonLiveIterator(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::DumpArgs const&) -->
    <elf-symbol name='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::GetCallerStackTrace(int, void**) -->
    <elf-symbol name='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MapArgsAllocIterator(void const*, HeapProfileTable::AllocValue*, void (*)(void const*, HeapProfileTable::AllocInfo const&)) -->
    <elf-symbol name='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportLeaks(char const*, char const*, bool) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportObject(void const*, HeapProfileTable::AllocValue*, char*) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportCallback(void const*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::Snapshot::ReportIndividualObjects() -->
    <elf-symbol name='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::GetBucket(int, void const* const*) -->
    <elf-symbol name='_ZN16HeapProfileTable9GetBucketEiPKPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::HeapProfileTable(void* (*)(unsigned long), void (*)(void*), bool) -->
    <elf-symbol name='_ZN16HeapProfileTableC1EPFPvmEPFvS0_Eb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::HeapProfileTable(void* (*)(unsigned long), void (*)(void*), bool) -->
    <elf-symbol name='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16HeapProfileTableC1EPFPvmEPFvS0_Eb' is-defined='yes'/>
    <!-- HeapProfileTable::~HeapProfileTable() -->
    <elf-symbol name='_ZN16HeapProfileTableD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16HeapProfileTableD2Ev' is-defined='yes'/>
    <!-- HeapProfileTable::~HeapProfileTable() -->
    <elf-symbol name='_ZN16HeapProfileTableD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN16MmapSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN16MmapSysAllocatorD2Ev' is-defined='yes'/>
    <!-- MmapSysAllocator::~MmapSysAllocator() -->
    <elf-symbol name='_ZN16MmapSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::FormatLine(char*, int, unsigned long, unsigned long, char const*, unsigned long, long, char const*, unsigned long) -->
    <elf-symbol name='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Init(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Next(unsigned long*, unsigned long*, char**, unsigned long*, long*, char**) -->
    <elf-symbol name='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::NextExt(unsigned long*, unsigned long*, char**, unsigned long*, long*, char**, unsigned long*, unsigned long*, unsigned long*, unsigned long*, unsigned long*) -->
    <elf-symbol name='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1Ei' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC2Ei' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1EiPNS_6BufferE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC2EiPNS_6BufferEb' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2Ei' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2EiPNS_6BufferE' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorC1EiPNS_6BufferE' is-defined='yes'/>
    <!-- ProcMapsIterator::ProcMapsIterator(int, ProcMapsIterator::Buffer*, bool) -->
    <elf-symbol name='_ZN16ProcMapsIteratorC2EiPNS_6BufferEb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::~ProcMapsIterator() -->
    <elf-symbol name='_ZN16ProcMapsIteratorD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN16ProcMapsIteratorD2Ev' is-defined='yes'/>
    <!-- ProcMapsIterator::~ProcMapsIterator() -->
    <elf-symbol name='_ZN16ProcMapsIteratorD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN16SbrkSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN16SbrkSysAllocatorD2Ev' is-defined='yes'/>
    <!-- SbrkSysAllocator::~SbrkSysAllocator() -->
    <elf-symbol name='_ZN16SbrkSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMalloc_Printer::printf(char const*, ...) -->
    <elf-symbol name='_ZN16TCMalloc_Printer6printfEPKcz' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GoogleInitializer::~GoogleInitializer() -->
    <elf-symbol name='_ZN17GoogleInitializerD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- GoogleInitializer::~GoogleInitializer() -->
    <elf-symbol name='_ZN17GoogleInitializerD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN17GoogleInitializerD1Ev' is-defined='yes'/>
    <!-- DevMemSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN18DevMemSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN18DevMemSysAllocatorD2Ev' is-defined='yes'/>
    <!-- DevMemSysAllocator::~DevMemSysAllocator() -->
    <elf-symbol name='_ZN18DevMemSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19DefaultSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN19DefaultSysAllocatorD2Ev' is-defined='yes'/>
    <!-- DefaultSysAllocator::~DefaultSysAllocator() -->
    <elf-symbol name='_ZN19DefaultSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::Initialize() -->
    <elf-symbol name='_ZN19HugetlbSysAllocator10InitializeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::AllocInternal(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19HugetlbSysAllocator13AllocInternalEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::Alloc(unsigned long, unsigned long*, unsigned long) -->
    <elf-symbol name='_ZN19HugetlbSysAllocator5AllocEmPmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN19HugetlbSysAllocatorD2Ev' is-defined='yes'/>
    <!-- HugetlbSysAllocator::~HugetlbSysAllocator() -->
    <elf-symbol name='_ZN19HugetlbSysAllocatorD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileEndWriter::~HeapProfileEndWriter() -->
    <elf-symbol name='_ZN20HeapProfileEndWriterD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN20HeapProfileEndWriterD2Ev' is-defined='yes'/>
    <!-- HeapProfileEndWriter::~HeapProfileEndWriter() -->
    <elf-symbol name='_ZN20HeapProfileEndWriterD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetOwnership(void const*) -->
    <elf-symbol name='_ZN22TCMallocImplementation12GetOwnershipEPKv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetHeapSample(std::string*) -->
    <elf-symbol name='_ZN22TCMallocImplementation13GetHeapSampleEPSs' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::MarkThreadBusy() -->
    <elf-symbol name='_ZN22TCMallocImplementation14MarkThreadBusyEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::MarkThreadIdle() -->
    <elf-symbol name='_ZN22TCMallocImplementation14MarkThreadIdleEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReadStackTraces(int*) -->
    <elf-symbol name='_ZN22TCMallocImplementation15ReadStackTracesEPi' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReleaseToSystem(unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation15ReleaseToSystemEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetAllocatedSize(void const*) -->
    <elf-symbol name='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
    <elf-symbol name='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetNumericProperty(char const*, unsigned long*) -->
    <elf-symbol name='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetSystemAllocator() -->
    <elf-symbol name='_ZN22TCMallocImplementation18GetSystemAllocatorEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetNumericProperty(char const*, unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetSystemAllocator(SysAllocator*) -->
    <elf-symbol name='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetMemoryReleaseRate() -->
    <elf-symbol name='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::SetMemoryReleaseRate(double) -->
    <elf-symbol name='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetEstimatedAllocatedSize(unsigned long) -->
    <elf-symbol name='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::ReadHeapGrowthStackTraces() -->
    <elf-symbol name='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::Ranges(void*, void (*)(void*, base::MallocRange const*)) -->
    <elf-symbol name='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetStats(char*, int) -->
    <elf-symbol name='_ZN22TCMallocImplementation8GetStatsEPci' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD0Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN22TCMallocImplementationD2Ev' is-defined='yes'/>
    <!-- TCMallocImplementation::~TCMallocImplementation() -->
    <elf-symbol name='_ZN22TCMallocImplementationD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost() -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePostD1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZN28HeapLeakCheckerGlobalPrePostD2Ev' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost() -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePostD2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::RawPrinter::Printf(char const*, ...) -->
    <elf-symbol name='_ZN4base10RawPrinter6PrintfEPKcz' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::RawPrinter::RawPrinter(char*, int) -->
    <elf-symbol name='_ZN4base10RawPrinterC1EPci' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base10RawPrinterC2EPci' is-defined='yes'/>
    <!-- base::RawPrinter::RawPrinter(char*, int) -->
    <elf-symbol name='_ZN4base10RawPrinterC2EPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::Update(int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void const*, int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorC1EPKvi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void const*, int) -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11ElfMemImage14SymbolIteratorC1EPKvi' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator++() -->
    <elf-symbol name='_ZN4base11ElfMemImage14SymbolIteratorppEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::Init(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImage4InitEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::ElfMemImage(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImageC1EPKv' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11ElfMemImageC2EPKv' is-defined='yes'/>
    <!-- base::ElfMemImage::ElfMemImage(void const*) -->
    <elf-symbol name='_ZN4base11ElfMemImageC2EPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::Init() -->
    <elf-symbol name='_ZN4base11VDSOSupport4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::SetBase(void const*) -->
    <elf-symbol name='_ZN4base11VDSOSupport7SetBaseEPKv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::VDSOSupport() -->
    <elf-symbol name='_ZN4base11VDSOSupportC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN4base11VDSOSupportC2Ev' is-defined='yes'/>
    <!-- base::VDSOSupport::VDSOSupport() -->
    <elf-symbol name='_ZN4base11VDSOSupportC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::SubmitSpinLockProfileData(void const*, long) -->
    <elf-symbol name='_ZN4base25SubmitSpinLockProfileDataEPKvl' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockWait(int volatile*, int, base::internal::SpinLockWaitTransition const*) -->
    <elf-symbol name='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockWake(int volatile*, bool) -->
    <elf-symbol name='_ZN4base8internal12SpinLockWakeEPVib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::SpinLockDelay(int volatile*, int, int) -->
    <elf-symbol name='_ZN4base8internal13SpinLockDelayEPViii' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::ExchangeSingular(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::FixupPrivEndLocked() -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Add(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Remove(void (*)(void const*, unsigned long)) -->
    <elf-symbol name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SlowUnlock(unsigned long) -->
    <elf-symbol name='_ZN8SpinLock10SlowUnlockEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SlowLock() -->
    <elf-symbol name='_ZN8SpinLock8SlowLockEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::SpinLoop(long, int*) -->
    <elf-symbol name='_ZN8SpinLock8SpinLoopElPi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Length(tcmalloc::Span const*) -->
    <elf-symbol name='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Remove(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DeleteSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Prepend(tcmalloc::Span*, tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::BecomeIdle() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache10BecomeIdleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::InitModule() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache10InitModuleEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::DeleteCache(tcmalloc::ThreadCache*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetThreadStats(unsigned long*, unsigned long*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetSamplePeriod() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::DestroyThreadCache(void*) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::IncreaseCacheLimit() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::FetchFromCentralCache(unsigned long, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::CreateCacheIfNecessary() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::IncreaseCacheLimitLocked() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::RecomputePerThreadCacheSize() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::set_overall_thread_cache_size(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Init(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache4InitEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Cleanup() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7CleanupEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::InitTSD() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7InitTSDEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::NewHeap(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache7NewHeapEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::GetCache() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache8GetCacheEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::Scavenge() -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache8ScavengeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::MetaDataAlloc(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc13MetaDataAllocEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::InsertRange(void*, void*, int) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ShrinkCache(int, bool) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::OverheadBytes() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::MakeCacheSpace() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ReleaseToSpans(void*) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::ReleaseListToSpans(void*) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::EvictRandomSizeClass(int, bool) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::Init(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList4InitEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::Populate() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList8PopulateEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::CentralFreeList::tc_length() -->
    <elf-symbol name='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::ReadStackTracesAndClear() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::AddTrace(tcmalloc::StackTrace const&) -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc15StackTraceTableC1Ev' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::~StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableD1Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::~StackTraceTable() -->
    <elf-symbol name='_ZN8tcmalloc15StackTraceTableD2Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc15StackTraceTableD1Ev' is-defined='yes'/>
    <!-- tcmalloc::AlignmentForSize(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc16AlignmentForSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DumpProcSelfMaps(int) -->
    <elf-symbol name='_ZN8tcmalloc16DumpProcSelfMapsEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::FillProcSelfMaps(char*, int, bool*) -->
    <elf-symbol name='_ZN8tcmalloc16FillProcSelfMapsEPciPb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::commandlineflags::StringToBool(char const*, bool) -->
    <elf-symbol name='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::metadata_system_bytes() -->
    <elf-symbol name='_ZN8tcmalloc21metadata_system_bytesEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Log(tcmalloc::LogMode, char const*, int, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem) -->
    <elf-symbol name='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::Add(tcmalloc::LogItem const&) -->
    <elf-symbol name='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::AddNum(unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc6Logger6AddNumEmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Logger::AddStr(char const*, int) -->
    <elf-symbol name='_ZN8tcmalloc6Logger6AddStrEPKci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::InitStaticVars() -->
    <elf-symbol name='_ZN8tcmalloc6Static14InitStaticVarsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::NewSpan(unsigned long, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc7NewSpanEmm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::InitStatics() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler11InitStaticsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::GetSamplePeriod() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::PickNextSamplingPoint() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::PopulateFastLog2Table() -->
    <elf-symbol name='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::Init(unsigned int) -->
    <elf-symbol name='_ZN8tcmalloc7Sampler4InitEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::SizeMap::NumMoveSize(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::SizeMap::Init() -->
    <elf-symbol name='_ZN8tcmalloc7SizeMap4InitEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::DLL_Init(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8DLL_InitEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::AllocLarge(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap10AllocLargeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CommitSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::EnsureLimit(unsigned long, bool) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::DecommitSpan(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetNextRange(unsigned long, base::MallocRange*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::MayMergeSpans(tcmalloc::Span*, tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CheckExpensive() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetLargeSpanStats(tcmalloc::PageHeap::LargeSpanStats*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GetSmallSpanStats(tcmalloc::PageHeap::SmallSpanStats*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PrependToFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::RegisterSizeClass(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::RemoveFromFreeList(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::IncrementalScavenge(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::ReleaseAtLeastNPages(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::ReleaseLastNormalSpan(tcmalloc::PageHeap::SpanList*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::SearchFreeAndLargeLists(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::New(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap3NewEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Carve(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Check() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5CheckEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Split(tcmalloc::Span*, unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::Delete(tcmalloc::Span*) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::GrowHeap(unsigned long) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap8GrowHeapEm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::CheckList(tcmalloc::Span*, unsigned long, unsigned long, int) -->
    <elf-symbol name='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PageHeap() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeapC1Ev' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZN8tcmalloc8PageHeapC2Ev' is-defined='yes'/>
    <!-- tcmalloc::PageHeap::PageHeap() -->
    <elf-symbol name='_ZN8tcmalloc8PageHeapC2Ev' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::GetCurrentState(ProfileData::State*) const -->
    <elf-symbol name='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::BytesLeaked() const -->
    <elf-symbol name='_ZNK15HeapLeakChecker11BytesLeakedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::ObjectsLeaked() const -->
    <elf-symbol name='_ZNK15HeapLeakChecker13ObjectsLeakedEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindInsideAlloc(void const*, unsigned long, void const**, unsigned long*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindAllocDetails(void const*, HeapProfileTable::AllocInfo*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FillOrderedProfile(char*, int) const -->
    <elf-symbol name='_ZNK16HeapProfileTable18FillOrderedProfileEPci' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::MakeSortedBucketList() const -->
    <elf-symbol name='_ZNK16HeapProfileTable20MakeSortedBucketListEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::IterateOrderedAllocContexts(void (*)(HeapProfileTable::AllocContextInfo const&)) const -->
    <elf-symbol name='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::FindAlloc(void const*, unsigned long*) const -->
    <elf-symbol name='_ZNK16HeapProfileTable9FindAllocEPKvPm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProcMapsIterator::Valid() const -->
    <elf-symbol name='_ZNK16ProcMapsIterator5ValidEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetSymAddr(Elf64_Sym const*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerdefAux(Elf64_Verdef const*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::LookupSymbol(char const*, char const*, int, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetNumSymbols() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage13GetNumSymbolsEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator*() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratordeEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator==(base::ElfMemImage::SymbolIterator const&) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator!=(base::ElfMemImage::SymbolIterator const&) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::SymbolIterator::operator&#45;>() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage14SymbolIteratorptEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::LookupSymbolByAddress(void const*, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::end() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage3endEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::begin() const -->
    <elf-symbol name='_ZNK4base11ElfMemImage5beginEv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetPhdr(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage7GetPhdrEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetDynstr(unsigned int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetDynstrEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetDynsym(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetDynsymEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerdef(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVerdefEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVerstr(unsigned int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVerstrEj' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::GetVersym(int) const -->
    <elf-symbol name='_ZNK4base11ElfMemImage9GetVersymEi' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::LookupSymbol(char const*, char const*, int, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::LookupSymbolByAddress(void const*, base::ElfMemImage::SymbolInfo*) const -->
    <elf-symbol name='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::GetSingular() const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::empty() const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::internal::HookList<void (*)(void const*, unsigned long)>::Traverse(void (**)(void const*, unsigned long), int) const -->
    <elf-symbol name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::StackTraceTable::Bucket::KeyEqual(unsigned long, tcmalloc::StackTrace const&) const -->
    <elf-symbol name='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_M_destroy(STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_create(unsigned long, unsigned long, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(char const*, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1EPKcRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2ERKS5_' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(char const*, STL_Allocator<char, HeapLeakChecker::Allocator> const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1EPKcRKS4_' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const&) -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2ERKS5_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string() -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev' type='func-type' binding='weak-binding' visibility='default-visibility' alias='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED2Ev' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string() -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED2Ev' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, AllocObject const&) -->
    <elf-symbol name='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, MallocExtension::FreeListInfo const&) -->
    <elf-symbol name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >, void (* const&)()) -->
    <elf-symbol name='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >, void* const&) -->
    <elf-symbol name='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, MemoryRegionMap::Region const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_erase(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique(std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<HeapProfileBucket*, std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileBucket*>, std::allocator<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_erase(std::_Rb_tree_node<std::pair<HeapProfileBucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_unique(std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<void const* const, char const*> >, std::pair<void const* const, char const*> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<void const*, std::pair<void const* const, char const*>, std::_Select1st<std::pair<void const* const, char const*> >, std::less<void const*>, std::allocator<std::pair<void const* const, char const*> > >::_M_erase(std::_Rb_tree_node<std::pair<void const* const, char const*> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique(std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > const, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<unsigned long const, HeapLeakChecker::RangeValue> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, HeapLeakChecker::RangeValue> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, unsigned long>, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair<unsigned long const, unsigned long> const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, STL_Allocator<std::pair<unsigned long const, unsigned long>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, unsigned long> >*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, STL_Allocator<unsigned long, HeapLeakChecker::Allocator> >::_M_insert_(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, unsigned long const&) -->
    <elf-symbol name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, STL_Allocator<unsigned long, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<unsigned long>*) -->
    <elf-symbol name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__adjust_heap<HeapProfileTable::Snapshot::Entry*, long, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, long, long, HeapProfileTable::Snapshot::Entry) -->
    <elf-symbol name='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__adjust_heap<HeapProfileBucket**, long, HeapProfileBucket*, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, long, long, HeapProfileBucket*, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__heap_select<HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
    <elf-symbol name='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__insertion_sort<HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__introsort_loop<HeapProfileTable::Snapshot::Entry*, long>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, long) -->
    <elf-symbol name='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- void std::__introsort_loop<HeapProfileBucket**, long, bool (*)(HeapProfileStats*, HeapProfileStats*)>(HeapProfileBucket**, HeapProfileBucket**, long, bool (*)(HeapProfileStats*, HeapProfileStats*)) -->
    <elf-symbol name='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) -->
    <elf-symbol name='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_' type='func-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete[](void*) -->
    <elf-symbol name='_ZdaPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete[](void*, std::nothrow_t const&) -->
    <elf-symbol name='_ZdaPvRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete(void*) -->
    <elf-symbol name='_ZdlPv' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator delete(void*, std::nothrow_t const&) -->
    <elf-symbol name='_ZdlPvRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new[](unsigned long) -->
    <elf-symbol name='_Znam' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new[](unsigned long, std::nothrow_t const&) -->
    <elf-symbol name='_ZnamRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new(unsigned long) -->
    <elf-symbol name='_Znwm' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- operator new(unsigned long, std::nothrow_t const&) -->
    <elf-symbol name='_ZnwmRKSt9nothrow_t' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_calloc -->
    <elf-symbol name='__libc_calloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_cfree -->
    <elf-symbol name='__libc_cfree' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_free -->
    <elf-symbol name='__libc_free' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_malloc -->
    <elf-symbol name='__libc_malloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_memalign -->
    <elf-symbol name='__libc_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_pvalloc -->
    <elf-symbol name='__libc_pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_realloc -->
    <elf-symbol name='__libc_realloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __libc_valloc -->
    <elf-symbol name='__libc_valloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __posix_memalign -->
    <elf-symbol name='__posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- _fini -->
    <elf-symbol name='_fini' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- _init -->
    <elf-symbol name='_init' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- calloc -->
    <elf-symbol name='calloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- cfree -->
    <elf-symbol name='cfree' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- free -->
    <elf-symbol name='free' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mallinfo -->
    <elf-symbol name='mallinfo' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc -->
    <elf-symbol name='malloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_size -->
    <elf-symbol name='malloc_size' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_stats -->
    <elf-symbol name='malloc_stats' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- malloc_usable_size -->
    <elf-symbol name='malloc_usable_size' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mallopt -->
    <elf-symbol name='mallopt' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- memalign -->
    <elf-symbol name='memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mmap -->
    <elf-symbol name='mmap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mmap64 -->
    <elf-symbol name='mmap64' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- mremap -->
    <elf-symbol name='mremap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- munmap -->
    <elf-symbol name='munmap' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- posix_memalign -->
    <elf-symbol name='posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- pvalloc -->
    <elf-symbol name='pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- realloc -->
    <elf-symbol name='realloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- sbrk -->
    <elf-symbol name='sbrk' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_calloc -->
    <elf-symbol name='tc_calloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='calloc,__libc_calloc' is-defined='yes'/>
    <!-- tc_cfree -->
    <elf-symbol name='tc_cfree' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_cfree,cfree' is-defined='yes'/>
    <!-- tc_delete -->
    <elf-symbol name='tc_delete' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdlPv' is-defined='yes'/>
    <!-- tc_delete_nothrow -->
    <elf-symbol name='tc_delete_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdlPvRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_deletearray -->
    <elf-symbol name='tc_deletearray' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdaPv' is-defined='yes'/>
    <!-- tc_deletearray_nothrow -->
    <elf-symbol name='tc_deletearray_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZdaPvRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_free -->
    <elf-symbol name='tc_free' type='func-type' binding='global-binding' visibility='default-visibility' alias='free,__libc_free' is-defined='yes'/>
    <!-- tc_mallinfo -->
    <elf-symbol name='tc_mallinfo' type='func-type' binding='global-binding' visibility='default-visibility' alias='mallinfo' is-defined='yes'/>
    <!-- tc_malloc -->
    <elf-symbol name='tc_malloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_malloc,malloc' is-defined='yes'/>
    <!-- tc_malloc_size -->
    <elf-symbol name='tc_malloc_size' type='func-type' binding='global-binding' visibility='default-visibility' alias='malloc_usable_size,malloc_size' is-defined='yes'/>
    <!-- tc_malloc_skip_new_handler -->
    <elf-symbol name='tc_malloc_skip_new_handler' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_malloc_stats -->
    <elf-symbol name='tc_malloc_stats' type='func-type' binding='global-binding' visibility='default-visibility' alias='malloc_stats' is-defined='yes'/>
    <!-- tc_mallopt -->
    <elf-symbol name='tc_mallopt' type='func-type' binding='global-binding' visibility='default-visibility' alias='mallopt' is-defined='yes'/>
    <!-- tc_memalign -->
    <elf-symbol name='tc_memalign' type='func-type' binding='global-binding' visibility='default-visibility' alias='memalign,__libc_memalign' is-defined='yes'/>
    <!-- tc_new -->
    <elf-symbol name='tc_new' type='func-type' binding='global-binding' visibility='default-visibility' alias='_Znwm' is-defined='yes'/>
    <!-- tc_new_nothrow -->
    <elf-symbol name='tc_new_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZnwmRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_newarray -->
    <elf-symbol name='tc_newarray' type='func-type' binding='global-binding' visibility='default-visibility' alias='_Znam' is-defined='yes'/>
    <!-- tc_newarray_nothrow -->
    <elf-symbol name='tc_newarray_nothrow' type='func-type' binding='global-binding' visibility='default-visibility' alias='_ZnamRKSt9nothrow_t' is-defined='yes'/>
    <!-- tc_posix_memalign -->
    <elf-symbol name='tc_posix_memalign' type='func-type' binding='global-binding' visibility='default-visibility' alias='__posix_memalign,posix_memalign' is-defined='yes'/>
    <!-- tc_pvalloc -->
    <elf-symbol name='tc_pvalloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='pvalloc,__libc_pvalloc' is-defined='yes'/>
    <!-- tc_realloc -->
    <elf-symbol name='tc_realloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_realloc,realloc' is-defined='yes'/>
    <!-- tc_set_new_mode -->
    <elf-symbol name='tc_set_new_mode' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tc_valloc -->
    <elf-symbol name='tc_valloc' type='func-type' binding='global-binding' visibility='default-visibility' alias='__libc_valloc,valloc' is-defined='yes'/>
    <!-- tc_version -->
    <elf-symbol name='tc_version' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- valloc -->
    <elf-symbol name='valloc' type='func-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
  </elf-function-symbols>
  <elf-variable-symbols>
    <!-- TCMalloc_SystemTaken -->
    <elf-symbol name='TCMalloc_SystemTaken' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- CpuProfiler::instance_ -->
    <elf-symbol name='_ZN11CpuProfiler9instance_E' size='88' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapCleaner::heap_cleanups_ -->
    <elf-symbol name='_ZN11HeapCleaner14heap_cleanups_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kBufferLength -->
    <elf-symbol name='_ZN11ProfileData13kBufferLengthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kAssociativity -->
    <elf-symbol name='_ZN11ProfileData14kAssociativityE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kMaxStackDepth -->
    <elf-symbol name='_ZN11ProfileData14kMaxStackDepthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileData::kBuckets -->
    <elf-symbol name='_ZN11ProfileData8kBucketsE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::kMaxFrequency -->
    <elf-symbol name='_ZN14ProfileHandler13kMaxFrequencyE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::kDefaultFrequency -->
    <elf-symbol name='_ZN14ProfileHandler17kDefaultFrequencyE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::once_ -->
    <elf-symbol name='_ZN14ProfileHandler5once_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- ProfileHandler::instance_ -->
    <elf-symbol name='_ZN14ProfileHandler9instance_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::alloc_count_ -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator12alloc_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakChecker::Allocator::arena_ -->
    <elf-symbol name='_ZN15HeapLeakChecker9Allocator6arena_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::owner_lock_ -->
    <elf-symbol name='_ZN15MemoryRegionMap11owner_lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::unmap_size_ -->
    <elf-symbol name='_ZN15MemoryRegionMap11unmap_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::num_buckets_ -->
    <elf-symbol name='_ZN15MemoryRegionMap12num_buckets_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::bucket_table_ -->
    <elf-symbol name='_ZN15MemoryRegionMap13bucket_table_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::client_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap13client_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_ -->
    <elf-symbol name='_ZN15MemoryRegionMap14saved_buckets_E' size='1120' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::lock_owner_tid_ -->
    <elf-symbol name='_ZN15MemoryRegionMap15lock_owner_tid_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::max_stack_depth_ -->
    <elf-symbol name='_ZN15MemoryRegionMap16max_stack_depth_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::recursion_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap16recursion_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_keys_ -->
    <elf-symbol name='_ZN15MemoryRegionMap19saved_buckets_keys_E' size='5120' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::saved_buckets_count_ -->
    <elf-symbol name='_ZN15MemoryRegionMap20saved_buckets_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::lock_ -->
    <elf-symbol name='_ZN15MemoryRegionMap5lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::arena_ -->
    <elf-symbol name='_ZN15MemoryRegionMap6arena_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::regions_ -->
    <elf-symbol name='_ZN15MemoryRegionMap8regions_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- MemoryRegionMap::map_size_ -->
    <elf-symbol name='_ZN15MemoryRegionMap9map_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::kMaxStackDepth -->
    <elf-symbol name='_ZN16HeapProfileTable14kMaxStackDepthE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapProfileTable::kFileExt -->
    <elf-symbol name='_ZN16HeapProfileTable8kFileExtE' size='6' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- HeapLeakCheckerGlobalPrePost::count_ -->
    <elf-symbol name='_ZN28HeapLeakCheckerGlobalPrePost6count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::ElfMemImage::kInvalidBase -->
    <elf-symbol name='_ZN4base11ElfMemImage12kInvalidBaseE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- base::VDSOSupport::vdso_base_ -->
    <elf-symbol name='_ZN4base11VDSOSupport10vdso_base_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_log -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_log -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_mmap -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_sbrk -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_report -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_only_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_mmap -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_sbrk -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_report -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noonly_mmap_profile -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cpu_profiler_unittest -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_strict_check -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocpu_profiler_unittest -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_run_under_gdb -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_map_private -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cleanup_old_heap_profiles -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_identify_leaks -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_strict_check -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_abort_on_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_run_under_gdb -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_map_private -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocleanup_old_heap_profiles -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_identify_leaks -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_after_destructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_abort_on_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_global_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_thread_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_disable_memory_release -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_ignore_mmap_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_before_constructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_after_destructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_global_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_thread_live -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_disable_memory_release -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_ignore_mmap_fail -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_before_constructors -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_test_pointer_alignment -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_test_pointer_alignment -->
    <elf-symbol name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_verbose -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noverbose -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_limit -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_start -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_max_leaks -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_limit -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_start -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_max_leaks -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_delay_seconds -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_delay_seconds -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_pointer_source_alignment -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_pointer_source_alignment -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_memfs_malloc_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_heap_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_nomemfs_malloc_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_heap_limit_mb -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_sample_parameter -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_time_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_inuse_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_sample_parameter -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_time_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_check_max_pointer_offset -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_inuse_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_check_max_pointer_offset -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_allocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_deallocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_allocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_deallocation_interval -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_large_alloc_report_threshold -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_large_alloc_report_threshold -->
    <elf-symbol name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_tcmalloc_release_rate -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_notcmalloc_release_rate -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_symbolize_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_memfs_malloc_path -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nosymbolize_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_profile_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nomemfs_malloc_path -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_profile_pprof -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check_dump_directory -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check_dump_directory -->
    <elf-symbol name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- SpinLock::LINKER_INITIALIZED -->
    <elf-symbol name='_ZN8SpinLock18LINKER_INITIALIZEDE' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::tsd_inited_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache11tsd_inited_E' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::thread_heaps_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache13thread_heaps_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::threadlocal_data_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache17threadlocal_data_E' size='16' type='tls-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::next_memory_steal_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18next_memory_steal_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::thread_heap_count_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache18thread_heap_count_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::per_thread_cache_size_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::unclaimed_cache_space_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::overall_thread_cache_size_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::ThreadCache::heap_key_ -->
    <elf-symbol name='_ZN8tcmalloc11ThreadCache9heap_key_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::log_message_writer -->
    <elf-symbol name='_ZN8tcmalloc18log_message_writerE' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::threadcache_allocator -->
    <elf-symbol name='_ZN8tcmalloc21threadcache_allocatorE' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::central_cache_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14central_cache_E' size='107008' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::growth_stacks_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14growth_stacks_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::pageheap_lock_ -->
    <elf-symbol name='_ZN8tcmalloc6Static14pageheap_lock_E' size='4' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::span_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static15span_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::sampled_objects_ -->
    <elf-symbol name='_ZN8tcmalloc6Static16sampled_objects_E' size='48' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::bucket_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static17bucket_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::stacktrace_allocator_ -->
    <elf-symbol name='_ZN8tcmalloc6Static21stacktrace_allocator_E' size='32' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::sizemap_ -->
    <elf-symbol name='_ZN8tcmalloc6Static8sizemap_E' size='3936' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Static::pageheap_ -->
    <elf-symbol name='_ZN8tcmalloc6Static9pageheap_E' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- tcmalloc::Sampler::log_table_ -->
    <elf-symbol name='_ZN8tcmalloc7Sampler10log_table_E' size='8192' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_terminal -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE' size='1' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_empty_rep_storage -->
    <elf-symbol name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE' size='32' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for SysAllocator -->
    <elf-symbol name='_ZTI12SysAllocator' size='16' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for MallocExtension -->
    <elf-symbol name='_ZTI15MallocExtension' size='16' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for MmapSysAllocator -->
    <elf-symbol name='_ZTI16MmapSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for SbrkSysAllocator -->
    <elf-symbol name='_ZTI16SbrkSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for DevMemSysAllocator -->
    <elf-symbol name='_ZTI18DevMemSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for DefaultSysAllocator -->
    <elf-symbol name='_ZTI19DefaultSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for HugetlbSysAllocator -->
    <elf-symbol name='_ZTI19HugetlbSysAllocator' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo for TCMallocImplementation -->
    <elf-symbol name='_ZTI22TCMallocImplementation' size='24' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for SysAllocator -->
    <elf-symbol name='_ZTS12SysAllocator' size='15' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for MallocExtension -->
    <elf-symbol name='_ZTS15MallocExtension' size='18' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for MmapSysAllocator -->
    <elf-symbol name='_ZTS16MmapSysAllocator' size='19' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for SbrkSysAllocator -->
    <elf-symbol name='_ZTS16SbrkSysAllocator' size='19' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for DevMemSysAllocator -->
    <elf-symbol name='_ZTS18DevMemSysAllocator' size='21' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for DefaultSysAllocator -->
    <elf-symbol name='_ZTS19DefaultSysAllocator' size='22' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for HugetlbSysAllocator -->
    <elf-symbol name='_ZTS19HugetlbSysAllocator' size='22' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- typeinfo name for TCMallocImplementation -->
    <elf-symbol name='_ZTS22TCMallocImplementation' size='25' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for SysAllocator -->
    <elf-symbol name='_ZTV12SysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for MallocExtension -->
    <elf-symbol name='_ZTV15MallocExtension' size='232' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for MmapSysAllocator -->
    <elf-symbol name='_ZTV16MmapSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for SbrkSysAllocator -->
    <elf-symbol name='_ZTV16SbrkSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for DevMemSysAllocator -->
    <elf-symbol name='_ZTV18DevMemSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for DefaultSysAllocator -->
    <elf-symbol name='_ZTV19DefaultSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for HugetlbSysAllocator -->
    <elf-symbol name='_ZTV19HugetlbSysAllocator' size='40' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- vtable for TCMallocImplementation -->
    <elf-symbol name='_ZTV22TCMallocImplementation' size='232' type='object-type' binding='weak-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kPageHeapType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE13kPageHeapType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kLargeSpanType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE14kLargeSpanType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kThreadCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE16kThreadCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kCentralCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE17kCentralCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kTransferCacheType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE18kTransferCacheType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kPageHeapUnmappedType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE21kPageHeapUnmappedType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*)::kLargeUnmappedSpanType -->
    <elf-symbol name='_ZZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EEE22kLargeUnmappedSpanType' size='8' type='object-type' binding='gnu-unique-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __free_hook -->
    <elf-symbol name='__free_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __malloc_hook -->
    <elf-symbol name='__malloc_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __memalign_hook -->
    <elf-symbol name='__memalign_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- __realloc_hook -->
    <elf-symbol name='__realloc_hook' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- heap_leak_checker_bcad_variable -->
    <elf-symbol name='heap_leak_checker_bcad_variable' size='1' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
    <!-- sys_alloc -->
    <elf-symbol name='sys_alloc' size='8' type='object-type' binding='global-binding' visibility='default-visibility' is-defined='yes'/>
  </elf-variable-symbols>
  <abi-instr address-size='64' path='src/base/atomicops-internals-x86.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/dynamic_annotations.c' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C89'>
    <!-- int RunningOnValgrind() -->
    <function-decl name='RunningOnValgrind' mangled-name='RunningOnValgrind' filepath='src/base/dynamic_annotations.c' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='RunningOnValgrind'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- double ValgrindSlowdown() -->
    <function-decl name='ValgrindSlowdown' mangled-name='ValgrindSlowdown' filepath='src/base/dynamic_annotations.c' line='166' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ValgrindSlowdown'>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- double -->
    <type-decl name='double' size-in-bits='64' id='type-id-2'/>
    <!-- int -->
    <type-decl name='int' size-in-bits='32' id='type-id-1'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/elf_mem_image.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- unsigned char[16] -->
    <array-type-def dimensions='1' type-id='type-id-3' size-in-bits='128' id='type-id-4'>
      <!-- <anonymous range>[16] -->
      <subrange length='16' type-id='type-id-5' id='type-id-6'/>
    </array-type-def>
    <!-- struct Elf64_Sym -->
    <class-decl name='Elf64_Sym' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/include/elf.h' line='389' column='1' id='type-id-7'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Sym::st_name -->
        <var-decl name='st_name' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='390' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- unsigned char Elf64_Sym::st_info -->
        <var-decl name='st_info' type-id='type-id-3' visibility='default' filepath='/usr/include/elf.h' line='391' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='40'>
        <!-- unsigned char Elf64_Sym::st_other -->
        <var-decl name='st_other' type-id='type-id-3' visibility='default' filepath='/usr/include/elf.h' line='392' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='48'>
        <!-- Elf64_Section Elf64_Sym::st_shndx -->
        <var-decl name='st_shndx' type-id='type-id-9' visibility='default' filepath='/usr/include/elf.h' line='393' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Addr Elf64_Sym::st_value -->
        <var-decl name='st_value' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='394' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Xword Elf64_Sym::st_size -->
        <var-decl name='st_size' type-id='type-id-11' visibility='default' filepath='/usr/include/elf.h' line='395' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef uint32_t Elf64_Word -->
    <typedef-decl name='Elf64_Word' type-id='type-id-12' filepath='/usr/include/elf.h' line='39' column='1' id='type-id-8'/>
    <!-- typedef uint16_t Elf64_Section -->
    <typedef-decl name='Elf64_Section' type-id='type-id-13' filepath='/usr/include/elf.h' line='58' column='1' id='type-id-9'/>
    <!-- typedef unsigned short int uint16_t -->
    <typedef-decl name='uint16_t' type-id='type-id-14' filepath='/usr/include/stdint.h' line='50' column='1' id='type-id-13'/>
    <!-- typedef uint64_t Elf64_Addr -->
    <typedef-decl name='Elf64_Addr' type-id='type-id-15' filepath='/usr/include/elf.h' line='50' column='1' id='type-id-10'/>
    <!-- typedef uint64_t Elf64_Xword -->
    <typedef-decl name='Elf64_Xword' type-id='type-id-15' filepath='/usr/include/elf.h' line='45' column='1' id='type-id-11'/>
    <!-- struct Elf64_Ehdr -->
    <class-decl name='Elf64_Ehdr' size-in-bits='512' is-struct='yes' visibility='default' filepath='/usr/include/elf.h' line='88' column='1' id='type-id-16'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- unsigned char Elf64_Ehdr::e_ident[16] -->
        <var-decl name='e_ident' type-id='type-id-4' visibility='default' filepath='/usr/include/elf.h' line='89' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Half Elf64_Ehdr::e_type -->
        <var-decl name='e_type' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='90' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='144'>
        <!-- Elf64_Half Elf64_Ehdr::e_machine -->
        <var-decl name='e_machine' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='91' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- Elf64_Word Elf64_Ehdr::e_version -->
        <var-decl name='e_version' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='92' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- Elf64_Addr Elf64_Ehdr::e_entry -->
        <var-decl name='e_entry' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='93' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- Elf64_Off Elf64_Ehdr::e_phoff -->
        <var-decl name='e_phoff' type-id='type-id-18' visibility='default' filepath='/usr/include/elf.h' line='94' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- Elf64_Off Elf64_Ehdr::e_shoff -->
        <var-decl name='e_shoff' type-id='type-id-18' visibility='default' filepath='/usr/include/elf.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- Elf64_Word Elf64_Ehdr::e_flags -->
        <var-decl name='e_flags' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='96' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='416'>
        <!-- Elf64_Half Elf64_Ehdr::e_ehsize -->
        <var-decl name='e_ehsize' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='97' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='432'>
        <!-- Elf64_Half Elf64_Ehdr::e_phentsize -->
        <var-decl name='e_phentsize' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- Elf64_Half Elf64_Ehdr::e_phnum -->
        <var-decl name='e_phnum' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='99' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='464'>
        <!-- Elf64_Half Elf64_Ehdr::e_shentsize -->
        <var-decl name='e_shentsize' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='480'>
        <!-- Elf64_Half Elf64_Ehdr::e_shnum -->
        <var-decl name='e_shnum' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='101' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='496'>
        <!-- Elf64_Half Elf64_Ehdr::e_shstrndx -->
        <var-decl name='e_shstrndx' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='102' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef uint16_t Elf64_Half -->
    <typedef-decl name='Elf64_Half' type-id='type-id-13' filepath='/usr/include/elf.h' line='34' column='1' id='type-id-17'/>
    <!-- typedef uint64_t Elf64_Off -->
    <typedef-decl name='Elf64_Off' type-id='type-id-15' filepath='/usr/include/elf.h' line='54' column='1' id='type-id-18'/>
    <!-- typedef Elf64_Half Elf64_Versym -->
    <typedef-decl name='Elf64_Versym' type-id='type-id-17' filepath='/usr/include/elf.h' line='62' column='1' id='type-id-19'/>
    <!-- struct Elf64_Verdef -->
    <class-decl name='Elf64_Verdef' size-in-bits='160' is-struct='yes' visibility='default' filepath='/usr/include/elf.h' line='812' column='1' id='type-id-20'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Half Elf64_Verdef::vd_version -->
        <var-decl name='vd_version' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='813' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='16'>
        <!-- Elf64_Half Elf64_Verdef::vd_flags -->
        <var-decl name='vd_flags' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='814' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Half Elf64_Verdef::vd_ndx -->
        <var-decl name='vd_ndx' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='815' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='48'>
        <!-- Elf64_Half Elf64_Verdef::vd_cnt -->
        <var-decl name='vd_cnt' type-id='type-id-17' visibility='default' filepath='/usr/include/elf.h' line='816' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Word Elf64_Verdef::vd_hash -->
        <var-decl name='vd_hash' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='817' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- Elf64_Word Elf64_Verdef::vd_aux -->
        <var-decl name='vd_aux' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='818' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Word Elf64_Verdef::vd_next -->
        <var-decl name='vd_next' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='819' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Phdr -->
    <class-decl name='Elf64_Phdr' size-in-bits='448' is-struct='yes' visibility='default' filepath='/usr/include/elf.h' line='551' column='1' id='type-id-21'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Phdr::p_type -->
        <var-decl name='p_type' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='552' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Word Elf64_Phdr::p_flags -->
        <var-decl name='p_flags' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='553' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- Elf64_Off Elf64_Phdr::p_offset -->
        <var-decl name='p_offset' type-id='type-id-18' visibility='default' filepath='/usr/include/elf.h' line='554' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- Elf64_Addr Elf64_Phdr::p_vaddr -->
        <var-decl name='p_vaddr' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='555' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- Elf64_Addr Elf64_Phdr::p_paddr -->
        <var-decl name='p_paddr' type-id='type-id-10' visibility='default' filepath='/usr/include/elf.h' line='556' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- Elf64_Xword Elf64_Phdr::p_filesz -->
        <var-decl name='p_filesz' type-id='type-id-11' visibility='default' filepath='/usr/include/elf.h' line='557' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- Elf64_Xword Elf64_Phdr::p_memsz -->
        <var-decl name='p_memsz' type-id='type-id-11' visibility='default' filepath='/usr/include/elf.h' line='558' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- Elf64_Xword Elf64_Phdr::p_align -->
        <var-decl name='p_align' type-id='type-id-11' visibility='default' filepath='/usr/include/elf.h' line='559' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct Elf64_Verdaux -->
    <class-decl name='Elf64_Verdaux' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/include/elf.h' line='849' column='1' id='type-id-22'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- Elf64_Word Elf64_Verdaux::vda_name -->
        <var-decl name='vda_name' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='850' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- Elf64_Word Elf64_Verdaux::vda_next -->
        <var-decl name='vda_next' type-id='type-id-8' visibility='default' filepath='/usr/include/elf.h' line='851' column='1'/>
      </data-member>
    </class-decl>
    <!-- base::ElfMemImage* -->
    <pointer-type-def type-id='type-id-23' size-in-bits='64' id='type-id-24'/>
    <!-- base::ElfMemImage* const -->
    <qualified-type-def type-id='type-id-24' const='yes' id='type-id-25'/>
    <!-- base::ElfMemImage::SymbolInfo* -->
    <pointer-type-def type-id='type-id-26' size-in-bits='64' id='type-id-27'/>
    <!-- base::ElfMemImage::SymbolIterator& -->
    <reference-type-def kind='lvalue' type-id='type-id-28' size-in-bits='64' id='type-id-29'/>
    <!-- base::ElfMemImage::SymbolIterator* -->
    <pointer-type-def type-id='type-id-28' size-in-bits='64' id='type-id-30'/>
    <!-- base::ElfMemImage::SymbolIterator* const -->
    <qualified-type-def type-id='type-id-30' const='yes' id='type-id-31'/>
    <!-- const Elf64_Ehdr -->
    <qualified-type-def type-id='type-id-16' const='yes' id='type-id-32'/>
    <!-- const Elf64_Ehdr* -->
    <pointer-type-def type-id='type-id-32' size-in-bits='64' id='type-id-33'/>
    <!-- const Elf64_Phdr -->
    <qualified-type-def type-id='type-id-21' const='yes' id='type-id-34'/>
    <!-- const Elf64_Phdr* -->
    <pointer-type-def type-id='type-id-34' size-in-bits='64' id='type-id-35'/>
    <!-- const Elf64_Sym -->
    <qualified-type-def type-id='type-id-7' const='yes' id='type-id-36'/>
    <!-- const Elf64_Sym* -->
    <pointer-type-def type-id='type-id-36' size-in-bits='64' id='type-id-37'/>
    <!-- const Elf64_Verdaux -->
    <qualified-type-def type-id='type-id-22' const='yes' id='type-id-38'/>
    <!-- const Elf64_Verdaux* -->
    <pointer-type-def type-id='type-id-38' size-in-bits='64' id='type-id-39'/>
    <!-- const Elf64_Verdef -->
    <qualified-type-def type-id='type-id-20' const='yes' id='type-id-40'/>
    <!-- const Elf64_Verdef* -->
    <pointer-type-def type-id='type-id-40' size-in-bits='64' id='type-id-41'/>
    <!-- const Elf64_Versym -->
    <qualified-type-def type-id='type-id-19' const='yes' id='type-id-42'/>
    <!-- const Elf64_Versym* -->
    <pointer-type-def type-id='type-id-42' size-in-bits='64' id='type-id-43'/>
    <!-- const Elf64_Word -->
    <qualified-type-def type-id='type-id-8' const='yes' id='type-id-44'/>
    <!-- const Elf64_Word* -->
    <pointer-type-def type-id='type-id-44' size-in-bits='64' id='type-id-45'/>
    <!-- const base::ElfMemImage -->
    <qualified-type-def type-id='type-id-23' const='yes' id='type-id-46'/>
    <!-- const base::ElfMemImage* -->
    <pointer-type-def type-id='type-id-46' size-in-bits='64' id='type-id-47'/>
    <!-- const base::ElfMemImage* const -->
    <qualified-type-def type-id='type-id-47' const='yes' id='type-id-48'/>
    <!-- const base::ElfMemImage::SymbolInfo -->
    <qualified-type-def type-id='type-id-26' const='yes' id='type-id-49'/>
    <!-- const base::ElfMemImage::SymbolInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-49' size-in-bits='64' id='type-id-50'/>
    <!-- const base::ElfMemImage::SymbolInfo* -->
    <pointer-type-def type-id='type-id-49' size-in-bits='64' id='type-id-51'/>
    <!-- const base::ElfMemImage::SymbolIterator -->
    <qualified-type-def type-id='type-id-28' const='yes' id='type-id-52'/>
    <!-- const base::ElfMemImage::SymbolIterator& -->
    <qualified-type-def type-id='type-id-53' id='type-id-54'/>
    <!-- const base::ElfMemImage::SymbolIterator& -->
    <reference-type-def kind='lvalue' type-id='type-id-52' size-in-bits='64' id='type-id-53'/>
    <!-- const base::ElfMemImage::SymbolIterator* -->
    <pointer-type-def type-id='type-id-52' size-in-bits='64' id='type-id-55'/>
    <!-- const base::ElfMemImage::SymbolIterator* const -->
    <qualified-type-def type-id='type-id-55' const='yes' id='type-id-56'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::ElfMemImage -->
      <class-decl name='ElfMemImage' size-in-bits='576' visibility='default' filepath='./src/base/elf_mem_image.h' line='56' column='1' id='type-id-23'>
        <member-type access='private'>
          <!-- struct base::ElfMemImage::SymbolInfo -->
          <class-decl name='SymbolInfo' size-in-bits='256' is-struct='yes' visibility='default' filepath='./src/base/elf_mem_image.h' line='64' column='1' id='type-id-26'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- const char* base::ElfMemImage::SymbolInfo::name -->
              <var-decl name='name' type-id='type-id-57' visibility='default' filepath='./src/base/elf_mem_image.h' line='65' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- const char* base::ElfMemImage::SymbolInfo::version -->
              <var-decl name='version' type-id='type-id-57' visibility='default' filepath='./src/base/elf_mem_image.h' line='66' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void* base::ElfMemImage::SymbolInfo::address -->
              <var-decl name='address' type-id='type-id-58' visibility='default' filepath='./src/base/elf_mem_image.h' line='68' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- const Elf64_Sym* base::ElfMemImage::SymbolInfo::symbol -->
              <var-decl name='symbol' type-id='type-id-37' visibility='default' filepath='./src/base/elf_mem_image.h' line='69' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- class base::ElfMemImage::SymbolIterator -->
          <class-decl name='SymbolIterator' size-in-bits='384' visibility='default' filepath='./src/base/elf_mem_image.h' line='73' column='1' id='type-id-28'>
            <data-member access='private' layout-offset-in-bits='0'>
              <!-- base::ElfMemImage::SymbolInfo base::ElfMemImage::SymbolIterator::info_ -->
              <var-decl name='info_' type-id='type-id-26' visibility='default' filepath='./src/base/elf_mem_image.h' line='84' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='256'>
              <!-- int base::ElfMemImage::SymbolIterator::index_ -->
              <var-decl name='index_' type-id='type-id-1' visibility='default' filepath='./src/base/elf_mem_image.h' line='85' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='320'>
              <!-- void* const base::ElfMemImage::SymbolIterator::image_ -->
              <var-decl name='image_' type-id='type-id-59' visibility='default' filepath='./src/base/elf_mem_image.h' line='86' column='1'/>
            </data-member>
            <member-function access='private' constructor='yes'>
              <!-- base::ElfMemImage::SymbolIterator::SymbolIterator(void*, int) -->
              <function-decl name='SymbolIterator' mangled-name='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi' filepath='./src/base/elf_mem_image.h' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIteratorC2EPKvi'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator*' -->
                <parameter type-id='type-id-30' is-artificial='yes'/>
                <!-- parameter of type 'void*' -->
                <parameter type-id='type-id-58'/>
                <!-- parameter of type 'int' -->
                <parameter type-id='type-id-1'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- const base::ElfMemImage::SymbolInfo* base::ElfMemImage::SymbolIterator::operator&#45;>() -->
              <function-decl name='operator-&gt;' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratorptEv' filepath='src/base/elf_mem_image.cc' line='362' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratorptEv'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-56' name='this' is-artificial='yes'/>
                <!-- const base::ElfMemImage::SymbolInfo* -->
                <return type-id='type-id-51'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- const base::ElfMemImage::SymbolInfo& base::ElfMemImage::SymbolIterator::operator*() -->
              <function-decl name='operator*' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratordeEv' filepath='src/base/elf_mem_image.cc' line='366' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratordeEv'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-56' name='this' is-artificial='yes'/>
                <!-- const base::ElfMemImage::SymbolInfo& -->
                <return type-id='type-id-50'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- bool base::ElfMemImage::SymbolIterator::operator==(const base::ElfMemImage::SymbolIterator&) -->
              <function-decl name='operator==' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_' filepath='src/base/elf_mem_image.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratoreqERKS1_'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-56' name='this' is-artificial='yes'/>
                <!-- parameter of type 'const base::ElfMemImage::SymbolIterator&' -->
                <parameter type-id='type-id-54' name='rhs' filepath='src/base/elf_mem_image.cc' line='370' column='1'/>
                <!-- bool -->
                <return type-id='type-id-61'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- bool base::ElfMemImage::SymbolIterator::operator!=(const base::ElfMemImage::SymbolIterator&) -->
              <function-decl name='operator!=' mangled-name='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_' filepath='src/base/elf_mem_image.cc' line='374' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage14SymbolIteratorneERKS1_'>
                <!-- implicit parameter of type 'const base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-56' name='this' is-artificial='yes'/>
                <!-- parameter of type 'const base::ElfMemImage::SymbolIterator&' -->
                <parameter type-id='type-id-54' name='rhs' filepath='src/base/elf_mem_image.cc' line='370' column='1'/>
                <!-- bool -->
                <return type-id='type-id-61'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- void base::ElfMemImage::SymbolIterator::Update(int) -->
              <function-decl name='Update' mangled-name='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi' filepath='src/base/elf_mem_image.cc' line='393' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIterator6UpdateEi'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-31' name='this' is-artificial='yes'/>
                <!-- parameter of type 'int' -->
                <parameter type-id='type-id-1' name='increment' filepath='src/base/elf_mem_image.cc' line='393' column='1'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='private'>
              <!-- base::ElfMemImage::SymbolIterator& base::ElfMemImage::SymbolIterator::operator++() -->
              <function-decl name='operator++' mangled-name='_ZN4base11ElfMemImage14SymbolIteratorppEv' filepath='src/base/elf_mem_image.cc' line='378' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage14SymbolIteratorppEv'>
                <!-- implicit parameter of type 'base::ElfMemImage::SymbolIterator* const' -->
                <parameter type-id='type-id-31' name='this' is-artificial='yes'/>
                <!-- base::ElfMemImage::SymbolIterator& -->
                <return type-id='type-id-29'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='private' static='yes'>
          <!-- static void* const base::ElfMemImage::kInvalidBase -->
          <var-decl name='kInvalidBase' type-id='type-id-59' mangled-name='_ZN4base11ElfMemImage12kInvalidBaseE' visibility='default' filepath='./src/base/elf_mem_image.h' line='59' column='1' elf-symbol-id='_ZN4base11ElfMemImage12kInvalidBaseE'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- const Elf64_Ehdr* base::ElfMemImage::ehdr_ -->
          <var-decl name='ehdr_' type-id='type-id-33' visibility='default' filepath='./src/base/elf_mem_image.h' line='120' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- const Elf64_Sym* base::ElfMemImage::dynsym_ -->
          <var-decl name='dynsym_' type-id='type-id-37' visibility='default' filepath='./src/base/elf_mem_image.h' line='121' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- const Elf64_Versym* base::ElfMemImage::versym_ -->
          <var-decl name='versym_' type-id='type-id-43' visibility='default' filepath='./src/base/elf_mem_image.h' line='122' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- const Elf64_Verdef* base::ElfMemImage::verdef_ -->
          <var-decl name='verdef_' type-id='type-id-41' visibility='default' filepath='./src/base/elf_mem_image.h' line='123' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='256'>
          <!-- const Elf64_Word* base::ElfMemImage::hash_ -->
          <var-decl name='hash_' type-id='type-id-45' visibility='default' filepath='./src/base/elf_mem_image.h' line='124' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='320'>
          <!-- const char* base::ElfMemImage::dynstr_ -->
          <var-decl name='dynstr_' type-id='type-id-57' visibility='default' filepath='./src/base/elf_mem_image.h' line='125' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='384'>
          <!-- size_t base::ElfMemImage::strsize_ -->
          <var-decl name='strsize_' type-id='type-id-62' visibility='default' filepath='./src/base/elf_mem_image.h' line='126' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='448'>
          <!-- size_t base::ElfMemImage::verdefnum_ -->
          <var-decl name='verdefnum_' type-id='type-id-62' visibility='default' filepath='./src/base/elf_mem_image.h' line='127' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='512'>
          <!-- Elf64_Addr base::ElfMemImage::link_base_ -->
          <var-decl name='link_base_' type-id='type-id-10' visibility='default' filepath='./src/base/elf_mem_image.h' line='128' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- base::ElfMemImage::ElfMemImage(void*) -->
          <function-decl name='ElfMemImage' mangled-name='_ZN4base11ElfMemImageC1EPKv' filepath='./src/base/elf_mem_image.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImageC1EPKv'>
            <!-- implicit parameter of type 'base::ElfMemImage*' -->
            <parameter type-id='type-id-24' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int base::ElfMemImage::GetNumSymbols() -->
          <function-decl name='GetNumSymbols' mangled-name='_ZNK4base11ElfMemImage13GetNumSymbolsEv' filepath='src/base/elf_mem_image.cc' line='119' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage13GetNumSymbolsEv'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdaux* base::ElfMemImage::GetVerdefAux(const Elf64_Verdef*) -->
          <function-decl name='GetVerdefAux' mangled-name='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef' filepath='src/base/elf_mem_image.cc' line='172' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Verdef*' -->
            <parameter type-id='type-id-41' name='verdef' filepath='src/base/elf_mem_image.cc' line='173' column='1'/>
            <!-- const Elf64_Verdaux* -->
            <return type-id='type-id-39'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::end() -->
          <function-decl name='end' mangled-name='_ZNK4base11ElfMemImage3endEv' filepath='src/base/elf_mem_image.cc' line='389' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage3endEv'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetVerstr(Elf64_Word) -->
          <function-decl name='GetVerstr' mangled-name='_ZNK4base11ElfMemImage9GetVerstrEj' filepath='src/base/elf_mem_image.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerstrEj'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-8' name='offset' filepath='src/base/elf_mem_image.cc' line='177' column='1'/>
            <!-- const char* -->
            <return type-id='type-id-57'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Verdef* base::ElfMemImage::GetVerdef(int) -->
          <function-decl name='GetVerdef' mangled-name='_ZNK4base11ElfMemImage9GetVerdefEi' filepath='src/base/elf_mem_image.cc' line='159' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVerdefEi'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='index' filepath='src/base/elf_mem_image.cc' line='159' column='1'/>
            <!-- const Elf64_Verdef* -->
            <return type-id='type-id-41'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* base::ElfMemImage::GetSymAddr(const Elf64_Sym*) -->
          <function-decl name='GetSymAddr' mangled-name='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym' filepath='src/base/elf_mem_image.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage10GetSymAddrEPK9Elf64_Sym'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const Elf64_Sym*' -->
            <parameter type-id='type-id-37' name='sym' filepath='src/base/elf_mem_image.cc' line='150' column='1'/>
            <!-- void* -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const char* base::ElfMemImage::GetDynstr(Elf64_Word) -->
          <function-decl name='GetDynstr' mangled-name='_ZNK4base11ElfMemImage9GetDynstrEj' filepath='src/base/elf_mem_image.cc' line='145' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynstrEj'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Elf64_Word' -->
            <parameter type-id='type-id-8' name='offset' filepath='src/base/elf_mem_image.cc' line='177' column='1'/>
            <!-- const char* -->
            <return type-id='type-id-57'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Phdr* base::ElfMemImage::GetPhdr(int) -->
          <function-decl name='GetPhdr' mangled-name='_ZNK4base11ElfMemImage7GetPhdrEi' filepath='src/base/elf_mem_image.cc' line='137' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage7GetPhdrEi'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='index' filepath='src/base/elf_mem_image.cc' line='137' column='1'/>
            <!-- const Elf64_Phdr* -->
            <return type-id='type-id-35'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void base::ElfMemImage::Init(void*) -->
          <function-decl name='Init' mangled-name='_ZN4base11ElfMemImage4InitEPKv' filepath='src/base/elf_mem_image.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11ElfMemImage4InitEPKv'>
            <!-- implicit parameter of type 'base::ElfMemImage* const' -->
            <parameter type-id='type-id-25' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='base' filepath='src/base/elf_mem_image.cc' line='182' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Versym* base::ElfMemImage::GetVersym(int) -->
          <function-decl name='GetVersym' mangled-name='_ZNK4base11ElfMemImage9GetVersymEi' filepath='src/base/elf_mem_image.cc' line='132' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetVersymEi'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='index' filepath='src/base/elf_mem_image.cc' line='132' column='1'/>
            <!-- const Elf64_Versym* -->
            <return type-id='type-id-43'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- const Elf64_Sym* base::ElfMemImage::GetDynsym(int) -->
          <function-decl name='GetDynsym' mangled-name='_ZNK4base11ElfMemImage9GetDynsymEi' filepath='src/base/elf_mem_image.cc' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage9GetDynsymEi'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='index' filepath='src/base/elf_mem_image.cc' line='127' column='1'/>
            <!-- const Elf64_Sym* -->
            <return type-id='type-id-37'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- base::ElfMemImage::SymbolIterator base::ElfMemImage::begin() -->
          <function-decl name='begin' mangled-name='_ZNK4base11ElfMemImage5beginEv' filepath='src/base/elf_mem_image.cc' line='383' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage5beginEv'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- class base::ElfMemImage::SymbolIterator -->
            <return type-id='type-id-28'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbolByAddress(void*, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbolByAddress' mangled-name='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='332' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage21LookupSymbolByAddressEPKvPNS0_10SymbolInfoE'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='address' filepath='src/base/elf_mem_image.cc' line='332' column='1'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27' name='info_out' filepath='src/base/elf_mem_image.cc' line='333' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::ElfMemImage::LookupSymbol(const char*, const char*, int, base::ElfMemImage::SymbolInfo*) -->
          <function-decl name='LookupSymbol' mangled-name='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE' filepath='src/base/elf_mem_image.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11ElfMemImage12LookupSymbolEPKcS2_iPNS0_10SymbolInfoE'>
            <!-- implicit parameter of type 'const base::ElfMemImage* const' -->
            <parameter type-id='type-id-48' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='name' filepath='src/base/elf_mem_image.cc' line='316' column='1'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='version' filepath='src/base/elf_mem_image.cc' line='317' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='type' filepath='src/base/elf_mem_image.cc' line='318' column='1'/>
            <!-- parameter of type 'base::ElfMemImage::SymbolInfo*' -->
            <parameter type-id='type-id-27' name='info' filepath='src/base/elf_mem_image.cc' line='319' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- bool -->
    <type-decl name='bool' size-in-bits='8' id='type-id-61'/>
    <!-- const char* -->
    <pointer-type-def type-id='type-id-63' size-in-bits='64' id='type-id-57'/>
    <!-- typedef unsigned long int size_t -->
    <typedef-decl name='size_t' type-id='type-id-5' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='211' column='1' id='type-id-62'/>
    <!-- typedef unsigned int uint32_t -->
    <typedef-decl name='uint32_t' type-id='type-id-64' filepath='/usr/include/stdint.h' line='52' column='1' id='type-id-12'/>
    <!-- typedef unsigned long int uint64_t -->
    <typedef-decl name='uint64_t' type-id='type-id-5' filepath='/usr/include/stdint.h' line='56' column='1' id='type-id-15'/>
    <!-- unsigned char -->
    <type-decl name='unsigned char' size-in-bits='8' id='type-id-3'/>
    <!-- unsigned long int -->
    <type-decl name='unsigned long int' size-in-bits='64' id='type-id-5'/>
    <!-- unsigned short int -->
    <type-decl name='unsigned short int' size-in-bits='16' id='type-id-14'/>
    <!-- void -->
    <type-decl name='void' id='type-id-60'/>
    <!-- void* -->
    <pointer-type-def type-id='type-id-60' size-in-bits='64' id='type-id-58'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-58' const='yes' id='type-id-59'/>
    <!-- const char -->
    <qualified-type-def type-id='type-id-65' const='yes' id='type-id-63'/>
    <!-- unsigned int -->
    <type-decl name='unsigned int' size-in-bits='32' id='type-id-64'/>
    <!-- char -->
    <type-decl name='char' size-in-bits='8' id='type-id-65'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/linuxthreads.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- typedef int (void*, int, pid_t*, typedef __va_list_tag __va_list_tag*)* ListAllProcessThreadsCallBack -->
    <typedef-decl name='ListAllProcessThreadsCallBack' type-id='type-id-66' filepath='./src/base/thread_lister.h' line='48' column='1' id='type-id-67'/>
    <!-- typedef __pid_t pid_t -->
    <typedef-decl name='pid_t' type-id='type-id-68' filepath='/usr/include/sched.h' line='37' column='1' id='type-id-69'/>
    <!-- typedef int __pid_t -->
    <typedef-decl name='__pid_t' type-id='type-id-1' filepath='/usr/include/bits/types.h' line='143' column='1' id='type-id-68'/>
    <!-- int (void*, int, pid_t*, typedef __va_list_tag __va_list_tag*)* -->
    <pointer-type-def type-id='type-id-70' size-in-bits='64' id='type-id-66'/>
    <!-- pid_t* -->
    <pointer-type-def type-id='type-id-69' size-in-bits='64' id='type-id-71'/>
    <!-- int TCMalloc_ListAllProcessThreads(void*, ListAllProcessThreadsCallBack, ...) -->
    <function-decl name='TCMalloc_ListAllProcessThreads' mangled-name='TCMalloc_ListAllProcessThreads' filepath='src/base/linuxthreads.cc' line='551' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMalloc_ListAllProcessThreads'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='parameter' filepath='src/base/linuxthreads.cc' line='551' column='1'/>
      <!-- parameter of type 'typedef ListAllProcessThreadsCallBack' -->
      <parameter type-id='type-id-67' name='callback' filepath='src/base/linuxthreads.cc' line='552' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int TCMalloc_ResumeAllProcessThreads(int, pid_t*) -->
    <function-decl name='TCMalloc_ResumeAllProcessThreads' mangled-name='TCMalloc_ResumeAllProcessThreads' filepath='src/base/linuxthreads.cc' line='696' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMalloc_ResumeAllProcessThreads'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='num_threads' filepath='src/base/linuxthreads.cc' line='696' column='1'/>
      <!-- parameter of type 'pid_t*' -->
      <parameter type-id='type-id-71' name='thread_pids' filepath='src/base/linuxthreads.cc' line='696' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int (void*, int, pid_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-type size-in-bits='64' id='type-id-70'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'pid_t*' -->
      <parameter type-id='type-id-71'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- typedef __va_list_tag __va_list_tag* -->
    <pointer-type-def type-id='type-id-73' size-in-bits='64' id='type-id-72'/>
    <!-- struct typedef __va_list_tag __va_list_tag -->
    <class-decl name='typedef __va_list_tag __va_list_tag' size-in-bits='192' is-struct='yes' visibility='default' id='type-id-73'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::gp_offset -->
        <var-decl name='gp_offset' type-id='type-id-64' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::fp_offset -->
        <var-decl name='fp_offset' type-id='type-id-64' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* typedef __va_list_tag __va_list_tag::overflow_arg_area -->
        <var-decl name='overflow_arg_area' type-id='type-id-58' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- void* typedef __va_list_tag __va_list_tag::reg_save_area -->
        <var-decl name='reg_save_area' type-id='type-id-58' visibility='default'/>
      </data-member>
    </class-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/logging.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_verbose -->
      <var-decl name='FLAGS_verbose' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE' visibility='default' filepath='./src/base/logging.h' line='76' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead13FLAGS_verboseE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noverbose -->
      <var-decl name='FLAGS_noverbose' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE' visibility='default' filepath='src/base/logging.cc' line='40' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead15FLAGS_noverboseE'/>
    </namespace-decl>
    <!-- void RawClose(RawFD) -->
    <function-decl name='RawClose' mangled-name='_Z8RawClosei' filepath='src/base/logging.cc' line='104' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RawClosei'>
      <!-- parameter of type 'typedef RawFD' -->
      <parameter type-id='type-id-75'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void RawWrite(RawFD, const char*, size_t) -->
    <function-decl name='RawWrite' mangled-name='_Z8RawWriteiPKcm' filepath='src/base/logging.cc' line='94' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RawWriteiPKcm'>
      <!-- parameter of type 'typedef RawFD' -->
      <parameter type-id='type-id-75' name='fd' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='buf' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='len' filepath='src/base/logging.cc' line='94' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- RawFD RawOpenForWriting(const char*) -->
    <function-decl name='RawOpenForWriting' mangled-name='_Z17RawOpenForWritingPKc' filepath='src/base/logging.cc' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z17RawOpenForWritingPKc'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='filename' filepath='src/base/logging.cc' line='90' column='1'/>
      <!-- typedef RawFD -->
      <return type-id='type-id-75'/>
    </function-decl>
    <!-- typedef int RawFD -->
    <typedef-decl name='RawFD' type-id='type-id-1' filepath='./src/base/logging.h' line='251' column='1' id='type-id-75'/>
    <!-- typedef int32_t int32 -->
    <typedef-decl name='int32' type-id='type-id-76' filepath='src/base/basictypes.h' line='60' column='1' id='type-id-74'/>
    <!-- typedef int int32_t -->
    <typedef-decl name='int32_t' type-id='type-id-1' filepath='/usr/include/stdint.h' line='39' column='1' id='type-id-76'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/low_level_alloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- AllocList*[30] -->
    <array-type-def dimensions='1' type-id='type-id-77' size-in-bits='1920' id='type-id-78'>
      <!-- <anonymous range>[30] -->
      <subrange length='30' type-id='type-id-5' id='type-id-79'/>
    </array-type-def>
    <!-- low_level_alloc_internal::AllocList* -->
    <pointer-type-def type-id='type-id-80' size-in-bits='64' id='type-id-77'/>
    <!-- namespace low_level_alloc_internal -->
    <namespace-decl name='low_level_alloc_internal'>
      <!-- struct low_level_alloc_internal::AllocList -->
      <class-decl name='AllocList' size-in-bits='2240' is-struct='yes' visibility='default' filepath='src/base/low_level_alloc.cc' line='67' column='1' id='type-id-80'>
        <member-type access='public'>
          <!-- struct low_level_alloc_internal::AllocList::Header -->
          <class-decl name='Header' size-in-bits='256' is-struct='yes' visibility='default' filepath='src/base/low_level_alloc.cc' line='68' column='1' id='type-id-81'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- intptr_t low_level_alloc_internal::AllocList::Header::size -->
              <var-decl name='size' type-id='type-id-82' visibility='default' filepath='src/base/low_level_alloc.cc' line='69' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- intptr_t low_level_alloc_internal::AllocList::Header::magic -->
              <var-decl name='magic' type-id='type-id-82' visibility='default' filepath='src/base/low_level_alloc.cc' line='71' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- LowLevelAlloc::Arena* low_level_alloc_internal::AllocList::Header::arena -->
              <var-decl name='arena' type-id='type-id-83' visibility='default' filepath='src/base/low_level_alloc.cc' line='72' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- void* low_level_alloc_internal::AllocList::Header::dummy_for_alignment -->
              <var-decl name='dummy_for_alignment' type-id='type-id-58' visibility='default' filepath='src/base/low_level_alloc.cc' line='73' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- low_level_alloc_internal::AllocList::Header low_level_alloc_internal::AllocList::header -->
          <var-decl name='header' type-id='type-id-81' visibility='default' filepath='src/base/low_level_alloc.cc' line='74' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='256'>
          <!-- int low_level_alloc_internal::AllocList::levels -->
          <var-decl name='levels' type-id='type-id-1' visibility='default' filepath='src/base/low_level_alloc.cc' line='78' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='320'>
          <!-- low_level_alloc_internal::AllocList* low_level_alloc_internal::AllocList::next[30] -->
          <var-decl name='next' type-id='type-id-78' visibility='default' filepath='src/base/low_level_alloc.cc' line='79' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <!-- LowLevelAlloc::Arena* -->
    <pointer-type-def type-id='type-id-84' size-in-bits='64' id='type-id-83'/>
    <!-- typedef long int intptr_t -->
    <typedef-decl name='intptr_t' type-id='type-id-85' filepath='/usr/include/stdint.h' line='120' column='1' id='type-id-82'/>
    <class-decl name='LowLevelAlloc' size-in-bits='8' visibility='default' filepath='src/base/low_level_alloc.h' line='44' column='1' id='type-id-86'>
      <member-type access='private'>
        <!-- struct LowLevelAlloc::Arena -->
        <class-decl name='Arena' size-in-bits='2560' is-struct='yes' visibility='default' filepath='src/base/low_level_alloc.cc' line='184' column='1' id='type-id-84'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- SpinLock LowLevelAlloc::Arena::mu -->
            <var-decl name='mu' type-id='type-id-87' visibility='default' filepath='src/base/low_level_alloc.cc' line='189' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- low_level_alloc_internal::AllocList LowLevelAlloc::Arena::freelist -->
            <var-decl name='freelist' type-id='type-id-80' visibility='default' filepath='src/base/low_level_alloc.cc' line='191' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2304'>
            <!-- int32 LowLevelAlloc::Arena::allocation_count -->
            <var-decl name='allocation_count' type-id='type-id-74' visibility='default' filepath='src/base/low_level_alloc.cc' line='192' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2336'>
            <!-- int32 LowLevelAlloc::Arena::flags -->
            <var-decl name='flags' type-id='type-id-74' visibility='default' filepath='src/base/low_level_alloc.cc' line='193' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2368'>
            <!-- size_t LowLevelAlloc::Arena::pagesize -->
            <var-decl name='pagesize' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='194' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2432'>
            <!-- size_t LowLevelAlloc::Arena::roundup -->
            <var-decl name='roundup' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='195' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2496'>
            <!-- size_t LowLevelAlloc::Arena::min_size -->
            <var-decl name='min_size' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='197' column='1'/>
          </data-member>
          <member-function access='public' constructor='yes'>
            <!-- LowLevelAlloc::Arena::Arena() -->
            <function-decl name='Arena' filepath='src/base/low_level_alloc.cc' line='185' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'LowLevelAlloc::Arena*' -->
              <parameter type-id='type-id-83' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' constructor='yes'>
            <!-- LowLevelAlloc::Arena::Arena(int) -->
            <function-decl name='Arena' filepath='src/base/low_level_alloc.cc' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'LowLevelAlloc::Arena*' -->
              <parameter type-id='type-id-83' is-artificial='yes'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
    </class-decl>
    <!-- long int -->
    <type-decl name='long int' size-in-bits='64' id='type-id-85'/>
    <!-- class SpinLock -->
    <class-decl name='SpinLock' size-in-bits='32' visibility='default' filepath='./src/base/spinlock.h' line='48' column='1' id='type-id-87'>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__2 -->
        <enum-decl name='__anonymous_enum__2' is-anonymous='yes' filepath='./src/base/spinlock.h' line='116' column='1' id='type-id-88'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockSleeper' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__ -->
        <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/base/spinlock.h' line='114' column='1' id='type-id-90'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockFree' value='0'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__1 -->
        <enum-decl name='__anonymous_enum__1' is-anonymous='yes' filepath='src/base/spinlock.h' line='115' column='1' id='type-id-91'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockHeld' value='1'/>
        </enum-decl>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const base::LinkerInitialized SpinLock::LINKER_INITIALIZED -->
        <var-decl name='LINKER_INITIALIZED' type-id='type-id-92' mangled-name='_ZN8SpinLock18LINKER_INITIALIZEDE' visibility='default' filepath='src/base/spinlock.h' line='112' column='1' elf-symbol-id='_ZN8SpinLock18LINKER_INITIALIZEDE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- volatile Atomic32 SpinLock::lockword_ -->
        <var-decl name='lockword_' type-id='type-id-93' visibility='default' filepath='src/base/spinlock.h' line='118' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock() -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='50' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock(base::LinkerInitialized) -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='61' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- parameter of type 'enum base::LinkerInitialized' -->
          <parameter type-id='type-id-95'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock(const SpinLock&) -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='125' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- parameter of type 'const SpinLock&' -->
          <parameter type-id='type-id-96'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- Atomic32 SpinLock::SpinLoop(int64, Atomic32*) -->
        <function-decl name='SpinLoop' mangled-name='_ZN8SpinLock8SpinLoopElPi' filepath='src/base/spinlock.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SpinLoopElPi'>
          <!-- implicit parameter of type 'SpinLock* const' -->
          <parameter type-id='type-id-97' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef int64' -->
          <parameter type-id='type-id-98' name='initial_wait_timestamp' filepath='src/base/spinlock.cc' line='82' column='1'/>
          <!-- parameter of type 'Atomic32*' -->
          <parameter type-id='type-id-99' name='wait_cycles' filepath='src/base/spinlock.cc' line='83' column='1'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowUnlock(uint64) -->
        <function-decl name='SlowUnlock' mangled-name='_ZN8SpinLock10SlowUnlockEm' filepath='src/base/spinlock.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock10SlowUnlockEm'>
          <!-- implicit parameter of type 'SpinLock* const' -->
          <parameter type-id='type-id-97' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-101' name='wait_cycles' filepath='src/base/spinlock.cc' line='152' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowLock() -->
        <function-decl name='SlowLock' mangled-name='_ZN8SpinLock8SlowLockEv' filepath='src/base/spinlock.cc' line='95' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SlowLockEv'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- Atomic32* -->
    <pointer-type-def type-id='type-id-100' size-in-bits='64' id='type-id-99'/>
    <!-- SpinLock* -->
    <pointer-type-def type-id='type-id-87' size-in-bits='64' id='type-id-94'/>
    <!-- SpinLock* const -->
    <qualified-type-def type-id='type-id-94' const='yes' id='type-id-97'/>
    <!-- const SpinLock& -->
    <reference-type-def kind='lvalue' type-id='type-id-102' size-in-bits='64' id='type-id-96'/>
    <!-- const base::LinkerInitialized -->
    <qualified-type-def type-id='type-id-95' const='yes' id='type-id-92'/>
    <namespace-decl name='base'>
      <!-- enum base::LinkerInitialized -->
      <enum-decl name='LinkerInitialized' filepath='src/base/basictypes.h' line='381' column='1' id='type-id-95'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='LINKER_INITIALIZED' value='0'/>
      </enum-decl>
    </namespace-decl>
    <!-- typedef int32_t Atomic32 -->
    <typedef-decl name='Atomic32' type-id='type-id-76' filepath='./src/base/atomicops-internals-x86.h' line='43' column='1' id='type-id-100'/>
    <!-- typedef int64_t int64 -->
    <typedef-decl name='int64' type-id='type-id-103' filepath='src/base/basictypes.h' line='61' column='1' id='type-id-98'/>
    <!-- typedef uint64_t uint64 -->
    <typedef-decl name='uint64' type-id='type-id-15' filepath='src/base/basictypes.h' line='72' column='1' id='type-id-101'/>
    <!-- volatile Atomic32 -->
    <qualified-type-def type-id='type-id-100' volatile='yes' id='type-id-93'/>
    <!-- const SpinLock -->
    <qualified-type-def type-id='type-id-87' const='yes' id='type-id-102'/>
    <!-- typedef long int int64_t -->
    <typedef-decl name='int64_t' type-id='type-id-85' filepath='/usr/include/stdint.h' line='41' column='1' id='type-id-103'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/spinlock.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- struct CycleClock -->
    <class-decl name='CycleClock' size-in-bits='8' is-struct='yes' visibility='default' filepath='./src/base/cycleclock.h' line='79' column='1' id='type-id-104'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- void base::SubmitSpinLockProfileData(void*, int64) -->
      <function-decl name='SubmitSpinLockProfileData' mangled-name='_ZN4base25SubmitSpinLockProfileDataEPKvl' filepath='./src/base/synchronization_profiling.h' line='48' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base25SubmitSpinLockProfileDataEPKvl'>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- parameter of type 'typedef int64' -->
        <parameter type-id='type-id-98'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/spinlock_internal.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const base::internal::SpinLockWaitTransition -->
    <qualified-type-def type-id='type-id-105' const='yes' id='type-id-106'/>
    <!-- const base::internal::SpinLockWaitTransition* -->
    <pointer-type-def type-id='type-id-106' size-in-bits='64' id='type-id-107'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::SpinLockWaitTransition -->
        <class-decl name='SpinLockWaitTransition' size-in-bits='96' is-struct='yes' visibility='default' filepath='./src/base/spinlock_internal.h' line='48' column='1' id='type-id-105'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- int32 base::internal::SpinLockWaitTransition::from -->
            <var-decl name='from' type-id='type-id-74' visibility='default' filepath='./src/base/spinlock_internal.h' line='49' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='32'>
            <!-- int32 base::internal::SpinLockWaitTransition::to -->
            <var-decl name='to' type-id='type-id-74' visibility='default' filepath='./src/base/spinlock_internal.h' line='50' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- bool base::internal::SpinLockWaitTransition::done -->
            <var-decl name='done' type-id='type-id-61' visibility='default' filepath='./src/base/spinlock_internal.h' line='51' column='1'/>
          </data-member>
        </class-decl>
        <!-- void base::internal::SpinLockWake(volatile Atomic32*, bool) -->
        <function-decl name='SpinLockWake' mangled-name='_ZN4base8internal12SpinLockWakeEPVib' filepath='./src/base/spinlock_linux-inl.h' line='96' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal12SpinLockWakeEPVib'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
        <!-- void base::internal::SpinLockDelay(volatile Atomic32*, int32, int) -->
        <function-decl name='SpinLockDelay' mangled-name='_ZN4base8internal13SpinLockDelayEPViii' filepath='./src/base/spinlock_linux-inl.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal13SpinLockDelayEPViii'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'typedef int32' -->
          <parameter type-id='type-id-74'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
        <!-- int32 base::internal::SpinLockWait(volatile Atomic32*, int, const base::internal::SpinLockWaitTransition*) -->
        <function-decl name='SpinLockWait' mangled-name='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE' filepath='src/base/spinlock_internal.cc' line='61' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal12SpinLockWaitEPViiPKNS0_22SpinLockWaitTransitionE'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'const base::internal::SpinLockWaitTransition*' -->
          <parameter type-id='type-id-107'/>
          <!-- typedef int32 -->
          <return type-id='type-id-74'/>
        </function-decl>
      </namespace-decl>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
        <!-- Atomic32 base::subtle::Acquire_Load(const volatile Atomic32*) -->
        <function-decl name='Acquire_Load' filepath='./src/base/atomicops-internals-x86.h' line='167' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const volatile Atomic32*' -->
          <parameter type-id='type-id-109'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- const volatile Atomic32* -->
    <pointer-type-def type-id='type-id-110' size-in-bits='64' id='type-id-109'/>
    <!-- volatile Atomic32* -->
    <pointer-type-def type-id='type-id-93' size-in-bits='64' id='type-id-108'/>
    <!-- const volatile Atomic32 -->
    <qualified-type-def type-id='type-id-93' const='yes' id='type-id-110'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/sysinfo.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[10] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='80' id='type-id-111'>
      <!-- <anonymous range>[10] -->
      <subrange length='10' type-id='type-id-5' id='type-id-112'/>
    </array-type-def>
    <!-- char[5120] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='40960' id='type-id-113'>
      <!-- <anonymous range>[5120] -->
      <subrange length='5120' type-id='type-id-5' id='type-id-114'/>
    </array-type-def>
    <!-- class ProcMapsIterator -->
    <class-decl name='ProcMapsIterator' size-in-bits='640' visibility='default' filepath='./src/base/sysinfo.h' line='102' column='1' id='type-id-115'>
      <member-type access='private'>
        <!-- struct ProcMapsIterator::Buffer -->
        <class-decl name='Buffer' size-in-bits='40960' is-struct='yes' visibility='default' filepath='./src/base/sysinfo.h' line='104' column='1' id='type-id-116'>
          <data-member access='public' static='yes'>
            <!-- static const size_t ProcMapsIterator::Buffer::kBufSize -->
            <var-decl name='kBufSize' type-id='type-id-117' visibility='default' filepath='./src/base/sysinfo.h' line='110' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- char ProcMapsIterator::Buffer::buf_[5120] -->
            <var-decl name='buf_' type-id='type-id-113' visibility='default' filepath='./src/base/sysinfo.h' line='112' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- char* ProcMapsIterator::ibuf_ -->
        <var-decl name='ibuf_' type-id='type-id-118' visibility='default' filepath='./src/base/sysinfo.h' line='193' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- char* ProcMapsIterator::stext_ -->
        <var-decl name='stext_' type-id='type-id-118' visibility='default' filepath='./src/base/sysinfo.h' line='194' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- char* ProcMapsIterator::etext_ -->
        <var-decl name='etext_' type-id='type-id-118' visibility='default' filepath='./src/base/sysinfo.h' line='195' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- char* ProcMapsIterator::nextline_ -->
        <var-decl name='nextline_' type-id='type-id-118' visibility='default' filepath='./src/base/sysinfo.h' line='196' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- char* ProcMapsIterator::ebuf_ -->
        <var-decl name='ebuf_' type-id='type-id-118' visibility='default' filepath='./src/base/sysinfo.h' line='197' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- int ProcMapsIterator::fd_ -->
        <var-decl name='fd_' type-id='type-id-1' visibility='default' filepath='./src/base/sysinfo.h' line='219' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='352'>
        <!-- pid_t ProcMapsIterator::pid_ -->
        <var-decl name='pid_' type-id='type-id-69' visibility='default' filepath='./src/base/sysinfo.h' line='221' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- char ProcMapsIterator::flags_[10] -->
        <var-decl name='flags_' type-id='type-id-111' visibility='default' filepath='./src/base/sysinfo.h' line='222' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='512'>
        <!-- ProcMapsIterator::Buffer* ProcMapsIterator::dynamic_buffer_ -->
        <var-decl name='dynamic_buffer_' type-id='type-id-119' visibility='default' filepath='./src/base/sysinfo.h' line='223' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- bool ProcMapsIterator::using_maps_backing_ -->
        <var-decl name='using_maps_backing_' type-id='type-id-61' visibility='default' filepath='./src/base/sysinfo.h' line='224' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC1Ei' filepath='./src/base/sysinfo.h' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC1Ei'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-120' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-69'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t, ProcMapsIterator::Buffer*) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC2EiPNS_6BufferE' filepath='./src/base/sysinfo.h' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC2EiPNS_6BufferE'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-120' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-69'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-119'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProcMapsIterator::ProcMapsIterator(pid_t, ProcMapsIterator::Buffer*, bool) -->
        <function-decl name='ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb' filepath='./src/base/sysinfo.h' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorC1EiPNS_6BufferEb'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-120' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-69'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-119'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProcMapsIterator::~ProcMapsIterator(int) -->
        <function-decl name='~ProcMapsIterator' mangled-name='_ZN16ProcMapsIteratorD1Ev' filepath='./src/base/sysinfo.h' line='188' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIteratorD1Ev'>
          <!-- implicit parameter of type 'ProcMapsIterator*' -->
          <parameter type-id='type-id-120' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::Valid() -->
        <function-decl name='Valid' mangled-name='_ZNK16ProcMapsIterator5ValidEv' filepath='src/base/sysinfo.cc' line='815' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16ProcMapsIterator5ValidEv'>
          <!-- implicit parameter of type 'const ProcMapsIterator* const' -->
          <parameter type-id='type-id-121' name='this' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int ProcMapsIterator::FormatLine(int, uint64, uint64, const char*, uint64, int64, const char*, dev_t) -->
        <function-decl name='FormatLine' mangled-name='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m' filepath='src/base/sysinfo.cc' line='1084' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator10FormatLineEPcimmPKcmlS2_m'>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-101'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-101'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-101'/>
          <!-- parameter of type 'typedef int64' -->
          <parameter type-id='type-id-98'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef dev_t' -->
          <parameter type-id='type-id-122'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProcMapsIterator::Init(pid_t, ProcMapsIterator::Buffer*, bool) -->
        <function-decl name='Init' mangled-name='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb' filepath='src/base/sysinfo.cc' line='741' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator4InitEiPNS_6BufferEb'>
          <!-- implicit parameter of type 'ProcMapsIterator* const' -->
          <parameter type-id='type-id-123' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef pid_t' -->
          <parameter type-id='type-id-69' name='pid' filepath='src/base/sysinfo.cc' line='741' column='1'/>
          <!-- parameter of type 'ProcMapsIterator::Buffer*' -->
          <parameter type-id='type-id-119' name='buffer' filepath='src/base/sysinfo.cc' line='741' column='1'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61' name='use_maps_backing' filepath='src/base/sysinfo.cc' line='742' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::NextExt(uint64*, uint64*, char**, uint64*, int64*, char**, uint64*, uint64*, uint64*, uint64*, dev_t*) -->
        <function-decl name='NextExt' mangled-name='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_' filepath='src/base/sysinfo.cc' line='834' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator7NextExtEPmS0_PPcS0_PlS2_S0_S0_S0_S0_S0_'>
          <!-- implicit parameter of type 'ProcMapsIterator* const' -->
          <parameter type-id='type-id-123' name='this' is-artificial='yes'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='start' filepath='src/base/sysinfo.cc' line='834' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='end' filepath='src/base/sysinfo.cc' line='834' column='1'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-125' name='flags' filepath='src/base/sysinfo.cc' line='834' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='offset' filepath='src/base/sysinfo.cc' line='835' column='1'/>
          <!-- parameter of type 'int64*' -->
          <parameter type-id='type-id-126' name='inode' filepath='src/base/sysinfo.cc' line='835' column='1'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-125' name='filename' filepath='src/base/sysinfo.cc' line='835' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='file_mapping' filepath='src/base/sysinfo.cc' line='836' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='file_pages' filepath='src/base/sysinfo.cc' line='836' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='anon_mapping' filepath='src/base/sysinfo.cc' line='837' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='anon_pages' filepath='src/base/sysinfo.cc' line='837' column='1'/>
          <!-- parameter of type 'dev_t*' -->
          <parameter type-id='type-id-127' name='dev' filepath='src/base/sysinfo.cc' line='838' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProcMapsIterator::Next(uint64*, uint64*, char**, uint64*, int64*, char**) -->
        <function-decl name='Next' mangled-name='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_' filepath='src/base/sysinfo.cc' line='825' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16ProcMapsIterator4NextEPmS0_PPcS0_PlS2_'>
          <!-- implicit parameter of type 'ProcMapsIterator* const' -->
          <parameter type-id='type-id-123' name='this' is-artificial='yes'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='start' filepath='src/base/sysinfo.cc' line='825' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='end' filepath='src/base/sysinfo.cc' line='825' column='1'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-125' name='flags' filepath='src/base/sysinfo.cc' line='825' column='1'/>
          <!-- parameter of type 'uint64*' -->
          <parameter type-id='type-id-124' name='offset' filepath='src/base/sysinfo.cc' line='826' column='1'/>
          <!-- parameter of type 'int64*' -->
          <parameter type-id='type-id-126' name='inode' filepath='src/base/sysinfo.cc' line='826' column='1'/>
          <!-- parameter of type 'char**' -->
          <parameter type-id='type-id-125' name='filename' filepath='src/base/sysinfo.cc' line='826' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef __dev_t dev_t -->
    <typedef-decl name='dev_t' type-id='type-id-128' filepath='/usr/include/sys/types.h' line='61' column='1' id='type-id-122'/>
    <!-- typedef unsigned long int __dev_t -->
    <typedef-decl name='__dev_t' type-id='type-id-5' filepath='/usr/include/bits/types.h' line='134' column='1' id='type-id-128'/>
    <!-- ProcMapsIterator* -->
    <pointer-type-def type-id='type-id-115' size-in-bits='64' id='type-id-120'/>
    <!-- ProcMapsIterator* const -->
    <qualified-type-def type-id='type-id-120' const='yes' id='type-id-123'/>
    <!-- ProcMapsIterator::Buffer* -->
    <pointer-type-def type-id='type-id-116' size-in-bits='64' id='type-id-119'/>
    <!-- const ProcMapsIterator -->
    <qualified-type-def type-id='type-id-115' const='yes' id='type-id-129'/>
    <!-- const ProcMapsIterator* -->
    <pointer-type-def type-id='type-id-129' size-in-bits='64' id='type-id-130'/>
    <!-- const ProcMapsIterator* const -->
    <qualified-type-def type-id='type-id-130' const='yes' id='type-id-121'/>
    <!-- dev_t* -->
    <pointer-type-def type-id='type-id-122' size-in-bits='64' id='type-id-127'/>
    <!-- int64* -->
    <pointer-type-def type-id='type-id-98' size-in-bits='64' id='type-id-126'/>
    <!-- uint64* -->
    <pointer-type-def type-id='type-id-101' size-in-bits='64' id='type-id-124'/>
    <!-- bool HasPosixThreads() -->
    <function-decl name='HasPosixThreads' mangled-name='_Z15HasPosixThreadsv' filepath='src/base/sysinfo.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z15HasPosixThreadsv'>
      <!-- bool -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- void SleepForMilliseconds(int) -->
    <function-decl name='SleepForMilliseconds' mangled-name='_Z20SleepForMillisecondsi' filepath='src/base/sysinfo.cc' line='226' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20SleepForMillisecondsi'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='milliseconds' filepath='src/base/sysinfo.cc' line='226' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int NumCPUs() -->
    <function-decl name='NumCPUs' mangled-name='_Z7NumCPUsv' filepath='src/base/sysinfo.cc' line='505' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z7NumCPUsv'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- double CyclesPerSecond() -->
    <function-decl name='CyclesPerSecond' mangled-name='_Z15CyclesPerSecondv' filepath='src/base/sysinfo.cc' line='500' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z15CyclesPerSecondv'>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- bool GetUniquePathFromEnv(const char*, char*) -->
    <function-decl name='GetUniquePathFromEnv' mangled-name='_Z20GetUniquePathFromEnvPKcPc' filepath='src/base/sysinfo.cc' line='201' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20GetUniquePathFromEnvPKcPc'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='env_name' filepath='src/base/sysinfo.cc' line='201' column='1'/>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118' name='path' filepath='src/base/sysinfo.cc' line='201' column='1'/>
      <!-- bool -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- const char* GetenvBeforeMain(const char*) -->
    <function-decl name='GetenvBeforeMain' mangled-name='_Z16GetenvBeforeMainPKc' filepath='src/base/sysinfo.cc' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z16GetenvBeforeMainPKc'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='name' filepath='src/base/sysinfo.cc' line='122' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-57'/>
    </function-decl>
    <!-- const char* TCMallocGetenvSafe(const char*) -->
    <function-decl name='TCMallocGetenvSafe' mangled-name='TCMallocGetenvSafe' filepath='src/base/sysinfo.cc' line='174' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='TCMallocGetenvSafe'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='name' filepath='src/base/sysinfo.cc' line='122' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-57'/>
    </function-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- void tcmalloc::DumpProcSelfMaps(RawFD) -->
      <function-decl name='DumpProcSelfMaps' mangled-name='_ZN8tcmalloc16DumpProcSelfMapsEi' filepath='src/base/sysinfo.cc' line='1137' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16DumpProcSelfMapsEi'>
        <!-- parameter of type 'typedef RawFD' -->
        <parameter type-id='type-id-75'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- int tcmalloc::FillProcSelfMaps(char*, int, bool*) -->
      <function-decl name='FillProcSelfMaps' mangled-name='_ZN8tcmalloc16FillProcSelfMapsEPciPb' filepath='src/base/sysinfo.cc' line='1111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16FillProcSelfMapsEPciPb'>
        <!-- parameter of type 'char*' -->
        <parameter type-id='type-id-118'/>
        <!-- parameter of type 'int' -->
        <parameter type-id='type-id-1'/>
        <!-- parameter of type 'bool*' -->
        <parameter type-id='type-id-131'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
    </namespace-decl>
    <!-- bool* -->
    <pointer-type-def type-id='type-id-61' size-in-bits='64' id='type-id-131'/>
    <!-- char* -->
    <pointer-type-def type-id='type-id-65' size-in-bits='64' id='type-id-118'/>
    <!-- char** -->
    <pointer-type-def type-id='type-id-118' size-in-bits='64' id='type-id-125'/>
    <!-- const size_t -->
    <qualified-type-def type-id='type-id-62' const='yes' id='type-id-117'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/base/vdso_support.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- base::VDSOInitHelper* -->
    <pointer-type-def type-id='type-id-132' size-in-bits='64' id='type-id-133'/>
    <!-- base::VDSOSupport* -->
    <pointer-type-def type-id='type-id-134' size-in-bits='64' id='type-id-135'/>
    <!-- base::VDSOSupport* const -->
    <qualified-type-def type-id='type-id-135' const='yes' id='type-id-136'/>
    <!-- base::VDSOSupport::SymbolInfo* -->
    <pointer-type-def type-id='type-id-137' size-in-bits='64' id='type-id-138'/>
    <!-- const base::VDSOSupport -->
    <qualified-type-def type-id='type-id-134' const='yes' id='type-id-139'/>
    <!-- const base::VDSOSupport& -->
    <reference-type-def kind='lvalue' type-id='type-id-139' size-in-bits='64' id='type-id-140'/>
    <!-- const base::VDSOSupport* -->
    <pointer-type-def type-id='type-id-139' size-in-bits='64' id='type-id-141'/>
    <!-- const base::VDSOSupport* const -->
    <qualified-type-def type-id='type-id-141' const='yes' id='type-id-142'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::VDSOInitHelper -->
      <class-decl name='VDSOInitHelper' size-in-bits='8' visibility='default' filepath='src/base/vdso_support.cc' line='137' column='1' id='type-id-132'>
        <member-function access='private' constructor='yes'>
          <!-- base::VDSOInitHelper::VDSOInitHelper() -->
          <function-decl name='VDSOInitHelper' filepath='src/base/vdso_support.cc' line='139' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'base::VDSOInitHelper*' -->
            <parameter type-id='type-id-133' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class base::VDSOSupport -->
      <class-decl name='VDSOSupport' size-in-bits='576' visibility='default' filepath='./src/base/vdso_support.h' line='72' column='1' id='type-id-134'>
        <member-type access='private'>
          <!-- typedef base::ElfMemImage::SymbolInfo base::VDSOSupport::SymbolInfo -->
          <typedef-decl name='SymbolInfo' type-id='type-id-26' filepath='./src/base/vdso_support.h' line='76' column='1' id='type-id-137'/>
        </member-type>
        <member-type access='private'>
          <!-- typedef base::ElfMemImage::SymbolIterator base::VDSOSupport::SymbolIterator -->
          <typedef-decl name='SymbolIterator' type-id='type-id-28' filepath='./src/base/vdso_support.h' line='77' column='1' id='type-id-143'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- base::ElfMemImage base::VDSOSupport::image_ -->
          <var-decl name='image_' type-id='type-id-23' visibility='default' filepath='./src/base/vdso_support.h' line='112' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static void* base::VDSOSupport::vdso_base_ -->
          <var-decl name='vdso_base_' type-id='type-id-58' mangled-name='_ZN4base11VDSOSupport10vdso_base_E' visibility='default' filepath='./src/base/vdso_support.h' line='123' column='1' elf-symbol-id='_ZN4base11VDSOSupport10vdso_base_E'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- base::VDSOSupport::VDSOSupport() -->
          <function-decl name='VDSOSupport' mangled-name='_ZN4base11VDSOSupportC1Ev' filepath='./src/base/vdso_support.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupportC1Ev'>
            <!-- implicit parameter of type 'base::VDSOSupport*' -->
            <parameter type-id='type-id-135' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- base::VDSOSupport::VDSOSupport(const base::VDSOSupport&) -->
          <function-decl name='VDSOSupport' filepath='./src/base/vdso_support.h' line='125' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'base::VDSOSupport*' -->
            <parameter type-id='type-id-135' is-artificial='yes'/>
            <!-- parameter of type 'const base::VDSOSupport&' -->
            <parameter type-id='type-id-140'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::VDSOSupport::LookupSymbolByAddress(void*, base::VDSOSupport::SymbolInfo*) -->
          <function-decl name='LookupSymbolByAddress' mangled-name='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE' filepath='src/base/vdso_support.cc' line='124' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11VDSOSupport21LookupSymbolByAddressEPKvPNS_11ElfMemImage10SymbolInfoE'>
            <!-- implicit parameter of type 'const base::VDSOSupport* const' -->
            <parameter type-id='type-id-142' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='address' filepath='src/base/vdso_support.cc' line='124' column='1'/>
            <!-- parameter of type 'base::VDSOSupport::SymbolInfo*' -->
            <parameter type-id='type-id-138' name='info_out' filepath='src/base/vdso_support.cc' line='125' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool base::VDSOSupport::LookupSymbol(const char*, const char*, int, base::VDSOSupport::SymbolInfo*) -->
          <function-decl name='LookupSymbol' mangled-name='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE' filepath='src/base/vdso_support.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base11VDSOSupport12LookupSymbolEPKcS2_iPNS_11ElfMemImage10SymbolInfoE'>
            <!-- implicit parameter of type 'const base::VDSOSupport* const' -->
            <parameter type-id='type-id-142' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='name' filepath='src/base/vdso_support.cc' line='117' column='1'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='version' filepath='src/base/vdso_support.cc' line='118' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='type' filepath='src/base/vdso_support.cc' line='119' column='1'/>
            <!-- parameter of type 'base::VDSOSupport::SymbolInfo*' -->
            <parameter type-id='type-id-138' name='info' filepath='src/base/vdso_support.cc' line='120' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* base::VDSOSupport::SetBase(void*) -->
          <function-decl name='SetBase' mangled-name='_ZN4base11VDSOSupport7SetBaseEPKv' filepath='src/base/vdso_support.cc' line='109' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupport7SetBaseEPKv'>
            <!-- implicit parameter of type 'base::VDSOSupport* const' -->
            <parameter type-id='type-id-136' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='base' filepath='src/base/vdso_support.cc' line='109' column='1'/>
            <!-- void* -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void* base::VDSOSupport::Init() -->
          <function-decl name='Init' mangled-name='_ZN4base11VDSOSupport4InitEv' filepath='src/base/vdso_support.cc' line='75' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base11VDSOSupport4InitEv'>
            <!-- void* -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/central_freelist.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const int& -->
    <reference-type-def kind='lvalue' type-id='type-id-144' size-in-bits='64' id='type-id-145'/>
    <!-- const int32_t -->
    <qualified-type-def type-id='type-id-76' const='yes' id='type-id-146'/>
    <!-- const int32_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-146' size-in-bits='64' id='type-id-147'/>
    <!-- const tcmalloc::Span -->
    <qualified-type-def type-id='type-id-148' const='yes' id='type-id-149'/>
    <!-- const tcmalloc::Span* -->
    <pointer-type-def type-id='type-id-149' size-in-bits='64' id='type-id-150'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- const int& std::max<int>(const int&, const int&) -->
      <function-decl name='max&lt;int&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const int&' -->
        <parameter type-id='type-id-145'/>
        <!-- parameter of type 'const int&' -->
        <parameter type-id='type-id-145'/>
        <!-- const int& -->
        <return type-id='type-id-145'/>
      </function-decl>
      <!-- const int32_t& std::min<int32_t>(const int32_t&, const int32_t&) -->
      <function-decl name='min&lt;int32_t&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const int32_t&' -->
        <parameter type-id='type-id-147'/>
        <!-- parameter of type 'const int32_t&' -->
        <parameter type-id='type-id-147'/>
        <!-- const int32_t& -->
        <return type-id='type-id-147'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- bool tcmalloc::DLL_IsEmpty(const tcmalloc::Span*) -->
      <function-decl name='DLL_IsEmpty' filepath='src/span.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const tcmalloc::Span*' -->
        <parameter type-id='type-id-150'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void tcmalloc::SLL_PushRange(void**, void*, void*) -->
      <function-decl name='SLL_PushRange' filepath='src/linked_list.h' line='86' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
    </namespace-decl>
    <namespace-decl name='tcmalloc'>
      <!-- struct tcmalloc::Span -->
      <class-decl name='Span' size-in-bits='384' is-struct='yes' visibility='default' filepath='src/span.h' line='45' column='1' id='type-id-148'>
        <member-type access='public'>
          <!-- enum tcmalloc::Span::__anonymous_enum__ -->
          <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/span.h' line='65' column='1' id='type-id-152'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='IN_USE' value='0'/>
            <enumerator name='ON_NORMAL_FREELIST' value='1'/>
            <enumerator name='ON_RETURNED_FREELIST' value='2'/>
          </enum-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- PageID tcmalloc::Span::start -->
          <var-decl name='start' type-id='type-id-153' visibility='default' filepath='src/span.h' line='46' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- Length tcmalloc::Span::length -->
          <var-decl name='length' type-id='type-id-154' visibility='default' filepath='src/span.h' line='47' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- tcmalloc::Span* tcmalloc::Span::next -->
          <var-decl name='next' type-id='type-id-155' visibility='default' filepath='src/span.h' line='48' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- tcmalloc::Span* tcmalloc::Span::prev -->
          <var-decl name='prev' type-id='type-id-155' visibility='default' filepath='src/span.h' line='49' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='256'>
          <!-- void* tcmalloc::Span::objects -->
          <var-decl name='objects' type-id='type-id-58' visibility='default' filepath='src/span.h' line='50' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned int tcmalloc::Span::refcount -->
          <var-decl name='refcount' type-id='type-id-64' visibility='default' filepath='src/span.h' line='51' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='16'>
          <!-- unsigned int tcmalloc::Span::sizeclass -->
          <var-decl name='sizeclass' type-id='type-id-64' visibility='default' filepath='src/span.h' line='52' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='24'>
          <!-- unsigned int tcmalloc::Span::location -->
          <var-decl name='location' type-id='type-id-64' visibility='default' filepath='src/span.h' line='53' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='26'>
          <!-- unsigned int tcmalloc::Span::sample -->
          <var-decl name='sample' type-id='type-id-64' visibility='default' filepath='src/span.h' line='54' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <!-- const int -->
    <qualified-type-def type-id='type-id-1' const='yes' id='type-id-144'/>
    <!-- void** -->
    <pointer-type-def type-id='type-id-58' size-in-bits='64' id='type-id-151'/>
    <!-- tcmalloc::Span* -->
    <pointer-type-def type-id='type-id-148' size-in-bits='64' id='type-id-155'/>
    <!-- typedef uintptr_t Length -->
    <typedef-decl name='Length' type-id='type-id-156' filepath='src/common.h' line='59' column='1' id='type-id-154'/>
    <!-- typedef uintptr_t PageID -->
    <typedef-decl name='PageID' type-id='type-id-156' filepath='src/common.h' line='56' column='1' id='type-id-153'/>
    <!-- typedef unsigned long int uintptr_t -->
    <typedef-decl name='uintptr_t' type-id='type-id-5' filepath='/usr/include/stdint.h' line='123' column='1' id='type-id-156'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/common.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- uint64_t tcmalloc::metadata_system_bytes() -->
      <function-decl name='metadata_system_bytes' mangled-name='_ZN8tcmalloc21metadata_system_bytesEv' filepath='src/common.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc21metadata_system_bytesEv'>
        <!-- typedef uint64_t -->
        <return type-id='type-id-15'/>
      </function-decl>
      <!-- void* tcmalloc::MetaDataAlloc(size_t) -->
      <function-decl name='MetaDataAlloc' mangled-name='_ZN8tcmalloc13MetaDataAllocEm' filepath='src/common.cc' line='233' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc13MetaDataAllocEm'>
        <!-- parameter of type 'typedef size_t' -->
        <parameter type-id='type-id-62'/>
        <!-- void* -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- int tcmalloc::AlignmentForSize(size_t) -->
      <function-decl name='AlignmentForSize' mangled-name='_ZN8tcmalloc16AlignmentForSizeEm' filepath='src/common.cc' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16AlignmentForSizeEm'>
        <!-- parameter of type 'typedef size_t' -->
        <parameter type-id='type-id-62'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-checker-bcad.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class HeapLeakCheckerGlobalPrePost -->
    <class-decl name='HeapLeakCheckerGlobalPrePost' size-in-bits='8' visibility='default' filepath='src/heap-checker-bcad.cc' line='60' column='1' id='type-id-157'>
      <data-member access='private' static='yes'>
        <!-- static int HeapLeakCheckerGlobalPrePost::count_ -->
        <var-decl name='count_' type-id='type-id-1' mangled-name='_ZN28HeapLeakCheckerGlobalPrePost6count_E' visibility='default' filepath='src/heap-checker-bcad.cc' line='87' column='1' elf-symbol-id='_ZN28HeapLeakCheckerGlobalPrePost6count_E'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakCheckerGlobalPrePost::HeapLeakCheckerGlobalPrePost() -->
        <function-decl name='HeapLeakCheckerGlobalPrePost' filepath='src/heap-checker-bcad.cc' line='62' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'HeapLeakCheckerGlobalPrePost*' -->
          <parameter type-id='type-id-158' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- HeapLeakCheckerGlobalPrePost::~HeapLeakCheckerGlobalPrePost(int) -->
        <function-decl name='~HeapLeakCheckerGlobalPrePost' mangled-name='_ZN28HeapLeakCheckerGlobalPrePostD1Ev' filepath='src/heap-checker-bcad.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN28HeapLeakCheckerGlobalPrePostD1Ev'>
          <!-- implicit parameter of type 'HeapLeakCheckerGlobalPrePost*' -->
          <parameter type-id='type-id-158' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HeapLeakCheckerGlobalPrePost* -->
    <pointer-type-def type-id='type-id-157' size-in-bits='64' id='type-id-158'/>
    <!-- bool heap_leak_checker_bcad_variable -->
    <var-decl name='heap_leak_checker_bcad_variable' type-id='type-id-61' mangled-name='heap_leak_checker_bcad_variable' visibility='default' filepath='src/heap-checker-bcad.cc' line='53' column='1' elf-symbol-id='heap_leak_checker_bcad_variable'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-checker.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='infinite' id='type-id-159'>
      <!-- <anonymous range>[] -->
      <subrange length='infinite' id='type-id-160'/>
    </array-type-def>
    <!-- size_t[4] -->
    <array-type-def dimensions='1' type-id='type-id-62' size-in-bits='256' id='type-id-161'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' type-id='type-id-5' id='type-id-162'/>
    </array-type-def>
    <!-- void*[32] -->
    <array-type-def dimensions='1' type-id='type-id-58' size-in-bits='2048' id='type-id-163'>
      <!-- <anonymous range>[32] -->
      <subrange length='32' type-id='type-id-5' id='type-id-164'/>
    </array-type-def>
    <!-- struct AllocObject -->
    <class-decl name='AllocObject' size-in-bits='192' is-struct='yes' visibility='default' filepath='src/heap-checker.cc' line='356' column='1' id='type-id-165'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- void* AllocObject::ptr -->
        <var-decl name='ptr' type-id='type-id-58' visibility='default' filepath='src/heap-checker.cc' line='357' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- uintptr_t AllocObject::size -->
        <var-decl name='size' type-id='type-id-156' visibility='default' filepath='src/heap-checker.cc' line='358' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- ObjectPlacement AllocObject::place -->
        <var-decl name='place' type-id='type-id-166' visibility='default' filepath='src/heap-checker.cc' line='359' column='1'/>
      </data-member>
      <member-function access='public' constructor='yes'>
        <!-- AllocObject::AllocObject(void*, size_t, ObjectPlacement) -->
        <function-decl name='AllocObject' filepath='src/heap-checker.cc' line='361' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'AllocObject*' -->
          <parameter type-id='type-id-167' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'enum ObjectPlacement' -->
          <parameter type-id='type-id-166'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- enum ObjectPlacement -->
    <enum-decl name='ObjectPlacement' filepath='src/heap-checker.cc' line='345' column='1' id='type-id-166'>
      <underlying-type type-id='type-id-89'/>
      <enumerator name='MUST_BE_ON_HEAP' value='0'/>
      <enumerator name='IGNORED_ON_HEAP' value='1'/>
      <enumerator name='MAYBE_LIVE' value='2'/>
      <enumerator name='IN_GLOBAL_DATA' value='3'/>
      <enumerator name='THREAD_DATA' value='4'/>
      <enumerator name='THREAD_REGISTERS' value='5'/>
    </enum-decl>
    <!-- class STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-168'>
      <member-function access='private'>
        <!-- void STL_Allocator<AllocObject, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-169' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<AllocObject, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-169' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-170'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-169' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<void*, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-171'>
      <member-function access='private'>
        <!-- void STL_Allocator<void*, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-172' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<void*, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-172' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-173'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-172' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class GoogleInitializer -->
    <class-decl name='GoogleInitializer' size-in-bits='128' visibility='default' filepath='src/base/googleinit.h' line='39' column='1' id='type-id-174'>
      <member-type access='private'>
        <!-- typedef void ()* GoogleInitializer::VoidFunction -->
        <typedef-decl name='VoidFunction' type-id='type-id-176' filepath='src/base/googleinit.h' line='41' column='1' id='type-id-175'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- const char* const GoogleInitializer::name_ -->
        <var-decl name='name_' type-id='type-id-177' visibility='default' filepath='src/base/googleinit.h' line='55' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- const GoogleInitializer::VoidFunction GoogleInitializer::destructor_ -->
        <var-decl name='destructor_' type-id='type-id-178' visibility='default' filepath='src/base/googleinit.h' line='56' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- GoogleInitializer::GoogleInitializer(const char*, GoogleInitializer::VoidFunction, GoogleInitializer::VoidFunction) -->
        <function-decl name='GoogleInitializer' filepath='src/base/googleinit.h' line='42' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-179' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef GoogleInitializer::VoidFunction' -->
          <parameter type-id='type-id-175'/>
          <!-- parameter of type 'typedef GoogleInitializer::VoidFunction' -->
          <parameter type-id='type-id-175'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- GoogleInitializer::~GoogleInitializer(int) -->
        <function-decl name='~GoogleInitializer' mangled-name='_ZN17GoogleInitializerD2Ev' filepath='src/base/googleinit.h' line='48' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN17GoogleInitializerD2Ev'>
          <!-- implicit parameter of type 'GoogleInitializer*' -->
          <parameter type-id='type-id-179' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct HeapProfileStats -->
    <class-decl name='HeapProfileStats' size-in-bits='192' is-struct='yes' visibility='default' filepath='src/heap-profile-stats.h' line='54' column='1' id='type-id-180'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int32 HeapProfileStats::allocs -->
        <var-decl name='allocs' type-id='type-id-74' visibility='default' filepath='src/heap-profile-stats.h' line='61' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int32 HeapProfileStats::frees -->
        <var-decl name='frees' type-id='type-id-74' visibility='default' filepath='src/heap-profile-stats.h' line='62' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int64 HeapProfileStats::alloc_size -->
        <var-decl name='alloc_size' type-id='type-id-98' visibility='default' filepath='src/heap-profile-stats.h' line='63' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int64 HeapProfileStats::free_size -->
        <var-decl name='free_size' type-id='type-id-98' visibility='default' filepath='src/heap-profile-stats.h' line='64' column='1'/>
      </data-member>
    </class-decl>
    <!-- class MemoryRegionMap -->
    <class-decl name='MemoryRegionMap' size-in-bits='8' visibility='default' filepath='src/memory_region_map.h' line='69' column='1' id='type-id-181'>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::RegionCmp -->
        <class-decl name='RegionCmp' size-in-bits='8' is-struct='yes' visibility='default' filepath='src/memory_region_map.h' line='245' column='1' id='type-id-182'/>
      </member-type>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::Region -->
        <class-decl name='Region' size-in-bits='2304' is-struct='yes' visibility='default' filepath='src/memory_region_map.h' line='137' column='1' id='type-id-183'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- uintptr_t MemoryRegionMap::Region::start_addr -->
            <var-decl name='start_addr' type-id='type-id-156' visibility='default' filepath='src/memory_region_map.h' line='138' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- uintptr_t MemoryRegionMap::Region::end_addr -->
            <var-decl name='end_addr' type-id='type-id-156' visibility='default' filepath='src/memory_region_map.h' line='139' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- int MemoryRegionMap::Region::call_stack_depth -->
            <var-decl name='call_stack_depth' type-id='type-id-1' visibility='default' filepath='src/memory_region_map.h' line='140' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- void* MemoryRegionMap::Region::call_stack[32] -->
            <var-decl name='call_stack' type-id='type-id-163' visibility='default' filepath='src/memory_region_map.h' line='141' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2240'>
            <!-- bool MemoryRegionMap::Region::is_stack -->
            <var-decl name='is_stack' type-id='type-id-61' visibility='default' filepath='src/memory_region_map.h' line='143' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct MemoryRegionMap::MyAllocator -->
        <class-decl name='MyAllocator' size-in-bits='8' is-struct='yes' visibility='default' filepath='src/memory_region_map.h' line='252' column='1' id='type-id-184'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > MemoryRegionMap::RegionSet -->
        <typedef-decl name='RegionSet' type-id='type-id-186' filepath='src/memory_region_map.h' line='263' column='1' id='type-id-185'/>
      </member-type>
      <member-type access='private'>
        <!-- union MemoryRegionMap::RegionSetRep -->
        <union-decl name='RegionSetRep' size-in-bits='384' visibility='default' filepath='src/memory_region_map.cc' line='177' column='1' id='type-id-187'>
          <data-member access='public'>
            <!-- char MemoryRegionMap::RegionSetRep::rep[48] -->
            <var-decl name='rep' type-id='type-id-188' visibility='default' filepath='src/memory_region_map.cc' line='178' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- void* MemoryRegionMap::RegionSetRep::align_it -->
            <var-decl name='align_it' type-id='type-id-58' visibility='default' filepath='src/memory_region_map.cc' line='179' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <member-type access='private'>
        <!-- class MemoryRegionMap::LockHolder -->
        <class-decl name='LockHolder' size-in-bits='8' visibility='default' filepath='src/memory_region_map.h' line='126' column='1' id='type-id-189'>
          <member-function access='private' constructor='yes'>
            <!-- MemoryRegionMap::LockHolder::LockHolder() -->
            <function-decl name='LockHolder' filepath='src/memory_region_map.h' line='128' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'MemoryRegionMap::LockHolder*' -->
              <parameter type-id='type-id-190' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' destructor='yes'>
            <!-- MemoryRegionMap::LockHolder::~LockHolder(int) -->
            <function-decl name='~LockHolder' filepath='src/memory_region_map.h' line='129' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'MemoryRegionMap::LockHolder*' -->
              <parameter type-id='type-id-190' is-artificial='yes'/>
              <!-- artificial parameter of type 'int' -->
              <parameter type-id='type-id-1' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' constructor='yes'>
            <!-- MemoryRegionMap::LockHolder::LockHolder(const MemoryRegionMap::LockHolder&) -->
            <function-decl name='LockHolder' filepath='src/memory_region_map.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'MemoryRegionMap::LockHolder*' -->
              <parameter type-id='type-id-190' is-artificial='yes'/>
              <!-- parameter of type 'const MemoryRegionMap::LockHolder&' -->
              <parameter type-id='type-id-191'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::_Rb_tree_const_iterator<MemoryRegionMap::Region> MemoryRegionMap::RegionIterator -->
        <typedef-decl name='RegionIterator' type-id='type-id-193' filepath='src/memory_region_map.h' line='268' column='1' id='type-id-192'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static int MemoryRegionMap::client_count_ -->
        <var-decl name='client_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap13client_count_E' visibility='default' filepath='src/memory_region_map.h' line='292' column='1' elf-symbol-id='_ZN15MemoryRegionMap13client_count_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int MemoryRegionMap::max_stack_depth_ -->
        <var-decl name='max_stack_depth_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap16max_stack_depth_E' visibility='default' filepath='src/memory_region_map.h' line='295' column='1' elf-symbol-id='_ZN15MemoryRegionMap16max_stack_depth_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static LowLevelAlloc::Arena* MemoryRegionMap::arena_ -->
        <var-decl name='arena_' type-id='type-id-83' mangled-name='_ZN15MemoryRegionMap6arena_E' visibility='default' filepath='src/memory_region_map.h' line='298' column='1' elf-symbol-id='_ZN15MemoryRegionMap6arena_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static MemoryRegionMap::RegionSet* MemoryRegionMap::regions_ -->
        <var-decl name='regions_' type-id='type-id-194' mangled-name='_ZN15MemoryRegionMap8regions_E' visibility='default' filepath='src/memory_region_map.h' line='306' column='1' elf-symbol-id='_ZN15MemoryRegionMap8regions_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static SpinLock MemoryRegionMap::lock_ -->
        <var-decl name='lock_' type-id='type-id-87' mangled-name='_ZN15MemoryRegionMap5lock_E' visibility='default' filepath='src/memory_region_map.h' line='309' column='1' elf-symbol-id='_ZN15MemoryRegionMap5lock_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static SpinLock MemoryRegionMap::owner_lock_ -->
        <var-decl name='owner_lock_' type-id='type-id-87' mangled-name='_ZN15MemoryRegionMap11owner_lock_E' visibility='default' filepath='src/memory_region_map.h' line='311' column='1' elf-symbol-id='_ZN15MemoryRegionMap11owner_lock_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int MemoryRegionMap::recursion_count_ -->
        <var-decl name='recursion_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap16recursion_count_E' visibility='default' filepath='src/memory_region_map.h' line='314' column='1' elf-symbol-id='_ZN15MemoryRegionMap16recursion_count_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static pthread_t MemoryRegionMap::lock_owner_tid_ -->
        <var-decl name='lock_owner_tid_' type-id='type-id-195' mangled-name='_ZN15MemoryRegionMap15lock_owner_tid_E' visibility='default' filepath='src/memory_region_map.h' line='316' column='1' elf-symbol-id='_ZN15MemoryRegionMap15lock_owner_tid_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int64 MemoryRegionMap::map_size_ -->
        <var-decl name='map_size_' type-id='type-id-98' mangled-name='_ZN15MemoryRegionMap9map_size_E' visibility='default' filepath='src/memory_region_map.h' line='319' column='1' elf-symbol-id='_ZN15MemoryRegionMap9map_size_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int64 MemoryRegionMap::unmap_size_ -->
        <var-decl name='unmap_size_' type-id='type-id-98' mangled-name='_ZN15MemoryRegionMap11unmap_size_E' visibility='default' filepath='src/memory_region_map.h' line='321' column='1' elf-symbol-id='_ZN15MemoryRegionMap11unmap_size_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static HeapProfileBucket** MemoryRegionMap::bucket_table_ -->
        <var-decl name='bucket_table_' type-id='type-id-196' mangled-name='_ZN15MemoryRegionMap13bucket_table_E' visibility='default' filepath='src/memory_region_map.h' line='324' column='1' elf-symbol-id='_ZN15MemoryRegionMap13bucket_table_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int MemoryRegionMap::num_buckets_ -->
        <var-decl name='num_buckets_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap12num_buckets_E' visibility='default' filepath='src/memory_region_map.h' line='325' column='1' elf-symbol-id='_ZN15MemoryRegionMap12num_buckets_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static int MemoryRegionMap::saved_buckets_count_ -->
        <var-decl name='saved_buckets_count_' type-id='type-id-1' mangled-name='_ZN15MemoryRegionMap20saved_buckets_count_E' visibility='default' filepath='src/memory_region_map.h' line='337' column='1' elf-symbol-id='_ZN15MemoryRegionMap20saved_buckets_count_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static HeapProfileBucket MemoryRegionMap::saved_buckets_[20] -->
        <var-decl name='saved_buckets_' type-id='type-id-197' mangled-name='_ZN15MemoryRegionMap14saved_buckets_E' visibility='default' filepath='src/memory_region_map.h' line='343' column='1' elf-symbol-id='_ZN15MemoryRegionMap14saved_buckets_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static void* MemoryRegionMap::saved_buckets_keys_[20][32] -->
        <var-decl name='saved_buckets_keys_' type-id='type-id-198' mangled-name='_ZN15MemoryRegionMap19saved_buckets_keys_E' visibility='default' filepath='src/memory_region_map.h' line='345' column='1' elf-symbol-id='_ZN15MemoryRegionMap19saved_buckets_keys_E'/>
      </data-member>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::IterateBuckets<HeapProfileTable::BufferArgs*>(HeapProfileTable::BufferArgs*) -->
        <function-decl name='IterateBuckets&lt;HeapProfileTable::BufferArgs*&gt;' filepath='src/memory_region_map.h' line='402' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'void (const HeapProfileBucket*, HeapProfileTable::BufferArgs*)*' -->
          <parameter type-id='type-id-199'/>
          <!-- parameter of type 'HeapProfileTable::BufferArgs*' -->
          <parameter type-id='type-id-200'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::HandleSavedRegionsLocked() -->
        <function-decl name='HandleSavedRegionsLocked' mangled-name='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE' filepath='src/memory_region_map.cc' line='487' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap24HandleSavedRegionsLockedEPFvRKNS_6RegionEE'>
          <!-- parameter of type 'void (const MemoryRegionMap::Region&)*' -->
          <parameter type-id='type-id-201'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Unlock() -->
        <function-decl name='Unlock' mangled-name='_ZN15MemoryRegionMap6UnlockEv' filepath='src/memory_region_map.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap6UnlockEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::LockIsHeld() -->
        <function-decl name='LockIsHeld' mangled-name='_ZN15MemoryRegionMap10LockIsHeldEv' filepath='src/memory_region_map.cc' line='328' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10LockIsHeldEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::LogAllLocked() -->
        <function-decl name='LogAllLocked' mangled-name='_ZN15MemoryRegionMap12LogAllLockedEv' filepath='src/memory_region_map.cc' line='815' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap12LogAllLockedEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::DoInsertRegionLocked() -->
        <function-decl name='DoInsertRegionLocked' mangled-name='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE' filepath='src/memory_region_map.cc' line='443' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap20DoInsertRegionLockedERKNS_6RegionE'>
          <!-- parameter of type 'const MemoryRegionMap::Region&' -->
          <parameter type-id='type-id-202' name='region' filepath='src/memory_region_map.cc' line='443' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- MemoryRegionMap::RegionIterator MemoryRegionMap::EndRegionLocked() -->
        <function-decl name='EndRegionLocked' mangled-name='_ZN15MemoryRegionMap15EndRegionLockedEv' filepath='src/memory_region_map.cc' line='437' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap15EndRegionLockedEv'>
          <!-- typedef MemoryRegionMap::RegionIterator -->
          <return type-id='type-id-192'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- MemoryRegionMap::RegionIterator MemoryRegionMap::BeginRegionLocked() -->
        <function-decl name='BeginRegionLocked' mangled-name='_ZN15MemoryRegionMap17BeginRegionLockedEv' filepath='src/memory_region_map.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap17BeginRegionLockedEv'>
          <!-- typedef MemoryRegionMap::RegionIterator -->
          <return type-id='type-id-192'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- const MemoryRegionMap::Region* MemoryRegionMap::DoFindRegionLocked() -->
        <function-decl name='DoFindRegionLocked' mangled-name='_ZN15MemoryRegionMap18DoFindRegionLockedEm' filepath='src/memory_region_map.cc' line='334' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap18DoFindRegionLockedEm'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-156'/>
          <!-- const MemoryRegionMap::Region* -->
          <return type-id='type-id-203'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::IsRecordingLocked() -->
        <function-decl name='IsRecordingLocked' mangled-name='_ZN15MemoryRegionMap17IsRecordingLockedEv' filepath='src/memory_region_map.cc' line='279' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap17IsRecordingLockedEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Lock() -->
        <function-decl name='Lock' mangled-name='_ZN15MemoryRegionMap4LockEv' filepath='src/memory_region_map.cc' line='294' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap4LockEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::FindAndMarkStackRegion(MemoryRegionMap::Region*) -->
        <function-decl name='FindAndMarkStackRegion' mangled-name='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE' filepath='src/memory_region_map.cc' line='358' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap22FindAndMarkStackRegionEmPNS_6RegionE'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-156'/>
          <!-- parameter of type 'MemoryRegionMap::Region*' -->
          <parameter type-id='type-id-204'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::FindRegion(MemoryRegionMap::Region*) -->
        <function-decl name='FindRegion' mangled-name='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE' filepath='src/memory_region_map.cc' line='350' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10FindRegionEmPNS_6RegionE'>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-156'/>
          <!-- parameter of type 'MemoryRegionMap::Region*' -->
          <parameter type-id='type-id-204'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MemoryRegionMap::Shutdown() -->
        <function-decl name='Shutdown' mangled-name='_ZN15MemoryRegionMap8ShutdownEv' filepath='src/memory_region_map.cc' line='239' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8ShutdownEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::Init(bool) -->
        <function-decl name='Init' mangled-name='_ZN15MemoryRegionMap4InitEib' filepath='src/memory_region_map.cc' line='194' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap4InitEib'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RestoreSavedBucketsLocked() -->
        <function-decl name='RestoreSavedBucketsLocked' mangled-name='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv' filepath='src/memory_region_map.cc' line='499' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap25RestoreSavedBucketsLockedEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapProfileBucket* MemoryRegionMap::GetBucket(void* const*) -->
        <function-decl name='GetBucket' mangled-name='_ZN15MemoryRegionMap9GetBucketEiPKPKv' filepath='src/memory_region_map.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap9GetBucketEiPKPKv'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205'/>
          <!-- HeapProfileBucket* -->
          <return type-id='type-id-206'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionRemovalInBucket(void* const*, size_t) -->
        <function-decl name='RecordRegionRemovalInBucket' mangled-name='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm' filepath='src/memory_region_map.cc' line='752' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap27RecordRegionRemovalInBucketEiPKPKvm'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::InsertRegionLocked() -->
        <function-decl name='InsertRegionLocked' mangled-name='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE' filepath='src/memory_region_map.cc' line='537' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap18InsertRegionLockedERKNS_6RegionE'>
          <!-- parameter of type 'const MemoryRegionMap::Region&' -->
          <parameter type-id='type-id-202' name='region' filepath='src/memory_region_map.cc' line='443' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionAddition(size_t) -->
        <function-decl name='RecordRegionAddition' mangled-name='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm' filepath='src/memory_region_map.cc' line='580' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap20RecordRegionAdditionEPKvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MmapHook(void*, size_t, int, int, int, off_t) -->
        <function-decl name='MmapHook' mangled-name='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil' filepath='src/memory_region_map.cc' line='762' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8MmapHookEPKvS1_miiil'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-207'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::RecordRegionRemoval(size_t) -->
        <function-decl name='RecordRegionRemoval' mangled-name='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm' filepath='src/memory_region_map.cc' line='634' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap19RecordRegionRemovalEPKvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MunmapHook(size_t) -->
        <function-decl name='MunmapHook' mangled-name='_ZN15MemoryRegionMap10MunmapHookEPKvm' filepath='src/memory_region_map.cc' line='778' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10MunmapHookEPKvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::SbrkHook(ptrdiff_t) -->
        <function-decl name='SbrkHook' mangled-name='_ZN15MemoryRegionMap8SbrkHookEPKvl' filepath='src/memory_region_map.cc' line='800' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap8SbrkHookEPKvl'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-208'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MemoryRegionMap::MremapHook(void*, size_t, size_t, int, void*) -->
        <function-decl name='MremapHook' mangled-name='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_' filepath='src/memory_region_map.cc' line='785' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MemoryRegionMap10MremapHookEPKvS1_mmiS1_'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class HeapProfileTable -->
    <class-decl name='HeapProfileTable' size-in-bits='832' visibility='default' filepath='src/heap-profile-table.h' line='51' column='1' id='type-id-209'>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocValue -->
        <class-decl name='AllocValue' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='190' column='1' id='type-id-210'>
          <member-type access='private'>
            <!-- typedef HeapProfileBucket HeapProfileTable::AllocValue::Bucket -->
            <typedef-decl name='Bucket' type-id='type-id-212' filepath='src/heap-profile-table.h' line='187' column='1' id='type-id-211'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t HeapProfileTable::AllocValue::bytes -->
            <var-decl name='bytes' type-id='type-id-62' visibility='default' filepath='src/heap-profile-table.h' line='197' column='1'/>
          </data-member>
          <data-member access='private' static='yes'>
            <!-- static const int HeapProfileTable::AllocValue::kLive -->
            <var-decl name='kLive' type-id='type-id-144' visibility='default' filepath='src/heap-profile-table.h' line='214' column='1'/>
          </data-member>
          <data-member access='private' static='yes'>
            <!-- static const int HeapProfileTable::AllocValue::kIgnore -->
            <var-decl name='kIgnore' type-id='type-id-144' visibility='default' filepath='src/heap-profile-table.h' line='215' column='1'/>
          </data-member>
          <data-member access='private' static='yes'>
            <!-- static const int HeapProfileTable::AllocValue::kMask -->
            <var-decl name='kMask' type-id='type-id-144' visibility='default' filepath='src/heap-profile-table.h' line='216' column='1'/>
          </data-member>
          <data-member access='private' layout-offset-in-bits='64'>
            <!-- uintptr_t HeapProfileTable::AllocValue::bucket_rep -->
            <var-decl name='bucket_rep' type-id='type-id-156' visibility='default' filepath='src/heap-profile-table.h' line='218' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::DumpArgs -->
        <class-decl name='DumpArgs' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='242' column='1' id='type-id-213'>
          <member-type access='public'>
            <!-- typedef HeapProfileStats HeapProfileTable::DumpArgs::Stats -->
            <typedef-decl name='Stats' type-id='type-id-180' filepath='src/heap-profile-table.h' line='63' column='1' id='type-id-214'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- RawFD HeapProfileTable::DumpArgs::fd -->
            <var-decl name='fd' type-id='type-id-75' visibility='default' filepath='src/heap-profile-table.h' line='248' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- HeapProfileTable::DumpArgs::Stats* HeapProfileTable::DumpArgs::profile_stats -->
            <var-decl name='profile_stats' type-id='type-id-215' visibility='default' filepath='src/heap-profile-table.h' line='249' column='1'/>
          </data-member>
          <member-function access='public' constructor='yes'>
            <!-- HeapProfileTable::DumpArgs::DumpArgs(RawFD, HeapProfileTable::DumpArgs::Stats*) -->
            <function-decl name='DumpArgs' filepath='src/heap-profile-table.h' line='243' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapProfileTable::DumpArgs*' -->
              <parameter type-id='type-id-216' is-artificial='yes'/>
              <!-- parameter of type 'typedef RawFD' -->
              <parameter type-id='type-id-75'/>
              <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
              <parameter type-id='type-id-215'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::Snapshot -->
        <class-decl name='Snapshot' size-in-bits='768' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='347' column='1' id='type-id-217'>
          <member-type access='private'>
            <!-- struct HeapProfileTable::Snapshot::Entry -->
            <class-decl name='Entry' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-profile-table.cc' line='514' column='1' id='type-id-218'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- int HeapProfileTable::Snapshot::Entry::count -->
                <var-decl name='count' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.cc' line='515' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- int HeapProfileTable::Snapshot::Entry::bytes -->
                <var-decl name='bytes' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.cc' line='516' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- HeapProfileTable::AllocValue::Bucket* HeapProfileTable::Snapshot::Entry::bucket -->
                <var-decl name='bucket' type-id='type-id-219' visibility='default' filepath='src/heap-profile-table.cc' line='517' column='1'/>
              </data-member>
              <member-function access='public' constructor='yes'>
                <!-- HeapProfileTable::Snapshot::Entry::Entry() -->
                <function-decl name='Entry' filepath='src/heap-profile-table.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64'>
                  <!-- implicit parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
                  <parameter type-id='type-id-220' is-artificial='yes'/>
                  <!-- void -->
                  <return type-id='type-id-60'/>
                </function-decl>
              </member-function>
            </class-decl>
          </member-type>
          <member-type access='private'>
            <!-- struct HeapProfileTable::Snapshot::ReportState -->
            <class-decl name='ReportState' size-in-bits='384' is-struct='yes' visibility='default' filepath='src/heap-profile-table.cc' line='528' column='1' id='type-id-221'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > HeapProfileTable::Snapshot::ReportState::buckets_ -->
                <var-decl name='buckets_' type-id='type-id-222' visibility='default' filepath='src/heap-profile-table.cc' line='529' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <data-member access='private' layout-offset-in-bits='0'>
            <!-- HeapProfileTable::AllocValue::Bucket HeapProfileTable::Snapshot::total_ -->
            <var-decl name='total_' type-id='type-id-211' visibility='default' filepath='src/heap-profile-table.h' line='372' column='1'/>
          </data-member>
          <data-member access='private' layout-offset-in-bits='448'>
            <!-- HeapProfileTable::AllocationMap HeapProfileTable::Snapshot::map_ -->
            <var-decl name='map_' type-id='type-id-223' visibility='default' filepath='src/heap-profile-table.h' line='376' column='1'/>
          </data-member>
          <member-function access='private' constructor='yes'>
            <!-- HeapProfileTable::Snapshot::Snapshot(HeapProfileTable::Allocator, HeapProfileTable::DeAllocator) -->
            <function-decl name='Snapshot' filepath='src/heap-profile-table.h' line='378' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot*' -->
              <parameter type-id='type-id-224' is-artificial='yes'/>
              <!-- parameter of type 'typedef HeapProfileTable::Allocator' -->
              <parameter type-id='type-id-225'/>
              <!-- parameter of type 'typedef HeapProfileTable::DeAllocator' -->
              <parameter type-id='type-id-226'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' constructor='yes'>
            <!-- HeapProfileTable::Snapshot::Snapshot(const HeapProfileTable::Snapshot&) -->
            <function-decl name='Snapshot' filepath='src/heap-profile-table.h' line='396' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot*' -->
              <parameter type-id='type-id-224' is-artificial='yes'/>
              <!-- parameter of type 'const HeapProfileTable::Snapshot&' -->
              <parameter type-id='type-id-227'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' static='yes'>
            <!-- void HeapProfileTable::Snapshot::ReportObject(HeapProfileTable::AllocValue*, char*) -->
            <function-decl name='ReportObject' mangled-name='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc' filepath='src/heap-profile-table.cc' line='614' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot12ReportObjectEPKvPNS_10AllocValueEPc'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-58'/>
              <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
              <parameter type-id='type-id-228'/>
              <!-- parameter of type 'char*' -->
              <parameter type-id='type-id-118'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void HeapProfileTable::Snapshot::ReportIndividualObjects() -->
            <function-decl name='ReportIndividualObjects' mangled-name='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv' filepath='src/heap-profile-table.cc' line='622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot23ReportIndividualObjectsEv'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot* const' -->
              <parameter type-id='type-id-229' name='this' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' static='yes'>
            <!-- void HeapProfileTable::Snapshot::ReportCallback(HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
            <function-decl name='ReportCallback' mangled-name='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE' filepath='src/heap-profile-table.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot14ReportCallbackEPKvPNS_10AllocValueEPNS0_11ReportStateE'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-58'/>
              <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
              <parameter type-id='type-id-228'/>
              <!-- parameter of type 'HeapProfileTable::Snapshot::ReportState*' -->
              <parameter type-id='type-id-230'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void HeapProfileTable::Snapshot::ReportLeaks(const char*, const char*, bool) -->
            <function-decl name='ReportLeaks' mangled-name='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b' filepath='src/heap-profile-table.cc' line='542' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable8Snapshot11ReportLeaksEPKcS2_b'>
              <!-- implicit parameter of type 'HeapProfileTable::Snapshot* const' -->
              <parameter type-id='type-id-229' name='this' is-artificial='yes'/>
              <!-- parameter of type 'const char*' -->
              <parameter type-id='type-id-57' name='checker_name' filepath='src/heap-profile-table.cc' line='542' column='1'/>
              <!-- parameter of type 'const char*' -->
              <parameter type-id='type-id-57' name='filename' filepath='src/heap-profile-table.cc' line='543' column='1'/>
              <!-- parameter of type 'bool' -->
              <parameter type-id='type-id-61' name='should_symbolize' filepath='src/heap-profile-table.cc' line='544' column='1'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AddNonLiveArgs -->
        <class-decl name='AddNonLiveArgs' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='305' column='1' id='type-id-231'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- HeapProfileTable::Snapshot* HeapProfileTable::AddNonLiveArgs::dest -->
            <var-decl name='dest' type-id='type-id-224' visibility='default' filepath='src/heap-profile-table.h' line='306' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- HeapProfileTable::Snapshot* HeapProfileTable::AddNonLiveArgs::base -->
            <var-decl name='base' type-id='type-id-224' visibility='default' filepath='src/heap-profile-table.h' line='307' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocContextInfo -->
        <class-decl name='AllocContextInfo' size-in-bits='320' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='77' column='1' id='type-id-232'>
          <!-- struct HeapProfileStats -->
          <base-class access='public' layout-offset-in-bits='0' type-id='type-id-180'/>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- int HeapProfileTable::AllocContextInfo::stack_depth -->
            <var-decl name='stack_depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='78' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='256'>
            <!-- void* const* HeapProfileTable::AllocContextInfo::call_stack -->
            <var-decl name='call_stack' type-id='type-id-205' visibility='default' filepath='src/heap-profile-table.h' line='79' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef void* (typedef size_t)* HeapProfileTable::Allocator -->
        <typedef-decl name='Allocator' type-id='type-id-233' filepath='src/heap-profile-table.h' line='83' column='1' id='type-id-225'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (void*)* HeapProfileTable::DeAllocator -->
        <typedef-decl name='DeAllocator' type-id='type-id-234' filepath='src/heap-profile-table.h' line='84' column='1' id='type-id-226'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef AddressMap<HeapProfileTable::AllocValue> HeapProfileTable::AllocationMap -->
        <typedef-decl name='AllocationMap' type-id='type-id-235' filepath='src/heap-profile-table.h' line='224' column='1' id='type-id-223'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (void*, const HeapProfileTable::AllocInfo&)* HeapProfileTable::AllocIterator -->
        <typedef-decl name='AllocIterator' type-id='type-id-237' filepath='src/heap-profile-table.h' line='138' column='1' id='type-id-236'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (const HeapProfileTable::AllocContextInfo&)* HeapProfileTable::AllocContextIterator -->
        <typedef-decl name='AllocContextIterator' type-id='type-id-239' filepath='src/heap-profile-table.h' line='147' column='1' id='type-id-238'/>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::BufferArgs -->
        <class-decl name='BufferArgs' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='227' column='1' id='type-id-240'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- char* HeapProfileTable::BufferArgs::buf -->
            <var-decl name='buf' type-id='type-id-118' visibility='default' filepath='src/heap-profile-table.h' line='234' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- int HeapProfileTable::BufferArgs::buflen -->
            <var-decl name='buflen' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='235' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='96'>
            <!-- int HeapProfileTable::BufferArgs::bufsize -->
            <var-decl name='bufsize' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='236' column='1'/>
          </data-member>
          <member-function access='public' constructor='yes'>
            <!-- HeapProfileTable::BufferArgs::BufferArgs(char*, int, int) -->
            <function-decl name='BufferArgs' filepath='src/heap-profile-table.h' line='228' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapProfileTable::BufferArgs*' -->
              <parameter type-id='type-id-200' is-artificial='yes'/>
              <!-- parameter of type 'char*' -->
              <parameter type-id='type-id-118'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' constructor='yes'>
            <!-- HeapProfileTable::BufferArgs::BufferArgs(const HeapProfileTable::BufferArgs&) -->
            <function-decl name='BufferArgs' filepath='src/heap-profile-table.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapProfileTable::BufferArgs*' -->
              <parameter type-id='type-id-200' is-artificial='yes'/>
              <!-- parameter of type 'const HeapProfileTable::BufferArgs&' -->
              <parameter type-id='type-id-241'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapProfileTable::AllocInfo -->
        <class-decl name='AllocInfo' size-in-bits='192' is-struct='yes' visibility='default' filepath='src/heap-profile-table.h' line='66' column='1' id='type-id-242'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t HeapProfileTable::AllocInfo::object_size -->
            <var-decl name='object_size' type-id='type-id-62' visibility='default' filepath='src/heap-profile-table.h' line='67' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- void* const* HeapProfileTable::AllocInfo::call_stack -->
            <var-decl name='call_stack' type-id='type-id-205' visibility='default' filepath='src/heap-profile-table.h' line='68' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- int HeapProfileTable::AllocInfo::stack_depth -->
            <var-decl name='stack_depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='69' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='160'>
            <!-- bool HeapProfileTable::AllocInfo::live -->
            <var-decl name='live' type-id='type-id-61' visibility='default' filepath='src/heap-profile-table.h' line='70' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='168'>
            <!-- bool HeapProfileTable::AllocInfo::ignored -->
            <var-decl name='ignored' type-id='type-id-61' visibility='default' filepath='src/heap-profile-table.h' line='71' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static char HeapProfileTable::kFileExt[] -->
        <var-decl name='kFileExt' type-id='type-id-159' mangled-name='_ZN16HeapProfileTable8kFileExtE' visibility='default' filepath='src/heap-profile-table.h' line='55' column='1' elf-symbol-id='_ZN16HeapProfileTable8kFileExtE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int HeapProfileTable::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-144' mangled-name='_ZN16HeapProfileTable14kMaxStackDepthE' visibility='default' filepath='src/heap-profile-table.h' line='58' column='1' elf-symbol-id='_ZN16HeapProfileTable14kMaxStackDepthE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- HeapProfileTable::Allocator HeapProfileTable::alloc_ -->
        <var-decl name='alloc_' type-id='type-id-225' visibility='default' filepath='src/heap-profile-table.h' line='325' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- HeapProfileTable::DeAllocator HeapProfileTable::dealloc_ -->
        <var-decl name='dealloc_' type-id='type-id-226' visibility='default' filepath='src/heap-profile-table.h' line='326' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- HeapProfileTable::AllocValue::Bucket HeapProfileTable::total_ -->
        <var-decl name='total_' type-id='type-id-211' visibility='default' filepath='src/heap-profile-table.h' line='330' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- bool HeapProfileTable::profile_mmap_ -->
        <var-decl name='profile_mmap_' type-id='type-id-61' visibility='default' filepath='src/heap-profile-table.h' line='332' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='640'>
        <!-- HeapProfileTable::AllocValue::Bucket** HeapProfileTable::bucket_table_ -->
        <var-decl name='bucket_table_' type-id='type-id-243' visibility='default' filepath='src/heap-profile-table.h' line='338' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='704'>
        <!-- int HeapProfileTable::num_buckets_ -->
        <var-decl name='num_buckets_' type-id='type-id-1' visibility='default' filepath='src/heap-profile-table.h' line='339' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='768'>
        <!-- HeapProfileTable::AllocationMap* HeapProfileTable::address_map_ -->
        <var-decl name='address_map_' type-id='type-id-244' visibility='default' filepath='src/heap-profile-table.h' line='342' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- HeapProfileTable::HeapProfileTable(HeapProfileTable::Allocator, HeapProfileTable::DeAllocator, bool) -->
        <function-decl name='HeapProfileTable' mangled-name='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb' filepath='src/heap-profile-table.h' line='88' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTableC2EPFPvmEPFvS0_Eb'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-245' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapProfileTable::Allocator' -->
          <parameter type-id='type-id-225'/>
          <!-- parameter of type 'typedef HeapProfileTable::DeAllocator' -->
          <parameter type-id='type-id-226'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- HeapProfileTable::~HeapProfileTable(int) -->
        <function-decl name='~HeapProfileTable' mangled-name='_ZN16HeapProfileTableD1Ev' filepath='src/heap-profile-table.h' line='89' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTableD1Ev'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-245' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapProfileTable::HeapProfileTable(const HeapProfileTable&) -->
        <function-decl name='HeapProfileTable' filepath='src/heap-profile-table.h' line='344' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'HeapProfileTable*' -->
          <parameter type-id='type-id-245' is-artificial='yes'/>
          <!-- parameter of type 'const HeapProfileTable&' -->
          <parameter type-id='type-id-246'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::MapArgsAllocIterator(HeapProfileTable::AllocValue*, HeapProfileTable::AllocIterator) -->
        <function-decl name='MapArgsAllocIterator' mangled-name='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE' filepath='src/heap-profile-table.h' line='276' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable20MapArgsAllocIteratorEPKvPNS_10AllocValueEPFvS1_RKNS_9AllocInfoEE'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-228'/>
          <!-- parameter of type 'typedef HeapProfileTable::AllocIterator' -->
          <parameter type-id='type-id-236'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- size_t HeapProfileTable::AllocValueSize() -->
        <function-decl name='AllocValueSize' mangled-name='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE' filepath='src/heap-profile-table.h' line='222' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable14AllocValueSizeERKNS_10AllocValueE'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue&' -->
          <parameter type-id='type-id-247' name='v' filepath='src/heap-profile-table.h' line='222' column='1'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::ReleaseSnapshot(HeapProfileTable::Snapshot*) -->
        <function-decl name='ReleaseSnapshot' mangled-name='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='485' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable15ReleaseSnapshotEPNS_8SnapshotE'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-224' name='s' filepath='src/heap-profile-table.cc' line='485' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapProfileTable::UnparseBucket(char*, int, int, const char*, HeapProfileTable::DumpArgs::Stats*) -->
        <function-decl name='UnparseBucket' mangled-name='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats' filepath='src/heap-profile-table.cc' line='280' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13UnparseBucketERK17HeapProfileBucketPciiPKcP16HeapProfileStats'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket&' -->
          <parameter type-id='type-id-249' name='b' filepath='src/heap-profile-table.cc' line='280' column='1'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118' name='buf' filepath='src/heap-profile-table.cc' line='281' column='1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='buflen' filepath='src/heap-profile-table.cc' line='281' column='1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='bufsize' filepath='src/heap-profile-table.cc' line='281' column='1'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='extra' filepath='src/heap-profile-table.cc' line='282' column='1'/>
          <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
          <parameter type-id='type-id-215' name='profile_stats' filepath='src/heap-profile-table.cc' line='283' column='1'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::DumpNonLiveIterator(HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&) -->
        <function-decl name='DumpNonLiveIterator' mangled-name='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE' filepath='src/heap-profile-table.cc' line='397' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable19DumpNonLiveIteratorEPKvPNS_10AllocValueERKNS_8DumpArgsE'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='397' column='1'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-228' name='v' filepath='src/heap-profile-table.cc' line='397' column='1'/>
          <!-- parameter of type 'const HeapProfileTable::DumpArgs&' -->
          <parameter type-id='type-id-250' name='args' filepath='src/heap-profile-table.cc' line='398' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::DumpBucketIterator(HeapProfileTable::BufferArgs*) -->
        <function-decl name='DumpBucketIterator' mangled-name='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE' filepath='src/heap-profile-table.cc' line='390' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable18DumpBucketIteratorEPK17HeapProfileBucketPNS_10BufferArgsE'>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket*' -->
          <parameter type-id='type-id-251'/>
          <!-- parameter of type 'HeapProfileTable::BufferArgs*' -->
          <parameter type-id='type-id-200'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::AllocValue::Bucket* HeapProfileTable::GetBucket(int, void* const*) -->
        <function-decl name='GetBucket' mangled-name='_ZN16HeapProfileTable9GetBucketEiPKPKv' filepath='src/heap-profile-table.cc' line='167' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable9GetBucketEiPKPKv'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='depth' filepath='src/heap-profile-table.cc' line='167' column='1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205' name='key' filepath='src/heap-profile-table.cc' line='168' column='1'/>
          <!-- HeapProfileTable::AllocValue::Bucket* -->
          <return type-id='type-id-219'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapProfileTable::GetCallerStackTrace(void**) -->
        <function-decl name='GetCallerStackTrace' mangled-name='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv' filepath='src/heap-profile-table.cc' line='204' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable19GetCallerStackTraceEiPPv'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-151'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::AllocValue::Bucket** HeapProfileTable::MakeSortedBucketList() -->
        <function-decl name='MakeSortedBucketList' mangled-name='_ZNK16HeapProfileTable20MakeSortedBucketListEv' filepath='src/heap-profile-table.cc' line='313' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable20MakeSortedBucketListEv'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- HeapProfileTable::AllocValue::Bucket** -->
          <return type-id='type-id-243'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::IterateOrderedAllocContexts(HeapProfileTable::AllocContextIterator) -->
        <function-decl name='IterateOrderedAllocContexts' mangled-name='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE' filepath='src/heap-profile-table.cc' line='329' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable27IterateOrderedAllocContextsEPFvRKNS_16AllocContextInfoEE'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapProfileTable::AllocContextIterator' -->
          <parameter type-id='type-id-238' name='callback' filepath='src/heap-profile-table.cc' line='330' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- int HeapProfileTable::FillOrderedProfile(char*, int) -->
        <function-decl name='FillOrderedProfile' mangled-name='_ZNK16HeapProfileTable18FillOrderedProfileEPci' filepath='src/heap-profile-table.cc' line='342' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable18FillOrderedProfileEPci'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118' name='buf' filepath='src/heap-profile-table.cc' line='342' column='1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='size' filepath='src/heap-profile-table.cc' line='342' column='1'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::MarkAsIgnored(void*) -->
        <function-decl name='MarkAsIgnored' mangled-name='_ZN16HeapProfileTable13MarkAsIgnoredEPKv' filepath='src/heap-profile-table.cc' line='272' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13MarkAsIgnoredEPKv'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='272' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapProfileTable::WriteProfile(const HeapProfileTable::AllocValue::Bucket&, HeapProfileTable::AllocationMap*) -->
        <function-decl name='WriteProfile' mangled-name='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE' filepath='src/heap-profile-table.cc' line='432' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12WriteProfileEPKcRK17HeapProfileBucketP10AddressMapINS_10AllocValueEE'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='file_name' filepath='src/heap-profile-table.cc' line='432' column='1'/>
          <!-- parameter of type 'const HeapProfileTable::AllocValue::Bucket&' -->
          <parameter type-id='type-id-249' name='total' filepath='src/heap-profile-table.cc' line='433' column='1'/>
          <!-- parameter of type 'HeapProfileTable::AllocationMap*' -->
          <parameter type-id='type-id-244' name='allocations' filepath='src/heap-profile-table.cc' line='434' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindInsideAlloc(void*, size_t, void**, size_t*) -->
        <function-decl name='FindInsideAlloc' mangled-name='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm' filepath='src/heap-profile-table.cc' line='253' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable15FindInsideAllocEPKvmPS1_Pm'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='253' column='1'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62' name='max_size' filepath='src/heap-profile-table.cc' line='254' column='1'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-151' name='object_ptr' filepath='src/heap-profile-table.cc' line='255' column='1'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253' name='object_size' filepath='src/heap-profile-table.cc' line='256' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::AddToSnapshot(HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
        <function-decl name='AddToSnapshot' mangled-name='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='491' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable13AddToSnapshotEPKvPNS_10AllocValueEPNS_8SnapshotE'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-228'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-224'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::Snapshot* HeapProfileTable::TakeSnapshot() -->
        <function-decl name='TakeSnapshot' mangled-name='_ZN16HeapProfileTable12TakeSnapshotEv' filepath='src/heap-profile-table.cc' line='479' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12TakeSnapshotEv'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- HeapProfileTable::Snapshot* -->
          <return type-id='type-id-224'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::RecordAlloc(void*, size_t, int, void* const*) -->
        <function-decl name='RecordAlloc' mangled-name='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_' filepath='src/heap-profile-table.cc' line='210' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable11RecordAllocEPKvmiPKS1_'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='211' column='1'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62' name='bytes' filepath='src/heap-profile-table.cc' line='211' column='1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='stack_depth' filepath='src/heap-profile-table.cc' line='211' column='1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205' name='call_stack' filepath='src/heap-profile-table.cc' line='212' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapProfileTable::RecordFree(void*) -->
        <function-decl name='RecordFree' mangled-name='_ZN16HeapProfileTable10RecordFreeEPKv' filepath='src/heap-profile-table.cc' line='225' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable10RecordFreeEPKv'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='272' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::AddIfNonLive(HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
        <function-decl name='AddIfNonLive' mangled-name='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE' filepath='src/heap-profile-table.cc' line='419' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable12AddIfNonLiveEPKvPNS_10AllocValueEPNS_14AddNonLiveArgsE'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
          <parameter type-id='type-id-228'/>
          <!-- parameter of type 'HeapProfileTable::AddNonLiveArgs*' -->
          <parameter type-id='type-id-254'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- HeapProfileTable::Snapshot* HeapProfileTable::NonLiveSnapshot(HeapProfileTable::Snapshot*) -->
        <function-decl name='NonLiveSnapshot' mangled-name='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE' filepath='src/heap-profile-table.cc' line='496' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable15NonLiveSnapshotEPNS_8SnapshotE'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-224' name='base' filepath='src/heap-profile-table.cc' line='497' column='1'/>
          <!-- HeapProfileTable::Snapshot* -->
          <return type-id='type-id-224'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::MarkAsLive(void*) -->
        <function-decl name='MarkAsLive' mangled-name='_ZN16HeapProfileTable10MarkAsLiveEPKv' filepath='src/heap-profile-table.cc' line='263' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable10MarkAsLiveEPKv'>
          <!-- implicit parameter of type 'HeapProfileTable* const' -->
          <parameter type-id='type-id-248' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='263' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapProfileTable::CleanupOldProfiles() -->
        <function-decl name='CleanupOldProfiles' mangled-name='_ZN16HeapProfileTable18CleanupOldProfilesEPKc' filepath='src/heap-profile-table.cc' line='455' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16HeapProfileTable18CleanupOldProfilesEPKc'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindAllocDetails(void*, HeapProfileTable::AllocInfo*) -->
        <function-decl name='FindAllocDetails' mangled-name='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE' filepath='src/heap-profile-table.cc' line='242' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable16FindAllocDetailsEPKvPNS_9AllocInfoE'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='242' column='1'/>
          <!-- parameter of type 'HeapProfileTable::AllocInfo*' -->
          <parameter type-id='type-id-255' name='info' filepath='src/heap-profile-table.cc' line='243' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapProfileTable::FindAlloc(void*, size_t*) -->
        <function-decl name='FindAlloc' mangled-name='_ZNK16HeapProfileTable9FindAllocEPKvPm' filepath='src/heap-profile-table.cc' line='236' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK16HeapProfileTable9FindAllocEPKvPm'>
          <!-- implicit parameter of type 'const HeapProfileTable* const' -->
          <parameter type-id='type-id-252' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='ptr' filepath='src/heap-profile-table.cc' line='236' column='1'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253' name='object_size' filepath='src/heap-profile-table.cc' line='236' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class LowLevelAlloc -->
    <class-decl name='LowLevelAlloc' size-in-bits='8' visibility='default' filepath='src/base/low_level_alloc.h' line='44' column='1' id='type-id-86'>
      <member-type access='private'>
        <!-- struct LowLevelAlloc::Arena -->
        <class-decl name='Arena' size-in-bits='2560' is-struct='yes' visibility='default' filepath='src/base/low_level_alloc.cc' line='184' column='1' id='type-id-84'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- SpinLock LowLevelAlloc::Arena::mu -->
            <var-decl name='mu' type-id='type-id-87' visibility='default' filepath='src/base/low_level_alloc.cc' line='189' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- low_level_alloc_internal::AllocList LowLevelAlloc::Arena::freelist -->
            <var-decl name='freelist' type-id='type-id-80' visibility='default' filepath='src/base/low_level_alloc.cc' line='191' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2304'>
            <!-- int32 LowLevelAlloc::Arena::allocation_count -->
            <var-decl name='allocation_count' type-id='type-id-74' visibility='default' filepath='src/base/low_level_alloc.cc' line='192' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2336'>
            <!-- int32 LowLevelAlloc::Arena::flags -->
            <var-decl name='flags' type-id='type-id-74' visibility='default' filepath='src/base/low_level_alloc.cc' line='193' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2368'>
            <!-- size_t LowLevelAlloc::Arena::pagesize -->
            <var-decl name='pagesize' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='194' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2432'>
            <!-- size_t LowLevelAlloc::Arena::roundup -->
            <var-decl name='roundup' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='195' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='2496'>
            <!-- size_t LowLevelAlloc::Arena::min_size -->
            <var-decl name='min_size' type-id='type-id-62' visibility='default' filepath='src/base/low_level_alloc.cc' line='197' column='1'/>
          </data-member>
          <member-function access='public' constructor='yes'>
            <!-- LowLevelAlloc::Arena::Arena() -->
            <function-decl name='Arena' filepath='src/base/low_level_alloc.cc' line='185' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'LowLevelAlloc::Arena*' -->
              <parameter type-id='type-id-83' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' constructor='yes'>
            <!-- LowLevelAlloc::Arena::Arena(int) -->
            <function-decl name='Arena' filepath='src/base/low_level_alloc.cc' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'LowLevelAlloc::Arena*' -->
              <parameter type-id='type-id-83' is-artificial='yes'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- LowLevelAlloc::Arena* LowLevelAlloc::DefaultArena() -->
        <function-decl name='DefaultArena' mangled-name='_ZN13LowLevelAlloc12DefaultArenaEv' filepath='src/base/low_level_alloc.cc' line='521' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc12DefaultArenaEv'>
          <!-- LowLevelAlloc::Arena* -->
          <return type-id='type-id-83'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* LowLevelAlloc::AllocWithArena(LowLevelAlloc::Arena*) -->
        <function-decl name='AllocWithArena' mangled-name='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='510' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc14AllocWithArenaEmPNS_5ArenaE'>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-83'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- LowLevelAlloc::Arena* LowLevelAlloc::NewArena(LowLevelAlloc::Arena*) -->
        <function-decl name='NewArena' mangled-name='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='296' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc8NewArenaEiPNS_5ArenaE'>
          <!-- parameter of type 'typedef int32' -->
          <parameter type-id='type-id-74'/>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-83'/>
          <!-- LowLevelAlloc::Arena* -->
          <return type-id='type-id-83'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* LowLevelAlloc::Alloc() -->
        <function-decl name='Alloc' mangled-name='_ZN13LowLevelAlloc5AllocEm' filepath='src/base/low_level_alloc.cc' line='500' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc5AllocEm'>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void LowLevelAlloc::Free() -->
        <function-decl name='Free' mangled-name='_ZN13LowLevelAlloc4FreeEPv' filepath='src/base/low_level_alloc.cc' line='415' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc4FreeEPv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool LowLevelAlloc::DeleteArena() -->
        <function-decl name='DeleteArena' mangled-name='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE' filepath='src/base/low_level_alloc.cc' line='315' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13LowLevelAlloc11DeleteArenaEPNS_5ArenaE'>
          <!-- parameter of type 'LowLevelAlloc::Arena*' -->
          <parameter type-id='type-id-83'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class AddressMap<HeapProfileTable::AllocValue> -->
    <class-decl name='AddressMap&lt;HeapProfileTable::AllocValue&gt;' size-in-bits='320' visibility='default' filepath='src/addressmap-inl.h' line='104' column='1' id='type-id-235'>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Cluster -->
        <class-decl name='Cluster' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-256'/>
      </member-type>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Entry -->
        <class-decl name='Entry' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-257'/>
      </member-type>
      <member-type access='private'>
        <!-- struct AddressMap<HeapProfileTable::AllocValue>::Object -->
        <class-decl name='Object' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-258'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kBlockBits -->
        <var-decl name='kBlockBits' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='159' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kBlockSize -->
        <var-decl name='kBlockSize' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='160' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kClusterBits -->
        <var-decl name='kClusterBits' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='172' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const uintptr_t AddressMap<HeapProfileTable::AllocValue>::kClusterSize -->
        <var-decl name='kClusterSize' type-id='type-id-259' visibility='default' filepath='src/addressmap-inl.h' line='173' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kClusterBlocks -->
        <var-decl name='kClusterBlocks' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='174' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kHashBits -->
        <var-decl name='kHashBits' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='187' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::kHashSize -->
        <var-decl name='kHashSize' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='188' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int AddressMap<HeapProfileTable::AllocValue>::ALLOC_COUNT -->
        <var-decl name='ALLOC_COUNT' type-id='type-id-144' visibility='default' filepath='src/addressmap-inl.h' line='191' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** AddressMap<HeapProfileTable::AllocValue>::hashtable_ -->
        <var-decl name='hashtable_' type-id='type-id-260' visibility='default' filepath='src/addressmap-inl.h' line='193' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* AddressMap<HeapProfileTable::AllocValue>::free_ -->
        <var-decl name='free_' type-id='type-id-261' visibility='default' filepath='src/addressmap-inl.h' line='194' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const uint32_t AddressMap<HeapProfileTable::AllocValue>::kHashMultiplier -->
        <var-decl name='kHashMultiplier' type-id='type-id-262' visibility='default' filepath='src/addressmap-inl.h' line='202' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- void* (unsigned long int)* AddressMap<HeapProfileTable::AllocValue>::alloc_ -->
        <var-decl name='alloc_' type-id='type-id-263' visibility='default' filepath='src/addressmap-inl.h' line='251' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- void (void*)* AddressMap<HeapProfileTable::AllocValue>::dealloc_ -->
        <var-decl name='dealloc_' type-id='type-id-234' visibility='default' filepath='src/addressmap-inl.h' line='252' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Object* AddressMap<HeapProfileTable::AllocValue>::allocated_ -->
        <var-decl name='allocated_' type-id='type-id-264' visibility='default' filepath='src/addressmap-inl.h' line='253' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::AddressMap(void* (unsigned long int)*, void (void*)*) -->
        <function-decl name='AddressMap' mangled-name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E' filepath='src/addressmap-inl.h' line='271' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10AddressMapIN16HeapProfileTable10AllocValueEEC2EPFPvmEPFvS3_E'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-265' is-artificial='yes'/>
          <!-- parameter of type 'void* (unsigned long int)*' -->
          <parameter type-id='type-id-263'/>
          <!-- parameter of type 'void (void*)*' -->
          <parameter type-id='type-id-234'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::~AddressMap(int) -->
        <function-decl name='~AddressMap' filepath='src/addressmap-inl.h' line='280' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-265' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<void (*)(const void*, const HeapProfileTable::AllocInfo&)>(void (void*, HeapProfileTable::AllocValue*, void (void*, const HeapProfileTable::AllocInfo&)*)*, void (void*, const HeapProfileTable::AllocInfo&)*) -->
        <function-decl name='Iterate&lt;void (*)(const void*, const HeapProfileTable::AllocInfo&amp;)&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, void (void*, const HeapProfileTable::AllocInfo&)*)*' -->
          <parameter type-id='type-id-267'/>
          <!-- parameter of type 'void (void*, const HeapProfileTable::AllocInfo&)*' -->
          <parameter type-id='type-id-237'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<char*>(void (void*, HeapProfileTable::AllocValue*, char*)*, char*) -->
        <function-decl name='Iterate&lt;char*&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, char*)*' -->
          <parameter type-id='type-id-268'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** AddressMap<HeapProfileTable::AllocValue>::New<AddressMap<HeapProfileTable::AllocValue>::Cluster*>(int) -->
        <function-decl name='New&lt;AddressMap&lt;HeapProfileTable::AllocValue&gt;::Cluster*&gt;' filepath='src/addressmap-inl.h' line='258' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-265' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** -->
          <return type-id='type-id-260'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<HeapProfileTable::AddNonLiveArgs*>(void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*)*, HeapProfileTable::AddNonLiveArgs*) -->
        <function-decl name='Iterate&lt;HeapProfileTable::AddNonLiveArgs*&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*)*' -->
          <parameter type-id='type-id-269'/>
          <!-- parameter of type 'HeapProfileTable::AddNonLiveArgs*' -->
          <parameter type-id='type-id-254'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<HeapProfileTable::Snapshot*>(void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*)*, HeapProfileTable::Snapshot*) -->
        <function-decl name='Iterate&lt;HeapProfileTable::Snapshot*&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*)*' -->
          <parameter type-id='type-id-270'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
          <parameter type-id='type-id-224'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster* AddressMap<HeapProfileTable::AllocValue>::New<AddressMap<HeapProfileTable::AllocValue>::Cluster>(int) -->
        <function-decl name='New&lt;AddressMap&lt;HeapProfileTable::AllocValue&gt;::Cluster&gt;' filepath='src/addressmap-inl.h' line='258' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-265' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster* -->
          <return type-id='type-id-271'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* AddressMap<HeapProfileTable::AllocValue>::New<AddressMap<HeapProfileTable::AllocValue>::Entry>(int) -->
        <function-decl name='New&lt;AddressMap&lt;HeapProfileTable::AllocValue&gt;::Entry&gt;' filepath='src/addressmap-inl.h' line='258' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-265' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* -->
          <return type-id='type-id-261'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<const HeapProfileTable::DumpArgs&>(void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&)*, const HeapProfileTable::DumpArgs&) -->
        <function-decl name='Iterate&lt;const HeapProfileTable::DumpArgs&amp;&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&)*' -->
          <parameter type-id='type-id-272'/>
          <!-- parameter of type 'const HeapProfileTable::DumpArgs&' -->
          <parameter type-id='type-id-273'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Iterate<HeapProfileTable::Snapshot::ReportState*>(void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*)*, HeapProfileTable::Snapshot::ReportState*) -->
        <function-decl name='Iterate&lt;HeapProfileTable::Snapshot::ReportState*&gt;' filepath='src/addressmap-inl.h' line='407' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'const AddressMap<HeapProfileTable::AllocValue>*' -->
          <parameter type-id='type-id-266' is-artificial='yes'/>
          <!-- parameter of type 'void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*)*' -->
          <parameter type-id='type-id-274'/>
          <!-- parameter of type 'HeapProfileTable::Snapshot::ReportState*' -->
          <parameter type-id='type-id-230'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void AddressMap<HeapProfileTable::AllocValue>::Insert(void*, HeapProfileTable::AllocValue) -->
        <function-decl name='Insert' mangled-name='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_' filepath='src/addressmap-inl.h' line='309' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10AddressMapIN16HeapProfileTable10AllocValueEE6InsertEPKvS1_'>
          <!-- implicit parameter of type 'AddressMap<HeapProfileTable::AllocValue>* const' -->
          <parameter type-id='type-id-275' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='key' filepath='src/addressmap-inl.h' line='309' column='1'/>
          <!-- parameter of type 'struct HeapProfileTable::AllocValue' -->
          <parameter type-id='type-id-210' name='value' filepath='src/addressmap-inl.h' line='309' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class HeapLeakChecker -->
    <class-decl name='HeapLeakChecker' size-in-bits='448' visibility='default' filepath='src/gperftools/heap-checker.h' line='78' column='1' id='type-id-276'>
      <member-type access='private'>
        <!-- class HeapLeakChecker::Disabler -->
        <class-decl name='Disabler' size-in-bits='8' visibility='default' filepath='./src/gperftools/heap-checker.h' line='175' column='1' id='type-id-277'>
          <member-function access='private' constructor='yes'>
            <!-- HeapLeakChecker::Disabler::Disabler() -->
            <function-decl name='Disabler' mangled-name='_ZN15HeapLeakChecker8DisablerC1Ev' filepath='./src/gperftools/heap-checker.h' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8DisablerC1Ev'>
              <!-- implicit parameter of type 'HeapLeakChecker::Disabler*' -->
              <parameter type-id='type-id-278' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' destructor='yes'>
            <!-- HeapLeakChecker::Disabler::~Disabler(int) -->
            <function-decl name='~Disabler' mangled-name='_ZN15HeapLeakChecker8DisablerD1Ev' filepath='./src/gperftools/heap-checker.h' line='178' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8DisablerD1Ev'>
              <!-- implicit parameter of type 'HeapLeakChecker::Disabler*' -->
              <parameter type-id='type-id-278' is-artificial='yes'/>
              <!-- artificial parameter of type 'int' -->
              <parameter type-id='type-id-1' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='private' constructor='yes'>
            <!-- HeapLeakChecker::Disabler::Disabler(const HeapLeakChecker::Disabler&) -->
            <function-decl name='Disabler' filepath='./src/gperftools/heap-checker.h' line='180' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- implicit parameter of type 'HeapLeakChecker::Disabler*' -->
              <parameter type-id='type-id-278' is-artificial='yes'/>
              <!-- parameter of type 'const HeapLeakChecker::Disabler&' -->
              <parameter type-id='type-id-279'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ShouldSymbolize -->
        <enum-decl name='ShouldSymbolize' filepath='./src/gperftools/heap-checker.h' line='225' column='1' id='type-id-280'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='SYMBOLIZE' value='0'/>
          <enumerator name='DO_NOT_SYMBOLIZE' value='1'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ProcMapsTask -->
        <enum-decl name='ProcMapsTask' filepath='./src/gperftools/heap-checker.h' line='295' column='1' id='type-id-281'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='RECORD_GLOBAL_DATA' value='0'/>
          <enumerator name='DISABLE_LIBRARY_ALLOCS' value='1'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum HeapLeakChecker::ProcMapsResult -->
        <enum-decl name='ProcMapsResult' filepath='./src/gperftools/heap-checker.h' line='301' column='1' id='type-id-282'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='PROC_MAPS_USED' value='0'/>
          <enumerator name='CANT_OPEN_PROC_MAPS' value='1'/>
          <enumerator name='NO_SHARED_LIBS_IN_PROC_MAPS' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapLeakChecker::RangeValue -->
        <class-decl name='RangeValue' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/heap-checker.cc' line='404' column='1' id='type-id-283'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- uintptr_t HeapLeakChecker::RangeValue::start_address -->
            <var-decl name='start_address' type-id='type-id-156' visibility='default' filepath='src/heap-checker.cc' line='405' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- int HeapLeakChecker::RangeValue::max_depth -->
            <var-decl name='max_depth' type-id='type-id-1' visibility='default' filepath='src/heap-checker.cc' line='406' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct HeapLeakChecker::Allocator -->
        <class-decl name='Allocator' size-in-bits='8' is-struct='yes' visibility='default' filepath='src/heap-checker.cc' line='292' column='1' id='type-id-284'>
          <data-member access='private' static='yes'>
            <!-- static LowLevelAlloc::Arena* HeapLeakChecker::Allocator::arena_ -->
            <var-decl name='arena_' type-id='type-id-83' mangled-name='_ZN15HeapLeakChecker9Allocator6arena_E' visibility='default' filepath='src/heap-checker.cc' line='333' column='1' elf-symbol-id='_ZN15HeapLeakChecker9Allocator6arena_E'/>
          </data-member>
          <data-member access='private' static='yes'>
            <!-- static int HeapLeakChecker::Allocator::alloc_count_ -->
            <var-decl name='alloc_count_' type-id='type-id-1' mangled-name='_ZN15HeapLeakChecker9Allocator12alloc_count_E' visibility='default' filepath='src/heap-checker.cc' line='334' column='1' elf-symbol-id='_ZN15HeapLeakChecker9Allocator12alloc_count_E'/>
          </data-member>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<DisabledRangeMap>() -->
            <function-decl name='DeleteAndNull&lt;DisabledRangeMap&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'DisabledRangeMap**' -->
              <parameter type-id='type-id-285'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<GlobalRegionCallerRangeMap>() -->
            <function-decl name='DeleteAndNull&lt;GlobalRegionCallerRangeMap&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'GlobalRegionCallerRangeMap**' -->
              <parameter type-id='type-id-286'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<HeapProfileTable>() -->
            <function-decl name='DeleteAndNull&lt;HeapProfileTable&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'HeapProfileTable**' -->
              <parameter type-id='type-id-287'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNullIfNot<DisabledRangeMap>() -->
            <function-decl name='DeleteAndNullIfNot&lt;DisabledRangeMap&gt;' filepath='src/heap-checker.cc' line='329' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'DisabledRangeMap**' -->
              <parameter type-id='type-id-285'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<LibraryLiveObjectsStacks>() -->
            <function-decl name='DeleteAndNull&lt;LibraryLiveObjectsStacks&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'LibraryLiveObjectsStacks**' -->
              <parameter type-id='type-id-288'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<LiveObjectsStack>() -->
            <function-decl name='DeleteAndNull&lt;LiveObjectsStack&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'LiveObjectsStack**' -->
              <parameter type-id='type-id-289'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNull<StackTopSet>() -->
            <function-decl name='DeleteAndNull&lt;StackTopSet&gt;' filepath='src/heap-checker.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'StackTopSet**' -->
              <parameter type-id='type-id-290'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::DeleteAndNullIfNot<GlobalRegionCallerRangeMap>() -->
            <function-decl name='DeleteAndNullIfNot&lt;GlobalRegionCallerRangeMap&gt;' filepath='src/heap-checker.cc' line='329' column='1' visibility='default' binding='global' size-in-bits='64'>
              <!-- parameter of type 'GlobalRegionCallerRangeMap**' -->
              <parameter type-id='type-id-286'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void* HeapLeakChecker::Allocator::Allocate() -->
            <function-decl name='Allocate' mangled-name='_ZN15HeapLeakChecker9Allocator8AllocateEm' filepath='src/heap-checker.cc' line='309' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9Allocator8AllocateEm'>
              <!-- parameter of type 'typedef size_t' -->
              <parameter type-id='type-id-62'/>
              <!-- void* -->
              <return type-id='type-id-58'/>
            </function-decl>
          </member-function>
          <member-function access='public' static='yes'>
            <!-- void HeapLeakChecker::Allocator::Free() -->
            <function-decl name='Free' mangled-name='_ZN15HeapLeakChecker9Allocator4FreeEPv' filepath='src/heap-checker.cc' line='315' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9Allocator4FreeEPv'>
              <!-- parameter of type 'void*' -->
              <parameter type-id='type-id-58'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock* HeapLeakChecker::lock_ -->
        <var-decl name='lock_' type-id='type-id-94' visibility='default' filepath='./src/gperftools/heap-checker.h' line='358' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- const char* HeapLeakChecker::name_ -->
        <var-decl name='name_' type-id='type-id-57' visibility='default' filepath='./src/gperftools/heap-checker.h' line='359' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- void* HeapLeakChecker::start_snapshot_ -->
        <var-decl name='start_snapshot_' type-id='type-id-58' visibility='default' filepath='./src/gperftools/heap-checker.h' line='365' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- bool HeapLeakChecker::has_checked_ -->
        <var-decl name='has_checked_' type-id='type-id-61' visibility='default' filepath='./src/gperftools/heap-checker.h' line='367' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- ssize_t HeapLeakChecker::inuse_bytes_increase_ -->
        <var-decl name='inuse_bytes_increase_' type-id='type-id-291' visibility='default' filepath='./src/gperftools/heap-checker.h' line='368' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- ssize_t HeapLeakChecker::inuse_allocs_increase_ -->
        <var-decl name='inuse_allocs_increase_' type-id='type-id-291' visibility='default' filepath='./src/gperftools/heap-checker.h' line='369' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- bool HeapLeakChecker::keep_profiles_ -->
        <var-decl name='keep_profiles_' type-id='type-id-61' visibility='default' filepath='./src/gperftools/heap-checker.h' line='371' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakChecker::HeapLeakChecker(const char*) -->
        <function-decl name='HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerC1EPKc' filepath='./src/gperftools/heap-checker.h' line='124' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerC1EPKc'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-292' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- HeapLeakChecker::~HeapLeakChecker(int) -->
        <function-decl name='~HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerD1Ev' filepath='./src/gperftools/heap-checker.h' line='128' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerD1Ev'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-292' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakChecker::HeapLeakChecker() -->
        <function-decl name='HeapLeakChecker' mangled-name='_ZN15HeapLeakCheckerC1Ev' filepath='./src/gperftools/heap-checker.h' line='330' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakCheckerC1Ev'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-292' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- HeapLeakChecker::HeapLeakChecker(const HeapLeakChecker&) -->
        <function-decl name='HeapLeakChecker' filepath='./src/gperftools/heap-checker.h' line='376' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'HeapLeakChecker*' -->
          <parameter type-id='type-id-292' is-artificial='yes'/>
          <!-- parameter of type 'const HeapLeakChecker&' -->
          <parameter type-id='type-id-293'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- char* HeapLeakChecker::IgnoreObject<char>() -->
        <function-decl name='IgnoreObject&lt;char&gt;' filepath='./src/gperftools/heap-checker.h' line='197' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- char* -->
          <return type-id='type-id-118'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableChecksIn() -->
        <function-decl name='DisableChecksIn' mangled-name='_ZN15HeapLeakChecker15DisableChecksInEPKc' filepath='src/heap-checker.cc' line='1514' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker15DisableChecksInEPKc'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::BeforeConstructorsLocked() -->
        <function-decl name='BeforeConstructorsLocked' mangled-name='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv' filepath='src/heap-checker.cc' line='2203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker24BeforeConstructorsLockedEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- char* HeapLeakChecker::MakeProfileNameLocked() -->
        <function-decl name='MakeProfileNameLocked' mangled-name='_ZN15HeapLeakChecker21MakeProfileNameLockedEv' filepath='src/heap-checker.cc' line='1564' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker21MakeProfileNameLockedEv'>
          <!-- implicit parameter of type 'HeapLeakChecker* const' -->
          <parameter type-id='type-id-294' name='this' is-artificial='yes'/>
          <!-- char* -->
          <return type-id='type-id-118'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableChecksFromToLocked(void*, int) -->
        <function-decl name='DisableChecksFromToLocked' mangled-name='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i' filepath='src/heap-checker.cc' line='2336' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker25DisableChecksFromToLockedEPKvS1_i'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DisableLibraryAllocsLocked(uintptr_t, uintptr_t) -->
        <function-decl name='DisableLibraryAllocsLocked' mangled-name='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm' filepath='src/heap-checker.cc' line='827' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker26DisableLibraryAllocsLockedEPKcmm'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-156'/>
          <!-- parameter of type 'typedef uintptr_t' -->
          <parameter type-id='type-id-156'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::TurnItselfOffLocked() -->
        <function-decl name='TurnItselfOffLocked' mangled-name='_ZN15HeapLeakChecker19TurnItselfOffLockedEv' filepath='src/heap-checker.cc' line='2229' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker19TurnItselfOffLockedEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreLiveObjectsLocked(const char*) -->
        <function-decl name='IgnoreLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_' filepath='src/heap-checker.cc' line='1392' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker23IgnoreLiveObjectsLockedEPKcS1_'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* HeapLeakChecker::GetAllocCaller() -->
        <function-decl name='GetAllocCaller' mangled-name='_ZN15HeapLeakChecker14GetAllocCallerEPv' filepath='src/heap-checker.cc' line='2380' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14GetAllocCallerEPv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::CancelGlobalCheck() -->
        <function-decl name='CancelGlobalCheck' mangled-name='_ZN15HeapLeakChecker17CancelGlobalCheckEv' filepath='src/heap-checker.cc' line='2193' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker17CancelGlobalCheckEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapLeakChecker* HeapLeakChecker::GlobalChecker() -->
        <function-decl name='GlobalChecker' mangled-name='_ZN15HeapLeakChecker13GlobalCheckerEv' filepath='src/heap-checker.cc' line='2181' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker13GlobalCheckerEv'>
          <!-- HeapLeakChecker* -->
          <return type-id='type-id-292'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::IsActive() -->
        <function-decl name='IsActive' mangled-name='_ZN15HeapLeakChecker8IsActiveEv' filepath='src/heap-checker.cc' line='1901' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker8IsActiveEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ssize_t HeapLeakChecker::ObjectsLeaked() -->
        <function-decl name='ObjectsLeaked' mangled-name='_ZNK15HeapLeakChecker13ObjectsLeakedEv' filepath='src/heap-checker.cc' line='1645' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK15HeapLeakChecker13ObjectsLeakedEv'>
          <!-- implicit parameter of type 'const HeapLeakChecker* const' -->
          <parameter type-id='type-id-295' name='this' is-artificial='yes'/>
          <!-- typedef ssize_t -->
          <return type-id='type-id-291'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ssize_t HeapLeakChecker::BytesLeaked() -->
        <function-decl name='BytesLeaked' mangled-name='_ZNK15HeapLeakChecker11BytesLeakedEv' filepath='src/heap-checker.cc' line='1637' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK15HeapLeakChecker11BytesLeakedEv'>
          <!-- implicit parameter of type 'const HeapLeakChecker* const' -->
          <parameter type-id='type-id-295' name='this' is-artificial='yes'/>
          <!-- typedef ssize_t -->
          <return type-id='type-id-291'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::UnIgnoreObject() -->
        <function-decl name='UnIgnoreObject' mangled-name='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv' filepath='src/heap-checker.cc' line='1539' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14UnIgnoreObjectEPKv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreNonThreadLiveObjectsLocked() -->
        <function-decl name='IgnoreNonThreadLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv' filepath='src/heap-checker.cc' line='1093' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker32IgnoreNonThreadLiveObjectsLockedEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::DoIgnoreObject() -->
        <function-decl name='DoIgnoreObject' mangled-name='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv' filepath='src/heap-checker.cc' line='1519' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker14DoIgnoreObjectEPKv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void HeapLeakChecker::Create(const char*, bool) -->
        <function-decl name='Create' mangled-name='_ZN15HeapLeakChecker6CreateEPKcb' filepath='src/heap-checker.cc' line='1576' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker6CreateEPKcb'>
          <!-- implicit parameter of type 'HeapLeakChecker* const' -->
          <parameter type-id='type-id-294' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='name' filepath='src/heap-checker.cc' line='1576' column='1'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61' name='make_start_snapshot' filepath='src/heap-checker.cc' line='1576' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- HeapLeakChecker::ProcMapsResult HeapLeakChecker::UseProcMapsLocked() -->
        <function-decl name='UseProcMapsLocked' mangled-name='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE' filepath='src/heap-checker.cc' line='892' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker17UseProcMapsLockedENS_12ProcMapsTaskE'>
          <!-- parameter of type 'enum HeapLeakChecker::ProcMapsTask' -->
          <parameter type-id='type-id-281'/>
          <!-- enum HeapLeakChecker::ProcMapsResult -->
          <return type-id='type-id-282'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int HeapLeakChecker::IgnoreLiveThreadsLocked(int, pid_t*, typedef __va_list_tag __va_list_tag*) -->
        <function-decl name='IgnoreLiveThreadsLocked' mangled-name='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag' filepath='src/heap-checker.cc' line='1021' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker23IgnoreLiveThreadsLockedEPviPiP13__va_list_tag'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'pid_t*' -->
          <parameter type-id='type-id-71'/>
          <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
          <parameter type-id='type-id-72'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapLeakChecker::IgnoreAllLiveObjectsLocked() -->
        <function-decl name='IgnoreAllLiveObjectsLocked' mangled-name='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv' filepath='src/heap-checker.cc' line='1261' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker26IgnoreAllLiveObjectsLockedEPKv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HeapLeakChecker::DoNoLeaks(HeapLeakChecker::ShouldSymbolize) -->
        <function-decl name='DoNoLeaks' mangled-name='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE' filepath='src/heap-checker.cc' line='1712' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker9DoNoLeaksENS_15ShouldSymbolizeE'>
          <!-- implicit parameter of type 'HeapLeakChecker* const' -->
          <parameter type-id='type-id-294' name='this' is-artificial='yes'/>
          <!-- parameter of type 'enum HeapLeakChecker::ShouldSymbolize' -->
          <parameter type-id='type-id-280' name='should_symbolize' filepath='src/heap-checker.cc' line='1712' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::NoGlobalLeaksMaybeSymbolize() -->
        <function-decl name='NoGlobalLeaksMaybeSymbolize' mangled-name='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE' filepath='src/heap-checker.cc' line='2141' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker27NoGlobalLeaksMaybeSymbolizeENS_15ShouldSymbolizeE'>
          <!-- parameter of type 'enum HeapLeakChecker::ShouldSymbolize' -->
          <parameter type-id='type-id-280'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::NoGlobalLeaks() -->
        <function-decl name='NoGlobalLeaks' mangled-name='_ZN15HeapLeakChecker13NoGlobalLeaksEv' filepath='src/heap-checker.cc' line='2187' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker13NoGlobalLeaksEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool HeapLeakChecker::DoMainHeapCheck() -->
        <function-decl name='DoMainHeapCheck' mangled-name='_ZN15HeapLeakChecker15DoMainHeapCheckEv' filepath='src/heap-checker.cc' line='2153' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15HeapLeakChecker15DoMainHeapCheckEv'>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- MallocExtension* HeapLeakChecker::IgnoreObject<MallocExtension>() -->
        <function-decl name='IgnoreObject&lt;MallocExtension&gt;' filepath='src/gperftools/heap-checker.h' line='197' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296'/>
          <!-- MallocExtension* -->
          <return type-id='type-id-296'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct HeapProfileBucket -->
    <class-decl name='HeapProfileBucket' size-in-bits='448' is-struct='yes' visibility='default' filepath='src/heap-profile-stats.h' line='68' column='1' id='type-id-212'>
      <!-- struct HeapProfileStats -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-180'/>
      <data-member access='public' static='yes'>
        <!-- static const int HeapProfileBucket::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-144' visibility='default' filepath='src/heap-profile-stats.h' line='70' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- uintptr_t HeapProfileBucket::hash -->
        <var-decl name='hash' type-id='type-id-156' visibility='default' filepath='src/heap-profile-stats.h' line='72' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int HeapProfileBucket::depth -->
        <var-decl name='depth' type-id='type-id-1' visibility='default' filepath='src/heap-profile-stats.h' line='73' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- void** HeapProfileBucket::stack -->
        <var-decl name='stack' type-id='type-id-151' visibility='default' filepath='src/heap-profile-stats.h' line='74' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- HeapProfileBucket* HeapProfileBucket::next -->
        <var-decl name='next' type-id='type-id-206' visibility='default' filepath='src/heap-profile-stats.h' line='75' column='1'/>
      </data-member>
    </class-decl>
    <!-- class STL_Allocator<char, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-297'>
      <member-function access='private'>
        <!-- void STL_Allocator<char, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<char, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-298' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<char, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<char, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-298' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-299'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<char, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<char, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-298' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef int RawFD -->
    <typedef-decl name='RawFD' type-id='type-id-1' filepath='./src/base/logging.h' line='251' column='1' id='type-id-75'/>
    <!-- typedef long int __intptr_t -->
    <typedef-decl name='__intptr_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='189' column='1' id='type-id-300'/>
    <!-- typedef __off_t off_t -->
    <typedef-decl name='off_t' type-id='type-id-301' filepath='/usr/include/sys/types.h' line='87' column='1' id='type-id-207'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-302'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-303' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-303' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-304'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-303' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-305'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-306' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-306' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-307'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-306' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>::STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > >(const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-306' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-304'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-308'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-309' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-309' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-310'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-309' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-311'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-312' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-312' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-313'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-312' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>::STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > >(const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-312' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-310'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;long unsigned int&gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-314'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-315' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-315' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-316'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-315' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-317'>
      <member-function access='private'>
        <!-- void STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-319'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>::STL_Allocator<std::_Rb_tree_node<long unsigned int> >(const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;long unsigned int&gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-318' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-316'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-320'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-321' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-321' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-322'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-321' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> -->
    <class-decl name='STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-323'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-324' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>::STL_Allocator(const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-324' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-325'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-324' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>::STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> > >(const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>*' -->
          <parameter type-id='type-id-324' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&' -->
          <parameter type-id='type-id-322'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef int _Atomic_word -->
    <typedef-decl name='_Atomic_word' type-id='type-id-1' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/x86_64-redhat-linux/bits/atomic_word.h' line='32' column='1' id='type-id-326'/>
    <!-- typedef std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > DisabledRangeMap -->
    <typedef-decl name='DisabledRangeMap' type-id='type-id-327' filepath='src/heap-checker.cc' line='411' column='1' id='type-id-328'/>
    <!-- typedef std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > GlobalRegionCallerRangeMap -->
    <typedef-decl name='GlobalRegionCallerRangeMap' type-id='type-id-329' filepath='src/heap-checker.cc' line='432' column='1' id='type-id-330'/>
    <!-- typedef std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > LibraryLiveObjectsStacks -->
    <typedef-decl name='LibraryLiveObjectsStacks' type-id='type-id-331' filepath='src/heap-checker.cc' line='397' column='1' id='type-id-332'/>
    <!-- typedef std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > LiveObjectsStack -->
    <typedef-decl name='LiveObjectsStack' type-id='type-id-333' filepath='src/heap-checker.cc' line='384' column='1' id='type-id-334'/>
    <!-- typedef std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > StackTopSet -->
    <typedef-decl name='StackTopSet' type-id='type-id-335' filepath='src/heap-checker.cc' line='422' column='1' id='type-id-336'/>
    <!-- typedef void (void*, typedef size_t)* MallocHook_NewHook -->
    <typedef-decl name='MallocHook_NewHook' type-id='type-id-337' filepath='./src/gperftools/malloc_hook_c.h' line='70' column='1' id='type-id-338'/>
    <!-- typedef void (void*)* MallocHook_DeleteHook -->
    <typedef-decl name='MallocHook_DeleteHook' type-id='type-id-234' filepath='./src/gperftools/malloc_hook_c.h' line='76' column='1' id='type-id-339'/>
    <!-- typedef void (void*, void*, typedef size_t, int, int, int, typedef off_t)* MallocHook_MmapHook -->
    <typedef-decl name='MallocHook_MmapHook' type-id='type-id-340' filepath='./src/gperftools/malloc_hook_c.h' line='99' column='1' id='type-id-341'/>
    <!-- typedef void (void*, typedef ptrdiff_t)* MallocHook_SbrkHook -->
    <typedef-decl name='MallocHook_SbrkHook' type-id='type-id-342' filepath='./src/gperftools/malloc_hook_c.h' line='144' column='1' id='type-id-343'/>
    <!-- class HeapCleaner -->
    <class-decl name='HeapCleaner' size-in-bits='8' visibility='default' filepath='./src/gperftools/heap-checker.h' line='403' column='1' id='type-id-344'>
      <member-type access='private'>
        <!-- typedef void ()* HeapCleaner::void_function -->
        <typedef-decl name='void_function' type-id='type-id-176' filepath='./src/gperftools/heap-checker.h' line='405' column='1' id='type-id-345'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static std::vector<void (*)(), std::allocator<void (*)()> >* HeapCleaner::heap_cleanups_ -->
        <var-decl name='heap_cleanups_' type-id='type-id-346' mangled-name='_ZN11HeapCleaner14heap_cleanups_E' visibility='default' filepath='./src/gperftools/heap-checker.h' line='409' column='1' elf-symbol-id='_ZN11HeapCleaner14heap_cleanups_E'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- HeapCleaner::HeapCleaner(HeapCleaner::void_function) -->
        <function-decl name='HeapCleaner' mangled-name='_ZN11HeapCleanerC1EPFvvE' filepath='./src/gperftools/heap-checker.h' line='406' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11HeapCleanerC1EPFvvE'>
          <!-- implicit parameter of type 'HeapCleaner*' -->
          <parameter type-id='type-id-347' is-artificial='yes'/>
          <!-- parameter of type 'typedef HeapCleaner::void_function' -->
          <parameter type-id='type-id-345'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void HeapCleaner::RunHeapCleanups() -->
        <function-decl name='RunHeapCleanups' mangled-name='_ZN11HeapCleaner15RunHeapCleanupsEv' filepath='src/heap-checker.cc' line='1917' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11HeapCleaner15RunHeapCleanupsEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- AddressMap<HeapProfileTable::AllocValue>* -->
    <pointer-type-def type-id='type-id-235' size-in-bits='64' id='type-id-265'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster* -->
    <pointer-type-def type-id='type-id-256' size-in-bits='64' id='type-id-271'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Cluster** -->
    <pointer-type-def type-id='type-id-271' size-in-bits='64' id='type-id-260'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Entry* -->
    <pointer-type-def type-id='type-id-257' size-in-bits='64' id='type-id-261'/>
    <!-- AddressMap<HeapProfileTable::AllocValue>::Object* -->
    <pointer-type-def type-id='type-id-258' size-in-bits='64' id='type-id-264'/>
    <!-- AllocObject& -->
    <reference-type-def kind='lvalue' type-id='type-id-165' size-in-bits='64' id='type-id-348'/>
    <!-- AllocObject* -->
    <pointer-type-def type-id='type-id-165' size-in-bits='64' id='type-id-167'/>
    <!-- AllocObject* const -->
    <qualified-type-def type-id='type-id-167' const='yes' id='type-id-349'/>
    <!-- AllocObject* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-349' size-in-bits='64' id='type-id-350'/>
    <!-- AllocObject*& -->
    <reference-type-def kind='lvalue' type-id='type-id-167' size-in-bits='64' id='type-id-351'/>
    <!-- DisabledRangeMap* -->
    <pointer-type-def type-id='type-id-328' size-in-bits='64' id='type-id-352'/>
    <!-- DisabledRangeMap** -->
    <pointer-type-def type-id='type-id-352' size-in-bits='64' id='type-id-285'/>
    <!-- GlobalRegionCallerRangeMap* -->
    <pointer-type-def type-id='type-id-330' size-in-bits='64' id='type-id-353'/>
    <!-- GlobalRegionCallerRangeMap** -->
    <pointer-type-def type-id='type-id-353' size-in-bits='64' id='type-id-286'/>
    <!-- GoogleInitializer* -->
    <pointer-type-def type-id='type-id-174' size-in-bits='64' id='type-id-179'/>
    <!-- HeapCleaner* -->
    <pointer-type-def type-id='type-id-344' size-in-bits='64' id='type-id-347'/>
    <!-- HeapLeakChecker* -->
    <pointer-type-def type-id='type-id-276' size-in-bits='64' id='type-id-292'/>
    <!-- HeapLeakChecker* const -->
    <qualified-type-def type-id='type-id-292' const='yes' id='type-id-294'/>
    <!-- HeapLeakChecker::Disabler* -->
    <pointer-type-def type-id='type-id-277' size-in-bits='64' id='type-id-278'/>
    <!-- HeapLeakChecker::RangeValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-283' size-in-bits='64' id='type-id-354'/>
    <!-- HeapProfileBucket* -->
    <pointer-type-def type-id='type-id-212' size-in-bits='64' id='type-id-206'/>
    <!-- HeapProfileTable* -->
    <pointer-type-def type-id='type-id-209' size-in-bits='64' id='type-id-245'/>
    <!-- HeapProfileTable** -->
    <pointer-type-def type-id='type-id-245' size-in-bits='64' id='type-id-287'/>
    <!-- HeapProfileTable::AddNonLiveArgs* -->
    <pointer-type-def type-id='type-id-231' size-in-bits='64' id='type-id-254'/>
    <!-- HeapProfileTable::AllocInfo* -->
    <pointer-type-def type-id='type-id-242' size-in-bits='64' id='type-id-255'/>
    <!-- HeapProfileTable::AllocValue* -->
    <pointer-type-def type-id='type-id-210' size-in-bits='64' id='type-id-228'/>
    <!-- HeapProfileTable::AllocValue::Bucket* -->
    <pointer-type-def type-id='type-id-211' size-in-bits='64' id='type-id-219'/>
    <!-- HeapProfileTable::AllocValue::Bucket** -->
    <pointer-type-def type-id='type-id-219' size-in-bits='64' id='type-id-243'/>
    <!-- HeapProfileTable::AllocationMap* -->
    <pointer-type-def type-id='type-id-223' size-in-bits='64' id='type-id-244'/>
    <!-- HeapProfileTable::BufferArgs* -->
    <pointer-type-def type-id='type-id-240' size-in-bits='64' id='type-id-200'/>
    <!-- HeapProfileTable::DumpArgs* -->
    <pointer-type-def type-id='type-id-213' size-in-bits='64' id='type-id-216'/>
    <!-- HeapProfileTable::DumpArgs::Stats* -->
    <pointer-type-def type-id='type-id-214' size-in-bits='64' id='type-id-215'/>
    <!-- HeapProfileTable::Snapshot* -->
    <pointer-type-def type-id='type-id-217' size-in-bits='64' id='type-id-224'/>
    <!-- HeapProfileTable::Snapshot::ReportState* -->
    <pointer-type-def type-id='type-id-221' size-in-bits='64' id='type-id-230'/>
    <!-- LibraryLiveObjectsStacks* -->
    <pointer-type-def type-id='type-id-332' size-in-bits='64' id='type-id-355'/>
    <!-- LibraryLiveObjectsStacks** -->
    <pointer-type-def type-id='type-id-355' size-in-bits='64' id='type-id-288'/>
    <!-- LiveObjectsStack* -->
    <pointer-type-def type-id='type-id-334' size-in-bits='64' id='type-id-356'/>
    <!-- LiveObjectsStack** -->
    <pointer-type-def type-id='type-id-356' size-in-bits='64' id='type-id-289'/>
    <!-- LowLevelAlloc::Arena* -->
    <pointer-type-def type-id='type-id-84' size-in-bits='64' id='type-id-83'/>
    <!-- MemoryRegionMap::LockHolder* -->
    <pointer-type-def type-id='type-id-189' size-in-bits='64' id='type-id-190'/>
    <!-- MemoryRegionMap::Region* -->
    <pointer-type-def type-id='type-id-183' size-in-bits='64' id='type-id-204'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>& -->
    <qualified-type-def type-id='type-id-357' id='type-id-358'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-168' size-in-bits='64' id='type-id-357'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-168' size-in-bits='64' id='type-id-169'/>
    <!-- STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-169' const='yes' id='type-id-359'/>
    <!-- STL_Allocator<char, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-297' size-in-bits='64' id='type-id-298'/>
    <!-- STL_Allocator<char, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-298' const='yes' id='type-id-360'/>
    <!-- STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-317' size-in-bits='64' id='type-id-318'/>
    <!-- STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-318' const='yes' id='type-id-361'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-314' size-in-bits='64' id='type-id-362'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-314' size-in-bits='64' id='type-id-315'/>
    <!-- STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-315' const='yes' id='type-id-363'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-308' size-in-bits='64' id='type-id-364'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-308' size-in-bits='64' id='type-id-309'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-309' const='yes' id='type-id-365'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-320' size-in-bits='64' id='type-id-366'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-320' size-in-bits='64' id='type-id-321'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-321' const='yes' id='type-id-367'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-302' size-in-bits='64' id='type-id-368'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-302' size-in-bits='64' id='type-id-303'/>
    <!-- STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-303' const='yes' id='type-id-369'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-311' size-in-bits='64' id='type-id-312'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-312' const='yes' id='type-id-370'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-323' size-in-bits='64' id='type-id-324'/>
    <!-- STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-324' const='yes' id='type-id-371'/>
    <!-- STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-305' size-in-bits='64' id='type-id-306'/>
    <!-- STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-306' const='yes' id='type-id-372'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-171' size-in-bits='64' id='type-id-373'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-171' size-in-bits='64' id='type-id-172'/>
    <!-- STL_Allocator<void*, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-172' const='yes' id='type-id-374'/>
    <!-- StackTopSet* -->
    <pointer-type-def type-id='type-id-336' size-in-bits='64' id='type-id-375'/>
    <!-- StackTopSet** -->
    <pointer-type-def type-id='type-id-375' size-in-bits='64' id='type-id-290'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-376' size-in-bits='64' id='type-id-377'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-376' size-in-bits='64' id='type-id-378'/>
    <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-378' const='yes' id='type-id-379'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-380' size-in-bits='64' id='type-id-381'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-380' size-in-bits='64' id='type-id-382'/>
    <!-- __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-382' const='yes' id='type-id-383'/>
    <!-- __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-384' size-in-bits='64' id='type-id-385'/>
    <!-- __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* -->
    <pointer-type-def type-id='type-id-384' size-in-bits='64' id='type-id-386'/>
    <!-- __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-387' size-in-bits='64' id='type-id-388'/>
    <!-- __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-387' size-in-bits='64' id='type-id-389'/>
    <!-- __gnu_cxx::new_allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-390' size-in-bits='64' id='type-id-391'/>
    <!-- __gnu_cxx::new_allocator<void (*)()>* const -->
    <qualified-type-def type-id='type-id-391' const='yes' id='type-id-392'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-393' size-in-bits='64' id='type-id-394'/>
    <!-- base::internal::HookList<void (*)(const void*, ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-395' size-in-bits='64' id='type-id-396'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue> -->
    <qualified-type-def type-id='type-id-235' const='yes' id='type-id-397'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue>* -->
    <pointer-type-def type-id='type-id-397' size-in-bits='64' id='type-id-266'/>
    <!-- const AllocObject -->
    <qualified-type-def type-id='type-id-165' const='yes' id='type-id-398'/>
    <!-- const AllocObject& -->
    <qualified-type-def type-id='type-id-399' id='type-id-400'/>
    <!-- const AllocObject& -->
    <reference-type-def kind='lvalue' type-id='type-id-398' size-in-bits='64' id='type-id-399'/>
    <!-- const AllocObject* -->
    <pointer-type-def type-id='type-id-398' size-in-bits='64' id='type-id-401'/>
    <!-- const AllocObject* const -->
    <qualified-type-def type-id='type-id-401' const='yes' id='type-id-402'/>
    <!-- const AllocObject* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-402' size-in-bits='64' id='type-id-403'/>
    <!-- const GoogleInitializer::VoidFunction -->
    <qualified-type-def type-id='type-id-175' const='yes' id='type-id-178'/>
    <!-- const HeapLeakChecker -->
    <qualified-type-def type-id='type-id-276' const='yes' id='type-id-404'/>
    <!-- const HeapLeakChecker& -->
    <reference-type-def kind='lvalue' type-id='type-id-404' size-in-bits='64' id='type-id-293'/>
    <!-- const HeapLeakChecker* -->
    <pointer-type-def type-id='type-id-404' size-in-bits='64' id='type-id-405'/>
    <!-- const HeapLeakChecker* const -->
    <qualified-type-def type-id='type-id-405' const='yes' id='type-id-295'/>
    <!-- const HeapLeakChecker::Disabler -->
    <qualified-type-def type-id='type-id-277' const='yes' id='type-id-406'/>
    <!-- const HeapLeakChecker::Disabler& -->
    <reference-type-def kind='lvalue' type-id='type-id-406' size-in-bits='64' id='type-id-279'/>
    <!-- const HeapLeakChecker::RangeValue -->
    <qualified-type-def type-id='type-id-283' const='yes' id='type-id-407'/>
    <!-- const HeapLeakChecker::RangeValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-407' size-in-bits='64' id='type-id-408'/>
    <!-- const HeapProfileStats -->
    <qualified-type-def type-id='type-id-180' const='yes' id='type-id-409'/>
    <!-- const HeapProfileStats& -->
    <reference-type-def kind='lvalue' type-id='type-id-409' size-in-bits='64' id='type-id-410'/>
    <!-- const HeapProfileStats* -->
    <pointer-type-def type-id='type-id-409' size-in-bits='64' id='type-id-411'/>
    <!-- const HeapProfileTable -->
    <qualified-type-def type-id='type-id-209' const='yes' id='type-id-412'/>
    <!-- const HeapProfileTable& -->
    <reference-type-def kind='lvalue' type-id='type-id-412' size-in-bits='64' id='type-id-246'/>
    <!-- const HeapProfileTable* -->
    <pointer-type-def type-id='type-id-412' size-in-bits='64' id='type-id-413'/>
    <!-- const HeapProfileTable* const -->
    <qualified-type-def type-id='type-id-413' const='yes' id='type-id-252'/>
    <!-- const HeapProfileTable::AllocContextInfo -->
    <qualified-type-def type-id='type-id-232' const='yes' id='type-id-414'/>
    <!-- const HeapProfileTable::AllocContextInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-414' size-in-bits='64' id='type-id-415'/>
    <!-- const HeapProfileTable::AllocInfo -->
    <qualified-type-def type-id='type-id-242' const='yes' id='type-id-416'/>
    <!-- const HeapProfileTable::AllocInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-416' size-in-bits='64' id='type-id-417'/>
    <!-- const HeapProfileTable::AllocValue -->
    <qualified-type-def type-id='type-id-210' const='yes' id='type-id-418'/>
    <!-- const HeapProfileTable::AllocValue& -->
    <reference-type-def kind='lvalue' type-id='type-id-418' size-in-bits='64' id='type-id-419'/>
    <!-- const HeapProfileTable::AllocValue* -->
    <pointer-type-def type-id='type-id-418' size-in-bits='64' id='type-id-420'/>
    <!-- const HeapProfileTable::AllocValue* const -->
    <qualified-type-def type-id='type-id-420' const='yes' id='type-id-421'/>
    <!-- const HeapProfileTable::AllocValue::Bucket -->
    <qualified-type-def type-id='type-id-211' const='yes' id='type-id-422'/>
    <!-- const HeapProfileTable::AllocValue::Bucket& -->
    <reference-type-def kind='lvalue' type-id='type-id-422' size-in-bits='64' id='type-id-423'/>
    <!-- const HeapProfileTable::AllocValue::Bucket* -->
    <pointer-type-def type-id='type-id-422' size-in-bits='64' id='type-id-251'/>
    <!-- const HeapProfileTable::BufferArgs -->
    <qualified-type-def type-id='type-id-240' const='yes' id='type-id-424'/>
    <!-- const HeapProfileTable::BufferArgs& -->
    <reference-type-def kind='lvalue' type-id='type-id-424' size-in-bits='64' id='type-id-241'/>
    <!-- const HeapProfileTable::DumpArgs -->
    <qualified-type-def type-id='type-id-213' const='yes' id='type-id-425'/>
    <!-- const HeapProfileTable::DumpArgs& -->
    <reference-type-def kind='lvalue' type-id='type-id-425' size-in-bits='64' id='type-id-273'/>
    <!-- const HeapProfileTable::DumpArgs::Stats -->
    <qualified-type-def type-id='type-id-214' const='yes' id='type-id-426'/>
    <!-- const HeapProfileTable::DumpArgs::Stats& -->
    <reference-type-def kind='lvalue' type-id='type-id-426' size-in-bits='64' id='type-id-427'/>
    <!-- const HeapProfileTable::Snapshot -->
    <qualified-type-def type-id='type-id-217' const='yes' id='type-id-428'/>
    <!-- const HeapProfileTable::Snapshot& -->
    <reference-type-def kind='lvalue' type-id='type-id-428' size-in-bits='64' id='type-id-227'/>
    <!-- const HeapProfileTable::Snapshot* -->
    <pointer-type-def type-id='type-id-428' size-in-bits='64' id='type-id-429'/>
    <!-- const HeapProfileTable::Snapshot* const -->
    <qualified-type-def type-id='type-id-429' const='yes' id='type-id-430'/>
    <!-- const MemoryRegionMap::LockHolder -->
    <qualified-type-def type-id='type-id-189' const='yes' id='type-id-431'/>
    <!-- const MemoryRegionMap::LockHolder& -->
    <reference-type-def kind='lvalue' type-id='type-id-431' size-in-bits='64' id='type-id-191'/>
    <!-- const MemoryRegionMap::Region -->
    <qualified-type-def type-id='type-id-183' const='yes' id='type-id-432'/>
    <!-- const MemoryRegionMap::Region& -->
    <reference-type-def kind='lvalue' type-id='type-id-432' size-in-bits='64' id='type-id-433'/>
    <!-- const MemoryRegionMap::Region* -->
    <pointer-type-def type-id='type-id-432' size-in-bits='64' id='type-id-203'/>
    <!-- const MemoryRegionMap::Region* const -->
    <qualified-type-def type-id='type-id-203' const='yes' id='type-id-434'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-168' const='yes' id='type-id-435'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-435' size-in-bits='64' id='type-id-170'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-435' size-in-bits='64' id='type-id-436'/>
    <!-- const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-436' const='yes' id='type-id-437'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-297' const='yes' id='type-id-438'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>& -->
    <qualified-type-def type-id='type-id-299' id='type-id-439'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-438' size-in-bits='64' id='type-id-299'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-438' size-in-bits='64' id='type-id-440'/>
    <!-- const STL_Allocator<char, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-440' const='yes' id='type-id-441'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-317' const='yes' id='type-id-442'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-442' size-in-bits='64' id='type-id-319'/>
    <!-- const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-442' size-in-bits='64' id='type-id-443'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-314' const='yes' id='type-id-444'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-444' size-in-bits='64' id='type-id-316'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-444' size-in-bits='64' id='type-id-445'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-308' const='yes' id='type-id-446'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-446' size-in-bits='64' id='type-id-310'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-446' size-in-bits='64' id='type-id-447'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-320' const='yes' id='type-id-448'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-448' size-in-bits='64' id='type-id-322'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-448' size-in-bits='64' id='type-id-449'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-302' const='yes' id='type-id-450'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-450' size-in-bits='64' id='type-id-304'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-450' size-in-bits='64' id='type-id-451'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-311' const='yes' id='type-id-452'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-452' size-in-bits='64' id='type-id-313'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-452' size-in-bits='64' id='type-id-453'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-323' const='yes' id='type-id-454'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-454' size-in-bits='64' id='type-id-325'/>
    <!-- const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-454' size-in-bits='64' id='type-id-455'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-305' const='yes' id='type-id-456'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-456' size-in-bits='64' id='type-id-307'/>
    <!-- const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-456' size-in-bits='64' id='type-id-457'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator> -->
    <qualified-type-def type-id='type-id-171' const='yes' id='type-id-458'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-458' size-in-bits='64' id='type-id-173'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>* -->
    <pointer-type-def type-id='type-id-458' size-in-bits='64' id='type-id-459'/>
    <!-- const STL_Allocator<void*, HeapLeakChecker::Allocator>* const -->
    <qualified-type-def type-id='type-id-459' const='yes' id='type-id-460'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-376' const='yes' id='type-id-461'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-461' size-in-bits='64' id='type-id-462'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-461' size-in-bits='64' id='type-id-463'/>
    <!-- const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-463' const='yes' id='type-id-464'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-380' const='yes' id='type-id-465'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-465' size-in-bits='64' id='type-id-466'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-465' size-in-bits='64' id='type-id-467'/>
    <!-- const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-467' const='yes' id='type-id-468'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
    <qualified-type-def type-id='type-id-384' const='yes' id='type-id-469'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-469' size-in-bits='64' id='type-id-470'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* -->
    <pointer-type-def type-id='type-id-469' size-in-bits='64' id='type-id-471'/>
    <!-- const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >* const -->
    <qualified-type-def type-id='type-id-471' const='yes' id='type-id-472'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-387' const='yes' id='type-id-473'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-473' size-in-bits='64' id='type-id-474'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-473' size-in-bits='64' id='type-id-475'/>
    <!-- const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-475' const='yes' id='type-id-476'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()> -->
    <qualified-type-def type-id='type-id-390' const='yes' id='type-id-477'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-477' size-in-bits='64' id='type-id-478'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-477' size-in-bits='64' id='type-id-479'/>
    <!-- const __gnu_cxx::new_allocator<void (*)()>* const -->
    <qualified-type-def type-id='type-id-479' const='yes' id='type-id-480'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> -->
    <qualified-type-def type-id='type-id-393' const='yes' id='type-id-481'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-481' size-in-bits='64' id='type-id-482'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-482' const='yes' id='type-id-483'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)> -->
    <qualified-type-def type-id='type-id-395' const='yes' id='type-id-484'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-484' size-in-bits='64' id='type-id-485'/>
    <!-- const base::internal::HookList<void (*)(const void*, ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-485' const='yes' id='type-id-486'/>
    <!-- const bool& -->
    <reference-type-def kind='lvalue' type-id='type-id-487' size-in-bits='64' id='type-id-488'/>
    <!-- const char* const -->
    <qualified-type-def type-id='type-id-57' const='yes' id='type-id-177'/>
    <!-- const char* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-177' size-in-bits='64' id='type-id-489'/>
    <!-- const ptrdiff_t& -->
    <qualified-type-def type-id='type-id-490' id='type-id-491'/>
    <!-- const size_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-117' size-in-bits='64' id='type-id-492'/>
    <!-- const std::_Identity<long unsigned int> -->
    <qualified-type-def type-id='type-id-493' const='yes' id='type-id-494'/>
    <!-- const std::_Identity<long unsigned int>* -->
    <pointer-type-def type-id='type-id-494' size-in-bits='64' id='type-id-495'/>
    <!-- const std::_Identity<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-495' const='yes' id='type-id-496'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-497' const='yes' id='type-id-498'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-498' size-in-bits='64' id='type-id-499'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-498' size-in-bits='64' id='type-id-500'/>
    <!-- const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-500' const='yes' id='type-id-501'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-502' const='yes' id='type-id-503'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-503' size-in-bits='64' id='type-id-504'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-503' size-in-bits='64' id='type-id-505'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-505' const='yes' id='type-id-506'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-507' const='yes' id='type-id-508'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-508' size-in-bits='64' id='type-id-509'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-508' size-in-bits='64' id='type-id-510'/>
    <!-- const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-510' const='yes' id='type-id-511'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-512' const='yes' id='type-id-513'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-513' size-in-bits='64' id='type-id-514'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-513' size-in-bits='64' id='type-id-515'/>
    <!-- const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-515' const='yes' id='type-id-516'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-193' const='yes' id='type-id-517'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>& -->
    <qualified-type-def type-id='type-id-518' id='type-id-519'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-517' size-in-bits='64' id='type-id-518'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-517' size-in-bits='64' id='type-id-520'/>
    <!-- const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-520' const='yes' id='type-id-521'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int> -->
    <qualified-type-def type-id='type-id-522' const='yes' id='type-id-523'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>& -->
    <qualified-type-def type-id='type-id-524' id='type-id-525'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-523' size-in-bits='64' id='type-id-524'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-523' size-in-bits='64' id='type-id-526'/>
    <!-- const std::_Rb_tree_const_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-526' const='yes' id='type-id-527'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-528' const='yes' id='type-id-529'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <qualified-type-def type-id='type-id-530' id='type-id-531'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-529' size-in-bits='64' id='type-id-530'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-529' size-in-bits='64' id='type-id-532'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-532' const='yes' id='type-id-533'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-534' const='yes' id='type-id-535'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <qualified-type-def type-id='type-id-536' id='type-id-537'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-535' size-in-bits='64' id='type-id-536'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-535' size-in-bits='64' id='type-id-538'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-538' const='yes' id='type-id-539'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-540' const='yes' id='type-id-541'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-541' size-in-bits='64' id='type-id-542'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-541' size-in-bits='64' id='type-id-543'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-544' const='yes' id='type-id-545'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-545' size-in-bits='64' id='type-id-546'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int> -->
    <qualified-type-def type-id='type-id-547' const='yes' id='type-id-548'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>& -->
    <qualified-type-def type-id='type-id-549' id='type-id-550'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-548' size-in-bits='64' id='type-id-549'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-548' size-in-bits='64' id='type-id-551'/>
    <!-- const std::_Rb_tree_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-551' const='yes' id='type-id-552'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-553' const='yes' id='type-id-554'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <qualified-type-def type-id='type-id-555' id='type-id-556'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-554' size-in-bits='64' id='type-id-555'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-554' size-in-bits='64' id='type-id-557'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-557' const='yes' id='type-id-558'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-559' const='yes' id='type-id-560'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <qualified-type-def type-id='type-id-561' id='type-id-562'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-560' size-in-bits='64' id='type-id-561'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-560' size-in-bits='64' id='type-id-563'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-563' const='yes' id='type-id-564'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-565' const='yes' id='type-id-566'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <qualified-type-def type-id='type-id-567' id='type-id-568'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-566' size-in-bits='64' id='type-id-567'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-566' size-in-bits='64' id='type-id-569'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-569' const='yes' id='type-id-570'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-571' const='yes' id='type-id-572'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-572' size-in-bits='64' id='type-id-573'/>
    <!-- const std::_Rb_tree_node<long unsigned int> -->
    <qualified-type-def type-id='type-id-574' const='yes' id='type-id-575'/>
    <!-- const std::_Rb_tree_node<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-575' size-in-bits='64' id='type-id-576'/>
    <!-- const std::_Rb_tree_node<long unsigned int>* -->
    <pointer-type-def type-id='type-id-575' size-in-bits='64' id='type-id-577'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-578' const='yes' id='type-id-579'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-579' size-in-bits='64' id='type-id-580'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-579' size-in-bits='64' id='type-id-581'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-582' const='yes' id='type-id-583'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-583' size-in-bits='64' id='type-id-584'/>
    <!-- const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-583' size-in-bits='64' id='type-id-585'/>
    <!-- const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-586' const='yes' id='type-id-587'/>
    <!-- const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-587' size-in-bits='64' id='type-id-588'/>
    <!-- const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-587' size-in-bits='64' id='type-id-589'/>
    <!-- const std::_Rb_tree_node_base -->
    <qualified-type-def type-id='type-id-590' const='yes' id='type-id-591'/>
    <!-- const std::_Rb_tree_node_base* -->
    <pointer-type-def type-id='type-id-591' size-in-bits='64' id='type-id-592'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
    <qualified-type-def type-id='type-id-593' const='yes' id='type-id-594'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-594' size-in-bits='64' id='type-id-595'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-595' const='yes' id='type-id-596'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> > -->
    <qualified-type-def type-id='type-id-597' const='yes' id='type-id-598'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-598' size-in-bits='64' id='type-id-599'/>
    <!-- const std::_Select1st<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-599' const='yes' id='type-id-600'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
    <qualified-type-def type-id='type-id-601' const='yes' id='type-id-602'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-602' size-in-bits='64' id='type-id-603'/>
    <!-- const std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-603' const='yes' id='type-id-604'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-605' const='yes' id='type-id-606'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-606' size-in-bits='64' id='type-id-607'/>
    <!-- const std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-607' const='yes' id='type-id-608'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
    <qualified-type-def type-id='type-id-609' const='yes' id='type-id-610'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-610' size-in-bits='64' id='type-id-611'/>
    <!-- const std::_Vector_base<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-611' const='yes' id='type-id-612'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-613' const='yes' id='type-id-614'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-614' size-in-bits='64' id='type-id-615'/>
    <!-- const std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-615' const='yes' id='type-id-616'/>
    <!-- const std::allocator<char>& -->
    <qualified-type-def type-id='type-id-617' id='type-id-618'/>
    <!-- const std::allocator<void (*)()> -->
    <qualified-type-def type-id='type-id-619' const='yes' id='type-id-620'/>
    <!-- const std::allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-620' size-in-bits='64' id='type-id-621'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-622' const='yes' id='type-id-623'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >& -->
    <qualified-type-def type-id='type-id-624' id='type-id-625'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-623' size-in-bits='64' id='type-id-624'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-623' size-in-bits='64' id='type-id-626'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-626' const='yes' id='type-id-627'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep -->
    <qualified-type-def type-id='type-id-628' const='yes' id='type-id-629'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
    <pointer-type-def type-id='type-id-629' size-in-bits='64' id='type-id-630'/>
    <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* const -->
    <qualified-type-def type-id='type-id-630' const='yes' id='type-id-631'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <qualified-type-def type-id='type-id-632' id='type-id-633'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >* const -->
    <qualified-type-def type-id='type-id-634' const='yes' id='type-id-635'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep -->
    <qualified-type-def type-id='type-id-636' const='yes' id='type-id-637'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* -->
    <pointer-type-def type-id='type-id-637' size-in-bits='64' id='type-id-638'/>
    <!-- const std::char_traits<char>::char_type -->
    <qualified-type-def type-id='type-id-639' const='yes' id='type-id-640'/>
    <!-- const std::char_traits<char>::char_type& -->
    <qualified-type-def type-id='type-id-641' id='type-id-642'/>
    <!-- const std::char_traits<char>::char_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-640' size-in-bits='64' id='type-id-641'/>
    <!-- const std::char_traits<char>::char_type* -->
    <pointer-type-def type-id='type-id-640' size-in-bits='64' id='type-id-643'/>
    <!-- const std::char_traits<char>::int_type -->
    <qualified-type-def type-id='type-id-644' const='yes' id='type-id-645'/>
    <!-- const std::char_traits<char>::int_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-645' size-in-bits='64' id='type-id-646'/>
    <!-- const std::less<long unsigned int> -->
    <qualified-type-def type-id='type-id-647' const='yes' id='type-id-648'/>
    <!-- const std::less<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-648' size-in-bits='64' id='type-id-649'/>
    <!-- const std::less<long unsigned int>* -->
    <pointer-type-def type-id='type-id-648' size-in-bits='64' id='type-id-650'/>
    <!-- const std::less<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-650' const='yes' id='type-id-651'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-652' const='yes' id='type-id-653'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-653' size-in-bits='64' id='type-id-654'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-653' size-in-bits='64' id='type-id-655'/>
    <!-- const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >* const -->
    <qualified-type-def type-id='type-id-655' const='yes' id='type-id-656'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-327' const='yes' id='type-id-657'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-657' size-in-bits='64' id='type-id-658'/>
    <!-- const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-657' size-in-bits='64' id='type-id-659'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-329' const='yes' id='type-id-660'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-660' size-in-bits='64' id='type-id-661'/>
    <!-- const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-660' size-in-bits='64' id='type-id-662'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-331' const='yes' id='type-id-663'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-663' size-in-bits='64' id='type-id-664'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-663' size-in-bits='64' id='type-id-665'/>
    <!-- const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-665' const='yes' id='type-id-666'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue> -->
    <qualified-type-def type-id='type-id-667' const='yes' id='type-id-668'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>& -->
    <qualified-type-def type-id='type-id-669' id='type-id-670'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-668' size-in-bits='64' id='type-id-669'/>
    <!-- const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-668' size-in-bits='64' id='type-id-671'/>
    <!-- const std::pair<const long unsigned int, long unsigned int> -->
    <qualified-type-def type-id='type-id-672' const='yes' id='type-id-673'/>
    <!-- const std::pair<const long unsigned int, long unsigned int>& -->
    <qualified-type-def type-id='type-id-674' id='type-id-675'/>
    <!-- const std::pair<const long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-673' size-in-bits='64' id='type-id-674'/>
    <!-- const std::pair<const long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-673' size-in-bits='64' id='type-id-676'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
    <qualified-type-def type-id='type-id-677' const='yes' id='type-id-678'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <qualified-type-def type-id='type-id-679' id='type-id-680'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-678' size-in-bits='64' id='type-id-679'/>
    <!-- const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-678' size-in-bits='64' id='type-id-681'/>
    <!-- const std::pair<long unsigned int, HeapLeakChecker::RangeValue> -->
    <qualified-type-def type-id='type-id-682' const='yes' id='type-id-683'/>
    <!-- const std::pair<long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-683' size-in-bits='64' id='type-id-684'/>
    <!-- const std::pair<long unsigned int, long unsigned int> -->
    <qualified-type-def type-id='type-id-685' const='yes' id='type-id-686'/>
    <!-- const std::pair<long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-686' size-in-bits='64' id='type-id-687'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-335' const='yes' id='type-id-688'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-688' size-in-bits='64' id='type-id-689'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-688' size-in-bits='64' id='type-id-690'/>
    <!-- const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-690' const='yes' id='type-id-691'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-333' const='yes' id='type-id-692'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-692' size-in-bits='64' id='type-id-693'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-692' size-in-bits='64' id='type-id-694'/>
    <!-- const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-694' const='yes' id='type-id-695'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> > -->
    <qualified-type-def type-id='type-id-696' const='yes' id='type-id-697'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-697' size-in-bits='64' id='type-id-698'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-697' size-in-bits='64' id='type-id-699'/>
    <!-- const std::vector<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-699' const='yes' id='type-id-700'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
    <qualified-type-def type-id='type-id-701' const='yes' id='type-id-702'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-702' size-in-bits='64' id='type-id-703'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-702' size-in-bits='64' id='type-id-704'/>
    <!-- const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-704' const='yes' id='type-id-705'/>
    <!-- const uint32_t -->
    <qualified-type-def type-id='type-id-12' const='yes' id='type-id-262'/>
    <!-- const unsigned long int& -->
    <qualified-type-def type-id='type-id-706' id='type-id-707'/>
    <!-- const unsigned long int* -->
    <pointer-type-def type-id='type-id-708' size-in-bits='64' id='type-id-709'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-497' size-in-bits='64' id='type-id-710'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-497' size-in-bits='64' id='type-id-711'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-711' const='yes' id='type-id-712'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-713' size-in-bits='64' id='type-id-714'/>
    <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-714' const='yes' id='type-id-715'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-502' size-in-bits='64' id='type-id-716'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-502' size-in-bits='64' id='type-id-717'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-717' const='yes' id='type-id-718'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-719' size-in-bits='64' id='type-id-720'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-720' const='yes' id='type-id-721'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-507' size-in-bits='64' id='type-id-722'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-507' size-in-bits='64' id='type-id-723'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-723' const='yes' id='type-id-724'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* -->
    <pointer-type-def type-id='type-id-725' size-in-bits='64' id='type-id-726'/>
    <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>* const -->
    <qualified-type-def type-id='type-id-726' const='yes' id='type-id-727'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-512' size-in-bits='64' id='type-id-728'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-512' size-in-bits='64' id='type-id-729'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-729' const='yes' id='type-id-730'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>* -->
    <pointer-type-def type-id='type-id-731' size-in-bits='64' id='type-id-732'/>
    <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>* const -->
    <qualified-type-def type-id='type-id-732' const='yes' id='type-id-733'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-193' size-in-bits='64' id='type-id-734'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-193' size-in-bits='64' id='type-id-735'/>
    <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-735' const='yes' id='type-id-736'/>
    <!-- std::_Rb_tree_const_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-522' size-in-bits='64' id='type-id-737'/>
    <!-- std::_Rb_tree_const_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-522' size-in-bits='64' id='type-id-738'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-528' size-in-bits='64' id='type-id-739'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-528' size-in-bits='64' id='type-id-740'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-534' size-in-bits='64' id='type-id-741'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-534' size-in-bits='64' id='type-id-742'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-742' const='yes' id='type-id-743'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-540' size-in-bits='64' id='type-id-744'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-540' size-in-bits='64' id='type-id-745'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-745' const='yes' id='type-id-746'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-547' size-in-bits='64' id='type-id-747'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>* -->
    <pointer-type-def type-id='type-id-547' size-in-bits='64' id='type-id-748'/>
    <!-- std::_Rb_tree_iterator<long unsigned int>* const -->
    <qualified-type-def type-id='type-id-748' const='yes' id='type-id-749'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-553' size-in-bits='64' id='type-id-750'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-553' size-in-bits='64' id='type-id-751'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* const -->
    <qualified-type-def type-id='type-id-751' const='yes' id='type-id-752'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-559' size-in-bits='64' id='type-id-753'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-559' size-in-bits='64' id='type-id-754'/>
    <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >* const -->
    <qualified-type-def type-id='type-id-754' const='yes' id='type-id-755'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-565' size-in-bits='64' id='type-id-756'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-565' size-in-bits='64' id='type-id-757'/>
    <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* const -->
    <qualified-type-def type-id='type-id-757' const='yes' id='type-id-758'/>
    <!-- std::_Rb_tree_node<long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-574' size-in-bits='64' id='type-id-759'/>
    <!-- std::_Rb_tree_node<long unsigned int>* -->
    <pointer-type-def type-id='type-id-574' size-in-bits='64' id='type-id-760'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-578' size-in-bits='64' id='type-id-761'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >* -->
    <pointer-type-def type-id='type-id-578' size-in-bits='64' id='type-id-762'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-582' size-in-bits='64' id='type-id-763'/>
    <!-- std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >* -->
    <pointer-type-def type-id='type-id-582' size-in-bits='64' id='type-id-764'/>
    <!-- std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-586' size-in-bits='64' id='type-id-765'/>
    <!-- std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >* -->
    <pointer-type-def type-id='type-id-586' size-in-bits='64' id='type-id-766'/>
    <!-- std::_Rb_tree_node_base* -->
    <pointer-type-def type-id='type-id-590' size-in-bits='64' id='type-id-767'/>
    <!-- std::_Rb_tree_node_base*& -->
    <reference-type-def kind='lvalue' type-id='type-id-767' size-in-bits='64' id='type-id-768'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-605' size-in-bits='64' id='type-id-769'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-769' const='yes' id='type-id-770'/>
    <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-771' size-in-bits='64' id='type-id-772'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-609' size-in-bits='64' id='type-id-773'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-773' const='yes' id='type-id-774'/>
    <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-775' size-in-bits='64' id='type-id-776'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-613' size-in-bits='64' id='type-id-777'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-777' const='yes' id='type-id-778'/>
    <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-779' size-in-bits='64' id='type-id-780'/>
    <!-- std::allocator<void (*)()>& -->
    <reference-type-def kind='lvalue' type-id='type-id-619' size-in-bits='64' id='type-id-781'/>
    <!-- std::allocator<void (*)()>* -->
    <pointer-type-def type-id='type-id-619' size-in-bits='64' id='type-id-782'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-622' size-in-bits='64' id='type-id-783'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-622' size-in-bits='64' id='type-id-784'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider* -->
    <pointer-type-def type-id='type-id-785' size-in-bits='64' id='type-id-786'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep& -->
    <reference-type-def kind='lvalue' type-id='type-id-628' size-in-bits='64' id='type-id-787'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
    <pointer-type-def type-id='type-id-628' size-in-bits='64' id='type-id-788'/>
    <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* const -->
    <qualified-type-def type-id='type-id-788' const='yes' id='type-id-789'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >* const -->
    <qualified-type-def type-id='type-id-790' const='yes' id='type-id-791'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* const -->
    <qualified-type-def type-id='type-id-792' const='yes' id='type-id-793'/>
    <!-- std::char_traits<char>::char_type& -->
    <qualified-type-def type-id='type-id-794' id='type-id-795'/>
    <!-- std::char_traits<char>::char_type& -->
    <reference-type-def kind='lvalue' type-id='type-id-639' size-in-bits='64' id='type-id-794'/>
    <!-- std::char_traits<char>::char_type* -->
    <pointer-type-def type-id='type-id-639' size-in-bits='64' id='type-id-796'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-327' size-in-bits='64' id='type-id-797'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-327' size-in-bits='64' id='type-id-798'/>
    <!-- std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-798' const='yes' id='type-id-799'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-329' size-in-bits='64' id='type-id-800'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-329' size-in-bits='64' id='type-id-801'/>
    <!-- std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-801' const='yes' id='type-id-802'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-331' size-in-bits='64' id='type-id-803'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-331' size-in-bits='64' id='type-id-804'/>
    <!-- std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-804' const='yes' id='type-id-805'/>
    <!-- std::pair<const long unsigned int, HeapLeakChecker::RangeValue>& -->
    <reference-type-def kind='lvalue' type-id='type-id-667' size-in-bits='64' id='type-id-806'/>
    <!-- std::pair<const long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-667' size-in-bits='64' id='type-id-807'/>
    <!-- std::pair<const long unsigned int, long unsigned int>& -->
    <reference-type-def kind='lvalue' type-id='type-id-672' size-in-bits='64' id='type-id-808'/>
    <!-- std::pair<const long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-672' size-in-bits='64' id='type-id-809'/>
    <!-- std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-677' size-in-bits='64' id='type-id-810'/>
    <!-- std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >* -->
    <pointer-type-def type-id='type-id-677' size-in-bits='64' id='type-id-811'/>
    <!-- std::pair<long unsigned int, HeapLeakChecker::RangeValue>* -->
    <pointer-type-def type-id='type-id-682' size-in-bits='64' id='type-id-812'/>
    <!-- std::pair<long unsigned int, long unsigned int>* -->
    <pointer-type-def type-id='type-id-685' size-in-bits='64' id='type-id-813'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>* -->
    <pointer-type-def type-id='type-id-814' size-in-bits='64' id='type-id-815'/>
    <!-- std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>* -->
    <pointer-type-def type-id='type-id-816' size-in-bits='64' id='type-id-817'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>* -->
    <pointer-type-def type-id='type-id-818' size-in-bits='64' id='type-id-819'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>* -->
    <pointer-type-def type-id='type-id-820' size-in-bits='64' id='type-id-821'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>* -->
    <pointer-type-def type-id='type-id-822' size-in-bits='64' id='type-id-823'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-335' size-in-bits='64' id='type-id-824'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-335' size-in-bits='64' id='type-id-825'/>
    <!-- std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-825' const='yes' id='type-id-826'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >& -->
    <qualified-type-def type-id='type-id-827' id='type-id-828'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-333' size-in-bits='64' id='type-id-827'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-333' size-in-bits='64' id='type-id-829'/>
    <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-829' const='yes' id='type-id-830'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-696' size-in-bits='64' id='type-id-831'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >* -->
    <pointer-type-def type-id='type-id-696' size-in-bits='64' id='type-id-346'/>
    <!-- std::vector<void (*)(), std::allocator<void (*)()> >* const -->
    <qualified-type-def type-id='type-id-346' const='yes' id='type-id-832'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-701' size-in-bits='64' id='type-id-833'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* -->
    <pointer-type-def type-id='type-id-701' size-in-bits='64' id='type-id-834'/>
    <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const -->
    <qualified-type-def type-id='type-id-834' const='yes' id='type-id-835'/>
    <!-- typedef size_t (const HeapProfileTable::AllocValue&)* -->
    <pointer-type-def type-id='type-id-836' size-in-bits='64' id='type-id-837'/>
    <!-- unsigned long int& -->
    <reference-type-def kind='lvalue' type-id='type-id-5' size-in-bits='64' id='type-id-838'/>
    <!-- unsigned long int* -->
    <pointer-type-def type-id='type-id-5' size-in-bits='64' id='type-id-839'/>
    <!-- void ()* const -->
    <qualified-type-def type-id='type-id-176' const='yes' id='type-id-840'/>
    <!-- void ()* const& -->
    <qualified-type-def type-id='type-id-841' id='type-id-842'/>
    <!-- void ()* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-840' size-in-bits='64' id='type-id-841'/>
    <!-- void ()* const* -->
    <pointer-type-def type-id='type-id-840' size-in-bits='64' id='type-id-843'/>
    <!-- void ()*& -->
    <reference-type-def kind='lvalue' type-id='type-id-176' size-in-bits='64' id='type-id-844'/>
    <!-- void ()** -->
    <pointer-type-def type-id='type-id-176' size-in-bits='64' id='type-id-845'/>
    <!-- void ()** const -->
    <qualified-type-def type-id='type-id-845' const='yes' id='type-id-846'/>
    <!-- void ()** const& -->
    <reference-type-def kind='lvalue' type-id='type-id-846' size-in-bits='64' id='type-id-847'/>
    <!-- void (const HeapProfileTable::AllocContextInfo&)* -->
    <pointer-type-def type-id='type-id-848' size-in-bits='64' id='type-id-239'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, void (void*, const HeapProfileTable::AllocInfo&)*)* -->
    <pointer-type-def type-id='type-id-849' size-in-bits='64' id='type-id-267'/>
    <!-- void (void*, const HeapProfileTable::AllocInfo&)* -->
    <pointer-type-def type-id='type-id-850' size-in-bits='64' id='type-id-237'/>
    <!-- void (void*, typedef ptrdiff_t)* -->
    <pointer-type-def type-id='type-id-851' size-in-bits='64' id='type-id-342'/>
    <!-- void (void*, typedef ptrdiff_t)** -->
    <pointer-type-def type-id='type-id-342' size-in-bits='64' id='type-id-852'/>
    <!-- void (void*, void*, typedef size_t, int, int, int, typedef off_t)* -->
    <pointer-type-def type-id='type-id-853' size-in-bits='64' id='type-id-340'/>
    <!-- void (void*, void*, typedef size_t, int, int, int, typedef off_t)** -->
    <pointer-type-def type-id='type-id-340' size-in-bits='64' id='type-id-854'/>
    <!-- void* (typedef size_t)* -->
    <pointer-type-def type-id='type-id-855' size-in-bits='64' id='type-id-233'/>
    <!-- void* const -->
    <qualified-type-def type-id='type-id-58' const='yes' id='type-id-59'/>
    <!-- void* const& -->
    <qualified-type-def type-id='type-id-856' id='type-id-857'/>
    <!-- void* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-59' size-in-bits='64' id='type-id-856'/>
    <!-- void* const* -->
    <pointer-type-def type-id='type-id-59' size-in-bits='64' id='type-id-205'/>
    <!-- void*& -->
    <reference-type-def kind='lvalue' type-id='type-id-58' size-in-bits='64' id='type-id-858'/>
    <!-- void** const -->
    <qualified-type-def type-id='type-id-151' const='yes' id='type-id-859'/>
    <!-- void** const& -->
    <reference-type-def kind='lvalue' type-id='type-id-859' size-in-bits='64' id='type-id-860'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- struct std::random_access_iterator_tag -->
      <class-decl name='random_access_iterator_tag' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='89' column='1' id='type-id-861'>
        <!-- struct std::bidirectional_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-862'/>
      </class-decl>
      <!-- struct std::bidirectional_iterator_tag -->
      <class-decl name='bidirectional_iterator_tag' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='86' column='1' id='type-id-862'>
        <!-- struct std::forward_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-863'/>
      </class-decl>
      <!-- struct std::forward_iterator_tag -->
      <class-decl name='forward_iterator_tag' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='83' column='1' id='type-id-863'>
        <!-- struct std::input_iterator_tag -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-864'/>
      </class-decl>
      <!-- struct std::input_iterator_tag -->
      <class-decl name='input_iterator_tag' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='79' column='1' id='type-id-864'/>
      <!-- struct std::pair<long unsigned int, HeapLeakChecker::RangeValue> -->
      <class-decl name='pair&lt;long unsigned int, HeapLeakChecker::RangeValue&gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-682'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned long int std::pair<long unsigned int, HeapLeakChecker::RangeValue>::first -->
          <var-decl name='first' type-id='type-id-5' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapLeakChecker::RangeValue std::pair<long unsigned int, HeapLeakChecker::RangeValue>::second -->
          <var-decl name='second' type-id='type-id-283' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<long unsigned int, HeapLeakChecker::RangeValue>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<long unsigned int, HeapLeakChecker::RangeValue>*' -->
            <parameter type-id='type-id-812' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<long unsigned int, HeapLeakChecker::RangeValue>::pair(const unsigned long int&, const HeapLeakChecker::RangeValue&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<long unsigned int, HeapLeakChecker::RangeValue>*' -->
            <parameter type-id='type-id-812' is-artificial='yes'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- parameter of type 'const HeapLeakChecker::RangeValue&' -->
            <parameter type-id='type-id-408'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_node_base -->
      <class-decl name='_Rb_tree_node_base' size-in-bits='256' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='88' column='1' id='type-id-590'>
        <member-type access='public'>
          <!-- typedef std::_Rb_tree_node_base* std::_Rb_tree_node_base::_Base_ptr -->
          <typedef-decl name='_Base_ptr' type-id='type-id-767' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='89' column='1' id='type-id-865'/>
        </member-type>
        <member-type access='public'>
          <!-- typedef const std::_Rb_tree_node_base* std::_Rb_tree_node_base::_Const_Base_ptr -->
          <typedef-decl name='_Const_Base_ptr' type-id='type-id-592' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='90' column='1' id='type-id-866'/>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_color std::_Rb_tree_node_base::_M_color -->
          <var-decl name='_M_color' type-id='type-id-867' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='92' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_parent -->
          <var-decl name='_M_parent' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='93' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_left -->
          <var-decl name='_M_left' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='94' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_node_base::_M_right -->
          <var-decl name='_M_right' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='95' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::allocator<void (*)()> -->
      <class-decl name='allocator&lt;void (*)()&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-619'>
        <!-- class __gnu_cxx::new_allocator<void (*)()> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-390'/>
        <member-function access='private'>
          <!-- void std::allocator<void (*)()>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<void (*)()>*' -->
            <parameter type-id='type-id-782' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<void (*)()>::allocator(const std::allocator<void (*)()>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<void (*)()>*' -->
            <parameter type-id='type-id-782' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<void (*)()>&' -->
            <parameter type-id='type-id-621'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<void (*)()>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<void (*)()>*' -->
            <parameter type-id='type-id-782' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-193'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<MemoryRegionMap::Region>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<MemoryRegionMap::Region>::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-735' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<MemoryRegionMap::Region>::_Rb_tree_const_iterator(const std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-735' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-573'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<MemoryRegionMap::Region>::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<MemoryRegionMap::Region>&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-735' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<MemoryRegionMap::Region>&' -->
            <parameter type-id='type-id-546'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<long unsigned int, long unsigned int> -->
      <class-decl name='pair&lt;long unsigned int, long unsigned int&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-685'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned long int std::pair<long unsigned int, long unsigned int>::first -->
          <var-decl name='first' type-id='type-id-5' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- unsigned long int std::pair<long unsigned int, long unsigned int>::second -->
          <var-decl name='second' type-id='type-id-5' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<long unsigned int, long unsigned int>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<long unsigned int, long unsigned int>*' -->
            <parameter type-id='type-id-813' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<long unsigned int, long unsigned int>::pair(const unsigned long int&, const unsigned long int&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<long unsigned int, long unsigned int>*' -->
            <parameter type-id='type-id-813' is-artificial='yes'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-544'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<MemoryRegionMap::Region>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<MemoryRegionMap::Region>::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-868' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<MemoryRegionMap::Region>::_Rb_tree_iterator(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-868' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-869'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<void**, false> -->
      <class-decl name='__niter_base&lt;void**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-870'/>
      <!-- struct std::__miter_base<void**, false> -->
      <class-decl name='__miter_base&lt;void**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-871'/>
      <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Vector_base&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' id='type-id-605'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl -->
          <class-decl name='_Vector_impl' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' id='type-id-771'>
            <!-- class STL_Allocator<AllocObject, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-168'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-167' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-167' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- AllocObject* std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-167' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_Vector_impl() -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl*' -->
                <parameter type-id='type-id-772' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl::_Vector_impl(const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl*' -->
                <parameter type-id='type-id-772' is-artificial='yes'/>
                <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-170'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_impl std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-771' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_base() -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='104' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-769' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_base(const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-769' is-artificial='yes'/>
            <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-170'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_Vector_base(unsigned long int, const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-769' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-170'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::~_Vector_base(int) -->
          <function-decl name='~_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-769' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__alloc_swap<STL_Allocator<AllocObject, HeapLeakChecker::Allocator>, true> -->
      <class-decl name='__alloc_swap&lt;STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt;, true&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='148' column='1' id='type-id-872'/>
      <!-- class std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='105' column='1' id='type-id-622'>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider -->
          <class-decl name='_Alloc_hider' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='258' column='1' id='type-id-785'>
            <!-- class STL_Allocator<char, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-297'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- char* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider::_M_p -->
              <var-decl name='_M_p' type-id='type-id-118' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='262' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider::_Alloc_hider(char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Alloc_hider' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='259' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider*' -->
                <parameter type-id='type-id-786' is-artificial='yes'/>
                <!-- parameter of type 'char*' -->
                <parameter type-id='type-id-118'/>
                <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-299'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep -->
          <class-decl name='_Rep' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='148' column='1' id='type-id-628'>
            <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-873'/>
            <data-member access='public' static='yes'>
              <!-- static const size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_max_size -->
              <var-decl name='_S_max_size' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='51' column='1'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static const char std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_terminal -->
              <var-decl name='_S_terminal' type-id='type-id-63' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='56' column='1' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep11_S_terminalE'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_empty_rep_storage[4] -->
              <var-decl name='_S_empty_rep_storage' type-id='type-id-161' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='68' column='1' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep20_S_empty_rep_storageE'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_M_destroy(const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_M_destroy' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='445' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep10_M_destroyERKS4_'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* const' -->
                <parameter type-id='type-id-789' name='this' is-artificial='yes'/>
                <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-439' name='__a' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='229' column='1'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' static='yes'>
              <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep::_S_create(size_t, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_S_create' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='546' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEE4_Rep9_S_createEmmRKS4_'>
                <!-- parameter of type 'typedef size_t' -->
                <parameter type-id='type-id-62' name='__capacity' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='547' column='1'/>
                <!-- parameter of type 'typedef size_t' -->
                <parameter type-id='type-id-62' name='__old_capacity' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='547' column='1'/>
                <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-439' name='__alloc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='548' column='1'/>
                <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep* -->
                <return type-id='type-id-788'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base -->
          <class-decl name='_Rep_base' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='141' column='1' id='type-id-873'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base::_M_length -->
              <var-decl name='_M_length' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='142' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base::_M_capacity -->
              <var-decl name='_M_capacity' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='143' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- _Atomic_word std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Rep_base::_M_refcount -->
              <var-decl name='_M_refcount' type-id='type-id-326' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='144' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='private' static='yes'>
          <!-- static const size_t std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::npos -->
          <var-decl name='npos' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='270' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_Alloc_hider std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_M_dataplus -->
          <var-decl name='_M_dataplus' type-id='type-id-785' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='274' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string() -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2144' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='178' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='170' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC1ERKS5_'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-624'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&, unsigned long int, unsigned long int) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='184' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-624'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&, unsigned long int, unsigned long int, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='194' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-624'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const char*, unsigned long int, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='206' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(const char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='213' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEEC2EPKcRKS4_'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::basic_string(unsigned long int, char, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='220' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'char' -->
            <parameter type-id='type-id-65'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::~basic_string(int) -->
          <function-decl name='~basic_string' mangled-name='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='502' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEED1Ev'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-784' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- char* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_S_construct<const char*>(const char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&, std::forward_iterator_tag) -->
          <function-decl name='_S_construct&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='123' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- parameter of type 'struct std::forward_iterator_tag' -->
            <parameter type-id='type-id-863'/>
            <!-- char* -->
            <return type-id='type-id-118'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- char* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_S_construct_aux<const char*>(const char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&, std::__false_type) -->
          <function-decl name='_S_construct_aux&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='1539' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- parameter of type 'struct std::__false_type' -->
            <parameter type-id='type-id-874'/>
            <!-- char* -->
            <return type-id='type-id-118'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- char* std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >::_S_construct<const char*>(const char*, const STL_Allocator<char, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_S_construct&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='1556' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const STL_Allocator<char, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-299'/>
            <!-- char* -->
            <return type-id='type-id-118'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__copy_move_backward<false, false, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, false, std::random_access_iterator_tag&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='539' column='1' id='type-id-875'>
        <member-function access='public' static='yes'>
          <!-- AllocObject* std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<AllocObject*, AllocObject*>(AllocObject*, AllocObject*) -->
          <function-decl name='__copy_move_b&lt;AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='542' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- AllocObject* -->
            <return type-id='type-id-167'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- HeapProfileTable::Snapshot::Entry* std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
          <function-decl name='__copy_move_b&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='542' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
            <parameter type-id='type-id-220'/>
            <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
            <parameter type-id='type-id-220'/>
            <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
            <parameter type-id='type-id-220'/>
            <!-- HeapProfileTable::Snapshot::Entry* -->
            <return type-id='type-id-220'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__false_type -->
      <class-decl name='__false_type' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/cpp_type_traits.h' line='79' column='1' id='type-id-874'/>
      <!-- class std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
      <class-decl name='vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='192' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' id='type-id-333'>
        <!-- struct std::_Vector_base<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-605'/>
        <member-function access='private'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::vector() -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='207' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::vector(const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-170'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::vector(unsigned long int, const AllocObject&, const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='227' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const AllocObject&' -->
            <parameter type-id='type-id-399'/>
            <!-- parameter of type 'const STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-170'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::vector(const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='241' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- parameter of type 'const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-693'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::~vector(int) -->
          <function-decl name='~vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='312' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-829' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='protected'>
          <!-- void std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const AllocObject&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorI11AllocObject13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_'>
            <!-- implicit parameter of type 'std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-830' name='this' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
            <parameter type-id='type-id-376' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'const AllocObject&' -->
            <parameter type-id='type-id-400' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<long unsigned int> -->
      <class-decl name='_Rb_tree_iterator&lt;long unsigned int&gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-547'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<long unsigned int>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<long unsigned int>::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<long unsigned int>*' -->
            <parameter type-id='type-id-748' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<long unsigned int>::_Rb_tree_iterator(std::_Rb_tree_node<long unsigned int>*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<long unsigned int>*' -->
            <parameter type-id='type-id-748' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<long unsigned int>*' -->
            <parameter type-id='type-id-760'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- enum std::_Rb_tree_color -->
      <enum-decl name='_Rb_tree_color' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='85' column='1' id='type-id-867'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='_S_red' value='0'/>
        <enumerator name='_S_black' value='1'/>
      </enum-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-565'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-757' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-757' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-766'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-652'>
        <!-- struct std::binary_function<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-876'/>
      </class-decl>
      <!-- struct std::binary_function<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, bool> -->
      <class-decl name='binary_function&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-876'/>
      <!-- class std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-512'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-731'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-302'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-652' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>*' -->
                <parameter type-id='type-id-732' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>::_Rb_tree_impl(const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&, const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false>*' -->
                <parameter type-id='type-id-732' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&' -->
                <parameter type-id='type-id-654'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-304'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, false> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-731' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-729' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree(const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&, const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-729' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-654'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-307'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_Rb_tree(const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-729' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-514'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-729' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE8_M_eraseEPSt13_Rb_tree_nodeISD_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-730' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-766' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE10_M_insert_EPKSt18_Rb_tree_node_baseSM_RKSD_'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-730' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-680' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
            <return type-id='type-id-565'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique(const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE16_M_insert_uniqueERKSD_'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-730' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-680' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> -->
            <return type-id='type-id-822'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeISbIcSt11char_traitsIcE13STL_AllocatorIcN15HeapLeakChecker9AllocatorEEESt4pairIKS6_St6vectorI11AllocObjectS2_ISA_S4_EEESt10_Select1stISD_ESt4lessIS6_ES2_ISD_S4_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorISD_ERKSD_'>
            <!-- implicit parameter of type 'std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-730' name='this' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >' -->
            <parameter type-id='type-id-540' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- parameter of type 'const std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-680' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
            <return type-id='type-id-565'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::char_traits<char> -->
      <class-decl name='char_traits&lt;char&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='238' column='1' id='type-id-877'>
        <member-type access='public'>
          <!-- typedef char std::char_traits<char>::char_type -->
          <typedef-decl name='char_type' type-id='type-id-65' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='239' column='1' id='type-id-639'/>
        </member-type>
        <member-type access='public'>
          <!-- typedef int std::char_traits<char>::int_type -->
          <typedef-decl name='int_type' type-id='type-id-1' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/char_traits.h' line='240' column='1' id='type-id-644'/>
        </member-type>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-553'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-751' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-751' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-762'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::less<long unsigned int> -->
      <class-decl name='less&lt;long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-647'>
        <!-- struct std::binary_function<long unsigned int, long unsigned int, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-878'/>
      </class-decl>
      <!-- struct std::binary_function<long unsigned int, long unsigned int, bool> -->
      <class-decl name='binary_function&lt;long unsigned int, long unsigned int, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-878'/>
      <!-- class std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, std::_Select1st&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-502'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-719'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-308'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-647' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-720' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl(const std::less<long unsigned int>&, const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-720' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<long unsigned int>&' -->
                <parameter type-id='type-id-649'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-310'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-719' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-717' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree(const std::less<long unsigned int>&, const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-717' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-313'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_Rb_tree(const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-717' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-504'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-717' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS4_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-718' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-762' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmN15HeapLeakChecker10RangeValueEESt10_Select1stIS4_ESt4lessImE13STL_AllocatorIS4_NS2_9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS4_'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-718' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<const long unsigned int, HeapLeakChecker::RangeValue>&' -->
            <parameter type-id='type-id-670' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
            <return type-id='type-id-553'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<long unsigned int> -->
      <class-decl name='_Rb_tree_const_iterator&lt;long unsigned int&gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-522'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<long unsigned int>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<long unsigned int>::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<long unsigned int>*' -->
            <parameter type-id='type-id-738' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<long unsigned int>::_Rb_tree_const_iterator(const std::_Rb_tree_node<long unsigned int>*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<long unsigned int>*' -->
            <parameter type-id='type-id-738' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<long unsigned int>*' -->
            <parameter type-id='type-id-577'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<long unsigned int>::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<long unsigned int>&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<long unsigned int>*' -->
            <parameter type-id='type-id-738' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<long unsigned int>&' -->
            <parameter type-id='type-id-549'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, long unsigned int, std::_Identity&lt;long unsigned int&gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-497'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-713'>
            <!-- class STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-314'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-647' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-714' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl(const std::less<long unsigned int>&, const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-714' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<long unsigned int>&' -->
                <parameter type-id='type-id-649'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<long unsigned int>, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-316'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-713' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-711' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree(const std::less<long unsigned int>&, const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-711' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-319'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_Rb_tree(const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-711' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-499'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-711' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<long unsigned int>*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeImE'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-712' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<long unsigned int>*' -->
            <parameter type-id='type-id-760' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<long unsigned int> std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const unsigned long int&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImmSt9_IdentityImESt4lessImE13STL_AllocatorImN15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKm'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-712' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-707' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<long unsigned int> -->
            <return type-id='type-id-547'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-559'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-754' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-754' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-764'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Rb_tree&lt;long unsigned int, std::pair&lt;const long unsigned int, long unsigned int&gt;, std::_Select1st&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-507'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;long unsigned int&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-725'>
            <!-- class STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-320'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<long unsigned int> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-647' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-726' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>::_Rb_tree_impl(const std::less<long unsigned int>&, const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false>*' -->
                <parameter type-id='type-id-726' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<long unsigned int>&' -->
                <parameter type-id='type-id-649'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-322'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree_impl<std::less<long unsigned int>, false> std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-725' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-723' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree(const std::less<long unsigned int>&, const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-723' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-325'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_Rb_tree(const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-723' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-509'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-723' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_erase(std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS2_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-724' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-764' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const long unsigned int, long unsigned int>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImE13STL_AllocatorIS2_N15HeapLeakChecker9AllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSE_RKS2_'>
            <!-- implicit parameter of type 'std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-724' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<const long unsigned int, long unsigned int>&' -->
            <parameter type-id='type-id-675' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > -->
            <return type-id='type-id-559'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Identity<long unsigned int> -->
      <class-decl name='_Identity&lt;long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='469' column='1' id='type-id-493'>
        <!-- struct std::unary_function<long unsigned int, long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-879'/>
      </class-decl>
      <!-- struct std::unary_function<long unsigned int, long unsigned int> -->
      <class-decl name='unary_function&lt;long unsigned int, long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-879'/>
      <!-- struct std::_Select1st<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' id='type-id-597'>
        <!-- struct std::unary_function<std::pair<const long unsigned int, long unsigned int>, const long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-880'/>
      </class-decl>
      <!-- struct std::unary_function<std::pair<const long unsigned int, long unsigned int>, const long unsigned int> -->
      <class-decl name='unary_function&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, const long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-880'/>
      <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
      <class-decl name='_Vector_base&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' id='type-id-613'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl -->
          <class-decl name='_Vector_impl' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' id='type-id-779'>
            <!-- class STL_Allocator<void*, HeapLeakChecker::Allocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-171'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-151' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-151' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void** std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-151' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_Vector_impl() -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl*' -->
                <parameter type-id='type-id-780' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl::_Vector_impl(const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl*' -->
                <parameter type-id='type-id-780' is-artificial='yes'/>
                <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
                <parameter type-id='type-id-173'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_impl std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-779' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_base() -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='104' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-777' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_base(const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-777' is-artificial='yes'/>
            <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-173'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_Vector_base(unsigned long int, const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-777' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-173'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::~_Vector_base(int) -->
          <function-decl name='~_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-777' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<const long unsigned int, long unsigned int> -->
      <class-decl name='pair&lt;const long unsigned int, long unsigned int&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-672'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const unsigned long int std::pair<const long unsigned int, long unsigned int>::first -->
          <var-decl name='first' type-id='type-id-708' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- unsigned long int std::pair<const long unsigned int, long unsigned int>::second -->
          <var-decl name='second' type-id='type-id-5' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, long unsigned int>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, long unsigned int>*' -->
            <parameter type-id='type-id-809' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, long unsigned int>::pair(const unsigned long int&, const unsigned long int&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, long unsigned int>*' -->
            <parameter type-id='type-id-809' is-artificial='yes'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, long unsigned int>::pair<long unsigned int, long unsigned int>(const std::pair<long unsigned int, long unsigned int>&) -->
          <function-decl name='pair&lt;long unsigned int, long unsigned int&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='99' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, long unsigned int>*' -->
            <parameter type-id='type-id-809' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<long unsigned int, long unsigned int>&' -->
            <parameter type-id='type-id-687'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' id='type-id-593'>
        <!-- struct std::unary_function<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, const long unsigned int> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-881'/>
      </class-decl>
      <!-- struct std::unary_function<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, const long unsigned int> -->
      <class-decl name='unary_function&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, const long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-881'/>
      <!-- struct std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' id='type-id-601'>
        <!-- struct std::unary_function<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-882'/>
      </class-decl>
      <!-- struct std::unary_function<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='unary_function&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-882'/>
      <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
      <class-decl name='_Vector_base&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' id='type-id-609'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl -->
          <class-decl name='_Vector_impl' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' id='type-id-775'>
            <!-- class std::allocator<void (*)()> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-619'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void ()** std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-845' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void ()** std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-845' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- void ()** std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-845' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_Vector_impl() -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl*' -->
                <parameter type-id='type-id-776' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl::_Vector_impl(const std::allocator<void (*)()>&) -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl*' -->
                <parameter type-id='type-id-776' is-artificial='yes'/>
                <!-- parameter of type 'const std::allocator<void (*)()>&' -->
                <parameter type-id='type-id-621'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_impl std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-775' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_base() -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='104' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-773' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_base(const std::allocator<void (*)()>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-773' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<void (*)()>&' -->
            <parameter type-id='type-id-621'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_Vector_base(unsigned long int, const std::allocator<void (*)()>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-773' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<void (*)()>&' -->
            <parameter type-id='type-id-621'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::_Vector_base<void (*)(), std::allocator<void (*)()> >::~_Vector_base(int) -->
          <function-decl name='~_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-773' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<const long unsigned int, HeapLeakChecker::RangeValue> -->
      <class-decl name='pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-667'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const unsigned long int std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::first -->
          <var-decl name='first' type-id='type-id-708' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapLeakChecker::RangeValue std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::second -->
          <var-decl name='second' type-id='type-id-283' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, HeapLeakChecker::RangeValue>*' -->
            <parameter type-id='type-id-807' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::pair(const unsigned long int&, const HeapLeakChecker::RangeValue&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, HeapLeakChecker::RangeValue>*' -->
            <parameter type-id='type-id-807' is-artificial='yes'/>
            <!-- parameter of type 'const unsigned long int&' -->
            <parameter type-id='type-id-706'/>
            <!-- parameter of type 'const HeapLeakChecker::RangeValue&' -->
            <parameter type-id='type-id-408'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const long unsigned int, HeapLeakChecker::RangeValue>::pair<long unsigned int, HeapLeakChecker::RangeValue>(const std::pair<long unsigned int, HeapLeakChecker::RangeValue>&) -->
          <function-decl name='pair&lt;long unsigned int, HeapLeakChecker::RangeValue&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='99' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const long unsigned int, HeapLeakChecker::RangeValue>*' -->
            <parameter type-id='type-id-807' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<long unsigned int, HeapLeakChecker::RangeValue>&' -->
            <parameter type-id='type-id-684'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-818'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::first -->
          <var-decl name='first' type-id='type-id-553' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>*' -->
            <parameter type-id='type-id-819' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>::pair(const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, bool>*' -->
            <parameter type-id='type-id-819' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >&' -->
            <parameter type-id='type-id-555'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;long unsigned int, HeapLeakChecker::RangeValue, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-327'>
        <member-type access='private'>
          <!-- class std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-883'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, std::_Select1st<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> > std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-502' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-798' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::map(const std::less<long unsigned int>&, const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-798' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-313'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >::map(const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-798' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<long unsigned int, HeapLeakChecker::RangeValue, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue>, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-658'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-820'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::first -->
          <var-decl name='first' type-id='type-id-559' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>*' -->
            <parameter type-id='type-id-821' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>::pair(const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, bool>*' -->
            <parameter type-id='type-id-821' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >&' -->
            <parameter type-id='type-id-561'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<long unsigned int>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-816'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<long unsigned int> std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::first -->
          <var-decl name='first' type-id='type-id-547' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>*' -->
            <parameter type-id='type-id-817' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>::pair(const std::_Rb_tree_iterator<long unsigned int>&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<long unsigned int>, bool>*' -->
            <parameter type-id='type-id-817' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<long unsigned int>&' -->
            <parameter type-id='type-id-549'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-814'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_const_iterator<long unsigned int> std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::first -->
          <var-decl name='first' type-id='type-id-522' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>*' -->
            <parameter type-id='type-id-815' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>::pair(const std::_Rb_tree_const_iterator<long unsigned int>&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_const_iterator<long unsigned int>, bool>*' -->
            <parameter type-id='type-id-815' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_const_iterator<long unsigned int>&' -->
            <parameter type-id='type-id-524'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;long unsigned int, long unsigned int, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-329'>
        <member-type access='private'>
          <!-- class std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-884'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, std::pair<const long unsigned int, long unsigned int>, std::_Select1st<std::pair<const long unsigned int, long unsigned int> >, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> > std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-507' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-801' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::map(const std::less<long unsigned int>&, const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-801' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-325'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >::map(const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-801' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<long unsigned int, long unsigned int, std::less<long unsigned int>, STL_Allocator<std::pair<const long unsigned int, long unsigned int>, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-661'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > -->
      <class-decl name='set&lt;long unsigned int, std::less&lt;long unsigned int&gt;, STL_Allocator&lt;long unsigned int, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='88' column='1' id='type-id-335'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<long unsigned int, long unsigned int, std::_Identity<long unsigned int>, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> > std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-497' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='112' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::set() -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='136' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-825' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::set(const std::less<long unsigned int>&, const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='145' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-825' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<long unsigned int>&' -->
            <parameter type-id='type-id-649'/>
            <!-- parameter of type 'const STL_Allocator<long unsigned int, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-319'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >::set(const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='188' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-825' is-artificial='yes'/>
            <!-- parameter of type 'const std::set<long unsigned int, std::less<long unsigned int>, STL_Allocator<long unsigned int, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-689'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > -->
      <class-decl name='map&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;, std::less&lt;std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;, STL_Allocator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-331'>
        <member-type access='private'>
          <!-- class std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-885'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, std::_Select1st<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> > std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-512' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-804' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::map(const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&, const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-804' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-654'/>
            <!-- parameter of type 'const STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-307'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >::map(const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-804' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >, std::less<std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > >, STL_Allocator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-664'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::vector<void (*)(), std::allocator<void (*)()> > -->
      <class-decl name='vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt;' size-in-bits='192' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' id='type-id-696'>
        <!-- struct std::_Vector_base<void (*)(), std::allocator<void (*)()> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-609'/>
        <member-function access='private'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::vector() -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='207' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-346' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::vector(const std::allocator<void (*)()>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-346' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<void (*)()>&' -->
            <parameter type-id='type-id-621'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::vector(unsigned long int, void ()* const&, const std::allocator<void (*)()>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='227' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-346' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'void ()* const&' -->
            <parameter type-id='type-id-841'/>
            <!-- parameter of type 'const std::allocator<void (*)()>&' -->
            <parameter type-id='type-id-621'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::vector(const std::vector<void (*)(), std::allocator<void (*)()> >&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='241' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-346' is-artificial='yes'/>
            <!-- parameter of type 'const std::vector<void (*)(), std::allocator<void (*)()> >&' -->
            <parameter type-id='type-id-698'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::vector<void (*)(), std::allocator<void (*)()> >::~vector(int) -->
          <function-decl name='~vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='312' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >*' -->
            <parameter type-id='type-id-346' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='protected'>
          <!-- void std::vector<void (*)(), std::allocator<void (*)()> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >, void ()* const&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIPFvvESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_'>
            <!-- implicit parameter of type 'std::vector<void (*)(), std::allocator<void (*)()> >* const' -->
            <parameter type-id='type-id-832' name='this' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >' -->
            <parameter type-id='type-id-384' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'void ()* const&' -->
            <parameter type-id='type-id-842' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<void (**)(), false> -->
      <class-decl name='__niter_base&lt;void (**)(), false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-886'/>
      <!-- struct std::__miter_base<void (**)(), false> -->
      <class-decl name='__miter_base&lt;void (**)(), false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-887'/>
      <!-- class std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
      <class-decl name='vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' size-in-bits='192' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' id='type-id-701'>
        <!-- struct std::_Vector_base<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-613'/>
        <member-function access='private'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::vector() -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='207' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-834' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::vector(const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-834' is-artificial='yes'/>
            <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-173'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::vector(unsigned long int, void* const&, const STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='227' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-834' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'void* const&' -->
            <parameter type-id='type-id-856'/>
            <!-- parameter of type 'const STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
            <parameter type-id='type-id-173'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::vector(const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='241' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-834' is-artificial='yes'/>
            <!-- parameter of type 'const std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-703'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::~vector(int) -->
          <function-decl name='~vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='312' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >*' -->
            <parameter type-id='type-id-834' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='protected'>
          <!-- void std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >, void* const&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIPv13STL_AllocatorIS0_N15HeapLeakChecker9AllocatorEEE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S5_EERKS0_'>
            <!-- implicit parameter of type 'std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> >* const' -->
            <parameter type-id='type-id-835' name='this' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >' -->
            <parameter type-id='type-id-387' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'void* const&' -->
            <parameter type-id='type-id-857' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<AllocObject*, false> -->
      <class-decl name='__niter_base&lt;AllocObject*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-888'/>
      <!-- struct std::__miter_base<AllocObject*, false> -->
      <class-decl name='__miter_base&lt;AllocObject*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-889'/>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-528'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-740' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-740' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-581'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >*' -->
            <parameter type-id='type-id-740' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >&' -->
            <parameter type-id='type-id-555'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__copy_move<false, false, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move&lt;false, false, std::random_access_iterator_tag&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='335' column='1' id='type-id-890'>
        <member-function access='public' static='yes'>
          <!-- AllocObject* std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<AllocObject*, AllocObject*>(AllocObject*, AllocObject*) -->
          <function-decl name='__copy_m&lt;AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='338' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- parameter of type 'AllocObject*' -->
            <parameter type-id='type-id-167'/>
            <!-- AllocObject* -->
            <return type-id='type-id-167'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, true> -->
      <class-decl name='__niter_base&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, true&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-891'/>
      <!-- struct std::__miter_base<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, false> -->
      <class-decl name='__miter_base&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-892'/>
      <!-- struct std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='256' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-677'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::first -->
          <var-decl name='first' type-id='type-id-623' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::second -->
          <var-decl name='second' type-id='type-id-333' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-811' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::pair(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&, const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-811' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-624'/>
            <!-- parameter of type 'const std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >&' -->
            <parameter type-id='type-id-693'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-534'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-742' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-742' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-585'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >*' -->
            <parameter type-id='type-id-742' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >&' -->
            <parameter type-id='type-id-561'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-822'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::first -->
          <var-decl name='first' type-id='type-id-565' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>*' -->
            <parameter type-id='type-id-823' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>::pair(const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, bool>*' -->
            <parameter type-id='type-id-823' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >&' -->
            <parameter type-id='type-id-567'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-540'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-745' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-745' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-589'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >*' -->
            <parameter type-id='type-id-745' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >&' -->
            <parameter type-id='type-id-567'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- void std::swap<AllocObject*>(AllocObject*&, AllocObject*&) -->
      <function-decl name='swap&lt;AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/move.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*&' -->
        <parameter type-id='type-id-351'/>
        <!-- parameter of type 'AllocObject*&' -->
        <parameter type-id='type-id-351'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::_Destroy<AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >(AllocObject*, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
      <function-decl name='_Destroy&lt;AllocObject*, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='137' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-357'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::_Destroy<void (**)()>(void ()**, void ()**) -->
      <function-decl name='_Destroy&lt;void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='119' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- std::random_access_iterator_tag std::__iterator_category<const char*>(const char* const&) -->
      <function-decl name='__iterator_category&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_types.h' line='160' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const char* const&' -->
        <parameter type-id='type-id-489'/>
        <!-- struct std::random_access_iterator_tag -->
        <return type-id='type-id-861'/>
      </function-decl>
      <!-- ptrdiff_t std::__distance<const char*>(const char*, const char*, std::random_access_iterator_tag) -->
      <function-decl name='__distance&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h' line='87' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- parameter of type 'struct std::random_access_iterator_tag' -->
        <parameter type-id='type-id-861'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- AllocObject* std::__uninitialized_copy_a<AllocObject*, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >(AllocObject*, AllocObject*, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
      <function-decl name='__uninitialized_copy_a&lt;AllocObject*, AllocObject*, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='235' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-357'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- void std::_Destroy<void**, STL_Allocator<void*, HeapLeakChecker::Allocator> >(void**, void**, STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
      <function-decl name='_Destroy&lt;void**, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='137' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-373'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void** std::__uninitialized_copy_a<void**, void**, STL_Allocator<void*, HeapLeakChecker::Allocator> >(void**, void**, void**, STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
      <function-decl name='__uninitialized_copy_a&lt;void**, void**, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='235' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-373'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- std::pair<long unsigned int, HeapLeakChecker::RangeValue> std::make_pair<long unsigned int, HeapLeakChecker::RangeValue>(unsigned long int, HeapLeakChecker::RangeValue) -->
      <function-decl name='make_pair&lt;long unsigned int, HeapLeakChecker::RangeValue&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'unsigned long int' -->
        <parameter type-id='type-id-5'/>
        <!-- parameter of type 'struct HeapLeakChecker::RangeValue' -->
        <parameter type-id='type-id-283'/>
        <!-- struct std::pair<long unsigned int, HeapLeakChecker::RangeValue> -->
        <return type-id='type-id-682'/>
      </function-decl>
      <!-- AllocObject* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >(__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
      <function-decl name='__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, AllocObject*, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='235' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-380'/>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-380'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-357'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- void std::_Destroy<void (**)(), void (*)()>(void ()**, void ()**, std::allocator<void (*)()>&) -->
      <function-decl name='_Destroy&lt;void (**)(), void (*)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='146' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'std::allocator<void (*)()>&' -->
        <parameter type-id='type-id-781'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const char*) -->
      <function-decl name='operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2265' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
        <parameter type-id='type-id-632'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void ()** std::__copy_move_backward_a<false, void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='__copy_move_backward_a&lt;false, void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::__copy_move_backward_a2<false, void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='__copy_move_backward_a2&lt;false, void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::__copy_move_a<false, void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='__copy_move_a&lt;false, void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::__copy_move_a2<false, void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='__copy_move_a2&lt;false, void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::copy<void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='copy&lt;void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::uninitialized_copy<void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='uninitialized_copy&lt;void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void ()** std::__uninitialized_copy_a<void (**)(), void (**)(), void (*)()>(void ()**, void ()**, void ()**, std::allocator<void (*)()>&) -->
      <function-decl name='__uninitialized_copy_a&lt;void (**)(), void (**)(), void (*)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='254' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'std::allocator<void (*)()>&' -->
        <parameter type-id='type-id-781'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- void** std::__copy_move_backward_a<false, void**, void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_backward_a&lt;false, void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::__copy_move_backward_a2<false, void**, void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_backward_a2&lt;false, void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- const size_t& std::max<size_t>(const size_t&, const size_t&) -->
      <function-decl name='max&lt;size_t&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const size_t&' -->
        <parameter type-id='type-id-492'/>
        <!-- parameter of type 'const size_t&' -->
        <parameter type-id='type-id-492'/>
        <!-- const size_t& -->
        <return type-id='type-id-492'/>
      </function-decl>
      <!-- void** std::copy_backward<void**, void**>(void**, void**, void**) -->
      <function-decl name='copy_backward&lt;void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::__uninitialized_move_a<void**, void**, STL_Allocator<void*, HeapLeakChecker::Allocator> >(void**, void**, void**, STL_Allocator<void*, HeapLeakChecker::Allocator>&) -->
      <function-decl name='__uninitialized_move_a&lt;void**, void**, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='261' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'STL_Allocator<void*, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-373'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void ()** std::copy_backward<void (**)(), void (**)()>(void ()**, void ()**, void ()**) -->
      <function-decl name='copy_backward&lt;void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- std::pair<long unsigned int, long unsigned int> std::make_pair<long unsigned int, long unsigned int>(unsigned long int, unsigned long int) -->
      <function-decl name='make_pair&lt;long unsigned int, long unsigned int&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'unsigned long int' -->
        <parameter type-id='type-id-5'/>
        <!-- parameter of type 'unsigned long int' -->
        <parameter type-id='type-id-5'/>
        <!-- struct std::pair<long unsigned int, long unsigned int> -->
        <return type-id='type-id-685'/>
      </function-decl>
      <!-- AllocObject* std::__copy_move_backward_a<false, AllocObject*, AllocObject*>(AllocObject*, AllocObject*, AllocObject*) -->
      <function-decl name='__copy_move_backward_a&lt;false, AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- AllocObject* std::__copy_move_backward_a2<false, AllocObject*, AllocObject*>(AllocObject*, AllocObject*, AllocObject*) -->
      <function-decl name='__copy_move_backward_a2&lt;false, AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- AllocObject* std::copy_backward<AllocObject*, AllocObject*>(AllocObject*, AllocObject*, AllocObject*) -->
      <function-decl name='copy_backward&lt;AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- AllocObject* std::__uninitialized_move_a<AllocObject*, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> >(AllocObject*, AllocObject*, AllocObject*, STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&) -->
      <function-decl name='__uninitialized_move_a&lt;AllocObject*, AllocObject*, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='261' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'STL_Allocator<AllocObject, HeapLeakChecker::Allocator>&' -->
        <parameter type-id='type-id-357'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- AllocObject* std::__copy_move_a<false, AllocObject*, AllocObject*>(AllocObject*, AllocObject*, AllocObject*) -->
      <function-decl name='__copy_move_a&lt;false, AllocObject*, AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- parameter of type 'AllocObject*' -->
        <parameter type-id='type-id-167'/>
        <!-- AllocObject* -->
        <return type-id='type-id-167'/>
      </function-decl>
      <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >) -->
      <function-decl name='__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
        <return type-id='type-id-376'/>
      </function-decl>
      <!-- __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > std::copy<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >(__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >, __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >) -->
      <function-decl name='copy&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- parameter of type 'class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >' -->
        <parameter type-id='type-id-376'/>
        <!-- class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
        <return type-id='type-id-376'/>
      </function-decl>
      <!-- ptrdiff_t std::distance<const char*>(const char*, const char*) -->
      <function-decl name='distance&lt;const char*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator_base_funcs.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- const size_t& std::min<size_t>(const size_t&, const size_t&) -->
      <function-decl name='min&lt;size_t&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const size_t&' -->
        <parameter type-id='type-id-492'/>
        <!-- parameter of type 'const size_t&' -->
        <parameter type-id='type-id-492'/>
        <!-- const size_t& -->
        <return type-id='type-id-492'/>
      </function-decl>
      <!-- bool std::operator< <char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >(const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&, const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&) -->
      <function-decl name='operator&lt; &lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2315' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
        <parameter type-id='type-id-624'/>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >&' -->
        <parameter type-id='type-id-624'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const char*) -->
      <function-decl name='operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2302' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
        <parameter type-id='type-id-632'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void ()** std::__uninitialized_move_a<void (**)(), void (**)(), std::allocator<void (*)()> >(void ()**, void ()**, void ()**, std::allocator<void (*)()>&) -->
      <function-decl name='__uninitialized_move_a&lt;void (**)(), void (**)(), std::allocator&lt;void (*)()&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='261' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'void ()**' -->
        <parameter type-id='type-id-845'/>
        <!-- parameter of type 'std::allocator<void (*)()>&' -->
        <parameter type-id='type-id-781'/>
        <!-- void ()** -->
        <return type-id='type-id-845'/>
      </function-decl>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-893'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-894'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-895'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-896'/>
      <!-- struct std::_Rb_tree_node<long unsigned int> -->
      <class-decl name='_Rb_tree_node&lt;long unsigned int&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-574'/>
      <!-- struct std::_Rb_tree_node<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-586'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-897'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-898'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::_Rb_tree_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-899'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > >, std::_Rb_tree_const_iterator<std::pair<const std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> >, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt;, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-900'/>
      <!-- struct std::_Rb_tree_node<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-578'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-901'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-902'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::_Rb_tree_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-903'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> >, std::_Rb_tree_const_iterator<std::pair<const long unsigned int, HeapLeakChecker::RangeValue> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, HeapLeakChecker::RangeValue&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-904'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<long unsigned int> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-905'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<long unsigned int> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-906'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<long unsigned int>, std::_Rb_tree_iterator<long unsigned int> > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;long unsigned int&gt;, std::_Rb_tree_iterator&lt;long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-907'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<long unsigned int>, std::_Rb_tree_const_iterator<long unsigned int> > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;long unsigned int&gt;, std::_Rb_tree_const_iterator&lt;long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-908'/>
      <!-- struct std::_Rb_tree_node<std::pair<const long unsigned int, long unsigned int> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-582'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-909'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-910'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> >, std::_Rb_tree_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-911'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> >, std::_Rb_tree_const_iterator<std::pair<const long unsigned int, long unsigned int> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const long unsigned int, long unsigned int&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-912'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void (**)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-913'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void (* const*)(), std::vector<void (*)(), std::allocator<void (*)()> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void (* const*)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-914'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void**, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-915'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<void* const*, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;void* const*, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-916'/>
      <!-- struct std::_Rb_tree_node<MemoryRegionMap::Region> -->
      <class-decl name='_Rb_tree_node&lt;MemoryRegionMap::Region&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-571'/>
      <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const char*) -->
      <function-decl name='operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' mangled-name='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2198' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_PKS3_'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
        <parameter type-id='type-id-633' name='__lhs' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2198' column='1'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57' name='__rhs' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2199' column='1'/>
        <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
        <return type-id='type-id-917'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-380'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- const AllocObject* __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-401' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-382' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::__normal_iterator(const AllocObject* const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-382' is-artificial='yes'/>
            <!-- parameter of type 'const AllocObject* const&' -->
            <parameter type-id='type-id-403'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::__normal_iterator<AllocObject*>(const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
          <function-decl name='__normal_iterator&lt;AllocObject*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='690' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-382' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
            <parameter type-id='type-id-462'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-376'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- AllocObject* __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-167' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-378' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >::__normal_iterator(AllocObject* const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-378' is-artificial='yes'/>
            <!-- parameter of type 'AllocObject* const&' -->
            <parameter type-id='type-id-350'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;void**, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-387'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- void** __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-151' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-389' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >::__normal_iterator(void** const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >*' -->
            <parameter type-id='type-id-389' is-artificial='yes'/>
            <!-- parameter of type 'void** const&' -->
            <parameter type-id='type-id-860'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
      <class-decl name='__normal_iterator&lt;void (**)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-384'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- void ()** __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-845' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >*' -->
            <parameter type-id='type-id-386' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >::__normal_iterator(void ()** const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >*' -->
            <parameter type-id='type-id-386' is-artificial='yes'/>
            <!-- parameter of type 'void ()** const&' -->
            <parameter type-id='type-id-847'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<void (*)()> -->
      <class-decl name='new_allocator&lt;void (*)()&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-390'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<void (*)()>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<void (*)()>*' -->
            <parameter type-id='type-id-391' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<void (*)()>::new_allocator(const __gnu_cxx::new_allocator<void (*)()>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<void (*)()>*' -->
            <parameter type-id='type-id-391' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<void (*)()>&' -->
            <parameter type-id='type-id-478'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<void (*)()>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<void (*)()>*' -->
            <parameter type-id='type-id-391' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- bool __gnu_cxx::operator==<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator==&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='771' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-466'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-466'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- bool __gnu_cxx::operator!=<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator!=&lt;const AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='783' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-466'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-466'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- ptrdiff_t __gnu_cxx::operator&#45;<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator-&lt;void**, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='856' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-474'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<void**, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-474'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- ptrdiff_t __gnu_cxx::operator&#45;<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >(const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >&, const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >&) -->
      <function-decl name='operator-&lt;void (**)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='856' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >&' -->
        <parameter type-id='type-id-470'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >&' -->
        <parameter type-id='type-id-470'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- ptrdiff_t __gnu_cxx::operator&#45;<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator-&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='856' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-462'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-462'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- bool __gnu_cxx::operator!=<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator!=&lt;AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='783' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-462'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-462'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- bool __gnu_cxx::operator!=<const AllocObject*, AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >(const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&, const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&) -->
      <function-decl name='operator!=&lt;const AllocObject*, AllocObject*, std::vector&lt;AllocObject, STL_Allocator&lt;AllocObject, HeapLeakChecker::Allocator&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='777' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<const AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-466'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<AllocObject*, std::vector<AllocObject, STL_Allocator<AllocObject, HeapLeakChecker::Allocator> > >&' -->
        <parameter type-id='type-id-462'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- bool __gnu_cxx::__is_null_pointer<const char>(const char*) -->
      <function-decl name='__is_null_pointer&lt;const char&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/type_traits.h' line='148' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-918'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, STL_Allocator<char, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, STL_Allocator&lt;char, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-919'/>
      <!-- class __gnu_cxx::__normal_iterator<void (* const*)(), std::vector<void (*)(), std::allocator<void (*)()> > > -->
      <class-decl name='__normal_iterator&lt;void (* const*)(), std::vector&lt;void (*)(), std::allocator&lt;void (*)()&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-920'/>
      <!-- class __gnu_cxx::__normal_iterator<void* const*, std::vector<void*, STL_Allocator<void*, HeapLeakChecker::Allocator> > > -->
      <class-decl name='__normal_iterator&lt;void* const*, std::vector&lt;void*, STL_Allocator&lt;void*, HeapLeakChecker::Allocator&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-921'/>
    </namespace-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, const void*, size_t, int, int, int, off_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-393'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, ptrdiff_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, ptrdiff_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-395'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, ptrdiff_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, ptrdiff_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_pointer_source_alignment -->
      <var-decl name='FLAGS_heap_check_pointer_source_alignment' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='190' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead41FLAGS_heap_check_pointer_source_alignmentE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_pointer_source_alignment -->
      <var-decl name='FLAGS_noheap_check_pointer_source_alignment' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='194' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead43FLAGS_noheap_check_pointer_source_alignmentE'/>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_delay_seconds -->
      <var-decl name='FLAGS_heap_check_delay_seconds' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE' visibility='default' filepath='src/heap-checker.cc' line='216' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead30FLAGS_heap_check_delay_secondsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_delay_seconds -->
      <var-decl name='FLAGS_noheap_check_delay_seconds' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE' visibility='default' filepath='src/heap-checker.cc' line='225' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead32FLAGS_noheap_check_delay_secondsE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check -->
      <var-decl name='FLAGS_heap_check' type-id='type-id-924' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE' visibility='default' filepath='src/heap-checker.cc' line='142' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead16FLAGS_heap_checkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check -->
      <var-decl name='FLAGS_noheap_check' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE' visibility='default' filepath='src/heap-checker.cc' line='148' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead18FLAGS_noheap_checkE'/>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_profile_pprof -->
      <var-decl name='FLAGS_heap_profile_pprof' type-id='type-id-924' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE' visibility='default' filepath='src/heap-checker.cc' line='229' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead24FLAGS_heap_profile_pprofE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_profile_pprof -->
      <var-decl name='FLAGS_noheap_profile_pprof' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE' visibility='default' filepath='src/heap-checker.cc' line='231' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead26FLAGS_noheap_profile_pprofE'/>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_heap_check_dump_directory -->
      <var-decl name='FLAGS_heap_check_dump_directory' type-id='type-id-924' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE' visibility='default' filepath='src/heap-checker.cc' line='233' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead31FLAGS_heap_check_dump_directoryE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_noheap_check_dump_directory -->
      <var-decl name='FLAGS_noheap_check_dump_directory' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE' visibility='default' filepath='src/heap-checker.cc' line='235' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead33FLAGS_noheap_check_dump_directoryE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_report -->
      <var-decl name='FLAGS_heap_check_report' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE' visibility='default' filepath='src/heap-checker.cc' line='150' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_heap_check_reportE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_report -->
      <var-decl name='FLAGS_noheap_check_report' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE' visibility='default' filepath='src/heap-checker.cc' line='150' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noheap_check_reportE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_before_constructors -->
      <var-decl name='FLAGS_heap_check_before_constructors' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE' visibility='default' filepath='src/heap-checker.cc' line='152' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_heap_check_before_constructorsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_before_constructors -->
      <var-decl name='FLAGS_noheap_check_before_constructors' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE' visibility='default' filepath='src/heap-checker.cc' line='154' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead38FLAGS_noheap_check_before_constructorsE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_after_destructors -->
      <var-decl name='FLAGS_heap_check_after_destructors' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE' visibility='default' filepath='src/heap-checker.cc' line='156' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_heap_check_after_destructorsE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_after_destructors -->
      <var-decl name='FLAGS_noheap_check_after_destructors' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE' visibility='default' filepath='src/heap-checker.cc' line='159' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead36FLAGS_noheap_check_after_destructorsE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_strict_check -->
      <var-decl name='FLAGS_heap_check_strict_check' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE' visibility='default' filepath='src/heap-checker.cc' line='161' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_heap_check_strict_checkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_strict_check -->
      <var-decl name='FLAGS_noheap_check_strict_check' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE' visibility='default' filepath='src/heap-checker.cc' line='161' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_noheap_check_strict_checkE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_global_live -->
      <var-decl name='FLAGS_heap_check_ignore_global_live' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE' visibility='default' filepath='src/heap-checker.cc' line='163' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_global_liveE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_global_live -->
      <var-decl name='FLAGS_noheap_check_ignore_global_live' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE' visibility='default' filepath='src/heap-checker.cc' line='166' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_global_liveE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_identify_leaks -->
      <var-decl name='FLAGS_heap_check_identify_leaks' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE' visibility='default' filepath='src/heap-checker.cc' line='168' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_heap_check_identify_leaksE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_identify_leaks -->
      <var-decl name='FLAGS_noheap_check_identify_leaks' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE' visibility='default' filepath='src/heap-checker.cc' line='173' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_noheap_check_identify_leaksE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_ignore_thread_live -->
      <var-decl name='FLAGS_heap_check_ignore_thread_live' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE' visibility='default' filepath='src/heap-checker.cc' line='175' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_heap_check_ignore_thread_liveE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_ignore_thread_live -->
      <var-decl name='FLAGS_noheap_check_ignore_thread_live' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE' visibility='default' filepath='src/heap-checker.cc' line='178' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_noheap_check_ignore_thread_liveE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_test_pointer_alignment -->
      <var-decl name='FLAGS_heap_check_test_pointer_alignment' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='180' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead39FLAGS_heap_check_test_pointer_alignmentE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_test_pointer_alignment -->
      <var-decl name='FLAGS_noheap_check_test_pointer_alignment' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE' visibility='default' filepath='src/heap-checker.cc' line='183' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead41FLAGS_noheap_check_test_pointer_alignmentE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_heap_check_run_under_gdb -->
      <var-decl name='FLAGS_heap_check_run_under_gdb' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE' visibility='default' filepath='src/heap-checker.cc' line='211' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_heap_check_run_under_gdbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noheap_check_run_under_gdb -->
      <var-decl name='FLAGS_noheap_check_run_under_gdb' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE' visibility='default' filepath='src/heap-checker.cc' line='214' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_noheap_check_run_under_gdbE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_check_max_pointer_offset -->
      <var-decl name='FLAGS_heap_check_max_pointer_offset' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE' visibility='default' filepath='src/heap-checker.cc' line='204' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_heap_check_max_pointer_offsetE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_check_max_pointer_offset -->
      <var-decl name='FLAGS_noheap_check_max_pointer_offset' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE' visibility='default' filepath='src/heap-checker.cc' line='209' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead37FLAGS_noheap_check_max_pointer_offsetE'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- int tcmalloc::commandlineflags::StringToInt(const char*, int) -->
        <function-decl name='StringToInt' filepath='./src/base/commandlineflags.h' line='125' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' mangled-name='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc16commandlineflags12StringToBoolEPKcb'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- void LogPrintf(int, const char*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='LogPrintf' mangled-name='_Z9LogPrintfiPKcP13__va_list_tag' filepath='./src/base/logging.h' line='198' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z9LogPrintfiPKcP13__va_list_tag'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='severity' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='pat' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72' name='ap' filepath='./src/base/logging.h' line='198' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void RAW_VLOG(int, const char*, ...) -->
    <function-decl name='RAW_VLOG' mangled-name='_Z8RAW_VLOGiPKcz' filepath='./src/base/logging.h' line='229' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z8RAW_VLOGiPKcz'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='lvl' filepath='./src/base/logging.h' line='229' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='pat' filepath='./src/base/logging.h' line='229' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void RAW_LOG(int, const char*, ...) -->
    <function-decl name='RAW_LOG' mangled-name='_Z7RAW_LOGiPKcz' filepath='./src/base/logging.h' line='228' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z7RAW_LOGiPKcz'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='lvl' filepath='./src/base/logging.h' line='229' column='1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='pat' filepath='./src/base/logging.h' line='229' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void HeapLeakChecker_BeforeConstructors() -->
    <function-decl name='HeapLeakChecker_BeforeConstructors' mangled-name='_Z34HeapLeakChecker_BeforeConstructorsv' filepath='src/heap-checker.cc' line='2259' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z34HeapLeakChecker_BeforeConstructorsv'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void MallocHook_InitAtFirstAllocation_HeapLeakChecker() -->
    <function-decl name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' mangled-name='MallocHook_InitAtFirstAllocation_HeapLeakChecker' filepath='src/heap-checker.cc' line='2306' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_InitAtFirstAllocation_HeapLeakChecker'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void HeapLeakChecker_InternalInitStart() -->
    <function-decl name='HeapLeakChecker_InternalInitStart' mangled-name='_Z33HeapLeakChecker_InternalInitStartv' filepath='src/heap-checker.cc' line='1954' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z33HeapLeakChecker_InternalInitStartv'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void HeapLeakChecker_AfterDestructors() -->
    <function-decl name='HeapLeakChecker_AfterDestructors' mangled-name='_Z32HeapLeakChecker_AfterDestructorsv' filepath='src/heap-checker.cc' line='2311' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z32HeapLeakChecker_AfterDestructorsv'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void HeapLeakChecker_RunHeapCleanups() -->
    <function-decl name='HeapLeakChecker_RunHeapCleanups' mangled-name='_Z31HeapLeakChecker_RunHeapCleanupsv' filepath='src/heap-checker.cc' line='1931' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z31HeapLeakChecker_RunHeapCleanupsv'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- AddressMap<HeapProfileTable::AllocValue>* const -->
    <qualified-type-def type-id='type-id-265' const='yes' id='type-id-275'/>
    <!-- AtomicWord[8] -->
    <array-type-def dimensions='1' type-id='type-id-922' size-in-bits='512' id='type-id-923'>
      <!-- <anonymous range>[8] -->
      <subrange length='8' type-id='type-id-5' id='type-id-925'/>
    </array-type-def>
    <!-- HeapProfileBucket** -->
    <pointer-type-def type-id='type-id-206' size-in-bits='64' id='type-id-196'/>
    <!-- HeapProfileBucket[20] -->
    <array-type-def dimensions='1' type-id='type-id-212' size-in-bits='8960' id='type-id-197'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' type-id='type-id-5' id='type-id-926'/>
    </array-type-def>
    <!-- HeapProfileTable* const -->
    <qualified-type-def type-id='type-id-245' const='yes' id='type-id-248'/>
    <!-- HeapProfileTable::Snapshot* const -->
    <qualified-type-def type-id='type-id-224' const='yes' id='type-id-229'/>
    <!-- HeapProfileTable::Snapshot::Entry* -->
    <pointer-type-def type-id='type-id-218' size-in-bits='64' id='type-id-220'/>
    <!-- MallocExtension* -->
    <pointer-type-def type-id='type-id-927' size-in-bits='64' id='type-id-296'/>
    <!-- MemoryRegionMap::RegionSet* -->
    <pointer-type-def type-id='type-id-185' size-in-bits='64' id='type-id-194'/>
    <!-- char[48] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='384' id='type-id-188'>
      <!-- <anonymous range>[48] -->
      <subrange length='48' type-id='type-id-5' id='type-id-928'/>
    </array-type-def>
    <namespace-decl name='std'>
      <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='52' column='1' id='type-id-917'>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep -->
          <class-decl name='_Rep' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='148' column='1' id='type-id-636'>
            <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-929'/>
            <data-member access='public' static='yes'>
              <!-- static const size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_max_size -->
              <var-decl name='_S_max_size' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='51' column='1'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static const char std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_terminal -->
              <var-decl name='_S_terminal' type-id='type-id-63' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='56' column='1'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_empty_rep_storage[4] -->
              <var-decl name='_S_empty_rep_storage' type-id='type-id-161' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='68' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider -->
          <class-decl name='_Alloc_hider' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='258' column='1' id='type-id-930'>
            <!-- class std::allocator<char> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-931'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- char* std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_M_p -->
              <var-decl name='_M_p' type-id='type-id-118' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='262' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, const std::allocator<char>&) -->
              <function-decl name='_Alloc_hider' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='259' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider*' -->
                <parameter type-id='type-id-932' is-artificial='yes'/>
                <!-- parameter of type 'char*' -->
                <parameter type-id='type-id-118'/>
                <!-- parameter of type 'const std::allocator<char>&' -->
                <parameter type-id='type-id-617'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
          <class-decl name='_Rep_base' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='141' column='1' id='type-id-929'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_length -->
              <var-decl name='_M_length' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='142' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_capacity -->
              <var-decl name='_M_capacity' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='143' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- _Atomic_word std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_refcount -->
              <var-decl name='_M_refcount' type-id='type-id-326' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='144' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' static='yes'>
          <!-- static const size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos -->
          <var-decl name='npos' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='270' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dataplus -->
          <var-decl name='_M_dataplus' type-id='type-id-930' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='274' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2144' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='178' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long int, unsigned long int) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='184' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long int, unsigned long int, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='194' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const char*, unsigned long int, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='206' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const char*, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='213' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long int, char, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='220' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'char' -->
            <parameter type-id='type-id-65'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string(int) -->
          <function-decl name='~basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='502' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='map&lt;HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-222'>
        <member-type access='private'>
          <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-933'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-934' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
            <parameter type-id='type-id-936'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map(const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-938'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='set&lt;MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='88' column='1' id='type-id-186'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-939' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='112' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set() -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='136' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set(const MemoryRegionMap::RegionCmp&, const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='145' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
            <parameter type-id='type-id-941'/>
            <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
            <parameter type-id='type-id-942'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set(const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='188' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- parameter of type 'const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&' -->
            <parameter type-id='type-id-943'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const HeapProfileTable::AllocValue& -->
    <qualified-type-def type-id='type-id-419' id='type-id-247'/>
    <!-- const HeapProfileTable::AllocValue::Bucket& -->
    <qualified-type-def type-id='type-id-423' id='type-id-249'/>
    <!-- const HeapProfileTable::DumpArgs& -->
    <qualified-type-def type-id='type-id-273' id='type-id-250'/>
    <!-- const MemoryRegionMap::Region& -->
    <qualified-type-def type-id='type-id-433' id='type-id-202'/>
    <!-- const bool -->
    <qualified-type-def type-id='type-id-61' const='yes' id='type-id-487'/>
    <!-- const ptrdiff_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-944' size-in-bits='64' id='type-id-490'/>
    <!-- const std::allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-945' size-in-bits='64' id='type-id-617'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-946' size-in-bits='64' id='type-id-632'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-946' size-in-bits='64' id='type-id-634'/>
    <!-- const uintptr_t -->
    <qualified-type-def type-id='type-id-156' const='yes' id='type-id-259'/>
    <!-- const unsigned long int -->
    <qualified-type-def type-id='type-id-5' const='yes' id='type-id-708'/>
    <!-- const unsigned long int& -->
    <reference-type-def kind='lvalue' type-id='type-id-708' size-in-bits='64' id='type-id-706'/>
    <!-- size_t (const HeapProfileTable::AllocValue&) -->
    <function-type size-in-bits='64' id='type-id-836'>
      <!-- parameter of type 'const HeapProfileTable::AllocValue&' -->
      <parameter type-id='type-id-419'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-type>
    <!-- void (const HeapProfileTable::AllocContextInfo&) -->
    <function-type size-in-bits='64' id='type-id-848'>
      <!-- parameter of type 'const HeapProfileTable::AllocContextInfo&' -->
      <parameter type-id='type-id-415'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, void (void*, const HeapProfileTable::AllocInfo&)*) -->
    <function-type size-in-bits='64' id='type-id-849'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'void (void*, const HeapProfileTable::AllocInfo&)*' -->
      <parameter type-id='type-id-237'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, const HeapProfileTable::AllocInfo&) -->
    <function-type size-in-bits='64' id='type-id-850'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'const HeapProfileTable::AllocInfo&' -->
      <parameter type-id='type-id-417'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, ptrdiff_t) -->
    <function-type size-in-bits='64' id='type-id-851'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-208'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, void*, size_t, int, int, int, off_t) -->
    <function-type size-in-bits='64' id='type-id-853'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-207'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void* (size_t) -->
    <function-type size-in-bits='64' id='type-id-855'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- size_t* -->
    <pointer-type-def type-id='type-id-62' size-in-bits='64' id='type-id-253'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-544' size-in-bits='64' id='type-id-868'/>
    <!-- std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-571' size-in-bits='64' id='type-id-869'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-917' size-in-bits='64' id='type-id-790'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* -->
    <pointer-type-def type-id='type-id-636' size-in-bits='64' id='type-id-792'/>
    <!-- typedef intptr_t AtomicWord -->
    <typedef-decl name='AtomicWord' type-id='type-id-82' filepath='./src/base/atomicops.h' line='129' column='1' id='type-id-922'/>
    <!-- typedef long int __off_t -->
    <typedef-decl name='__off_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='141' column='1' id='type-id-301'/>
    <!-- typedef unsigned long int pthread_t -->
    <typedef-decl name='pthread_t' type-id='type-id-5' filepath='/usr/include/bits/pthreadtypes.h' line='50' column='1' id='type-id-195'/>
    <!-- typedef long int ptrdiff_t -->
    <typedef-decl name='ptrdiff_t' type-id='type-id-85' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='149' column='1' id='type-id-208'/>
    <!-- typedef __ssize_t ssize_t -->
    <typedef-decl name='ssize_t' type-id='type-id-947' filepath='/usr/include/stdio.h' line='103' column='1' id='type-id-291'/>
    <namespace-decl name='std'>
      <!-- typedef std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::string -->
      <typedef-decl name='string' type-id='type-id-917' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='56' column='1' id='type-id-924'/>
    </namespace-decl>
    <!-- void ()* -->
    <pointer-type-def type-id='type-id-948' size-in-bits='64' id='type-id-176'/>
    <!-- void (const HeapProfileBucket*, HeapProfileTable::BufferArgs*)* -->
    <pointer-type-def type-id='type-id-949' size-in-bits='64' id='type-id-199'/>
    <!-- void (const MemoryRegionMap::Region&)* -->
    <pointer-type-def type-id='type-id-950' size-in-bits='64' id='type-id-201'/>
    <!-- void (void*)* -->
    <pointer-type-def type-id='type-id-951' size-in-bits='64' id='type-id-234'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*)* -->
    <pointer-type-def type-id='type-id-952' size-in-bits='64' id='type-id-269'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*)* -->
    <pointer-type-def type-id='type-id-953' size-in-bits='64' id='type-id-270'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*)* -->
    <pointer-type-def type-id='type-id-954' size-in-bits='64' id='type-id-274'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, char*)* -->
    <pointer-type-def type-id='type-id-955' size-in-bits='64' id='type-id-268'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&)* -->
    <pointer-type-def type-id='type-id-956' size-in-bits='64' id='type-id-272'/>
    <!-- void (void*, typedef size_t)* -->
    <pointer-type-def type-id='type-id-957' size-in-bits='64' id='type-id-337'/>
    <!-- void* (unsigned long int)* -->
    <pointer-type-def type-id='type-id-958' size-in-bits='64' id='type-id-263'/>
    <!-- void*[20][32] -->
    <array-type-def dimensions='2' type-id='type-id-58' size-in-bits='40960' id='type-id-198'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' type-id='type-id-5' id='type-id-926'/>
      <!-- <anonymous range>[32] -->
      <subrange length='32' type-id='type-id-5' id='type-id-164'/>
    </array-type-def>
    <!-- class MallocExtension -->
    <class-decl name='MallocExtension' size-in-bits='64' visibility='default' filepath='src/gperftools/malloc_extension.h' line='90' column='1' id='type-id-927'>
      <member-type access='private'>
        <!-- enum MallocExtension::Ownership -->
        <enum-decl name='Ownership' filepath='./src/gperftools/malloc_extension.h' line='315' column='1' id='type-id-959'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kUnknownOwnership' value='0'/>
          <enumerator name='kOwned' value='1'/>
          <enumerator name='kNotOwned' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct MallocExtension::FreeListInfo -->
        <class-decl name='FreeListInfo' size-in-bits='256' is-struct='yes' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='333' column='1' id='type-id-960'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t MallocExtension::FreeListInfo::min_object_size -->
            <var-decl name='min_object_size' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='334' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- size_t MallocExtension::FreeListInfo::max_object_size -->
            <var-decl name='max_object_size' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='335' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- size_t MallocExtension::FreeListInfo::total_bytes_free -->
            <var-decl name='total_bytes_free' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='336' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- const char* MallocExtension::FreeListInfo::type -->
            <var-decl name='type' type-id='type-id-57' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='337' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (void*, const base::MallocRange*) MallocExtension::RangeFunction -->
        <typedef-decl name='RangeFunction' type-id='type-id-962' filepath='src/gperftools/malloc_extension.h' line='143' column='1' id='type-id-961'/>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- MallocExtension* MallocExtension::instance() -->
        <function-decl name='instance' mangled-name='_ZN15MallocExtension8instanceEv' filepath='src/malloc_extension.cc' line='212' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8instanceEv'>
          <!-- MallocExtension* -->
          <return type-id='type-id-296'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void MallocExtension::Register() -->
        <function-decl name='Register' mangled-name='_ZN15MallocExtension8RegisterEPS_' filepath='src/malloc_extension.cc' line='217' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8RegisterEPS_'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocExtension::Initialize() -->
        <function-decl name='Initialize' mangled-name='_ZN15MallocExtension10InitializeEv' filepath='src/malloc_extension.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension10InitializeEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- MallocExtension::~MallocExtension(int) -->
        <function-decl name='~MallocExtension' mangled-name='_ZN15MallocExtensionD1Ev' filepath='src/malloc_extension.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtensionD1Ev'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- bool MallocExtension::VerifyAllMemory() -->
        <function-decl name='VerifyAllMemory' mangled-name='_ZN15MallocExtension15VerifyAllMemoryEv' filepath='src/malloc_extension.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyAllMemoryEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='3'>
        <!-- bool MallocExtension::VerifyNewMemory(void*) -->
        <function-decl name='VerifyNewMemory' mangled-name='_ZN15MallocExtension15VerifyNewMemoryEPKv' filepath='src/malloc_extension.cc' line='113' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyNewMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='4'>
        <!-- bool MallocExtension::VerifyArrayNewMemory(void*) -->
        <function-decl name='VerifyArrayNewMemory' mangled-name='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' filepath='src/malloc_extension.cc' line='114' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='5'>
        <!-- bool MallocExtension::VerifyMallocMemory(void*) -->
        <function-decl name='VerifyMallocMemory' mangled-name='_ZN15MallocExtension18VerifyMallocMemoryEPKv' filepath='src/malloc_extension.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18VerifyMallocMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='6'>
        <!-- bool MallocExtension::MallocMemoryStats(int*, size_t*, int*) -->
        <function-decl name='MallocMemoryStats' mangled-name='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' filepath='src/malloc_extension.cc' line='130' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='7'>
        <!-- void MallocExtension::GetStats(char*, int) -->
        <function-decl name='GetStats' mangled-name='_ZN15MallocExtension8GetStatsEPci' filepath='src/malloc_extension.cc' line='125' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8GetStatsEPci'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='8'>
        <!-- void MallocExtension::GetHeapSample(MallocExtensionWriter*) -->
        <function-decl name='GetHeapSample' mangled-name='_ZN15MallocExtension13GetHeapSampleEPSs' filepath='src/malloc_extension.cc' line='292' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension13GetHeapSampleEPSs'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-964'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='9'>
        <!-- void MallocExtension::GetHeapGrowthStacks(MallocExtensionWriter*) -->
        <function-decl name='GetHeapGrowthStacks' mangled-name='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' filepath='src/malloc_extension.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension19GetHeapGrowthStacksEPSs'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-964'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='10'>
        <!-- void MallocExtension::Ranges(void*, MallocExtension::RangeFunction*) -->
        <function-decl name='Ranges' mangled-name='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' filepath='src/malloc_extension.cc' line='340' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'MallocExtension::RangeFunction*' -->
          <parameter type-id='type-id-965'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='11'>
        <!-- bool MallocExtension::GetNumericProperty(const char*, size_t*) -->
        <function-decl name='GetNumericProperty' mangled-name='_ZN15MallocExtension18GetNumericPropertyEPKcPm' filepath='src/malloc_extension.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetNumericPropertyEPKcPm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='12'>
        <!-- bool MallocExtension::SetNumericProperty(const char*, size_t) -->
        <function-decl name='SetNumericProperty' mangled-name='_ZN15MallocExtension18SetNumericPropertyEPKcm' filepath='src/malloc_extension.cc' line='121' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetNumericPropertyEPKcm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='13'>
        <!-- void MallocExtension::MarkThreadIdle() -->
        <function-decl name='MarkThreadIdle' mangled-name='_ZN15MallocExtension14MarkThreadIdleEv' filepath='src/malloc_extension.cc' line='146' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadIdleEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='14'>
        <!-- void MallocExtension::MarkThreadBusy() -->
        <function-decl name='MarkThreadBusy' mangled-name='_ZN15MallocExtension14MarkThreadBusyEv' filepath='src/malloc_extension.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadBusyEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='15'>
        <!-- SysAllocator* MallocExtension::GetSystemAllocator() -->
        <function-decl name='GetSystemAllocator' mangled-name='_ZN15MallocExtension18GetSystemAllocatorEv' filepath='src/malloc_extension.cc' line='154' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetSystemAllocatorEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- SysAllocator* -->
          <return type-id='type-id-966'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='16'>
        <!-- void MallocExtension::SetSystemAllocator(SysAllocator*) -->
        <function-decl name='SetSystemAllocator' mangled-name='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' filepath='src/malloc_extension.cc' line='158' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='17'>
        <!-- void MallocExtension::ReleaseToSystem(size_t) -->
        <function-decl name='ReleaseToSystem' mangled-name='_ZN15MallocExtension15ReleaseToSystemEm' filepath='src/malloc_extension.cc' line='162' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReleaseToSystemEm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='18'>
        <!-- void MallocExtension::ReleaseFreeMemory() -->
        <function-decl name='ReleaseFreeMemory' mangled-name='_ZN15MallocExtension17ReleaseFreeMemoryEv' filepath='src/malloc_extension.cc' line='166' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17ReleaseFreeMemoryEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='19'>
        <!-- void MallocExtension::SetMemoryReleaseRate(double) -->
        <function-decl name='SetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20SetMemoryReleaseRateEd' filepath='src/malloc_extension.cc' line='170' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20SetMemoryReleaseRateEd'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='20'>
        <!-- double MallocExtension::GetMemoryReleaseRate() -->
        <function-decl name='GetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20GetMemoryReleaseRateEv' filepath='src/malloc_extension.cc' line='174' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20GetMemoryReleaseRateEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='21'>
        <!-- size_t MallocExtension::GetEstimatedAllocatedSize(size_t) -->
        <function-decl name='GetEstimatedAllocatedSize' mangled-name='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' filepath='src/malloc_extension.cc' line='178' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='22'>
        <!-- size_t MallocExtension::GetAllocatedSize(void*) -->
        <function-decl name='GetAllocatedSize' mangled-name='_ZN15MallocExtension16GetAllocatedSizeEPKv' filepath='src/malloc_extension.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetAllocatedSizeEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='23'>
        <!-- MallocExtension::Ownership MallocExtension::GetOwnership(void*) -->
        <function-decl name='GetOwnership' mangled-name='_ZN15MallocExtension12GetOwnershipEPKv' filepath='src/malloc_extension.cc' line='187' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension12GetOwnershipEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- enum MallocExtension::Ownership -->
          <return type-id='type-id-959'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='24'>
        <!-- void MallocExtension::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
        <function-decl name='GetFreeListSizes' mangled-name='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' filepath='src/malloc_extension.cc' line='191' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
          <parameter type-id='type-id-967'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='25'>
        <!-- void** MallocExtension::ReadStackTraces(int*) -->
        <function-decl name='ReadStackTraces' mangled-name='_ZN15MallocExtension15ReadStackTracesEPi' filepath='src/malloc_extension.cc' line='138' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReadStackTracesEPi'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='26'>
        <!-- void** MallocExtension::ReadHeapGrowthStackTraces() -->
        <function-decl name='ReadHeapGrowthStackTraces' mangled-name='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' filepath='src/malloc_extension.cc' line='142' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
    </class-decl>
    <namespace-decl name='std'>
      <!-- class std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='_Rb_tree&lt;HeapProfileTable::Bucket*, std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;, std::_Select1st&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-934'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;HeapProfileTable::Bucket*&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-968'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-969'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<HeapProfileTable::Bucket*> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-970' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>*' -->
                <parameter type-id='type-id-971' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_Rb_tree_impl(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>*' -->
                <parameter type-id='type-id-971' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
                <parameter type-id='type-id-936'/>
                <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
                <parameter type-id='type-id-972'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-968' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
            <parameter type-id='type-id-936'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree(const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-974'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_erase(std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-976' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-978'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique(const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
            <return type-id='type-id-979'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >' -->
            <parameter type-id='type-id-980' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-978'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='_Rb_tree&lt;MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-939'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> -->
          <class-decl name='_Rb_tree_impl&lt;MemoryRegionMap::RegionCmp, true&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-981'>
            <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-982'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MemoryRegionMap::RegionCmp std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-182' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>*' -->
                <parameter type-id='type-id-983' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_Rb_tree_impl(const MemoryRegionMap::RegionCmp&, const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>*' -->
                <parameter type-id='type-id-983' is-artificial='yes'/>
                <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
                <parameter type-id='type-id-941'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
                <parameter type-id='type-id-984'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-981' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree(const MemoryRegionMap::RegionCmp&, const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
            <parameter type-id='type-id-941'/>
            <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
            <parameter type-id='type-id-942'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree(const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&' -->
            <parameter type-id='type-id-986'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_erase(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const' -->
            <parameter type-id='type-id-987' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-869' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const MemoryRegionMap::Region&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const' -->
            <parameter type-id='type-id-987' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const MemoryRegionMap::Region&' -->
            <parameter type-id='type-id-202' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
            <return type-id='type-id-544'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::allocator<char> -->
      <class-decl name='allocator&lt;char&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='45' column='1' id='type-id-931'>
        <!-- class __gnu_cxx::new_allocator<char> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-988'/>
        <member-function access='private'>
          <!-- void std::allocator<char>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<char>::allocator(const std::allocator<char>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<char>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const MemoryRegionMap::RegionCmp& -->
    <reference-type-def kind='lvalue' type-id='type-id-990' size-in-bits='64' id='type-id-941'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-991' size-in-bits='64' id='type-id-942'/>
    <!-- const ptrdiff_t -->
    <qualified-type-def type-id='type-id-208' const='yes' id='type-id-944'/>
    <!-- const std::allocator<char> -->
    <qualified-type-def type-id='type-id-931' const='yes' id='type-id-945'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-992' size-in-bits='64' id='type-id-937'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
    <qualified-type-def type-id='type-id-917' const='yes' id='type-id-946'/>
    <!-- const std::less<HeapProfileTable::Bucket*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-993' size-in-bits='64' id='type-id-936'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-994' size-in-bits='64' id='type-id-938'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-995' size-in-bits='64' id='type-id-943'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider* -->
    <pointer-type-def type-id='type-id-930' size-in-bits='64' id='type-id-932'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-222' size-in-bits='64' id='type-id-935'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-186' size-in-bits='64' id='type-id-940'/>
    <!-- typedef long int __ssize_t -->
    <typedef-decl name='__ssize_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='180' column='1' id='type-id-947'/>
    <!-- MallocExtension::RangeFunction* -->
    <pointer-type-def type-id='type-id-961' size-in-bits='64' id='type-id-965'/>
    <!-- MallocExtensionWriter* -->
    <pointer-type-def type-id='type-id-996' size-in-bits='64' id='type-id-964'/>
    <!-- SysAllocator* -->
    <pointer-type-def type-id='type-id-997' size-in-bits='64' id='type-id-966'/>
    <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::MyAllocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-982'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-984'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<char> -->
      <class-decl name='new_allocator&lt;char&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-988'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<char>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<char>::new_allocator(const __gnu_cxx::new_allocator<char>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<char>&' -->
            <parameter type-id='type-id-1000'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<char>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-980'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1002'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1003'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-978'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1004' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1004' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-976'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-969'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1005'/>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::allocator(const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-972'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::less<HeapProfileTable::Bucket*> -->
      <class-decl name='less&lt;HeapProfileTable::Bucket*&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-970'>
        <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1007'/>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-979'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::first -->
          <var-decl name='first' type-id='type-id-978' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>*' -->
            <parameter type-id='type-id-1008' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::pair(const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>*' -->
            <parameter type-id='type-id-1008' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1003'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const MemoryRegionMap::RegionCmp -->
    <qualified-type-def type-id='type-id-182' const='yes' id='type-id-990'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-1009' const='yes' id='type-id-991'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1010' size-in-bits='64' id='type-id-984'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1011' size-in-bits='64' id='type-id-974'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1012' size-in-bits='64' id='type-id-986'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1013' size-in-bits='64' id='type-id-972'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1014' const='yes' id='type-id-992'/>
    <!-- const std::less<HeapProfileTable::Bucket*> -->
    <qualified-type-def type-id='type-id-970' const='yes' id='type-id-993'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-222' const='yes' id='type-id-994'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <qualified-type-def type-id='type-id-1015' id='type-id-977'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-186' const='yes' id='type-id-995'/>
    <!-- int* -->
    <pointer-type-def type-id='type-id-1' size-in-bits='64' id='type-id-963'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-934' size-in-bits='64' id='type-id-973'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-973' const='yes' id='type-id-975'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>* -->
    <pointer-type-def type-id='type-id-968' size-in-bits='64' id='type-id-971'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-939' size-in-bits='64' id='type-id-985'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-985' const='yes' id='type-id-987'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>* -->
    <pointer-type-def type-id='type-id-981' size-in-bits='64' id='type-id-983'/>
    <!-- std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1016' size-in-bits='64' id='type-id-976'/>
    <!-- std::allocator<char>* -->
    <pointer-type-def type-id='type-id-931' size-in-bits='64' id='type-id-989'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1017' size-in-bits='64' id='type-id-967'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-982' size-in-bits='64' id='type-id-998'/>
    <!-- __gnu_cxx::new_allocator<char>* -->
    <pointer-type-def type-id='type-id-988' size-in-bits='64' id='type-id-999'/>
    <!-- class STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-1009'>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator(const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-942'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region> >(const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;MemoryRegionMap::Region&gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-984'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class SysAllocator -->
    <class-decl name='SysAllocator' size-in-bits='64' visibility='default' filepath='src/gperftools/malloc_extension.h' line='75' column='1' id='type-id-997'>
      <member-function access='private' constructor='yes'>
        <!-- SysAllocator::SysAllocator() -->
        <function-decl name='SysAllocator' filepath='./src/gperftools/malloc_extension.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- SysAllocator::~SysAllocator(int) -->
        <function-decl name='~SysAllocator' mangled-name='_ZN12SysAllocatorD1Ev' filepath='src/malloc_extension.cc' line='108' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN12SysAllocatorD1Ev'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* SysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN12SysAllocator5AllocEmPmm' filepath='src/gperftools/malloc_extension.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1005'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::new_allocator(const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-1020'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1016'/>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1014'>
        <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1021'/>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator(const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >(const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-972'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
      <class-decl name='binary_function&lt;HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-1007'/>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' size-in-bits='192' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' id='type-id-1017'>
        <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-1023'/>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector() -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='207' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(unsigned long int, const MallocExtension::FreeListInfo&, const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='227' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1025'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='241' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >&' -->
            <parameter type-id='type-id-1026'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::~vector(int) -->
          <function-decl name='~vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='312' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='protected'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, const MallocExtension::FreeListInfo&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const' -->
            <parameter type-id='type-id-1027' name='this' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >' -->
            <parameter type-id='type-id-1028' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1029' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-982' const='yes' id='type-id-1010'/>
    <!-- const __gnu_cxx::new_allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1030' size-in-bits='64' id='type-id-1000'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-934' const='yes' id='type-id-1011'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-939' const='yes' id='type-id-1012'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1031' size-in-bits='64' id='type-id-1003'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1032' size-in-bits='64' id='type-id-1002'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-969' const='yes' id='type-id-1013'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1033' size-in-bits='64' id='type-id-1015'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-980' size-in-bits='64' id='type-id-1001'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-978' size-in-bits='64' id='type-id-1004'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-969' size-in-bits='64' id='type-id-1006'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>* -->
    <pointer-type-def type-id='type-id-979' size-in-bits='64' id='type-id-1008'/>
    <!-- typedef std::string MallocExtensionWriter -->
    <typedef-decl name='MallocExtensionWriter' type-id='type-id-924' filepath='./src/gperftools/malloc_extension.h' line='68' column='1' id='type-id-996'/>
    <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1009' size-in-bits='64' id='type-id-1018'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1005' size-in-bits='64' id='type-id-1019'/>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-1028'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- MallocExtension::FreeListInfo* __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >*' -->
            <parameter type-id='type-id-1035' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::__normal_iterator(MallocExtension::FreeListInfo* const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >*' -->
            <parameter type-id='type-id-1035' is-artificial='yes'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo* const&' -->
            <parameter type-id='type-id-1036'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1021'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::new_allocator(const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1038'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='_Vector_base&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' id='type-id-1023'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl -->
          <class-decl name='_Vector_impl' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' id='type-id-1039'>
            <!-- class std::allocator<MallocExtension::FreeListInfo> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1040'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_Vector_impl() -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl*' -->
                <parameter type-id='type-id-1041' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_Vector_impl(const std::allocator<MallocExtension::FreeListInfo>&) -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl*' -->
                <parameter type-id='type-id-1041' is-artificial='yes'/>
                <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
                <parameter type-id='type-id-1024'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1039' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base() -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='104' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base(unsigned long int, const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::~_Vector_base(int) -->
          <function-decl name='~_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const MallocExtension::FreeListInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-1043' size-in-bits='64' id='type-id-1025'/>
    <!-- const MallocExtension::FreeListInfo& -->
    <qualified-type-def type-id='type-id-1025' id='type-id-1029'/>
    <!-- const __gnu_cxx::new_allocator<char> -->
    <qualified-type-def type-id='type-id-988' const='yes' id='type-id-1030'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1044' size-in-bits='64' id='type-id-1020'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-978' const='yes' id='type-id-1031'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1016' const='yes' id='type-id-1032'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1045' size-in-bits='64' id='type-id-1024'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
    <qualified-type-def type-id='type-id-1046' const='yes' id='type-id-1033'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1047' size-in-bits='64' id='type-id-1026'/>
    <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1014' size-in-bits='64' id='type-id-1022'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-967' const='yes' id='type-id-1027'/>
    <!-- MallocExtension::FreeListInfo* -->
    <pointer-type-def type-id='type-id-960' size-in-bits='64' id='type-id-1034'/>
    <!-- MallocExtension::FreeListInfo* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1048' size-in-bits='64' id='type-id-1036'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* -->
    <pointer-type-def type-id='type-id-1028' size-in-bits='64' id='type-id-1035'/>
    <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1021' size-in-bits='64' id='type-id-1037'/>
    <namespace-decl name='std'>
      <!-- class std::allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='allocator&lt;MallocExtension::FreeListInfo&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1040'>
        <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1049'/>
        <member-function access='private'>
          <!-- void std::allocator<MallocExtension::FreeListInfo>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<MallocExtension::FreeListInfo>::allocator(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<MallocExtension::FreeListInfo>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
      <class-decl name='pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1046'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- HeapProfileTable::AllocValue::Bucket* const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::first -->
          <var-decl name='first' type-id='type-id-1051' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapProfileTable::Snapshot::Entry std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::second -->
          <var-decl name='second' type-id='type-id-218' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>*' -->
            <parameter type-id='type-id-1052' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::pair(HeapProfileTable::AllocValue::Bucket* const&, const HeapProfileTable::Snapshot::Entry&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>*' -->
            <parameter type-id='type-id-1052' is-artificial='yes'/>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const&' -->
            <parameter type-id='type-id-1053'/>
            <!-- parameter of type 'const HeapProfileTable::Snapshot::Entry&' -->
            <parameter type-id='type-id-1054'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const MallocExtension::FreeListInfo -->
    <qualified-type-def type-id='type-id-960' const='yes' id='type-id-1043'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-1005' const='yes' id='type-id-1044'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1055' size-in-bits='64' id='type-id-1038'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1040' const='yes' id='type-id-1045'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
    <qualified-type-def type-id='type-id-1017' const='yes' id='type-id-1047'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1023' size-in-bits='64' id='type-id-1042'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-1039' size-in-bits='64' id='type-id-1041'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const -->
    <qualified-type-def type-id='type-id-219' const='yes' id='type-id-1051'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1051' size-in-bits='64' id='type-id-1053'/>
    <!-- MallocExtension::FreeListInfo* const -->
    <qualified-type-def type-id='type-id-1034' const='yes' id='type-id-1048'/>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='new_allocator&lt;MallocExtension::FreeListInfo&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1049'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::new_allocator(const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1057'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- const HeapProfileTable::Snapshot::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1058' size-in-bits='64' id='type-id-1054'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1021' const='yes' id='type-id-1055'/>
    <!-- std::allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1040' size-in-bits='64' id='type-id-1050'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* -->
    <pointer-type-def type-id='type-id-1046' size-in-bits='64' id='type-id-1052'/>
    <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1049' size-in-bits='64' id='type-id-1056'/>
    <!-- const HeapProfileTable::Snapshot::Entry -->
    <qualified-type-def type-id='type-id-218' const='yes' id='type-id-1058'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1059' size-in-bits='64' id='type-id-1057'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1049' const='yes' id='type-id-1059'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-profile-table.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- AddressMap<HeapProfileTable::AllocValue>* const -->
    <qualified-type-def type-id='type-id-265' const='yes' id='type-id-275'/>
    <!-- HeapProfileTable* const -->
    <qualified-type-def type-id='type-id-245' const='yes' id='type-id-248'/>
    <!-- HeapProfileTable::AllocValue* const -->
    <qualified-type-def type-id='type-id-228' const='yes' id='type-id-1060'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const -->
    <qualified-type-def type-id='type-id-219' const='yes' id='type-id-1051'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const& -->
    <qualified-type-def type-id='type-id-1053' id='type-id-1061'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1051' size-in-bits='64' id='type-id-1053'/>
    <!-- HeapProfileTable::AllocValue::Bucket* const* -->
    <pointer-type-def type-id='type-id-1051' size-in-bits='64' id='type-id-1062'/>
    <!-- HeapProfileTable::AllocValue::Bucket*& -->
    <reference-type-def kind='lvalue' type-id='type-id-219' size-in-bits='64' id='type-id-1063'/>
    <!-- HeapProfileTable::Snapshot* const -->
    <qualified-type-def type-id='type-id-224' const='yes' id='type-id-229'/>
    <!-- HeapProfileTable::Snapshot::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-218' size-in-bits='64' id='type-id-1064'/>
    <!-- HeapProfileTable::Snapshot::Entry* -->
    <pointer-type-def type-id='type-id-218' size-in-bits='64' id='type-id-220'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1005' size-in-bits='64' id='type-id-1019'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1019' const='yes' id='type-id-1065'/>
    <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1021' size-in-bits='64' id='type-id-1037'/>
    <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1037' const='yes' id='type-id-1066'/>
    <!-- bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)* -->
    <pointer-type-def type-id='type-id-1067' size-in-bits='64' id='type-id-1068'/>
    <!-- bool* -->
    <pointer-type-def type-id='type-id-61' size-in-bits='64' id='type-id-131'/>
    <!-- const AddressMap<HeapProfileTable::AllocValue>* const -->
    <qualified-type-def type-id='type-id-266' const='yes' id='type-id-1069'/>
    <!-- const HeapProfileBucket -->
    <qualified-type-def type-id='type-id-212' const='yes' id='type-id-1070'/>
    <!-- const HeapProfileBucket* -->
    <pointer-type-def type-id='type-id-1070' size-in-bits='64' id='type-id-1071'/>
    <!-- const HeapProfileTable::AllocValue& -->
    <qualified-type-def type-id='type-id-419' id='type-id-247'/>
    <!-- const HeapProfileTable::AllocValue::Bucket& -->
    <qualified-type-def type-id='type-id-423' id='type-id-249'/>
    <!-- const HeapProfileTable::DumpArgs& -->
    <qualified-type-def type-id='type-id-273' id='type-id-250'/>
    <!-- const HeapProfileTable::Snapshot::Entry -->
    <qualified-type-def type-id='type-id-218' const='yes' id='type-id-1058'/>
    <!-- const HeapProfileTable::Snapshot::Entry& -->
    <qualified-type-def type-id='type-id-1054' id='type-id-1072'/>
    <!-- const HeapProfileTable::Snapshot::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1058' size-in-bits='64' id='type-id-1054'/>
    <!-- const HeapProfileTable::Snapshot::Entry* -->
    <pointer-type-def type-id='type-id-1058' size-in-bits='64' id='type-id-1073'/>
    <!-- const HeapProfileTable::Snapshot::Entry* const -->
    <qualified-type-def type-id='type-id-1073' const='yes' id='type-id-1074'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-1005' const='yes' id='type-id-1044'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1044' size-in-bits='64' id='type-id-1020'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1044' size-in-bits='64' id='type-id-1075'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1075' const='yes' id='type-id-1076'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1021' const='yes' id='type-id-1055'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1055' size-in-bits='64' id='type-id-1038'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1055' size-in-bits='64' id='type-id-1077'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-934' const='yes' id='type-id-1011'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1011' size-in-bits='64' id='type-id-974'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-1011' size-in-bits='64' id='type-id-1078'/>
    <!-- const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1078' const='yes' id='type-id-1079'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-980' const='yes' id='type-id-1080'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <qualified-type-def type-id='type-id-1081' id='type-id-1082'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1080' size-in-bits='64' id='type-id-1081'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1080' size-in-bits='64' id='type-id-1083'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1083' const='yes' id='type-id-1084'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-978' const='yes' id='type-id-1031'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <qualified-type-def type-id='type-id-1003' id='type-id-1085'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1031' size-in-bits='64' id='type-id-1003'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1031' size-in-bits='64' id='type-id-1086'/>
    <!-- const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1086' const='yes' id='type-id-1087'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1016' const='yes' id='type-id-1032'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1032' size-in-bits='64' id='type-id-1088'/>
    <!-- const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1032' size-in-bits='64' id='type-id-1002'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1089' const='yes' id='type-id-1090'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1090' size-in-bits='64' id='type-id-1091'/>
    <!-- const std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1091' const='yes' id='type-id-1092'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-969' const='yes' id='type-id-1013'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1013' size-in-bits='64' id='type-id-972'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
    <qualified-type-def type-id='type-id-1014' const='yes' id='type-id-992'/>
    <!-- const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-992' size-in-bits='64' id='type-id-937'/>
    <!-- const std::less<HeapProfileTable::Bucket*> -->
    <qualified-type-def type-id='type-id-970' const='yes' id='type-id-993'/>
    <!-- const std::less<HeapProfileTable::Bucket*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-993' size-in-bits='64' id='type-id-936'/>
    <!-- const std::less<HeapProfileTable::Bucket*>* -->
    <pointer-type-def type-id='type-id-993' size-in-bits='64' id='type-id-1093'/>
    <!-- const std::less<HeapProfileTable::Bucket*>* const -->
    <qualified-type-def type-id='type-id-1093' const='yes' id='type-id-1094'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
    <qualified-type-def type-id='type-id-222' const='yes' id='type-id-994'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-994' size-in-bits='64' id='type-id-938'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-994' size-in-bits='64' id='type-id-1095'/>
    <!-- const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-1095' const='yes' id='type-id-1096'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
    <qualified-type-def type-id='type-id-1046' const='yes' id='type-id-1033'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <qualified-type-def type-id='type-id-1015' id='type-id-977'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1033' size-in-bits='64' id='type-id-1015'/>
    <!-- const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* -->
    <pointer-type-def type-id='type-id-1033' size-in-bits='64' id='type-id-1097'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-934' size-in-bits='64' id='type-id-1098'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-934' size-in-bits='64' id='type-id-973'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-973' const='yes' id='type-id-975'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>* -->
    <pointer-type-def type-id='type-id-968' size-in-bits='64' id='type-id-971'/>
    <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>* const -->
    <qualified-type-def type-id='type-id-971' const='yes' id='type-id-1099'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>* const -->
    <qualified-type-def type-id='type-id-1100' const='yes' id='type-id-1101'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-980' size-in-bits='64' id='type-id-1102'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-980' size-in-bits='64' id='type-id-1001'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1001' const='yes' id='type-id-1103'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-978' size-in-bits='64' id='type-id-1104'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-978' size-in-bits='64' id='type-id-1004'/>
    <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* const -->
    <qualified-type-def type-id='type-id-1004' const='yes' id='type-id-1105'/>
    <!-- std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1016' size-in-bits='64' id='type-id-1106'/>
    <!-- std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1016' size-in-bits='64' id='type-id-976'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-969' size-in-bits='64' id='type-id-1107'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-969' size-in-bits='64' id='type-id-1006'/>
    <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >* -->
    <pointer-type-def type-id='type-id-1014' size-in-bits='64' id='type-id-1022'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-222' size-in-bits='64' id='type-id-1108'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* -->
    <pointer-type-def type-id='type-id-222' size-in-bits='64' id='type-id-935'/>
    <!-- std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const -->
    <qualified-type-def type-id='type-id-935' const='yes' id='type-id-1109'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1046' size-in-bits='64' id='type-id-1110'/>
    <!-- std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>* -->
    <pointer-type-def type-id='type-id-1046' size-in-bits='64' id='type-id-1052'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>* -->
    <pointer-type-def type-id='type-id-979' size-in-bits='64' id='type-id-1008'/>
    <!-- void (const HeapProfileBucket*, HeapProfileTable::BufferArgs*)* -->
    <pointer-type-def type-id='type-id-949' size-in-bits='64' id='type-id-199'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*)* -->
    <pointer-type-def type-id='type-id-952' size-in-bits='64' id='type-id-269'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*)* -->
    <pointer-type-def type-id='type-id-953' size-in-bits='64' id='type-id-270'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*)* -->
    <pointer-type-def type-id='type-id-954' size-in-bits='64' id='type-id-274'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, char*)* -->
    <pointer-type-def type-id='type-id-955' size-in-bits='64' id='type-id-268'/>
    <!-- void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&)* -->
    <pointer-type-def type-id='type-id-956' size-in-bits='64' id='type-id-272'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- struct std::__equal<false> -->
      <class-decl name='__equal&lt;false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='796' column='1' id='type-id-1111'>
        <member-function access='public' static='yes'>
          <!-- bool std::__equal<false>::equal<const void* const*, const void**>(void* const*, void**) -->
          <function-decl name='equal&lt;const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='799' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- bool std::__equal<false>::equal<const void**, const void**>(void**, void**) -->
          <function-decl name='equal&lt;const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='799' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<const void**, false> -->
      <class-decl name='__niter_base&lt;const void**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-1112'/>
      <!-- struct std::__niter_base<const void* const*, false> -->
      <class-decl name='__niter_base&lt;const void* const*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-1113'/>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-969'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1005'/>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::allocator(const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-972'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1006' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::less<HeapProfileTable::Bucket*> -->
      <class-decl name='less&lt;HeapProfileTable::Bucket*&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-970'>
        <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1007'/>
      </class-decl>
      <!-- struct std::binary_function<HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool> -->
      <class-decl name='binary_function&lt;HeapProfileTable::Bucket*, HeapProfileTable::Bucket*, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-1007'/>
      <!-- class std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='_Rb_tree&lt;HeapProfileTable::Bucket*, std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;, std::_Select1st&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-934'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;HeapProfileTable::Bucket*&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-968'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-969'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<HeapProfileTable::Bucket*> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-970' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>*' -->
                <parameter type-id='type-id-971' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>::_Rb_tree_impl(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false>*' -->
                <parameter type-id='type-id-971' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
                <parameter type-id='type-id-936'/>
                <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
                <parameter type-id='type-id-972'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree_impl<std::less<HeapProfileTable::Bucket*>, false> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-968' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
            <parameter type-id='type-id-936'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_Rb_tree(const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-974'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-973' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_erase(std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-976' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE10_M_insert_EPKSt18_Rb_tree_node_baseSG_RKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-978'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique(const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE16_M_insert_uniqueERKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
            <return type-id='type-id-979'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIP17HeapProfileBucketSt4pairIKS1_N16HeapProfileTable8Snapshot5EntryEESt10_Select1stIS7_ESt4lessIS1_ESaIS7_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS7_ERKS7_'>
            <!-- implicit parameter of type 'std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >* const' -->
            <parameter type-id='type-id-975' name='this' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >' -->
            <parameter type-id='type-id-980' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- parameter of type 'const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>&' -->
            <parameter type-id='type-id-977' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
            <return type-id='type-id-978'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1014'>
        <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1021'/>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator(const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >(const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1022' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-972'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__miter_base<const void* const*, false> -->
      <class-decl name='__miter_base&lt;const void* const*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-1114'/>
      <!-- struct std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-978'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1004' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1004' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-976'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> -->
      <class-decl name='pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1046'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- HeapProfileTable::AllocValue::Bucket* const std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::first -->
          <var-decl name='first' type-id='type-id-1051' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- HeapProfileTable::Snapshot::Entry std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::second -->
          <var-decl name='second' type-id='type-id-218' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>*' -->
            <parameter type-id='type-id-1052' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>::pair(HeapProfileTable::AllocValue::Bucket* const&, const HeapProfileTable::Snapshot::Entry&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>*' -->
            <parameter type-id='type-id-1052' is-artificial='yes'/>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const&' -->
            <parameter type-id='type-id-1053'/>
            <!-- parameter of type 'const HeapProfileTable::Snapshot::Entry&' -->
            <parameter type-id='type-id-1054'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' id='type-id-1089'>
        <!-- struct std::unary_function<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, HeapProfileTable::Bucket* const> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1115'/>
      </class-decl>
      <!-- struct std::unary_function<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, HeapProfileTable::Bucket* const> -->
      <class-decl name='unary_function&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt;, HeapProfileTable::Bucket* const&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-1115'/>
      <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='map&lt;HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less&lt;HeapProfileTable::Bucket*&gt;, std::allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-222'>
        <member-type access='private'>
          <!-- class std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-933'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<HeapProfileTable::Bucket*, std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry>, std::_Select1st<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-934' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map(const std::less<HeapProfileTable::Bucket*>&, const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<HeapProfileTable::Bucket*>&' -->
            <parameter type-id='type-id-936'/>
            <!-- parameter of type 'const std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-937'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::map(const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-935' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<HeapProfileTable::Bucket*, HeapProfileTable::Snapshot::Entry, std::less<HeapProfileTable::Bucket*>, std::allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-938'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__iter_swap<true> -->
      <class-decl name='__iter_swap&lt;true&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='96' column='1' id='type-id-1116'>
        <member-function access='public' static='yes'>
          <!-- void std::__iter_swap<true>::iter_swap<HeapProfileTable::Bucket**, HeapProfileTable::Bucket**>(HeapProfileTable::AllocValue::Bucket**) -->
          <function-decl name='iter_swap&lt;HeapProfileTable::Bucket**, HeapProfileTable::Bucket**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='99' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
            <parameter type-id='type-id-243'/>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
            <parameter type-id='type-id-243'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void std::__iter_swap<true>::iter_swap<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*) -->
          <function-decl name='iter_swap&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='99' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
            <parameter type-id='type-id-220'/>
            <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
            <parameter type-id='type-id-220'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<HeapProfileTable::Snapshot::Entry*, false> -->
      <class-decl name='__niter_base&lt;HeapProfileTable::Snapshot::Entry*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-1117'/>
      <!-- struct std::__miter_base<HeapProfileTable::Snapshot::Entry*, false> -->
      <class-decl name='__miter_base&lt;HeapProfileTable::Snapshot::Entry*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-1118'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-979'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::first -->
          <var-decl name='first' type-id='type-id-978' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>*' -->
            <parameter type-id='type-id-1008' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>::pair(const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, bool>*' -->
            <parameter type-id='type-id-1008' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1003'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-980'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1002'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1001' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1003'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<HeapProfileTable::Bucket**, false> -->
      <class-decl name='__niter_base&lt;HeapProfileTable::Bucket**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-1119'/>
      <!-- struct std::__miter_base<HeapProfileTable::Bucket**, false> -->
      <class-decl name='__miter_base&lt;HeapProfileTable::Bucket**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-1120'/>
      <!-- bool std::__equal_aux<const void* const*, const void**>(void* const*, void* const*, void**) -->
      <function-decl name='__equal_aux&lt;const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='822' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void std::__unguarded_linear_insert<HeapProfileTable::Bucket**, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket*, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__unguarded_linear_insert&lt;HeapProfileTable::Bucket**, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2079' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*' -->
        <parameter type-id='type-id-219'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__unguarded_linear_insert<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry) -->
      <function-decl name='__unguarded_linear_insert&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2063' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'struct HeapProfileTable::Snapshot::Entry' -->
        <parameter type-id='type-id-218'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::swap<HeapProfileTable::Bucket*>(HeapProfileTable::AllocValue::Bucket*&, HeapProfileTable::AllocValue::Bucket*&) -->
      <function-decl name='swap&lt;HeapProfileTable::Bucket*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/move.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*&' -->
        <parameter type-id='type-id-1063'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*&' -->
        <parameter type-id='type-id-1063'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::iter_swap<HeapProfileTable::Bucket**, HeapProfileTable::Bucket**>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**) -->
      <function-decl name='iter_swap&lt;HeapProfileTable::Bucket**, HeapProfileTable::Bucket**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='117' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::swap<HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry&, HeapProfileTable::Snapshot::Entry&) -->
      <function-decl name='swap&lt;HeapProfileTable::Snapshot::Entry&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/move.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry&' -->
        <parameter type-id='type-id-1064'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry&' -->
        <parameter type-id='type-id-1064'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::iter_swap<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='iter_swap&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='117' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__push_heap<HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, long int, long int, HeapProfileTable::AllocValue::Bucket*, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__push_heap&lt;HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='176' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*' -->
        <parameter type-id='type-id-219'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::make_heap<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='make_heap&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='414' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__pop_heap<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__pop_heap&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='322' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::sort_heap<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='sort_heap&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='482' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::partial_sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='partial_sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='5095' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- HeapProfileTable::AllocValue::Bucket* const& std::__median<HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket* const&, HeapProfileTable::AllocValue::Bucket* const&, HeapProfileTable::AllocValue::Bucket* const&, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__median&lt;HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='119' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const&' -->
        <parameter type-id='type-id-1053'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const&' -->
        <parameter type-id='type-id-1053'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const&' -->
        <parameter type-id='type-id-1053'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- HeapProfileTable::AllocValue::Bucket* const& -->
        <return type-id='type-id-1053'/>
      </function-decl>
      <!-- HeapProfileTable::AllocValue::Bucket** std::__unguarded_partition<HeapProfileTable::Bucket**, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket*, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__unguarded_partition&lt;HeapProfileTable::Bucket**, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2224' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*' -->
        <parameter type-id='type-id-219'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- HeapProfileTable::AllocValue::Bucket** -->
        <return type-id='type-id-243'/>
      </function-decl>
      <!-- void std::__push_heap<HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, long int, long int, HeapProfileTable::Snapshot::Entry) -->
      <function-decl name='__push_heap&lt;HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='130' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'struct HeapProfileTable::Snapshot::Entry' -->
        <parameter type-id='type-id-218'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::make_heap<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='make_heap&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='373' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__heap_select<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__heap_select&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='1900' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::sort_heap<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='sort_heap&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='452' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::partial_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='partial_sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='5055' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- const HeapProfileTable::Snapshot::Entry& std::__median<HeapProfileTable::Snapshot::Entry>(const HeapProfileTable::Snapshot::Entry&, const HeapProfileTable::Snapshot::Entry&, const HeapProfileTable::Snapshot::Entry&) -->
      <function-decl name='__median&lt;HeapProfileTable::Snapshot::Entry&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const HeapProfileTable::Snapshot::Entry&' -->
        <parameter type-id='type-id-1054'/>
        <!-- parameter of type 'const HeapProfileTable::Snapshot::Entry&' -->
        <parameter type-id='type-id-1054'/>
        <!-- parameter of type 'const HeapProfileTable::Snapshot::Entry&' -->
        <parameter type-id='type-id-1054'/>
        <!-- const HeapProfileTable::Snapshot::Entry& -->
        <return type-id='type-id-1054'/>
      </function-decl>
      <!-- HeapProfileTable::Snapshot::Entry* std::__unguarded_partition<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry) -->
      <function-decl name='__unguarded_partition&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2204' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'struct HeapProfileTable::Snapshot::Entry' -->
        <parameter type-id='type-id-218'/>
        <!-- HeapProfileTable::Snapshot::Entry* -->
        <return type-id='type-id-220'/>
      </function-decl>
      <!-- HeapProfileTable::Snapshot::Entry* std::__copy_move_backward_a<false, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__copy_move_backward_a&lt;false, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- HeapProfileTable::Snapshot::Entry* -->
        <return type-id='type-id-220'/>
      </function-decl>
      <!-- HeapProfileTable::Snapshot::Entry* std::__copy_move_backward_a2<false, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__copy_move_backward_a2&lt;false, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- HeapProfileTable::Snapshot::Entry* -->
        <return type-id='type-id-220'/>
      </function-decl>
      <!-- HeapProfileTable::Snapshot::Entry* std::copy_backward<HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='copy_backward&lt;HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- HeapProfileTable::Snapshot::Entry* -->
        <return type-id='type-id-220'/>
      </function-decl>
      <!-- void std::__unguarded_insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__unguarded_insertion_sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2141' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- long int std::__lg(long int) -->
      <function-decl name='__lg' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2323' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- long int -->
        <return type-id='type-id-85'/>
      </function-decl>
      <!-- void std::__final_insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__final_insertion_sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2173' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const char*) -->
      <function-decl name='operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2198' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
        <parameter type-id='type-id-632'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
        <return type-id='type-id-917'/>
      </function-decl>
      <!-- void std::sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='5207' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- HeapProfileTable::AllocValue::Bucket** std::__copy_move_backward_a<false, HeapProfileTable::Bucket**, HeapProfileTable::Bucket**>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**) -->
      <function-decl name='__copy_move_backward_a&lt;false, HeapProfileTable::Bucket**, HeapProfileTable::Bucket**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- HeapProfileTable::AllocValue::Bucket** -->
        <return type-id='type-id-243'/>
      </function-decl>
      <!-- HeapProfileTable::AllocValue::Bucket** std::__copy_move_backward_a2<false, HeapProfileTable::Bucket**, HeapProfileTable::Bucket**>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**) -->
      <function-decl name='__copy_move_backward_a2&lt;false, HeapProfileTable::Bucket**, HeapProfileTable::Bucket**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- HeapProfileTable::AllocValue::Bucket** -->
        <return type-id='type-id-243'/>
      </function-decl>
      <!-- HeapProfileTable::AllocValue::Bucket** std::copy_backward<HeapProfileTable::Bucket**, HeapProfileTable::Bucket**>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**) -->
      <function-decl name='copy_backward&lt;HeapProfileTable::Bucket**, HeapProfileTable::Bucket**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- HeapProfileTable::AllocValue::Bucket** -->
        <return type-id='type-id-243'/>
      </function-decl>
      <!-- void std::__unguarded_insertion_sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__unguarded_insertion_sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2154' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__final_insertion_sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__final_insertion_sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2188' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='5244' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void** std::__copy_move_a<false, const void* const*, const void**>(void* const*, void* const*, void**) -->
      <function-decl name='__copy_move_a&lt;false, const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::__copy_move_a2<false, const void* const*, const void**>(void* const*, void* const*, void**) -->
      <function-decl name='__copy_move_a2&lt;false, const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- bool std::equal<const void* const*, const void**>(void* const*, void* const*, void**) -->
      <function-decl name='equal&lt;const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='952' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void** std::copy<const void* const*, const void**>(void* const*, void* const*, void**) -->
      <function-decl name='copy&lt;const void* const*, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void* const*' -->
        <parameter type-id='type-id-205'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void std::__pop_heap<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__pop_heap&lt;HeapProfileTable::Snapshot::Entry*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='250' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- struct std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1016'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1121'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1122'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::_Rb_tree_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1123'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >, std::_Rb_tree_const_iterator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1124'/>
      <!-- void std::__insertion_sort<HeapProfileTable::Snapshot::Entry*>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*) -->
      <function-decl name='__insertion_sort&lt;HeapProfileTable::Snapshot::Entry*&gt;' mangled-name='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2096' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__insertion_sortIPN16HeapProfileTable8Snapshot5EntryEEvT_S4_'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__adjust_heap<HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, long int, long int, HeapProfileTable::AllocValue::Bucket*, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__adjust_heap&lt;HeapProfileTable::Bucket**, long int, HeapProfileTable::Bucket*, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__adjust_heapIPP17HeapProfileBucketlS1_PFbP16HeapProfileStatsS4_EEvT_T0_S8_T1_T2_'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket*' -->
        <parameter type-id='type-id-219'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__heap_select<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__heap_select&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='1913' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__heap_selectIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_S7_T0_'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__introsort_loop<HeapProfileTable::Bucket**, long int, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, long int, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__introsort_loop&lt;HeapProfileTable::Bucket**, long int, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2277' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__introsort_loopIPP17HeapProfileBucketlPFbP16HeapProfileStatsS4_EEvT_S7_T0_T1_'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__adjust_heap<HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry>(HeapProfileTable::Snapshot::Entry*, long int, long int, HeapProfileTable::Snapshot::Entry) -->
      <function-decl name='__adjust_heap&lt;HeapProfileTable::Snapshot::Entry*, long int, HeapProfileTable::Snapshot::Entry&gt;' mangled-name='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_heap.h' line='224' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt13__adjust_heapIPN16HeapProfileTable8Snapshot5EntryElS2_EvT_T0_S5_T1_'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- parameter of type 'struct HeapProfileTable::Snapshot::Entry' -->
        <parameter type-id='type-id-218'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__introsort_loop<HeapProfileTable::Snapshot::Entry*, long int>(HeapProfileTable::Snapshot::Entry*, HeapProfileTable::Snapshot::Entry*, long int) -->
      <function-decl name='__introsort_loop&lt;HeapProfileTable::Snapshot::Entry*, long int&gt;' mangled-name='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2245' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__introsort_loopIPN16HeapProfileTable8Snapshot5EntryElEvT_S4_T0_'>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'HeapProfileTable::Snapshot::Entry*' -->
        <parameter type-id='type-id-220'/>
        <!-- parameter of type 'long int' -->
        <parameter type-id='type-id-85'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::__insertion_sort<HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)>(HeapProfileTable::AllocValue::Bucket**, HeapProfileTable::AllocValue::Bucket**, bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*) -->
      <function-decl name='__insertion_sort&lt;HeapProfileTable::Bucket**, bool (*)(HeapProfileTable::Stats*, HeapProfileTable::Stats*)&gt;' mangled-name='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algo.h' line='2119' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZSt16__insertion_sortIPP17HeapProfileBucketPFbP16HeapProfileStatsS4_EEvT_S7_T0_'>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
        <parameter type-id='type-id-243'/>
        <!-- parameter of type 'bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*)*' -->
        <parameter type-id='type-id-1068'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1005'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::new_allocator(const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >&' -->
            <parameter type-id='type-id-1020'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > >*' -->
            <parameter type-id='type-id-1019' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1021'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::new_allocator(const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >&' -->
            <parameter type-id='type-id-1038'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<HeapProfileTable::Bucket* const, HeapProfileTable::Snapshot::Entry> >*' -->
            <parameter type-id='type-id-1037' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_heap_check_max_leaks -->
      <var-decl name='FLAGS_heap_check_max_leaks' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE' visibility='default' filepath='src/heap-profile-table.cc' line='87' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead26FLAGS_heap_check_max_leaksE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_noheap_check_max_leaks -->
      <var-decl name='FLAGS_noheap_check_max_leaks' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE' visibility='default' filepath='src/heap-profile-table.cc' line='89' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead28FLAGS_noheap_check_max_leaksE'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cleanup_old_heap_profiles -->
      <var-decl name='FLAGS_cleanup_old_heap_profiles' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE' visibility='default' filepath='src/heap-profile-table.cc' line='83' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead31FLAGS_cleanup_old_heap_profilesE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocleanup_old_heap_profiles -->
      <var-decl name='FLAGS_nocleanup_old_heap_profiles' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE' visibility='default' filepath='src/heap-profile-table.cc' line='85' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead33FLAGS_nocleanup_old_heap_profilesE'/>
    </namespace-decl>
    <!-- bool (HeapProfileTable::DumpArgs::Stats*, HeapProfileTable::DumpArgs::Stats*) -->
    <function-type size-in-bits='64' id='type-id-1067'>
      <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
      <parameter type-id='type-id-215'/>
      <!-- parameter of type 'HeapProfileTable::DumpArgs::Stats*' -->
      <parameter type-id='type-id-215'/>
      <!-- bool -->
      <return type-id='type-id-61'/>
    </function-type>
    <!-- void (const HeapProfileBucket*, HeapProfileTable::BufferArgs*) -->
    <function-type size-in-bits='64' id='type-id-949'>
      <!-- parameter of type 'const HeapProfileBucket*' -->
      <parameter type-id='type-id-1071'/>
      <!-- parameter of type 'HeapProfileTable::BufferArgs*' -->
      <parameter type-id='type-id-200'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::AddNonLiveArgs*) -->
    <function-type size-in-bits='64' id='type-id-952'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'HeapProfileTable::AddNonLiveArgs*' -->
      <parameter type-id='type-id-254'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot*) -->
    <function-type size-in-bits='64' id='type-id-953'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'HeapProfileTable::Snapshot*' -->
      <parameter type-id='type-id-224'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, HeapProfileTable::Snapshot::ReportState*) -->
    <function-type size-in-bits='64' id='type-id-954'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'HeapProfileTable::Snapshot::ReportState*' -->
      <parameter type-id='type-id-230'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, char*) -->
    <function-type size-in-bits='64' id='type-id-955'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, HeapProfileTable::AllocValue*, const HeapProfileTable::DumpArgs&) -->
    <function-type size-in-bits='64' id='type-id-956'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'HeapProfileTable::AllocValue*' -->
      <parameter type-id='type-id-228'/>
      <!-- parameter of type 'const HeapProfileTable::DumpArgs&' -->
      <parameter type-id='type-id-273'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>* -->
    <pointer-type-def type-id='type-id-1125' size-in-bits='64' id='type-id-1100'/>
    <namespace-decl name='std'>
      <class-decl name='_Rb_tree&lt;const void*, std::pair&lt;const void* const, const char*&gt;, std::_Select1st&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-1126'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;const void*&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-1125'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1127'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<const void*> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-1128' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>*' -->
                <parameter type-id='type-id-1100' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_Rb_tree_impl(const std::less<const void*>&, const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>*' -->
                <parameter type-id='type-id-1100' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<const void*>&' -->
                <parameter type-id='type-id-1129'/>
                <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
                <parameter type-id='type-id-1130'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1127'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1131'/>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::allocator(const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1130'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::less<const void*> -->
      <class-decl name='less&lt;const void*&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-1128'>
        <!-- struct std::binary_function<const void*, const void*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1133'/>
      </class-decl>
    </namespace-decl>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1134' size-in-bits='64' id='type-id-1130'/>
    <!-- const std::less<const void*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1135' size-in-bits='64' id='type-id-1129'/>
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1131'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::new_allocator(const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1137'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='std'>
      <!-- struct std::binary_function<const void*, const void*, bool> -->
      <class-decl name='binary_function&lt;const void*, const void*, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-1133'/>
    </namespace-decl>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1127' const='yes' id='type-id-1134'/>
    <!-- const std::less<const void*> -->
    <qualified-type-def type-id='type-id-1128' const='yes' id='type-id-1135'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1127' size-in-bits='64' id='type-id-1132'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1131' size-in-bits='64' id='type-id-1136'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1138' size-in-bits='64' id='type-id-1137'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1131' const='yes' id='type-id-1138'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/heap-profiler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- struct HeapProfileEndWriter -->
    <class-decl name='HeapProfileEndWriter' size-in-bits='8' is-struct='yes' visibility='default' filepath='src/heap-profiler.cc' line='593' column='1' id='type-id-1139'>
      <member-function access='public' destructor='yes'>
        <!-- HeapProfileEndWriter::~HeapProfileEndWriter(int) -->
        <function-decl name='~HeapProfileEndWriter' mangled-name='_ZN20HeapProfileEndWriterD1Ev' filepath='src/heap-profiler.cc' line='594' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN20HeapProfileEndWriterD1Ev'>
          <!-- implicit parameter of type 'HeapProfileEndWriter*' -->
          <parameter type-id='type-id-1140' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HeapProfileEndWriter* -->
    <pointer-type-def type-id='type-id-1139' size-in-bits='64' id='type-id-1140'/>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_allocation_interval -->
      <var-decl name='FLAGS_heap_profile_allocation_interval' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='95' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead38FLAGS_heap_profile_allocation_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_allocation_interval -->
      <var-decl name='FLAGS_noheap_profile_allocation_interval' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='99' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_noheap_profile_allocation_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_deallocation_interval -->
      <var-decl name='FLAGS_heap_profile_deallocation_interval' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='100' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead40FLAGS_heap_profile_deallocation_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_deallocation_interval -->
      <var-decl name='FLAGS_noheap_profile_deallocation_interval' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='104' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead42FLAGS_noheap_profile_deallocation_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_inuse_interval -->
      <var-decl name='FLAGS_heap_profile_inuse_interval' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='107' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_heap_profile_inuse_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_inuse_interval -->
      <var-decl name='FLAGS_noheap_profile_inuse_interval' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='111' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead35FLAGS_noheap_profile_inuse_intervalE'/>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_heap_profile_time_interval -->
      <var-decl name='FLAGS_heap_profile_time_interval' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='112' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead32FLAGS_heap_profile_time_intervalE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_noheap_profile_time_interval -->
      <var-decl name='FLAGS_noheap_profile_time_interval' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE' visibility='default' filepath='src/heap-profiler.cc' line='115' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead34FLAGS_noheap_profile_time_intervalE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_log -->
      <var-decl name='FLAGS_mmap_log' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE' visibility='default' filepath='src/heap-profiler.cc' line='116' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead14FLAGS_mmap_logE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_log -->
      <var-decl name='FLAGS_nommap_log' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE' visibility='default' filepath='src/heap-profiler.cc' line='118' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead16FLAGS_nommap_logE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_mmap_profile -->
      <var-decl name='FLAGS_mmap_profile' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='119' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead18FLAGS_mmap_profileE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nommap_profile -->
      <var-decl name='FLAGS_nommap_profile' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='121' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead20FLAGS_nommap_profileE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_only_mmap_profile -->
      <var-decl name='FLAGS_only_mmap_profile' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='122' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead23FLAGS_only_mmap_profileE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_noonly_mmap_profile -->
      <var-decl name='FLAGS_noonly_mmap_profile' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE' visibility='default' filepath='src/heap-profiler.cc' line='125' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead25FLAGS_noonly_mmap_profileE'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- void HeapProfilerDump(const char*) -->
    <function-decl name='HeapProfilerDump' mangled-name='HeapProfilerDump' filepath='src/heap-profiler.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerDump'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='reason' filepath='src/heap-profiler.cc' line='533' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int IsHeapProfilerRunning() -->
    <function-decl name='IsHeapProfilerRunning' mangled-name='IsHeapProfilerRunning' filepath='src/heap-profiler.cc' line='487' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='IsHeapProfilerRunning'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- char* GetHeapProfile() -->
    <function-decl name='GetHeapProfile' mangled-name='GetHeapProfile' filepath='src/heap-profiler.cc' line='210' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='GetHeapProfile'>
      <!-- char* -->
      <return type-id='type-id-118'/>
    </function-decl>
    <!-- void HeapProfilerStop() -->
    <function-decl name='HeapProfilerStop' mangled-name='HeapProfilerStop' filepath='src/heap-profiler.cc' line='492' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerStop'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void HeapProfilerStart(const char*) -->
    <function-decl name='HeapProfilerStart' mangled-name='HeapProfilerStart' filepath='src/heap-profiler.cc' line='421' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='HeapProfilerStart'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='reason' filepath='src/heap-profiler.cc' line='533' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/internal_logging.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- char[200] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='1600' id='type-id-1141'>
      <!-- <anonymous range>[200] -->
      <subrange length='200' type-id='type-id-5' id='type-id-1142'/>
    </array-type-def>
    <!-- TCMalloc_Printer* const -->
    <qualified-type-def type-id='type-id-1143' const='yes' id='type-id-1144'/>
    <!-- const tcmalloc::LogItem -->
    <qualified-type-def type-id='type-id-1145' const='yes' id='type-id-1146'/>
    <!-- const tcmalloc::LogItem& -->
    <qualified-type-def type-id='type-id-1147' id='type-id-1148'/>
    <!-- const tcmalloc::LogItem& -->
    <reference-type-def kind='lvalue' type-id='type-id-1146' size-in-bits='64' id='type-id-1147'/>
    <!-- tcmalloc::Logger* -->
    <pointer-type-def type-id='type-id-1149' size-in-bits='64' id='type-id-1150'/>
    <!-- tcmalloc::Logger* const -->
    <qualified-type-def type-id='type-id-1150' const='yes' id='type-id-1151'/>
    <!-- void (const char*, int)* -->
    <pointer-type-def type-id='type-id-1152' size-in-bits='64' id='type-id-1153'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::Logger -->
      <class-decl name='Logger' size-in-bits='1728' visibility='default' filepath='src/internal_logging.cc' line='66' column='1' id='type-id-1149'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::Logger::kBufSize -->
          <var-decl name='kBufSize' type-id='type-id-144' visibility='default' filepath='src/internal_logging.cc' line='72' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::Logger::p_ -->
          <var-decl name='p_' type-id='type-id-118' visibility='default' filepath='src/internal_logging.cc' line='73' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- char* tcmalloc::Logger::end_ -->
          <var-decl name='end_' type-id='type-id-118' visibility='default' filepath='src/internal_logging.cc' line='74' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- char tcmalloc::Logger::buf_[200] -->
          <var-decl name='buf_' type-id='type-id-1141' visibility='default' filepath='src/internal_logging.cc' line='75' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::AddStr(const char*, int) -->
          <function-decl name='AddStr' mangled-name='_ZN8tcmalloc6Logger6AddStrEPKci' filepath='src/internal_logging.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger6AddStrEPKci'>
            <!-- implicit parameter of type 'tcmalloc::Logger* const' -->
            <parameter type-id='type-id-1151' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='str' filepath='src/internal_logging.cc' line='152' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='n' filepath='src/internal_logging.cc' line='152' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::AddNum(uint64_t, int) -->
          <function-decl name='AddNum' mangled-name='_ZN8tcmalloc6Logger6AddNumEmi' filepath='src/internal_logging.cc' line='162' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger6AddNumEmi'>
            <!-- implicit parameter of type 'tcmalloc::Logger* const' -->
            <parameter type-id='type-id-1151' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef uint64_t' -->
            <parameter type-id='type-id-15' name='num' filepath='src/internal_logging.cc' line='162' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='base' filepath='src/internal_logging.cc' line='162' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::Logger::Add(const tcmalloc::LogItem&) -->
          <function-decl name='Add' mangled-name='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE' filepath='src/internal_logging.cc' line='123' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Logger3AddERKNS_7LogItemE'>
            <!-- implicit parameter of type 'tcmalloc::Logger* const' -->
            <parameter type-id='type-id-1151' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const tcmalloc::LogItem&' -->
            <parameter type-id='type-id-1148' name='item' filepath='src/internal_logging.cc' line='123' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- void tcmalloc::Log(tcmalloc::LogMode, const char*, int, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem) -->
      <function-decl name='Log' mangled-name='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_' filepath='src/internal_logging.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc3LogENS_7LogModeEPKciNS_7LogItemES3_S3_S3_'>
        <!-- parameter of type 'enum tcmalloc::LogMode' -->
        <parameter type-id='type-id-1154'/>
        <!-- parameter of type 'const char*' -->
        <parameter type-id='type-id-57'/>
        <!-- parameter of type 'int' -->
        <parameter type-id='type-id-1'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1145'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1145'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1145'/>
        <!-- parameter of type 'class tcmalloc::LogItem' -->
        <parameter type-id='type-id-1145'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void (const char*, int)* tcmalloc::log_message_writer -->
      <var-decl name='log_message_writer' type-id='type-id-1153' mangled-name='_ZN8tcmalloc18log_message_writerE' visibility='default' filepath='src/internal_logging.cc' line='63' column='1' elf-symbol-id='_ZN8tcmalloc18log_message_writerE'/>
    </namespace-decl>
    <!-- TCMalloc_Printer* -->
    <pointer-type-def type-id='type-id-1155' size-in-bits='64' id='type-id-1143'/>
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::LogItem -->
      <class-decl name='LogItem' size-in-bits='128' visibility='default' filepath='src/internal_logging.h' line='70' column='1' id='type-id-1145'>
        <member-type access='private'>
          <!-- enum tcmalloc::LogItem::Tag -->
          <enum-decl name='Tag' filepath='src/internal_logging.h' line='83' column='1' id='type-id-1156'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='kStr' value='0'/>
            <enumerator name='kSigned' value='1'/>
            <enumerator name='kUnsigned' value='2'/>
            <enumerator name='kPtr' value='3'/>
            <enumerator name='kEnd' value='4'/>
          </enum-decl>
        </member-type>
        <member-type access='private'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} -->
          <union-decl name='__anonymous_union__' size-in-bits='64' is-anonymous='yes' visibility='default' filepath='src/internal_logging.h' line='91' column='1' id='type-id-1157'>
            <data-member access='public'>
              <!-- const char* str -->
              <var-decl name='str' type-id='type-id-57' visibility='default' filepath='src/internal_logging.h' line='92' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- void* ptr -->
              <var-decl name='ptr' type-id='type-id-58' visibility='default' filepath='src/internal_logging.h' line='93' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- int64_t snum -->
              <var-decl name='snum' type-id='type-id-103' visibility='default' filepath='src/internal_logging.h' line='94' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- uint64_t unum -->
              <var-decl name='unum' type-id='type-id-15' visibility='default' filepath='src/internal_logging.h' line='95' column='1'/>
            </data-member>
          </union-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::LogItem::Tag tcmalloc::LogItem::tag_ -->
          <var-decl name='tag_' type-id='type-id-1156' visibility='default' filepath='src/internal_logging.h' line='90' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} tcmalloc::LogItem::u_ -->
          <var-decl name='u_' type-id='type-id-1157' visibility='default' filepath='src/internal_logging.h' line='96' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem() -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(const char*) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long int' -->
            <parameter type-id='type-id-85'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long long int' -->
            <parameter type-id='type-id-1159'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(unsigned int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'unsigned int' -->
            <parameter type-id='type-id-64'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(unsigned long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='78' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long long unsigned int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long long unsigned int' -->
            <parameter type-id='type-id-1160'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(void*) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='tcmalloc'>
      <!-- enum tcmalloc::LogMode -->
      <enum-decl name='LogMode' filepath='src/internal_logging.h' line='61' column='1' id='type-id-1154'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='kLog' value='0'/>
        <enumerator name='kCrash' value='1'/>
        <enumerator name='kCrashWithStats' value='2'/>
      </enum-decl>
    </namespace-decl>
    <!-- void (const char*, int) -->
    <function-type size-in-bits='64' id='type-id-1152'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- class TCMalloc_Printer -->
    <class-decl name='TCMalloc_Printer' size-in-bits='128' visibility='default' filepath='src/internal_logging.h' line='126' column='1' id='type-id-1155'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- char* TCMalloc_Printer::buf_ -->
        <var-decl name='buf_' type-id='type-id-118' visibility='default' filepath='src/internal_logging.h' line='128' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- int TCMalloc_Printer::left_ -->
        <var-decl name='left_' type-id='type-id-1' visibility='default' filepath='src/internal_logging.h' line='129' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- TCMalloc_Printer::TCMalloc_Printer(char*, int) -->
        <function-decl name='TCMalloc_Printer' filepath='src/internal_logging.h' line='133' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'TCMalloc_Printer*' -->
          <parameter type-id='type-id-1143' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void TCMalloc_Printer::printf(const char*, ...) -->
        <function-decl name='printf' mangled-name='_ZN16TCMalloc_Printer6printfEPKcz' filepath='src/internal_logging.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16TCMalloc_Printer6printfEPKcz'>
          <!-- implicit parameter of type 'TCMalloc_Printer* const' -->
          <parameter type-id='type-id-1144' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='format' filepath='src/internal_logging.cc' line='177' column='1'/>
          <parameter is-variadic='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- long long int -->
    <type-decl name='long long int' size-in-bits='64' id='type-id-1159'/>
    <!-- long long unsigned int -->
    <type-decl name='long long unsigned int' size-in-bits='64' id='type-id-1160'/>
    <!-- tcmalloc::LogItem* -->
    <pointer-type-def type-id='type-id-1145' size-in-bits='64' id='type-id-1158'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/malloc_extension.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- enum MallocExtension_Ownership -->
    <enum-decl name='MallocExtension_Ownership' filepath='src/gperftools/malloc_extension_c.h' line='87' column='1' id='type-id-1161'>
      <underlying-type type-id='type-id-89'/>
      <enumerator name='MallocExtension_kUnknownOwnership' value='0'/>
      <enumerator name='MallocExtension_kOwned' value='1'/>
      <enumerator name='MallocExtension_kNotOwned' value='2'/>
    </enum-decl>
    <!-- MallocExtension* -->
    <pointer-type-def type-id='type-id-927' size-in-bits='64' id='type-id-296'/>
    <!-- MallocExtension::RangeFunction* -->
    <pointer-type-def type-id='type-id-961' size-in-bits='64' id='type-id-965'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* const -->
    <qualified-type-def type-id='type-id-638' const='yes' id='type-id-1162'/>
    <!-- MallocExtension_Ownership MallocExtension_GetOwnership(void*) -->
    <function-decl name='MallocExtension_GetOwnership' mangled-name='MallocExtension_GetOwnership' filepath='src/malloc_extension.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetOwnership'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='p' filepath='src/malloc_extension.cc' line='375' column='1'/>
      <!-- enum MallocExtension_Ownership -->
      <return type-id='type-id-1161'/>
    </function-decl>
    <!-- size_t MallocExtension_GetAllocatedSize(void*) -->
    <function-decl name='MallocExtension_GetAllocatedSize' mangled-name='MallocExtension_GetAllocatedSize' filepath='src/malloc_extension.cc' line='371' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetAllocatedSize'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='ptr' filepath='src/tcmalloc.cc' line='1730' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- size_t MallocExtension_GetEstimatedAllocatedSize(size_t) -->
    <function-decl name='MallocExtension_GetEstimatedAllocatedSize' mangled-name='MallocExtension_GetEstimatedAllocatedSize' filepath='src/malloc_extension.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetEstimatedAllocatedSize'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='size' filepath='src/malloc_extension.cc' line='370' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- void MallocExtension_ReleaseToSystem(size_t) -->
    <function-decl name='MallocExtension_ReleaseToSystem' mangled-name='MallocExtension_ReleaseToSystem' filepath='src/malloc_extension.cc' line='369' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_ReleaseToSystem'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='num_bytes' filepath='src/malloc_extension.cc' line='369' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void MallocExtension_ReleaseFreeMemory() -->
    <function-decl name='MallocExtension_ReleaseFreeMemory' mangled-name='MallocExtension_ReleaseFreeMemory' filepath='src/malloc_extension.cc' line='368' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_ReleaseFreeMemory'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void MallocExtension_MarkThreadBusy() -->
    <function-decl name='MallocExtension_MarkThreadBusy' mangled-name='MallocExtension_MarkThreadBusy' filepath='src/malloc_extension.cc' line='367' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MarkThreadBusy'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void MallocExtension_MarkThreadIdle() -->
    <function-decl name='MallocExtension_MarkThreadIdle' mangled-name='MallocExtension_MarkThreadIdle' filepath='src/malloc_extension.cc' line='366' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MarkThreadIdle'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int MallocExtension_SetNumericProperty(const char*, size_t) -->
    <function-decl name='MallocExtension_SetNumericProperty' mangled-name='MallocExtension_SetNumericProperty' filepath='src/malloc_extension.cc' line='364' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_SetNumericProperty'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_GetNumericProperty(const char*, size_t*) -->
    <function-decl name='MallocExtension_GetNumericProperty' mangled-name='MallocExtension_GetNumericProperty' filepath='src/malloc_extension.cc' line='362' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetNumericProperty'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='property' filepath='src/malloc_extension.cc' line='361' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-253' name='value' filepath='src/malloc_extension.cc' line='361' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void MallocExtension_GetStats(char*, int) -->
    <function-decl name='MallocExtension_GetStats' mangled-name='MallocExtension_GetStats' filepath='src/malloc_extension.cc' line='360' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_GetStats'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118' name='buffer' filepath='src/malloc_extension.cc' line='359' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='buffer_length' filepath='src/malloc_extension.cc' line='359' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int MallocExtension_MallocMemoryStats(int*, size_t*, int*) -->
    <function-decl name='MallocExtension_MallocMemoryStats' mangled-name='MallocExtension_MallocMemoryStats' filepath='src/malloc_extension.cc' line='357' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_MallocMemoryStats'>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='blocks' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-253' name='total' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='histogram' filepath='src/malloc_extension.cc' line='355' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyMallocMemory(void*) -->
    <function-decl name='MallocExtension_VerifyMallocMemory' mangled-name='MallocExtension_VerifyMallocMemory' filepath='src/malloc_extension.cc' line='354' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyMallocMemory'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyArrayNewMemory(void*) -->
    <function-decl name='MallocExtension_VerifyArrayNewMemory' mangled-name='MallocExtension_VerifyArrayNewMemory' filepath='src/malloc_extension.cc' line='353' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyArrayNewMemory'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyNewMemory(void*) -->
    <function-decl name='MallocExtension_VerifyNewMemory' mangled-name='MallocExtension_VerifyNewMemory' filepath='src/malloc_extension.cc' line='352' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyNewMemory'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocExtension_VerifyAllMemory() -->
    <function-decl name='MallocExtension_VerifyAllMemory' mangled-name='MallocExtension_VerifyAllMemory' filepath='src/malloc_extension.cc' line='351' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocExtension_VerifyAllMemory'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/malloc_hook.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- typedef void (void*, typedef size_t, int, int, int, typedef off_t)* MallocHook_PreMmapHook -->
    <typedef-decl name='MallocHook_PreMmapHook' type-id='type-id-1163' filepath='./src/gperftools/malloc_hook_c.h' line='87' column='1' id='type-id-1164'/>
    <!-- typedef int (void*, typedef size_t, int, int, int, typedef off_t, void**)* MallocHook_MmapReplacement -->
    <typedef-decl name='MallocHook_MmapReplacement' type-id='type-id-1165' filepath='./src/gperftools/malloc_hook_c.h' line='111' column='1' id='type-id-1166'/>
    <!-- typedef int (void*, typedef size_t, int*)* MallocHook_MunmapReplacement -->
    <typedef-decl name='MallocHook_MunmapReplacement' type-id='type-id-1167' filepath='./src/gperftools/malloc_hook_c.h' line='123' column='1' id='type-id-1168'/>
    <!-- typedef void (void*, typedef size_t)* MallocHook_MunmapHook -->
    <typedef-decl name='MallocHook_MunmapHook' type-id='type-id-337' filepath='./src/gperftools/malloc_hook_c.h' line='115' column='1' id='type-id-1169'/>
    <!-- typedef void (void*, void*, typedef size_t, typedef size_t, int, void*)* MallocHook_MremapHook -->
    <typedef-decl name='MallocHook_MremapHook' type-id='type-id-1170' filepath='./src/gperftools/malloc_hook_c.h' line='132' column='1' id='type-id-1171'/>
    <!-- typedef void (typedef ptrdiff_t)* MallocHook_PreSbrkHook -->
    <typedef-decl name='MallocHook_PreSbrkHook' type-id='type-id-1172' filepath='./src/gperftools/malloc_hook_c.h' line='138' column='1' id='type-id-1173'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int*)>* -->
    <pointer-type-def type-id='type-id-1174' size-in-bits='64' id='type-id-1175'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int*)>* const -->
    <qualified-type-def type-id='type-id-1175' const='yes' id='type-id-1176'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* -->
    <pointer-type-def type-id='type-id-1177' size-in-bits='64' id='type-id-1178'/>
    <!-- base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* const -->
    <qualified-type-def type-id='type-id-1178' const='yes' id='type-id-1179'/>
    <!-- base::internal::HookList<void (*)(const void*)>* const -->
    <qualified-type-def type-id='type-id-1180' const='yes' id='type-id-1181'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-394' const='yes' id='type-id-1182'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* -->
    <pointer-type-def type-id='type-id-1183' size-in-bits='64' id='type-id-1184'/>
    <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* const -->
    <qualified-type-def type-id='type-id-1184' const='yes' id='type-id-1185'/>
    <!-- base::internal::HookList<void (*)(const void*, ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-396' const='yes' id='type-id-1186'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t)>* const -->
    <qualified-type-def type-id='type-id-1187' const='yes' id='type-id-1188'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-1189' size-in-bits='64' id='type-id-1190'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-1190' const='yes' id='type-id-1191'/>
    <!-- base::internal::HookList<void (*)(ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-1192' size-in-bits='64' id='type-id-1193'/>
    <!-- base::internal::HookList<void (*)(ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-1193' const='yes' id='type-id-1194'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)> -->
    <qualified-type-def type-id='type-id-1174' const='yes' id='type-id-1195'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)>* -->
    <pointer-type-def type-id='type-id-1195' size-in-bits='64' id='type-id-1196'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int*)>* const -->
    <qualified-type-def type-id='type-id-1196' const='yes' id='type-id-1197'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)> -->
    <qualified-type-def type-id='type-id-1177' const='yes' id='type-id-1198'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* -->
    <pointer-type-def type-id='type-id-1198' size-in-bits='64' id='type-id-1199'/>
    <!-- const base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>* const -->
    <qualified-type-def type-id='type-id-1199' const='yes' id='type-id-1200'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)> -->
    <qualified-type-def type-id='type-id-1183' const='yes' id='type-id-1201'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* -->
    <pointer-type-def type-id='type-id-1201' size-in-bits='64' id='type-id-1202'/>
    <!-- const base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>* const -->
    <qualified-type-def type-id='type-id-1202' const='yes' id='type-id-1203'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)> -->
    <qualified-type-def type-id='type-id-1189' const='yes' id='type-id-1204'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* -->
    <pointer-type-def type-id='type-id-1204' size-in-bits='64' id='type-id-1205'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>* const -->
    <qualified-type-def type-id='type-id-1205' const='yes' id='type-id-1206'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)> -->
    <qualified-type-def type-id='type-id-1192' const='yes' id='type-id-1207'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)>* -->
    <pointer-type-def type-id='type-id-1207' size-in-bits='64' id='type-id-1208'/>
    <!-- const base::internal::HookList<void (*)(ptrdiff_t)>* const -->
    <qualified-type-def type-id='type-id-1208' const='yes' id='type-id-1209'/>
    <!-- int (void*, typedef size_t, int*)* -->
    <pointer-type-def type-id='type-id-1210' size-in-bits='64' id='type-id-1167'/>
    <!-- int (void*, typedef size_t, int*)** -->
    <pointer-type-def type-id='type-id-1167' size-in-bits='64' id='type-id-1211'/>
    <!-- int (void*, typedef size_t, int, int, int, typedef off_t, void**)* -->
    <pointer-type-def type-id='type-id-1212' size-in-bits='64' id='type-id-1165'/>
    <!-- int (void*, typedef size_t, int, int, int, typedef off_t, void**)** -->
    <pointer-type-def type-id='type-id-1165' size-in-bits='64' id='type-id-1213'/>
    <!-- void (typedef ptrdiff_t)* -->
    <pointer-type-def type-id='type-id-1214' size-in-bits='64' id='type-id-1172'/>
    <!-- void (typedef ptrdiff_t)** -->
    <pointer-type-def type-id='type-id-1172' size-in-bits='64' id='type-id-1215'/>
    <!-- void (void*, typedef size_t, int, int, int, typedef off_t)* -->
    <pointer-type-def type-id='type-id-1216' size-in-bits='64' id='type-id-1163'/>
    <!-- void (void*, typedef size_t, int, int, int, typedef off_t)** -->
    <pointer-type-def type-id='type-id-1163' size-in-bits='64' id='type-id-1217'/>
    <!-- void (void*, void*, typedef size_t, typedef size_t, int, void*)* -->
    <pointer-type-def type-id='type-id-1218' size-in-bits='64' id='type-id-1170'/>
    <!-- void (void*, void*, typedef size_t, typedef size_t, int, void*)** -->
    <pointer-type-def type-id='type-id-1170' size-in-bits='64' id='type-id-1219'/>
    <!-- volatile base::subtle::Atomic64* -->
    <pointer-type-def type-id='type-id-1220' size-in-bits='64' id='type-id-1221'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- void** std::__copy_move_a<false, void**, void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_a&lt;false, void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::__copy_move_a2<false, void**, void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_a2&lt;false, void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::copy<void**, void**>(void**, void**, void**) -->
      <function-decl name='copy&lt;void**, void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t, int, int, int, off_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-1189'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*, const void*, size_t, size_t, int, const void*)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-1183'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(ptrdiff_t)> -->
        <class-decl name='HookList&lt;void (*)(ptrdiff_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-1192'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(ptrdiff_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(ptrdiff_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)> -->
        <class-decl name='HookList&lt;int (*)(const void*, size_t, int, int, int, off_t, void**)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-1177'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- struct base::internal::HookList<int (*)(const void*, size_t, int*)> -->
        <class-decl name='HookList&lt;int (*)(const void*, size_t, int*)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='src/malloc_hook-inl.h' line='59' column='1' id='type-id-1174'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<int (*)(const void*, size_t, int*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
        <!-- base::internal::HookList<void (*)(const void*, size_t)> base::internal::new_hooks_ -->
        <var-decl name='new_hooks_' type-id='type-id-1222' mangled-name='_ZN4base8internal10new_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='260' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*)> base::internal::delete_hooks_ -->
        <var-decl name='delete_hooks_' type-id='type-id-1223' mangled-name='_ZN4base8internal13delete_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='262' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*, size_t, int, int, int, off_t)> base::internal::premmap_hooks_ -->
        <var-decl name='premmap_hooks_' type-id='type-id-1189' mangled-name='_ZN4base8internal14premmap_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='263' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, int, int, int, off_t)> base::internal::mmap_hooks_ -->
        <var-decl name='mmap_hooks_' type-id='type-id-393' mangled-name='_ZN4base8internal11mmap_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='265' column='1'/>
        <!-- base::internal::HookList<int (*)(const void*, size_t, int, int, int, off_t, void**)> base::internal::mmap_replacement_ -->
        <var-decl name='mmap_replacement_' type-id='type-id-1177' mangled-name='_ZN4base8internal17mmap_replacement_E' visibility='default' filepath='src/malloc_hook.cc' line='273' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*, size_t)> base::internal::munmap_hooks_ -->
        <var-decl name='munmap_hooks_' type-id='type-id-1222' mangled-name='_ZN4base8internal13munmap_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='266' column='1'/>
        <!-- base::internal::HookList<int (*)(const void*, size_t, int*)> base::internal::munmap_replacement_ -->
        <var-decl name='munmap_replacement_' type-id='type-id-1174' mangled-name='_ZN4base8internal19munmap_replacement_E' visibility='default' filepath='src/malloc_hook.cc' line='274' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*, const void*, size_t, size_t, int, const void*)> base::internal::mremap_hooks_ -->
        <var-decl name='mremap_hooks_' type-id='type-id-1183' mangled-name='_ZN4base8internal13mremap_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='267' column='1'/>
        <!-- base::internal::HookList<void (*)(ptrdiff_t)> base::internal::presbrk_hooks_ -->
        <var-decl name='presbrk_hooks_' type-id='type-id-1192' mangled-name='_ZN4base8internal14presbrk_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='268' column='1'/>
        <!-- base::internal::HookList<void (*)(const void*, ptrdiff_t)> base::internal::sbrk_hooks_ -->
        <var-decl name='sbrk_hooks_' type-id='type-id-395' mangled-name='_ZN4base8internal11sbrk_hooks_E' visibility='default' filepath='src/malloc_hook.cc' line='270' column='1'/>
      </namespace-decl>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
        <!-- void base::subtle::NoBarrier_Store(volatile base::subtle::Atomic64*, base::subtle::Atomic64) -->
        <function-decl name='NoBarrier_Store' filepath='./src/base/atomicops-internals-x86.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'volatile base::subtle::Atomic64*' -->
          <parameter type-id='type-id-1221'/>
          <!-- parameter of type 'typedef base::subtle::Atomic64' -->
          <parameter type-id='type-id-1224'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
        <!-- base::subtle::Atomic64 base::subtle::Acquire_Load(const volatile base::subtle::Atomic64*) -->
        <function-decl name='Acquire_Load' filepath='./src/base/atomicops-internals-x86.h' line='249' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const volatile base::subtle::Atomic64*' -->
          <parameter type-id='type-id-1225'/>
          <!-- typedef base::subtle::Atomic64 -->
          <return type-id='type-id-1224'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- void* mmap(void*, size_t, int, int, int, off_t) -->
    <function-decl name='mmap' mangled-name='mmap' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mmap'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='start' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='length' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='prot' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='flags' filepath='src/malloc_hook_mmap_linux.h' line='169' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='fd' filepath='src/malloc_hook_mmap_linux.h' line='170' column='1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-207' name='offset' filepath='src/malloc_hook_mmap_linux.h' line='170' column='1'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* mmap64(void*, size_t, int, int, int, __off64_t) -->
    <function-decl name='mmap64' mangled-name='mmap64' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mmap64'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='start' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='length' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='prot' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='flags' filepath='src/malloc_hook_mmap_linux.h' line='155' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='fd' filepath='src/malloc_hook_mmap_linux.h' line='156' column='1'/>
      <!-- parameter of type 'typedef __off64_t' -->
      <parameter type-id='type-id-1226' name='offset' filepath='src/malloc_hook_mmap_linux.h' line='156' column='1'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int munmap(void*, size_t) -->
    <function-decl name='munmap' mangled-name='munmap' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='munmap'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='start' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='length' filepath='src/malloc_hook_mmap_linux.h' line='184' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* sbrk(ptrdiff_t) -->
    <function-decl name='sbrk' mangled-name='sbrk' filepath='src/malloc_hook_mmap_linux.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='sbrk'>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-208' name='increment' filepath='src/malloc_hook_mmap_linux.h' line='209' column='1'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* mremap(void*, size_t, size_t, int, ...) -->
    <function-decl name='mremap' mangled-name='mremap' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='mremap'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='old_addr' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='old_size' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='new_size' filepath='src/malloc_hook_mmap_linux.h' line='193' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='flags' filepath='src/malloc_hook_mmap_linux.h' line='194' column='1'/>
      <parameter is-variadic='yes'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int MallocHook_GetCallerStackTrace(void**, int, int) -->
    <function-decl name='MallocHook_GetCallerStackTrace' mangled-name='MallocHook_GetCallerStackTrace' filepath='src/malloc_hook.cc' line='611' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_GetCallerStackTrace'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='max_depth' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='skip_count' filepath='src/malloc_hook.cc' line='612' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddPreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_AddPreSbrkHook' mangled-name='MallocHook_AddPreSbrkHook' filepath='src/malloc_hook.cc' line='399' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddPreSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1173' name='hook' filepath='src/malloc_hook.cc' line='399' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- MallocHook_MunmapHook MallocHook_SetMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_SetMunmapHook' mangled-name='MallocHook_SetMunmapHook' filepath='src/malloc_hook.cc' line='448' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMunmapHook'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1169' name='hook' filepath='src/malloc_hook.cc' line='448' column='1'/>
      <!-- typedef MallocHook_MunmapHook -->
      <return type-id='type-id-1169'/>
    </function-decl>
    <!-- MallocHook_NewHook MallocHook_SetNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_SetNewHook' mangled-name='MallocHook_SetNewHook' filepath='src/malloc_hook.cc' line='424' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetNewHook'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-338' name='hook' filepath='src/malloc_hook.cc' line='424' column='1'/>
      <!-- typedef MallocHook_NewHook -->
      <return type-id='type-id-338'/>
    </function-decl>
    <!-- MallocHook_SbrkHook MallocHook_SetSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_SetSbrkHook' mangled-name='MallocHook_SetSbrkHook' filepath='src/malloc_hook.cc' line='466' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-343' name='hook' filepath='src/malloc_hook.cc' line='466' column='1'/>
      <!-- typedef MallocHook_SbrkHook -->
      <return type-id='type-id-343'/>
    </function-decl>
    <!-- MallocHook_PreSbrkHook MallocHook_SetPreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_SetPreSbrkHook' mangled-name='MallocHook_SetPreSbrkHook' filepath='src/malloc_hook.cc' line='460' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetPreSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1173' name='hook' filepath='src/malloc_hook.cc' line='460' column='1'/>
      <!-- typedef MallocHook_PreSbrkHook -->
      <return type-id='type-id-1173'/>
    </function-decl>
    <!-- MallocHook_MremapHook MallocHook_SetMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_SetMremapHook' mangled-name='MallocHook_SetMremapHook' filepath='src/malloc_hook.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMremapHook'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1171' name='hook' filepath='src/malloc_hook.cc' line='454' column='1'/>
      <!-- typedef MallocHook_MremapHook -->
      <return type-id='type-id-1171'/>
    </function-decl>
    <!-- MallocHook_MmapHook MallocHook_SetMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_SetMmapHook' mangled-name='MallocHook_SetMmapHook' filepath='src/malloc_hook.cc' line='442' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMmapHook'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-341' name='hook' filepath='src/malloc_hook.cc' line='442' column='1'/>
      <!-- typedef MallocHook_MmapHook -->
      <return type-id='type-id-341'/>
    </function-decl>
    <!-- MallocHook_PreMmapHook MallocHook_SetPreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_SetPreMmapHook' mangled-name='MallocHook_SetPreMmapHook' filepath='src/malloc_hook.cc' line='436' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetPreMmapHook'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1164' name='hook' filepath='src/malloc_hook.cc' line='436' column='1'/>
      <!-- typedef MallocHook_PreMmapHook -->
      <return type-id='type-id-1164'/>
    </function-decl>
    <!-- MallocHook_DeleteHook MallocHook_SetDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_SetDeleteHook' mangled-name='MallocHook_SetDeleteHook' filepath='src/malloc_hook.cc' line='430' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetDeleteHook'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-339' name='hook' filepath='src/malloc_hook.cc' line='430' column='1'/>
      <!-- typedef MallocHook_DeleteHook -->
      <return type-id='type-id-339'/>
    </function-decl>
    <!-- int MallocHook_RemoveMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_RemoveMunmapHook' mangled-name='MallocHook_RemoveMunmapHook' filepath='src/malloc_hook.cc' line='365' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMunmapHook'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1169' name='hook' filepath='src/malloc_hook.cc' line='365' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_RemoveNewHook' mangled-name='MallocHook_RemoveNewHook' filepath='src/malloc_hook.cc' line='302' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveNewHook'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-338' name='hook' filepath='src/malloc_hook.cc' line='302' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_RemoveSbrkHook' mangled-name='MallocHook_RemoveSbrkHook' filepath='src/malloc_hook.cc' line='417' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-343' name='hook' filepath='src/malloc_hook.cc' line='417' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMmapReplacement(MallocHook_MmapReplacement) -->
    <function-decl name='MallocHook_RemoveMmapReplacement' mangled-name='MallocHook_RemoveMmapReplacement' filepath='src/malloc_hook.cc' line='341' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMmapReplacement'>
      <!-- parameter of type 'typedef MallocHook_MmapReplacement' -->
      <parameter type-id='type-id-1166' name='hook' filepath='src/malloc_hook.cc' line='341' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemovePreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_RemovePreMmapHook' mangled-name='MallocHook_RemovePreMmapHook' filepath='src/malloc_hook.cc' line='326' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemovePreMmapHook'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1164' name='hook' filepath='src/malloc_hook.cc' line='326' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_RemoveDeleteHook' mangled-name='MallocHook_RemoveDeleteHook' filepath='src/malloc_hook.cc' line='314' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveDeleteHook'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-339' name='hook' filepath='src/malloc_hook.cc' line='314' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemovePreSbrkHook(MallocHook_PreSbrkHook) -->
    <function-decl name='MallocHook_RemovePreSbrkHook' mangled-name='MallocHook_RemovePreSbrkHook' filepath='src/malloc_hook.cc' line='405' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemovePreSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_PreSbrkHook' -->
      <parameter type-id='type-id-1173' name='hook' filepath='src/malloc_hook.cc' line='399' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_RemoveMremapHook' mangled-name='MallocHook_RemoveMremapHook' filepath='src/malloc_hook.cc' line='393' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMremapHook'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1171' name='hook' filepath='src/malloc_hook.cc' line='393' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMunmapReplacement(MallocHook_MunmapReplacement) -->
    <function-decl name='MallocHook_RemoveMunmapReplacement' mangled-name='MallocHook_RemoveMunmapReplacement' filepath='src/malloc_hook.cc' line='381' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMunmapReplacement'>
      <!-- parameter of type 'typedef MallocHook_MunmapReplacement' -->
      <parameter type-id='type-id-1168' name='hook' filepath='src/malloc_hook.cc' line='381' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_RemoveMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_RemoveMmapHook' mangled-name='MallocHook_RemoveMmapHook' filepath='src/malloc_hook.cc' line='353' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_RemoveMmapHook'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-341' name='hook' filepath='src/malloc_hook.cc' line='353' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMmapHook(MallocHook_MmapHook) -->
    <function-decl name='MallocHook_AddMmapHook' mangled-name='MallocHook_AddMmapHook' filepath='src/malloc_hook.cc' line='347' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMmapHook'>
      <!-- parameter of type 'typedef MallocHook_MmapHook' -->
      <parameter type-id='type-id-341' name='hook' filepath='src/malloc_hook.cc' line='353' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMremapHook(MallocHook_MremapHook) -->
    <function-decl name='MallocHook_AddMremapHook' mangled-name='MallocHook_AddMremapHook' filepath='src/malloc_hook.cc' line='387' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMremapHook'>
      <!-- parameter of type 'typedef MallocHook_MremapHook' -->
      <parameter type-id='type-id-1171' name='hook' filepath='src/malloc_hook.cc' line='393' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_SetMunmapReplacement(MallocHook_MunmapReplacement) -->
    <function-decl name='MallocHook_SetMunmapReplacement' mangled-name='MallocHook_SetMunmapReplacement' filepath='src/malloc_hook.cc' line='371' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMunmapReplacement'>
      <!-- parameter of type 'typedef MallocHook_MunmapReplacement' -->
      <parameter type-id='type-id-1168' name='hook' filepath='src/malloc_hook.cc' line='381' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_SetMmapReplacement(MallocHook_MmapReplacement) -->
    <function-decl name='MallocHook_SetMmapReplacement' mangled-name='MallocHook_SetMmapReplacement' filepath='src/malloc_hook.cc' line='332' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_SetMmapReplacement'>
      <!-- parameter of type 'typedef MallocHook_MmapReplacement' -->
      <parameter type-id='type-id-1166' name='hook' filepath='src/malloc_hook.cc' line='341' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddPreMmapHook(MallocHook_PreMmapHook) -->
    <function-decl name='MallocHook_AddPreMmapHook' mangled-name='MallocHook_AddPreMmapHook' filepath='src/malloc_hook.cc' line='320' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddPreMmapHook'>
      <!-- parameter of type 'typedef MallocHook_PreMmapHook' -->
      <parameter type-id='type-id-1164' name='hook' filepath='src/malloc_hook.cc' line='326' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddMunmapHook(MallocHook_MunmapHook) -->
    <function-decl name='MallocHook_AddMunmapHook' mangled-name='MallocHook_AddMunmapHook' filepath='src/malloc_hook.cc' line='359' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddMunmapHook'>
      <!-- parameter of type 'typedef MallocHook_MunmapHook' -->
      <parameter type-id='type-id-1169' name='hook' filepath='src/malloc_hook.cc' line='365' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddNewHook(MallocHook_NewHook) -->
    <function-decl name='MallocHook_AddNewHook' mangled-name='MallocHook_AddNewHook' filepath='src/malloc_hook.cc' line='296' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddNewHook'>
      <!-- parameter of type 'typedef MallocHook_NewHook' -->
      <parameter type-id='type-id-338' name='hook' filepath='src/malloc_hook.cc' line='302' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddSbrkHook(MallocHook_SbrkHook) -->
    <function-decl name='MallocHook_AddSbrkHook' mangled-name='MallocHook_AddSbrkHook' filepath='src/malloc_hook.cc' line='411' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddSbrkHook'>
      <!-- parameter of type 'typedef MallocHook_SbrkHook' -->
      <parameter type-id='type-id-343' name='hook' filepath='src/malloc_hook.cc' line='417' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int MallocHook_AddDeleteHook(MallocHook_DeleteHook) -->
    <function-decl name='MallocHook_AddDeleteHook' mangled-name='MallocHook_AddDeleteHook' filepath='src/malloc_hook.cc' line='308' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='MallocHook_AddDeleteHook'>
      <!-- parameter of type 'typedef MallocHook_DeleteHook' -->
      <parameter type-id='type-id-339' name='hook' filepath='src/malloc_hook.cc' line='314' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- base::internal::HookList<void (*)(const void*)>* -->
    <pointer-type-def type-id='type-id-1223' size-in-bits='64' id='type-id-1180'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-1222' size-in-bits='64' id='type-id-1187'/>
    <namespace-decl name='base'>
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='./src/malloc_hook-inl.h' line='59' column='1' id='type-id-1223'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <namespace-decl name='base'>
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='./src/malloc_hook-inl.h' line='59' column='1' id='type-id-1222'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
          <member-function access='public'>
            <!-- void (void*, typedef size_t)* base::internal::HookList<void (*)(const void*, size_t)>::GetSingular() -->
            <function-decl name='GetSingular' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' filepath='src/malloc_hook-inl.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- void (void*, typedef size_t)* -->
              <return type-id='type-id-337'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::empty() -->
            <function-decl name='empty' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' filepath='src/malloc_hook-inl.h' line='80' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void base::internal::HookList<void (*)(const void*, size_t)>::FixupPrivEndLocked() -->
            <function-decl name='FixupPrivEndLocked' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' filepath='src/malloc_hook-inl.h' line='67' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- int base::internal::HookList<void (*)(const void*, size_t)>::Traverse(void (void*, typedef size_t)**, int) -->
            <function-decl name='Traverse' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' filepath='src/malloc_hook-inl.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)**' -->
              <parameter type-id='type-id-1228' name='output_array' filepath='src/malloc_hook-inl.h' line='77' column='1'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1' name='n' filepath='src/malloc_hook-inl.h' line='77' column='1'/>
              <!-- int -->
              <return type-id='type-id-1'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void (void*, typedef size_t)* base::internal::HookList<void (*)(const void*, size_t)>::ExchangeSingular(void (void*, typedef size_t)*) -->
            <function-decl name='ExchangeSingular' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' filepath='src/malloc_hook-inl.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='90' column='1'/>
              <!-- void (void*, typedef size_t)* -->
              <return type-id='type-id-337'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Remove(void (void*, typedef size_t)*) -->
            <function-decl name='Remove' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' filepath='src/malloc_hook-inl.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Add(void (void*, typedef size_t)*) -->
            <function-decl name='Add' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' filepath='src/malloc_hook-inl.h' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
        </class-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- const volatile base::subtle::Atomic64* -->
    <pointer-type-def type-id='type-id-1229' size-in-bits='64' id='type-id-1225'/>
    <!-- int (void*, size_t, int*) -->
    <function-type size-in-bits='64' id='type-id-1210'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- int (void*, size_t, int, int, int, off_t, void**) -->
    <function-type size-in-bits='64' id='type-id-1212'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-207'/>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void (ptrdiff_t) -->
    <function-type size-in-bits='64' id='type-id-1214'>
      <!-- parameter of type 'typedef ptrdiff_t' -->
      <parameter type-id='type-id-208'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, size_t, int, int, int, off_t) -->
    <function-type size-in-bits='64' id='type-id-1216'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'typedef off_t' -->
      <parameter type-id='type-id-207'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, void*, size_t, size_t, int, void*) -->
    <function-type size-in-bits='64' id='type-id-1218'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- typedef long int __off64_t -->
    <typedef-decl name='__off64_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='142' column='1' id='type-id-1226'/>
    <namespace-decl name='base'>
      <namespace-decl name='subtle'>
        <!-- typedef int64_t base::subtle::Atomic64 -->
        <typedef-decl name='Atomic64' type-id='type-id-103' filepath='./src/base/atomicops-internals-x86.h' line='70' column='1' id='type-id-1224'/>
      </namespace-decl>
    </namespace-decl>
    <!-- volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-1224' volatile='yes' id='type-id-1220'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* const -->
    <qualified-type-def type-id='type-id-1230' const='yes' id='type-id-1227'/>
    <!-- const volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-1220' const='yes' id='type-id-1229'/>
    <!-- void (void*, typedef size_t)** -->
    <pointer-type-def type-id='type-id-337' size-in-bits='64' id='type-id-1228'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-1231' size-in-bits='64' id='type-id-1230'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)> -->
    <qualified-type-def type-id='type-id-1222' const='yes' id='type-id-1231'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/maybe_threads.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- pthread_key_t* -->
    <pointer-type-def type-id='type-id-1232' size-in-bits='64' id='type-id-1233'/>
    <!-- pthread_once_t* -->
    <pointer-type-def type-id='type-id-1234' size-in-bits='64' id='type-id-1235'/>
    <!-- int perftools_pthread_once(pthread_once_t*, void ()*) -->
    <function-decl name='perftools_pthread_once' mangled-name='_Z22perftools_pthread_oncePiPFvvE' filepath='src/maybe_threads.cc' line='128' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z22perftools_pthread_oncePiPFvvE'>
      <!-- parameter of type 'pthread_once_t*' -->
      <parameter type-id='type-id-1235' name='ctl' filepath='src/maybe_threads.cc' line='128' column='1'/>
      <!-- parameter of type 'void ()*' -->
      <parameter type-id='type-id-176' name='init_routine' filepath='src/maybe_threads.cc' line='129' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int perftools_pthread_setspecific(pthread_key_t, void*) -->
    <function-decl name='perftools_pthread_setspecific' mangled-name='_Z29perftools_pthread_setspecificjPv' filepath='src/maybe_threads.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z29perftools_pthread_setspecificjPv'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1232' name='key' filepath='src/maybe_threads.cc' line='117' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='val' filepath='src/maybe_threads.cc' line='117' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* perftools_pthread_getspecific(pthread_key_t) -->
    <function-decl name='perftools_pthread_getspecific' mangled-name='_Z29perftools_pthread_getspecificj' filepath='src/maybe_threads.cc' line='109' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z29perftools_pthread_getspecificj'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1232' name='key' filepath='src/maybe_threads.cc' line='109' column='1'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int perftools_pthread_key_delete(pthread_key_t) -->
    <function-decl name='perftools_pthread_key_delete' mangled-name='_Z28perftools_pthread_key_deletej' filepath='src/maybe_threads.cc' line='101' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z28perftools_pthread_key_deletej'>
      <!-- parameter of type 'typedef pthread_key_t' -->
      <parameter type-id='type-id-1232' name='key' filepath='src/maybe_threads.cc' line='101' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int perftools_pthread_key_create(pthread_key_t*, void (void*)*) -->
    <function-decl name='perftools_pthread_key_create' mangled-name='_Z28perftools_pthread_key_createPjPFvPvE' filepath='src/maybe_threads.cc' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z28perftools_pthread_key_createPjPFvPvE'>
      <!-- parameter of type 'pthread_key_t*' -->
      <parameter type-id='type-id-1233' name='key' filepath='src/maybe_threads.cc' line='90' column='1'/>
      <!-- parameter of type 'void (void*)*' -->
      <parameter type-id='type-id-234' name='destr_function' filepath='src/maybe_threads.cc' line='91' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- typedef unsigned int pthread_key_t -->
    <typedef-decl name='pthread_key_t' type-id='type-id-64' filepath='/usr/include/bits/pthreadtypes.h' line='140' column='1' id='type-id-1232'/>
    <!-- typedef int pthread_once_t -->
    <typedef-decl name='pthread_once_t' type-id='type-id-1' filepath='/usr/include/bits/pthreadtypes.h' line='144' column='1' id='type-id-1234'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/memfs_malloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class HugetlbSysAllocator -->
    <class-decl name='HugetlbSysAllocator' size-in-bits='384' visibility='default' filepath='src/memfs_malloc.cc' line='90' column='1' id='type-id-1236'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- bool HugetlbSysAllocator::failed_ -->
        <var-decl name='failed_' type-id='type-id-61' visibility='default' filepath='src/memfs_malloc.cc' line='103' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int64 HugetlbSysAllocator::big_page_size_ -->
        <var-decl name='big_page_size_' type-id='type-id-98' visibility='default' filepath='src/memfs_malloc.cc' line='108' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- int HugetlbSysAllocator::hugetlb_fd_ -->
        <var-decl name='hugetlb_fd_' type-id='type-id-1' visibility='default' filepath='src/memfs_malloc.cc' line='109' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- off_t HugetlbSysAllocator::hugetlb_base_ -->
        <var-decl name='hugetlb_base_' type-id='type-id-207' visibility='default' filepath='src/memfs_malloc.cc' line='110' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- SysAllocator* HugetlbSysAllocator::fallback_ -->
        <var-decl name='fallback_' type-id='type-id-966' visibility='default' filepath='src/memfs_malloc.cc' line='112' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- HugetlbSysAllocator::HugetlbSysAllocator(SysAllocator*) -->
        <function-decl name='HugetlbSysAllocator' filepath='src/memfs_malloc.cc' line='92' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'HugetlbSysAllocator*' -->
          <parameter type-id='type-id-1237' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool HugetlbSysAllocator::Initialize() -->
        <function-decl name='Initialize' mangled-name='_ZN19HugetlbSysAllocator10InitializeEv' filepath='src/memfs_malloc.cc' line='218' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator10InitializeEv'>
          <!-- implicit parameter of type 'HugetlbSysAllocator* const' -->
          <parameter type-id='type-id-1238' name='this' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void* HugetlbSysAllocator::AllocInternal(size_t, size_t*, size_t) -->
        <function-decl name='AllocInternal' mangled-name='_ZN19HugetlbSysAllocator13AllocInternalEmPmm' filepath='src/memfs_malloc.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator13AllocInternalEmPmm'>
          <!-- implicit parameter of type 'HugetlbSysAllocator* const' -->
          <parameter type-id='type-id-1238' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62' name='size' filepath='src/memfs_malloc.cc' line='152' column='1'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253' name='actual_size' filepath='src/memfs_malloc.cc' line='152' column='1'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62' name='alignment' filepath='src/memfs_malloc.cc' line='153' column='1'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* HugetlbSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN19HugetlbSysAllocator5AllocEmPmm' filepath='src/memfs_malloc.cc' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19HugetlbSysAllocator5AllocEmPmm'>
          <!-- implicit parameter of type 'HugetlbSysAllocator*' -->
          <parameter type-id='type-id-1237' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HugetlbSysAllocator* -->
    <pointer-type-def type-id='type-id-1236' size-in-bits='64' id='type-id-1237'/>
    <!-- HugetlbSysAllocator* const -->
    <qualified-type-def type-id='type-id-1237' const='yes' id='type-id-1238'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_memfs_malloc_path -->
      <var-decl name='FLAGS_memfs_malloc_path' type-id='type-id-924' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE' visibility='default' filepath='src/memfs_malloc.cc' line='70' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_memfs_malloc_pathE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nomemfs_malloc_path -->
      <var-decl name='FLAGS_nomemfs_malloc_path' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE' visibility='default' filepath='src/memfs_malloc.cc' line='73' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead25FLAGS_nomemfs_malloc_pathE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_memfs_malloc_limit_mb -->
      <var-decl name='FLAGS_memfs_malloc_limit_mb' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE' visibility='default' filepath='src/memfs_malloc.cc' line='74' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead27FLAGS_memfs_malloc_limit_mbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_nomemfs_malloc_limit_mb -->
      <var-decl name='FLAGS_nomemfs_malloc_limit_mb' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE' visibility='default' filepath='src/memfs_malloc.cc' line='77' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead29FLAGS_nomemfs_malloc_limit_mbE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_abort_on_fail -->
      <var-decl name='FLAGS_memfs_malloc_abort_on_fail' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE' visibility='default' filepath='src/memfs_malloc.cc' line='78' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_memfs_malloc_abort_on_failE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_abort_on_fail -->
      <var-decl name='FLAGS_nomemfs_malloc_abort_on_fail' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE' visibility='default' filepath='src/memfs_malloc.cc' line='81' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead34FLAGS_nomemfs_malloc_abort_on_failE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_ignore_mmap_fail -->
      <var-decl name='FLAGS_memfs_malloc_ignore_mmap_fail' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE' visibility='default' filepath='src/memfs_malloc.cc' line='82' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_memfs_malloc_ignore_mmap_failE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_ignore_mmap_fail -->
      <var-decl name='FLAGS_nomemfs_malloc_ignore_mmap_fail' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE' visibility='default' filepath='src/memfs_malloc.cc' line='84' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomemfs_malloc_ignore_mmap_failE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_memfs_malloc_map_private -->
      <var-decl name='FLAGS_memfs_malloc_map_private' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE' visibility='default' filepath='src/memfs_malloc.cc' line='85' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead30FLAGS_memfs_malloc_map_privateE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomemfs_malloc_map_private -->
      <var-decl name='FLAGS_nomemfs_malloc_map_private' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE' visibility='default' filepath='src/memfs_malloc.cc' line='87' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead32FLAGS_nomemfs_malloc_map_privateE'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/memory_region_map.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- HeapProfileBucket[20] -->
    <array-type-def dimensions='1' type-id='type-id-212' size-in-bits='8960' id='type-id-197'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' type-id='type-id-5' id='type-id-926'/>
    </array-type-def>
    <!-- void*[20][32] -->
    <array-type-def dimensions='2' type-id='type-id-58' size-in-bits='40960' id='type-id-198'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' type-id='type-id-5' id='type-id-926'/>
      <!-- <anonymous range>[32] -->
      <subrange length='32' type-id='type-id-5' id='type-id-164'/>
    </array-type-def>
    <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::MyAllocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-982'>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::STL_Allocator(const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-984'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-998' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <class-decl name='STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt;' size-in-bits='8' visibility='default' filepath='src/base/stl_allocator.h' line='60' column='1' id='type-id-1009'>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator() -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator(const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator' filepath='src/base/stl_allocator.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-942'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::~STL_Allocator(int) -->
        <function-decl name='~STL_Allocator' filepath='src/base/stl_allocator.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>::STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region> >(const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
        <function-decl name='STL_Allocator&lt;std::_Rb_tree_node&lt;MemoryRegionMap::Region&gt; &gt;' filepath='src/base/stl_allocator.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>*' -->
          <parameter type-id='type-id-1018' is-artificial='yes'/>
          <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
          <parameter type-id='type-id-984'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- HeapProfileBucket** -->
    <pointer-type-def type-id='type-id-206' size-in-bits='64' id='type-id-196'/>
    <!-- MemoryRegionMap::Region& -->
    <reference-type-def kind='lvalue' type-id='type-id-183' size-in-bits='64' id='type-id-1239'/>
    <!-- MemoryRegionMap::Region* const -->
    <qualified-type-def type-id='type-id-204' const='yes' id='type-id-1240'/>
    <!-- MemoryRegionMap::RegionSet* -->
    <pointer-type-def type-id='type-id-185' size-in-bits='64' id='type-id-194'/>
    <!-- MemoryRegionMap::RegionSetRep* -->
    <pointer-type-def type-id='type-id-187' size-in-bits='64' id='type-id-1241'/>
    <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1009' size-in-bits='64' id='type-id-1018'/>
    <!-- STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* const -->
    <qualified-type-def type-id='type-id-1018' const='yes' id='type-id-1242'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-982' size-in-bits='64' id='type-id-1243'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-982' size-in-bits='64' id='type-id-998'/>
    <!-- STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* const -->
    <qualified-type-def type-id='type-id-998' const='yes' id='type-id-1244'/>
    <!-- const MemoryRegionMap::Region& -->
    <qualified-type-def type-id='type-id-433' id='type-id-202'/>
    <!-- const MemoryRegionMap::RegionCmp -->
    <qualified-type-def type-id='type-id-182' const='yes' id='type-id-990'/>
    <!-- const MemoryRegionMap::RegionCmp& -->
    <reference-type-def kind='lvalue' type-id='type-id-990' size-in-bits='64' id='type-id-941'/>
    <!-- const MemoryRegionMap::RegionCmp* -->
    <pointer-type-def type-id='type-id-990' size-in-bits='64' id='type-id-1245'/>
    <!-- const MemoryRegionMap::RegionCmp* const -->
    <qualified-type-def type-id='type-id-1245' const='yes' id='type-id-1246'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-1009' const='yes' id='type-id-991'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-991' size-in-bits='64' id='type-id-942'/>
    <!-- const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-991' size-in-bits='64' id='type-id-1247'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
    <qualified-type-def type-id='type-id-982' const='yes' id='type-id-1010'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1010' size-in-bits='64' id='type-id-984'/>
    <!-- const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>* -->
    <pointer-type-def type-id='type-id-1010' size-in-bits='64' id='type-id-1248'/>
    <!-- const SpinLock* const -->
    <qualified-type-def type-id='type-id-1249' const='yes' id='type-id-1250'/>
    <!-- const std::_Identity<MemoryRegionMap::Region> -->
    <qualified-type-def type-id='type-id-1251' const='yes' id='type-id-1252'/>
    <!-- const std::_Identity<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-1252' size-in-bits='64' id='type-id-1253'/>
    <!-- const std::_Identity<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-1253' const='yes' id='type-id-1254'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-939' const='yes' id='type-id-1012'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1012' size-in-bits='64' id='type-id-986'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-1012' size-in-bits='64' id='type-id-1255'/>
    <!-- const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1255' const='yes' id='type-id-1256'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>& -->
    <qualified-type-def type-id='type-id-546' id='type-id-1257'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-545' size-in-bits='64' id='type-id-1258'/>
    <!-- const std::_Rb_tree_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-1258' const='yes' id='type-id-1259'/>
    <!-- const std::_Rb_tree_node<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-572' size-in-bits='64' id='type-id-1260'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
    <qualified-type-def type-id='type-id-186' const='yes' id='type-id-995'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-995' size-in-bits='64' id='type-id-943'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-995' size-in-bits='64' id='type-id-1261'/>
    <!-- const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-1261' const='yes' id='type-id-1262'/>
    <!-- const volatile Atomic32 -->
    <qualified-type-def type-id='type-id-93' const='yes' id='type-id-110'/>
    <!-- const volatile Atomic32* -->
    <pointer-type-def type-id='type-id-110' size-in-bits='64' id='type-id-109'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-939' size-in-bits='64' id='type-id-1263'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-939' size-in-bits='64' id='type-id-985'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-985' const='yes' id='type-id-987'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>* -->
    <pointer-type-def type-id='type-id-981' size-in-bits='64' id='type-id-983'/>
    <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>* const -->
    <qualified-type-def type-id='type-id-983' const='yes' id='type-id-1264'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-544' size-in-bits='64' id='type-id-1265'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-544' size-in-bits='64' id='type-id-868'/>
    <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region>* const -->
    <qualified-type-def type-id='type-id-868' const='yes' id='type-id-1266'/>
    <!-- std::_Rb_tree_node<MemoryRegionMap::Region>& -->
    <reference-type-def kind='lvalue' type-id='type-id-571' size-in-bits='64' id='type-id-1267'/>
    <!-- std::_Rb_tree_node<MemoryRegionMap::Region>* -->
    <pointer-type-def type-id='type-id-571' size-in-bits='64' id='type-id-869'/>
    <!-- std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>* -->
    <pointer-type-def type-id='type-id-1268' size-in-bits='64' id='type-id-1269'/>
    <!-- std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>* -->
    <pointer-type-def type-id='type-id-1270' size-in-bits='64' id='type-id-1271'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-186' size-in-bits='64' id='type-id-1272'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* -->
    <pointer-type-def type-id='type-id-186' size-in-bits='64' id='type-id-940'/>
    <!-- std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const -->
    <qualified-type-def type-id='type-id-940' const='yes' id='type-id-1273'/>
    <!-- void (const MemoryRegionMap::Region&)* -->
    <pointer-type-def type-id='type-id-950' size-in-bits='64' id='type-id-201'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='set&lt;MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='88' column='1' id='type-id-186'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-939' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='112' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set() -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='136' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set(const MemoryRegionMap::RegionCmp&, const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='145' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
            <parameter type-id='type-id-941'/>
            <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
            <parameter type-id='type-id-942'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::set(const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&) -->
          <function-decl name='set' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_set.h' line='188' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-940' is-artificial='yes'/>
            <!-- parameter of type 'const std::set<MemoryRegionMap::Region, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&' -->
            <parameter type-id='type-id-943'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> > -->
      <class-decl name='_Rb_tree&lt;MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity&lt;MemoryRegionMap::Region&gt;, MemoryRegionMap::RegionCmp, STL_Allocator&lt;MemoryRegionMap::Region, MemoryRegionMap::MyAllocator&gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-939'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> -->
          <class-decl name='_Rb_tree_impl&lt;MemoryRegionMap::RegionCmp, true&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-981'>
            <!-- class STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-982'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MemoryRegionMap::RegionCmp std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-182' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>*' -->
                <parameter type-id='type-id-983' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>::_Rb_tree_impl(const MemoryRegionMap::RegionCmp&, const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true>*' -->
                <parameter type-id='type-id-983' is-artificial='yes'/>
                <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
                <parameter type-id='type-id-941'/>
                <!-- parameter of type 'const STL_Allocator<std::_Rb_tree_node<MemoryRegionMap::Region>, MemoryRegionMap::MyAllocator>&' -->
                <parameter type-id='type-id-984'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree_impl<MemoryRegionMap::RegionCmp, true> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-981' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree(const MemoryRegionMap::RegionCmp&, const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- parameter of type 'const MemoryRegionMap::RegionCmp&' -->
            <parameter type-id='type-id-941'/>
            <!-- parameter of type 'const STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator>&' -->
            <parameter type-id='type-id-942'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_Rb_tree(const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >&' -->
            <parameter type-id='type-id-986'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >*' -->
            <parameter type-id='type-id-985' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_erase(std::_Rb_tree_node<MemoryRegionMap::Region>*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE8_M_eraseEPSt13_Rb_tree_nodeIS1_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const' -->
            <parameter type-id='type-id-987' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<MemoryRegionMap::Region>*' -->
            <parameter type-id='type-id-869' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region> std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const MemoryRegionMap::Region&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIN15MemoryRegionMap6RegionES1_St9_IdentityIS1_ENS0_9RegionCmpE13STL_AllocatorIS1_NS0_11MyAllocatorEEE10_M_insert_EPKSt18_Rb_tree_node_baseSB_RKS1_'>
            <!-- implicit parameter of type 'std::_Rb_tree<MemoryRegionMap::Region, MemoryRegionMap::Region, std::_Identity<MemoryRegionMap::Region>, MemoryRegionMap::RegionCmp, STL_Allocator<MemoryRegionMap::Region, MemoryRegionMap::MyAllocator> >* const' -->
            <parameter type-id='type-id-987' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const MemoryRegionMap::Region&' -->
            <parameter type-id='type-id-202' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<MemoryRegionMap::Region> -->
            <return type-id='type-id-544'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Identity<MemoryRegionMap::Region> -->
      <class-decl name='_Identity&lt;MemoryRegionMap::Region&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='469' column='1' id='type-id-1251'>
        <!-- struct std::unary_function<MemoryRegionMap::Region, MemoryRegionMap::Region> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1274'/>
      </class-decl>
      <!-- struct std::unary_function<MemoryRegionMap::Region, MemoryRegionMap::Region> -->
      <class-decl name='unary_function&lt;MemoryRegionMap::Region, MemoryRegionMap::Region&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-1274'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1270'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<MemoryRegionMap::Region> std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::first -->
          <var-decl name='first' type-id='type-id-544' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>*' -->
            <parameter type-id='type-id-1271' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>::pair(const std::_Rb_tree_iterator<MemoryRegionMap::Region>&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, bool>*' -->
            <parameter type-id='type-id-1271' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<MemoryRegionMap::Region>&' -->
            <parameter type-id='type-id-546'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1268'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_const_iterator<MemoryRegionMap::Region> std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::first -->
          <var-decl name='first' type-id='type-id-193' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>*' -->
            <parameter type-id='type-id-1269' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>::pair(const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, bool>*' -->
            <parameter type-id='type-id-1269' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_const_iterator<MemoryRegionMap::Region>&' -->
            <parameter type-id='type-id-518'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__miter_base<const void**, false> -->
      <class-decl name='__miter_base&lt;const void**, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-1275'/>
      <!-- bool std::__equal_aux<const void**, const void**>(void**, void**, void**) -->
      <function-decl name='__equal_aux&lt;const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='822' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void** std::__copy_move_a<false, const void**, const void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_a&lt;false, const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- void** std::__copy_move_a2<false, const void**, const void**>(void**, void**, void**) -->
      <function-decl name='__copy_move_a2&lt;false, const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- bool std::equal<const void**, const void**>(void**, void**, void**) -->
      <function-decl name='equal&lt;const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='952' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- bool -->
        <return type-id='type-id-61'/>
      </function-decl>
      <!-- void** std::copy<const void**, const void**>(void**, void**, void**) -->
      <function-decl name='copy&lt;const void**, const void**&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void** -->
        <return type-id='type-id-151'/>
      </function-decl>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1276'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1277'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<MemoryRegionMap::Region>, std::_Rb_tree_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt;, std::_Rb_tree_iterator&lt;MemoryRegionMap::Region&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1278'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<MemoryRegionMap::Region>, std::_Rb_tree_const_iterator<MemoryRegionMap::Region> > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt;, std::_Rb_tree_const_iterator&lt;MemoryRegionMap::Region&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1279'/>
    </namespace-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
        <!-- Atomic32 base::subtle::NoBarrier_Load(const volatile Atomic32*) -->
        <function-decl name='NoBarrier_Load' filepath='./src/base/atomicops-internals-x86.h' line='163' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const volatile Atomic32*' -->
          <parameter type-id='type-id-109'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- const SpinLock* -->
    <pointer-type-def type-id='type-id-102' size-in-bits='64' id='type-id-1249'/>
    <!-- void (const MemoryRegionMap::Region&) -->
    <function-type size-in-bits='64' id='type-id-950'>
      <!-- parameter of type 'const MemoryRegionMap::Region&' -->
      <parameter type-id='type-id-433'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/page_heap.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- TCMalloc_PageMap3<35>* const -->
    <qualified-type-def type-id='type-id-1280' const='yes' id='type-id-1281'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- double tcmalloc::commandlineflags::StringToDouble(const char*, double) -->
        <function-decl name='StringToDouble' filepath='src/base/commandlineflags.h' line='139' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead'>
      <!-- double FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_tcmalloc_release_rate -->
      <var-decl name='FLAGS_tcmalloc_release_rate' type-id='type-id-2' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE' visibility='default' filepath='src/page_heap.cc' line='46' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead27FLAGS_tcmalloc_release_rateE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead::FLAGS_notcmalloc_release_rate -->
      <var-decl name='FLAGS_notcmalloc_release_rate' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE' visibility='default' filepath='src/page_heap.cc' line='52' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_double_instead29FLAGS_notcmalloc_release_rateE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_heap_limit_mb -->
      <var-decl name='FLAGS_tcmalloc_heap_limit_mb' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE' visibility='default' filepath='src/page_heap.cc' line='54' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead28FLAGS_tcmalloc_heap_limit_mbE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_heap_limit_mb -->
      <var-decl name='FLAGS_notcmalloc_heap_limit_mb' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE' visibility='default' filepath='src/page_heap.cc' line='60' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead30FLAGS_notcmalloc_heap_limit_mbE'/>
    </namespace-decl>
    <!-- TCMalloc_PageMap3<35>* -->
    <pointer-type-def type-id='type-id-1282' size-in-bits='64' id='type-id-1280'/>
    <!-- class TCMalloc_PageMap3<35> -->
    <class-decl name='TCMalloc_PageMap3&lt;35&gt;' size-in-bits='128' visibility='default' filepath='src/pagemap.h' line='209' column='1' id='type-id-1282'>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Node -->
        <class-decl name='Node' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1283'/>
      </member-type>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Leaf -->
        <class-decl name='Leaf' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1284'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::INTERIOR_BITS -->
        <var-decl name='INTERIOR_BITS' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='212' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::INTERIOR_LENGTH -->
        <var-decl name='INTERIOR_LENGTH' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='213' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::LEAF_BITS -->
        <var-decl name='LEAF_BITS' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='216' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::LEAF_LENGTH -->
        <var-decl name='LEAF_LENGTH' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='217' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- TCMalloc_PageMap3<35>::Node* TCMalloc_PageMap3<35>::root_ -->
        <var-decl name='root_' type-id='type-id-1285' visibility='default' filepath='src/pagemap.h' line='229' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- void* (unsigned long int)* TCMalloc_PageMap3<35>::allocator_ -->
        <var-decl name='allocator_' type-id='type-id-263' visibility='default' filepath='src/pagemap.h' line='230' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void TCMalloc_PageMap3<35>::TCMalloc_PageMap3(void* (unsigned long int)*) -->
        <function-decl name='TCMalloc_PageMap3' filepath='src/pagemap.h' line='243' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'TCMalloc_PageMap3<35>*' -->
          <parameter type-id='type-id-1280' is-artificial='yes'/>
          <!-- parameter of type 'void* (unsigned long int)*' -->
          <parameter type-id='type-id-263'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- TCMalloc_PageMap3<35>::Node* -->
    <pointer-type-def type-id='type-id-1283' size-in-bits='64' id='type-id-1285'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/profile-handler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- typedef void (int, siginfo_t*, void*, void*)* ProfileHandlerCallback -->
    <typedef-decl name='ProfileHandlerCallback' type-id='type-id-1286' filepath='src/profile-handler.h' line='95' column='1' id='type-id-1287'/>
    <!-- struct timer_id_holder -->
    <class-decl name='timer_id_holder' size-in-bits='64' is-struct='yes' visibility='default' filepath='src/profile-handler.cc' line='266' column='1' id='type-id-1288'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- timer_t timer_id_holder::timerid -->
        <var-decl name='timerid' type-id='type-id-1289' visibility='default' filepath='src/profile-handler.cc' line='267' column='1'/>
      </data-member>
      <member-function access='public' constructor='yes'>
        <!-- timer_id_holder::timer_id_holder(timer_t) -->
        <function-decl name='timer_id_holder' filepath='src/profile-handler.cc' line='268' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'timer_id_holder*' -->
          <parameter type-id='type-id-1290' is-artificial='yes'/>
          <!-- parameter of type 'typedef timer_t' -->
          <parameter type-id='type-id-1289'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef __timer_t timer_t -->
    <typedef-decl name='timer_t' type-id='type-id-1291' filepath='/usr/include/time.h' line='104' column='1' id='type-id-1289'/>
    <!-- typedef void* __timer_t -->
    <typedef-decl name='__timer_t' type-id='type-id-58' filepath='/usr/include/bits/types.h' line='161' column='1' id='type-id-1291'/>
    <!-- class ProfileHandler -->
    <class-decl name='ProfileHandler' size-in-bits='448' visibility='default' filepath='src/profile-handler.cc' line='84' column='1' id='type-id-1292'>
      <member-type access='private'>
        <!-- enum ProfileHandler::__anonymous_enum__ -->
        <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/profile-handler.cc' line='166' column='1' id='type-id-1293'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='TIMERS_UNTOUCHED' value='0'/>
          <enumerator name='TIMERS_ONE_SET' value='1'/>
          <enumerator name='TIMERS_SHARED' value='2'/>
          <enumerator name='TIMERS_SEPARATE' value='3'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > ProfileHandler::CallbackList -->
        <typedef-decl name='CallbackList' type-id='type-id-1295' filepath='src/profile-handler.cc' line='199' column='1' id='type-id-1294'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef std::_List_iterator<ProfileHandlerToken*> ProfileHandler::CallbackIterator -->
        <typedef-decl name='CallbackIterator' type-id='type-id-1297' filepath='src/profile-handler.cc' line='200' column='1' id='type-id-1296'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int32 ProfileHandler::kMaxFrequency -->
        <var-decl name='kMaxFrequency' type-id='type-id-1298' mangled-name='_ZN14ProfileHandler13kMaxFrequencyE' visibility='default' filepath='src/profile-handler.cc' line='128' column='1' elf-symbol-id='_ZN14ProfileHandler13kMaxFrequencyE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int32 ProfileHandler::kDefaultFrequency -->
        <var-decl name='kDefaultFrequency' type-id='type-id-1298' mangled-name='_ZN14ProfileHandler17kDefaultFrequencyE' visibility='default' filepath='src/profile-handler.cc' line='130' column='1' elf-symbol-id='_ZN14ProfileHandler17kDefaultFrequencyE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static ProfileHandler* ProfileHandler::instance_ -->
        <var-decl name='instance_' type-id='type-id-1299' mangled-name='_ZN14ProfileHandler9instance_E' visibility='default' filepath='src/profile-handler.cc' line='133' column='1' elf-symbol-id='_ZN14ProfileHandler9instance_E'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static pthread_once_t ProfileHandler::once_ -->
        <var-decl name='once_' type-id='type-id-1234' mangled-name='_ZN14ProfileHandler5once_E' visibility='default' filepath='src/profile-handler.cc' line='136' column='1' elf-symbol-id='_ZN14ProfileHandler5once_E'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- int64 ProfileHandler::interrupts_ -->
        <var-decl name='interrupts_' type-id='type-id-98' visibility='default' filepath='src/profile-handler.cc' line='142' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- int32 ProfileHandler::frequency_ -->
        <var-decl name='frequency_' type-id='type-id-74' visibility='default' filepath='src/profile-handler.cc' line='145' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='96'>
        <!-- int ProfileHandler::timer_type_ -->
        <var-decl name='timer_type_' type-id='type-id-1' visibility='default' filepath='src/profile-handler.cc' line='148' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int32 ProfileHandler::callback_count_ -->
        <var-decl name='callback_count_' type-id='type-id-74' visibility='default' filepath='src/profile-handler.cc' line='151' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='160'>
        <!-- bool ProfileHandler::allowed_ -->
        <var-decl name='allowed_' type-id='type-id-61' visibility='default' filepath='src/profile-handler.cc' line='154' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='168'>
        <!-- bool ProfileHandler::per_thread_timer_enabled_ -->
        <var-decl name='per_thread_timer_enabled_' type-id='type-id-61' visibility='default' filepath='src/profile-handler.cc' line='156' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- pthread_key_t ProfileHandler::thread_timer_key -->
        <var-decl name='thread_timer_key' type-id='type-id-1232' visibility='default' filepath='src/profile-handler.cc' line='161' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='224'>
        <!-- ProfileHandler::__anonymous_enum__ ProfileHandler::timer_sharing_ -->
        <var-decl name='timer_sharing_' type-id='type-id-1293' visibility='default' filepath='src/profile-handler.cc' line='175' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- SpinLock ProfileHandler::control_lock_ -->
        <var-decl name='control_lock_' type-id='type-id-87' visibility='default' filepath='src/profile-handler.cc' line='183' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='288'>
        <!-- SpinLock ProfileHandler::signal_lock_ -->
        <var-decl name='signal_lock_' type-id='type-id-87' visibility='default' filepath='src/profile-handler.cc' line='184' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- ProfileHandler::CallbackList ProfileHandler::callbacks_ -->
        <var-decl name='callbacks_' type-id='type-id-1294' visibility='default' filepath='src/profile-handler.cc' line='201' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- ProfileHandler::ProfileHandler() -->
        <function-decl name='ProfileHandler' mangled-name='_ZN14ProfileHandlerC1Ev' filepath='src/profile-handler.cc' line='124' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandlerC1Ev'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1299' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProfileHandler::~ProfileHandler(int) -->
        <function-decl name='~ProfileHandler' mangled-name='_ZN14ProfileHandlerD1Ev' filepath='src/profile-handler.cc' line='125' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandlerD1Ev'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1299' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProfileHandler::ProfileHandler(const ProfileHandler&) -->
        <function-decl name='ProfileHandler' filepath='src/profile-handler.cc' line='231' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1299' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileHandler&' -->
          <parameter type-id='type-id-1300'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileHandler::IsSignalHandlerAvailable() -->
        <function-decl name='IsSignalHandlerAvailable' mangled-name='_ZN14ProfileHandler24IsSignalHandlerAvailableEv' filepath='src/profile-handler.cc' line='603' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler24IsSignalHandlerAvailableEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::DisableHandler() -->
        <function-decl name='DisableHandler' mangled-name='_ZN14ProfileHandler14DisableHandlerEv' filepath='src/profile-handler.cc' line='591' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14DisableHandlerEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::EnableHandler() -->
        <function-decl name='EnableHandler' mangled-name='_ZN14ProfileHandler13EnableHandlerEv' filepath='src/profile-handler.cc' line='579' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler13EnableHandlerEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileHandler::IsTimerRunning() -->
        <function-decl name='IsTimerRunning' mangled-name='_ZN14ProfileHandler14IsTimerRunningEv' filepath='src/profile-handler.cc' line='566' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14IsTimerRunningEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::StopTimer() -->
        <function-decl name='StopTimer' mangled-name='_ZN14ProfileHandler9StopTimerEv' filepath='src/profile-handler.cc' line='553' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler9StopTimerEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::StartTimer() -->
        <function-decl name='StartTimer' mangled-name='_ZN14ProfileHandler10StartTimerEv' filepath='src/profile-handler.cc' line='534' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler10StartTimerEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void ProfileHandler::SignalHandler(siginfo_t*, void*) -->
        <function-decl name='SignalHandler' mangled-name='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv' filepath='src/profile-handler.cc' line='618' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler13SignalHandlerEiP7siginfoPv'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'siginfo_t*' -->
          <parameter type-id='type-id-1302'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::GetState(ProfileHandlerState*) -->
        <function-decl name='GetState' mangled-name='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState' filepath='src/profile-handler.cc' line='519' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler8GetStateEP19ProfileHandlerState'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- parameter of type 'ProfileHandlerState*' -->
          <parameter type-id='type-id-1303' name='state' filepath='src/profile-handler.cc' line='519' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::Reset() -->
        <function-decl name='Reset' mangled-name='_ZN14ProfileHandler5ResetEv' filepath='src/profile-handler.cc' line='499' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler5ResetEv'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- ProfileHandlerToken* ProfileHandler::RegisterCallback(ProfileHandlerCallback, void*) -->
        <function-decl name='RegisterCallback' mangled-name='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_' filepath='src/profile-handler.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler16RegisterCallbackEPFviP7siginfoPvS2_ES2_'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef ProfileHandlerCallback' -->
          <parameter type-id='type-id-1287' name='callback' filepath='src/profile-handler.cc' line='455' column='1'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='callback_arg' filepath='src/profile-handler.cc' line='455' column='1'/>
          <!-- ProfileHandlerToken* -->
          <return type-id='type-id-1304'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::UnregisterCallback(ProfileHandlerToken*) -->
        <function-decl name='UnregisterCallback' mangled-name='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken' filepath='src/profile-handler.cc' line='474' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler18UnregisterCallbackEP19ProfileHandlerToken'>
          <!-- implicit parameter of type 'ProfileHandler* const' -->
          <parameter type-id='type-id-1301' name='this' is-artificial='yes'/>
          <!-- parameter of type 'ProfileHandlerToken*' -->
          <parameter type-id='type-id-1304' name='token' filepath='src/profile-handler.cc' line='474' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileHandler::RegisterThread(int) -->
        <function-decl name='RegisterThread' mangled-name='_ZN14ProfileHandler14RegisterThreadEv' filepath='src/profile-handler.cc' line='404' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler14RegisterThreadEv'>
          <!-- implicit parameter of type 'ProfileHandler*' -->
          <parameter type-id='type-id-1299' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void ProfileHandler::Init() -->
        <function-decl name='Init' mangled-name='_ZN14ProfileHandler4InitEv' filepath='src/profile-handler.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler4InitEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- ProfileHandler* ProfileHandler::Instance() -->
        <function-decl name='Instance' mangled-name='_ZN14ProfileHandler8InstanceEv' filepath='src/profile-handler.cc' line='328' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14ProfileHandler8InstanceEv'>
          <!-- ProfileHandler* -->
          <return type-id='type-id-1299'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef int pthread_once_t -->
    <typedef-decl name='pthread_once_t' type-id='type-id-1' filepath='/usr/include/bits/pthreadtypes.h' line='144' column='1' id='type-id-1234'/>
    <!-- struct ProfileHandlerState -->
    <class-decl name='ProfileHandlerState' size-in-bits='192' is-struct='yes' visibility='default' filepath='src/profile-handler.h' line='137' column='1' id='type-id-1305'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int32 ProfileHandlerState::frequency -->
        <var-decl name='frequency' type-id='type-id-74' visibility='default' filepath='src/profile-handler.h' line='138' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int32 ProfileHandlerState::callback_count -->
        <var-decl name='callback_count' type-id='type-id-74' visibility='default' filepath='src/profile-handler.h' line='139' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int64 ProfileHandlerState::interrupts -->
        <var-decl name='interrupts' type-id='type-id-98' visibility='default' filepath='src/profile-handler.h' line='140' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- bool ProfileHandlerState::allowed -->
        <var-decl name='allowed' type-id='type-id-61' visibility='default' filepath='src/profile-handler.h' line='141' column='1'/>
      </data-member>
    </class-decl>
    <!-- ProfileHandler* -->
    <pointer-type-def type-id='type-id-1292' size-in-bits='64' id='type-id-1299'/>
    <!-- ProfileHandler* const -->
    <qualified-type-def type-id='type-id-1299' const='yes' id='type-id-1301'/>
    <!-- ProfileHandlerState* -->
    <pointer-type-def type-id='type-id-1305' size-in-bits='64' id='type-id-1303'/>
    <!-- ProfileHandlerToken* const -->
    <qualified-type-def type-id='type-id-1304' const='yes' id='type-id-1306'/>
    <!-- ProfileHandlerToken* const& -->
    <qualified-type-def type-id='type-id-1307' id='type-id-1308'/>
    <!-- ProfileHandlerToken* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1306' size-in-bits='64' id='type-id-1307'/>
    <!-- ProfileHandlerToken* const* -->
    <pointer-type-def type-id='type-id-1306' size-in-bits='64' id='type-id-1309'/>
    <!-- ProfileHandlerToken*& -->
    <reference-type-def kind='lvalue' type-id='type-id-1304' size-in-bits='64' id='type-id-1310'/>
    <!-- ProfileHandlerToken** -->
    <pointer-type-def type-id='type-id-1304' size-in-bits='64' id='type-id-1311'/>
    <!-- __gnu_cxx::new_allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1312' size-in-bits='64' id='type-id-1313'/>
    <!-- __gnu_cxx::new_allocator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1313' const='yes' id='type-id-1314'/>
    <!-- __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1315' size-in-bits='64' id='type-id-1316'/>
    <!-- __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1316' const='yes' id='type-id-1317'/>
    <!-- const ProfileHandler -->
    <qualified-type-def type-id='type-id-1292' const='yes' id='type-id-1318'/>
    <!-- const ProfileHandler& -->
    <reference-type-def kind='lvalue' type-id='type-id-1318' size-in-bits='64' id='type-id-1300'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1312' const='yes' id='type-id-1319'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1319' size-in-bits='64' id='type-id-1320'/>
    <!-- const __gnu_cxx::new_allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1319' size-in-bits='64' id='type-id-1321'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1315' const='yes' id='type-id-1322'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1322' size-in-bits='64' id='type-id-1323'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1322' size-in-bits='64' id='type-id-1324'/>
    <!-- const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1324' const='yes' id='type-id-1325'/>
    <!-- const int32 -->
    <qualified-type-def type-id='type-id-74' const='yes' id='type-id-1298'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1326' const='yes' id='type-id-1327'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1327' size-in-bits='64' id='type-id-1328'/>
    <!-- const std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1328' const='yes' id='type-id-1329'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1297' const='yes' id='type-id-1330'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>& -->
    <qualified-type-def type-id='type-id-1331' id='type-id-1332'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1330' size-in-bits='64' id='type-id-1331'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1330' size-in-bits='64' id='type-id-1333'/>
    <!-- const std::_List_iterator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1333' const='yes' id='type-id-1334'/>
    <!-- const std::_List_node<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1335' const='yes' id='type-id-1336'/>
    <!-- const std::_List_node<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1336' size-in-bits='64' id='type-id-1337'/>
    <!-- const std::_List_node<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1336' size-in-bits='64' id='type-id-1338'/>
    <!-- const std::allocator<ProfileHandlerToken*> -->
    <qualified-type-def type-id='type-id-1339' const='yes' id='type-id-1340'/>
    <!-- const std::allocator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1340' size-in-bits='64' id='type-id-1341'/>
    <!-- const std::allocator<std::_List_node<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1342' const='yes' id='type-id-1343'/>
    <!-- const std::allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1343' size-in-bits='64' id='type-id-1344'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
    <qualified-type-def type-id='type-id-1295' const='yes' id='type-id-1345'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1345' size-in-bits='64' id='type-id-1346'/>
    <!-- const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1345' size-in-bits='64' id='type-id-1347'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1326' size-in-bits='64' id='type-id-1348'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1348' const='yes' id='type-id-1349'/>
    <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl* -->
    <pointer-type-def type-id='type-id-1350' size-in-bits='64' id='type-id-1351'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1297' size-in-bits='64' id='type-id-1352'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1297' size-in-bits='64' id='type-id-1353'/>
    <!-- std::_List_iterator<ProfileHandlerToken*>* const -->
    <qualified-type-def type-id='type-id-1353' const='yes' id='type-id-1354'/>
    <!-- std::_List_node<ProfileHandlerToken*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1335' size-in-bits='64' id='type-id-1355'/>
    <!-- std::_List_node<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1335' size-in-bits='64' id='type-id-1356'/>
    <!-- std::_List_node_base& -->
    <reference-type-def kind='lvalue' type-id='type-id-1357' size-in-bits='64' id='type-id-1358'/>
    <!-- std::_List_node_base* -->
    <pointer-type-def type-id='type-id-1357' size-in-bits='64' id='type-id-1359'/>
    <!-- std::allocator<ProfileHandlerToken*>* -->
    <pointer-type-def type-id='type-id-1339' size-in-bits='64' id='type-id-1360'/>
    <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1342' size-in-bits='64' id='type-id-1361'/>
    <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1342' size-in-bits='64' id='type-id-1362'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1295' size-in-bits='64' id='type-id-1363'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* -->
    <pointer-type-def type-id='type-id-1295' size-in-bits='64' id='type-id-1364'/>
    <!-- std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >* const -->
    <qualified-type-def type-id='type-id-1364' const='yes' id='type-id-1365'/>
    <!-- timer_id_holder* -->
    <pointer-type-def type-id='type-id-1288' size-in-bits='64' id='type-id-1290'/>
    <!-- void (int, siginfo_t*, void*, void*)* -->
    <pointer-type-def type-id='type-id-1366' size-in-bits='64' id='type-id-1286'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- struct std::_List_iterator<ProfileHandlerToken*> -->
      <class-decl name='_List_iterator&lt;ProfileHandlerToken*&gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='114' column='1' id='type-id-1297'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_List_node_base* std::_List_iterator<ProfileHandlerToken*>::_M_node -->
          <var-decl name='_M_node' type-id='type-id-1359' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='179' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_List_iterator<ProfileHandlerToken*>::_List_iterator() -->
          <function-decl name='_List_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='124' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_List_iterator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1353' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_List_iterator<ProfileHandlerToken*>::_List_iterator(std::_List_node_base*) -->
          <function-decl name='_List_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='128' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_List_iterator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1353' is-artificial='yes'/>
            <!-- parameter of type 'std::_List_node_base*' -->
            <parameter type-id='type-id-1359'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_List_node_base -->
      <class-decl name='_List_node_base' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='72' column='1' id='type-id-1357'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_List_node_base* std::_List_node_base::_M_next -->
          <var-decl name='_M_next' type-id='type-id-1359' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='73' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- std::_List_node_base* std::_List_node_base::_M_prev -->
          <var-decl name='_M_prev' type-id='type-id-1359' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='74' column='1'/>
        </data-member>
      </class-decl>
      <!-- class std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
      <class-decl name='list&lt;ProfileHandlerToken*, std::allocator&lt;ProfileHandlerToken*&gt; &gt;' size-in-bits='128' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='418' column='1' id='type-id-1295'>
        <!-- class std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-1326'/>
        <member-function access='private'>
          <!-- void std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::list() -->
          <function-decl name='list' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='499' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1364' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::list(const std::allocator<ProfileHandlerToken*>&) -->
          <function-decl name='list' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='507' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1364' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<ProfileHandlerToken*>&' -->
            <parameter type-id='type-id-1341'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::list(unsigned long int, ProfileHandlerToken* const&, const std::allocator<ProfileHandlerToken*>&) -->
          <function-decl name='list' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='519' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1364' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'ProfileHandlerToken* const&' -->
            <parameter type-id='type-id-1307'/>
            <!-- parameter of type 'const std::allocator<ProfileHandlerToken*>&' -->
            <parameter type-id='type-id-1341'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::list(const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >&) -->
          <function-decl name='list' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='531' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1364' is-artificial='yes'/>
            <!-- parameter of type 'const std::list<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >&' -->
            <parameter type-id='type-id-1346'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<std::_List_node<ProfileHandlerToken*> > -->
      <class-decl name='allocator&lt;std::_List_node&lt;ProfileHandlerToken*&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1342'>
        <!-- class __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1315'/>
        <member-function access='private'>
          <!-- void std::allocator<std::_List_node<ProfileHandlerToken*> >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1362' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::_List_node<ProfileHandlerToken*> >::allocator(const std::allocator<std::_List_node<ProfileHandlerToken*> >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1362' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_List_node<ProfileHandlerToken*> >&' -->
            <parameter type-id='type-id-1344'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::_List_node<ProfileHandlerToken*> >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1362' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> > -->
      <class-decl name='_List_base&lt;ProfileHandlerToken*, std::allocator&lt;ProfileHandlerToken*&gt; &gt;' size-in-bits='128' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='278' column='1' id='type-id-1326'>
        <member-type access='protected'>
          <!-- struct std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl -->
          <class-decl name='_List_impl' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='300' column='1' id='type-id-1350'>
            <!-- class std::allocator<std::_List_node<ProfileHandlerToken*> > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1342'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::_List_node_base std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl::_M_node -->
              <var-decl name='_M_node' type-id='type-id-1357' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='301' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl::_List_impl() -->
              <function-decl name='_List_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='303' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl*' -->
                <parameter type-id='type-id-1351' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl::_List_impl(const std::allocator<std::_List_node<ProfileHandlerToken*> >&) -->
              <function-decl name='_List_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='307' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl*' -->
                <parameter type-id='type-id-1351' is-artificial='yes'/>
                <!-- parameter of type 'const std::allocator<std::_List_node<ProfileHandlerToken*> >&' -->
                <parameter type-id='type-id-1344'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_impl std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1350' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='312' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_base() -->
          <function-decl name='_List_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='341' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1348' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::_List_base(const std::allocator<ProfileHandlerToken*>&) -->
          <function-decl name='_List_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='345' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1348' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<ProfileHandlerToken*>&' -->
            <parameter type-id='type-id-1341'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >::~_List_base(int) -->
          <function-decl name='~_List_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_list.h' line='359' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_List_base<ProfileHandlerToken*, std::allocator<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1348' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<ProfileHandlerToken*> -->
      <class-decl name='allocator&lt;ProfileHandlerToken*&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1339'>
        <!-- class __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1312'/>
        <member-function access='private'>
          <!-- void std::allocator<ProfileHandlerToken*>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1360' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<ProfileHandlerToken*>::allocator(const std::allocator<ProfileHandlerToken*>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1360' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<ProfileHandlerToken*>&' -->
            <parameter type-id='type-id-1341'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<ProfileHandlerToken*>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1360' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<ProfileHandlerToken*>::allocator<std::_List_node<ProfileHandlerToken*> >(const std::allocator<std::_List_node<ProfileHandlerToken*> >&) -->
          <function-decl name='allocator&lt;std::_List_node&lt;ProfileHandlerToken*&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1360' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_List_node<ProfileHandlerToken*> >&' -->
            <parameter type-id='type-id-1344'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_List_node<ProfileHandlerToken*> -->
      <class-decl name='_List_node&lt;ProfileHandlerToken*&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1335'/>
      <!-- struct std::_List_const_iterator<ProfileHandlerToken*> -->
      <class-decl name='_List_const_iterator&lt;ProfileHandlerToken*&gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1367'/>
      <!-- class std::reverse_iterator<std::_List_iterator<ProfileHandlerToken*> > -->
      <class-decl name='reverse_iterator&lt;std::_List_iterator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1368'/>
      <!-- class std::reverse_iterator<std::_List_const_iterator<ProfileHandlerToken*> > -->
      <class-decl name='reverse_iterator&lt;std::_List_const_iterator&lt;ProfileHandlerToken*&gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1369'/>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> > -->
      <class-decl name='new_allocator&lt;std::_List_node&lt;ProfileHandlerToken*&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1315'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1316' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >::new_allocator(const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1316' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >&' -->
            <parameter type-id='type-id-1323'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_List_node<ProfileHandlerToken*> >*' -->
            <parameter type-id='type-id-1316' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<ProfileHandlerToken*> -->
      <class-decl name='new_allocator&lt;ProfileHandlerToken*&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1312'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<ProfileHandlerToken*>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1313' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<ProfileHandlerToken*>::new_allocator(const __gnu_cxx::new_allocator<ProfileHandlerToken*>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1313' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<ProfileHandlerToken*>&' -->
            <parameter type-id='type-id-1320'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<ProfileHandlerToken*>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<ProfileHandlerToken*>*' -->
            <parameter type-id='type-id-1313' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- void ProfileHandlerGetState(ProfileHandlerState*) -->
    <function-decl name='ProfileHandlerGetState' mangled-name='ProfileHandlerGetState' filepath='src/profile-handler.cc' line='658' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerGetState'>
      <!-- parameter of type 'ProfileHandlerState*' -->
      <parameter type-id='type-id-1303' name='state' filepath='src/profile-handler.cc' line='658' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfileHandlerReset() -->
    <function-decl name='ProfileHandlerReset' mangled-name='ProfileHandlerReset' filepath='src/profile-handler.cc' line='654' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerReset'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfileHandlerUnregisterCallback(ProfileHandlerToken*) -->
    <function-decl name='ProfileHandlerUnregisterCallback' mangled-name='ProfileHandlerUnregisterCallback' filepath='src/profile-handler.cc' line='650' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerUnregisterCallback'>
      <!-- parameter of type 'ProfileHandlerToken*' -->
      <parameter type-id='type-id-1304' name='token' filepath='src/profile-handler.cc' line='650' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- ProfileHandlerToken* ProfileHandlerRegisterCallback(ProfileHandlerCallback, void*) -->
    <function-decl name='ProfileHandlerRegisterCallback' mangled-name='ProfileHandlerRegisterCallback' filepath='src/profile-handler.cc' line='645' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerRegisterCallback'>
      <!-- parameter of type 'typedef ProfileHandlerCallback' -->
      <parameter type-id='type-id-1287' name='callback' filepath='src/profile-handler.cc' line='646' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='callback_arg' filepath='src/profile-handler.cc' line='646' column='1'/>
      <!-- ProfileHandlerToken* -->
      <return type-id='type-id-1304'/>
    </function-decl>
    <!-- void ProfileHandlerRegisterThread() -->
    <function-decl name='ProfileHandlerRegisterThread' mangled-name='ProfileHandlerRegisterThread' filepath='src/profile-handler.cc' line='641' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfileHandlerRegisterThread'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- ProfileHandlerToken* -->
    <pointer-type-def type-id='type-id-1370' size-in-bits='64' id='type-id-1304'/>
    <!-- void (int, siginfo_t*, void*, void*) -->
    <function-type size-in-bits='64' id='type-id-1366'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'siginfo_t*' -->
      <parameter type-id='type-id-1302'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- siginfo_t* -->
    <pointer-type-def type-id='type-id-1371' size-in-bits='64' id='type-id-1302'/>
    <!-- struct ProfileHandlerToken -->
    <class-decl name='ProfileHandlerToken' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/profile-handler.cc' line='69' column='1' id='type-id-1370'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- ProfileHandlerCallback ProfileHandlerToken::callback -->
        <var-decl name='callback' type-id='type-id-1287' visibility='default' filepath='src/profile-handler.cc' line='77' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* ProfileHandlerToken::callback_arg -->
        <var-decl name='callback_arg' type-id='type-id-58' visibility='default' filepath='src/profile-handler.cc' line='79' column='1'/>
      </data-member>
      <member-function access='public' constructor='yes'>
        <!-- ProfileHandlerToken::ProfileHandlerToken(ProfileHandlerCallback, void*) -->
        <function-decl name='ProfileHandlerToken' filepath='src/profile-handler.cc' line='71' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'ProfileHandlerToken*' -->
          <parameter type-id='type-id-1304' is-artificial='yes'/>
          <!-- parameter of type 'typedef ProfileHandlerCallback' -->
          <parameter type-id='type-id-1287'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef siginfo siginfo_t -->
    <typedef-decl name='siginfo_t' type-id='type-id-1372' filepath='/usr/include/bits/siginfo.h' line='108' column='1' id='type-id-1371'/>
    <!-- struct siginfo -->
    <class-decl name='siginfo' size-in-bits='1024' is-struct='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='52' column='1' id='type-id-1372'>
      <member-type access='public'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} -->
        <union-decl name='__anonymous_union__' size-in-bits='896' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='59' column='1' id='type-id-1373'>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} -->
            <class-decl name='__anonymous_struct__' size-in-bits='64' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='64' column='1' id='type-id-1374'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='65' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='66' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__1' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='71' column='1' id='type-id-1376'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- int si_tid -->
                <var-decl name='si_tid' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='72' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- int si_overrun -->
                <var-decl name='si_overrun' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='73' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1377' visibility='default' filepath='/usr/include/bits/siginfo.h' line='74' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__2' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='79' column='1' id='type-id-1378'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='80' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='81' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1377' visibility='default' filepath='/usr/include/bits/siginfo.h' line='82' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} -->
            <class-decl name='__anonymous_struct__3' size-in-bits='256' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='87' column='1' id='type-id-1379'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='88' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='89' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_status -->
                <var-decl name='si_status' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='90' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='128'>
                <!-- __clock_t si_utime -->
                <var-decl name='si_utime' type-id='type-id-1380' visibility='default' filepath='/usr/include/bits/siginfo.h' line='91' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='192'>
                <!-- __clock_t si_stime -->
                <var-decl name='si_stime' type-id='type-id-1380' visibility='default' filepath='/usr/include/bits/siginfo.h' line='92' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {void* si_addr;} -->
            <class-decl name='__anonymous_struct__4' size-in-bits='64' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='97' column='1' id='type-id-1381'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- void* si_addr -->
                <var-decl name='si_addr' type-id='type-id-58' visibility='default' filepath='/usr/include/bits/siginfo.h' line='98' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {long int si_band; int si_fd;} -->
            <class-decl name='__anonymous_struct__5' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='103' column='1' id='type-id-1382'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- long int si_band -->
                <var-decl name='si_band' type-id='type-id-85' visibility='default' filepath='/usr/include/bits/siginfo.h' line='104' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_fd -->
                <var-decl name='si_fd' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='105' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <data-member access='public'>
            <!-- int _pad[28] -->
            <var-decl name='_pad' type-id='type-id-1383' visibility='default' filepath='/usr/include/bits/siginfo.h' line='60' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} _kill -->
            <var-decl name='_kill' type-id='type-id-1374' visibility='default' filepath='/usr/include/bits/siginfo.h' line='67' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer -->
            <var-decl name='_timer' type-id='type-id-1376' visibility='default' filepath='/usr/include/bits/siginfo.h' line='75' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt -->
            <var-decl name='_rt' type-id='type-id-1378' visibility='default' filepath='/usr/include/bits/siginfo.h' line='83' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld -->
            <var-decl name='_sigchld' type-id='type-id-1379' visibility='default' filepath='/usr/include/bits/siginfo.h' line='93' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {void* si_addr;} _sigfault -->
            <var-decl name='_sigfault' type-id='type-id-1381' visibility='default' filepath='/usr/include/bits/siginfo.h' line='99' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {long int si_band; int si_fd;} _sigpoll -->
            <var-decl name='_sigpoll' type-id='type-id-1382' visibility='default' filepath='/usr/include/bits/siginfo.h' line='106' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int siginfo::si_signo -->
        <var-decl name='si_signo' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='53' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int siginfo::si_errno -->
        <var-decl name='si_errno' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='54' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int siginfo::si_code -->
        <var-decl name='si_code' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='56' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} siginfo::_sifields -->
        <var-decl name='_sifields' type-id='type-id-1373' visibility='default' filepath='/usr/include/bits/siginfo.h' line='107' column='1'/>
      </data-member>
    </class-decl>
    <!-- int[28] -->
    <array-type-def dimensions='1' type-id='type-id-1' size-in-bits='896' id='type-id-1383'>
      <!-- <anonymous range>[28] -->
      <subrange length='28' type-id='type-id-5' id='type-id-1384'/>
    </array-type-def>
    <!-- typedef long int __clock_t -->
    <typedef-decl name='__clock_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='145' column='1' id='type-id-1380'/>
    <!-- typedef unsigned int __uid_t -->
    <typedef-decl name='__uid_t' type-id='type-id-64' filepath='/usr/include/bits/types.h' line='135' column='1' id='type-id-1375'/>
    <!-- typedef sigval sigval_t -->
    <typedef-decl name='sigval_t' type-id='type-id-1385' filepath='/usr/include/bits/siginfo.h' line='37' column='1' id='type-id-1377'/>
    <!-- union sigval -->
    <union-decl name='sigval' size-in-bits='64' visibility='default' filepath='/usr/include/bits/siginfo.h' line='34' column='1' id='type-id-1385'>
      <data-member access='public'>
        <!-- int sigval::sival_int -->
        <var-decl name='sival_int' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='35' column='1'/>
      </data-member>
      <data-member access='public'>
        <!-- void* sigval::sival_ptr -->
        <var-decl name='sival_ptr' type-id='type-id-58' visibility='default' filepath='/usr/include/bits/siginfo.h' line='36' column='1'/>
      </data-member>
    </union-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/profiledata.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- ProfileData* const -->
    <qualified-type-def type-id='type-id-1386' const='yes' id='type-id-1387'/>
    <!-- const ProfileData::Entry& -->
    <qualified-type-def type-id='type-id-1388' id='type-id-1389'/>
    <!-- const ProfileData::Options& -->
    <qualified-type-def type-id='type-id-1390' id='type-id-1391'/>
    <!-- const ProfileData::Options* const -->
    <qualified-type-def type-id='type-id-1392' const='yes' id='type-id-1393'/>
    <!-- ProfileData* -->
    <pointer-type-def type-id='type-id-1394' size-in-bits='64' id='type-id-1386'/>
    <!-- const ProfileData::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1395' size-in-bits='64' id='type-id-1388'/>
    <!-- const ProfileData::Options& -->
    <reference-type-def kind='lvalue' type-id='type-id-1396' size-in-bits='64' id='type-id-1390'/>
    <!-- const ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1396' size-in-bits='64' id='type-id-1392'/>
    <!-- class ProfileData -->
    <class-decl name='ProfileData' size-in-bits='448' visibility='default' filepath='src/profiledata.h' line='79' column='1' id='type-id-1394'>
      <member-type access='private'>
        <!-- class ProfileData::Options -->
        <class-decl name='Options' size-in-bits='32' visibility='default' filepath='src/profiledata.h' line='88' column='1' id='type-id-1397'>
          <data-member access='private' layout-offset-in-bits='0'>
            <!-- int ProfileData::Options::frequency_ -->
            <var-decl name='frequency_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='101' column='1'/>
          </data-member>
          <member-function access='private' constructor='yes'>
            <!-- ProfileData::Options::Options() -->
            <function-decl name='Options' mangled-name='_ZN11ProfileData7OptionsC1Ev' filepath='src/profiledata.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData7OptionsC1Ev'>
              <!-- implicit parameter of type 'ProfileData::Options*' -->
              <parameter type-id='type-id-1398' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::State -->
        <class-decl name='State' size-in-bits='8384' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='81' column='1' id='type-id-1399'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- bool ProfileData::State::enabled -->
            <var-decl name='enabled' type-id='type-id-61' visibility='default' filepath='src/profiledata.h' line='82' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- time_t ProfileData::State::start_time -->
            <var-decl name='start_time' type-id='type-id-1400' visibility='default' filepath='src/profiledata.h' line='83' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- char ProfileData::State::profile_name[1024] -->
            <var-decl name='profile_name' type-id='type-id-1401' visibility='default' filepath='src/profiledata.h' line='84' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='8320'>
            <!-- int ProfileData::State::samples_gathered -->
            <var-decl name='samples_gathered' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='85' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Bucket -->
        <class-decl name='Bucket' size-in-bits='16896' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='161' column='1' id='type-id-1402'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry ProfileData::Bucket::entry[4] -->
            <var-decl name='entry' type-id='type-id-1403' visibility='default' filepath='src/profiledata.h' line='162' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Entry -->
        <class-decl name='Entry' size-in-bits='4224' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='154' column='1' id='type-id-1404'>
          <member-type access='private'>
            <!-- typedef uintptr_t ProfileData::Entry::Slot -->
            <typedef-decl name='Slot' type-id='type-id-156' filepath='src/profiledata.h' line='151' column='1' id='type-id-1405'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::count -->
            <var-decl name='count' type-id='type-id-1405' visibility='default' filepath='src/profiledata.h' line='155' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::depth -->
            <var-decl name='depth' type-id='type-id-1405' visibility='default' filepath='src/profiledata.h' line='156' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::stack[64] -->
            <var-decl name='stack' type-id='type-id-1406' visibility='default' filepath='src/profiledata.h' line='157' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-144' mangled-name='_ZN11ProfileData14kMaxStackDepthE' visibility='default' filepath='src/profiledata.h' line='104' column='1' elf-symbol-id='_ZN11ProfileData14kMaxStackDepthE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kAssociativity -->
        <var-decl name='kAssociativity' type-id='type-id-144' mangled-name='_ZN11ProfileData14kAssociativityE' visibility='default' filepath='src/profiledata.h' line='146' column='1' elf-symbol-id='_ZN11ProfileData14kAssociativityE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kBuckets -->
        <var-decl name='kBuckets' type-id='type-id-144' mangled-name='_ZN11ProfileData8kBucketsE' visibility='default' filepath='src/profiledata.h' line='147' column='1' elf-symbol-id='_ZN11ProfileData8kBucketsE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kBufferLength -->
        <var-decl name='kBufferLength' type-id='type-id-144' mangled-name='_ZN11ProfileData13kBufferLengthE' visibility='default' filepath='src/profiledata.h' line='148' column='1' elf-symbol-id='_ZN11ProfileData13kBufferLengthE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- ProfileData::Bucket* ProfileData::hash_ -->
        <var-decl name='hash_' type-id='type-id-1407' visibility='default' filepath='src/profiledata.h' line='165' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- ProfileData::Entry::Slot* ProfileData::evict_ -->
        <var-decl name='evict_' type-id='type-id-1408' visibility='default' filepath='src/profiledata.h' line='166' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int ProfileData::num_evicted_ -->
        <var-decl name='num_evicted_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='167' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='160'>
        <!-- int ProfileData::out_ -->
        <var-decl name='out_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='168' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- int ProfileData::count_ -->
        <var-decl name='count_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='169' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='224'>
        <!-- int ProfileData::evictions_ -->
        <var-decl name='evictions_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='170' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- size_t ProfileData::total_bytes_ -->
        <var-decl name='total_bytes_' type-id='type-id-62' visibility='default' filepath='src/profiledata.h' line='171' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- char* ProfileData::fname_ -->
        <var-decl name='fname_' type-id='type-id-118' visibility='default' filepath='src/profiledata.h' line='172' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- time_t ProfileData::start_time_ -->
        <var-decl name='start_time_' type-id='type-id-1400' visibility='default' filepath='src/profiledata.h' line='173' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- ProfileData::ProfileData() -->
        <function-decl name='ProfileData' mangled-name='_ZN11ProfileDataC1Ev' filepath='src/profiledata.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataC1Ev'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProfileData::~ProfileData(int) -->
        <function-decl name='~ProfileData' mangled-name='_ZN11ProfileDataD1Ev' filepath='src/profiledata.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataD1Ev'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProfileData::ProfileData(const ProfileData&) -->
        <function-decl name='ProfileData' filepath='src/profiledata.h' line='181' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileData&' -->
          <parameter type-id='type-id-1409'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushEvicted() -->
        <function-decl name='FlushEvicted' mangled-name='_ZN11ProfileData12FlushEvictedEv' filepath='src/profiledata.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData12FlushEvictedEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::GetCurrentState(ProfileData::State*) -->
        <function-decl name='GetCurrentState' mangled-name='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' filepath='src/profiledata.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE'>
          <!-- implicit parameter of type 'const ProfileData* const' -->
          <parameter type-id='type-id-1410' name='this' is-artificial='yes'/>
          <!-- parameter of type 'ProfileData::State*' -->
          <parameter type-id='type-id-1411' name='state' filepath='src/profiledata.cc' line='222' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Reset() -->
        <function-decl name='Reset' mangled-name='_ZN11ProfileData5ResetEv' filepath='src/profiledata.cc' line='199' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5ResetEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileData::Start(const char*, const ProfileData::Options&) -->
        <function-decl name='Start' mangled-name='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' filepath='src/profiledata.cc' line='92' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5StartEPKcRKNS_7OptionsE'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='fname' filepath='src/profiledata.cc' line='92' column='1'/>
          <!-- parameter of type 'const ProfileData::Options&' -->
          <parameter type-id='type-id-1391' name='options' filepath='src/profiledata.cc' line='93' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Evict(const ProfileData::Entry&) -->
        <function-decl name='Evict' mangled-name='_ZN11ProfileData5EvictERKNS_5EntryE' filepath='src/profiledata.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5EvictERKNS_5EntryE'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileData::Entry&' -->
          <parameter type-id='type-id-1389' name='entry' filepath='src/profiledata.cc' line='66' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Add(int, void* const*) -->
        <function-decl name='Add' mangled-name='_ZN11ProfileData3AddEiPKPKv' filepath='src/profiledata.cc' line='261' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData3AddEiPKPKv'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='depth' filepath='src/profiledata.cc' line='261' column='1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205' name='stack' filepath='src/profiledata.cc' line='261' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushTable() -->
        <function-decl name='FlushTable' mangled-name='_ZN11ProfileData10FlushTableEv' filepath='src/profiledata.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData10FlushTableEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Stop() -->
        <function-decl name='Stop' mangled-name='_ZN11ProfileData4StopEv' filepath='src/profiledata.cc' line='165' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData4StopEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- const ProfileData::Entry -->
    <qualified-type-def type-id='type-id-1404' const='yes' id='type-id-1395'/>
    <!-- const ProfileData::Options -->
    <qualified-type-def type-id='type-id-1397' const='yes' id='type-id-1396'/>
    <!-- ProfileData::Bucket* -->
    <pointer-type-def type-id='type-id-1402' size-in-bits='64' id='type-id-1407'/>
    <!-- ProfileData::Entry::Slot* -->
    <pointer-type-def type-id='type-id-1405' size-in-bits='64' id='type-id-1408'/>
    <!-- Slot[64] -->
    <array-type-def dimensions='1' type-id='type-id-1405' size-in-bits='4096' id='type-id-1406'>
      <!-- <anonymous range>[64] -->
      <subrange length='64' type-id='type-id-5' id='type-id-1412'/>
    </array-type-def>
    <!-- Entry[4] -->
    <array-type-def dimensions='1' type-id='type-id-1404' size-in-bits='16896' id='type-id-1403'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' type-id='type-id-5' id='type-id-162'/>
    </array-type-def>
    <!-- ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1397' size-in-bits='64' id='type-id-1398'/>
    <!-- ProfileData::State* -->
    <pointer-type-def type-id='type-id-1399' size-in-bits='64' id='type-id-1411'/>
    <!-- char[1024] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='8192' id='type-id-1401'>
      <!-- <anonymous range>[1024] -->
      <subrange length='1024' type-id='type-id-5' id='type-id-1413'/>
    </array-type-def>
    <!-- const ProfileData& -->
    <reference-type-def kind='lvalue' type-id='type-id-1414' size-in-bits='64' id='type-id-1409'/>
    <!-- const ProfileData* const -->
    <qualified-type-def type-id='type-id-1415' const='yes' id='type-id-1410'/>
    <!-- typedef __time_t time_t -->
    <typedef-decl name='time_t' type-id='type-id-1416' filepath='/usr/include/time.h' line='76' column='1' id='type-id-1400'/>
    <!-- const ProfileData -->
    <qualified-type-def type-id='type-id-1394' const='yes' id='type-id-1414'/>
    <!-- const ProfileData* -->
    <pointer-type-def type-id='type-id-1414' size-in-bits='64' id='type-id-1415'/>
    <!-- typedef long int __time_t -->
    <typedef-decl name='__time_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='149' column='1' id='type-id-1416'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/profiler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- Slot[64] -->
    <array-type-def dimensions='1' type-id='type-id-1405' size-in-bits='4096' id='type-id-1406'>
      <!-- <anonymous range>[64] -->
      <subrange length='64' type-id='type-id-5' id='type-id-1412'/>
    </array-type-def>
    <!-- Entry[4] -->
    <array-type-def dimensions='1' type-id='type-id-1404' size-in-bits='16896' id='type-id-1403'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' type-id='type-id-5' id='type-id-162'/>
    </array-type-def>
    <!-- char[1024] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='8192' id='type-id-1401'>
      <!-- <anonymous range>[1024] -->
      <subrange length='1024' type-id='type-id-5' id='type-id-1413'/>
    </array-type-def>
    <!-- int[28] -->
    <array-type-def dimensions='1' type-id='type-id-1' size-in-bits='896' id='type-id-1383'>
      <!-- <anonymous range>[28] -->
      <subrange length='28' type-id='type-id-5' id='type-id-1384'/>
    </array-type-def>
    <!-- class ProfileData -->
    <class-decl name='ProfileData' size-in-bits='448' visibility='default' filepath='src/profiledata.h' line='79' column='1' id='type-id-1394'>
      <member-type access='private'>
        <!-- class ProfileData::Options -->
        <class-decl name='Options' size-in-bits='32' visibility='default' filepath='src/profiledata.h' line='88' column='1' id='type-id-1397'>
          <data-member access='private' layout-offset-in-bits='0'>
            <!-- int ProfileData::Options::frequency_ -->
            <var-decl name='frequency_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='101' column='1'/>
          </data-member>
          <member-function access='private' constructor='yes'>
            <!-- ProfileData::Options::Options() -->
            <function-decl name='Options' mangled-name='_ZN11ProfileData7OptionsC1Ev' filepath='src/profiledata.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData7OptionsC1Ev'>
              <!-- implicit parameter of type 'ProfileData::Options*' -->
              <parameter type-id='type-id-1398' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::State -->
        <class-decl name='State' size-in-bits='8384' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='81' column='1' id='type-id-1399'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- bool ProfileData::State::enabled -->
            <var-decl name='enabled' type-id='type-id-61' visibility='default' filepath='src/profiledata.h' line='82' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- time_t ProfileData::State::start_time -->
            <var-decl name='start_time' type-id='type-id-1400' visibility='default' filepath='src/profiledata.h' line='83' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- char ProfileData::State::profile_name[1024] -->
            <var-decl name='profile_name' type-id='type-id-1401' visibility='default' filepath='src/profiledata.h' line='84' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='8320'>
            <!-- int ProfileData::State::samples_gathered -->
            <var-decl name='samples_gathered' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='85' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Bucket -->
        <class-decl name='Bucket' size-in-bits='16896' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='161' column='1' id='type-id-1402'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry ProfileData::Bucket::entry[4] -->
            <var-decl name='entry' type-id='type-id-1403' visibility='default' filepath='src/profiledata.h' line='162' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct ProfileData::Entry -->
        <class-decl name='Entry' size-in-bits='4224' is-struct='yes' visibility='default' filepath='src/profiledata.h' line='154' column='1' id='type-id-1404'>
          <member-type access='private'>
            <!-- typedef uintptr_t ProfileData::Entry::Slot -->
            <typedef-decl name='Slot' type-id='type-id-156' filepath='src/profiledata.h' line='151' column='1' id='type-id-1405'/>
          </member-type>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::count -->
            <var-decl name='count' type-id='type-id-1405' visibility='default' filepath='src/profiledata.h' line='155' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::depth -->
            <var-decl name='depth' type-id='type-id-1405' visibility='default' filepath='src/profiledata.h' line='156' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- ProfileData::Entry::Slot ProfileData::Entry::stack[64] -->
            <var-decl name='stack' type-id='type-id-1406' visibility='default' filepath='src/profiledata.h' line='157' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kMaxStackDepth -->
        <var-decl name='kMaxStackDepth' type-id='type-id-144' mangled-name='_ZN11ProfileData14kMaxStackDepthE' visibility='default' filepath='src/profiledata.h' line='104' column='1' elf-symbol-id='_ZN11ProfileData14kMaxStackDepthE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kAssociativity -->
        <var-decl name='kAssociativity' type-id='type-id-144' mangled-name='_ZN11ProfileData14kAssociativityE' visibility='default' filepath='src/profiledata.h' line='146' column='1' elf-symbol-id='_ZN11ProfileData14kAssociativityE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kBuckets -->
        <var-decl name='kBuckets' type-id='type-id-144' mangled-name='_ZN11ProfileData8kBucketsE' visibility='default' filepath='src/profiledata.h' line='147' column='1' elf-symbol-id='_ZN11ProfileData8kBucketsE'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int ProfileData::kBufferLength -->
        <var-decl name='kBufferLength' type-id='type-id-144' mangled-name='_ZN11ProfileData13kBufferLengthE' visibility='default' filepath='src/profiledata.h' line='148' column='1' elf-symbol-id='_ZN11ProfileData13kBufferLengthE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- ProfileData::Bucket* ProfileData::hash_ -->
        <var-decl name='hash_' type-id='type-id-1407' visibility='default' filepath='src/profiledata.h' line='165' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- ProfileData::Entry::Slot* ProfileData::evict_ -->
        <var-decl name='evict_' type-id='type-id-1408' visibility='default' filepath='src/profiledata.h' line='166' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- int ProfileData::num_evicted_ -->
        <var-decl name='num_evicted_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='167' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='160'>
        <!-- int ProfileData::out_ -->
        <var-decl name='out_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='168' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='192'>
        <!-- int ProfileData::count_ -->
        <var-decl name='count_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='169' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='224'>
        <!-- int ProfileData::evictions_ -->
        <var-decl name='evictions_' type-id='type-id-1' visibility='default' filepath='src/profiledata.h' line='170' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- size_t ProfileData::total_bytes_ -->
        <var-decl name='total_bytes_' type-id='type-id-62' visibility='default' filepath='src/profiledata.h' line='171' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='320'>
        <!-- char* ProfileData::fname_ -->
        <var-decl name='fname_' type-id='type-id-118' visibility='default' filepath='src/profiledata.h' line='172' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- time_t ProfileData::start_time_ -->
        <var-decl name='start_time_' type-id='type-id-1400' visibility='default' filepath='src/profiledata.h' line='173' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- ProfileData::ProfileData() -->
        <function-decl name='ProfileData' mangled-name='_ZN11ProfileDataC1Ev' filepath='src/profiledata.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataC1Ev'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- ProfileData::~ProfileData(int) -->
        <function-decl name='~ProfileData' mangled-name='_ZN11ProfileDataD1Ev' filepath='src/profiledata.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileDataD1Ev'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- ProfileData::ProfileData(const ProfileData&) -->
        <function-decl name='ProfileData' filepath='src/profiledata.h' line='181' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileData&' -->
          <parameter type-id='type-id-1409'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushEvicted() -->
        <function-decl name='FlushEvicted' mangled-name='_ZN11ProfileData12FlushEvictedEv' filepath='src/profiledata.cc' line='324' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData12FlushEvictedEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::GetCurrentState(ProfileData::State*) -->
        <function-decl name='GetCurrentState' mangled-name='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE' filepath='src/profiledata.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK11ProfileData15GetCurrentStateEPNS_5StateE'>
          <!-- implicit parameter of type 'const ProfileData* const' -->
          <parameter type-id='type-id-1410' name='this' is-artificial='yes'/>
          <!-- parameter of type 'ProfileData::State*' -->
          <parameter type-id='type-id-1411' name='state' filepath='src/profiledata.cc' line='222' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Reset() -->
        <function-decl name='Reset' mangled-name='_ZN11ProfileData5ResetEv' filepath='src/profiledata.cc' line='199' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5ResetEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool ProfileData::Start(const char*, const ProfileData::Options&) -->
        <function-decl name='Start' mangled-name='_ZN11ProfileData5StartEPKcRKNS_7OptionsE' filepath='src/profiledata.cc' line='92' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5StartEPKcRKNS_7OptionsE'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='fname' filepath='src/profiledata.cc' line='92' column='1'/>
          <!-- parameter of type 'const ProfileData::Options&' -->
          <parameter type-id='type-id-1391' name='options' filepath='src/profiledata.cc' line='93' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Evict(const ProfileData::Entry&) -->
        <function-decl name='Evict' mangled-name='_ZN11ProfileData5EvictERKNS_5EntryE' filepath='src/profiledata.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData5EvictERKNS_5EntryE'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const ProfileData::Entry&' -->
          <parameter type-id='type-id-1389' name='entry' filepath='src/profiledata.cc' line='66' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Add(int, void* const*) -->
        <function-decl name='Add' mangled-name='_ZN11ProfileData3AddEiPKPKv' filepath='src/profiledata.cc' line='261' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData3AddEiPKPKv'>
          <!-- implicit parameter of type 'ProfileData* const' -->
          <parameter type-id='type-id-1387' name='this' is-artificial='yes'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1' name='depth' filepath='src/profiledata.cc' line='261' column='1'/>
          <!-- parameter of type 'void* const*' -->
          <parameter type-id='type-id-205' name='stack' filepath='src/profiledata.cc' line='261' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::FlushTable() -->
        <function-decl name='FlushTable' mangled-name='_ZN11ProfileData10FlushTableEv' filepath='src/profiledata.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData10FlushTableEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void ProfileData::Stop() -->
        <function-decl name='Stop' mangled-name='_ZN11ProfileData4StopEv' filepath='src/profiledata.cc' line='165' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11ProfileData4StopEv'>
          <!-- implicit parameter of type 'ProfileData*' -->
          <parameter type-id='type-id-1386' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct ProfileHandlerToken -->
    <class-decl name='ProfileHandlerToken' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/profile-handler.cc' line='69' column='1' id='type-id-1370'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- ProfileHandlerCallback ProfileHandlerToken::callback -->
        <var-decl name='callback' type-id='type-id-1287' visibility='default' filepath='src/profile-handler.cc' line='77' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* ProfileHandlerToken::callback_arg -->
        <var-decl name='callback_arg' type-id='type-id-58' visibility='default' filepath='src/profile-handler.cc' line='79' column='1'/>
      </data-member>
      <member-function access='public' constructor='yes'>
        <!-- ProfileHandlerToken::ProfileHandlerToken(ProfileHandlerCallback, void*) -->
        <function-decl name='ProfileHandlerToken' filepath='src/profile-handler.cc' line='71' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'ProfileHandlerToken*' -->
          <parameter type-id='type-id-1304' is-artificial='yes'/>
          <!-- parameter of type 'typedef ProfileHandlerCallback' -->
          <parameter type-id='type-id-1287'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct siginfo -->
    <class-decl name='siginfo' size-in-bits='1024' is-struct='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='52' column='1' id='type-id-1372'>
      <member-type access='public'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} -->
        <union-decl name='__anonymous_union__' size-in-bits='896' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='59' column='1' id='type-id-1373'>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} -->
            <class-decl name='__anonymous_struct__' size-in-bits='64' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='64' column='1' id='type-id-1374'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='65' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='66' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__1' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='71' column='1' id='type-id-1376'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- int si_tid -->
                <var-decl name='si_tid' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='72' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- int si_overrun -->
                <var-decl name='si_overrun' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='73' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1377' visibility='default' filepath='/usr/include/bits/siginfo.h' line='74' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} -->
            <class-decl name='__anonymous_struct__2' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='79' column='1' id='type-id-1378'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='80' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='81' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- sigval_t si_sigval -->
                <var-decl name='si_sigval' type-id='type-id-1377' visibility='default' filepath='/usr/include/bits/siginfo.h' line='82' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} -->
            <class-decl name='__anonymous_struct__3' size-in-bits='256' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='87' column='1' id='type-id-1379'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- __pid_t si_pid -->
                <var-decl name='si_pid' type-id='type-id-68' visibility='default' filepath='/usr/include/bits/siginfo.h' line='88' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='32'>
                <!-- __uid_t si_uid -->
                <var-decl name='si_uid' type-id='type-id-1375' visibility='default' filepath='/usr/include/bits/siginfo.h' line='89' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_status -->
                <var-decl name='si_status' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='90' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='128'>
                <!-- __clock_t si_utime -->
                <var-decl name='si_utime' type-id='type-id-1380' visibility='default' filepath='/usr/include/bits/siginfo.h' line='91' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='192'>
                <!-- __clock_t si_stime -->
                <var-decl name='si_stime' type-id='type-id-1380' visibility='default' filepath='/usr/include/bits/siginfo.h' line='92' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {void* si_addr;} -->
            <class-decl name='__anonymous_struct__4' size-in-bits='64' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='97' column='1' id='type-id-1381'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- void* si_addr -->
                <var-decl name='si_addr' type-id='type-id-58' visibility='default' filepath='/usr/include/bits/siginfo.h' line='98' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <member-type access='public'>
            <!-- struct {long int si_band; int si_fd;} -->
            <class-decl name='__anonymous_struct__5' size-in-bits='128' is-struct='yes' is-anonymous='yes' visibility='default' filepath='/usr/include/bits/siginfo.h' line='103' column='1' id='type-id-1382'>
              <data-member access='public' layout-offset-in-bits='0'>
                <!-- long int si_band -->
                <var-decl name='si_band' type-id='type-id-85' visibility='default' filepath='/usr/include/bits/siginfo.h' line='104' column='1'/>
              </data-member>
              <data-member access='public' layout-offset-in-bits='64'>
                <!-- int si_fd -->
                <var-decl name='si_fd' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='105' column='1'/>
              </data-member>
            </class-decl>
          </member-type>
          <data-member access='public'>
            <!-- int _pad[28] -->
            <var-decl name='_pad' type-id='type-id-1383' visibility='default' filepath='/usr/include/bits/siginfo.h' line='60' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid;} _kill -->
            <var-decl name='_kill' type-id='type-id-1374' visibility='default' filepath='/usr/include/bits/siginfo.h' line='67' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer -->
            <var-decl name='_timer' type-id='type-id-1376' visibility='default' filepath='/usr/include/bits/siginfo.h' line='75' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt -->
            <var-decl name='_rt' type-id='type-id-1378' visibility='default' filepath='/usr/include/bits/siginfo.h' line='83' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld -->
            <var-decl name='_sigchld' type-id='type-id-1379' visibility='default' filepath='/usr/include/bits/siginfo.h' line='93' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {void* si_addr;} _sigfault -->
            <var-decl name='_sigfault' type-id='type-id-1381' visibility='default' filepath='/usr/include/bits/siginfo.h' line='99' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- struct {long int si_band; int si_fd;} _sigpoll -->
            <var-decl name='_sigpoll' type-id='type-id-1382' visibility='default' filepath='/usr/include/bits/siginfo.h' line='106' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int siginfo::si_signo -->
        <var-decl name='si_signo' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='53' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int siginfo::si_errno -->
        <var-decl name='si_errno' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='54' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int siginfo::si_code -->
        <var-decl name='si_code' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='56' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- union {int _pad[28]; struct {__pid_t si_pid; __uid_t si_uid;} _kill; struct {int si_tid; int si_overrun; sigval_t si_sigval;} _timer; struct {__pid_t si_pid; __uid_t si_uid; sigval_t si_sigval;} _rt; struct {__pid_t si_pid; __uid_t si_uid; int si_status; __clock_t si_utime; __clock_t si_stime;} _sigchld; struct {void* si_addr;} _sigfault; struct {long int si_band; int si_fd;} _sigpoll;} siginfo::_sifields -->
        <var-decl name='_sifields' type-id='type-id-1373' visibility='default' filepath='/usr/include/bits/siginfo.h' line='107' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef __time_t time_t -->
    <typedef-decl name='time_t' type-id='type-id-1416' filepath='/usr/include/time.h' line='76' column='1' id='type-id-1400'/>
    <!-- typedef long int __time_t -->
    <typedef-decl name='__time_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='149' column='1' id='type-id-1416'/>
    <!-- class CpuProfiler -->
    <class-decl name='CpuProfiler' size-in-bits='704' visibility='default' filepath='src/profiler.cc' line='89' column='1' id='type-id-1417'>
      <data-member access='private' static='yes'>
        <!-- static CpuProfiler CpuProfiler::instance_ -->
        <var-decl name='instance_' type-id='type-id-1417' mangled-name='_ZN11CpuProfiler9instance_E' visibility='default' filepath='src/profiler.cc' line='107' column='1' elf-symbol-id='_ZN11CpuProfiler9instance_E'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock CpuProfiler::lock_ -->
        <var-decl name='lock_' type-id='type-id-87' visibility='default' filepath='src/profiler.cc' line='119' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- ProfileData CpuProfiler::collector_ -->
        <var-decl name='collector_' type-id='type-id-1394' visibility='default' filepath='src/profiler.cc' line='120' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='512'>
        <!-- int (void*)* CpuProfiler::filter_ -->
        <var-decl name='filter_' type-id='type-id-1418' visibility='default' filepath='src/profiler.cc' line='125' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='576'>
        <!-- void* CpuProfiler::filter_arg_ -->
        <var-decl name='filter_arg_' type-id='type-id-58' visibility='default' filepath='src/profiler.cc' line='126' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='640'>
        <!-- ProfileHandlerToken* CpuProfiler::prof_handler_token_ -->
        <var-decl name='prof_handler_token_' type-id='type-id-1304' visibility='default' filepath='src/profiler.cc' line='130' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- CpuProfiler::CpuProfiler() -->
        <function-decl name='CpuProfiler' mangled-name='_ZN11CpuProfilerC1Ev' filepath='src/profiler.cc' line='91' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfilerC1Ev'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1419' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- CpuProfiler::~CpuProfiler(int) -->
        <function-decl name='~CpuProfiler' mangled-name='_ZN11CpuProfilerD1Ev' filepath='src/profiler.cc' line='92' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfilerD1Ev'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1419' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void CpuProfiler::prof_handler(siginfo_t*, void*, void*) -->
        <function-decl name='prof_handler' mangled-name='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_' filepath='src/profiler.cc' line='339' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler12prof_handlerEiP7siginfoPvS2_'>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'siginfo_t*' -->
          <parameter type-id='type-id-1302'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::DisableHandler() -->
        <function-decl name='DisableHandler' mangled-name='_ZN11CpuProfiler14DisableHandlerEv' filepath='src/profiler.cc' line='327' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler14DisableHandlerEv'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::EnableHandler() -->
        <function-decl name='EnableHandler' mangled-name='_ZN11CpuProfiler13EnableHandlerEv' filepath='src/profiler.cc' line='321' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler13EnableHandlerEv'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool CpuProfiler::Enabled() -->
        <function-decl name='Enabled' mangled-name='_ZN11CpuProfiler7EnabledEv' filepath='src/profiler.cc' line='301' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler7EnabledEv'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::Stop() -->
        <function-decl name='Stop' mangled-name='_ZN11CpuProfiler4StopEv' filepath='src/profiler.cc' line='267' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler4StopEv'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::FlushTable(int) -->
        <function-decl name='FlushTable' mangled-name='_ZN11CpuProfiler10FlushTableEv' filepath='src/profiler.cc' line='283' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler10FlushTableEv'>
          <!-- implicit parameter of type 'CpuProfiler*' -->
          <parameter type-id='type-id-1419' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void CpuProfiler::GetCurrentState(ProfilerState*) -->
        <function-decl name='GetCurrentState' mangled-name='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState' filepath='src/profiler.cc' line='306' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler15GetCurrentStateEP13ProfilerState'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- parameter of type 'ProfilerState*' -->
          <parameter type-id='type-id-1421' name='state' filepath='src/profiler.cc' line='306' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- bool CpuProfiler::Start(const char*, const ProfilerOptions*) -->
        <function-decl name='Start' mangled-name='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions' filepath='src/profiler.cc' line='234' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11CpuProfiler5StartEPKcPK15ProfilerOptions'>
          <!-- implicit parameter of type 'CpuProfiler* const' -->
          <parameter type-id='type-id-1420' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='fname' filepath='src/profiler.cc' line='234' column='1'/>
          <!-- parameter of type 'const ProfilerOptions*' -->
          <parameter type-id='type-id-1422' name='options' filepath='src/profiler.cc' line='234' column='1'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct ProfilerOptions -->
    <class-decl name='ProfilerOptions' size-in-bits='128' is-struct='yes' visibility='default' filepath='./src/gperftools/profiler.h' line='89' column='1' id='type-id-1423'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int (void*)* ProfilerOptions::filter_in_thread -->
        <var-decl name='filter_in_thread' type-id='type-id-1418' visibility='default' filepath='./src/gperftools/profiler.h' line='108' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* ProfilerOptions::filter_in_thread_arg -->
        <var-decl name='filter_in_thread_arg' type-id='type-id-58' visibility='default' filepath='./src/gperftools/profiler.h' line='109' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct ProfilerState -->
    <class-decl name='ProfilerState' size-in-bits='8384' is-struct='yes' visibility='default' filepath='./src/gperftools/profiler.h' line='157' column='1' id='type-id-1424'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int ProfilerState::enabled -->
        <var-decl name='enabled' type-id='type-id-1' visibility='default' filepath='./src/gperftools/profiler.h' line='158' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- time_t ProfilerState::start_time -->
        <var-decl name='start_time' type-id='type-id-1400' visibility='default' filepath='./src/gperftools/profiler.h' line='159' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char ProfilerState::profile_name[1024] -->
        <var-decl name='profile_name' type-id='type-id-1401' visibility='default' filepath='./src/gperftools/profiler.h' line='160' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='8320'>
        <!-- int ProfilerState::samples_gathered -->
        <var-decl name='samples_gathered' type-id='type-id-1' visibility='default' filepath='./src/gperftools/profiler.h' line='161' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef siginfo siginfo_t -->
    <typedef-decl name='siginfo_t' type-id='type-id-1372' filepath='/usr/include/bits/siginfo.h' line='108' column='1' id='type-id-1371'/>
    <!-- typedef unsigned int __uid_t -->
    <typedef-decl name='__uid_t' type-id='type-id-64' filepath='/usr/include/bits/types.h' line='135' column='1' id='type-id-1375'/>
    <!-- typedef sigval sigval_t -->
    <typedef-decl name='sigval_t' type-id='type-id-1385' filepath='/usr/include/bits/siginfo.h' line='37' column='1' id='type-id-1377'/>
    <!-- union sigval -->
    <union-decl name='sigval' size-in-bits='64' visibility='default' filepath='/usr/include/bits/siginfo.h' line='34' column='1' id='type-id-1385'>
      <data-member access='public'>
        <!-- int sigval::sival_int -->
        <var-decl name='sival_int' type-id='type-id-1' visibility='default' filepath='/usr/include/bits/siginfo.h' line='35' column='1'/>
      </data-member>
      <data-member access='public'>
        <!-- void* sigval::sival_ptr -->
        <var-decl name='sival_ptr' type-id='type-id-58' visibility='default' filepath='/usr/include/bits/siginfo.h' line='36' column='1'/>
      </data-member>
    </union-decl>
    <!-- typedef long int __clock_t -->
    <typedef-decl name='__clock_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='145' column='1' id='type-id-1380'/>
    <!-- CpuProfiler* -->
    <pointer-type-def type-id='type-id-1417' size-in-bits='64' id='type-id-1419'/>
    <!-- CpuProfiler* const -->
    <qualified-type-def type-id='type-id-1419' const='yes' id='type-id-1420'/>
    <!-- ProfileData* -->
    <pointer-type-def type-id='type-id-1394' size-in-bits='64' id='type-id-1386'/>
    <!-- ProfileData::Bucket* -->
    <pointer-type-def type-id='type-id-1402' size-in-bits='64' id='type-id-1407'/>
    <!-- ProfileData::Entry::Slot* -->
    <pointer-type-def type-id='type-id-1405' size-in-bits='64' id='type-id-1408'/>
    <!-- ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1397' size-in-bits='64' id='type-id-1398'/>
    <!-- ProfileData::Options* const -->
    <qualified-type-def type-id='type-id-1398' const='yes' id='type-id-1425'/>
    <!-- ProfileData::State* -->
    <pointer-type-def type-id='type-id-1399' size-in-bits='64' id='type-id-1411'/>
    <!-- ProfileHandlerToken* -->
    <pointer-type-def type-id='type-id-1370' size-in-bits='64' id='type-id-1304'/>
    <!-- ProfilerState* -->
    <pointer-type-def type-id='type-id-1424' size-in-bits='64' id='type-id-1421'/>
    <!-- const ProfileData -->
    <qualified-type-def type-id='type-id-1394' const='yes' id='type-id-1414'/>
    <!-- const ProfileData& -->
    <reference-type-def kind='lvalue' type-id='type-id-1414' size-in-bits='64' id='type-id-1409'/>
    <!-- const ProfileData* -->
    <pointer-type-def type-id='type-id-1414' size-in-bits='64' id='type-id-1415'/>
    <!-- const ProfileData* const -->
    <qualified-type-def type-id='type-id-1415' const='yes' id='type-id-1410'/>
    <!-- const ProfileData::Entry -->
    <qualified-type-def type-id='type-id-1404' const='yes' id='type-id-1395'/>
    <!-- const ProfileData::Entry& -->
    <reference-type-def kind='lvalue' type-id='type-id-1395' size-in-bits='64' id='type-id-1388'/>
    <!-- const ProfileData::Options -->
    <qualified-type-def type-id='type-id-1397' const='yes' id='type-id-1396'/>
    <!-- const ProfileData::Options& -->
    <reference-type-def kind='lvalue' type-id='type-id-1396' size-in-bits='64' id='type-id-1390'/>
    <!-- const ProfileData::Options* -->
    <pointer-type-def type-id='type-id-1396' size-in-bits='64' id='type-id-1392'/>
    <!-- const ProfilerOptions -->
    <qualified-type-def type-id='type-id-1423' const='yes' id='type-id-1426'/>
    <!-- const ProfilerOptions* -->
    <pointer-type-def type-id='type-id-1426' size-in-bits='64' id='type-id-1422'/>
    <!-- int (void*)* -->
    <pointer-type-def type-id='type-id-1427' size-in-bits='64' id='type-id-1418'/>
    <!-- siginfo_t* -->
    <pointer-type-def type-id='type-id-1371' size-in-bits='64' id='type-id-1302'/>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_cpu_profiler_unittest -->
      <var-decl name='FLAGS_cpu_profiler_unittest' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE' visibility='default' filepath='src/profiler.cc' line='74' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead27FLAGS_cpu_profiler_unittestE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nocpu_profiler_unittest -->
      <var-decl name='FLAGS_nocpu_profiler_unittest' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE' visibility='default' filepath='src/profiler.cc' line='78' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead29FLAGS_nocpu_profiler_unittestE'/>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- void ProfilerEnable() -->
    <function-decl name='ProfilerEnable' mangled-name='ProfilerEnable' filepath='src/profiler.cc' line='430' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerEnable'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfilerDisable() -->
    <function-decl name='ProfilerDisable' mangled-name='ProfilerDisable' filepath='src/profiler.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerDisable'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfilerRegisterThread() -->
    <function-decl name='ProfilerRegisterThread' mangled-name='ProfilerRegisterThread' filepath='src/profiler.cc' line='378' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerRegisterThread'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int ProfilingIsEnabledForAllThreads() -->
    <function-decl name='ProfilingIsEnabledForAllThreads' mangled-name='ProfilingIsEnabledForAllThreads' filepath='src/profiler.cc' line='386' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilingIsEnabledForAllThreads'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void ProfilerStop() -->
    <function-decl name='ProfilerStop' mangled-name='ProfilerStop' filepath='src/profiler.cc' line='399' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStop'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfilerFlush() -->
    <function-decl name='ProfilerFlush' mangled-name='ProfilerFlush' filepath='src/profiler.cc' line='382' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerFlush'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void ProfilerGetCurrentState(ProfilerState*) -->
    <function-decl name='ProfilerGetCurrentState' mangled-name='ProfilerGetCurrentState' filepath='src/profiler.cc' line='403' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerGetCurrentState'>
      <!-- parameter of type 'ProfilerState*' -->
      <parameter type-id='type-id-1421' name='state' filepath='src/profiler.cc' line='404' column='1'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int ProfilerStartWithOptions(const char*, const ProfilerOptions*) -->
    <function-decl name='ProfilerStartWithOptions' mangled-name='ProfilerStartWithOptions' filepath='src/profiler.cc' line='394' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStartWithOptions'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57' name='fname' filepath='src/profiler.cc' line='395' column='1'/>
      <!-- parameter of type 'const ProfilerOptions*' -->
      <parameter type-id='type-id-1422' name='options' filepath='src/profiler.cc' line='395' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int ProfilerStart(const char*) -->
    <function-decl name='ProfilerStart' mangled-name='ProfilerStart' filepath='src/profiler.cc' line='390' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='ProfilerStart'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int (void*) -->
    <function-type size-in-bits='64' id='type-id-1427'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/raw_printer.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- base::RawPrinter* -->
    <pointer-type-def type-id='type-id-1428' size-in-bits='64' id='type-id-1429'/>
    <!-- base::RawPrinter* const -->
    <qualified-type-def type-id='type-id-1429' const='yes' id='type-id-1430'/>
    <!-- const base::RawPrinter -->
    <qualified-type-def type-id='type-id-1428' const='yes' id='type-id-1431'/>
    <!-- const base::RawPrinter& -->
    <reference-type-def kind='lvalue' type-id='type-id-1431' size-in-bits='64' id='type-id-1432'/>
    <!-- const base::RawPrinter* -->
    <pointer-type-def type-id='type-id-1431' size-in-bits='64' id='type-id-1433'/>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- class base::RawPrinter -->
      <class-decl name='RawPrinter' size-in-bits='192' visibility='default' filepath='src/raw_printer.h' line='51' column='1' id='type-id-1428'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* base::RawPrinter::base_ -->
          <var-decl name='base_' type-id='type-id-118' visibility='default' filepath='src/raw_printer.h' line='81' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- char* base::RawPrinter::ptr_ -->
          <var-decl name='ptr_' type-id='type-id-118' visibility='default' filepath='src/raw_printer.h' line='82' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- char* base::RawPrinter::limit_ -->
          <var-decl name='limit_' type-id='type-id-118' visibility='default' filepath='src/raw_printer.h' line='83' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- base::RawPrinter::RawPrinter(char*, int) -->
          <function-decl name='RawPrinter' mangled-name='_ZN4base10RawPrinterC1EPci' filepath='src/raw_printer.h' line='56' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base10RawPrinterC1EPci'>
            <!-- implicit parameter of type 'base::RawPrinter*' -->
            <parameter type-id='type-id-1429' is-artificial='yes'/>
            <!-- parameter of type 'char*' -->
            <parameter type-id='type-id-118'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- base::RawPrinter::RawPrinter(const base::RawPrinter&) -->
          <function-decl name='RawPrinter' filepath='src/raw_printer.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'base::RawPrinter*' -->
            <parameter type-id='type-id-1429' is-artificial='yes'/>
            <!-- parameter of type 'const base::RawPrinter&' -->
            <parameter type-id='type-id-1432'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void base::RawPrinter::Printf(const char*, ...) -->
          <function-decl name='Printf' mangled-name='_ZN4base10RawPrinter6PrintfEPKcz' filepath='src/raw_printer.cc' line='51' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base10RawPrinter6PrintfEPKcz'>
            <!-- implicit parameter of type 'base::RawPrinter* const' -->
            <parameter type-id='type-id-1430' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57' name='format' filepath='src/raw_printer.cc' line='51' column='1'/>
            <parameter is-variadic='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/sampler.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const double& -->
    <qualified-type-def type-id='type-id-1434' id='type-id-1435'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- const double& std::min<double>(const double&, const double&) -->
      <function-decl name='min&lt;double&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const double&' -->
        <parameter type-id='type-id-1434'/>
        <!-- parameter of type 'const double&' -->
        <parameter type-id='type-id-1434'/>
        <!-- const double& -->
        <return type-id='type-id-1434'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_sample_parameter -->
      <var-decl name='FLAGS_tcmalloc_sample_parameter' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE' visibility='default' filepath='src/sampler.cc' line='52' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead31FLAGS_tcmalloc_sample_parameterE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_sample_parameter -->
      <var-decl name='FLAGS_notcmalloc_sample_parameter' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE' visibility='default' filepath='src/sampler.cc' line='55' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead33FLAGS_notcmalloc_sample_parameterE'/>
    </namespace-decl>
    <!-- const double& -->
    <reference-type-def kind='lvalue' type-id='type-id-1436' size-in-bits='64' id='type-id-1434'/>
    <!-- const double -->
    <qualified-type-def type-id='type-id-2' const='yes' id='type-id-1436'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/span.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::Span>* const -->
    <qualified-type-def type-id='type-id-1437' const='yes' id='type-id-1438'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- void tcmalloc::DeleteSpan(tcmalloc::Span*) -->
      <function-decl name='DeleteSpan' mangled-name='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE' filepath='src/span.cc' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DeleteSpanEPNS_4SpanE'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-155'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Init(tcmalloc::Span*) -->
      <function-decl name='DLL_Init' mangled-name='_ZN8tcmalloc8DLL_InitEPNS_4SpanE' filepath='src/span.cc' line='73' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8DLL_InitEPNS_4SpanE'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-155'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Remove(tcmalloc::Span*) -->
      <function-decl name='DLL_Remove' mangled-name='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE' filepath='src/span.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DLL_RemoveEPNS_4SpanE'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-155'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- int tcmalloc::DLL_Length(const tcmalloc::Span*) -->
      <function-decl name='DLL_Length' mangled-name='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE' filepath='src/span.cc' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc10DLL_LengthEPKNS_4SpanE'>
        <!-- parameter of type 'const tcmalloc::Span*' -->
        <parameter type-id='type-id-150'/>
        <!-- int -->
        <return type-id='type-id-1'/>
      </function-decl>
      <!-- void tcmalloc::DLL_Prepend(tcmalloc::Span*, tcmalloc::Span*) -->
      <function-decl name='DLL_Prepend' mangled-name='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_' filepath='src/span.cc' line='93' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11DLL_PrependEPNS_4SpanES1_'>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-155'/>
        <!-- parameter of type 'tcmalloc::Span*' -->
        <parameter type-id='type-id-155'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- tcmalloc::Span* tcmalloc::NewSpan(PageID, Length) -->
      <function-decl name='NewSpan' mangled-name='_ZN8tcmalloc7NewSpanEmm' filepath='src/span.cc' line='54' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7NewSpanEmm'>
        <!-- parameter of type 'typedef PageID' -->
        <parameter type-id='type-id-153'/>
        <!-- parameter of type 'typedef Length' -->
        <parameter type-id='type-id-154'/>
        <!-- tcmalloc::Span* -->
        <return type-id='type-id-155'/>
      </function-decl>
    </namespace-decl>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::Span>* -->
    <pointer-type-def type-id='type-id-1439' size-in-bits='64' id='type-id-1437'/>
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::Span> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::Span&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1439'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::Span>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::Span>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/stack_trace_table.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> -->
    <qualified-type-def type-id='type-id-1440' const='yes' id='type-id-1441'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* -->
    <pointer-type-def type-id='type-id-1441' size-in-bits='64' id='type-id-1442'/>
    <!-- const tcmalloc::StackTrace -->
    <qualified-type-def type-id='type-id-1443' const='yes' id='type-id-1444'/>
    <!-- const tcmalloc::StackTrace& -->
    <qualified-type-def type-id='type-id-1445' id='type-id-1446'/>
    <!-- const tcmalloc::StackTrace& -->
    <reference-type-def kind='lvalue' type-id='type-id-1444' size-in-bits='64' id='type-id-1445'/>
    <!-- const tcmalloc::StackTraceTable -->
    <qualified-type-def type-id='type-id-1447' const='yes' id='type-id-1448'/>
    <!-- const tcmalloc::StackTraceTable* -->
    <pointer-type-def type-id='type-id-1448' size-in-bits='64' id='type-id-1449'/>
    <!-- const tcmalloc::StackTraceTable::Bucket -->
    <qualified-type-def type-id='type-id-1450' const='yes' id='type-id-1451'/>
    <!-- const tcmalloc::StackTraceTable::Bucket* -->
    <pointer-type-def type-id='type-id-1451' size-in-bits='64' id='type-id-1452'/>
    <!-- const tcmalloc::StackTraceTable::Bucket* const -->
    <qualified-type-def type-id='type-id-1452' const='yes' id='type-id-1453'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* const -->
    <qualified-type-def type-id='type-id-1454' const='yes' id='type-id-1455'/>
    <!-- tcmalloc::StackTraceTable* -->
    <pointer-type-def type-id='type-id-1447' size-in-bits='64' id='type-id-1456'/>
    <!-- tcmalloc::StackTraceTable* const -->
    <qualified-type-def type-id='type-id-1456' const='yes' id='type-id-1457'/>
    <!-- tcmalloc::StackTraceTable::Bucket* -->
    <pointer-type-def type-id='type-id-1450' size-in-bits='64' id='type-id-1458'/>
    <!-- tcmalloc::StackTraceTable::Bucket** -->
    <pointer-type-def type-id='type-id-1458' size-in-bits='64' id='type-id-1459'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::StackTraceTable -->
      <class-decl name='StackTraceTable' size-in-bits='192' visibility='default' filepath='src/stack_trace_table.h' line='47' column='1' id='type-id-1447'>
        <member-type access='private'>
          <!-- struct tcmalloc::StackTraceTable::Bucket -->
          <class-decl name='Bucket' size-in-bits='2304' is-struct='yes' visibility='default' filepath='src/stack_trace_table.h' line='65' column='1' id='type-id-1450'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- uintptr_t tcmalloc::StackTraceTable::Bucket::hash -->
              <var-decl name='hash' type-id='type-id-156' visibility='default' filepath='src/stack_trace_table.h' line='67' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- tcmalloc::StackTrace tcmalloc::StackTraceTable::Bucket::trace -->
              <var-decl name='trace' type-id='type-id-1443' visibility='default' filepath='src/stack_trace_table.h' line='68' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='2176'>
              <!-- int tcmalloc::StackTraceTable::Bucket::count -->
              <var-decl name='count' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='71' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='2240'>
              <!-- tcmalloc::StackTraceTable::Bucket* tcmalloc::StackTraceTable::Bucket::next -->
              <var-decl name='next' type-id='type-id-1458' visibility='default' filepath='src/stack_trace_table.h' line='72' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- bool tcmalloc::StackTraceTable::Bucket::KeyEqual(uintptr_t, const tcmalloc::StackTrace&) -->
              <function-decl name='KeyEqual' mangled-name='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE' filepath='src/stack_trace_table.cc' line='45' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK8tcmalloc15StackTraceTable6Bucket8KeyEqualEmRKNS_10StackTraceE'>
                <!-- implicit parameter of type 'const tcmalloc::StackTraceTable::Bucket* const' -->
                <parameter type-id='type-id-1453' name='this' is-artificial='yes'/>
                <!-- parameter of type 'typedef uintptr_t' -->
                <parameter type-id='type-id-156' name='h' filepath='src/stack_trace_table.cc' line='45' column='1'/>
                <!-- parameter of type 'const tcmalloc::StackTrace&' -->
                <parameter type-id='type-id-1446' name='t' filepath='src/stack_trace_table.cc' line='46' column='1'/>
                <!-- bool -->
                <return type-id='type-id-61'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::StackTraceTable::kHashTableSize -->
          <var-decl name='kHashTableSize' type-id='type-id-144' visibility='default' filepath='src/stack_trace_table.h' line='82' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- bool tcmalloc::StackTraceTable::error_ -->
          <var-decl name='error_' type-id='type-id-61' visibility='default' filepath='src/stack_trace_table.h' line='84' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='32'>
          <!-- int tcmalloc::StackTraceTable::depth_total_ -->
          <var-decl name='depth_total_' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='85' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- int tcmalloc::StackTraceTable::bucket_total_ -->
          <var-decl name='bucket_total_' type-id='type-id-1' visibility='default' filepath='src/stack_trace_table.h' line='86' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::StackTraceTable::Bucket** tcmalloc::StackTraceTable::table_ -->
          <var-decl name='table_' type-id='type-id-1459' visibility='default' filepath='src/stack_trace_table.h' line='87' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::StackTraceTable::StackTraceTable() -->
          <function-decl name='StackTraceTable' mangled-name='_ZN8tcmalloc15StackTraceTableC2Ev' filepath='src/stack_trace_table.h' line='50' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTableC2Ev'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1456' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- tcmalloc::StackTraceTable::~StackTraceTable(int) -->
          <function-decl name='~StackTraceTable' mangled-name='_ZN8tcmalloc15StackTraceTableD2Ev' filepath='src/stack_trace_table.h' line='51' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTableD2Ev'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable*' -->
            <parameter type-id='type-id-1456' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void** tcmalloc::StackTraceTable::ReadStackTracesAndClear() -->
          <function-decl name='ReadStackTracesAndClear' mangled-name='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv' filepath='src/stack_trace_table.cc' line='110' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTable23ReadStackTracesAndClearEv'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable* const' -->
            <parameter type-id='type-id-1457' name='this' is-artificial='yes'/>
            <!-- void** -->
            <return type-id='type-id-151'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::StackTraceTable::AddTrace(const tcmalloc::StackTrace&) -->
          <function-decl name='AddTrace' mangled-name='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE' filepath='src/stack_trace_table.cc' line='68' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15StackTraceTable8AddTraceERKNS_10StackTraceE'>
            <!-- implicit parameter of type 'tcmalloc::StackTraceTable* const' -->
            <parameter type-id='type-id-1457' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const tcmalloc::StackTrace&' -->
            <parameter type-id='type-id-1446' name='t' filepath='src/stack_trace_table.cc' line='68' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::StackTraceTable::Bucket&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1440'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <namespace-decl name='tcmalloc'>
      <!-- struct tcmalloc::StackTrace -->
      <class-decl name='StackTrace' size-in-bits='2112' is-struct='yes' visibility='default' filepath='src/common.h' line='266' column='1' id='type-id-1443'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- uintptr_t tcmalloc::StackTrace::size -->
          <var-decl name='size' type-id='type-id-156' visibility='default' filepath='src/common.h' line='267' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- uintptr_t tcmalloc::StackTrace::depth -->
          <var-decl name='depth' type-id='type-id-156' visibility='default' filepath='src/common.h' line='268' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::StackTrace::stack[31] -->
          <var-decl name='stack' type-id='type-id-1460' visibility='default' filepath='src/common.h' line='269' column='1'/>
        </data-member>
      </class-decl>
    </namespace-decl>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* -->
    <pointer-type-def type-id='type-id-1440' size-in-bits='64' id='type-id-1454'/>
    <!-- void*[31] -->
    <array-type-def dimensions='1' type-id='type-id-58' size-in-bits='1984' id='type-id-1460'>
      <!-- <anonymous range>[31] -->
      <subrange length='31' type-id='type-id-5' id='type-id-1461'/>
    </array-type-def>
  </abi-instr>
  <abi-instr address-size='64' path='src/stacktrace.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- int GetStackFrames(void**, int*, int, int) -->
    <function-decl name='GetStackFrames' mangled-name='_Z14GetStackFramesPPvPiii' filepath='src/stacktrace.cc' line='220' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z14GetStackFramesPPvPiii'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='sizes' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='max_depth' filepath='src/stacktrace.cc' line='220' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='skip_count' filepath='src/stacktrace.cc' line='221' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackFramesWithContext(void**, int*, int, int, void*) -->
    <function-decl name='GetStackFramesWithContext' mangled-name='_Z25GetStackFramesWithContextPPvPiiiPKv' filepath='src/stacktrace.cc' line='225' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z25GetStackFramesWithContextPPvPiiiPKv'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='sizes' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='max_depth' filepath='src/stacktrace.cc' line='225' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='skip_count' filepath='src/stacktrace.cc' line='226' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='uc' filepath='src/stacktrace.cc' line='226' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackTrace(void**, int, int) -->
    <function-decl name='GetStackTrace' mangled-name='_Z13GetStackTracePPvii' filepath='src/stacktrace.cc' line='232' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z13GetStackTracePPvii'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='max_depth' filepath='src/malloc_hook.cc' line='611' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='skip_count' filepath='src/malloc_hook.cc' line='612' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int GetStackTraceWithContext(void**, int, int, void*) -->
    <function-decl name='GetStackTraceWithContext' mangled-name='_Z24GetStackTraceWithContextPPviiPKv' filepath='src/stacktrace.cc' line='237' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z24GetStackTraceWithContextPPviiPKv'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result' filepath='src/stacktrace.cc' line='237' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='max_depth' filepath='src/stacktrace.cc' line='237' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='skip_count' filepath='src/stacktrace.cc' line='238' column='1'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='uc' filepath='src/stacktrace.cc' line='238' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/static_vars.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='./src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/symbolize.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- class SymbolTable -->
    <class-decl name='SymbolTable' size-in-bits='448' visibility='default' filepath='src/symbolize.h' line='50' column='1' id='type-id-1462'>
      <member-type access='private'>
        <!-- typedef std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > SymbolTable::SymbolMap -->
        <typedef-decl name='SymbolMap' type-id='type-id-1464' filepath='src/symbolize.h' line='72' column='1' id='type-id-1463'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int SymbolTable::kSymbolSize -->
        <var-decl name='kSymbolSize' type-id='type-id-144' visibility='default' filepath='src/symbolize.h' line='75' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SymbolTable::SymbolMap SymbolTable::symbolization_table_ -->
        <var-decl name='symbolization_table_' type-id='type-id-1463' visibility='default' filepath='src/symbolize.h' line='78' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='384'>
        <!-- char* SymbolTable::symbol_buffer_ -->
        <var-decl name='symbol_buffer_' type-id='type-id-118' visibility='default' filepath='src/symbolize.h' line='81' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- SymbolTable::SymbolTable() -->
        <function-decl name='SymbolTable' filepath='src/symbolize.h' line='52' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SymbolTable*' -->
          <parameter type-id='type-id-1465' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- SymbolTable::~SymbolTable(int) -->
        <function-decl name='~SymbolTable' filepath='src/symbolize.h' line='54' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SymbolTable*' -->
          <parameter type-id='type-id-1465' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- int SymbolTable::Symbolize() -->
        <function-decl name='Symbolize' mangled-name='_ZN11SymbolTable9SymbolizeEv' filepath='src/symbolize.cc' line='127' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable9SymbolizeEv'>
          <!-- implicit parameter of type 'SymbolTable* const' -->
          <parameter type-id='type-id-1466' name='this' is-artificial='yes'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- const char* SymbolTable::GetSymbol(void*) -->
        <function-decl name='GetSymbol' mangled-name='_ZN11SymbolTable9GetSymbolEPKv' filepath='src/symbolize.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable9GetSymbolEPKv'>
          <!-- implicit parameter of type 'SymbolTable* const' -->
          <parameter type-id='type-id-1466' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='addr' filepath='src/symbolize.cc' line='115' column='1'/>
          <!-- const char* -->
          <return type-id='type-id-57'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SymbolTable::Add(void*) -->
        <function-decl name='Add' mangled-name='_ZN11SymbolTable3AddEPKv' filepath='src/symbolize.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN11SymbolTable3AddEPKv'>
          <!-- implicit parameter of type 'SymbolTable* const' -->
          <parameter type-id='type-id-1466' name='this' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58' name='addr' filepath='src/symbolize.cc' line='111' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- SymbolTable* -->
    <pointer-type-def type-id='type-id-1462' size-in-bits='64' id='type-id-1465'/>
    <!-- SymbolTable* const -->
    <qualified-type-def type-id='type-id-1465' const='yes' id='type-id-1466'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1131' size-in-bits='64' id='type-id-1136'/>
    <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1136' const='yes' id='type-id-1467'/>
    <!-- __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1468' size-in-bits='64' id='type-id-1469'/>
    <!-- __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1469' const='yes' id='type-id-1470'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1131' const='yes' id='type-id-1138'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1138' size-in-bits='64' id='type-id-1137'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1138' size-in-bits='64' id='type-id-1471'/>
    <!-- const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1471' const='yes' id='type-id-1472'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1468' const='yes' id='type-id-1473'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1473' size-in-bits='64' id='type-id-1474'/>
    <!-- const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1473' size-in-bits='64' id='type-id-1475'/>
    <!-- const char*& -->
    <reference-type-def kind='lvalue' type-id='type-id-57' size-in-bits='64' id='type-id-1476'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1126' const='yes' id='type-id-1477'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1477' size-in-bits='64' id='type-id-1478'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1477' size-in-bits='64' id='type-id-1479'/>
    <!-- const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1479' const='yes' id='type-id-1480'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1481' const='yes' id='type-id-1482'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >& -->
    <qualified-type-def type-id='type-id-1483' id='type-id-1484'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1482' size-in-bits='64' id='type-id-1483'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1482' size-in-bits='64' id='type-id-1485'/>
    <!-- const std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1485' const='yes' id='type-id-1486'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1487' const='yes' id='type-id-1488'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >& -->
    <qualified-type-def type-id='type-id-1489' id='type-id-1490'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1488' size-in-bits='64' id='type-id-1489'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1488' size-in-bits='64' id='type-id-1491'/>
    <!-- const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1491' const='yes' id='type-id-1492'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1493' const='yes' id='type-id-1494'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1494' size-in-bits='64' id='type-id-1495'/>
    <!-- const std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1494' size-in-bits='64' id='type-id-1496'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1497' const='yes' id='type-id-1498'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1498' size-in-bits='64' id='type-id-1499'/>
    <!-- const std::_Select1st<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1499' const='yes' id='type-id-1500'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1127' const='yes' id='type-id-1134'/>
    <!-- const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1134' size-in-bits='64' id='type-id-1130'/>
    <!-- const std::allocator<std::pair<const void* const, const char*> > -->
    <qualified-type-def type-id='type-id-1501' const='yes' id='type-id-1502'/>
    <!-- const std::allocator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1502' size-in-bits='64' id='type-id-1503'/>
    <!-- const std::less<const void*> -->
    <qualified-type-def type-id='type-id-1128' const='yes' id='type-id-1135'/>
    <!-- const std::less<const void*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1135' size-in-bits='64' id='type-id-1129'/>
    <!-- const std::less<const void*>* -->
    <pointer-type-def type-id='type-id-1135' size-in-bits='64' id='type-id-1504'/>
    <!-- const std::less<const void*>* const -->
    <qualified-type-def type-id='type-id-1504' const='yes' id='type-id-1505'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
    <qualified-type-def type-id='type-id-1464' const='yes' id='type-id-1506'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1506' size-in-bits='64' id='type-id-1507'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1506' size-in-bits='64' id='type-id-1508'/>
    <!-- const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1508' const='yes' id='type-id-1509'/>
    <!-- const std::pair<const void* const, const char*> -->
    <qualified-type-def type-id='type-id-1510' const='yes' id='type-id-1511'/>
    <!-- const std::pair<const void* const, const char*>& -->
    <qualified-type-def type-id='type-id-1512' id='type-id-1513'/>
    <!-- const std::pair<const void* const, const char*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1511' size-in-bits='64' id='type-id-1512'/>
    <!-- const std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1511' size-in-bits='64' id='type-id-1514'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1126' size-in-bits='64' id='type-id-1515'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1126' size-in-bits='64' id='type-id-1516'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1516' const='yes' id='type-id-1517'/>
    <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>* -->
    <pointer-type-def type-id='type-id-1125' size-in-bits='64' id='type-id-1100'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1481' size-in-bits='64' id='type-id-1518'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1481' size-in-bits='64' id='type-id-1519'/>
    <!-- std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1519' const='yes' id='type-id-1520'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1487' size-in-bits='64' id='type-id-1521'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1487' size-in-bits='64' id='type-id-1522'/>
    <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> >* const -->
    <qualified-type-def type-id='type-id-1522' const='yes' id='type-id-1523'/>
    <!-- std::_Rb_tree_node<std::pair<const void* const, const char*> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1493' size-in-bits='64' id='type-id-1524'/>
    <!-- std::_Rb_tree_node<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1493' size-in-bits='64' id='type-id-1525'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1127' size-in-bits='64' id='type-id-1526'/>
    <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1127' size-in-bits='64' id='type-id-1132'/>
    <!-- std::allocator<std::pair<const void* const, const char*> >* -->
    <pointer-type-def type-id='type-id-1501' size-in-bits='64' id='type-id-1527'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1464' size-in-bits='64' id='type-id-1528'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* -->
    <pointer-type-def type-id='type-id-1464' size-in-bits='64' id='type-id-1529'/>
    <!-- std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const -->
    <qualified-type-def type-id='type-id-1529' const='yes' id='type-id-1530'/>
    <!-- std::pair<const void* const, const char*>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1510' size-in-bits='64' id='type-id-1531'/>
    <!-- std::pair<const void* const, const char*>* -->
    <pointer-type-def type-id='type-id-1510' size-in-bits='64' id='type-id-1532'/>
    <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>* -->
    <pointer-type-def type-id='type-id-1533' size-in-bits='64' id='type-id-1534'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- struct std::less<const void*> -->
      <class-decl name='less&lt;const void*&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='227' column='1' id='type-id-1128'>
        <!-- struct std::binary_function<const void*, const void*, bool> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1133'/>
      </class-decl>
      <!-- struct std::binary_function<const void*, const void*, bool> -->
      <class-decl name='binary_function&lt;const void*, const void*, bool&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='113' column='1' id='type-id-1133'/>
      <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='154' column='1' id='type-id-1487'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Base_ptr std::_Rb_tree_iterator<std::pair<const void* const, const char*> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-865' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='219' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const void* const, const char*> >::_Rb_tree_iterator() -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='166' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1522' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_iterator<std::pair<const void* const, const char*> >::_Rb_tree_iterator(std::_Rb_tree_node<std::pair<const void* const, const char*> >*) -->
          <function-decl name='_Rb_tree_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_iterator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1522' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1525'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Select1st<std::pair<const void* const, const char*> > -->
      <class-decl name='_Select1st&lt;std::pair&lt;const void* const, const char*&gt; &gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='482' column='1' id='type-id-1497'>
        <!-- struct std::unary_function<std::pair<const void* const, const char*>, const void* const> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1535'/>
      </class-decl>
      <!-- struct std::unary_function<std::pair<const void* const, const char*>, const void* const> -->
      <class-decl name='unary_function&lt;std::pair&lt;const void* const, const char*&gt;, const void* const&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_function.h' line='101' column='1' id='type-id-1535'/>
      <!-- struct std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='224' column='1' id='type-id-1481'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_node_base::_Const_Base_ptr std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >::_M_node -->
          <var-decl name='_M_node' type-id='type-id-866' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='294' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >::_Rb_tree_const_iterator() -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='238' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1519' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >::_Rb_tree_const_iterator(const std::_Rb_tree_node<std::pair<const void* const, const char*> >*) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='242' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1519' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1496'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >::_Rb_tree_const_iterator(const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >&) -->
          <function-decl name='_Rb_tree_const_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1519' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1489'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, bool&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1533'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::first -->
          <var-decl name='first' type-id='type-id-1487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- bool std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::second -->
          <var-decl name='second' type-id='type-id-61' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>*' -->
            <parameter type-id='type-id-1534' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>::pair(const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >&, const bool&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool>*' -->
            <parameter type-id='type-id-1534' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_iterator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1489'/>
            <!-- parameter of type 'const bool&' -->
            <parameter type-id='type-id-488'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1127'>
        <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1131'/>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::allocator(const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1130'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1132' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::pair<const void* const, const char*> -->
      <class-decl name='pair&lt;const void* const, const char*&gt;' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='68' column='1' id='type-id-1510'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- void* const std::pair<const void* const, const char*>::first -->
          <var-decl name='first' type-id='type-id-59' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='72' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- const char* std::pair<const void* const, const char*>::second -->
          <var-decl name='second' type-id='type-id-57' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='73' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::pair<const void* const, const char*>::pair() -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const void* const, const char*>*' -->
            <parameter type-id='type-id-1532' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::pair<const void* const, const char*>::pair(void* const&, const char* const&) -->
          <function-decl name='pair' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_pair.h' line='83' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::pair<const void* const, const char*>*' -->
            <parameter type-id='type-id-1532' is-artificial='yes'/>
            <!-- parameter of type 'void* const&' -->
            <parameter type-id='type-id-856'/>
            <!-- parameter of type 'const char* const&' -->
            <parameter type-id='type-id-489'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
      <class-decl name='_Rb_tree&lt;const void*, std::pair&lt;const void* const, const char*&gt;, std::_Select1st&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='323' column='1' id='type-id-1126'>
        <member-type access='protected'>
          <!-- struct std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false> -->
          <class-decl name='_Rb_tree_impl&lt;std::less&lt;const void*&gt;, false&gt;' size-in-bits='384' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='427' column='1' id='type-id-1125'>
            <!-- class std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1127'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- std::less<const void*> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_key_compare -->
              <var-decl name='_M_key_compare' type-id='type-id-1128' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='428' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- std::_Rb_tree_node_base std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_header -->
              <var-decl name='_M_header' type-id='type-id-590' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='429' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='320'>
              <!-- size_t std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_M_node_count -->
              <var-decl name='_M_node_count' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='430' column='1'/>
            </data-member>
            <member-function access='public'>
              <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_Rb_tree_impl() -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='432' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>*' -->
                <parameter type-id='type-id-1100' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public'>
              <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>::_Rb_tree_impl(const std::less<const void*>&, const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
              <function-decl name='_Rb_tree_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='437' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false>*' -->
                <parameter type-id='type-id-1100' is-artificial='yes'/>
                <!-- parameter of type 'const std::less<const void*>&' -->
                <parameter type-id='type-id-1129'/>
                <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
                <parameter type-id='type-id-1130'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree_impl<std::less<const void*>, false> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1125' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='453' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree() -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='591' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1516' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree(const std::less<const void*>&, const std::allocator<std::pair<const void* const, const char*> >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='593' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1516' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<const void*>&' -->
            <parameter type-id='type-id-1129'/>
            <!-- parameter of type 'const std::allocator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1503'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_Rb_tree(const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='597' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1516' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1478'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::~_Rb_tree(int) -->
          <function-decl name='~_Rb_tree' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='613' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1516' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_(const std::_Rb_tree_node_base*, const std::_Rb_tree_node_base*, const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_M_insert_EPKSt18_Rb_tree_node_baseSF_RKS6_'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const' -->
            <parameter type-id='type-id-1517' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::_Rb_tree_node_base*' -->
            <parameter type-id='type-id-592' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1513' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='875' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
            <return type-id='type-id-1487'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_unique(const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_unique' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1161' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE16_M_insert_uniqueERKS6_'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const' -->
            <parameter type-id='type-id-1517' name='this' is-artificial='yes'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1513' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1162' column='1'/>
            <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, bool> -->
            <return type-id='type-id-1533'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- std::_Rb_tree_iterator<std::pair<const void* const, const char*> > std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_insert_unique_(std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, const std::pair<const void* const, const char*>&) -->
          <function-decl name='_M_insert_unique_' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1206' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_insert_unique_ESt23_Rb_tree_const_iteratorIS6_ERKS6_'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const' -->
            <parameter type-id='type-id-1517' name='this' is-artificial='yes'/>
            <!-- parameter of type 'struct std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >' -->
            <parameter type-id='type-id-1481' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- parameter of type 'const std::pair<const void* const, const char*>&' -->
            <parameter type-id='type-id-1513' name='__v' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='1207' column='1'/>
            <!-- struct std::_Rb_tree_iterator<std::pair<const void* const, const char*> > -->
            <return type-id='type-id-1487'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_erase(std::_Rb_tree_node<std::pair<const void* const, const char*> >*) -->
          <function-decl name='_M_erase' mangled-name='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='964' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt8_Rb_treeIPKvSt4pairIKS1_PKcESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E'>
            <!-- implicit parameter of type 'std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >* const' -->
            <parameter type-id='type-id-1517' name='this' is-artificial='yes'/>
            <!-- parameter of type 'std::_Rb_tree_node<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1525' name='__p' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_tree.h' line='362' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > -->
      <class-decl name='map&lt;const void*, const char*, std::less&lt;const void*&gt;, std::allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='384' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='87' column='1' id='type-id-1464'>
        <member-type access='private'>
          <!-- class std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::value_compare -->
          <class-decl name='value_compare' visibility='default' is-declaration-only='yes' id='type-id-1536'/>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::_Rb_tree<const void*, std::pair<const void* const, const char*>, std::_Select1st<std::pair<const void* const, const char*> >, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > > std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::_M_t -->
          <var-decl name='_M_t' type-id='type-id-1126' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='128' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::map() -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='150' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1529' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::map(const std::less<const void*>&, const std::allocator<std::pair<const void* const, const char*> >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='159' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1529' is-artificial='yes'/>
            <!-- parameter of type 'const std::less<const void*>&' -->
            <parameter type-id='type-id-1129'/>
            <!-- parameter of type 'const std::allocator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1503'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >::map(const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='map' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_map.h' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1529' is-artificial='yes'/>
            <!-- parameter of type 'const std::map<const void*, const char*, std::less<const void*>, std::allocator<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1507'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1501'>
        <!-- class __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1468'/>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<const void* const, const char*> >::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1527' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<const void* const, const char*> >::allocator(const std::allocator<std::pair<const void* const, const char*> >&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1527' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1503'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<std::pair<const void* const, const char*> >::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1527' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<std::pair<const void* const, const char*> >::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >(const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1527' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1130'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Rb_tree_node<std::pair<const void* const, const char*> > -->
      <class-decl name='_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1493'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1537'/>
      <!-- class std::reverse_iterator<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='reverse_iterator&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1538'/>
      <!-- struct std::pair<std::_Rb_tree_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1539'/>
      <!-- struct std::pair<std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> >, std::_Rb_tree_const_iterator<std::pair<const void* const, const char*> > > -->
      <class-decl name='pair&lt;std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt;, std::_Rb_tree_const_iterator&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1540'/>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > > -->
      <class-decl name='new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;const void* const, const char*&gt; &gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1131'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::new_allocator(const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >&' -->
            <parameter type-id='type-id-1137'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<const void* const, const char*> > >*' -->
            <parameter type-id='type-id-1136' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<std::pair<const void* const, const char*> > -->
      <class-decl name='new_allocator&lt;std::pair&lt;const void* const, const char*&gt; &gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1468'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1469' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >::new_allocator(const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1469' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >&' -->
            <parameter type-id='type-id-1474'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<std::pair<const void* const, const char*> >::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<std::pair<const void* const, const char*> >*' -->
            <parameter type-id='type-id-1469' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead'>
      <!-- std::string FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_symbolize_pprof -->
      <var-decl name='FLAGS_symbolize_pprof' type-id='type-id-924' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE' visibility='default' filepath='src/symbolize.cc' line='68' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead21FLAGS_symbolize_pprofE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead::FLAGS_nosymbolize_pprof -->
      <var-decl name='FLAGS_nosymbolize_pprof' type-id='type-id-65' mangled-name='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE' visibility='default' filepath='src/symbolize.cc' line='70' column='1' elf-symbol-id='_ZN62FLAG__namespace_do_not_use_directly_use_DECLARE_string_instead23FLAGS_nosymbolize_pprofE'/>
    </namespace-decl>
  </abi-instr>
  <abi-instr address-size='64' path='src/system-alloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- SysAllocator*[2] -->
    <array-type-def dimensions='1' type-id='type-id-966' size-in-bits='128' id='type-id-1541'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' type-id='type-id-5' id='type-id-1542'/>
    </array-type-def>
    <!-- bool[2] -->
    <array-type-def dimensions='1' type-id='type-id-61' size-in-bits='16' id='type-id-1543'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' type-id='type-id-5' id='type-id-1542'/>
    </array-type-def>
    <!-- const char*[2] -->
    <array-type-def dimensions='1' type-id='type-id-57' size-in-bits='128' id='type-id-1544'>
      <!-- <anonymous range>[2] -->
      <subrange length='2' type-id='type-id-5' id='type-id-1542'/>
    </array-type-def>
    <!-- class MmapSysAllocator -->
    <class-decl name='MmapSysAllocator' size-in-bits='64' visibility='default' filepath='src/system-alloc.cc' line='158' column='1' id='type-id-1545'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
      <member-function access='private' constructor='yes'>
        <!-- MmapSysAllocator::MmapSysAllocator() -->
        <function-decl name='MmapSysAllocator' filepath='src/system-alloc.cc' line='160' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'MmapSysAllocator*' -->
          <parameter type-id='type-id-1546' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* MmapSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN16MmapSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16MmapSysAllocator5AllocEmPmm'>
          <!-- implicit parameter of type 'MmapSysAllocator*' -->
          <parameter type-id='type-id-1546' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class SbrkSysAllocator -->
    <class-decl name='SbrkSysAllocator' size-in-bits='64' visibility='default' filepath='src/system-alloc.cc' line='150' column='1' id='type-id-1547'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
      <member-function access='private' constructor='yes'>
        <!-- SbrkSysAllocator::SbrkSysAllocator() -->
        <function-decl name='SbrkSysAllocator' filepath='src/system-alloc.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SbrkSysAllocator*' -->
          <parameter type-id='type-id-1548' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* SbrkSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN16SbrkSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16SbrkSysAllocator5AllocEmPmm'>
          <!-- implicit parameter of type 'SbrkSysAllocator*' -->
          <parameter type-id='type-id-1548' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class DefaultSysAllocator -->
    <class-decl name='DefaultSysAllocator' size-in-bits='384' visibility='default' filepath='src/system-alloc.cc' line='173' column='1' id='type-id-1549'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
      <data-member access='private' static='yes'>
        <!-- static const int DefaultSysAllocator::kMaxAllocators -->
        <var-decl name='kMaxAllocators' type-id='type-id-144' visibility='default' filepath='src/system-alloc.cc' line='193' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- bool DefaultSysAllocator::failed_[2] -->
        <var-decl name='failed_' type-id='type-id-1543' visibility='default' filepath='src/system-alloc.cc' line='194' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='128'>
        <!-- SysAllocator* DefaultSysAllocator::allocs_[2] -->
        <var-decl name='allocs_' type-id='type-id-1541' visibility='default' filepath='src/system-alloc.cc' line='195' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='256'>
        <!-- const char* DefaultSysAllocator::names_[2] -->
        <var-decl name='names_' type-id='type-id-1544' visibility='default' filepath='src/system-alloc.cc' line='196' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- DefaultSysAllocator::DefaultSysAllocator() -->
        <function-decl name='DefaultSysAllocator' filepath='src/system-alloc.cc' line='175' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'DefaultSysAllocator*' -->
          <parameter type-id='type-id-1550' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* DefaultSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN19DefaultSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN19DefaultSysAllocator5AllocEmPmm'>
          <!-- implicit parameter of type 'DefaultSysAllocator*' -->
          <parameter type-id='type-id-1550' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- class DevMemSysAllocator -->
    <class-decl name='DevMemSysAllocator' size-in-bits='64' visibility='default' filepath='src/system-alloc.cc' line='166' column='1' id='type-id-1551'>
      <!-- class SysAllocator -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-997'/>
      <member-function access='private' constructor='yes'>
        <!-- DevMemSysAllocator::DevMemSysAllocator() -->
        <function-decl name='DevMemSysAllocator' filepath='src/system-alloc.cc' line='168' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'DevMemSysAllocator*' -->
          <parameter type-id='type-id-1552' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* DevMemSysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN18DevMemSysAllocator5AllocEmPmm' filepath='src/system-alloc.cc' line='342' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN18DevMemSysAllocator5AllocEmPmm'>
          <!-- implicit parameter of type 'DevMemSysAllocator*' -->
          <parameter type-id='type-id-1552' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- DefaultSysAllocator* -->
    <pointer-type-def type-id='type-id-1549' size-in-bits='64' id='type-id-1550'/>
    <!-- DefaultSysAllocator* const -->
    <qualified-type-def type-id='type-id-1550' const='yes' id='type-id-1553'/>
    <!-- DevMemSysAllocator* -->
    <pointer-type-def type-id='type-id-1551' size-in-bits='64' id='type-id-1552'/>
    <!-- MmapSysAllocator* -->
    <pointer-type-def type-id='type-id-1545' size-in-bits='64' id='type-id-1546'/>
    <!-- SbrkSysAllocator* -->
    <pointer-type-def type-id='type-id-1547' size-in-bits='64' id='type-id-1548'/>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- bool tcmalloc::commandlineflags::StringToBool(const char*, bool) -->
        <function-decl name='StringToBool' filepath='src/base/commandlineflags.h' line='118' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'bool' -->
          <parameter type-id='type-id-61'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead'>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_start -->
      <var-decl name='FLAGS_malloc_devmem_start' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE' visibility='default' filepath='src/system-alloc.cc' line='130' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_startE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_start -->
      <var-decl name='FLAGS_nomalloc_devmem_start' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE' visibility='default' filepath='src/system-alloc.cc' line='133' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_startE'/>
      <!-- int32 FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_malloc_devmem_limit -->
      <var-decl name='FLAGS_malloc_devmem_limit' type-id='type-id-74' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE' visibility='default' filepath='src/system-alloc.cc' line='134' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead25FLAGS_malloc_devmem_limitE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead::FLAGS_nomalloc_devmem_limit -->
      <var-decl name='FLAGS_nomalloc_devmem_limit' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE' visibility='default' filepath='src/system-alloc.cc' line='137' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int32_instead27FLAGS_nomalloc_devmem_limitE'/>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead'>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_sbrk -->
      <var-decl name='FLAGS_malloc_skip_sbrk' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE' visibility='default' filepath='src/system-alloc.cc' line='138' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_sbrkE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_sbrk -->
      <var-decl name='FLAGS_nomalloc_skip_sbrk' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE' visibility='default' filepath='src/system-alloc.cc' line='140' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_sbrkE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_skip_mmap -->
      <var-decl name='FLAGS_malloc_skip_mmap' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE' visibility='default' filepath='src/system-alloc.cc' line='141' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead22FLAGS_malloc_skip_mmapE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_skip_mmap -->
      <var-decl name='FLAGS_nomalloc_skip_mmap' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE' visibility='default' filepath='src/system-alloc.cc' line='143' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead24FLAGS_nomalloc_skip_mmapE'/>
      <!-- bool FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_malloc_disable_memory_release -->
      <var-decl name='FLAGS_malloc_disable_memory_release' type-id='type-id-61' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE' visibility='default' filepath='src/system-alloc.cc' line='144' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead35FLAGS_malloc_disable_memory_releaseE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead::FLAGS_nomalloc_disable_memory_release -->
      <var-decl name='FLAGS_nomalloc_disable_memory_release' type-id='type-id-65' mangled-name='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE' visibility='default' filepath='src/system-alloc.cc' line='147' column='1' elf-symbol-id='_ZN60FLAG__namespace_do_not_use_directly_use_DECLARE_bool_instead37FLAGS_nomalloc_disable_memory_releaseE'/>
    </namespace-decl>
    <!-- SysAllocator* tc_get_sysalloc_override(SysAllocator*) -->
    <function-decl name='tc_get_sysalloc_override' mangled-name='_Z24tc_get_sysalloc_overrideP12SysAllocator' filepath='src/system-alloc.cc' line='451' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z24tc_get_sysalloc_overrideP12SysAllocator'>
      <!-- parameter of type 'SysAllocator*' -->
      <parameter type-id='type-id-966' name='def' filepath='src/system-alloc.cc' line='451' column='1'/>
      <!-- SysAllocator* -->
      <return type-id='type-id-966'/>
    </function-decl>
    <!-- void InitSystemAllocators() -->
    <function-decl name='InitSystemAllocators' mangled-name='_Z20InitSystemAllocatorsv' filepath='src/system-alloc.cc' line='457' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20InitSystemAllocatorsv'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void TCMalloc_SystemCommit(void*, size_t) -->
    <function-decl name='TCMalloc_SystemCommit' mangled-name='_Z21TCMalloc_SystemCommitPvm' filepath='src/system-alloc.cc' line='548' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z21TCMalloc_SystemCommitPvm'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- bool TCMalloc_SystemRelease(void*, size_t) -->
    <function-decl name='TCMalloc_SystemRelease' mangled-name='_Z22TCMalloc_SystemReleasePvm' filepath='src/system-alloc.cc' line='510' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z22TCMalloc_SystemReleasePvm'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='start' filepath='src/system-alloc.cc' line='510' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='length' filepath='src/system-alloc.cc' line='510' column='1'/>
      <!-- bool -->
      <return type-id='type-id-61'/>
    </function-decl>
    <!-- void* TCMalloc_SystemAlloc(size_t, size_t*, size_t) -->
    <function-decl name='TCMalloc_SystemAlloc' mangled-name='_Z20TCMalloc_SystemAllocmPmm' filepath='src/system-alloc.cc' line='480' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_Z20TCMalloc_SystemAllocmPmm'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='size' filepath='src/system-alloc.cc' line='480' column='1'/>
      <!-- parameter of type 'size_t*' -->
      <parameter type-id='type-id-253' name='actual_size' filepath='src/system-alloc.cc' line='480' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='alignment' filepath='src/system-alloc.cc' line='481' column='1'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- SysAllocator* sys_alloc -->
    <var-decl name='sys_alloc' type-id='type-id-966' mangled-name='sys_alloc' visibility='default' filepath='src/system-alloc.cc' line='124' column='1' elf-symbol-id='sys_alloc'/>
    <!-- size_t TCMalloc_SystemTaken -->
    <var-decl name='TCMalloc_SystemTaken' type-id='type-id-62' mangled-name='TCMalloc_SystemTaken' visibility='default' filepath='src/system-alloc.cc' line='127' column='1' elf-symbol-id='TCMalloc_SystemTaken'/>
  </abi-instr>
  <abi-instr address-size='64' path='src/tcmalloc.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- AtomicWord[8] -->
    <array-type-def dimensions='1' type-id='type-id-922' size-in-bits='512' id='type-id-923'>
      <!-- <anonymous range>[8] -->
      <subrange length='8' type-id='type-id-5' id='type-id-925'/>
    </array-type-def>
    <!-- bool -->
    <type-decl name='bool' size-in-bits='8' id='type-id-61'/>
    <!-- char -->
    <type-decl name='char' size-in-bits='8' id='type-id-65'/>
    <!-- char[1] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='8' id='type-id-1554'>
      <!-- <anonymous range>[1] -->
      <subrange length='1' type-id='type-id-5' id='type-id-1555'/>
    </array-type-def>
    <!-- char[20] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='160' id='type-id-1556'>
      <!-- <anonymous range>[20] -->
      <subrange length='20' type-id='type-id-5' id='type-id-926'/>
    </array-type-def>
    <!-- char[48] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='384' id='type-id-188'>
      <!-- <anonymous range>[48] -->
      <subrange length='48' type-id='type-id-5' id='type-id-928'/>
    </array-type-def>
    <!-- char[4] -->
    <array-type-def dimensions='1' type-id='type-id-65' size-in-bits='32' id='type-id-1557'>
      <!-- <anonymous range>[4] -->
      <subrange length='4' type-id='type-id-5' id='type-id-162'/>
    </array-type-def>
    <!-- struct typedef __va_list_tag __va_list_tag -->
    <class-decl name='typedef __va_list_tag __va_list_tag' size-in-bits='192' is-struct='yes' visibility='default' id='type-id-73'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::gp_offset -->
        <var-decl name='gp_offset' type-id='type-id-64' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- unsigned int typedef __va_list_tag __va_list_tag::fp_offset -->
        <var-decl name='fp_offset' type-id='type-id-64' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- void* typedef __va_list_tag __va_list_tag::overflow_arg_area -->
        <var-decl name='overflow_arg_area' type-id='type-id-58' visibility='default'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- void* typedef __va_list_tag __va_list_tag::reg_save_area -->
        <var-decl name='reg_save_area' type-id='type-id-58' visibility='default'/>
      </data-member>
    </class-decl>
    <!-- double -->
    <type-decl name='double' size-in-bits='64' id='type-id-2'/>
    <!-- double[1024] -->
    <array-type-def dimensions='1' type-id='type-id-2' size-in-bits='65536' id='type-id-1558'>
      <!-- <anonymous range>[1024] -->
      <subrange length='1024' type-id='type-id-5' id='type-id-1413'/>
    </array-type-def>
    <!-- float -->
    <type-decl name='float' size-in-bits='32' id='type-id-1559'/>
    <!-- int -->
    <type-decl name='int' size-in-bits='32' id='type-id-1'/>
    <!-- int64[128] -->
    <array-type-def dimensions='1' type-id='type-id-98' size-in-bits='8192' id='type-id-1560'>
      <!-- <anonymous range>[128] -->
      <subrange length='128' type-id='type-id-5' id='type-id-1561'/>
    </array-type-def>
    <!-- int[88] -->
    <array-type-def dimensions='1' type-id='type-id-1' size-in-bits='2816' id='type-id-1562'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' type-id='type-id-5' id='type-id-1563'/>
    </array-type-def>
    <!-- long double -->
    <type-decl name='long double' size-in-bits='128' id='type-id-1564'/>
    <!-- long int -->
    <type-decl name='long int' size-in-bits='64' id='type-id-85'/>
    <!-- long long int -->
    <type-decl name='long long int' size-in-bits='64' id='type-id-1159'/>
    <!-- long long unsigned int -->
    <type-decl name='long long unsigned int' size-in-bits='64' id='type-id-1160'/>
    <!-- signed char -->
    <type-decl name='signed char' size-in-bits='8' id='type-id-1565'/>
    <!-- size_t[88] -->
    <array-type-def dimensions='1' type-id='type-id-62' size-in-bits='5632' id='type-id-1566'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' type-id='type-id-5' id='type-id-1563'/>
    </array-type-def>
    <!-- TCEntry[64] -->
    <array-type-def dimensions='1' type-id='type-id-1567' size-in-bits='8192' id='type-id-1568'>
      <!-- <anonymous range>[64] -->
      <subrange length='64' type-id='type-id-5' id='type-id-1412'/>
    </array-type-def>
    <!-- CentralFreeListPadded[88] -->
    <array-type-def dimensions='1' type-id='type-id-1569' size-in-bits='856064' id='type-id-1570'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' type-id='type-id-5' id='type-id-1563'/>
    </array-type-def>
    <!-- SpanList[128] -->
    <array-type-def dimensions='1' type-id='type-id-1571' size-in-bits='98304' id='type-id-1572'>
      <!-- <anonymous range>[128] -->
      <subrange length='128' type-id='type-id-5' id='type-id-1561'/>
    </array-type-def>
    <!-- FreeList[88] -->
    <array-type-def dimensions='1' type-id='type-id-1573' size-in-bits='16896' id='type-id-1574'>
      <!-- <anonymous range>[88] -->
      <subrange length='88' type-id='type-id-5' id='type-id-1563'/>
    </array-type-def>
    <!-- unnamed&#45;enum&#45;underlying&#45;type&#45;32 -->
    <type-decl name='unnamed-enum-underlying-type-32' is-anonymous='yes' size-in-bits='32' alignment-in-bits='32' id='type-id-89'/>
    <!-- unsigned char -->
    <type-decl name='unsigned char' size-in-bits='8' id='type-id-3'/>
    <!-- unsigned char[2169] -->
    <array-type-def dimensions='1' type-id='type-id-3' size-in-bits='17352' id='type-id-1575'>
      <!-- <anonymous range>[2169] -->
      <subrange length='2169' type-id='type-id-5' id='type-id-1576'/>
    </array-type-def>
    <!-- unsigned int -->
    <type-decl name='unsigned int' size-in-bits='32' id='type-id-64'/>
    <!-- unsigned long int -->
    <type-decl name='unsigned long int' size-in-bits='64' id='type-id-5'/>
    <!-- unsigned long int[65536] -->
    <array-type-def dimensions='1' type-id='type-id-5' size-in-bits='4194304' id='type-id-1577'>
      <!-- <anonymous range>[65536] -->
      <subrange length='65536' type-id='type-id-5' id='type-id-1578'/>
    </array-type-def>
    <!-- unsigned short int -->
    <type-decl name='unsigned short int' size-in-bits='16' id='type-id-14'/>
    <!-- variadic parameter type -->
    <type-decl name='variadic parameter type' id='type-id-1579'/>
    <!-- void -->
    <type-decl name='void' id='type-id-60'/>
    <!-- void*[31] -->
    <array-type-def dimensions='1' type-id='type-id-58' size-in-bits='1984' id='type-id-1460'>
      <!-- <anonymous range>[31] -->
      <subrange length='31' type-id='type-id-5' id='type-id-1461'/>
    </array-type-def>
    <!-- volatile unsigned long int[65536] -->
    <array-type-def dimensions='1' type-id='type-id-1580' size-in-bits='4194304' id='type-id-1581'>
      <!-- <anonymous range>[65536] -->
      <subrange length='65536' type-id='type-id-5' id='type-id-1578'/>
    </array-type-def>
    <!-- wchar_t -->
    <type-decl name='wchar_t' size-in-bits='32' id='type-id-1582'/>
    <!-- typedef unsigned long int size_t -->
    <typedef-decl name='size_t' type-id='type-id-5' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='211' column='1' id='type-id-62'/>
    <!-- struct lldiv_t -->
    <class-decl name='lldiv_t' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/include/stdlib.h' line='119' column='1' id='type-id-1583'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- long long int lldiv_t::quot -->
        <var-decl name='quot' type-id='type-id-1159' visibility='default' filepath='/usr/include/stdlib.h' line='120' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- long long int lldiv_t::rem -->
        <var-decl name='rem' type-id='type-id-1159' visibility='default' filepath='/usr/include/stdlib.h' line='121' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef long int ptrdiff_t -->
    <typedef-decl name='ptrdiff_t' type-id='type-id-85' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='149' column='1' id='type-id-208'/>
    <!-- class TCMalloc_PageMap3<35> -->
    <class-decl name='TCMalloc_PageMap3&lt;35&gt;' size-in-bits='128' visibility='default' filepath='src/pagemap.h' line='209' column='1' id='type-id-1282'>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Node -->
        <class-decl name='Node' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1283'/>
      </member-type>
      <member-type access='private'>
        <!-- struct TCMalloc_PageMap3<35>::Leaf -->
        <class-decl name='Leaf' is-struct='yes' visibility='default' is-declaration-only='yes' id='type-id-1284'/>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::INTERIOR_BITS -->
        <var-decl name='INTERIOR_BITS' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='212' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::INTERIOR_LENGTH -->
        <var-decl name='INTERIOR_LENGTH' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='213' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::LEAF_BITS -->
        <var-decl name='LEAF_BITS' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='216' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int TCMalloc_PageMap3<35>::LEAF_LENGTH -->
        <var-decl name='LEAF_LENGTH' type-id='type-id-144' visibility='default' filepath='src/pagemap.h' line='217' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- TCMalloc_PageMap3<35>::Node* TCMalloc_PageMap3<35>::root_ -->
        <var-decl name='root_' type-id='type-id-1285' visibility='default' filepath='src/pagemap.h' line='229' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- void* (unsigned long int)* TCMalloc_PageMap3<35>::allocator_ -->
        <var-decl name='allocator_' type-id='type-id-263' visibility='default' filepath='src/pagemap.h' line='230' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void TCMalloc_PageMap3<35>::TCMalloc_PageMap3(void* (unsigned long int)*) -->
        <function-decl name='TCMalloc_PageMap3' filepath='src/pagemap.h' line='243' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'TCMalloc_PageMap3<35>*' -->
          <parameter type-id='type-id-1280' is-artificial='yes'/>
          <!-- parameter of type 'void* (unsigned long int)*' -->
          <parameter type-id='type-id-263'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef int (void*, void*)* __compar_fn_t -->
    <typedef-decl name='__compar_fn_t' type-id='type-id-1584' filepath='/usr/include/stdlib.h' line='742' column='1' id='type-id-1585'/>
    <!-- struct div_t -->
    <class-decl name='div_t' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/include/stdlib.h' line='99' column='1' id='type-id-1586'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int div_t::quot -->
        <var-decl name='quot' type-id='type-id-1' visibility='default' filepath='/usr/include/stdlib.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int div_t::rem -->
        <var-decl name='rem' type-id='type-id-1' visibility='default' filepath='/usr/include/stdlib.h' line='101' column='1'/>
      </data-member>
    </class-decl>
    <!-- class SpinLock -->
    <class-decl name='SpinLock' size-in-bits='32' visibility='default' filepath='./src/base/spinlock.h' line='48' column='1' id='type-id-87'>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__2 -->
        <enum-decl name='__anonymous_enum__2' is-anonymous='yes' filepath='./src/base/spinlock.h' line='116' column='1' id='type-id-88'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockSleeper' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__ -->
        <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/base/spinlock.h' line='114' column='1' id='type-id-90'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockFree' value='0'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- enum SpinLock::__anonymous_enum__1 -->
        <enum-decl name='__anonymous_enum__1' is-anonymous='yes' filepath='src/base/spinlock.h' line='115' column='1' id='type-id-91'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kSpinLockHeld' value='1'/>
        </enum-decl>
      </member-type>
      <data-member access='private' static='yes'>
        <!-- static const base::LinkerInitialized SpinLock::LINKER_INITIALIZED -->
        <var-decl name='LINKER_INITIALIZED' type-id='type-id-92' mangled-name='_ZN8SpinLock18LINKER_INITIALIZEDE' visibility='default' filepath='src/base/spinlock.h' line='112' column='1' elf-symbol-id='_ZN8SpinLock18LINKER_INITIALIZEDE'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- volatile Atomic32 SpinLock::lockword_ -->
        <var-decl name='lockword_' type-id='type-id-93' visibility='default' filepath='src/base/spinlock.h' line='118' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock() -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='50' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock(base::LinkerInitialized) -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='61' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- parameter of type 'enum base::LinkerInitialized' -->
          <parameter type-id='type-id-95'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' constructor='yes'>
        <!-- SpinLock::SpinLock(const SpinLock&) -->
        <function-decl name='SpinLock' filepath='src/base/spinlock.h' line='125' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- parameter of type 'const SpinLock&' -->
          <parameter type-id='type-id-96'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- Atomic32 SpinLock::SpinLoop(int64, Atomic32*) -->
        <function-decl name='SpinLoop' mangled-name='_ZN8SpinLock8SpinLoopElPi' filepath='src/base/spinlock.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SpinLoopElPi'>
          <!-- implicit parameter of type 'SpinLock* const' -->
          <parameter type-id='type-id-97' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef int64' -->
          <parameter type-id='type-id-98' name='initial_wait_timestamp' filepath='src/base/spinlock.cc' line='82' column='1'/>
          <!-- parameter of type 'Atomic32*' -->
          <parameter type-id='type-id-99' name='wait_cycles' filepath='src/base/spinlock.cc' line='83' column='1'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowUnlock(uint64) -->
        <function-decl name='SlowUnlock' mangled-name='_ZN8SpinLock10SlowUnlockEm' filepath='src/base/spinlock.cc' line='152' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock10SlowUnlockEm'>
          <!-- implicit parameter of type 'SpinLock* const' -->
          <parameter type-id='type-id-97' name='this' is-artificial='yes'/>
          <!-- parameter of type 'typedef uint64' -->
          <parameter type-id='type-id-101' name='wait_cycles' filepath='src/base/spinlock.cc' line='152' column='1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void SpinLock::SlowLock() -->
        <function-decl name='SlowLock' mangled-name='_ZN8SpinLock8SlowLockEv' filepath='src/base/spinlock.cc' line='95' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8SpinLock8SlowLockEv'>
          <!-- implicit parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct ldiv_t -->
    <class-decl name='ldiv_t' size-in-bits='128' is-struct='yes' visibility='default' filepath='/usr/include/stdlib.h' line='107' column='1' id='type-id-1587'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- long int ldiv_t::quot -->
        <var-decl name='quot' type-id='type-id-85' visibility='default' filepath='/usr/include/stdlib.h' line='108' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- long int ldiv_t::rem -->
        <var-decl name='rem' type-id='type-id-85' visibility='default' filepath='/usr/include/stdlib.h' line='109' column='1'/>
      </data-member>
    </class-decl>
    <!-- class TCMalloc_Printer -->
    <class-decl name='TCMalloc_Printer' size-in-bits='128' visibility='default' filepath='src/internal_logging.h' line='126' column='1' id='type-id-1155'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- char* TCMalloc_Printer::buf_ -->
        <var-decl name='buf_' type-id='type-id-118' visibility='default' filepath='src/internal_logging.h' line='128' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- int TCMalloc_Printer::left_ -->
        <var-decl name='left_' type-id='type-id-1' visibility='default' filepath='src/internal_logging.h' line='129' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- TCMalloc_Printer::TCMalloc_Printer(char*, int) -->
        <function-decl name='TCMalloc_Printer' filepath='src/internal_logging.h' line='133' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'TCMalloc_Printer*' -->
          <parameter type-id='type-id-1143' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void TCMalloc_Printer::printf(const char*, ...) -->
        <function-decl name='printf' mangled-name='_ZN16TCMalloc_Printer6printfEPKcz' filepath='src/internal_logging.cc' line='177' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN16TCMalloc_Printer6printfEPKcz'>
          <!-- implicit parameter of type 'TCMalloc_Printer* const' -->
          <parameter type-id='type-id-1144' name='this' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57' name='format' filepath='src/internal_logging.cc' line='177' column='1'/>
          <parameter is-variadic='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef unsigned int wint_t -->
    <typedef-decl name='wint_t' type-id='type-id-64' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h' line='352' column='1' id='type-id-1588'/>
    <!-- typedef _IO_FILE __FILE -->
    <typedef-decl name='__FILE' type-id='type-id-1589' filepath='/usr/include/stdio.h' line='65' column='1' id='type-id-1590'/>
    <!-- struct _IO_FILE -->
    <class-decl name='_IO_FILE' size-in-bits='1728' is-struct='yes' visibility='default' filepath='/usr/include/libio.h' line='271' column='1' id='type-id-1589'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int _IO_FILE::_flags -->
        <var-decl name='_flags' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='272' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- char* _IO_FILE::_IO_read_ptr -->
        <var-decl name='_IO_read_ptr' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='277' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char* _IO_FILE::_IO_read_end -->
        <var-decl name='_IO_read_end' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='278' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- char* _IO_FILE::_IO_read_base -->
        <var-decl name='_IO_read_base' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='279' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- char* _IO_FILE::_IO_write_base -->
        <var-decl name='_IO_write_base' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='280' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- char* _IO_FILE::_IO_write_ptr -->
        <var-decl name='_IO_write_ptr' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='281' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- char* _IO_FILE::_IO_write_end -->
        <var-decl name='_IO_write_end' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='282' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- char* _IO_FILE::_IO_buf_base -->
        <var-decl name='_IO_buf_base' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='283' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='512'>
        <!-- char* _IO_FILE::_IO_buf_end -->
        <var-decl name='_IO_buf_end' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='284' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='576'>
        <!-- char* _IO_FILE::_IO_save_base -->
        <var-decl name='_IO_save_base' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='286' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='640'>
        <!-- char* _IO_FILE::_IO_backup_base -->
        <var-decl name='_IO_backup_base' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='287' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='704'>
        <!-- char* _IO_FILE::_IO_save_end -->
        <var-decl name='_IO_save_end' type-id='type-id-118' visibility='default' filepath='/usr/include/libio.h' line='288' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='768'>
        <!-- _IO_marker* _IO_FILE::_markers -->
        <var-decl name='_markers' type-id='type-id-1591' visibility='default' filepath='/usr/include/libio.h' line='290' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='832'>
        <!-- _IO_FILE* _IO_FILE::_chain -->
        <var-decl name='_chain' type-id='type-id-1592' visibility='default' filepath='/usr/include/libio.h' line='292' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='896'>
        <!-- int _IO_FILE::_fileno -->
        <var-decl name='_fileno' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='294' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='928'>
        <!-- int _IO_FILE::_flags2 -->
        <var-decl name='_flags2' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='298' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='960'>
        <!-- __off_t _IO_FILE::_old_offset -->
        <var-decl name='_old_offset' type-id='type-id-301' visibility='default' filepath='/usr/include/libio.h' line='300' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1024'>
        <!-- unsigned short int _IO_FILE::_cur_column -->
        <var-decl name='_cur_column' type-id='type-id-14' visibility='default' filepath='/usr/include/libio.h' line='304' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1040'>
        <!-- signed char _IO_FILE::_vtable_offset -->
        <var-decl name='_vtable_offset' type-id='type-id-1565' visibility='default' filepath='/usr/include/libio.h' line='305' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1048'>
        <!-- char _IO_FILE::_shortbuf[1] -->
        <var-decl name='_shortbuf' type-id='type-id-1554' visibility='default' filepath='/usr/include/libio.h' line='306' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1088'>
        <!-- _IO_lock_t* _IO_FILE::_lock -->
        <var-decl name='_lock' type-id='type-id-1593' visibility='default' filepath='/usr/include/libio.h' line='310' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1152'>
        <!-- __off64_t _IO_FILE::_offset -->
        <var-decl name='_offset' type-id='type-id-1226' visibility='default' filepath='/usr/include/libio.h' line='319' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1216'>
        <!-- void* _IO_FILE::__pad1 -->
        <var-decl name='__pad1' type-id='type-id-58' visibility='default' filepath='/usr/include/libio.h' line='328' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1280'>
        <!-- void* _IO_FILE::__pad2 -->
        <var-decl name='__pad2' type-id='type-id-58' visibility='default' filepath='/usr/include/libio.h' line='329' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1344'>
        <!-- void* _IO_FILE::__pad3 -->
        <var-decl name='__pad3' type-id='type-id-58' visibility='default' filepath='/usr/include/libio.h' line='330' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1408'>
        <!-- void* _IO_FILE::__pad4 -->
        <var-decl name='__pad4' type-id='type-id-58' visibility='default' filepath='/usr/include/libio.h' line='331' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1472'>
        <!-- size_t _IO_FILE::__pad5 -->
        <var-decl name='__pad5' type-id='type-id-62' visibility='default' filepath='/usr/include/libio.h' line='332' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1536'>
        <!-- int _IO_FILE::_mode -->
        <var-decl name='_mode' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='334' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='1568'>
        <!-- char _IO_FILE::_unused2[20] -->
        <var-decl name='_unused2' type-id='type-id-1556' visibility='default' filepath='/usr/include/libio.h' line='336' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct _IO_marker -->
    <class-decl name='_IO_marker' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/include/libio.h' line='186' column='1' id='type-id-1594'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- _IO_marker* _IO_marker::_next -->
        <var-decl name='_next' type-id='type-id-1591' visibility='default' filepath='/usr/include/libio.h' line='187' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- _IO_FILE* _IO_marker::_sbuf -->
        <var-decl name='_sbuf' type-id='type-id-1592' visibility='default' filepath='/usr/include/libio.h' line='188' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int _IO_marker::_pos -->
        <var-decl name='_pos' type-id='type-id-1' visibility='default' filepath='/usr/include/libio.h' line='192' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef long int __off_t -->
    <typedef-decl name='__off_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='141' column='1' id='type-id-301'/>
    <!-- class PackedCache<35, long unsigned int> -->
    <class-decl name='PackedCache&lt;35, long unsigned int&gt;' size-in-bits='4194304' visibility='default' filepath='src/packed-cache-inl.h' line='135' column='1' id='type-id-1595'>
      <data-member access='private' static='yes'>
        <!-- static const int PackedCache<35, long unsigned int>::kHashbits -->
        <var-decl name='kHashbits' type-id='type-id-144' visibility='default' filepath='src/packed-cache-inl.h' line='143' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int PackedCache<35, long unsigned int>::kValuebits -->
        <var-decl name='kValuebits' type-id='type-id-144' visibility='default' filepath='src/packed-cache-inl.h' line='145' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const bool PackedCache<35, long unsigned int>::kUseWholeKeys -->
        <var-decl name='kUseWholeKeys' type-id='type-id-487' visibility='default' filepath='src/packed-cache-inl.h' line='146' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int PackedCache<35, long unsigned int>::kTbits -->
        <var-decl name='kTbits' type-id='type-id-144' visibility='default' filepath='src/packed-cache-inl.h' line='220' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const int PackedCache<35, long unsigned int>::kUpperbits -->
        <var-decl name='kUpperbits' type-id='type-id-144' visibility='default' filepath='src/packed-cache-inl.h' line='221' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const uintptr_t PackedCache<35, long unsigned int>::kKeyMask -->
        <var-decl name='kKeyMask' type-id='type-id-259' visibility='default' filepath='src/packed-cache-inl.h' line='224' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const unsigned long int PackedCache<35, long unsigned int>::kUpperMask -->
        <var-decl name='kUpperMask' type-id='type-id-708' visibility='default' filepath='src/packed-cache-inl.h' line='227' column='1'/>
      </data-member>
      <data-member access='private' static='yes'>
        <!-- static const size_t PackedCache<35, long unsigned int>::kValueMask -->
        <var-decl name='kValueMask' type-id='type-id-117' visibility='default' filepath='src/packed-cache-inl.h' line='230' column='1'/>
      </data-member>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- volatile unsigned long int PackedCache<35, long unsigned int>::array_[65536] -->
        <var-decl name='array_' type-id='type-id-1581' visibility='default' filepath='src/packed-cache-inl.h' line='234' column='1'/>
      </data-member>
      <member-function access='private'>
        <!-- void PackedCache<35, long unsigned int>::PackedCache(unsigned long int) -->
        <function-decl name='PackedCache' filepath='src/packed-cache-inl.h' line='148' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'PackedCache<35, long unsigned int>*' -->
          <parameter type-id='type-id-1596' is-artificial='yes'/>
          <!-- parameter of type 'unsigned long int' -->
          <parameter type-id='type-id-5'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef void _IO_lock_t -->
    <typedef-decl name='_IO_lock_t' type-id='type-id-60' filepath='/usr/include/libio.h' line='180' column='1' id='type-id-1597'/>
    <!-- typedef long int __off64_t -->
    <typedef-decl name='__off64_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='142' column='1' id='type-id-1226'/>
    <!-- typedef __mbstate_t mbstate_t -->
    <typedef-decl name='mbstate_t' type-id='type-id-1598' filepath='/usr/include/wchar.h' line='106' column='1' id='type-id-1599'/>
    <!-- struct __mbstate_t -->
    <class-decl name='__mbstate_t' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/include/wchar.h' line='84' column='1' id='type-id-1598'>
      <member-type access='public'>
        <!-- union {unsigned int __wch; char __wchb[4];} -->
        <union-decl name='__anonymous_union__' size-in-bits='32' is-anonymous='yes' visibility='default' filepath='/usr/include/wchar.h' line='87' column='1' id='type-id-1600'>
          <data-member access='public'>
            <!-- unsigned int __wch -->
            <var-decl name='__wch' type-id='type-id-64' visibility='default' filepath='/usr/include/wchar.h' line='89' column='1'/>
          </data-member>
          <data-member access='public'>
            <!-- char __wchb[4] -->
            <var-decl name='__wchb' type-id='type-id-1557' visibility='default' filepath='/usr/include/wchar.h' line='93' column='1'/>
          </data-member>
        </union-decl>
      </member-type>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int __mbstate_t::__count -->
        <var-decl name='__count' type-id='type-id-1' visibility='default' filepath='/usr/include/wchar.h' line='85' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- union {unsigned int __wch; char __wchb[4];} __mbstate_t::__value -->
        <var-decl name='__value' type-id='type-id-1600' visibility='default' filepath='/usr/include/wchar.h' line='94' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct tm -->
    <class-decl name='tm' size-in-bits='448' is-struct='yes' visibility='default' filepath='/usr/include/time.h' line='134' column='1' id='type-id-1601'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int tm::tm_sec -->
        <var-decl name='tm_sec' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='135' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int tm::tm_min -->
        <var-decl name='tm_min' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='136' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int tm::tm_hour -->
        <var-decl name='tm_hour' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='137' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- int tm::tm_mday -->
        <var-decl name='tm_mday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='138' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int tm::tm_mon -->
        <var-decl name='tm_mon' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='139' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- int tm::tm_year -->
        <var-decl name='tm_year' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='140' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- int tm::tm_wday -->
        <var-decl name='tm_wday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='141' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='224'>
        <!-- int tm::tm_yday -->
        <var-decl name='tm_yday' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='142' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int tm::tm_isdst -->
        <var-decl name='tm_isdst' type-id='type-id-1' visibility='default' filepath='/usr/include/time.h' line='143' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- long int tm::tm_gmtoff -->
        <var-decl name='tm_gmtoff' type-id='type-id-85' visibility='default' filepath='/usr/include/time.h' line='146' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- const char* tm::tm_zone -->
        <var-decl name='tm_zone' type-id='type-id-57' visibility='default' filepath='/usr/include/time.h' line='147' column='1'/>
      </data-member>
    </class-decl>
    <!-- struct lconv -->
    <class-decl name='lconv' size-in-bits='768' is-struct='yes' visibility='default' filepath='/usr/include/locale.h' line='55' column='1' id='type-id-1602'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- char* lconv::decimal_point -->
        <var-decl name='decimal_point' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='58' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- char* lconv::thousands_sep -->
        <var-decl name='thousands_sep' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='59' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- char* lconv::grouping -->
        <var-decl name='grouping' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='65' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- char* lconv::int_curr_symbol -->
        <var-decl name='int_curr_symbol' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='71' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- char* lconv::currency_symbol -->
        <var-decl name='currency_symbol' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='72' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='320'>
        <!-- char* lconv::mon_decimal_point -->
        <var-decl name='mon_decimal_point' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='73' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='384'>
        <!-- char* lconv::mon_thousands_sep -->
        <var-decl name='mon_thousands_sep' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='74' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='448'>
        <!-- char* lconv::mon_grouping -->
        <var-decl name='mon_grouping' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='75' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='512'>
        <!-- char* lconv::positive_sign -->
        <var-decl name='positive_sign' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='76' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='576'>
        <!-- char* lconv::negative_sign -->
        <var-decl name='negative_sign' type-id='type-id-118' visibility='default' filepath='/usr/include/locale.h' line='77' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='640'>
        <!-- char lconv::int_frac_digits -->
        <var-decl name='int_frac_digits' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='78' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='648'>
        <!-- char lconv::frac_digits -->
        <var-decl name='frac_digits' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='79' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='656'>
        <!-- char lconv::p_cs_precedes -->
        <var-decl name='p_cs_precedes' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='81' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='664'>
        <!-- char lconv::p_sep_by_space -->
        <var-decl name='p_sep_by_space' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='83' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='672'>
        <!-- char lconv::n_cs_precedes -->
        <var-decl name='n_cs_precedes' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='85' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='680'>
        <!-- char lconv::n_sep_by_space -->
        <var-decl name='n_sep_by_space' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='87' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='688'>
        <!-- char lconv::p_sign_posn -->
        <var-decl name='p_sign_posn' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='94' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='696'>
        <!-- char lconv::n_sign_posn -->
        <var-decl name='n_sign_posn' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='704'>
        <!-- char lconv::int_p_cs_precedes -->
        <var-decl name='int_p_cs_precedes' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='712'>
        <!-- char lconv::int_p_sep_by_space -->
        <var-decl name='int_p_sep_by_space' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='720'>
        <!-- char lconv::int_n_cs_precedes -->
        <var-decl name='int_n_cs_precedes' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='102' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='728'>
        <!-- char lconv::int_n_sep_by_space -->
        <var-decl name='int_n_sep_by_space' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='104' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='736'>
        <!-- char lconv::int_p_sign_posn -->
        <var-decl name='int_p_sign_posn' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='111' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='744'>
        <!-- char lconv::int_n_sign_posn -->
        <var-decl name='int_n_sign_posn' type-id='type-id-65' visibility='default' filepath='/usr/include/locale.h' line='112' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef int32_t Atomic32 -->
    <typedef-decl name='Atomic32' type-id='type-id-76' filepath='./src/base/atomicops-internals-x86.h' line='43' column='1' id='type-id-100'/>
    <!-- typedef int int32_t -->
    <typedef-decl name='int32_t' type-id='type-id-1' filepath='/usr/include/stdint.h' line='39' column='1' id='type-id-76'/>
    <!-- typedef long int int64_t -->
    <typedef-decl name='int64_t' type-id='type-id-85' filepath='/usr/include/stdint.h' line='41' column='1' id='type-id-103'/>
    <!-- typedef unsigned long int uint64_t -->
    <typedef-decl name='uint64_t' type-id='type-id-5' filepath='/usr/include/stdint.h' line='56' column='1' id='type-id-15'/>
    <!-- class MallocExtension -->
    <class-decl name='MallocExtension' size-in-bits='64' visibility='default' filepath='src/gperftools/malloc_extension.h' line='90' column='1' id='type-id-927'>
      <member-type access='private'>
        <!-- enum MallocExtension::Ownership -->
        <enum-decl name='Ownership' filepath='./src/gperftools/malloc_extension.h' line='315' column='1' id='type-id-959'>
          <underlying-type type-id='type-id-89'/>
          <enumerator name='kUnknownOwnership' value='0'/>
          <enumerator name='kOwned' value='1'/>
          <enumerator name='kNotOwned' value='2'/>
        </enum-decl>
      </member-type>
      <member-type access='private'>
        <!-- struct MallocExtension::FreeListInfo -->
        <class-decl name='FreeListInfo' size-in-bits='256' is-struct='yes' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='333' column='1' id='type-id-960'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- size_t MallocExtension::FreeListInfo::min_object_size -->
            <var-decl name='min_object_size' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='334' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- size_t MallocExtension::FreeListInfo::max_object_size -->
            <var-decl name='max_object_size' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='335' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='128'>
            <!-- size_t MallocExtension::FreeListInfo::total_bytes_free -->
            <var-decl name='total_bytes_free' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='336' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='192'>
            <!-- const char* MallocExtension::FreeListInfo::type -->
            <var-decl name='type' type-id='type-id-57' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='337' column='1'/>
          </data-member>
        </class-decl>
      </member-type>
      <member-type access='private'>
        <!-- typedef void (void*, const base::MallocRange*) MallocExtension::RangeFunction -->
        <typedef-decl name='RangeFunction' type-id='type-id-962' filepath='src/gperftools/malloc_extension.h' line='143' column='1' id='type-id-961'/>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- MallocExtension* MallocExtension::instance() -->
        <function-decl name='instance' mangled-name='_ZN15MallocExtension8instanceEv' filepath='src/malloc_extension.cc' line='212' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8instanceEv'>
          <!-- MallocExtension* -->
          <return type-id='type-id-296'/>
        </function-decl>
      </member-function>
      <member-function access='private'>
        <!-- void MallocExtension::Register() -->
        <function-decl name='Register' mangled-name='_ZN15MallocExtension8RegisterEPS_' filepath='src/malloc_extension.cc' line='217' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8RegisterEPS_'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocExtension::Initialize() -->
        <function-decl name='Initialize' mangled-name='_ZN15MallocExtension10InitializeEv' filepath='src/malloc_extension.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension10InitializeEv'>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- MallocExtension::~MallocExtension(int) -->
        <function-decl name='~MallocExtension' mangled-name='_ZN15MallocExtensionD1Ev' filepath='src/malloc_extension.cc' line='111' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtensionD1Ev'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- bool MallocExtension::VerifyAllMemory() -->
        <function-decl name='VerifyAllMemory' mangled-name='_ZN15MallocExtension15VerifyAllMemoryEv' filepath='src/malloc_extension.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyAllMemoryEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='3'>
        <!-- bool MallocExtension::VerifyNewMemory(void*) -->
        <function-decl name='VerifyNewMemory' mangled-name='_ZN15MallocExtension15VerifyNewMemoryEPKv' filepath='src/malloc_extension.cc' line='113' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15VerifyNewMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='4'>
        <!-- bool MallocExtension::VerifyArrayNewMemory(void*) -->
        <function-decl name='VerifyArrayNewMemory' mangled-name='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv' filepath='src/malloc_extension.cc' line='114' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20VerifyArrayNewMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='5'>
        <!-- bool MallocExtension::VerifyMallocMemory(void*) -->
        <function-decl name='VerifyMallocMemory' mangled-name='_ZN15MallocExtension18VerifyMallocMemoryEPKv' filepath='src/malloc_extension.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18VerifyMallocMemoryEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='6'>
        <!-- bool MallocExtension::MallocMemoryStats(int*, size_t*, int*) -->
        <function-decl name='MallocMemoryStats' mangled-name='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_' filepath='src/malloc_extension.cc' line='130' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17MallocMemoryStatsEPiPmS0_'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='7'>
        <!-- void MallocExtension::GetStats(char*, int) -->
        <function-decl name='GetStats' mangled-name='_ZN15MallocExtension8GetStatsEPci' filepath='src/malloc_extension.cc' line='125' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension8GetStatsEPci'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='8'>
        <!-- void MallocExtension::GetHeapSample(MallocExtensionWriter*) -->
        <function-decl name='GetHeapSample' mangled-name='_ZN15MallocExtension13GetHeapSampleEPSs' filepath='src/malloc_extension.cc' line='292' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension13GetHeapSampleEPSs'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-964'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='9'>
        <!-- void MallocExtension::GetHeapGrowthStacks(MallocExtensionWriter*) -->
        <function-decl name='GetHeapGrowthStacks' mangled-name='_ZN15MallocExtension19GetHeapGrowthStacksEPSs' filepath='src/malloc_extension.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension19GetHeapGrowthStacksEPSs'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-964'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='10'>
        <!-- void MallocExtension::Ranges(void*, MallocExtension::RangeFunction*) -->
        <function-decl name='Ranges' mangled-name='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE' filepath='src/malloc_extension.cc' line='340' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension6RangesEPvPFvS0_PKN4base11MallocRangeEE'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'MallocExtension::RangeFunction*' -->
          <parameter type-id='type-id-965'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='11'>
        <!-- bool MallocExtension::GetNumericProperty(const char*, size_t*) -->
        <function-decl name='GetNumericProperty' mangled-name='_ZN15MallocExtension18GetNumericPropertyEPKcPm' filepath='src/malloc_extension.cc' line='117' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetNumericPropertyEPKcPm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='12'>
        <!-- bool MallocExtension::SetNumericProperty(const char*, size_t) -->
        <function-decl name='SetNumericProperty' mangled-name='_ZN15MallocExtension18SetNumericPropertyEPKcm' filepath='src/malloc_extension.cc' line='121' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetNumericPropertyEPKcm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='13'>
        <!-- void MallocExtension::MarkThreadIdle() -->
        <function-decl name='MarkThreadIdle' mangled-name='_ZN15MallocExtension14MarkThreadIdleEv' filepath='src/malloc_extension.cc' line='146' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadIdleEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='14'>
        <!-- void MallocExtension::MarkThreadBusy() -->
        <function-decl name='MarkThreadBusy' mangled-name='_ZN15MallocExtension14MarkThreadBusyEv' filepath='src/malloc_extension.cc' line='150' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension14MarkThreadBusyEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='15'>
        <!-- SysAllocator* MallocExtension::GetSystemAllocator() -->
        <function-decl name='GetSystemAllocator' mangled-name='_ZN15MallocExtension18GetSystemAllocatorEv' filepath='src/malloc_extension.cc' line='154' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18GetSystemAllocatorEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- SysAllocator* -->
          <return type-id='type-id-966'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='16'>
        <!-- void MallocExtension::SetSystemAllocator(SysAllocator*) -->
        <function-decl name='SetSystemAllocator' mangled-name='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator' filepath='src/malloc_extension.cc' line='158' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension18SetSystemAllocatorEP12SysAllocator'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='17'>
        <!-- void MallocExtension::ReleaseToSystem(size_t) -->
        <function-decl name='ReleaseToSystem' mangled-name='_ZN15MallocExtension15ReleaseToSystemEm' filepath='src/malloc_extension.cc' line='162' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReleaseToSystemEm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='18'>
        <!-- void MallocExtension::ReleaseFreeMemory() -->
        <function-decl name='ReleaseFreeMemory' mangled-name='_ZN15MallocExtension17ReleaseFreeMemoryEv' filepath='src/malloc_extension.cc' line='166' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension17ReleaseFreeMemoryEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='19'>
        <!-- void MallocExtension::SetMemoryReleaseRate(double) -->
        <function-decl name='SetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20SetMemoryReleaseRateEd' filepath='src/malloc_extension.cc' line='170' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20SetMemoryReleaseRateEd'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='20'>
        <!-- double MallocExtension::GetMemoryReleaseRate() -->
        <function-decl name='GetMemoryReleaseRate' mangled-name='_ZN15MallocExtension20GetMemoryReleaseRateEv' filepath='src/malloc_extension.cc' line='174' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension20GetMemoryReleaseRateEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='21'>
        <!-- size_t MallocExtension::GetEstimatedAllocatedSize(size_t) -->
        <function-decl name='GetEstimatedAllocatedSize' mangled-name='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm' filepath='src/malloc_extension.cc' line='178' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25GetEstimatedAllocatedSizeEm'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='22'>
        <!-- size_t MallocExtension::GetAllocatedSize(void*) -->
        <function-decl name='GetAllocatedSize' mangled-name='_ZN15MallocExtension16GetAllocatedSizeEPKv' filepath='src/malloc_extension.cc' line='182' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetAllocatedSizeEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='23'>
        <!-- MallocExtension::Ownership MallocExtension::GetOwnership(void*) -->
        <function-decl name='GetOwnership' mangled-name='_ZN15MallocExtension12GetOwnershipEPKv' filepath='src/malloc_extension.cc' line='187' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension12GetOwnershipEPKv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- enum MallocExtension::Ownership -->
          <return type-id='type-id-959'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='24'>
        <!-- void MallocExtension::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
        <function-decl name='GetFreeListSizes' mangled-name='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE' filepath='src/malloc_extension.cc' line='191' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension16GetFreeListSizesEPSt6vectorINS_12FreeListInfoESaIS1_EE'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
          <parameter type-id='type-id-967'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='25'>
        <!-- void** MallocExtension::ReadStackTraces(int*) -->
        <function-decl name='ReadStackTraces' mangled-name='_ZN15MallocExtension15ReadStackTracesEPi' filepath='src/malloc_extension.cc' line='138' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension15ReadStackTracesEPi'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='26'>
        <!-- void** MallocExtension::ReadHeapGrowthStackTraces() -->
        <function-decl name='ReadHeapGrowthStackTraces' mangled-name='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv' filepath='src/malloc_extension.cc' line='142' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN15MallocExtension25ReadHeapGrowthStackTracesEv'>
          <!-- implicit parameter of type 'MallocExtension*' -->
          <parameter type-id='type-id-296' is-artificial='yes'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef uintptr_t Length -->
    <typedef-decl name='Length' type-id='type-id-156' filepath='src/common.h' line='59' column='1' id='type-id-154'/>
    <!-- typedef unsigned long int uintptr_t -->
    <typedef-decl name='uintptr_t' type-id='type-id-5' filepath='/usr/include/stdint.h' line='123' column='1' id='type-id-156'/>
    <!-- class SysAllocator -->
    <class-decl name='SysAllocator' size-in-bits='64' visibility='default' filepath='src/gperftools/malloc_extension.h' line='75' column='1' id='type-id-997'>
      <member-function access='private' constructor='yes'>
        <!-- SysAllocator::SysAllocator() -->
        <function-decl name='SysAllocator' filepath='./src/gperftools/malloc_extension.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes' vtable-offset='-1'>
        <!-- SysAllocator::~SysAllocator(int) -->
        <function-decl name='~SysAllocator' mangled-name='_ZN12SysAllocatorD1Ev' filepath='src/malloc_extension.cc' line='108' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN12SysAllocatorD1Ev'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='2'>
        <!-- void* SysAllocator::Alloc(size_t, size_t*, size_t) -->
        <function-decl name='Alloc' mangled-name='_ZN12SysAllocator5AllocEmPmm' filepath='src/gperftools/malloc_extension.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef uint64_t uint64 -->
    <typedef-decl name='uint64' type-id='type-id-15' filepath='src/base/basictypes.h' line='72' column='1' id='type-id-101'/>
    <!-- typedef int64_t int64 -->
    <typedef-decl name='int64' type-id='type-id-103' filepath='src/base/basictypes.h' line='61' column='1' id='type-id-98'/>
    <!-- typedef int32_t int32 -->
    <typedef-decl name='int32' type-id='type-id-76' filepath='src/base/basictypes.h' line='60' column='1' id='type-id-74'/>
    <!-- typedef uintptr_t PageID -->
    <typedef-decl name='PageID' type-id='type-id-156' filepath='src/common.h' line='56' column='1' id='type-id-153'/>
    <!-- typedef unsigned int uint32_t -->
    <typedef-decl name='uint32_t' type-id='type-id-64' filepath='/usr/include/stdint.h' line='52' column='1' id='type-id-12'/>
    <!-- class SpinLockHolder -->
    <class-decl name='SpinLockHolder' size-in-bits='64' visibility='default' filepath='src/base/spinlock.h' line='130' column='1' id='type-id-1603'>
      <data-member access='private' layout-offset-in-bits='0'>
        <!-- SpinLock* SpinLockHolder::lock_ -->
        <var-decl name='lock_' type-id='type-id-94' visibility='default' filepath='src/base/spinlock.h' line='132' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- SpinLockHolder::SpinLockHolder(SpinLock*) -->
        <function-decl name='SpinLockHolder' mangled-name='_ZN14SpinLockHolderC2EP8SpinLock' filepath='src/base/spinlock.h' line='134' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderC2EP8SpinLock'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1604' is-artificial='yes'/>
          <!-- parameter of type 'SpinLock*' -->
          <parameter type-id='type-id-94'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- SpinLockHolder::~SpinLockHolder(int) -->
        <function-decl name='~SpinLockHolder' mangled-name='_ZN14SpinLockHolderD1Ev' filepath='src/base/spinlock.h' line='140' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN14SpinLockHolderD1Ev'>
          <!-- implicit parameter of type 'SpinLockHolder*' -->
          <parameter type-id='type-id-1604' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef unsigned int pthread_key_t -->
    <typedef-decl name='pthread_key_t' type-id='type-id-64' filepath='/usr/include/bits/pthreadtypes.h' line='140' column='1' id='type-id-1232'/>
    <!-- typedef __ssize_t ssize_t -->
    <typedef-decl name='ssize_t' type-id='type-id-947' filepath='/usr/include/stdio.h' line='103' column='1' id='type-id-291'/>
    <!-- typedef long int __ssize_t -->
    <typedef-decl name='__ssize_t' type-id='type-id-85' filepath='/usr/include/bits/types.h' line='180' column='1' id='type-id-947'/>
    <!-- class MallocHook -->
    <class-decl name='MallocHook' size-in-bits='8' visibility='default' filepath='./src/gperftools/malloc_hook.h' line='98' column='1' id='type-id-1605'>
      <member-type access='private'>
        <!-- typedef MallocHook_PreMmapHook MallocHook::PreMmapHook -->
        <typedef-decl name='PreMmapHook' type-id='type-id-1164' filepath='./src/gperftools/malloc_hook.h' line='126' column='1' id='type-id-1606'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MmapReplacement MallocHook::MmapReplacement -->
        <typedef-decl name='MmapReplacement' type-id='type-id-1166' filepath='./src/gperftools/malloc_hook.h' line='150' column='1' id='type-id-1607'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MunmapReplacement MallocHook::MunmapReplacement -->
        <typedef-decl name='MunmapReplacement' type-id='type-id-1168' filepath='./src/gperftools/malloc_hook.h' line='192' column='1' id='type-id-1608'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MunmapHook MallocHook::MunmapHook -->
        <typedef-decl name='MunmapHook' type-id='type-id-1169' filepath='./src/gperftools/malloc_hook.h' line='204' column='1' id='type-id-1609'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MremapHook MallocHook::MremapHook -->
        <typedef-decl name='MremapHook' type-id='type-id-1171' filepath='./src/gperftools/malloc_hook.h' line='214' column='1' id='type-id-1610'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_PreSbrkHook MallocHook::PreSbrkHook -->
        <typedef-decl name='PreSbrkHook' type-id='type-id-1173' filepath='./src/gperftools/malloc_hook.h' line='234' column='1' id='type-id-1611'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_NewHook MallocHook::NewHook -->
        <typedef-decl name='NewHook' type-id='type-id-338' filepath='./src/gperftools/malloc_hook.h' line='102' column='1' id='type-id-1612'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_DeleteHook MallocHook::DeleteHook -->
        <typedef-decl name='DeleteHook' type-id='type-id-339' filepath='./src/gperftools/malloc_hook.h' line='113' column='1' id='type-id-1613'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_MmapHook MallocHook::MmapHook -->
        <typedef-decl name='MmapHook' type-id='type-id-341' filepath='./src/gperftools/malloc_hook.h' line='168' column='1' id='type-id-1614'/>
      </member-type>
      <member-type access='private'>
        <!-- typedef MallocHook_SbrkHook MallocHook::SbrkHook -->
        <typedef-decl name='SbrkHook' type-id='type-id-343' filepath='./src/gperftools/malloc_hook.h' line='247' column='1' id='type-id-1615'/>
      </member-type>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeDeleteHookSlow() -->
        <function-decl name='InvokeDeleteHookSlow' mangled-name='_ZN10MallocHook20InvokeDeleteHookSlowEPKv' filepath='src/malloc_hook.cc' line='497' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeDeleteHookSlowEPKv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokePreMmapHookSlow(size_t, int, int, int, off_t) -->
        <function-decl name='InvokePreMmapHookSlow' mangled-name='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil' filepath='src/malloc_hook.cc' line='501' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook21InvokePreMmapHookSlowEPKvmiiil'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-207'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMmapHookSlow(void*, size_t, int, int, int, off_t) -->
        <function-decl name='InvokeMmapHookSlow' mangled-name='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil' filepath='src/malloc_hook.cc' line='511' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook18InvokeMmapHookSlowEPKvS1_miiil'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-207'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MallocHook::InvokeMmapReplacementSlow(size_t, int, int, int, off_t, void**) -->
        <function-decl name='InvokeMmapReplacementSlow' mangled-name='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv' filepath='src/malloc_hook.cc' line='522' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook25InvokeMmapReplacementSlowEPKvmiiilPPv'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-207'/>
          <!-- parameter of type 'void**' -->
          <parameter type-id='type-id-151'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- bool MallocHook::InvokeMunmapReplacementSlow(size_t, int*) -->
        <function-decl name='InvokeMunmapReplacementSlow' mangled-name='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi' filepath='src/malloc_hook.cc' line='537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook27InvokeMunmapReplacementSlowEPKvmPi'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMremapHookSlow(void*, size_t, size_t, int, void*) -->
        <function-decl name='InvokeMremapHookSlow' mangled-name='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_' filepath='src/malloc_hook.cc' line='543' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeMremapHookSlowEPKvS1_mmiS1_'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokePreSbrkHookSlow() -->
        <function-decl name='InvokePreSbrkHookSlow' mangled-name='_ZN10MallocHook21InvokePreSbrkHookSlowEl' filepath='src/malloc_hook.cc' line='553' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook21InvokePreSbrkHookSlowEl'>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-208'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeSbrkHookSlow(ptrdiff_t) -->
        <function-decl name='InvokeSbrkHookSlow' mangled-name='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl' filepath='src/malloc_hook.cc' line='557' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook18InvokeSbrkHookSlowEPKvl'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef ptrdiff_t' -->
          <parameter type-id='type-id-208'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeMunmapHookSlow(size_t) -->
        <function-decl name='InvokeMunmapHookSlow' mangled-name='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm' filepath='src/malloc_hook.cc' line='533' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook20InvokeMunmapHookSlowEPKvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void MallocHook::InvokeNewHookSlow(size_t) -->
        <function-decl name='InvokeNewHookSlow' mangled-name='_ZN10MallocHook17InvokeNewHookSlowEPKvm' filepath='src/malloc_hook.cc' line='493' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook17InvokeNewHookSlowEPKvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- int MallocHook::UnhookedMUnmap(size_t) -->
        <function-decl name='UnhookedMUnmap' mangled-name='_ZN10MallocHook14UnhookedMUnmapEPvm' filepath='src/malloc_hook_mmap_linux.h' line='228' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook14UnhookedMUnmapEPvm'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- int -->
          <return type-id='type-id-1'/>
        </function-decl>
      </member-function>
      <member-function access='private' static='yes'>
        <!-- void* MallocHook::UnhookedMMap(size_t, int, int, int, off_t) -->
        <function-decl name='UnhookedMMap' mangled-name='_ZN10MallocHook12UnhookedMMapEPvmiiil' filepath='src/malloc_hook_mmap_linux.h' line='218' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN10MallocHook12UnhookedMMapEPvmiiil'>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- parameter of type 'typedef off_t' -->
          <parameter type-id='type-id-207'/>
          <!-- void* -->
          <return type-id='type-id-58'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef unsigned long int pthread_t -->
    <typedef-decl name='pthread_t' type-id='type-id-5' filepath='/usr/include/bits/pthreadtypes.h' line='50' column='1' id='type-id-195'/>
    <!-- struct TCMallocStats -->
    <class-decl name='TCMallocStats' size-in-bits='512' is-struct='yes' visibility='default' filepath='src/tcmalloc.cc' line='295' column='1' id='type-id-1616'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- uint64_t TCMallocStats::thread_bytes -->
        <var-decl name='thread_bytes' type-id='type-id-15' visibility='default' filepath='src/tcmalloc.cc' line='296' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- uint64_t TCMallocStats::central_bytes -->
        <var-decl name='central_bytes' type-id='type-id-15' visibility='default' filepath='src/tcmalloc.cc' line='297' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- uint64_t TCMallocStats::transfer_bytes -->
        <var-decl name='transfer_bytes' type-id='type-id-15' visibility='default' filepath='src/tcmalloc.cc' line='298' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- uint64_t TCMallocStats::metadata_bytes -->
        <var-decl name='metadata_bytes' type-id='type-id-15' visibility='default' filepath='src/tcmalloc.cc' line='299' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- tcmalloc::PageHeap::Stats TCMallocStats::pageheap -->
        <var-decl name='pageheap' type-id='type-id-1617' visibility='default' filepath='src/tcmalloc.cc' line='300' column='1'/>
      </data-member>
    </class-decl>
    <!-- typedef intptr_t AtomicWord -->
    <typedef-decl name='AtomicWord' type-id='type-id-82' filepath='./src/base/atomicops.h' line='129' column='1' id='type-id-922'/>
    <!-- typedef long int intptr_t -->
    <typedef-decl name='intptr_t' type-id='type-id-85' filepath='/usr/include/stdint.h' line='120' column='1' id='type-id-82'/>
    <!-- class TCMallocImplementation -->
    <class-decl name='TCMallocImplementation' size-in-bits='128' visibility='default' filepath='src/tcmalloc.cc' line='562' column='1' id='type-id-1618'>
      <!-- class MallocExtension -->
      <base-class access='public' layout-offset-in-bits='0' type-id='type-id-927'/>
      <member-type access='private'>
        <!-- typedef void (void*, const base::MallocRange*) TCMallocImplementation::RangeFunction -->
        <typedef-decl name='RangeFunction' type-id='type-id-962' filepath='./src/gperftools/malloc_extension.h' line='143' column='1' id='type-id-1619'/>
      </member-type>
      <data-member access='private' layout-offset-in-bits='64'>
        <!-- size_t TCMallocImplementation::extra_bytes_released_ -->
        <var-decl name='extra_bytes_released_' type-id='type-id-62' visibility='default' filepath='src/tcmalloc.cc' line='570' column='1'/>
      </data-member>
      <member-function access='private' constructor='yes'>
        <!-- TCMallocImplementation::TCMallocImplementation() -->
        <function-decl name='TCMallocImplementation' filepath='src/tcmalloc.cc' line='573' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='7'>
        <!-- void TCMallocImplementation::GetStats(char*, int) -->
        <function-decl name='GetStats' mangled-name='_ZN22TCMallocImplementation8GetStatsEPci' filepath='src/tcmalloc.cc' line='577' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation8GetStatsEPci'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'char*' -->
          <parameter type-id='type-id-118'/>
          <!-- parameter of type 'int' -->
          <parameter type-id='type-id-1'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='8'>
        <!-- void TCMallocImplementation::GetHeapSample(MallocExtensionWriter*) -->
        <function-decl name='GetHeapSample' mangled-name='_ZN22TCMallocImplementation13GetHeapSampleEPSs' filepath='src/tcmalloc.cc' line='590' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation13GetHeapSampleEPSs'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'MallocExtensionWriter*' -->
          <parameter type-id='type-id-964'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='10'>
        <!-- void TCMallocImplementation::Ranges(void*, TCMallocImplementation::RangeFunction*) -->
        <function-decl name='Ranges' mangled-name='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE' filepath='src/tcmalloc.cc' line='622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation6RangesEPvPFvS0_PKN4base11MallocRangeEE'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- parameter of type 'TCMallocImplementation::RangeFunction*' -->
          <parameter type-id='type-id-1621'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='11'>
        <!-- bool TCMallocImplementation::GetNumericProperty(const char*, size_t*) -->
        <function-decl name='GetNumericProperty' mangled-name='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm' filepath='src/tcmalloc.cc' line='626' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18GetNumericPropertyEPKcPm'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'size_t*' -->
          <parameter type-id='type-id-253'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='12'>
        <!-- bool TCMallocImplementation::SetNumericProperty(const char*, size_t) -->
        <function-decl name='SetNumericProperty' mangled-name='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm' filepath='src/tcmalloc.cc' line='711' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18SetNumericPropertyEPKcm'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- bool -->
          <return type-id='type-id-61'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='13'>
        <!-- void TCMallocImplementation::MarkThreadIdle() -->
        <function-decl name='MarkThreadIdle' mangled-name='_ZN22TCMallocImplementation14MarkThreadIdleEv' filepath='src/tcmalloc.cc' line='728' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation14MarkThreadIdleEv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='14'>
        <!-- void TCMallocImplementation::MarkThreadBusy() -->
        <function-decl name='MarkThreadBusy' mangled-name='_ZN22TCMallocImplementation14MarkThreadBusyEv' filepath='src/tcmalloc.cc' line='1537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation14MarkThreadBusyEv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='15'>
        <!-- SysAllocator* TCMallocImplementation::GetSystemAllocator() -->
        <function-decl name='GetSystemAllocator' mangled-name='_ZN22TCMallocImplementation18GetSystemAllocatorEv' filepath='src/tcmalloc.cc' line='734' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18GetSystemAllocatorEv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- SysAllocator* -->
          <return type-id='type-id-966'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='16'>
        <!-- void TCMallocImplementation::SetSystemAllocator(SysAllocator*) -->
        <function-decl name='SetSystemAllocator' mangled-name='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator' filepath='src/tcmalloc.cc' line='739' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation18SetSystemAllocatorEP12SysAllocator'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'SysAllocator*' -->
          <parameter type-id='type-id-966'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='17'>
        <!-- void TCMallocImplementation::ReleaseToSystem(size_t) -->
        <function-decl name='ReleaseToSystem' mangled-name='_ZN22TCMallocImplementation15ReleaseToSystemEm' filepath='src/tcmalloc.cc' line='744' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation15ReleaseToSystemEm'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='19'>
        <!-- void TCMallocImplementation::SetMemoryReleaseRate(double) -->
        <function-decl name='SetMemoryReleaseRate' mangled-name='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd' filepath='src/tcmalloc.cc' line='769' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation20SetMemoryReleaseRateEd'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'double' -->
          <parameter type-id='type-id-2'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='20'>
        <!-- double TCMallocImplementation::GetMemoryReleaseRate() -->
        <function-decl name='GetMemoryReleaseRate' mangled-name='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv' filepath='src/tcmalloc.cc' line='773' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation20GetMemoryReleaseRateEv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- double -->
          <return type-id='type-id-2'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='21'>
        <!-- size_t TCMallocImplementation::GetEstimatedAllocatedSize(size_t) -->
        <function-decl name='GetEstimatedAllocatedSize' mangled-name='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm' filepath='src/tcmalloc.cc' line='776' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation25GetEstimatedAllocatedSizeEm'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'typedef size_t' -->
          <parameter type-id='type-id-62'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='22'>
        <!-- size_t TCMallocImplementation::GetAllocatedSize(void*) -->
        <function-decl name='GetAllocatedSize' mangled-name='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv' filepath='src/tcmalloc.cc' line='1529' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation16GetAllocatedSizeEPKv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- typedef size_t -->
          <return type-id='type-id-62'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='23'>
        <!-- MallocExtension::Ownership TCMallocImplementation::GetOwnership(void*) -->
        <function-decl name='GetOwnership' mangled-name='_ZN22TCMallocImplementation12GetOwnershipEPKv' filepath='src/tcmalloc.cc' line='794' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation12GetOwnershipEPKv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'void*' -->
          <parameter type-id='type-id-58'/>
          <!-- enum MallocExtension::Ownership -->
          <return type-id='type-id-959'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='24'>
        <!-- void TCMallocImplementation::GetFreeListSizes(std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*) -->
        <function-decl name='GetFreeListSizes' mangled-name='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE' filepath='src/tcmalloc.cc' line='810' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation16GetFreeListSizesEPSt6vectorIN15MallocExtension12FreeListInfoESaIS2_EE'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
          <parameter type-id='type-id-967'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='25'>
        <!-- void** TCMallocImplementation::ReadStackTraces(int*) -->
        <function-decl name='ReadStackTraces' mangled-name='_ZN22TCMallocImplementation15ReadStackTracesEPi' filepath='src/tcmalloc.cc' line='605' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation15ReadStackTracesEPi'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- parameter of type 'int*' -->
          <parameter type-id='type-id-963'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
      <member-function access='private' vtable-offset='26'>
        <!-- void** TCMallocImplementation::ReadHeapGrowthStackTraces() -->
        <function-decl name='ReadHeapGrowthStackTraces' mangled-name='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv' filepath='src/tcmalloc.cc' line='618' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN22TCMallocImplementation25ReadHeapGrowthStackTracesEv'>
          <!-- implicit parameter of type 'TCMallocImplementation*' -->
          <parameter type-id='type-id-1620' is-artificial='yes'/>
          <!-- void** -->
          <return type-id='type-id-151'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- typedef std::string MallocExtensionWriter -->
    <typedef-decl name='MallocExtensionWriter' type-id='type-id-924' filepath='./src/gperftools/malloc_extension.h' line='68' column='1' id='type-id-996'/>
    <!-- class TCMallocGuard -->
    <class-decl name='TCMallocGuard' size-in-bits='8' visibility='default' filepath='src/tcmalloc_guard.h' line='43' column='1' id='type-id-1622'>
      <member-function access='private' constructor='yes'>
        <!-- TCMallocGuard::TCMallocGuard() -->
        <function-decl name='TCMallocGuard' mangled-name='_ZN13TCMallocGuardC1Ev' filepath='src/tcmalloc_guard.h' line='45' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13TCMallocGuardC1Ev'>
          <!-- implicit parameter of type 'TCMallocGuard*' -->
          <parameter type-id='type-id-1623' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
      <member-function access='private' destructor='yes'>
        <!-- TCMallocGuard::~TCMallocGuard(int) -->
        <function-decl name='~TCMallocGuard' mangled-name='_ZN13TCMallocGuardD1Ev' filepath='src/tcmalloc_guard.h' line='46' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN13TCMallocGuardD1Ev'>
          <!-- implicit parameter of type 'TCMallocGuard*' -->
          <parameter type-id='type-id-1623' is-artificial='yes'/>
          <!-- artificial parameter of type 'int' -->
          <parameter type-id='type-id-1' is-artificial='yes'/>
          <!-- void -->
          <return type-id='type-id-60'/>
        </function-decl>
      </member-function>
    </class-decl>
    <!-- struct mallinfo -->
    <class-decl name='mallinfo' size-in-bits='320' is-struct='yes' visibility='default' filepath='/usr/include/malloc.h' line='94' column='1' id='type-id-1624'>
      <data-member access='public' layout-offset-in-bits='0'>
        <!-- int mallinfo::arena -->
        <var-decl name='arena' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='95' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='32'>
        <!-- int mallinfo::ordblks -->
        <var-decl name='ordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='96' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='64'>
        <!-- int mallinfo::smblks -->
        <var-decl name='smblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='97' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='96'>
        <!-- int mallinfo::hblks -->
        <var-decl name='hblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='98' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='128'>
        <!-- int mallinfo::hblkhd -->
        <var-decl name='hblkhd' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='99' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='160'>
        <!-- int mallinfo::usmblks -->
        <var-decl name='usmblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='100' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='192'>
        <!-- int mallinfo::fsmblks -->
        <var-decl name='fsmblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='101' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='224'>
        <!-- int mallinfo::uordblks -->
        <var-decl name='uordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='102' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='256'>
        <!-- int mallinfo::fordblks -->
        <var-decl name='fordblks' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='103' column='1'/>
      </data-member>
      <data-member access='public' layout-offset-in-bits='288'>
        <!-- int mallinfo::keepcost -->
        <var-decl name='keepcost' type-id='type-id-1' visibility='default' filepath='/usr/include/malloc.h' line='104' column='1'/>
      </data-member>
    </class-decl>
    <!-- Atomic32* -->
    <pointer-type-def type-id='type-id-100' size-in-bits='64' id='type-id-99'/>
    <!-- MallocExtension::FreeListInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-960' size-in-bits='64' id='type-id-1625'/>
    <!-- MallocExtension::FreeListInfo* -->
    <pointer-type-def type-id='type-id-960' size-in-bits='64' id='type-id-1034'/>
    <!-- MallocExtension::FreeListInfo* const -->
    <qualified-type-def type-id='type-id-1034' const='yes' id='type-id-1048'/>
    <!-- MallocExtension::FreeListInfo* const& -->
    <reference-type-def kind='lvalue' type-id='type-id-1048' size-in-bits='64' id='type-id-1036'/>
    <!-- MallocExtensionWriter* -->
    <pointer-type-def type-id='type-id-996' size-in-bits='64' id='type-id-964'/>
    <!-- PackedCache<35, long unsigned int>* -->
    <pointer-type-def type-id='type-id-1595' size-in-bits='64' id='type-id-1596'/>
    <!-- PackedCache<35, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-1596' const='yes' id='type-id-1626'/>
    <!-- SpinLock* -->
    <pointer-type-def type-id='type-id-87' size-in-bits='64' id='type-id-94'/>
    <!-- SpinLock* const -->
    <qualified-type-def type-id='type-id-94' const='yes' id='type-id-97'/>
    <!-- SpinLockHolder* -->
    <pointer-type-def type-id='type-id-1603' size-in-bits='64' id='type-id-1604'/>
    <!-- SysAllocator* -->
    <pointer-type-def type-id='type-id-997' size-in-bits='64' id='type-id-966'/>
    <!-- TCMallocGuard* -->
    <pointer-type-def type-id='type-id-1622' size-in-bits='64' id='type-id-1623'/>
    <!-- TCMallocImplementation* -->
    <pointer-type-def type-id='type-id-1618' size-in-bits='64' id='type-id-1620'/>
    <!-- TCMallocImplementation::RangeFunction* -->
    <pointer-type-def type-id='type-id-1619' size-in-bits='64' id='type-id-1621'/>
    <!-- TCMalloc_PageMap3<35>* -->
    <pointer-type-def type-id='type-id-1282' size-in-bits='64' id='type-id-1280'/>
    <!-- TCMalloc_PageMap3<35>::Node* -->
    <pointer-type-def type-id='type-id-1283' size-in-bits='64' id='type-id-1285'/>
    <!-- TCMalloc_Printer* -->
    <pointer-type-def type-id='type-id-1155' size-in-bits='64' id='type-id-1143'/>
    <!-- _IO_FILE* -->
    <pointer-type-def type-id='type-id-1589' size-in-bits='64' id='type-id-1592'/>
    <!-- _IO_lock_t* -->
    <pointer-type-def type-id='type-id-1597' size-in-bits='64' id='type-id-1593'/>
    <!-- _IO_marker* -->
    <pointer-type-def type-id='type-id-1594' size-in-bits='64' id='type-id-1591'/>
    <!-- __FILE* -->
    <pointer-type-def type-id='type-id-1590' size-in-bits='64' id='type-id-1627'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1028' size-in-bits='64' id='type-id-1628'/>
    <!-- __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* -->
    <pointer-type-def type-id='type-id-1028' size-in-bits='64' id='type-id-1035'/>
    <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1049' size-in-bits='64' id='type-id-1056'/>
    <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* const -->
    <qualified-type-def type-id='type-id-1056' const='yes' id='type-id-1629'/>
    <!-- __gnu_cxx::new_allocator<char>* -->
    <pointer-type-def type-id='type-id-988' size-in-bits='64' id='type-id-999'/>
    <!-- base::MallocRange* -->
    <pointer-type-def type-id='type-id-1630' size-in-bits='64' id='type-id-1631'/>
    <!-- base::internal::HookList<void (*)(const void*)>* -->
    <pointer-type-def type-id='type-id-1223' size-in-bits='64' id='type-id-1180'/>
    <!-- base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-1222' size-in-bits='64' id='type-id-1187'/>
    <!-- char& -->
    <reference-type-def kind='lvalue' type-id='type-id-65' size-in-bits='64' id='type-id-1632'/>
    <!-- char* -->
    <pointer-type-def type-id='type-id-65' size-in-bits='64' id='type-id-118'/>
    <!-- char** -->
    <pointer-type-def type-id='type-id-118' size-in-bits='64' id='type-id-125'/>
    <!-- const MallocExtension::FreeListInfo -->
    <qualified-type-def type-id='type-id-960' const='yes' id='type-id-1043'/>
    <!-- const MallocExtension::FreeListInfo& -->
    <qualified-type-def type-id='type-id-1025' id='type-id-1029'/>
    <!-- const MallocExtension::FreeListInfo& -->
    <reference-type-def kind='lvalue' type-id='type-id-1043' size-in-bits='64' id='type-id-1025'/>
    <!-- const MallocExtension::FreeListInfo* -->
    <pointer-type-def type-id='type-id-1043' size-in-bits='64' id='type-id-1633'/>
    <!-- const PackedCache<35, long unsigned int> -->
    <qualified-type-def type-id='type-id-1595' const='yes' id='type-id-1634'/>
    <!-- const PackedCache<35, long unsigned int>* -->
    <pointer-type-def type-id='type-id-1634' size-in-bits='64' id='type-id-1635'/>
    <!-- const PackedCache<35, long unsigned int>* const -->
    <qualified-type-def type-id='type-id-1635' const='yes' id='type-id-1636'/>
    <!-- const SpinLock -->
    <qualified-type-def type-id='type-id-87' const='yes' id='type-id-102'/>
    <!-- const SpinLock& -->
    <reference-type-def kind='lvalue' type-id='type-id-102' size-in-bits='64' id='type-id-96'/>
    <!-- const SpinLock* -->
    <pointer-type-def type-id='type-id-102' size-in-bits='64' id='type-id-1249'/>
    <!-- const TCMalloc_PageMap3<35> -->
    <qualified-type-def type-id='type-id-1282' const='yes' id='type-id-1637'/>
    <!-- const TCMalloc_PageMap3<35>* -->
    <pointer-type-def type-id='type-id-1637' size-in-bits='64' id='type-id-1638'/>
    <!-- const TCMalloc_PageMap3<35>* const -->
    <qualified-type-def type-id='type-id-1638' const='yes' id='type-id-1639'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
    <qualified-type-def type-id='type-id-1028' const='yes' id='type-id-1640'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1640' size-in-bits='64' id='type-id-1641'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* -->
    <pointer-type-def type-id='type-id-1640' size-in-bits='64' id='type-id-1642'/>
    <!-- const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >* const -->
    <qualified-type-def type-id='type-id-1642' const='yes' id='type-id-1643'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1049' const='yes' id='type-id-1059'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1059' size-in-bits='64' id='type-id-1057'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1059' size-in-bits='64' id='type-id-1644'/>
    <!-- const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>* const -->
    <qualified-type-def type-id='type-id-1644' const='yes' id='type-id-1645'/>
    <!-- const __gnu_cxx::new_allocator<char> -->
    <qualified-type-def type-id='type-id-988' const='yes' id='type-id-1030'/>
    <!-- const __gnu_cxx::new_allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1030' size-in-bits='64' id='type-id-1000'/>
    <!-- const __gnu_cxx::new_allocator<char>* -->
    <pointer-type-def type-id='type-id-1030' size-in-bits='64' id='type-id-1646'/>
    <!-- const base::LinkerInitialized -->
    <qualified-type-def type-id='type-id-95' const='yes' id='type-id-92'/>
    <!-- const base::MallocRange -->
    <qualified-type-def type-id='type-id-1630' const='yes' id='type-id-1647'/>
    <!-- const base::MallocRange* -->
    <pointer-type-def type-id='type-id-1647' size-in-bits='64' id='type-id-1648'/>
    <!-- const base::internal::HookList<void (*)(const void*)> -->
    <qualified-type-def type-id='type-id-1223' const='yes' id='type-id-1649'/>
    <!-- const base::internal::HookList<void (*)(const void*)>* -->
    <pointer-type-def type-id='type-id-1649' size-in-bits='64' id='type-id-1650'/>
    <!-- const base::internal::HookList<void (*)(const void*)>* const -->
    <qualified-type-def type-id='type-id-1650' const='yes' id='type-id-1651'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)> -->
    <qualified-type-def type-id='type-id-1222' const='yes' id='type-id-1231'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* -->
    <pointer-type-def type-id='type-id-1231' size-in-bits='64' id='type-id-1230'/>
    <!-- const base::internal::HookList<void (*)(const void*, size_t)>* const -->
    <qualified-type-def type-id='type-id-1230' const='yes' id='type-id-1227'/>
    <!-- const bool -->
    <qualified-type-def type-id='type-id-61' const='yes' id='type-id-487'/>
    <!-- const char -->
    <qualified-type-def type-id='type-id-65' const='yes' id='type-id-63'/>
    <!-- const char& -->
    <reference-type-def kind='lvalue' type-id='type-id-63' size-in-bits='64' id='type-id-1652'/>
    <!-- const char* -->
    <pointer-type-def type-id='type-id-63' size-in-bits='64' id='type-id-57'/>
    <!-- const char** -->
    <pointer-type-def type-id='type-id-57' size-in-bits='64' id='type-id-1653'/>
    <!-- const double -->
    <qualified-type-def type-id='type-id-2' const='yes' id='type-id-1436'/>
    <!-- const double& -->
    <reference-type-def kind='lvalue' type-id='type-id-1436' size-in-bits='64' id='type-id-1434'/>
    <!-- const int -->
    <qualified-type-def type-id='type-id-1' const='yes' id='type-id-144'/>
    <!-- const mbstate_t -->
    <qualified-type-def type-id='type-id-1599' const='yes' id='type-id-1654'/>
    <!-- const mbstate_t* -->
    <pointer-type-def type-id='type-id-1654' size-in-bits='64' id='type-id-1655'/>
    <!-- const ptrdiff_t -->
    <qualified-type-def type-id='type-id-208' const='yes' id='type-id-944'/>
    <!-- const ptrdiff_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-944' size-in-bits='64' id='type-id-490'/>
    <!-- const size_t -->
    <qualified-type-def type-id='type-id-62' const='yes' id='type-id-117'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
    <qualified-type-def type-id='type-id-1023' const='yes' id='type-id-1656'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1656' size-in-bits='64' id='type-id-1657'/>
    <!-- const std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1657' const='yes' id='type-id-1658'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo> -->
    <qualified-type-def type-id='type-id-1040' const='yes' id='type-id-1045'/>
    <!-- const std::allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1045' size-in-bits='64' id='type-id-1024'/>
    <!-- const std::allocator<char> -->
    <qualified-type-def type-id='type-id-931' const='yes' id='type-id-945'/>
    <!-- const std::allocator<char>& -->
    <reference-type-def kind='lvalue' type-id='type-id-945' size-in-bits='64' id='type-id-617'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
    <qualified-type-def type-id='type-id-917' const='yes' id='type-id-946'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-946' size-in-bits='64' id='type-id-632'/>
    <!-- const std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-946' size-in-bits='64' id='type-id-634'/>
    <!-- const std::float_denorm_style -->
    <qualified-type-def type-id='type-id-1659' const='yes' id='type-id-1660'/>
    <!-- const std::float_round_style -->
    <qualified-type-def type-id='type-id-1661' const='yes' id='type-id-1662'/>
    <!-- const std::nothrow_t -->
    <qualified-type-def type-id='type-id-1663' const='yes' id='type-id-1664'/>
    <!-- const std::nothrow_t& -->
    <qualified-type-def type-id='type-id-1665' id='type-id-1666'/>
    <!-- const std::nothrow_t& -->
    <reference-type-def kind='lvalue' type-id='type-id-1664' size-in-bits='64' id='type-id-1665'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
    <qualified-type-def type-id='type-id-1017' const='yes' id='type-id-1047'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1047' size-in-bits='64' id='type-id-1026'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1047' size-in-bits='64' id='type-id-1667'/>
    <!-- const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1667' const='yes' id='type-id-1668'/>
    <!-- const tcmalloc::PageHeap -->
    <qualified-type-def type-id='type-id-1669' const='yes' id='type-id-1670'/>
    <!-- const tcmalloc::PageHeap* -->
    <pointer-type-def type-id='type-id-1670' size-in-bits='64' id='type-id-1671'/>
    <!-- const tcmalloc::PageHeap* const -->
    <qualified-type-def type-id='type-id-1671' const='yes' id='type-id-1672'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span> -->
    <qualified-type-def type-id='type-id-1439' const='yes' id='type-id-1673'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span>* -->
    <pointer-type-def type-id='type-id-1673' size-in-bits='64' id='type-id-1674'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::Span>* const -->
    <qualified-type-def type-id='type-id-1674' const='yes' id='type-id-1675'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> -->
    <qualified-type-def type-id='type-id-1676' const='yes' id='type-id-1677'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* -->
    <pointer-type-def type-id='type-id-1677' size-in-bits='64' id='type-id-1678'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> -->
    <qualified-type-def type-id='type-id-1679' const='yes' id='type-id-1680'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* -->
    <pointer-type-def type-id='type-id-1680' size-in-bits='64' id='type-id-1681'/>
    <!-- const tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* const -->
    <qualified-type-def type-id='type-id-1681' const='yes' id='type-id-1682'/>
    <!-- const tcmalloc::ThreadCache -->
    <qualified-type-def type-id='type-id-1683' const='yes' id='type-id-1684'/>
    <!-- const tcmalloc::ThreadCache* -->
    <pointer-type-def type-id='type-id-1684' size-in-bits='64' id='type-id-1685'/>
    <!-- const tcmalloc::ThreadCache::FreeList -->
    <qualified-type-def type-id='type-id-1573' const='yes' id='type-id-1686'/>
    <!-- const tcmalloc::ThreadCache::FreeList* -->
    <pointer-type-def type-id='type-id-1686' size-in-bits='64' id='type-id-1687'/>
    <!-- const tcmalloc::ThreadCache::FreeList* const -->
    <qualified-type-def type-id='type-id-1687' const='yes' id='type-id-1688'/>
    <!-- const tm -->
    <qualified-type-def type-id='type-id-1601' const='yes' id='type-id-1689'/>
    <!-- const tm* -->
    <pointer-type-def type-id='type-id-1689' size-in-bits='64' id='type-id-1690'/>
    <!-- const uintptr_t -->
    <qualified-type-def type-id='type-id-156' const='yes' id='type-id-259'/>
    <!-- const unsigned long int -->
    <qualified-type-def type-id='type-id-5' const='yes' id='type-id-708'/>
    <!-- const unsigned long int& -->
    <reference-type-def kind='lvalue' type-id='type-id-708' size-in-bits='64' id='type-id-706'/>
    <!-- const volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-1220' const='yes' id='type-id-1229'/>
    <!-- const volatile base::subtle::Atomic64* -->
    <pointer-type-def type-id='type-id-1229' size-in-bits='64' id='type-id-1225'/>
    <!-- const wchar_t -->
    <qualified-type-def type-id='type-id-1582' const='yes' id='type-id-1691'/>
    <!-- const wchar_t* -->
    <pointer-type-def type-id='type-id-1691' size-in-bits='64' id='type-id-1692'/>
    <!-- const wchar_t** -->
    <pointer-type-def type-id='type-id-1692' size-in-bits='64' id='type-id-1693'/>
    <!-- int (void*, void*)* -->
    <pointer-type-def type-id='type-id-1694' size-in-bits='64' id='type-id-1584'/>
    <!-- int* -->
    <pointer-type-def type-id='type-id-1' size-in-bits='64' id='type-id-963'/>
    <!-- lconv* -->
    <pointer-type-def type-id='type-id-1602' size-in-bits='64' id='type-id-1695'/>
    <!-- mbstate_t* -->
    <pointer-type-def type-id='type-id-1599' size-in-bits='64' id='type-id-1696'/>
    <!-- size_t* -->
    <pointer-type-def type-id='type-id-62' size-in-bits='64' id='type-id-253'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1023' size-in-bits='64' id='type-id-1042'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-1042' const='yes' id='type-id-1697'/>
    <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl* -->
    <pointer-type-def type-id='type-id-1039' size-in-bits='64' id='type-id-1041'/>
    <!-- std::allocator<MallocExtension::FreeListInfo>& -->
    <reference-type-def kind='lvalue' type-id='type-id-1040' size-in-bits='64' id='type-id-1698'/>
    <!-- std::allocator<MallocExtension::FreeListInfo>* -->
    <pointer-type-def type-id='type-id-1040' size-in-bits='64' id='type-id-1050'/>
    <!-- std::allocator<char>* -->
    <pointer-type-def type-id='type-id-931' size-in-bits='64' id='type-id-989'/>
    <!-- std::bad_alloc* -->
    <pointer-type-def type-id='type-id-1699' size-in-bits='64' id='type-id-1700'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-917' size-in-bits='64' id='type-id-1701'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >* -->
    <pointer-type-def type-id='type-id-917' size-in-bits='64' id='type-id-790'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider* -->
    <pointer-type-def type-id='type-id-930' size-in-bits='64' id='type-id-932'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep& -->
    <reference-type-def kind='lvalue' type-id='type-id-636' size-in-bits='64' id='type-id-1702'/>
    <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep* -->
    <pointer-type-def type-id='type-id-636' size-in-bits='64' id='type-id-792'/>
    <!-- std::exception* -->
    <pointer-type-def type-id='type-id-1703' size-in-bits='64' id='type-id-1704'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >& -->
    <reference-type-def kind='lvalue' type-id='type-id-1017' size-in-bits='64' id='type-id-1705'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* -->
    <pointer-type-def type-id='type-id-1017' size-in-bits='64' id='type-id-967'/>
    <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const -->
    <qualified-type-def type-id='type-id-967' const='yes' id='type-id-1027'/>
    <!-- tcmalloc::CentralFreeList* -->
    <pointer-type-def type-id='type-id-1706' size-in-bits='64' id='type-id-1707'/>
    <!-- tcmalloc::CentralFreeList* const -->
    <qualified-type-def type-id='type-id-1707' const='yes' id='type-id-1708'/>
    <!-- tcmalloc::CentralFreeListPadded* -->
    <pointer-type-def type-id='type-id-1569' size-in-bits='64' id='type-id-1709'/>
    <!-- tcmalloc::LogItem* -->
    <pointer-type-def type-id='type-id-1145' size-in-bits='64' id='type-id-1158'/>
    <!-- tcmalloc::PageHeap* -->
    <pointer-type-def type-id='type-id-1669' size-in-bits='64' id='type-id-1710'/>
    <!-- tcmalloc::PageHeap* const -->
    <qualified-type-def type-id='type-id-1710' const='yes' id='type-id-1711'/>
    <!-- tcmalloc::PageHeap::LargeSpanStats* -->
    <pointer-type-def type-id='type-id-1712' size-in-bits='64' id='type-id-1713'/>
    <!-- tcmalloc::PageHeap::SmallSpanStats* -->
    <pointer-type-def type-id='type-id-1714' size-in-bits='64' id='type-id-1715'/>
    <!-- tcmalloc::PageHeap::SpanList* -->
    <pointer-type-def type-id='type-id-1571' size-in-bits='64' id='type-id-1716'/>
    <!-- tcmalloc::PageHeap::Stats* -->
    <pointer-type-def type-id='type-id-1617' size-in-bits='64' id='type-id-1717'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::Span>* -->
    <pointer-type-def type-id='type-id-1439' size-in-bits='64' id='type-id-1437'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* -->
    <pointer-type-def type-id='type-id-1676' size-in-bits='64' id='type-id-1718'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>* const -->
    <qualified-type-def type-id='type-id-1718' const='yes' id='type-id-1719'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>* -->
    <pointer-type-def type-id='type-id-1440' size-in-bits='64' id='type-id-1454'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* -->
    <pointer-type-def type-id='type-id-1679' size-in-bits='64' id='type-id-1720'/>
    <!-- tcmalloc::Sampler* -->
    <pointer-type-def type-id='type-id-1721' size-in-bits='64' id='type-id-1722'/>
    <!-- tcmalloc::Sampler* const -->
    <qualified-type-def type-id='type-id-1722' const='yes' id='type-id-1723'/>
    <!-- tcmalloc::SizeMap* -->
    <pointer-type-def type-id='type-id-1724' size-in-bits='64' id='type-id-1725'/>
    <!-- tcmalloc::SizeMap* const -->
    <qualified-type-def type-id='type-id-1725' const='yes' id='type-id-1726'/>
    <!-- tcmalloc::Span* -->
    <pointer-type-def type-id='type-id-148' size-in-bits='64' id='type-id-155'/>
    <!-- tcmalloc::StackTrace* -->
    <pointer-type-def type-id='type-id-1443' size-in-bits='64' id='type-id-1727'/>
    <!-- tcmalloc::ThreadCache* -->
    <pointer-type-def type-id='type-id-1683' size-in-bits='64' id='type-id-1728'/>
    <!-- tcmalloc::ThreadCache* const -->
    <qualified-type-def type-id='type-id-1728' const='yes' id='type-id-1729'/>
    <!-- tcmalloc::ThreadCache::FreeList* -->
    <pointer-type-def type-id='type-id-1573' size-in-bits='64' id='type-id-1730'/>
    <!-- tcmalloc::ThreadCache::FreeList* const -->
    <qualified-type-def type-id='type-id-1730' const='yes' id='type-id-1731'/>
    <!-- typedef __va_list_tag __va_list_tag* -->
    <pointer-type-def type-id='type-id-73' size-in-bits='64' id='type-id-72'/>
    <!-- uint64_t* -->
    <pointer-type-def type-id='type-id-15' size-in-bits='64' id='type-id-1732'/>
    <!-- void ()* -->
    <pointer-type-def type-id='type-id-948' size-in-bits='64' id='type-id-176'/>
    <!-- void (void*)* -->
    <pointer-type-def type-id='type-id-951' size-in-bits='64' id='type-id-234'/>
    <!-- void (void*)** -->
    <pointer-type-def type-id='type-id-234' size-in-bits='64' id='type-id-1733'/>
    <!-- void (void*, typedef size_t)* -->
    <pointer-type-def type-id='type-id-957' size-in-bits='64' id='type-id-337'/>
    <!-- void (void*, typedef size_t)** -->
    <pointer-type-def type-id='type-id-337' size-in-bits='64' id='type-id-1228'/>
    <!-- void (void*, void*)* -->
    <pointer-type-def type-id='type-id-1734' size-in-bits='64' id='type-id-1735'/>
    <!-- void* -->
    <pointer-type-def type-id='type-id-60' size-in-bits='64' id='type-id-58'/>
    <!-- void* (typedef size_t, typedef size_t, void*)* -->
    <pointer-type-def type-id='type-id-1736' size-in-bits='64' id='type-id-1737'/>
    <!-- void* (typedef size_t, void*)* -->
    <pointer-type-def type-id='type-id-1738' size-in-bits='64' id='type-id-1739'/>
    <!-- void* (unsigned long int)* -->
    <pointer-type-def type-id='type-id-958' size-in-bits='64' id='type-id-263'/>
    <!-- void* (void*, typedef size_t, void*)* -->
    <pointer-type-def type-id='type-id-1740' size-in-bits='64' id='type-id-1741'/>
    <!-- void** -->
    <pointer-type-def type-id='type-id-58' size-in-bits='64' id='type-id-151'/>
    <!-- volatile Atomic32 -->
    <qualified-type-def type-id='type-id-100' volatile='yes' id='type-id-93'/>
    <!-- volatile Atomic32* -->
    <pointer-type-def type-id='type-id-93' size-in-bits='64' id='type-id-108'/>
    <!-- volatile base::subtle::Atomic64 -->
    <qualified-type-def type-id='type-id-1224' volatile='yes' id='type-id-1220'/>
    <!-- volatile size_t -->
    <qualified-type-def type-id='type-id-62' volatile='yes' id='type-id-1742'/>
    <!-- volatile unsigned long int -->
    <qualified-type-def type-id='type-id-5' volatile='yes' id='type-id-1580'/>
    <!-- wchar_t* -->
    <pointer-type-def type-id='type-id-1582' size-in-bits='64' id='type-id-1743'/>
    <!-- wchar_t** -->
    <pointer-type-def type-id='type-id-1743' size-in-bits='64' id='type-id-1744'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- class std::allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='allocator&lt;MallocExtension::FreeListInfo&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='87' column='1' id='type-id-1040'>
        <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1049'/>
        <member-function access='private'>
          <!-- void std::allocator<MallocExtension::FreeListInfo>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<MallocExtension::FreeListInfo>::allocator(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<MallocExtension::FreeListInfo>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1050' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Destroy_aux<true> -->
      <class-decl name='_Destroy_aux&lt;true&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='106' column='1' id='type-id-1745'>
        <member-function access='public' static='yes'>
          <!-- void std::_Destroy_aux<true>::__destroy<MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*) -->
          <function-decl name='__destroy&lt;MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void std::_Destroy_aux<true>::__destroy<void (**)()>(void ()**) -->
          <function-decl name='__destroy&lt;void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='_Vector_base&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='70' column='1' id='type-id-1023'>
        <member-type access='public'>
          <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl -->
          <class-decl name='_Vector_impl' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='75' column='1' id='type-id-1039'>
            <!-- class std::allocator<MallocExtension::FreeListInfo> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1040'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_start -->
              <var-decl name='_M_start' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='76' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_finish -->
              <var-decl name='_M_finish' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='77' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- MallocExtension::FreeListInfo* std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_M_end_of_storage -->
              <var-decl name='_M_end_of_storage' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='78' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_Vector_impl() -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl*' -->
                <parameter type-id='type-id-1041' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
            <member-function access='public' constructor='yes'>
              <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl::_Vector_impl(const std::allocator<MallocExtension::FreeListInfo>&) -->
              <function-decl name='_Vector_impl' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='84' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl*' -->
                <parameter type-id='type-id-1041' is-artificial='yes'/>
                <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
                <parameter type-id='type-id-1024'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_impl std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_impl -->
          <var-decl name='_M_impl' type-id='type-id-1039' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='136' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base() -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='104' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='107' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_Vector_base(unsigned long int, const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='110' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::~_Vector_base(int) -->
          <function-decl name='~_Vector_base' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='131' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-1042' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
      <class-decl name='vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' size-in-bits='192' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='171' column='1' id='type-id-1017'>
        <!-- struct std::_Vector_base<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > -->
        <base-class access='protected' layout-offset-in-bits='0' type-id='type-id-1023'/>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector() -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='207' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(unsigned long int, const MallocExtension::FreeListInfo&, const std::allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='227' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1025'/>
            <!-- parameter of type 'const std::allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1024'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::vector(const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >&) -->
          <function-decl name='vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='241' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- parameter of type 'const std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >&' -->
            <parameter type-id='type-id-1026'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::~vector(int) -->
          <function-decl name='~vector' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_vector.h' line='312' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >*' -->
            <parameter type-id='type-id-967' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='protected'>
          <!-- void std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >::_M_insert_aux(__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >, const MallocExtension::FreeListInfo&) -->
          <function-decl name='_M_insert_aux' mangled-name='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='295' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNSt6vectorIN15MallocExtension12FreeListInfoESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_'>
            <!-- implicit parameter of type 'std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> >* const' -->
            <parameter type-id='type-id-1027' name='this' is-artificial='yes'/>
            <!-- parameter of type 'class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >' -->
            <parameter type-id='type-id-1028' name='__position' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo&' -->
            <parameter type-id='type-id-1029' name='__x' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/vector.tcc' line='296' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::allocator<char> -->
      <class-decl name='allocator&lt;char&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='45' column='1' id='type-id-931'>
        <!-- class __gnu_cxx::new_allocator<char> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-988'/>
        <member-function access='private'>
          <!-- void std::allocator<char>::allocator() -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='101' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void std::allocator<char>::allocator(const std::allocator<char>&) -->
          <function-decl name='allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='103' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- std::allocator<char>::~allocator(int) -->
          <function-decl name='~allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/allocator.h' line='109' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::allocator<char>*' -->
            <parameter type-id='type-id-989' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> > -->
      <class-decl name='basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='52' column='1' id='type-id-917'>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep -->
          <class-decl name='_Rep' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='148' column='1' id='type-id-636'>
            <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-929'/>
            <data-member access='public' static='yes'>
              <!-- static const size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_max_size -->
              <var-decl name='_S_max_size' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='51' column='1'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static const char std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_terminal -->
              <var-decl name='_S_terminal' type-id='type-id-63' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='56' column='1'/>
            </data-member>
            <data-member access='public' static='yes'>
              <!-- static size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep::_S_empty_rep_storage[4] -->
              <var-decl name='_S_empty_rep_storage' type-id='type-id-161' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='68' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider -->
          <class-decl name='_Alloc_hider' size-in-bits='64' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='258' column='1' id='type-id-930'>
            <!-- class std::allocator<char> -->
            <base-class access='public' layout-offset-in-bits='0' type-id='type-id-931'/>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- char* std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_M_p -->
              <var-decl name='_M_p' type-id='type-id-118' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='262' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, const std::allocator<char>&) -->
              <function-decl name='_Alloc_hider' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='259' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider*' -->
                <parameter type-id='type-id-932' is-artificial='yes'/>
                <!-- parameter of type 'char*' -->
                <parameter type-id='type-id-118'/>
                <!-- parameter of type 'const std::allocator<char>&' -->
                <parameter type-id='type-id-617'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base -->
          <class-decl name='_Rep_base' size-in-bits='192' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='141' column='1' id='type-id-929'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_length -->
              <var-decl name='_M_length' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='142' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_capacity -->
              <var-decl name='_M_capacity' type-id='type-id-62' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='143' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- _Atomic_word std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base::_M_refcount -->
              <var-decl name='_M_refcount' type-id='type-id-326' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='144' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='public' static='yes'>
          <!-- static const size_t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos -->
          <var-decl name='npos' type-id='type-id-117' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='270' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dataplus -->
          <var-decl name='_M_dataplus' type-id='type-id-930' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='274' column='1'/>
        </data-member>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string() -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='2144' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='178' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='170' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long int, unsigned long int) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='184' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned long int, unsigned long int, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='194' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >&' -->
            <parameter type-id='type-id-632'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const char*, unsigned long int, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='206' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(const char*, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='213' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public'>
          <!-- void std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long int, char, const std::allocator<char>&) -->
          <function-decl name='basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.tcc' line='220' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- parameter of type 'char' -->
            <parameter type-id='type-id-65'/>
            <!-- parameter of type 'const std::allocator<char>&' -->
            <parameter type-id='type-id-617'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='public' destructor='yes'>
          <!-- std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string(int) -->
          <function-decl name='~basic_string' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/basic_string.h' line='502' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >*' -->
            <parameter type-id='type-id-790' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__copy_move<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move&lt;false, true, std::random_access_iterator_tag&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='307' column='1' id='type-id-1746'>
        <member-function access='public' static='yes'>
          <!-- MallocExtension::FreeListInfo* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<MallocExtension::FreeListInfo>(const MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
          <function-decl name='__copy_m&lt;MallocExtension::FreeListInfo&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='376' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'const MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1633'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1633'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- MallocExtension::FreeListInfo* -->
            <return type-id='type-id-1034'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void ()** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<void (*)()>(void ()* const*, void ()**) -->
          <function-decl name='__copy_m&lt;void (*)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='376' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void ()* const*' -->
            <parameter type-id='type-id-843'/>
            <!-- parameter of type 'void ()* const*' -->
            <parameter type-id='type-id-843'/>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- void ()** -->
            <return type-id='type-id-845'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void**) -->
          <function-decl name='__copy_m&lt;void*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='376' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- void** -->
            <return type-id='type-id-151'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void** std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<const void*>(void* const*, void**) -->
          <function-decl name='__copy_m&lt;const void*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='376' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- void** -->
            <return type-id='type-id-151'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::__niter_base<MallocExtension::FreeListInfo*, false> -->
      <class-decl name='__niter_base&lt;MallocExtension::FreeListInfo*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='267' column='1' id='type-id-1747'/>
      <!-- struct std::__miter_base<MallocExtension::FreeListInfo*, false> -->
      <class-decl name='__miter_base&lt;MallocExtension::FreeListInfo*, false&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='285' column='1' id='type-id-1748'/>
      <!-- struct std::numeric_limits<long unsigned int> -->
      <class-decl name='numeric_limits&lt;long unsigned int&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='926' column='1' id='type-id-1749'>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_specialized -->
          <var-decl name='is_specialized' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='927' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::digits -->
          <var-decl name='digits' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='934' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::digits10 -->
          <var-decl name='digits10' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='935' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_signed -->
          <var-decl name='is_signed' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='936' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_integer -->
          <var-decl name='is_integer' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='937' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_exact -->
          <var-decl name='is_exact' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='938' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::radix -->
          <var-decl name='radix' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='939' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::min_exponent -->
          <var-decl name='min_exponent' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='945' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::min_exponent10 -->
          <var-decl name='min_exponent10' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='946' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::max_exponent -->
          <var-decl name='max_exponent' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='947' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const int std::numeric_limits<long unsigned int>::max_exponent10 -->
          <var-decl name='max_exponent10' type-id='type-id-144' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='948' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::has_infinity -->
          <var-decl name='has_infinity' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='950' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::has_quiet_NaN -->
          <var-decl name='has_quiet_NaN' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='951' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::has_signaling_NaN -->
          <var-decl name='has_signaling_NaN' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='952' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const std::float_denorm_style std::numeric_limits<long unsigned int>::has_denorm -->
          <var-decl name='has_denorm' type-id='type-id-1660' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='953' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::has_denorm_loss -->
          <var-decl name='has_denorm_loss' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='954' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_iec559 -->
          <var-decl name='is_iec559' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='965' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_bounded -->
          <var-decl name='is_bounded' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='966' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::is_modulo -->
          <var-decl name='is_modulo' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='967' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::traps -->
          <var-decl name='traps' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='969' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const bool std::numeric_limits<long unsigned int>::tinyness_before -->
          <var-decl name='tinyness_before' type-id='type-id-487' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='970' column='1'/>
        </data-member>
        <data-member access='public' static='yes'>
          <!-- static const std::float_round_style std::numeric_limits<long unsigned int>::round_style -->
          <var-decl name='round_style' type-id='type-id-1662' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='971' column='1'/>
        </data-member>
      </class-decl>
      <!-- enum std::float_denorm_style -->
      <enum-decl name='float_denorm_style' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='168' column='1' id='type-id-1659'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='denorm_indeterminate' value='-1'/>
        <enumerator name='denorm_absent' value='0'/>
        <enumerator name='denorm_present' value='1'/>
      </enum-decl>
      <!-- enum std::float_round_style -->
      <enum-decl name='float_round_style' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/limits' line='153' column='1' id='type-id-1661'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='round_indeterminate' value='-1'/>
        <enumerator name='round_toward_zero' value='0'/>
        <enumerator name='round_to_nearest' value='1'/>
        <enumerator name='round_toward_infinity' value='2'/>
        <enumerator name='round_toward_neg_infinity' value='3'/>
      </enum-decl>
      <!-- typedef std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::string -->
      <typedef-decl name='string' type-id='type-id-917' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stringfwd.h' line='56' column='1' id='type-id-924'/>
      <!-- struct std::__copy_move_backward<false, true, std::random_access_iterator_tag> -->
      <class-decl name='__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='511' column='1' id='type-id-1750'>
        <member-function access='public' static='yes'>
          <!-- MallocExtension::FreeListInfo* std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<MallocExtension::FreeListInfo>(const MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
          <function-decl name='__copy_move_b&lt;MallocExtension::FreeListInfo&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='572' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'const MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1633'/>
            <!-- parameter of type 'const MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1633'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- MallocExtension::FreeListInfo* -->
            <return type-id='type-id-1034'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void ()** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<void (*)()>(void ()* const*, void ()**) -->
          <function-decl name='__copy_move_b&lt;void (*)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='572' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void ()* const*' -->
            <parameter type-id='type-id-843'/>
            <!-- parameter of type 'void ()* const*' -->
            <parameter type-id='type-id-843'/>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- void ()** -->
            <return type-id='type-id-845'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<void*>(void* const*, void**) -->
          <function-decl name='__copy_move_b&lt;void*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='572' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void* const*' -->
            <parameter type-id='type-id-205'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151'/>
            <!-- void** -->
            <return type-id='type-id-151'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- HeapProfileTable::AllocValue::Bucket** std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<HeapProfileTable::Bucket*>(HeapProfileTable::AllocValue::Bucket* const*, HeapProfileTable::AllocValue::Bucket**) -->
          <function-decl name='__copy_move_b&lt;HeapProfileTable::Bucket*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='572' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const*' -->
            <parameter type-id='type-id-1062'/>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket* const*' -->
            <parameter type-id='type-id-1062'/>
            <!-- parameter of type 'HeapProfileTable::AllocValue::Bucket**' -->
            <parameter type-id='type-id-243'/>
            <!-- HeapProfileTable::AllocValue::Bucket** -->
            <return type-id='type-id-243'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- struct std::nothrow_t -->
      <class-decl name='nothrow_t' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/new' line='67' column='1' id='type-id-1663'/>
      <!-- struct std::__uninitialized_copy<true> -->
      <class-decl name='__uninitialized_copy&lt;true&gt;' size-in-bits='8' is-struct='yes' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='87' column='1' id='type-id-1751'>
        <member-function access='public' static='yes'>
          <!-- MallocExtension::FreeListInfo* std::__uninitialized_copy<true>::uninitialized_copy<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
          <function-decl name='uninitialized_copy&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
            <parameter type-id='type-id-1034'/>
            <!-- MallocExtension::FreeListInfo* -->
            <return type-id='type-id-1034'/>
          </function-decl>
        </member-function>
        <member-function access='public' static='yes'>
          <!-- void ()** std::__uninitialized_copy<true>::uninitialized_copy<void (**)(), void (**)()>(void ()**, void ()**) -->
          <function-decl name='uninitialized_copy&lt;void (**)(), void (**)()&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- parameter of type 'void ()**' -->
            <parameter type-id='type-id-845'/>
            <!-- void ()** -->
            <return type-id='type-id-845'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- void std::_Destroy<MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='_Destroy&lt;MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='119' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void std::_Destroy<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, std::allocator<MallocExtension::FreeListInfo>&) -->
      <function-decl name='_Destroy&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_construct.h' line='146' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'std::allocator<MallocExtension::FreeListInfo>&' -->
        <parameter type-id='type-id-1698'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__copy_move_backward_a<false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='__copy_move_backward_a&lt;false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='582' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__copy_move_backward_a2<false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='__copy_move_backward_a2&lt;false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='600' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__copy_move_a<false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='__copy_move_a&lt;false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='386' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__copy_move_a2<false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='__copy_move_a2&lt;false, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='431' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::copy<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='copy&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='458' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::uninitialized_copy<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='uninitialized_copy&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__uninitialized_copy_a<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, std::allocator<MallocExtension::FreeListInfo>&) -->
      <function-decl name='__uninitialized_copy_a&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='254' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'std::allocator<MallocExtension::FreeListInfo>&' -->
        <parameter type-id='type-id-1698'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- const unsigned long int& std::max<long unsigned int>(const unsigned long int&, const unsigned long int&) -->
      <function-decl name='max&lt;long unsigned int&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const unsigned long int&' -->
        <parameter type-id='type-id-706'/>
        <!-- parameter of type 'const unsigned long int&' -->
        <parameter type-id='type-id-706'/>
        <!-- const unsigned long int& -->
        <return type-id='type-id-706'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::copy_backward<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*>(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*) -->
      <function-decl name='copy_backward&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='628' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- MallocExtension::FreeListInfo* std::__uninitialized_move_a<MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, std::allocator<MallocExtension::FreeListInfo> >(MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, std::allocator<MallocExtension::FreeListInfo>&) -->
      <function-decl name='__uninitialized_move_a&lt;MallocExtension::FreeListInfo*, MallocExtension::FreeListInfo*, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_uninitialized.h' line='261' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'MallocExtension::FreeListInfo*' -->
        <parameter type-id='type-id-1034'/>
        <!-- parameter of type 'std::allocator<MallocExtension::FreeListInfo>&' -->
        <parameter type-id='type-id-1698'/>
        <!-- MallocExtension::FreeListInfo* -->
        <return type-id='type-id-1034'/>
      </function-decl>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1752'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1753'/>
      <!-- class std::exception -->
      <class-decl name='exception' visibility='default' is-declaration-only='yes' id='type-id-1703'>
        <member-function access='private' constructor='yes'>
          <!-- std::exception::exception() -->
          <function-decl name='exception' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/exception' line='62' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::exception*' -->
            <parameter type-id='type-id-1704' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::bad_alloc -->
      <class-decl name='bad_alloc' visibility='default' is-declaration-only='yes' id='type-id-1699'>
        <member-function access='private' constructor='yes'>
          <!-- std::bad_alloc::bad_alloc() -->
          <function-decl name='bad_alloc' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/new' line='57' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'std::bad_alloc*' -->
            <parameter type-id='type-id-1700' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1754'/>
      <!-- class std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > -->
      <class-decl name='reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1755'/>
    </namespace-decl>
    <!-- namespace __gnu_cxx -->
    <namespace-decl name='__gnu_cxx'>
      <!-- class __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' size-in-bits='64' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='669' column='1' id='type-id-1028'>
        <data-member access='protected' layout-offset-in-bits='0'>
          <!-- MallocExtension::FreeListInfo* __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::_M_current -->
          <var-decl name='_M_current' type-id='type-id-1034' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='671' column='1'/>
        </data-member>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::__normal_iterator() -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='683' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >*' -->
            <parameter type-id='type-id-1035' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >::__normal_iterator(MallocExtension::FreeListInfo* const&) -->
          <function-decl name='__normal_iterator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='686' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >*' -->
            <parameter type-id='type-id-1035' is-artificial='yes'/>
            <!-- parameter of type 'MallocExtension::FreeListInfo* const&' -->
            <parameter type-id='type-id-1036'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<MallocExtension::FreeListInfo> -->
      <class-decl name='new_allocator&lt;MallocExtension::FreeListInfo&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-1049'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::new_allocator(const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>&' -->
            <parameter type-id='type-id-1057'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<MallocExtension::FreeListInfo>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<MallocExtension::FreeListInfo>*' -->
            <parameter type-id='type-id-1056' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class __gnu_cxx::new_allocator<char> -->
      <class-decl name='new_allocator&lt;char&gt;' size-in-bits='8' visibility='default' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='52' column='1' id='type-id-988'>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<char>::new_allocator() -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='66' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void __gnu_cxx::new_allocator<char>::new_allocator(const __gnu_cxx::new_allocator<char>&) -->
          <function-decl name='new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='68' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- parameter of type 'const __gnu_cxx::new_allocator<char>&' -->
            <parameter type-id='type-id-1000'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' destructor='yes'>
          <!-- __gnu_cxx::new_allocator<char>::~new_allocator(int) -->
          <function-decl name='~new_allocator' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/ext/new_allocator.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type '__gnu_cxx::new_allocator<char>*' -->
            <parameter type-id='type-id-999' is-artificial='yes'/>
            <!-- artificial parameter of type 'int' -->
            <parameter type-id='type-id-1' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- ptrdiff_t __gnu_cxx::operator&#45;<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >(const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >&, const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >&) -->
      <function-decl name='operator-&lt;MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_iterator.h' line='856' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >&' -->
        <parameter type-id='type-id-1641'/>
        <!-- parameter of type 'const __gnu_cxx::__normal_iterator<MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > >&' -->
        <parameter type-id='type-id-1641'/>
        <!-- typedef ptrdiff_t -->
        <return type-id='type-id-208'/>
      </function-decl>
      <!-- class __gnu_cxx::__normal_iterator<const MallocExtension::FreeListInfo*, std::vector<MallocExtension::FreeListInfo, std::allocator<MallocExtension::FreeListInfo> > > -->
      <class-decl name='__normal_iterator&lt;const MallocExtension::FreeListInfo*, std::vector&lt;MallocExtension::FreeListInfo, std::allocator&lt;MallocExtension::FreeListInfo&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1756'/>
      <!-- class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1757'/>
      <!-- class __gnu_cxx::__normal_iterator<const char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > -->
      <class-decl name='__normal_iterator&lt;const char*, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;' visibility='default' is-declaration-only='yes' id='type-id-1758'/>
    </namespace-decl>
    <!-- int atexit(void ()*) -->
    <function-decl name='atexit' filepath='/usr/include/stdlib.h' line='518' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'void ()*' -->
      <parameter type-id='type-id-176'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- double atof(const char*) -->
    <function-decl name='atof' filepath='/usr/include/stdlib.h' line='145' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- int atoi(const char*) -->
    <function-decl name='atoi' filepath='/usr/include/stdlib.h' line='148' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- long int atol(const char*) -->
    <function-decl name='atol' filepath='/usr/include/stdlib.h' line='151' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- long int -->
      <return type-id='type-id-85'/>
    </function-decl>
    <!-- void* bsearch(void*, void*, size_t, size_t, __compar_fn_t) -->
    <function-decl name='bsearch' filepath='/usr/include/stdlib.h' line='755' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef __compar_fn_t' -->
      <parameter type-id='type-id-1585'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* calloc(size_t, size_t) -->
    <function-decl name='calloc' filepath='/usr/include/stdlib.h' line='473' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- div_t div(int, int) -->
    <function-decl name='div' filepath='/usr/include/stdlib.h' line='785' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- struct div_t -->
      <return type-id='type-id-1586'/>
    </function-decl>
    <!-- void free(void*) -->
    <function-decl name='free' filepath='/usr/include/stdlib.h' line='488' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- char* getenv(const char*) -->
    <function-decl name='getenv' filepath='/usr/include/stdlib.h' line='567' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- char* -->
      <return type-id='type-id-118'/>
    </function-decl>
    <!-- ldiv_t ldiv(long int, long int) -->
    <function-decl name='ldiv' filepath='/usr/include/stdlib.h' line='787' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'long int' -->
      <parameter type-id='type-id-85'/>
      <!-- parameter of type 'long int' -->
      <parameter type-id='type-id-85'/>
      <!-- struct ldiv_t -->
      <return type-id='type-id-1587'/>
    </function-decl>
    <!-- void* malloc(size_t) -->
    <function-decl name='malloc' filepath='/usr/include/stdlib.h' line='471' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- int mblen(const char*, size_t) -->
    <function-decl name='mblen' filepath='/usr/include/stdlib.h' line='860' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- size_t mbstowcs(wchar_t*, const char*, size_t) -->
    <function-decl name='mbstowcs' filepath='/usr/include/stdlib.h' line='871' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- int mbtowc(wchar_t*, const char*, size_t) -->
    <function-decl name='mbtowc' filepath='/usr/include/stdlib.h' line='863' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void qsort(void*, size_t, size_t, __compar_fn_t) -->
    <function-decl name='qsort' filepath='/usr/include/stdlib.h' line='761' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef __compar_fn_t' -->
      <parameter type-id='type-id-1585'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- int rand() -->
    <function-decl name='rand' filepath='/usr/include/stdlib.h' line='380' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* realloc(void*, size_t) -->
    <function-decl name='realloc' filepath='/usr/include/stdlib.h' line='485' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void srand(unsigned int) -->
    <function-decl name='srand' filepath='/usr/include/stdlib.h' line='382' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'unsigned int' -->
      <parameter type-id='type-id-64'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- double strtod(const char*, char**) -->
    <function-decl name='strtod' filepath='/usr/include/stdlib.h' line='165' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- long int strtol(const char*, char**, int) -->
    <function-decl name='strtol' filepath='/usr/include/stdlib.h' line='184' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long int -->
      <return type-id='type-id-85'/>
    </function-decl>
    <!-- unsigned long int strtoul(const char*, char**, int) -->
    <function-decl name='strtoul' filepath='/usr/include/stdlib.h' line='188' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- unsigned long int -->
      <return type-id='type-id-5'/>
    </function-decl>
    <!-- int system(const char*) -->
    <function-decl name='system' filepath='/usr/include/stdlib.h' line='717' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- size_t wcstombs(char*, const wchar_t*, size_t) -->
    <function-decl name='wcstombs' filepath='/usr/include/stdlib.h' line='874' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- int wctomb(char*, wchar_t) -->
    <function-decl name='wctomb' filepath='/usr/include/stdlib.h' line='867' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118'/>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- lldiv_t lldiv(long long int, long long int) -->
    <function-decl name='lldiv' filepath='/usr/include/stdlib.h' line='793' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'long long int' -->
      <parameter type-id='type-id-1159'/>
      <!-- parameter of type 'long long int' -->
      <parameter type-id='type-id-1159'/>
      <!-- struct lldiv_t -->
      <return type-id='type-id-1583'/>
    </function-decl>
    <!-- long long int atoll(const char*) -->
    <function-decl name='atoll' filepath='/usr/include/stdlib.h' line='158' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- long long int -->
      <return type-id='type-id-1159'/>
    </function-decl>
    <!-- long long int strtoll(const char*, char**, int) -->
    <function-decl name='strtoll' filepath='/usr/include/stdlib.h' line='210' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long long int -->
      <return type-id='type-id-1159'/>
    </function-decl>
    <!-- long long unsigned int strtoull(const char*, char**, int) -->
    <function-decl name='strtoull' filepath='/usr/include/stdlib.h' line='215' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long long unsigned int -->
      <return type-id='type-id-1160'/>
    </function-decl>
    <!-- float strtof(const char*, char**) -->
    <function-decl name='strtof' filepath='/usr/include/stdlib.h' line='173' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- float -->
      <return type-id='type-id-1559'/>
    </function-decl>
    <!-- long double strtold(const char*, char**) -->
    <function-decl name='strtold' filepath='/usr/include/stdlib.h' line='176' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'char**' -->
      <parameter type-id='type-id-125'/>
      <!-- long double -->
      <return type-id='type-id-1564'/>
    </function-decl>
    <!-- wint_t btowc(int) -->
    <function-decl name='btowc' filepath='/usr/include/wchar.h' line='351' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- wint_t fgetwc(__FILE*) -->
    <function-decl name='fgetwc' filepath='/usr/include/wchar.h' line='743' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- wchar_t* fgetws(wchar_t*, int, __FILE*) -->
    <function-decl name='fgetws' filepath='/usr/include/wchar.h' line='772' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- wint_t fputwc(wchar_t, __FILE*) -->
    <function-decl name='fputwc' filepath='/usr/include/wchar.h' line='757' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- int fputws(const wchar_t*, __FILE*) -->
    <function-decl name='fputws' filepath='/usr/include/wchar.h' line='779' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int fwide(__FILE*, int) -->
    <function-decl name='fwide' filepath='/usr/include/wchar.h' line='585' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int fwprintf(__FILE*, const wchar_t*, ...) -->
    <function-decl name='fwprintf' filepath='/usr/include/wchar.h' line='592' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int fwscanf(__FILE*, const wchar_t*, ...) -->
    <function-decl name='fwscanf' filepath='/usr/include/wchar.h' line='633' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- wint_t getwc(__FILE*) -->
    <function-decl name='getwc' filepath='/usr/include/wchar.h' line='744' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- wint_t getwchar() -->
    <function-decl name='getwchar' filepath='/usr/include/wchar.h' line='750' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- size_t mbrlen(const char*, size_t, mbstate_t*) -->
    <function-decl name='mbrlen' filepath='/usr/include/wchar.h' line='374' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'mbstate_t*' -->
      <parameter type-id='type-id-1696'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- size_t mbrtowc(wchar_t*, const char*, size_t, mbstate_t*) -->
    <function-decl name='mbrtowc' filepath='/usr/include/wchar.h' line='363' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'mbstate_t*' -->
      <parameter type-id='type-id-1696'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- int mbsinit(const mbstate_t*) -->
    <function-decl name='mbsinit' filepath='/usr/include/wchar.h' line='359' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const mbstate_t*' -->
      <parameter type-id='type-id-1655'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- size_t mbsrtowcs(wchar_t*, const char**, size_t, mbstate_t*) -->
    <function-decl name='mbsrtowcs' filepath='/usr/include/wchar.h' line='406' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const char**' -->
      <parameter type-id='type-id-1653'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'mbstate_t*' -->
      <parameter type-id='type-id-1696'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- wint_t putwc(wchar_t, __FILE*) -->
    <function-decl name='putwc' filepath='/usr/include/wchar.h' line='758' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- wint_t putwchar(wchar_t) -->
    <function-decl name='putwchar' filepath='/usr/include/wchar.h' line='764' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- int swprintf(wchar_t*, size_t, const wchar_t*, ...) -->
    <function-decl name='swprintf' filepath='/usr/include/wchar.h' line='602' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int swscanf(const wchar_t*, const wchar_t*, ...) -->
    <function-decl name='swscanf' filepath='/usr/include/wchar.h' line='643' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- wint_t ungetwc(wint_t, __FILE*) -->
    <function-decl name='ungetwc' filepath='/usr/include/wchar.h' line='787' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'typedef wint_t' -->
      <parameter type-id='type-id-1588'/>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- typedef wint_t -->
      <return type-id='type-id-1588'/>
    </function-decl>
    <!-- int vfwprintf(__FILE*, const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vfwprintf' filepath='/usr/include/wchar.h' line='610' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int vfwscanf(__FILE*, const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vfwscanf' filepath='/usr/include/wchar.h' line='687' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type '__FILE*' -->
      <parameter type-id='type-id-1627'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int vswprintf(wchar_t*, size_t, const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vswprintf' filepath='/usr/include/wchar.h' line='623' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int vswscanf(const wchar_t*, const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vswscanf' filepath='/usr/include/wchar.h' line='699' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int vwprintf(const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vwprintf' filepath='/usr/include/wchar.h' line='618' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int vwscanf(const wchar_t*, typedef __va_list_tag __va_list_tag*) -->
    <function-decl name='vwscanf' filepath='/usr/include/wchar.h' line='695' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef __va_list_tag __va_list_tag*' -->
      <parameter type-id='type-id-72'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- size_t wcrtomb(char*, wchar_t, mbstate_t*) -->
    <function-decl name='wcrtomb' filepath='/usr/include/wchar.h' line='368' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118'/>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- parameter of type 'mbstate_t*' -->
      <parameter type-id='type-id-1696'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- wchar_t* wcscat(wchar_t*, const wchar_t*) -->
    <function-decl name='wcscat' filepath='/usr/include/wchar.h' line='152' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- int wcscmp(const wchar_t*, const wchar_t*) -->
    <function-decl name='wcscmp' filepath='/usr/include/wchar.h' line='160' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int wcscoll(const wchar_t*, const wchar_t*) -->
    <function-decl name='wcscoll' filepath='/usr/include/wchar.h' line='189' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- wchar_t* wcscpy(wchar_t*, const wchar_t*) -->
    <function-decl name='wcscpy' filepath='/usr/include/wchar.h' line='144' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- size_t wcscspn(const wchar_t*, const wchar_t*) -->
    <function-decl name='wcscspn' filepath='/usr/include/wchar.h' line='249' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- size_t wcsftime(wchar_t*, size_t, const wchar_t*, const tm*) -->
    <function-decl name='wcsftime' filepath='/usr/include/wchar.h' line='853' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const tm*' -->
      <parameter type-id='type-id-1690'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- size_t wcslen(const wchar_t*) -->
    <function-decl name='wcslen' filepath='/usr/include/wchar.h' line='284' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- wchar_t* wcsncat(wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wcsncat' filepath='/usr/include/wchar.h' line='155' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- int wcsncmp(const wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wcsncmp' filepath='/usr/include/wchar.h' line='163' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wcsncpy' filepath='/usr/include/wchar.h' line='147' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- size_t wcsrtombs(char*, const wchar_t**, size_t, mbstate_t*) -->
    <function-decl name='wcsrtombs' filepath='/usr/include/wchar.h' line='412' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'char*' -->
      <parameter type-id='type-id-118'/>
      <!-- parameter of type 'const wchar_t**' -->
      <parameter type-id='type-id-1693'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'mbstate_t*' -->
      <parameter type-id='type-id-1696'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- size_t wcsspn(const wchar_t*, const wchar_t*) -->
    <function-decl name='wcsspn' filepath='/usr/include/wchar.h' line='253' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- double wcstod(const wchar_t*, wchar_t**) -->
    <function-decl name='wcstod' filepath='/usr/include/wchar.h' line='448' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- double -->
      <return type-id='type-id-2'/>
    </function-decl>
    <!-- float wcstof(const wchar_t*, wchar_t**) -->
    <function-decl name='wcstof' filepath='/usr/include/wchar.h' line='455' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- float -->
      <return type-id='type-id-1559'/>
    </function-decl>
    <!-- wchar_t* wcstok(wchar_t*, const wchar_t*, wchar_t**) -->
    <function-decl name='wcstok' filepath='/usr/include/wchar.h' line='279' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- long int wcstol(const wchar_t*, wchar_t**, int) -->
    <function-decl name='wcstol' filepath='/usr/include/wchar.h' line='466' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long int -->
      <return type-id='type-id-85'/>
    </function-decl>
    <!-- unsigned long int wcstoul(const wchar_t*, wchar_t**, int) -->
    <function-decl name='wcstoul' filepath='/usr/include/wchar.h' line='471' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- unsigned long int -->
      <return type-id='type-id-5'/>
    </function-decl>
    <!-- size_t wcsxfrm(wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wcsxfrm' filepath='/usr/include/wchar.h' line='193' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- int wctob(wint_t) -->
    <function-decl name='wctob' filepath='/usr/include/wchar.h' line='355' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'typedef wint_t' -->
      <parameter type-id='type-id-1588'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int wmemcmp(const wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wmemcmp' filepath='/usr/include/wchar.h' line='322' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wmemcpy' filepath='/usr/include/wchar.h' line='327' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t) -->
    <function-decl name='wmemmove' filepath='/usr/include/wchar.h' line='332' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- wchar_t* wmemset(wchar_t*, wchar_t, size_t) -->
    <function-decl name='wmemset' filepath='/usr/include/wchar.h' line='336' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'wchar_t*' -->
      <parameter type-id='type-id-1743'/>
      <!-- parameter of type 'wchar_t' -->
      <parameter type-id='type-id-1582'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- wchar_t* -->
      <return type-id='type-id-1743'/>
    </function-decl>
    <!-- int wprintf(const wchar_t*, ...) -->
    <function-decl name='wprintf' filepath='/usr/include/wchar.h' line='599' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int wscanf(const wchar_t*, ...) -->
    <function-decl name='wscanf' filepath='/usr/include/wchar.h' line='640' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <parameter is-variadic='yes'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- long double wcstold(const wchar_t*, wchar_t**) -->
    <function-decl name='wcstold' filepath='/usr/include/wchar.h' line='457' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- long double -->
      <return type-id='type-id-1564'/>
    </function-decl>
    <!-- long long int wcstoll(const wchar_t*, wchar_t**, int) -->
    <function-decl name='wcstoll' filepath='/usr/include/wchar.h' line='481' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long long int -->
      <return type-id='type-id-1159'/>
    </function-decl>
    <!-- long long unsigned int wcstoull(const wchar_t*, wchar_t**, int) -->
    <function-decl name='wcstoull' filepath='/usr/include/wchar.h' line='488' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'const wchar_t*' -->
      <parameter type-id='type-id-1692'/>
      <!-- parameter of type 'wchar_t**' -->
      <parameter type-id='type-id-1744'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- long long unsigned int -->
      <return type-id='type-id-1160'/>
    </function-decl>
    <!-- char* setlocale(int, const char*) -->
    <function-decl name='setlocale' filepath='/usr/include/locale.h' line='125' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1'/>
      <!-- parameter of type 'const char*' -->
      <parameter type-id='type-id-57'/>
      <!-- char* -->
      <return type-id='type-id-118'/>
    </function-decl>
    <!-- lconv* localeconv() -->
    <function-decl name='localeconv' filepath='/usr/include/locale.h' line='128' column='1' visibility='default' binding='global' size-in-bits='64'>
      <!-- lconv* -->
      <return type-id='type-id-1695'/>
    </function-decl>
    <!-- namespace base -->
    <namespace-decl name='base'>
      <!-- struct base::MallocRange -->
      <class-decl name='MallocRange' size-in-bits='256' is-struct='yes' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='399' column='1' id='type-id-1630'>
        <member-type access='public'>
          <!-- enum base::MallocRange::Type -->
          <enum-decl name='Type' filepath='./src/gperftools/malloc_extension.h' line='400' column='1' id='type-id-1759'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='INUSE' value='0'/>
            <enumerator name='FREE' value='1'/>
            <enumerator name='UNMAPPED' value='2'/>
            <enumerator name='UNKNOWN' value='3'/>
          </enum-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- uintptr_t base::MallocRange::address -->
          <var-decl name='address' type-id='type-id-156' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='408' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- size_t base::MallocRange::length -->
          <var-decl name='length' type-id='type-id-62' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='409' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- base::MallocRange::Type base::MallocRange::type -->
          <var-decl name='type' type-id='type-id-1759' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='410' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- double base::MallocRange::fraction -->
          <var-decl name='fraction' type-id='type-id-2' visibility='default' filepath='./src/gperftools/malloc_extension.h' line='411' column='1'/>
        </data-member>
      </class-decl>
      <!-- enum base::LinkerInitialized -->
      <enum-decl name='LinkerInitialized' filepath='src/base/basictypes.h' line='381' column='1' id='type-id-95'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='LINKER_INITIALIZED' value='0'/>
      </enum-decl>
      <!-- namespace base::internal -->
      <namespace-decl name='internal'>
        <!-- struct base::internal::HookList<void (*)(const void*, size_t)> -->
        <class-decl name='HookList&lt;void (*)(const void*, size_t)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='./src/malloc_hook-inl.h' line='59' column='1' id='type-id-1222'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*, size_t)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
          <member-function access='public'>
            <!-- void (void*, typedef size_t)* base::internal::HookList<void (*)(const void*, size_t)>::GetSingular() -->
            <function-decl name='GetSingular' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv' filepath='src/malloc_hook-inl.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE11GetSingularEv'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- void (void*, typedef size_t)* -->
              <return type-id='type-id-337'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::empty() -->
            <function-decl name='empty' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv' filepath='src/malloc_hook-inl.h' line='80' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE5emptyEv'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void base::internal::HookList<void (*)(const void*, size_t)>::FixupPrivEndLocked() -->
            <function-decl name='FixupPrivEndLocked' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv' filepath='src/malloc_hook-inl.h' line='67' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE18FixupPrivEndLockedEv'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- void -->
              <return type-id='type-id-60'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- int base::internal::HookList<void (*)(const void*, size_t)>::Traverse(void (void*, typedef size_t)**, int) -->
            <function-decl name='Traverse' mangled-name='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i' filepath='src/malloc_hook-inl.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZNK4base8internal8HookListIPFvPKvmEE8TraverseEPS5_i'>
              <!-- implicit parameter of type 'const base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1227' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)**' -->
              <parameter type-id='type-id-1228' name='output_array' filepath='src/malloc_hook-inl.h' line='77' column='1'/>
              <!-- parameter of type 'int' -->
              <parameter type-id='type-id-1' name='n' filepath='src/malloc_hook-inl.h' line='77' column='1'/>
              <!-- int -->
              <return type-id='type-id-1'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- void (void*, typedef size_t)* base::internal::HookList<void (*)(const void*, size_t)>::ExchangeSingular(void (void*, typedef size_t)*) -->
            <function-decl name='ExchangeSingular' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_' filepath='src/malloc_hook-inl.h' line='90' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE16ExchangeSingularES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='90' column='1'/>
              <!-- void (void*, typedef size_t)* -->
              <return type-id='type-id-337'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Remove(void (void*, typedef size_t)*) -->
            <function-decl name='Remove' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_' filepath='src/malloc_hook-inl.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE6RemoveES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
          <member-function access='public'>
            <!-- bool base::internal::HookList<void (*)(const void*, size_t)>::Add(void (void*, typedef size_t)*) -->
            <function-decl name='Add' mangled-name='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_' filepath='src/malloc_hook-inl.h' line='65' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN4base8internal8HookListIPFvPKvmEE3AddES5_'>
              <!-- implicit parameter of type 'base::internal::HookList<void (*)(const void*, size_t)>* const' -->
              <parameter type-id='type-id-1188' name='this' is-artificial='yes'/>
              <!-- parameter of type 'void (void*, typedef size_t)*' -->
              <parameter type-id='type-id-337' name='value_as_t' filepath='src/malloc_hook-inl.h' line='72' column='1'/>
              <!-- bool -->
              <return type-id='type-id-61'/>
            </function-decl>
          </member-function>
        </class-decl>
        <!-- struct base::internal::HookList<void (*)(const void*)> -->
        <class-decl name='HookList&lt;void (*)(const void*)&gt;' size-in-bits='576' is-struct='yes' visibility='default' filepath='./src/malloc_hook-inl.h' line='59' column='1' id='type-id-1223'>
          <data-member access='public' layout-offset-in-bits='0'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_end -->
            <var-decl name='priv_end' type-id='type-id-922' visibility='default' filepath='src/malloc_hook-inl.h' line='101' column='1'/>
          </data-member>
          <data-member access='public' layout-offset-in-bits='64'>
            <!-- AtomicWord base::internal::HookList<void (*)(const void*)>::priv_data[8] -->
            <var-decl name='priv_data' type-id='type-id-923' visibility='default' filepath='src/malloc_hook-inl.h' line='102' column='1'/>
          </data-member>
        </class-decl>
      </namespace-decl>
      <!-- namespace base::subtle -->
      <namespace-decl name='subtle'>
        <!-- typedef int64_t base::subtle::Atomic64 -->
        <typedef-decl name='Atomic64' type-id='type-id-103' filepath='./src/base/atomicops-internals-x86.h' line='70' column='1' id='type-id-1224'/>
        <!-- Atomic32 base::subtle::NoBarrier_AtomicExchange(volatile Atomic32*, Atomic32) -->
        <function-decl name='NoBarrier_AtomicExchange' filepath='./src/base/atomicops-internals-x86.h' line='85' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
        <!-- Atomic32 base::subtle::NoBarrier_CompareAndSwap(volatile Atomic32*, Atomic32, Atomic32) -->
        <function-decl name='NoBarrier_CompareAndSwap' filepath='./src/base/atomicops-internals-x86.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
        <!-- base::subtle::Atomic64 base::subtle::NoBarrier_Load(const volatile base::subtle::Atomic64*) -->
        <function-decl name='NoBarrier_Load' filepath='./src/base/atomicops-internals-x86.h' line='245' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const volatile base::subtle::Atomic64*' -->
          <parameter type-id='type-id-1225'/>
          <!-- typedef base::subtle::Atomic64 -->
          <return type-id='type-id-1224'/>
        </function-decl>
        <!-- Atomic32 base::subtle::Acquire_CompareAndSwap(volatile Atomic32*, Atomic32, Atomic32) -->
        <function-decl name='Acquire_CompareAndSwap' filepath='./src/base/atomicops-internals-x86.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
        <!-- Atomic32 base::subtle::Release_AtomicExchange(volatile Atomic32*, Atomic32) -->
        <function-decl name='Release_AtomicExchange' filepath='./src/base/atomicops-internals-x86.h' line='100' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'volatile Atomic32*' -->
          <parameter type-id='type-id-108'/>
          <!-- parameter of type 'typedef Atomic32' -->
          <parameter type-id='type-id-100'/>
          <!-- typedef Atomic32 -->
          <return type-id='type-id-100'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- class tcmalloc::CentralFreeList -->
      <class-decl name='CentralFreeList' size-in-bits='9344' visibility='default' filepath='src/central_freelist.h' line='50' column='1' id='type-id-1706'>
        <member-type access='private'>
          <!-- struct tcmalloc::CentralFreeList::TCEntry -->
          <class-decl name='TCEntry' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/central_freelist.h' line='97' column='1' id='type-id-1567'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- void* tcmalloc::CentralFreeList::TCEntry::head -->
              <var-decl name='head' type-id='type-id-58' visibility='default' filepath='src/central_freelist.h' line='98' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- void* tcmalloc::CentralFreeList::TCEntry::tail -->
              <var-decl name='tail' type-id='type-id-58' visibility='default' filepath='src/central_freelist.h' line='99' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::CentralFreeList::kMaxNumTransferEntries -->
          <var-decl name='kMaxNumTransferEntries' type-id='type-id-144' visibility='default' filepath='src/central_freelist.h' line='111' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- SpinLock tcmalloc::CentralFreeList::lock_ -->
          <var-decl name='lock_' type-id='type-id-87' visibility='default' filepath='src/central_freelist.h' line='164' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::CentralFreeList::size_class_ -->
          <var-decl name='size_class_' type-id='type-id-62' visibility='default' filepath='src/central_freelist.h' line='167' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::Span tcmalloc::CentralFreeList::empty_ -->
          <var-decl name='empty_' type-id='type-id-148' visibility='default' filepath='src/central_freelist.h' line='168' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='512'>
          <!-- tcmalloc::Span tcmalloc::CentralFreeList::nonempty_ -->
          <var-decl name='nonempty_' type-id='type-id-148' visibility='default' filepath='src/central_freelist.h' line='169' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='896'>
          <!-- size_t tcmalloc::CentralFreeList::num_spans_ -->
          <var-decl name='num_spans_' type-id='type-id-62' visibility='default' filepath='src/central_freelist.h' line='170' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='960'>
          <!-- size_t tcmalloc::CentralFreeList::counter_ -->
          <var-decl name='counter_' type-id='type-id-62' visibility='default' filepath='src/central_freelist.h' line='171' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='1024'>
          <!-- tcmalloc::CentralFreeList::TCEntry tcmalloc::CentralFreeList::tc_slots_[64] -->
          <var-decl name='tc_slots_' type-id='type-id-1568' visibility='default' filepath='src/central_freelist.h' line='178' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9216'>
          <!-- int32_t tcmalloc::CentralFreeList::used_slots_ -->
          <var-decl name='used_slots_' type-id='type-id-76' visibility='default' filepath='src/central_freelist.h' line='182' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9248'>
          <!-- int32_t tcmalloc::CentralFreeList::cache_size_ -->
          <var-decl name='cache_size_' type-id='type-id-76' visibility='default' filepath='src/central_freelist.h' line='186' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='9280'>
          <!-- int32_t tcmalloc::CentralFreeList::max_cache_size_ -->
          <var-decl name='max_cache_size_' type-id='type-id-76' visibility='default' filepath='src/central_freelist.h' line='188' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::CentralFreeList::CentralFreeList() -->
          <function-decl name='CentralFreeList' filepath='src/central_freelist.h' line='55' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList*' -->
            <parameter type-id='type-id-1707' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpans(int, void**, void**) -->
          <function-decl name='FetchFromOneSpans' mangled-name='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_' filepath='src/central_freelist.cc' line='290' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList17FetchFromOneSpansEiPPvS2_'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='N' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='start' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='end' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Init(size_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc15CentralFreeList4InitEm' filepath='src/central_freelist.cc' line='47' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList4InitEm'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='cl' filepath='src/central_freelist.cc' line='47' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::Populate() -->
          <function-decl name='Populate' mangled-name='_ZN8tcmalloc15CentralFreeList8PopulateEv' filepath='src/central_freelist.cc' line='321' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList8PopulateEv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::FetchFromOneSpansSafe(int, void**, void**) -->
          <function-decl name='FetchFromOneSpansSafe' mangled-name='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_' filepath='src/central_freelist.cc' line='281' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList21FetchFromOneSpansSafeEiPPvS2_'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='N' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='start' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='end' filepath='src/central_freelist.cc' line='290' column='1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::CentralFreeList::OverheadBytes() -->
          <function-decl name='OverheadBytes' mangled-name='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv' filepath='src/central_freelist.cc' line='375' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList13OverheadBytesEv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-62'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::tc_length() -->
          <function-decl name='tc_length' mangled-name='_ZN8tcmalloc15CentralFreeList9tc_lengthEv' filepath='src/central_freelist.cc' line='370' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList9tc_lengthEv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) -->
          <function-decl name='RemoveRange' mangled-name='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i' filepath='src/central_freelist.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='start' filepath='src/central_freelist.cc' line='246' column='1'/>
            <!-- parameter of type 'void**' -->
            <parameter type-id='type-id-151' name='end' filepath='src/central_freelist.cc' line='246' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='N' filepath='src/central_freelist.cc' line='246' column='1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseToSpans(void*) -->
          <function-decl name='ReleaseToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv' filepath='src/central_freelist.cc' line='104' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14ReleaseToSpansEPv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='object' filepath='src/central_freelist.cc' line='104' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::ReleaseListToSpans(void*) -->
          <function-decl name='ReleaseListToSpans' mangled-name='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv' filepath='src/central_freelist.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList18ReleaseListToSpansEPv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='object' filepath='src/central_freelist.cc' line='104' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::ShrinkCache(int, bool) -->
          <function-decl name='ShrinkCache' mangled-name='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib' filepath='src/central_freelist.cc' line='203' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11ShrinkCacheEib'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='locked_size_class' filepath='src/central_freelist.cc' line='203' column='1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-61' name='force' filepath='src/central_freelist.cc' line='203' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- bool tcmalloc::CentralFreeList::EvictRandomSizeClass(bool) -->
          <function-decl name='EvictRandomSizeClass' mangled-name='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib' filepath='src/central_freelist.cc' line='151' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList20EvictRandomSizeClassEib'>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-61'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::CentralFreeList::MakeCacheSpace() -->
          <function-decl name='MakeCacheSpace' mangled-name='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv' filepath='src/central_freelist.cc' line='167' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList14MakeCacheSpaceEv'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::CentralFreeList::InsertRange(void*, void*, int) -->
          <function-decl name='InsertRange' mangled-name='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i' filepath='src/central_freelist.cc' line='231' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc15CentralFreeList11InsertRangeEPvS1_i'>
            <!-- implicit parameter of type 'tcmalloc::CentralFreeList* const' -->
            <parameter type-id='type-id-1708' name='this' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='start' filepath='src/central_freelist.cc' line='231' column='1'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58' name='end' filepath='src/central_freelist.cc' line='231' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='N' filepath='src/central_freelist.cc' line='231' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::Sampler -->
      <class-decl name='Sampler' size-in-bits='128' visibility='default' filepath='src/sampler.h' line='103' column='1' id='type-id-1721'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- size_t tcmalloc::Sampler::bytes_until_sample_ -->
          <var-decl name='bytes_until_sample_' type-id='type-id-62' visibility='default' filepath='src/sampler.h' line='130' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- uint64_t tcmalloc::Sampler::rnd_ -->
          <var-decl name='rnd_' type-id='type-id-15' visibility='default' filepath='src/sampler.h' line='131' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::Sampler::kFastlogNumBits -->
          <var-decl name='kFastlogNumBits' type-id='type-id-144' visibility='default' filepath='src/sampler.h' line='136' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::Sampler::kFastlogMask -->
          <var-decl name='kFastlogMask' type-id='type-id-144' visibility='default' filepath='src/sampler.h' line='137' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static double tcmalloc::Sampler::log_table_[1024] -->
          <var-decl name='log_table_' type-id='type-id-1558' mangled-name='_ZN8tcmalloc7Sampler10log_table_E' visibility='default' filepath='src/sampler.h' line='138' column='1' elf-symbol-id='_ZN8tcmalloc7Sampler10log_table_E'/>
        </data-member>
        <member-function access='private'>
          <!-- int tcmalloc::Sampler::GetSamplePeriod() -->
          <function-decl name='GetSamplePeriod' mangled-name='_ZN8tcmalloc7Sampler15GetSamplePeriodEv' filepath='src/sampler.cc' line='73' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler15GetSamplePeriodEv'>
            <!-- implicit parameter of type 'tcmalloc::Sampler* const' -->
            <parameter type-id='type-id-1723' name='this' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- size_t tcmalloc::Sampler::PickNextSamplingPoint() -->
          <function-decl name='PickNextSamplingPoint' mangled-name='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv' filepath='src/sampler.cc' line='112' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PickNextSamplingPointEv'>
            <!-- implicit parameter of type 'tcmalloc::Sampler* const' -->
            <parameter type-id='type-id-1723' name='this' is-artificial='yes'/>
            <!-- typedef size_t -->
            <return type-id='type-id-62'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::Sampler::Init(uint32_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7Sampler4InitEj' filepath='src/sampler.cc' line='78' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler4InitEj'>
            <!-- implicit parameter of type 'tcmalloc::Sampler* const' -->
            <parameter type-id='type-id-1723' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef uint32_t' -->
            <parameter type-id='type-id-12' name='seed' filepath='src/sampler.cc' line='78' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::PopulateFastLog2Table() -->
          <function-decl name='PopulateFastLog2Table' mangled-name='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv' filepath='src/sampler.cc' line='66' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler21PopulateFastLog2TableEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Sampler::InitStatics() -->
          <function-decl name='InitStatics' mangled-name='_ZN8tcmalloc7Sampler11InitStaticsEv' filepath='src/sampler.cc' line='97' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7Sampler11InitStaticsEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::CentralFreeListPaddedTo<16> -->
      <class-decl name='CentralFreeListPaddedTo&lt;16&gt;' size-in-bits='9728' visibility='default' filepath='src/central_freelist.h' line='196' column='1' id='type-id-1760'>
        <!-- class tcmalloc::CentralFreeList -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1706'/>
        <data-member access='private' layout-offset-in-bits='9312'>
          <!-- char tcmalloc::CentralFreeListPaddedTo<16>::pad_[48] -->
          <var-decl name='pad_' type-id='type-id-188' visibility='default' filepath='src/central_freelist.h' line='198' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::ThreadCache -->
      <class-decl name='ThreadCache' size-in-bits='17408' visibility='default' filepath='src/thread_cache.h' line='66' column='1' id='type-id-1683'>
        <member-type access='private'>
          <!-- class tcmalloc::ThreadCache::FreeList -->
          <class-decl name='FreeList' size-in-bits='192' visibility='default' filepath='src/thread_cache.h' line='132' column='1' id='type-id-1573'>
            <data-member access='private' layout-offset-in-bits='0'>
              <!-- void* tcmalloc::ThreadCache::FreeList::list_ -->
              <var-decl name='list_' type-id='type-id-58' visibility='default' filepath='src/thread_cache.h' line='134' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='64'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::length_ -->
              <var-decl name='length_' type-id='type-id-12' visibility='default' filepath='src/thread_cache.h' line='138' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='96'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::lowater_ -->
              <var-decl name='lowater_' type-id='type-id-12' visibility='default' filepath='src/thread_cache.h' line='139' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='128'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::max_length_ -->
              <var-decl name='max_length_' type-id='type-id-12' visibility='default' filepath='src/thread_cache.h' line='140' column='1'/>
            </data-member>
            <data-member access='private' layout-offset-in-bits='160'>
              <!-- uint32_t tcmalloc::ThreadCache::FreeList::length_overages_ -->
              <var-decl name='length_overages_' type-id='type-id-12' visibility='default' filepath='src/thread_cache.h' line='144' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::ThreadCache::ThreadLocalData -->
          <class-decl name='ThreadLocalData' size-in-bits='128' is-struct='yes' visibility='default' filepath='src/thread_cache.h' line='262' column='1' id='type-id-1761'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::ThreadLocalData::heap -->
              <var-decl name='heap' type-id='type-id-1728' visibility='default' filepath='src/thread_cache.h' line='263' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- size_t tcmalloc::ThreadCache::ThreadLocalData::min_size_for_slow_path -->
              <var-decl name='min_size_for_slow_path' type-id='type-id-62' visibility='default' filepath='src/thread_cache.h' line='270' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- enum tcmalloc::ThreadCache::__anonymous_enum__ -->
          <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/thread_cache.h' line='69' column='1' id='type-id-1762'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='have_tls' value='1'/>
          </enum-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::next_ -->
          <var-decl name='next_' type-id='type-id-1728' visibility='default' filepath='src/thread_cache.h' line='75' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::prev_ -->
          <var-decl name='prev_' type-id='type-id-1728' visibility='default' filepath='src/thread_cache.h' line='76' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::ThreadCache::ThreadLocalData tcmalloc::ThreadCache::threadlocal_data_ -->
          <var-decl name='threadlocal_data_' type-id='type-id-1761' mangled-name='_ZN8tcmalloc11ThreadCache17threadlocal_data_E' visibility='default' filepath='src/thread_cache.h' line='272' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache17threadlocal_data_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static bool tcmalloc::ThreadCache::tsd_inited_ -->
          <var-decl name='tsd_inited_' type-id='type-id-61' mangled-name='_ZN8tcmalloc11ThreadCache11tsd_inited_E' visibility='default' filepath='src/thread_cache.h' line='280' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache11tsd_inited_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static pthread_key_t tcmalloc::ThreadCache::heap_key_ -->
          <var-decl name='heap_key_' type-id='type-id-1232' mangled-name='_ZN8tcmalloc11ThreadCache9heap_key_E' visibility='default' filepath='src/thread_cache.h' line='281' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache9heap_key_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::ThreadCache* tcmalloc::ThreadCache::thread_heaps_ -->
          <var-decl name='thread_heaps_' type-id='type-id-1728' mangled-name='_ZN8tcmalloc11ThreadCache13thread_heaps_E' visibility='default' filepath='src/thread_cache.h' line='284' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache13thread_heaps_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static int tcmalloc::ThreadCache::thread_heap_count_ -->
          <var-decl name='thread_heap_count_' type-id='type-id-1' mangled-name='_ZN8tcmalloc11ThreadCache18thread_heap_count_E' visibility='default' filepath='src/thread_cache.h' line='285' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache18thread_heap_count_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::ThreadCache* tcmalloc::ThreadCache::next_memory_steal_ -->
          <var-decl name='next_memory_steal_' type-id='type-id-1728' mangled-name='_ZN8tcmalloc11ThreadCache18next_memory_steal_E' visibility='default' filepath='src/thread_cache.h' line='291' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache18next_memory_steal_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static size_t tcmalloc::ThreadCache::overall_thread_cache_size_ -->
          <var-decl name='overall_thread_cache_size_' type-id='type-id-62' mangled-name='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E' visibility='default' filepath='src/thread_cache.h' line='294' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache26overall_thread_cache_size_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static volatile size_t tcmalloc::ThreadCache::per_thread_cache_size_ -->
          <var-decl name='per_thread_cache_size_' type-id='type-id-1742' mangled-name='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E' visibility='default' filepath='src/thread_cache.h' line='300' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache22per_thread_cache_size_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static ssize_t tcmalloc::ThreadCache::unclaimed_cache_space_ -->
          <var-decl name='unclaimed_cache_space_' type-id='type-id-291' mangled-name='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E' visibility='default' filepath='src/thread_cache.h' line='304' column='1' elf-symbol-id='_ZN8tcmalloc11ThreadCache22unclaimed_cache_space_E'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- size_t tcmalloc::ThreadCache::size_ -->
          <var-decl name='size_' type-id='type-id-62' visibility='default' filepath='src/thread_cache.h' line='309' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- size_t tcmalloc::ThreadCache::max_size_ -->
          <var-decl name='max_size_' type-id='type-id-62' visibility='default' filepath='src/thread_cache.h' line='310' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='256'>
          <!-- tcmalloc::Sampler tcmalloc::ThreadCache::sampler_ -->
          <var-decl name='sampler_' type-id='type-id-1721' visibility='default' filepath='src/thread_cache.h' line='313' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='384'>
          <!-- tcmalloc::ThreadCache::FreeList tcmalloc::ThreadCache::list_[88] -->
          <var-decl name='list_' type-id='type-id-1574' visibility='default' filepath='src/thread_cache.h' line='315' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='17280'>
          <!-- pthread_t tcmalloc::ThreadCache::tid_ -->
          <var-decl name='tid_' type-id='type-id-195' visibility='default' filepath='src/thread_cache.h' line='317' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='17344'>
          <!-- bool tcmalloc::ThreadCache::in_setspecific_ -->
          <var-decl name='in_setspecific_' type-id='type-id-61' visibility='default' filepath='src/thread_cache.h' line='318' column='1'/>
        </data-member>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::GetCache() -->
          <function-decl name='GetCache' mangled-name='_ZN8tcmalloc11ThreadCache8GetCacheEv' filepath='src/thread_cache.h' line='405' column='1' declared-inline='yes' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache8GetCacheEv'>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1728'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::IncreaseCacheLimitLocked() -->
          <function-decl name='IncreaseCacheLimitLocked' mangled-name='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv' filepath='src/thread_cache.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache24IncreaseCacheLimitLockedEv'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::RecomputePerThreadCacheSize() -->
          <function-decl name='RecomputePerThreadCacheSize' mangled-name='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv' filepath='src/thread_cache.cc' line='431' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache27RecomputePerThreadCacheSizeEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::GetThreadStats(uint64_t*) -->
          <function-decl name='GetThreadStats' mangled-name='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_' filepath='src/thread_cache.cc' line='454' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache14GetThreadStatsEPmS1_'>
            <!-- parameter of type 'uint64_t*' -->
            <parameter type-id='type-id-1732'/>
            <!-- parameter of type 'uint64_t*' -->
            <parameter type-id='type-id-1732'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::set_overall_thread_cache_size() -->
          <function-decl name='set_overall_thread_cache_size' mangled-name='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm' filepath='src/thread_cache.cc' line='465' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache29set_overall_thread_cache_sizeEm'>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::IncreaseCacheLimit() -->
          <function-decl name='IncreaseCacheLimit' mangled-name='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv' filepath='src/thread_cache.cc' line='235' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache18IncreaseCacheLimitEv'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::InitTSD() -->
          <function-decl name='InitTSD' mangled-name='_ZN8tcmalloc11ThreadCache7InitTSDEv' filepath='src/thread_cache.cc' line='287' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7InitTSDEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::InitModule() -->
          <function-decl name='InitModule' mangled-name='_ZN8tcmalloc11ThreadCache10InitModuleEv' filepath='src/thread_cache.cc' line='274' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache10InitModuleEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::ThreadCache::GetSamplePeriod() -->
          <function-decl name='GetSamplePeriod' mangled-name='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv' filepath='src/thread_cache.cc' line='270' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache15GetSamplePeriodEv'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::ReleaseToCentralCache(tcmalloc::ThreadCache::FreeList*, size_t, int) -->
          <function-decl name='ReleaseToCentralCache' mangled-name='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi' filepath='src/thread_cache.cc' line='180' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache21ReleaseToCentralCacheEPNS0_8FreeListEmi'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
            <parameter type-id='type-id-1730' name='src' filepath='src/thread_cache.cc' line='180' column='1'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='cl' filepath='src/thread_cache.cc' line='180' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='N' filepath='src/thread_cache.cc' line='180' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Scavenge() -->
          <function-decl name='Scavenge' mangled-name='_ZN8tcmalloc11ThreadCache8ScavengeEv' filepath='src/thread_cache.cc' line='201' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache8ScavengeEv'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::ListTooLong(tcmalloc::ThreadCache::FreeList*, size_t) -->
          <function-decl name='ListTooLong' mangled-name='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm' filepath='src/thread_cache.cc' line='155' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache11ListTooLongEPNS0_8FreeListEm'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::ThreadCache::FreeList*' -->
            <parameter type-id='type-id-1730' name='list' filepath='src/thread_cache.cc' line='155' column='1'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='cl' filepath='src/thread_cache.cc' line='155' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Cleanup() -->
          <function-decl name='Cleanup' mangled-name='_ZN8tcmalloc11ThreadCache7CleanupEv' filepath='src/thread_cache.cc' line='107' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7CleanupEv'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::DeleteCache() -->
          <function-decl name='DeleteCache' mangled-name='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_' filepath='src/thread_cache.cc' line='413' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache11DeleteCacheEPS0_'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache*' -->
            <parameter type-id='type-id-1728' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::DestroyThreadCache() -->
          <function-decl name='DestroyThreadCache' mangled-name='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv' filepath='src/thread_cache.cc' line='400' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache18DestroyThreadCacheEPv'>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::ThreadCache::BecomeIdle() -->
          <function-decl name='BecomeIdle' mangled-name='_ZN8tcmalloc11ThreadCache10BecomeIdleEv' filepath='src/thread_cache.cc' line='376' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache10BecomeIdleEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void* tcmalloc::ThreadCache::FetchFromCentralCache(size_t, size_t) -->
          <function-decl name='FetchFromCentralCache' mangled-name='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm' filepath='src/thread_cache.cc' line='118' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache21FetchFromCentralCacheEmm'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='size' filepath='src/thread_cache.h' line='348' column='1'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='cl' filepath='src/thread_cache.h' line='348' column='1'/>
            <!-- void* -->
            <return type-id='type-id-58'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::ThreadCache::Init(pthread_t) -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc11ThreadCache4InitEm' filepath='src/thread_cache.cc' line='79' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache4InitEm'>
            <!-- implicit parameter of type 'tcmalloc::ThreadCache* const' -->
            <parameter type-id='type-id-1729' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef pthread_t' -->
            <parameter type-id='type-id-195' name='tid' filepath='src/thread_cache.cc' line='79' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::NewHeap() -->
          <function-decl name='NewHeap' mangled-name='_ZN8tcmalloc11ThreadCache7NewHeapEm' filepath='src/thread_cache.cc' line='358' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache7NewHeapEm'>
            <!-- parameter of type 'typedef pthread_t' -->
            <parameter type-id='type-id-195'/>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1728'/>
          </function-decl>
        </member-function>
        <member-function access='private' static='yes'>
          <!-- tcmalloc::ThreadCache* tcmalloc::ThreadCache::CreateCacheIfNecessary() -->
          <function-decl name='CreateCacheIfNecessary' mangled-name='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv' filepath='src/thread_cache.cc' line='305' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc11ThreadCache22CreateCacheIfNecessaryEv'>
            <!-- tcmalloc::ThreadCache* -->
            <return type-id='type-id-1728'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::CentralFreeListPadded -->
      <class-decl name='CentralFreeListPadded' size-in-bits='9728' visibility='default' filepath='src/central_freelist.h' line='206' column='1' id='type-id-1569'>
        <!-- class tcmalloc::CentralFreeListPaddedTo<16> -->
        <base-class access='public' layout-offset-in-bits='0' type-id='type-id-1760'/>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::Span> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::Span&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1439'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::Span>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::Span>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::Span>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::Static -->
      <class-decl name='Static' size-in-bits='8' visibility='default' filepath='src/static_vars.h' line='50' column='1' id='type-id-1763'>
        <data-member access='private' static='yes'>
          <!-- static SpinLock tcmalloc::Static::pageheap_lock_ -->
          <var-decl name='pageheap_lock_' type-id='type-id-87' mangled-name='_ZN8tcmalloc6Static14pageheap_lock_E' visibility='default' filepath='src/static_vars.h' line='90' column='1' elf-symbol-id='_ZN8tcmalloc6Static14pageheap_lock_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::SizeMap tcmalloc::Static::sizemap_ -->
          <var-decl name='sizemap_' type-id='type-id-1724' mangled-name='_ZN8tcmalloc6Static8sizemap_E' visibility='default' filepath='src/static_vars.h' line='97' column='1' elf-symbol-id='_ZN8tcmalloc6Static8sizemap_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::CentralFreeListPadded tcmalloc::Static::central_cache_[88] -->
          <var-decl name='central_cache_' type-id='type-id-1570' mangled-name='_ZN8tcmalloc6Static14central_cache_E' visibility='default' filepath='src/static_vars.h' line='98' column='1' elf-symbol-id='_ZN8tcmalloc6Static14central_cache_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::Span> tcmalloc::Static::span_allocator_ -->
          <var-decl name='span_allocator_' type-id='type-id-1439' mangled-name='_ZN8tcmalloc6Static15span_allocator_E' visibility='default' filepath='src/static_vars.h' line='99' column='1' elf-symbol-id='_ZN8tcmalloc6Static15span_allocator_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> tcmalloc::Static::stacktrace_allocator_ -->
          <var-decl name='stacktrace_allocator_' type-id='type-id-1676' mangled-name='_ZN8tcmalloc6Static21stacktrace_allocator_E' visibility='default' filepath='src/static_vars.h' line='100' column='1' elf-symbol-id='_ZN8tcmalloc6Static21stacktrace_allocator_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::Span tcmalloc::Static::sampled_objects_ -->
          <var-decl name='sampled_objects_' type-id='type-id-148' mangled-name='_ZN8tcmalloc6Static16sampled_objects_E' visibility='default' filepath='src/static_vars.h' line='101' column='1' elf-symbol-id='_ZN8tcmalloc6Static16sampled_objects_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> tcmalloc::Static::bucket_allocator_ -->
          <var-decl name='bucket_allocator_' type-id='type-id-1440' mangled-name='_ZN8tcmalloc6Static17bucket_allocator_E' visibility='default' filepath='src/static_vars.h' line='102' column='1' elf-symbol-id='_ZN8tcmalloc6Static17bucket_allocator_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::StackTrace* tcmalloc::Static::growth_stacks_ -->
          <var-decl name='growth_stacks_' type-id='type-id-1727' mangled-name='_ZN8tcmalloc6Static14growth_stacks_E' visibility='default' filepath='src/static_vars.h' line='108' column='1' elf-symbol-id='_ZN8tcmalloc6Static14growth_stacks_E'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static tcmalloc::PageHeap* tcmalloc::Static::pageheap_ -->
          <var-decl name='pageheap_' type-id='type-id-1710' mangled-name='_ZN8tcmalloc6Static9pageheap_E' visibility='default' filepath='src/static_vars.h' line='110' column='1' elf-symbol-id='_ZN8tcmalloc6Static9pageheap_E'/>
        </data-member>
        <member-function access='private' static='yes'>
          <!-- void tcmalloc::Static::InitStaticVars() -->
          <function-decl name='InitStaticVars' mangled-name='_ZN8tcmalloc6Static14InitStaticVarsEv' filepath='src/static_vars.cc' line='82' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc6Static14InitStaticVarsEv'>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::StackTrace> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::StackTrace&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1676'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::StackTrace>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::StackTraceTable::Bucket&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1440'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::StackTraceTable::Bucket>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::LogItem -->
      <class-decl name='LogItem' size-in-bits='128' visibility='default' filepath='src/internal_logging.h' line='70' column='1' id='type-id-1145'>
        <member-type access='private'>
          <!-- enum tcmalloc::LogItem::Tag -->
          <enum-decl name='Tag' filepath='src/internal_logging.h' line='83' column='1' id='type-id-1156'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='kStr' value='0'/>
            <enumerator name='kSigned' value='1'/>
            <enumerator name='kUnsigned' value='2'/>
            <enumerator name='kPtr' value='3'/>
            <enumerator name='kEnd' value='4'/>
          </enum-decl>
        </member-type>
        <member-type access='private'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} -->
          <union-decl name='__anonymous_union__' size-in-bits='64' is-anonymous='yes' visibility='default' filepath='src/internal_logging.h' line='91' column='1' id='type-id-1157'>
            <data-member access='public'>
              <!-- const char* str -->
              <var-decl name='str' type-id='type-id-57' visibility='default' filepath='src/internal_logging.h' line='92' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- void* ptr -->
              <var-decl name='ptr' type-id='type-id-58' visibility='default' filepath='src/internal_logging.h' line='93' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- int64_t snum -->
              <var-decl name='snum' type-id='type-id-103' visibility='default' filepath='src/internal_logging.h' line='94' column='1'/>
            </data-member>
            <data-member access='public'>
              <!-- uint64_t unum -->
              <var-decl name='unum' type-id='type-id-15' visibility='default' filepath='src/internal_logging.h' line='95' column='1'/>
            </data-member>
          </union-decl>
        </member-type>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::LogItem::Tag tcmalloc::LogItem::tag_ -->
          <var-decl name='tag_' type-id='type-id-1156' visibility='default' filepath='src/internal_logging.h' line='90' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- union {const char* str; void* ptr; int64_t snum; uint64_t unum;} tcmalloc::LogItem::u_ -->
          <var-decl name='u_' type-id='type-id-1157' visibility='default' filepath='src/internal_logging.h' line='96' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem() -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='72' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(const char*) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='73' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'const char*' -->
            <parameter type-id='type-id-57'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='74' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='75' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long int' -->
            <parameter type-id='type-id-85'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='76' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long long int' -->
            <parameter type-id='type-id-1159'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(unsigned int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='77' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'unsigned int' -->
            <parameter type-id='type-id-64'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(unsigned long int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='78' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'unsigned long int' -->
            <parameter type-id='type-id-5'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(long long unsigned int) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='79' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'long long unsigned int' -->
            <parameter type-id='type-id-1160'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::LogItem::LogItem(void*) -->
          <function-decl name='LogItem' filepath='src/internal_logging.h' line='80' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::LogItem*' -->
            <parameter type-id='type-id-1158' is-artificial='yes'/>
            <!-- parameter of type 'void*' -->
            <parameter type-id='type-id-58'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::PageHeap -->
      <class-decl name='PageHeap' size-in-bits='4293888' visibility='default' filepath='src/page_heap.h' line='104' column='1' id='type-id-1669'>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::Stats -->
          <class-decl name='Stats' size-in-bits='256' is-struct='yes' visibility='default' filepath='src/page_heap.h' line='145' column='1' id='type-id-1617'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::system_bytes -->
              <var-decl name='system_bytes' type-id='type-id-15' visibility='default' filepath='src/page_heap.h' line='147' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::free_bytes -->
              <var-decl name='free_bytes' type-id='type-id-15' visibility='default' filepath='src/page_heap.h' line='148' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::unmapped_bytes -->
              <var-decl name='unmapped_bytes' type-id='type-id-15' visibility='default' filepath='src/page_heap.h' line='149' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='192'>
              <!-- uint64_t tcmalloc::PageHeap::Stats::committed_bytes -->
              <var-decl name='committed_bytes' type-id='type-id-15' visibility='default' filepath='src/page_heap.h' line='150' column='1'/>
            </data-member>
            <member-function access='public' constructor='yes'>
              <!-- tcmalloc::PageHeap::Stats::Stats() -->
              <function-decl name='Stats' filepath='src/page_heap.h' line='146' column='1' visibility='default' binding='global' size-in-bits='64'>
                <!-- implicit parameter of type 'tcmalloc::PageHeap::Stats*' -->
                <parameter type-id='type-id-1717' is-artificial='yes'/>
                <!-- void -->
                <return type-id='type-id-60'/>
              </function-decl>
            </member-function>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::LargeSpanStats -->
          <class-decl name='LargeSpanStats' size-in-bits='192' is-struct='yes' visibility='default' filepath='src/page_heap.h' line='164' column='1' id='type-id-1712'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::spans -->
              <var-decl name='spans' type-id='type-id-98' visibility='default' filepath='src/page_heap.h' line='165' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='64'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::normal_pages -->
              <var-decl name='normal_pages' type-id='type-id-98' visibility='default' filepath='src/page_heap.h' line='166' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='128'>
              <!-- int64 tcmalloc::PageHeap::LargeSpanStats::returned_pages -->
              <var-decl name='returned_pages' type-id='type-id-98' visibility='default' filepath='src/page_heap.h' line='167' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::SmallSpanStats -->
          <class-decl name='SmallSpanStats' size-in-bits='16384' is-struct='yes' visibility='default' filepath='src/page_heap.h' line='155' column='1' id='type-id-1714'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- int64 tcmalloc::PageHeap::SmallSpanStats::normal_length[128] -->
              <var-decl name='normal_length' type-id='type-id-1560' visibility='default' filepath='src/page_heap.h' line='158' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='8192'>
              <!-- int64 tcmalloc::PageHeap::SmallSpanStats::returned_length[128] -->
              <var-decl name='returned_length' type-id='type-id-1560' visibility='default' filepath='src/page_heap.h' line='159' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- struct tcmalloc::PageHeap::SpanList -->
          <class-decl name='SpanList' size-in-bits='768' is-struct='yes' visibility='default' filepath='src/page_heap.h' line='232' column='1' id='type-id-1571'>
            <data-member access='public' layout-offset-in-bits='0'>
              <!-- tcmalloc::Span tcmalloc::PageHeap::SpanList::normal -->
              <var-decl name='normal' type-id='type-id-148' visibility='default' filepath='src/page_heap.h' line='233' column='1'/>
            </data-member>
            <data-member access='public' layout-offset-in-bits='384'>
              <!-- tcmalloc::Span tcmalloc::PageHeap::SpanList::returned -->
              <var-decl name='returned' type-id='type-id-148' visibility='default' filepath='src/page_heap.h' line='234' column='1'/>
            </data-member>
          </class-decl>
        </member-type>
        <member-type access='private'>
          <!-- typedef TCMalloc_PageMap3<35> tcmalloc::PageHeap::PageMap -->
          <typedef-decl name='PageMap' type-id='type-id-1282' filepath='src/page_heap.h' line='224' column='1' id='type-id-1764'/>
        </member-type>
        <member-type access='private'>
          <!-- typedef PackedCache<35, long unsigned int> tcmalloc::PageHeap::PageMapCache -->
          <typedef-decl name='PageMapCache' type-id='type-id-1595' filepath='src/page_heap.h' line='225' column='1' id='type-id-1765'/>
        </member-type>
        <data-member access='private' static='yes'>
          <!-- static const size_t tcmalloc::PageHeap::kPageMapBigAllocationThreshold -->
          <var-decl name='kPageMapBigAllocationThreshold' type-id='type-id-117' visibility='default' filepath='src/page_heap.h' line='203' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeap::kMinSystemAlloc -->
          <var-decl name='kMinSystemAlloc' type-id='type-id-144' visibility='default' filepath='src/page_heap.h' line='212' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeap::kMaxReleaseDelay -->
          <var-decl name='kMaxReleaseDelay' type-id='type-id-144' visibility='default' filepath='src/page_heap.h' line='217' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeap::kDefaultReleaseDelay -->
          <var-decl name='kDefaultReleaseDelay' type-id='type-id-144' visibility='default' filepath='src/page_heap.h' line='221' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- tcmalloc::PageHeap::PageMap tcmalloc::PageHeap::pagemap_ -->
          <var-decl name='pagemap_' type-id='type-id-1764' visibility='default' filepath='src/page_heap.h' line='226' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- tcmalloc::PageHeap::PageMapCache tcmalloc::PageHeap::pagemap_cache_ -->
          <var-decl name='pagemap_cache_' type-id='type-id-1765' visibility='default' filepath='src/page_heap.h' line='227' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4194432'>
          <!-- tcmalloc::PageHeap::SpanList tcmalloc::PageHeap::large_ -->
          <var-decl name='large_' type-id='type-id-1571' visibility='default' filepath='src/page_heap.h' line='238' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4195200'>
          <!-- tcmalloc::PageHeap::SpanList tcmalloc::PageHeap::free_[128] -->
          <var-decl name='free_' type-id='type-id-1572' visibility='default' filepath='src/page_heap.h' line='241' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293504'>
          <!-- tcmalloc::PageHeap::Stats tcmalloc::PageHeap::stats_ -->
          <var-decl name='stats_' type-id='type-id-1617' visibility='default' filepath='src/page_heap.h' line='244' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293760'>
          <!-- int64_t tcmalloc::PageHeap::scavenge_counter_ -->
          <var-decl name='scavenge_counter_' type-id='type-id-103' visibility='default' filepath='src/page_heap.h' line='302' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293824'>
          <!-- int tcmalloc::PageHeap::release_index_ -->
          <var-decl name='release_index_' type-id='type-id-1' visibility='default' filepath='src/page_heap.h' line='305' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='4293856'>
          <!-- bool tcmalloc::PageHeap::aggressive_decommit_ -->
          <var-decl name='aggressive_decommit_' type-id='type-id-61' visibility='default' filepath='src/page_heap.h' line='307' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::PageHeap::PageHeap() -->
          <function-decl name='PageHeap' mangled-name='_ZN8tcmalloc8PageHeapC1Ev' filepath='src/page_heap.h' line='106' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeapC1Ev'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap*' -->
            <parameter type-id='type-id-1710' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::MayMergeSpans(tcmalloc::Span*, tcmalloc::Span*) -->
          <function-decl name='MayMergeSpans' mangled-name='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_' filepath='src/page_heap.cc' line='316' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap13MayMergeSpansEPNS_4SpanES2_'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.cc' line='316' column='1'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='other' filepath='src/page_heap.cc' line='316' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RegisterSizeClass(tcmalloc::Span*, size_t) -->
          <function-decl name='RegisterSizeClass' mangled-name='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm' filepath='src/page_heap.cc' line='518' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17RegisterSizeClassEPNS_4SpanEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.cc' line='518' column='1'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='sc' filepath='src/page_heap.cc' line='518' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetLargeSpanStats(tcmalloc::PageHeap::LargeSpanStats*) -->
          <function-decl name='GetLargeSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE' filepath='src/page_heap.cc' line='537' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetLargeSpanStatsEPNS0_14LargeSpanStatsE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::LargeSpanStats*' -->
            <parameter type-id='type-id-1713' name='result' filepath='src/page_heap.cc' line='537' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GetNextRange(PageID, base::MallocRange*) -->
          <function-decl name='GetNextRange' mangled-name='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE' filepath='src/page_heap.cc' line='551' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12GetNextRangeEmPN4base11MallocRangeE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef PageID' -->
            <parameter type-id='type-id-153' name='start' filepath='src/page_heap.cc' line='551' column='1'/>
            <!-- parameter of type 'base::MallocRange*' -->
            <parameter type-id='type-id-1631' name='r' filepath='src/page_heap.cc' line='551' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::Check() -->
          <function-decl name='Check' mangled-name='_ZN8tcmalloc8PageHeap5CheckEv' filepath='src/page_heap.cc' line='646' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CheckEv'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckList(tcmalloc::Span*, Length, Length, int) -->
          <function-decl name='CheckList' mangled-name='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi' filepath='src/page_heap.cc' line='663' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap9CheckListEPNS_4SpanEmmi'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='list' filepath='src/page_heap.cc' line='663' column='1'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='min_pages' filepath='src/page_heap.cc' line='663' column='1'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='max_pages' filepath='src/page_heap.cc' line='663' column='1'/>
            <!-- parameter of type 'int' -->
            <parameter type-id='type-id-1' name='freelist' filepath='src/page_heap.cc' line='664' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::CheckExpensive() -->
          <function-decl name='CheckExpensive' mangled-name='_ZN8tcmalloc8PageHeap14CheckExpensiveEv' filepath='src/page_heap.cc' line='652' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap14CheckExpensiveEv'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Split(tcmalloc::Span*, Length) -->
          <function-decl name='Split' mangled-name='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm' filepath='src/page_heap.cc' line='222' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5SplitEPNS_4SpanEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.cc' line='222' column='1'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='222' column='1'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-155'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::GetSmallSpanStats(tcmalloc::PageHeap::SmallSpanStats*) -->
          <function-decl name='GetSmallSpanStats' mangled-name='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE' filepath='src/page_heap.cc' line='530' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17GetSmallSpanStatsEPNS0_14SmallSpanStatsE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SmallSpanStats*' -->
            <parameter type-id='type-id-1715' name='result' filepath='src/page_heap.cc' line='530' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::RemoveFromFreeList(tcmalloc::Span*) -->
          <function-decl name='RemoveFromFreeList' mangled-name='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='415' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap18RemoveFromFreeListEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.h' line='259' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::PrependToFreeList(tcmalloc::Span*) -->
          <function-decl name='PrependToFreeList' mangled-name='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='403' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17PrependToFreeListEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.h' line='259' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::DecommitSpan(tcmalloc::Span*) -->
          <function-decl name='DecommitSpan' mangled-name='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='246' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap12DecommitSpanEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.cc' line='246' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::MergeIntoFreeList(tcmalloc::Span*) -->
          <function-decl name='MergeIntoFreeList' mangled-name='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE' filepath='src/page_heap.cc' line='323' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap17MergeIntoFreeListEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.h' line='259' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseLastNormalSpan(tcmalloc::PageHeap::SpanList*) -->
          <function-decl name='ReleaseLastNormalSpan' mangled-name='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE' filepath='src/page_heap.cc' line='456' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap21ReleaseLastNormalSpanEPNS0_8SpanListE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::PageHeap::SpanList*' -->
            <parameter type-id='type-id-1716' name='slist' filepath='src/page_heap.cc' line='456' column='1'/>
            <!-- typedef Length -->
            <return type-id='type-id-154'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- Length tcmalloc::PageHeap::ReleaseAtLeastNPages(Length) -->
          <function-decl name='ReleaseAtLeastNPages' mangled-name='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm' filepath='src/page_heap.cc' line='471' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap20ReleaseAtLeastNPagesEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='num_pages' filepath='src/page_heap.cc' line='471' column='1'/>
            <!-- typedef Length -->
            <return type-id='type-id-154'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::EnsureLimit(Length, bool) -->
          <function-decl name='EnsureLimit' mangled-name='_ZN8tcmalloc8PageHeap11EnsureLimitEmb' filepath='src/page_heap.cc' line='494' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap11EnsureLimitEmb'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='494' column='1'/>
            <!-- parameter of type 'bool' -->
            <parameter type-id='type-id-61' name='withRelease' filepath='src/page_heap.cc' line='494' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::IncrementalScavenge(Length) -->
          <function-decl name='IncrementalScavenge' mangled-name='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm' filepath='src/page_heap.cc' line='425' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap19IncrementalScavengeEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='425' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::Delete(tcmalloc::Span*) -->
          <function-decl name='Delete' mangled-name='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE' filepath='src/page_heap.cc' line='299' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap6DeleteEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.h' line='259' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- bool tcmalloc::PageHeap::GrowHeap(Length) -->
          <function-decl name='GrowHeap' mangled-name='_ZN8tcmalloc8PageHeap8GrowHeapEm' filepath='src/page_heap.cc' line='590' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap8GrowHeapEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='590' column='1'/>
            <!-- bool -->
            <return type-id='type-id-61'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::PageHeap::CommitSpan(tcmalloc::Span*) -->
          <function-decl name='CommitSpan' mangled-name='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE' filepath='src/page_heap.cc' line='240' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10CommitSpanEPNS_4SpanE'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.h' line='259' column='1'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::Carve(tcmalloc::Span*, Length) -->
          <function-decl name='Carve' mangled-name='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm' filepath='src/page_heap.cc' line='256' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap5CarveEPNS_4SpanEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'tcmalloc::Span*' -->
            <parameter type-id='type-id-155' name='span' filepath='src/page_heap.cc' line='222' column='1'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='222' column='1'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-155'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::AllocLarge(Length) -->
          <function-decl name='AllocLarge' mangled-name='_ZN8tcmalloc8PageHeap10AllocLargeEm' filepath='src/page_heap.cc' line='164' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap10AllocLargeEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='164' column='1'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-155'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::SearchFreeAndLargeLists(Length) -->
          <function-decl name='SearchFreeAndLargeLists' mangled-name='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm' filepath='src/page_heap.cc' line='80' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap23SearchFreeAndLargeListsEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='164' column='1'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-155'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- tcmalloc::Span* tcmalloc::PageHeap::New(Length) -->
          <function-decl name='New' mangled-name='_ZN8tcmalloc8PageHeap3NewEm' filepath='src/page_heap.cc' line='115' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc8PageHeap3NewEm'>
            <!-- implicit parameter of type 'tcmalloc::PageHeap* const' -->
            <parameter type-id='type-id-1711' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef Length' -->
            <parameter type-id='type-id-154' name='n' filepath='src/page_heap.cc' line='164' column='1'/>
            <!-- tcmalloc::Span* -->
            <return type-id='type-id-155'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- class tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> -->
      <class-decl name='PageHeapAllocator&lt;tcmalloc::ThreadCache&gt;' size-in-bits='256' visibility='default' filepath='src/page_heap_allocator.h' line='47' column='1' id='type-id-1679'>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::kAllocIncrement -->
          <var-decl name='kAllocIncrement' type-id='type-id-144' visibility='default' filepath='src/page_heap_allocator.h' line='99' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- char* tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_area_ -->
          <var-decl name='free_area_' type-id='type-id-118' visibility='default' filepath='src/page_heap_allocator.h' line='102' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='64'>
          <!-- size_t tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_avail_ -->
          <var-decl name='free_avail_' type-id='type-id-62' visibility='default' filepath='src/page_heap_allocator.h' line='103' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::free_list_ -->
          <var-decl name='free_list_' type-id='type-id-58' visibility='default' filepath='src/page_heap_allocator.h' line='106' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='192'>
          <!-- int tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>::inuse_ -->
          <var-decl name='inuse_' type-id='type-id-1' visibility='default' filepath='src/page_heap_allocator.h' line='109' column='1'/>
        </data-member>
      </class-decl>
      <!-- class tcmalloc::SizeMap -->
      <class-decl name='SizeMap' size-in-bits='31488' visibility='default' filepath='src/common.h' line='161' column='1' id='type-id-1724'>
        <data-member access='private' layout-offset-in-bits='0'>
          <!-- int tcmalloc::SizeMap::num_objects_to_move_[88] -->
          <var-decl name='num_objects_to_move_' type-id='type-id-1562' visibility='default' filepath='src/common.h' line='168' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const int tcmalloc::SizeMap::kMaxSmallSize -->
          <var-decl name='kMaxSmallSize' type-id='type-id-144' visibility='default' filepath='src/common.h' line='192' column='1'/>
        </data-member>
        <data-member access='private' static='yes'>
          <!-- static const size_t tcmalloc::SizeMap::kClassArraySize -->
          <var-decl name='kClassArraySize' type-id='type-id-117' visibility='default' filepath='src/common.h' line='194' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='2816'>
          <!-- unsigned char tcmalloc::SizeMap::class_array_[2169] -->
          <var-decl name='class_array_' type-id='type-id-1575' visibility='default' filepath='src/common.h' line='195' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='20224'>
          <!-- size_t tcmalloc::SizeMap::class_to_size_[88] -->
          <var-decl name='class_to_size_' type-id='type-id-1566' visibility='default' filepath='src/common.h' line='212' column='1'/>
        </data-member>
        <data-member access='private' layout-offset-in-bits='25856'>
          <!-- size_t tcmalloc::SizeMap::class_to_pages_[88] -->
          <var-decl name='class_to_pages_' type-id='type-id-1566' visibility='default' filepath='src/common.h' line='215' column='1'/>
        </data-member>
        <member-function access='private' constructor='yes'>
          <!-- tcmalloc::SizeMap::SizeMap() -->
          <function-decl name='SizeMap' filepath='src/common.h' line='220' column='1' visibility='default' binding='global' size-in-bits='64'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap*' -->
            <parameter type-id='type-id-1725' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- int tcmalloc::SizeMap::NumMoveSize(size_t) -->
          <function-decl name='NumMoveSize' mangled-name='_ZN8tcmalloc7SizeMap11NumMoveSizeEm' filepath='src/common.cc' line='99' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap11NumMoveSizeEm'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap* const' -->
            <parameter type-id='type-id-1726' name='this' is-artificial='yes'/>
            <!-- parameter of type 'typedef size_t' -->
            <parameter type-id='type-id-62' name='size' filepath='src/common.cc' line='99' column='1'/>
            <!-- int -->
            <return type-id='type-id-1'/>
          </function-decl>
        </member-function>
        <member-function access='private'>
          <!-- void tcmalloc::SizeMap::Init() -->
          <function-decl name='Init' mangled-name='_ZN8tcmalloc7SizeMap4InitEv' filepath='src/common.cc' line='122' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='_ZN8tcmalloc7SizeMap4InitEv'>
            <!-- implicit parameter of type 'tcmalloc::SizeMap* const' -->
            <parameter type-id='type-id-1726' name='this' is-artificial='yes'/>
            <!-- void -->
            <return type-id='type-id-60'/>
          </function-decl>
        </member-function>
      </class-decl>
      <!-- enum tcmalloc::LogMode -->
      <enum-decl name='LogMode' filepath='src/internal_logging.h' line='61' column='1' id='type-id-1154'>
        <underlying-type type-id='type-id-89'/>
        <enumerator name='kLog' value='0'/>
        <enumerator name='kCrash' value='1'/>
        <enumerator name='kCrashWithStats' value='2'/>
      </enum-decl>
      <!-- struct tcmalloc::Span -->
      <class-decl name='Span' size-in-bits='384' is-struct='yes' visibility='default' filepath='src/span.h' line='45' column='1' id='type-id-148'>
        <member-type access='public'>
          <!-- enum tcmalloc::Span::__anonymous_enum__ -->
          <enum-decl name='__anonymous_enum__' is-anonymous='yes' filepath='src/span.h' line='65' column='1' id='type-id-152'>
            <underlying-type type-id='type-id-89'/>
            <enumerator name='IN_USE' value='0'/>
            <enumerator name='ON_NORMAL_FREELIST' value='1'/>
            <enumerator name='ON_RETURNED_FREELIST' value='2'/>
          </enum-decl>
        </member-type>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- PageID tcmalloc::Span::start -->
          <var-decl name='start' type-id='type-id-153' visibility='default' filepath='src/span.h' line='46' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- Length tcmalloc::Span::length -->
          <var-decl name='length' type-id='type-id-154' visibility='default' filepath='src/span.h' line='47' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- tcmalloc::Span* tcmalloc::Span::next -->
          <var-decl name='next' type-id='type-id-155' visibility='default' filepath='src/span.h' line='48' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='192'>
          <!-- tcmalloc::Span* tcmalloc::Span::prev -->
          <var-decl name='prev' type-id='type-id-155' visibility='default' filepath='src/span.h' line='49' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='256'>
          <!-- void* tcmalloc::Span::objects -->
          <var-decl name='objects' type-id='type-id-58' visibility='default' filepath='src/span.h' line='50' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- unsigned int tcmalloc::Span::refcount -->
          <var-decl name='refcount' type-id='type-id-64' visibility='default' filepath='src/span.h' line='51' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='16'>
          <!-- unsigned int tcmalloc::Span::sizeclass -->
          <var-decl name='sizeclass' type-id='type-id-64' visibility='default' filepath='src/span.h' line='52' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='24'>
          <!-- unsigned int tcmalloc::Span::location -->
          <var-decl name='location' type-id='type-id-64' visibility='default' filepath='src/span.h' line='53' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='26'>
          <!-- unsigned int tcmalloc::Span::sample -->
          <var-decl name='sample' type-id='type-id-64' visibility='default' filepath='src/span.h' line='54' column='1'/>
        </data-member>
      </class-decl>
      <!-- struct tcmalloc::StackTrace -->
      <class-decl name='StackTrace' size-in-bits='2112' is-struct='yes' visibility='default' filepath='src/common.h' line='266' column='1' id='type-id-1443'>
        <data-member access='public' layout-offset-in-bits='0'>
          <!-- uintptr_t tcmalloc::StackTrace::size -->
          <var-decl name='size' type-id='type-id-156' visibility='default' filepath='src/common.h' line='267' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='64'>
          <!-- uintptr_t tcmalloc::StackTrace::depth -->
          <var-decl name='depth' type-id='type-id-156' visibility='default' filepath='src/common.h' line='268' column='1'/>
        </data-member>
        <data-member access='public' layout-offset-in-bits='128'>
          <!-- void* tcmalloc::StackTrace::stack[31] -->
          <var-decl name='stack' type-id='type-id-1460' visibility='default' filepath='src/common.h' line='269' column='1'/>
        </data-member>
      </class-decl>
      <!-- void tcmalloc::SLL_SetNext(void*, void*) -->
      <function-decl name='SLL_SetNext' filepath='src/linked_list.h' line='48' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void* tcmalloc::SLL_Next(void*) -->
      <function-decl name='SLL_Next' filepath='src/linked_list.h' line='44' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- void* -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- void tcmalloc::SLL_Push(void**, void*) -->
      <function-decl name='SLL_Push' filepath='src/linked_list.h' line='52' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void*' -->
        <parameter type-id='type-id-58'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- void* tcmalloc::SLL_Pop(void**) -->
      <function-decl name='SLL_Pop' filepath='src/linked_list.h' line='57' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void* -->
        <return type-id='type-id-58'/>
      </function-decl>
      <!-- Length tcmalloc::pages(size_t) -->
      <function-decl name='pages' filepath='src/common.h' line='151' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'typedef size_t' -->
        <parameter type-id='type-id-62'/>
        <!-- typedef Length -->
        <return type-id='type-id-154'/>
      </function-decl>
      <!-- namespace tcmalloc::commandlineflags -->
      <namespace-decl name='commandlineflags'>
        <!-- long long int tcmalloc::commandlineflags::StringToLongLong(const char*, long long int) -->
        <function-decl name='StringToLongLong' filepath='src/base/commandlineflags.h' line='132' column='1' visibility='default' binding='global' size-in-bits='64'>
          <!-- parameter of type 'const char*' -->
          <parameter type-id='type-id-57'/>
          <!-- parameter of type 'long long int' -->
          <parameter type-id='type-id-1159'/>
          <!-- long long int -->
          <return type-id='type-id-1159'/>
        </function-decl>
      </namespace-decl>
    </namespace-decl>
    <!-- namespace FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead -->
    <namespace-decl name='FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead'>
      <!-- int64 FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_tcmalloc_large_alloc_report_threshold -->
      <var-decl name='FLAGS_tcmalloc_large_alloc_report_threshold' type-id='type-id-98' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE' visibility='default' filepath='src/tcmalloc.cc' line='183' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead43FLAGS_tcmalloc_large_alloc_report_thresholdE'/>
      <!-- char FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead::FLAGS_notcmalloc_large_alloc_report_threshold -->
      <var-decl name='FLAGS_notcmalloc_large_alloc_report_threshold' type-id='type-id-65' mangled-name='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE' visibility='default' filepath='src/tcmalloc.cc' line='195' column='1' elf-symbol-id='_ZN61FLAG__namespace_do_not_use_directly_use_DECLARE_int64_instead45FLAGS_notcmalloc_large_alloc_report_thresholdE'/>
    </namespace-decl>
    <!-- const char* tc_version(int*, int*, const char**) -->
    <function-decl name='tc_version' mangled-name='tc_version' filepath='src/tcmalloc.cc' line='1547' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_version'>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='major' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- parameter of type 'int*' -->
      <parameter type-id='type-id-963' name='minor' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- parameter of type 'const char**' -->
      <parameter type-id='type-id-1653' name='patch' filepath='src/tcmalloc.cc' line='1548' column='1'/>
      <!-- const char* -->
      <return type-id='type-id-57'/>
    </function-decl>
    <!-- int tc_set_new_mode(int) -->
    <function-decl name='tc_set_new_mode' mangled-name='tc_set_new_mode' filepath='src/tcmalloc.cc' line='1560' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_set_new_mode'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='flag' filepath='src/tcmalloc.cc' line='1560' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- int tc_mallopt(int, int) -->
    <function-decl name='tc_mallopt' mangled-name='tc_mallopt' filepath='src/tcmalloc.cc' line='1720' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_mallopt'>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='cmd' filepath='src/tcmalloc.cc' line='1720' column='1'/>
      <!-- parameter of type 'int' -->
      <parameter type-id='type-id-1' name='value' filepath='src/tcmalloc.cc' line='1720' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- size_t tc_malloc_size(void*) -->
    <function-decl name='tc_malloc_size' mangled-name='tc_malloc_size' filepath='src/tcmalloc.cc' line='1730' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_size'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='ptr' filepath='src/tcmalloc.cc' line='1730' column='1'/>
      <!-- typedef size_t -->
      <return type-id='type-id-62'/>
    </function-decl>
    <!-- void tc_malloc_stats() -->
    <function-decl name='tc_malloc_stats' mangled-name='tc_malloc_stats' filepath='src/tcmalloc.cc' line='1716' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_stats'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- mallinfo tc_mallinfo() -->
    <function-decl name='tc_mallinfo' mangled-name='tc_mallinfo' filepath='src/tcmalloc.cc' line='1725' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_mallinfo'>
      <!-- struct mallinfo -->
      <return type-id='type-id-1624'/>
    </function-decl>
    <!-- int tc_posix_memalign(void**, size_t, size_t) -->
    <function-decl name='tc_posix_memalign' mangled-name='tc_posix_memalign' filepath='src/tcmalloc.cc' line='1676' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_posix_memalign'>
      <!-- parameter of type 'void**' -->
      <parameter type-id='type-id-151' name='result_ptr' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='align' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='size' filepath='src/tcmalloc.cc' line='1677' column='1'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-decl>
    <!-- void* tc_pvalloc(size_t) -->
    <function-decl name='tc_pvalloc' mangled-name='tc_pvalloc' filepath='src/tcmalloc.cc' line='1704' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_pvalloc'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_valloc(size_t) -->
    <function-decl name='tc_valloc' mangled-name='tc_valloc' filepath='src/tcmalloc.cc' line='1696' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_valloc'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_memalign(size_t, size_t) -->
    <function-decl name='tc_memalign' mangled-name='tc_memalign' filepath='src/tcmalloc.cc' line='1669' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_memalign'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_newarray_nothrow(size_t, const std::nothrow_t&) -->
    <function-decl name='tc_newarray_nothrow' mangled-name='tc_newarray_nothrow' filepath='src/tcmalloc.cc' line='1652' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_newarray_nothrow'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='size' filepath='src/tcmalloc.cc' line='1652' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1666'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_newarray(size_t) -->
    <function-decl name='tc_newarray' mangled-name='tc_newarray' filepath='src/tcmalloc.cc' line='1641' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_newarray'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_new_nothrow(size_t, const std::nothrow_t&) -->
    <function-decl name='tc_new_nothrow' mangled-name='tc_new_nothrow' filepath='src/tcmalloc.cc' line='1622' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_new_nothrow'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62' name='size' filepath='src/tcmalloc.cc' line='1652' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1666'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_new(size_t) -->
    <function-decl name='tc_new' mangled-name='tc_new' filepath='src/tcmalloc.cc' line='1611' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_new'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_malloc(size_t) -->
    <function-decl name='tc_malloc' mangled-name='tc_malloc' filepath='src/tcmalloc.cc' line='1573' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void* tc_malloc_skip_new_handler(size_t) -->
    <function-decl name='tc_malloc_skip_new_handler' mangled-name='tc_malloc_skip_new_handler' filepath='src/tcmalloc.cc' line='1734' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_malloc_skip_new_handler'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void tc_free(void*) -->
    <function-decl name='tc_free' mangled-name='tc_free' filepath='src/tcmalloc.cc' line='1579' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_free'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void* tc_calloc(size_t, size_t) -->
    <function-decl name='tc_calloc' mangled-name='tc_calloc' filepath='src/tcmalloc.cc' line='1584' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_calloc'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void tc_cfree(void*) -->
    <function-decl name='tc_cfree' mangled-name='tc_cfree' filepath='src/tcmalloc.cc' line='1591' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_cfree'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void tc_delete(void*) -->
    <function-decl name='tc_delete' mangled-name='tc_delete' filepath='src/tcmalloc.cc' line='1628' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_delete'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void tc_delete_nothrow(void*, const std::nothrow_t&) -->
    <function-decl name='tc_delete_nothrow' mangled-name='tc_delete_nothrow' filepath='src/tcmalloc.cc' line='1636' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_delete_nothrow'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='p' filepath='src/tcmalloc.cc' line='1636' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1666'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void tc_deletearray(void*) -->
    <function-decl name='tc_deletearray' mangled-name='tc_deletearray' filepath='src/tcmalloc.cc' line='1659' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_deletearray'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void tc_deletearray_nothrow(void*, const std::nothrow_t&) -->
    <function-decl name='tc_deletearray_nothrow' mangled-name='tc_deletearray_nothrow' filepath='src/tcmalloc.cc' line='1664' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_deletearray_nothrow'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58' name='p' filepath='src/tcmalloc.cc' line='1636' column='1'/>
      <!-- parameter of type 'const std::nothrow_t&' -->
      <parameter type-id='type-id-1666'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-decl>
    <!-- void* tc_realloc(void*, size_t) -->
    <function-decl name='tc_realloc' mangled-name='tc_realloc' filepath='src/tcmalloc.cc' line='1596' column='1' visibility='default' binding='global' size-in-bits='64' elf-symbol-id='tc_realloc'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-decl>
    <!-- void (void*, void*)* __free_hook -->
    <var-decl name='__free_hook' type-id='type-id-1735' mangled-name='__free_hook' visibility='default' filepath='src/libc_override_glibc.h' line='139' column='1' elf-symbol-id='__free_hook'/>
    <!-- void* (typedef size_t, void*)* __malloc_hook -->
    <var-decl name='__malloc_hook' type-id='type-id-1739' mangled-name='__malloc_hook' visibility='default' filepath='src/libc_override_glibc.h' line='135' column='1' elf-symbol-id='__malloc_hook'/>
    <!-- void* (void*, typedef size_t, void*)* __realloc_hook -->
    <var-decl name='__realloc_hook' type-id='type-id-1741' mangled-name='__realloc_hook' visibility='default' filepath='src/libc_override_glibc.h' line='137' column='1' elf-symbol-id='__realloc_hook'/>
    <!-- void* (typedef size_t, typedef size_t, void*)* __memalign_hook -->
    <var-decl name='__memalign_hook' type-id='type-id-1737' mangled-name='__memalign_hook' visibility='default' filepath='src/libc_override_glibc.h' line='141' column='1' elf-symbol-id='__memalign_hook'/>
    <!-- int (void*, void*) -->
    <function-type size-in-bits='64' id='type-id-1694'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- int -->
      <return type-id='type-id-1'/>
    </function-type>
    <!-- void () -->
    <function-type size-in-bits='64' id='type-id-948'>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*) -->
    <function-type size-in-bits='64' id='type-id-951'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, const base::MallocRange*) -->
    <function-type size-in-bits='64' id='type-id-962'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'const base::MallocRange*' -->
      <parameter type-id='type-id-1648'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, size_t) -->
    <function-type size-in-bits='64' id='type-id-957'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void (void*, void*) -->
    <function-type size-in-bits='64' id='type-id-1734'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void -->
      <return type-id='type-id-60'/>
    </function-type>
    <!-- void* (size_t, size_t, void*) -->
    <function-type size-in-bits='64' id='type-id-1736'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (size_t, void*) -->
    <function-type size-in-bits='64' id='type-id-1738'>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (unsigned long int) -->
    <function-type size-in-bits='64' id='type-id-958'>
      <!-- parameter of type 'unsigned long int' -->
      <parameter type-id='type-id-5'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-type>
    <!-- void* (void*, size_t, void*) -->
    <function-type size-in-bits='64' id='type-id-1740'>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- parameter of type 'typedef size_t' -->
      <parameter type-id='type-id-62'/>
      <!-- parameter of type 'void*' -->
      <parameter type-id='type-id-58'/>
      <!-- void* -->
      <return type-id='type-id-58'/>
    </function-type>
  </abi-instr>
  <abi-instr address-size='64' path='src/thread_cache.cc' comp-dir-path='/tmp/legendre/spack-stage/spack-stage-kFgaKP/gperftools-2.4' language='LANG_C_plus_plus'>
    <!-- const tcmalloc::ThreadCache* const -->
    <qualified-type-def type-id='type-id-1685' const='yes' id='type-id-1766'/>
    <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache>* const -->
    <qualified-type-def type-id='type-id-1720' const='yes' id='type-id-1767'/>
    <!-- namespace std -->
    <namespace-decl name='std'>
      <!-- const double& std::max<double>(const double&, const double&) -->
      <function-decl name='max&lt;double&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='209' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const double&' -->
        <parameter type-id='type-id-1434'/>
        <!-- parameter of type 'const double&' -->
        <parameter type-id='type-id-1434'/>
        <!-- const double& -->
        <return type-id='type-id-1434'/>
      </function-decl>
      <!-- const int& std::min<int>(const int&, const int&) -->
      <function-decl name='min&lt;int&gt;' filepath='/usr/lib/gcc/x86_64-redhat-linux/4.4.7/../../../../include/c++/4.4.7/bits/stl_algobase.h' line='186' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'const int&' -->
        <parameter type-id='type-id-145'/>
        <!-- parameter of type 'const int&' -->
        <parameter type-id='type-id-145'/>
        <!-- const int& -->
        <return type-id='type-id-145'/>
      </function-decl>
    </namespace-decl>
    <!-- namespace tcmalloc -->
    <namespace-decl name='tcmalloc'>
      <!-- void tcmalloc::SLL_PopRange(void**, int, void**, void**) -->
      <function-decl name='SLL_PopRange' filepath='src/linked_list.h' line='67' column='1' visibility='default' binding='global' size-in-bits='64'>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'int' -->
        <parameter type-id='type-id-1'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- parameter of type 'void**' -->
        <parameter type-id='type-id-151'/>
        <!-- void -->
        <return type-id='type-id-60'/>
      </function-decl>
      <!-- tcmalloc::PageHeapAllocator<tcmalloc::ThreadCache> tcmalloc::threadcache_allocator -->
      <var-decl name='threadcache_allocator' type-id='type-id-1679' mangled-name='_ZN8tcmalloc21threadcache_allocatorE' visibility='default' filepath='src/thread_cache.cc' line='67' column='1' elf-symbol-id='_ZN8tcmalloc21threadcache_allocatorE'/>
    </namespace-decl>
  </abi-instr>
</abi-corpus>
