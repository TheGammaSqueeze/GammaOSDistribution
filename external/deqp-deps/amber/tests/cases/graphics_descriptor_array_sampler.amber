#!amber
# Copyright 2020 The Amber Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vert_shader PASSTHROUGH

SHADER fragment frag_shader GLSL
#version 430
layout(location = 0) out vec4 color_out;
uniform layout(set=0, binding=0) texture2D tex;
uniform layout(set=0, binding=1) sampler tex_sampler[2];
void main() {
  // Sample outside texture to get border color.
  vec4 black = texture(sampler2D(tex, tex_sampler[0]), vec2(2.0));
  vec4 white = texture(sampler2D(tex, tex_sampler[1]), vec2(2.0));
  color_out = vec4(white.x, black.y, white.z, black.w);
}
END

IMAGE texture FORMAT R8G8B8A8_UNORM DIM_2D WIDTH 256 HEIGHT 256
IMAGE framebuffer FORMAT B8G8R8A8_UNORM DIM_2D WIDTH 256 HEIGHT 256
SAMPLER sampler0 ADDRESS_MODE_U clamp_to_border BORDER_COLOR float_opaque_black
SAMPLER sampler1 ADDRESS_MODE_U clamp_to_border BORDER_COLOR float_opaque_white

BUFFER position DATA_TYPE vec2<float> DATA
-0.75 -0.75
 0.75 -0.75
 0.75  0.75
-0.75  0.75
END

PIPELINE graphics pipeline
  ATTACH vert_shader
  ATTACH frag_shader
  BIND BUFFER texture AS sampled_image DESCRIPTOR_SET 0 BINDING 0
  BIND SAMPLER_ARRAY sampler0 sampler1 DESCRIPTOR_SET 0 BINDING 1
  VERTEX_DATA position LOCATION 0
  BIND BUFFER framebuffer AS color LOCATION 0
END

CLEAR_COLOR pipeline 0 0 0 255
CLEAR pipeline
RUN pipeline DRAW_ARRAY AS TRIANGLE_FAN START_IDX 0 COUNT 4

EXPECT framebuffer IDX 1 1 SIZE 1 1 EQ_RGBA 0 0 0 255
EXPECT framebuffer IDX 128 128 SIZE 1 1 EQ_RGBA 255 0 255 255
