#!amber
#
# Copyright 2020 The Amber Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SHADER vertex vert_shader GLSL
#version 430

layout(location = 0) in vec4 position;
layout(location = 0) out vec4 frag_color;

layout(set = 0, binding = 0) readonly buffer block1 {
  vec4 in_color;
};

void main() {
  gl_Position = position;
  frag_color = in_color;
}
END

SHADER fragment frag_shader GLSL
#version 430

layout(location = 0) in vec4 frag_color;
layout(location = 0) out vec4 final_color;

void main() {
  final_color = frag_color;
}
END

BUFFER data_buf1 DATA_TYPE float DATA  1.0 0.0  0.0 1.0 END
BUFFER data_buf2 DATA_TYPE float DATA  0.0 1.0  0.0 1.0 END
BUFFER data_buf3 DATA_TYPE float DATA  0.0 0.0  1.0 1.0 END
BUFFER data_buf4 DATA_TYPE float DATA  1.0 0.0  1.0 1.0 END
BUFFER data_buf5 DATA_TYPE float DATA  1.0 1.0  0.0 1.0 END

BUFFER framebuffer FORMAT B8G8R8A8_UNORM
BUFFER depthstencil FORMAT D32_SFLOAT_S8_UINT

SAMPLER sampler

PIPELINE graphics pipeline1
  ATTACH vert_shader
  ATTACH frag_shader

  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER framebuffer AS color LOCATION 0
  BIND BUFFER depthstencil AS depth_stencil
  BIND BUFFER data_buf1 AS storage DESCRIPTOR_SET 0 BINDING 0

  STENCIL front_and_back
    TEST on
    FAIL_OP replace
    PASS_OP replace
    DEPTH_FAIL_OP keep
    COMPARE_OP always
    COMPARE_MASK 255
    WRITE_MASK 255
    REFERENCE 32
  END
END

DERIVE_PIPELINE pipeline2 FROM pipeline1
  BIND BUFFER data_buf2 AS storage DESCRIPTOR_SET 0 BINDING 0

  STENCIL front_and_back
    TEST on
    FAIL_OP increment_and_clamp
    PASS_OP invert
    DEPTH_FAIL_OP keep
    COMPARE_OP equal
    COMPARE_MASK 255
    WRITE_MASK 255
    REFERENCE 32
  END
END

DERIVE_PIPELINE pipeline3 FROM pipeline1
  BIND BUFFER data_buf3 AS storage DESCRIPTOR_SET 0 BINDING 0

  STENCIL front_and_back
    TEST on
    FAIL_OP keep
    PASS_OP keep
    DEPTH_FAIL_OP keep
    COMPARE_OP equal
    COMPARE_MASK 255
    WRITE_MASK 255
    REFERENCE 32
  END
END

DERIVE_PIPELINE pipeline4 FROM pipeline1
  BIND BUFFER data_buf4 AS storage DESCRIPTOR_SET 0 BINDING 0

  STENCIL front_and_back
    TEST on
    FAIL_OP keep
    PASS_OP keep
    DEPTH_FAIL_OP keep
    COMPARE_OP equal
    COMPARE_MASK 255
    WRITE_MASK 255
    REFERENCE 1
  END
END

DERIVE_PIPELINE pipeline5 FROM pipeline1
  BIND BUFFER data_buf5 AS storage DESCRIPTOR_SET 0 BINDING 0

  STENCIL front_and_back
    TEST on
    FAIL_OP keep
    PASS_OP keep
    DEPTH_FAIL_OP keep
    COMPARE_OP equal
    COMPARE_MASK 255
    WRITE_MASK 255
    REFERENCE 223
  END
END

CLEAR_STENCIL pipeline1 0
CLEAR_COLOR pipeline1 255 255 255 255
CLEAR pipeline1
RUN pipeline1 DRAW_RECT POS   0   0 SIZE 200 200
RUN pipeline2 DRAW_RECT POS   56 56 SIZE 200 200
RUN pipeline3 DRAW_RECT POS   0   0 SIZE 256 256
RUN pipeline4 DRAW_RECT POS   0   0 SIZE 256 256
RUN pipeline5 DRAW_RECT POS   0   0 SIZE 256 256

EXPECT framebuffer IDX   0   0 SIZE 1 1 EQ_RGBA 0   0   255 255
EXPECT framebuffer IDX 128 128 SIZE 1 1 EQ_RGBA 255 255   0 255
EXPECT framebuffer IDX 255 255 SIZE 1 1 EQ_RGBA 255 0   255 255
EXPECT framebuffer IDX 255   0 SIZE 1 1 EQ_RGBA 255 255 255 255
EXPECT framebuffer IDX   0 255 SIZE 1 1 EQ_RGBA 255 255 255 255
