// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FLOAT_TESTING_H_
#define FLATBUFFERS_GENERATED_FLOAT_TESTING_H_

#include "flatbuffers/flatbuffers.h"

namespace testing {

struct TestTableFloat;
struct TestTableFloatBuilder;

struct TestTableFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestTableFloatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE { VT_TEST_FLOAT = 4 };
  float test_float() const {
    return GetField<float>(VT_TEST_FLOAT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) && VerifyField<float>(verifier, VT_TEST_FLOAT) && verifier.EndTable();
  }
};

struct TestTableFloatBuilder {
  typedef TestTableFloat Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_test_float(float test_float) {
    fbb_.AddElement<float>(TestTableFloat::VT_TEST_FLOAT, test_float, 0.0f);
  }
  explicit TestTableFloatBuilder(flatbuffers::FlatBufferBuilder& _fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestTableFloatBuilder& operator=(const TestTableFloatBuilder&);
  flatbuffers::Offset<TestTableFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestTableFloat>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestTableFloat> CreateTestTableFloat(
    flatbuffers::FlatBufferBuilder& _fbb, float test_float = 0.0f) {
  TestTableFloatBuilder builder_(_fbb);
  builder_.add_test_float(test_float);
  return builder_.Finish();
}

inline const testing::TestTableFloat* GetTestTableFloat(const void* buf) {
  return flatbuffers::GetRoot<testing::TestTableFloat>(buf);
}

inline const testing::TestTableFloat* GetSizePrefixedTestTableFloat(const void* buf) {
  return flatbuffers::GetSizePrefixedRoot<testing::TestTableFloat>(buf);
}

inline bool VerifyTestTableFloatBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifyBuffer<testing::TestTableFloat>(nullptr);
}

inline bool VerifySizePrefixedTestTableFloatBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifySizePrefixedBuffer<testing::TestTableFloat>(nullptr);
}

inline const char* TestTableFloatExtension() {
  return "bfbs";
}

inline void FinishTestTableFloatBuffer(
    flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<testing::TestTableFloat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestTableFloatBuffer(
    flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<testing::TestTableFloat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace testing

#endif  // FLATBUFFERS_GENERATED_FLOAT_TESTING_H_
