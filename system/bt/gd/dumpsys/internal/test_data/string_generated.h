// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_STRING_TESTING_H_
#define FLATBUFFERS_GENERATED_STRING_TESTING_H_

#include "flatbuffers/flatbuffers.h"

namespace testing {

struct TestTableString;
struct TestTableStringBuilder;

struct TestTableString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestTableStringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE { VT_TEST_STRING = 4 };
  const flatbuffers::String* test_string() const {
    return GetPointer<const flatbuffers::String*>(VT_TEST_STRING);
  }
  bool Verify(flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_TEST_STRING) &&
           verifier.VerifyString(test_string()) && verifier.EndTable();
  }
};

struct TestTableStringBuilder {
  typedef TestTableString Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_test_string(flatbuffers::Offset<flatbuffers::String> test_string) {
    fbb_.AddOffset(TestTableString::VT_TEST_STRING, test_string);
  }
  explicit TestTableStringBuilder(flatbuffers::FlatBufferBuilder& _fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestTableStringBuilder& operator=(const TestTableStringBuilder&);
  flatbuffers::Offset<TestTableString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestTableString>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestTableString> CreateTestTableString(
    flatbuffers::FlatBufferBuilder& _fbb, flatbuffers::Offset<flatbuffers::String> test_string = 0) {
  TestTableStringBuilder builder_(_fbb);
  builder_.add_test_string(test_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestTableString> CreateTestTableStringDirect(
    flatbuffers::FlatBufferBuilder& _fbb, const char* test_string = nullptr) {
  auto test_string__ = test_string ? _fbb.CreateString(test_string) : 0;
  return testing::CreateTestTableString(_fbb, test_string__);
}

inline const testing::TestTableString* GetTestTableString(const void* buf) {
  return flatbuffers::GetRoot<testing::TestTableString>(buf);
}

inline const testing::TestTableString* GetSizePrefixedTestTableString(const void* buf) {
  return flatbuffers::GetSizePrefixedRoot<testing::TestTableString>(buf);
}

inline bool VerifyTestTableStringBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifyBuffer<testing::TestTableString>(nullptr);
}

inline bool VerifySizePrefixedTestTableStringBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifySizePrefixedBuffer<testing::TestTableString>(nullptr);
}

inline const char* TestTableStringExtension() {
  return "bfbs";
}

inline void FinishTestTableStringBuffer(
    flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<testing::TestTableString> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestTableStringBuffer(
    flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<testing::TestTableString> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace testing

#endif  // FLATBUFFERS_GENERATED_STRING_TESTING_H_
