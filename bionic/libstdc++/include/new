/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include <stddef.h>

extern "C++" {

namespace std {
  using ::size_t;
  struct nothrow_t {};
  extern const nothrow_t nothrow;
}

void* operator new(std::size_t);
void* operator new(std::size_t, const std::nothrow_t&);
void operator delete(void*) throw();
// TODO: void operator delete(void*, std::size_t) throw();
void operator delete(void*, const std::nothrow_t&) throw();

void* operator new[](std::size_t);
void* operator new[](std::size_t, const std::nothrow_t&);
void operator delete[](void*) throw();
// TODO: void operator delete[](void*, std::size_t) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// These four are not replaceable, so should be inlined.
inline void* operator new(std::size_t, void* p) { return p; }
inline void* operator new[](std::size_t, void* p) { return p; }
inline void operator delete(void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}  // extern C++
