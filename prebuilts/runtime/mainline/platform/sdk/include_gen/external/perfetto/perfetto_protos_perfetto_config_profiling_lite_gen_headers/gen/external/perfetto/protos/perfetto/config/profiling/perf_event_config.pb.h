// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/perf_event_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/perf_events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class PerfEventConfig;
class PerfEventConfigDefaultTypeInternal;
extern PerfEventConfigDefaultTypeInternal _PerfEventConfig_default_instance_;
class PerfEventConfig_CallstackSampling;
class PerfEventConfig_CallstackSamplingDefaultTypeInternal;
extern PerfEventConfig_CallstackSamplingDefaultTypeInternal _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_Scope;
class PerfEventConfig_ScopeDefaultTypeInternal;
extern PerfEventConfig_ScopeDefaultTypeInternal _PerfEventConfig_Scope_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(Arena*);
template<> ::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class PerfEventConfig_CallstackSampling :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.CallstackSampling) */ {
 public:
  PerfEventConfig_CallstackSampling();
  virtual ~PerfEventConfig_CallstackSampling();

  PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from);
  PerfEventConfig_CallstackSampling(PerfEventConfig_CallstackSampling&& from) noexcept
    : PerfEventConfig_CallstackSampling() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_CallstackSampling& operator=(const PerfEventConfig_CallstackSampling& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_CallstackSampling& operator=(PerfEventConfig_CallstackSampling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_CallstackSampling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_CallstackSampling* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_CallstackSampling*>(
               &_PerfEventConfig_CallstackSampling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfEventConfig_CallstackSampling& a, PerfEventConfig_CallstackSampling& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_CallstackSampling* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_CallstackSampling* New() const final {
    return CreateMaybeMessage<PerfEventConfig_CallstackSampling>(nullptr);
  }

  PerfEventConfig_CallstackSampling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_CallstackSampling>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_CallstackSampling& from);
  void MergeFrom(const PerfEventConfig_CallstackSampling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_CallstackSampling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.CallstackSampling";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeFieldNumber = 1,
    kKernelFramesFieldNumber = 2,
  };
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  bool has_scope() const;
  void clear_scope();
  const ::perfetto::protos::PerfEventConfig_Scope& scope() const;
  ::perfetto::protos::PerfEventConfig_Scope* release_scope();
  ::perfetto::protos::PerfEventConfig_Scope* mutable_scope();
  void set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope);

  // optional bool kernel_frames = 2;
  bool has_kernel_frames() const;
  void clear_kernel_frames();
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.CallstackSampling)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::perfetto::protos::PerfEventConfig_Scope* scope_;
  bool kernel_frames_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig_Scope :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig.Scope) */ {
 public:
  PerfEventConfig_Scope();
  virtual ~PerfEventConfig_Scope();

  PerfEventConfig_Scope(const PerfEventConfig_Scope& from);
  PerfEventConfig_Scope(PerfEventConfig_Scope&& from) noexcept
    : PerfEventConfig_Scope() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig_Scope& operator=(const PerfEventConfig_Scope& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig_Scope& operator=(PerfEventConfig_Scope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig_Scope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig_Scope* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig_Scope*>(
               &_PerfEventConfig_Scope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfEventConfig_Scope& a, PerfEventConfig_Scope& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig_Scope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig_Scope* New() const final {
    return CreateMaybeMessage<PerfEventConfig_Scope>(nullptr);
  }

  PerfEventConfig_Scope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig_Scope>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig_Scope& from);
  void MergeFrom(const PerfEventConfig_Scope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig_Scope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig.Scope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 1,
    kTargetCmdlineFieldNumber = 2,
    kExcludePidFieldNumber = 3,
    kExcludeCmdlineFieldNumber = 4,
    kAdditionalCmdlineCountFieldNumber = 5,
  };
  // repeated int32 target_pid = 1;
  int target_pid_size() const;
  void clear_target_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_pid(int index) const;
  void set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_target_pid();

  // repeated string target_cmdline = 2;
  int target_cmdline_size() const;
  void clear_target_cmdline();
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, size_t size);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  // repeated int32 exclude_pid = 3;
  int exclude_pid_size() const;
  void clear_exclude_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 exclude_pid(int index) const;
  void set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_exclude_pid();

  // repeated string exclude_cmdline = 4;
  int exclude_cmdline_size() const;
  void clear_exclude_cmdline();
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, size_t size);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  // optional uint32 additional_cmdline_count = 5;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count() const;
  void set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig.Scope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > target_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > exclude_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfEventConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEventConfig) */ {
 public:
  PerfEventConfig();
  virtual ~PerfEventConfig();

  PerfEventConfig(const PerfEventConfig& from);
  PerfEventConfig(PerfEventConfig&& from) noexcept
    : PerfEventConfig() {
    *this = ::std::move(from);
  }

  inline PerfEventConfig& operator=(const PerfEventConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEventConfig& operator=(PerfEventConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEventConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEventConfig* internal_default_instance() {
    return reinterpret_cast<const PerfEventConfig*>(
               &_PerfEventConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfEventConfig& a, PerfEventConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEventConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEventConfig* New() const final {
    return CreateMaybeMessage<PerfEventConfig>(nullptr);
  }

  PerfEventConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEventConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEventConfig& from);
  void MergeFrom(const PerfEventConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEventConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEventConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfEventConfig_CallstackSampling CallstackSampling;
  typedef PerfEventConfig_Scope Scope;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPidFieldNumber = 4,
    kTargetCmdlineFieldNumber = 5,
    kExcludePidFieldNumber = 6,
    kExcludeCmdlineFieldNumber = 7,
    kTargetInstalledByFieldNumber = 18,
    kTimebaseFieldNumber = 15,
    kCallstackSamplingFieldNumber = 16,
    kSamplingFrequencyFieldNumber = 2,
    kRingBufferPagesFieldNumber = 3,
    kAllCpusFieldNumber = 1,
    kKernelFramesFieldNumber = 12,
    kRingBufferReadPeriodMsFieldNumber = 8,
    kRemoteDescriptorTimeoutMsFieldNumber = 9,
    kUnwindStateClearPeriodMsFieldNumber = 10,
    kAdditionalCmdlineCountFieldNumber = 11,
    kMaxDaemonMemoryKbFieldNumber = 13,
    kMaxEnqueuedFootprintKbFieldNumber = 17,
  };
  // repeated int32 target_pid = 4;
  int target_pid_size() const;
  void clear_target_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_pid(int index) const;
  void set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      target_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_target_pid();

  // repeated string target_cmdline = 5;
  int target_cmdline_size() const;
  void clear_target_cmdline();
  const std::string& target_cmdline(int index) const;
  std::string* mutable_target_cmdline(int index);
  void set_target_cmdline(int index, const std::string& value);
  void set_target_cmdline(int index, std::string&& value);
  void set_target_cmdline(int index, const char* value);
  void set_target_cmdline(int index, const char* value, size_t size);
  std::string* add_target_cmdline();
  void add_target_cmdline(const std::string& value);
  void add_target_cmdline(std::string&& value);
  void add_target_cmdline(const char* value);
  void add_target_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_cmdline();

  // repeated int32 exclude_pid = 6;
  int exclude_pid_size() const;
  void clear_exclude_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 exclude_pid(int index) const;
  void set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      exclude_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_exclude_pid();

  // repeated string exclude_cmdline = 7;
  int exclude_cmdline_size() const;
  void clear_exclude_cmdline();
  const std::string& exclude_cmdline(int index) const;
  std::string* mutable_exclude_cmdline(int index);
  void set_exclude_cmdline(int index, const std::string& value);
  void set_exclude_cmdline(int index, std::string&& value);
  void set_exclude_cmdline(int index, const char* value);
  void set_exclude_cmdline(int index, const char* value, size_t size);
  std::string* add_exclude_cmdline();
  void add_exclude_cmdline(const std::string& value);
  void add_exclude_cmdline(std::string&& value);
  void add_exclude_cmdline(const char* value);
  void add_exclude_cmdline(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_cmdline();

  // repeated string target_installed_by = 18;
  int target_installed_by_size() const;
  void clear_target_installed_by();
  const std::string& target_installed_by(int index) const;
  std::string* mutable_target_installed_by(int index);
  void set_target_installed_by(int index, const std::string& value);
  void set_target_installed_by(int index, std::string&& value);
  void set_target_installed_by(int index, const char* value);
  void set_target_installed_by(int index, const char* value, size_t size);
  std::string* add_target_installed_by();
  void add_target_installed_by(const std::string& value);
  void add_target_installed_by(std::string&& value);
  void add_target_installed_by(const char* value);
  void add_target_installed_by(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_installed_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_installed_by();

  // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
  bool has_timebase() const;
  void clear_timebase();
  const ::perfetto::protos::PerfEvents_Timebase& timebase() const;
  ::perfetto::protos::PerfEvents_Timebase* release_timebase();
  ::perfetto::protos::PerfEvents_Timebase* mutable_timebase();
  void set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase);

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  bool has_callstack_sampling() const;
  void clear_callstack_sampling();
  const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling() const;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* release_callstack_sampling();
  ::perfetto::protos::PerfEventConfig_CallstackSampling* mutable_callstack_sampling();
  void set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling);

  // optional uint32 sampling_frequency = 2;
  bool has_sampling_frequency() const;
  void clear_sampling_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_frequency() const;
  void set_sampling_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ring_buffer_pages = 3;
  bool has_ring_buffer_pages() const;
  void clear_ring_buffer_pages();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_pages() const;
  void set_ring_buffer_pages(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool all_cpus = 1;
  bool has_all_cpus() const;
  void clear_all_cpus();
  bool all_cpus() const;
  void set_all_cpus(bool value);

  // optional bool kernel_frames = 12;
  bool has_kernel_frames() const;
  void clear_kernel_frames();
  bool kernel_frames() const;
  void set_kernel_frames(bool value);

  // optional uint32 ring_buffer_read_period_ms = 8;
  bool has_ring_buffer_read_period_ms() const;
  void clear_ring_buffer_read_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_read_period_ms() const;
  void set_ring_buffer_read_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 remote_descriptor_timeout_ms = 9;
  bool has_remote_descriptor_timeout_ms() const;
  void clear_remote_descriptor_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_descriptor_timeout_ms() const;
  void set_remote_descriptor_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 unwind_state_clear_period_ms = 10;
  bool has_unwind_state_clear_period_ms() const;
  void clear_unwind_state_clear_period_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 unwind_state_clear_period_ms() const;
  void set_unwind_state_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 additional_cmdline_count = 11;
  bool has_additional_cmdline_count() const;
  void clear_additional_cmdline_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count() const;
  void set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_daemon_memory_kb = 13;
  bool has_max_daemon_memory_kb() const;
  void clear_max_daemon_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daemon_memory_kb() const;
  void set_max_daemon_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 max_enqueued_footprint_kb = 17;
  bool has_max_enqueued_footprint_kb() const;
  void clear_max_enqueued_footprint_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_enqueued_footprint_kb() const;
  void set_max_enqueued_footprint_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEventConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > target_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > exclude_pid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_cmdline_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_installed_by_;
  ::perfetto::protos::PerfEvents_Timebase* timebase_;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_pages_;
  bool all_cpus_;
  bool kernel_frames_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_buffer_read_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_descriptor_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unwind_state_clear_period_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_cmdline_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_daemon_memory_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_enqueued_footprint_kb_;
  friend struct ::TableStruct_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfEventConfig_CallstackSampling

// optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
inline bool PerfEventConfig_CallstackSampling::has_scope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig_CallstackSampling::clear_scope() {
  if (scope_ != nullptr) scope_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfEventConfig_Scope& PerfEventConfig_CallstackSampling::scope() const {
  const ::perfetto::protos::PerfEventConfig_Scope* p = scope_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_Scope*>(
      &::perfetto::protos::_PerfEventConfig_Scope_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::release_scope() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEventConfig_Scope* temp = scope_;
  scope_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_Scope* PerfEventConfig_CallstackSampling::mutable_scope() {
  _has_bits_[0] |= 0x00000001u;
  if (scope_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_Scope>(GetArenaNoVirtual());
    scope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
  return scope_;
}
inline void PerfEventConfig_CallstackSampling::set_allocated_scope(::perfetto::protos::PerfEventConfig_Scope* scope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scope_;
  }
  if (scope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scope, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_ = scope;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.CallstackSampling.scope)
}

// optional bool kernel_frames = 2;
inline bool PerfEventConfig_CallstackSampling::has_kernel_frames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEventConfig_CallstackSampling::clear_kernel_frames() {
  kernel_frames_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PerfEventConfig_CallstackSampling::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
  return kernel_frames_;
}
inline void PerfEventConfig_CallstackSampling::set_kernel_frames(bool value) {
  _has_bits_[0] |= 0x00000002u;
  kernel_frames_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.CallstackSampling.kernel_frames)
}

// -------------------------------------------------------------------

// PerfEventConfig_Scope

// repeated int32 target_pid = 1;
inline int PerfEventConfig_Scope::target_pid_size() const {
  return target_pid_.size();
}
inline void PerfEventConfig_Scope::clear_target_pid() {
  target_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig_Scope::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return target_pid_.Get(index);
}
inline void PerfEventConfig_Scope::set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline void PerfEventConfig_Scope::add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig_Scope::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig_Scope::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_pid)
  return &target_pid_;
}

// repeated string target_cmdline = 2;
inline int PerfEventConfig_Scope::target_cmdline_size() const {
  return target_cmdline_.size();
}
inline void PerfEventConfig_Scope::clear_target_cmdline() {
  target_cmdline_.Clear();
}
inline const std::string& PerfEventConfig_Scope::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Get(index);
}
inline std::string* PerfEventConfig_Scope::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Mutable(index);
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  target_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  target_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::set_target_cmdline(int index, const char* value, size_t size) {
  target_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline std::string* PerfEventConfig_Scope::add_target_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_.Add();
}
inline void PerfEventConfig_Scope::add_target_cmdline(const std::string& value) {
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(std::string&& value) {
  target_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline void PerfEventConfig_Scope::add_target_cmdline(const char* value, size_t size) {
  target_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.target_cmdline)
  return &target_cmdline_;
}

// repeated int32 exclude_pid = 3;
inline int PerfEventConfig_Scope::exclude_pid_size() const {
  return exclude_pid_.size();
}
inline void PerfEventConfig_Scope::clear_exclude_pid() {
  exclude_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig_Scope::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return exclude_pid_.Get(index);
}
inline void PerfEventConfig_Scope::set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline void PerfEventConfig_Scope::add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig_Scope::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig_Scope::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_pid)
  return &exclude_pid_;
}

// repeated string exclude_cmdline = 4;
inline int PerfEventConfig_Scope::exclude_cmdline_size() const {
  return exclude_cmdline_.size();
}
inline void PerfEventConfig_Scope::clear_exclude_cmdline() {
  exclude_cmdline_.Clear();
}
inline const std::string& PerfEventConfig_Scope::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Get(index);
}
inline std::string* PerfEventConfig_Scope::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Mutable(index);
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::set_exclude_cmdline(int index, const char* value, size_t size) {
  exclude_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline std::string* PerfEventConfig_Scope::add_exclude_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_.Add();
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const std::string& value) {
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(std::string&& value) {
  exclude_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline void PerfEventConfig_Scope::add_exclude_cmdline(const char* value, size_t size) {
  exclude_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig_Scope::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig_Scope::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.Scope.exclude_cmdline)
  return &exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 5;
inline bool PerfEventConfig_Scope::has_additional_cmdline_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEventConfig_Scope::clear_additional_cmdline_count() {
  additional_cmdline_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig_Scope::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
  return additional_cmdline_count_;
}
inline void PerfEventConfig_Scope::set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  additional_cmdline_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.Scope.additional_cmdline_count)
}

// -------------------------------------------------------------------

// PerfEventConfig

// optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
inline bool PerfEventConfig::has_timebase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::perfetto::protos::PerfEvents_Timebase& PerfEventConfig::timebase() const {
  const ::perfetto::protos::PerfEvents_Timebase* p = timebase_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.timebase)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEvents_Timebase*>(
      &::perfetto::protos::_PerfEvents_Timebase_default_instance_);
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::release_timebase() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.timebase)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEvents_Timebase* temp = timebase_;
  timebase_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfEventConfig::mutable_timebase() {
  _has_bits_[0] |= 0x00000001u;
  if (timebase_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEvents_Timebase>(GetArenaNoVirtual());
    timebase_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.timebase)
  return timebase_;
}
inline void PerfEventConfig::set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timebase_);
  }
  if (timebase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timebase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timebase, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timebase_ = timebase;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.timebase)
}

// optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
inline bool PerfEventConfig::has_callstack_sampling() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEventConfig::clear_callstack_sampling() {
  if (callstack_sampling_ != nullptr) callstack_sampling_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::PerfEventConfig_CallstackSampling& PerfEventConfig::callstack_sampling() const {
  const ::perfetto::protos::PerfEventConfig_CallstackSampling* p = callstack_sampling_;
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.callstack_sampling)
  return p != nullptr ? *p : *reinterpret_cast<const ::perfetto::protos::PerfEventConfig_CallstackSampling*>(
      &::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_);
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::release_callstack_sampling() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEventConfig.callstack_sampling)
  _has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::PerfEventConfig_CallstackSampling* temp = callstack_sampling_;
  callstack_sampling_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEventConfig_CallstackSampling* PerfEventConfig::mutable_callstack_sampling() {
  _has_bits_[0] |= 0x00000002u;
  if (callstack_sampling_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEventConfig_CallstackSampling>(GetArenaNoVirtual());
    callstack_sampling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.callstack_sampling)
  return callstack_sampling_;
}
inline void PerfEventConfig::set_allocated_callstack_sampling(::perfetto::protos::PerfEventConfig_CallstackSampling* callstack_sampling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete callstack_sampling_;
  }
  if (callstack_sampling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      callstack_sampling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callstack_sampling, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  callstack_sampling_ = callstack_sampling;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEventConfig.callstack_sampling)
}

// optional uint32 ring_buffer_read_period_ms = 8;
inline bool PerfEventConfig::has_ring_buffer_read_period_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerfEventConfig::clear_ring_buffer_read_period_ms() {
  ring_buffer_read_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::ring_buffer_read_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
  return ring_buffer_read_period_ms_;
}
inline void PerfEventConfig::set_ring_buffer_read_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ring_buffer_read_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_read_period_ms)
}

// optional uint32 ring_buffer_pages = 3;
inline bool PerfEventConfig::has_ring_buffer_pages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerfEventConfig::clear_ring_buffer_pages() {
  ring_buffer_pages_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::ring_buffer_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.ring_buffer_pages)
  return ring_buffer_pages_;
}
inline void PerfEventConfig::set_ring_buffer_pages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ring_buffer_pages_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.ring_buffer_pages)
}

// optional uint64 max_enqueued_footprint_kb = 17;
inline bool PerfEventConfig::has_max_enqueued_footprint_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerfEventConfig::clear_max_enqueued_footprint_kb() {
  max_enqueued_footprint_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfEventConfig::max_enqueued_footprint_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.max_enqueued_footprint_kb)
  return max_enqueued_footprint_kb_;
}
inline void PerfEventConfig::set_max_enqueued_footprint_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  max_enqueued_footprint_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.max_enqueued_footprint_kb)
}

// optional uint32 max_daemon_memory_kb = 13;
inline bool PerfEventConfig::has_max_daemon_memory_kb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerfEventConfig::clear_max_daemon_memory_kb() {
  max_daemon_memory_kb_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::max_daemon_memory_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
  return max_daemon_memory_kb_;
}
inline void PerfEventConfig::set_max_daemon_memory_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_daemon_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.max_daemon_memory_kb)
}

// optional uint32 remote_descriptor_timeout_ms = 9;
inline bool PerfEventConfig::has_remote_descriptor_timeout_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerfEventConfig::clear_remote_descriptor_timeout_ms() {
  remote_descriptor_timeout_ms_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::remote_descriptor_timeout_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
  return remote_descriptor_timeout_ms_;
}
inline void PerfEventConfig::set_remote_descriptor_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  remote_descriptor_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.remote_descriptor_timeout_ms)
}

// optional uint32 unwind_state_clear_period_ms = 10;
inline bool PerfEventConfig::has_unwind_state_clear_period_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerfEventConfig::clear_unwind_state_clear_period_ms() {
  unwind_state_clear_period_ms_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::unwind_state_clear_period_ms() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
  return unwind_state_clear_period_ms_;
}
inline void PerfEventConfig::set_unwind_state_clear_period_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  unwind_state_clear_period_ms_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.unwind_state_clear_period_ms)
}

// optional bool all_cpus = 1;
inline bool PerfEventConfig::has_all_cpus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerfEventConfig::clear_all_cpus() {
  all_cpus_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PerfEventConfig::all_cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.all_cpus)
  return all_cpus_;
}
inline void PerfEventConfig::set_all_cpus(bool value) {
  _has_bits_[0] |= 0x00000010u;
  all_cpus_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.all_cpus)
}

// optional uint32 sampling_frequency = 2;
inline bool PerfEventConfig::has_sampling_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerfEventConfig::clear_sampling_frequency() {
  sampling_frequency_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::sampling_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.sampling_frequency)
  return sampling_frequency_;
}
inline void PerfEventConfig::set_sampling_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sampling_frequency_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.sampling_frequency)
}

// optional bool kernel_frames = 12;
inline bool PerfEventConfig::has_kernel_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerfEventConfig::clear_kernel_frames() {
  kernel_frames_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PerfEventConfig::kernel_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.kernel_frames)
  return kernel_frames_;
}
inline void PerfEventConfig::set_kernel_frames(bool value) {
  _has_bits_[0] |= 0x00000020u;
  kernel_frames_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.kernel_frames)
}

// repeated int32 target_pid = 4;
inline int PerfEventConfig::target_pid_size() const {
  return target_pid_.size();
}
inline void PerfEventConfig::clear_target_pid() {
  target_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig::target_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_pid)
  return target_pid_.Get(index);
}
inline void PerfEventConfig::set_target_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_pid)
}
inline void PerfEventConfig::add_target_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  target_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig::target_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_pid)
  return target_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig::mutable_target_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_pid)
  return &target_pid_;
}

// repeated string target_cmdline = 5;
inline int PerfEventConfig::target_cmdline_size() const {
  return target_cmdline_.size();
}
inline void PerfEventConfig::clear_target_cmdline() {
  target_cmdline_.Clear();
}
inline const std::string& PerfEventConfig::target_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Get(index);
}
inline std::string* PerfEventConfig::mutable_target_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Mutable(index);
}
inline void PerfEventConfig::set_target_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
  target_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig::set_target_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_cmdline)
  target_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::set_target_cmdline(int index, const char* value, size_t size) {
  target_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline std::string* PerfEventConfig::add_target_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_.Add();
}
inline void PerfEventConfig::add_target_cmdline(const std::string& value) {
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(std::string&& value) {
  target_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline void PerfEventConfig::add_target_cmdline(const char* value, size_t size) {
  target_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.target_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::target_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return target_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::mutable_target_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_cmdline)
  return &target_cmdline_;
}

// repeated string target_installed_by = 18;
inline int PerfEventConfig::target_installed_by_size() const {
  return target_installed_by_.size();
}
inline void PerfEventConfig::clear_target_installed_by() {
  target_installed_by_.Clear();
}
inline const std::string& PerfEventConfig::target_installed_by(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.target_installed_by)
  return target_installed_by_.Get(index);
}
inline std::string* PerfEventConfig::mutable_target_installed_by(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.target_installed_by)
  return target_installed_by_.Mutable(index);
}
inline void PerfEventConfig::set_target_installed_by(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_installed_by)
  target_installed_by_.Mutable(index)->assign(value);
}
inline void PerfEventConfig::set_target_installed_by(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.target_installed_by)
  target_installed_by_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig::set_target_installed_by(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_installed_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::set_target_installed_by(int index, const char* value, size_t size) {
  target_installed_by_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline std::string* PerfEventConfig::add_target_installed_by() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.target_installed_by)
  return target_installed_by_.Add();
}
inline void PerfEventConfig::add_target_installed_by(const std::string& value) {
  target_installed_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(std::string&& value) {
  target_installed_by_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_installed_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline void PerfEventConfig::add_target_installed_by(const char* value, size_t size) {
  target_installed_by_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.target_installed_by)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::target_installed_by() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.target_installed_by)
  return target_installed_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::mutable_target_installed_by() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.target_installed_by)
  return &target_installed_by_;
}

// repeated int32 exclude_pid = 6;
inline int PerfEventConfig::exclude_pid_size() const {
  return exclude_pid_.size();
}
inline void PerfEventConfig::clear_exclude_pid() {
  exclude_pid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerfEventConfig::exclude_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_pid)
  return exclude_pid_.Get(index);
}
inline void PerfEventConfig::set_exclude_pid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline void PerfEventConfig::add_exclude_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  exclude_pid_.Add(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PerfEventConfig::exclude_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return exclude_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PerfEventConfig::mutable_exclude_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_pid)
  return &exclude_pid_;
}

// repeated string exclude_cmdline = 7;
inline int PerfEventConfig::exclude_cmdline_size() const {
  return exclude_cmdline_.size();
}
inline void PerfEventConfig::clear_exclude_cmdline() {
  exclude_cmdline_.Clear();
}
inline const std::string& PerfEventConfig::exclude_cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Get(index);
}
inline std::string* PerfEventConfig::mutable_exclude_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Mutable(index);
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(value);
}
inline void PerfEventConfig::set_exclude_cmdline(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.exclude_cmdline)
  exclude_cmdline_.Mutable(index)->assign(std::move(value));
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::set_exclude_cmdline(int index, const char* value, size_t size) {
  exclude_cmdline_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline std::string* PerfEventConfig::add_exclude_cmdline() {
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_.Add();
}
inline void PerfEventConfig::add_exclude_cmdline(const std::string& value) {
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(std::string&& value) {
  exclude_cmdline_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_cmdline_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline void PerfEventConfig::add_exclude_cmdline(const char* value, size_t size) {
  exclude_cmdline_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.PerfEventConfig.exclude_cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PerfEventConfig::exclude_cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return exclude_cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PerfEventConfig::mutable_exclude_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfEventConfig.exclude_cmdline)
  return &exclude_cmdline_;
}

// optional uint32 additional_cmdline_count = 11;
inline bool PerfEventConfig::has_additional_cmdline_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerfEventConfig::clear_additional_cmdline_count() {
  additional_cmdline_count_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PerfEventConfig::additional_cmdline_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEventConfig.additional_cmdline_count)
  return additional_cmdline_count_;
}
inline void PerfEventConfig::set_additional_cmdline_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  additional_cmdline_count_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEventConfig.additional_cmdline_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto
