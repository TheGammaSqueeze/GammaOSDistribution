#ifndef HIDL_GENERATED_ANDROID_HARDWARE_GNSS_V1_0_IGNSSNICALLBACK_H
#define HIDL_GENERATED_ANDROID_HARDWARE_GNSS_V1_0_IGNSSNICALLBACK_H

#include <android/hidl/base/1.0/IBase.h>

#include <android/hidl/manager/1.0/IServiceNotification.h>

#include <hidl/HidlSupport.h>
#include <hidl/MQDescriptor.h>
#include <hidl/Status.h>
#include <utils/NativeHandle.h>
#include <utils/misc.h>

namespace android {
namespace hardware {
namespace gnss {
namespace V1_0 {

/**
 * GNSS Network Initiated callback interface.
 */
struct IGnssNiCallback : public ::android::hidl::base::V1_0::IBase {
    /**
     * Type tag for use in template logic that indicates this is a 'pure' class.
     */
    typedef ::android::hardware::details::i_tag _hidl_tag;

    /**
     * Fully qualified interface name: "android.hardware.gnss@1.0::IGnssNiCallback"
     */
    static const char* descriptor;

    // Forward declaration for forward reference support:
    enum class GnssNiType : uint8_t;
    enum class GnssNiNotifyFlags : uint32_t;
    enum class GnssUserResponseType : uint8_t;
    enum class GnssNiEncodingType : int32_t;
    struct GnssNiNotification;

    /**
     * GnssNiType constants
     */
    enum class GnssNiType : uint8_t {
        VOICE = 1,
        UMTS_SUPL = 2,
        UMTS_CTRL_PLANE = 3,
        EMERGENCY_SUPL = 4,
    };

    /**
     * GnssNiNotifyFlags constants
     */
    enum class GnssNiNotifyFlags : uint32_t {
        /**
         * NI requires notification
         */
        NEED_NOTIFY = 1u /* 0x0001 */,
        /**
         * NI requires verification
         */
        NEED_VERIFY = 2u /* 0x0002 */,
        /**
         * NI requires privacy override, no notification/minimal trace
         */
        PRIVACY_OVERRIDE = 4u /* 0x0004 */,
    };

    /**
     * GNSS NI responses, used to define the response in
     * NI structures
     */
    enum class GnssUserResponseType : uint8_t {
        RESPONSE_ACCEPT = 1,
        RESPONSE_DENY = 2,
        RESPONSE_NORESP = 3,
    };

    /**
     * NI data encoding scheme
     */
    enum class GnssNiEncodingType : int32_t {
        ENC_NONE = 0,
        ENC_SUPL_GSM_DEFAULT = 1,
        ENC_SUPL_UTF8 = 2,
        ENC_SUPL_UCS2 = 3,
        ENC_UNKNOWN = -1 /* -1 */,
    };

    /**
     * Represents an NI request
     */
    struct GnssNiNotification final {
        /**
         * An ID generated by HAL to associate NI notifications and UI
         * responses.
         */
        int32_t notificationId __attribute__ ((aligned(4)));
        /**
         * A type used to distinguish different categories of NI
         * events, such as VOICE, UMTS_SUPL etc.
         */
        ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType niType __attribute__ ((aligned(1)));
        /**
         * Notification/verification options, combinations of GnssNiNotifyFlags
         * constants.
         */
        ::android::hardware::hidl_bitfield<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags> notifyFlags __attribute__ ((aligned(4)));
        /**
         * Timeout period to wait for user response.
         * Set to 0 for no timeout limit. Specified in seconds.
         */
        uint32_t timeoutSec __attribute__ ((aligned(4)));
        /**
         * Default response when timeout.
         */
        ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType defaultResponse __attribute__ ((aligned(1)));
        /**
         * String representing the requester of the network inititated location
         * request.
         */
        ::android::hardware::hidl_string requestorId __attribute__ ((aligned(8)));
        /**
         * Notification message. String representing the service(for eg. SUPL-service)
         * who sent the network initiated location request.
         */
        ::android::hardware::hidl_string notificationMessage __attribute__ ((aligned(8)));
        /**
         * requestorId decoding scheme.
         */
        ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType requestorIdEncoding __attribute__ ((aligned(4)));
        /**
         * notificationId decoding scheme
         */
        ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType notificationIdEncoding __attribute__ ((aligned(4)));
    };

    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, notificationId) == 0, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, niType) == 4, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, notifyFlags) == 8, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, timeoutSec) == 12, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, defaultResponse) == 16, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, requestorId) == 24, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, notificationMessage) == 40, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, requestorIdEncoding) == 56, "wrong offset");
    static_assert(offsetof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification, notificationIdEncoding) == 60, "wrong offset");
    static_assert(sizeof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification) == 64, "wrong size");
    static_assert(__alignof(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification) == 8, "wrong alignment");

    /**
     * Returns whether this object's implementation is outside of the current process.
     */
    virtual bool isRemote() const override { return false; }

    /**
     * Callback with a network initiated request.
     *
     * @param notification network initiated request.
     */
    virtual ::android::hardware::Return<void> niNotifyCb(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& notification) = 0;

    /**
     * Return callback for interfaceChain
     */
    using interfaceChain_cb = std::function<void(const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& descriptors)>;
    /*
     * Provides run-time type information for this object.
     * For example, for the following interface definition:
     *     package android.hardware.foo@1.0;
     *     interface IParent {};
     *     interface IChild extends IParent {};
     * Calling interfaceChain on an IChild object must yield the following:
     *     ["android.hardware.foo@1.0::IChild",
     *      "android.hardware.foo@1.0::IParent"
     *      "android.hidl.base@1.0::IBase"]
     *
     * @return descriptors a vector of descriptors of the run-time type of the
     *         object.
     */
    virtual ::android::hardware::Return<void> interfaceChain(interfaceChain_cb _hidl_cb) override;

    /*
     * Emit diagnostic information to the given file.
     *
     * Optionally overriden.
     *
     * @param fd      File descriptor to dump data to.
     *                Must only be used for the duration of this call.
     * @param options Arguments for debugging.
     *                Must support empty for default debug information.
     */
    virtual ::android::hardware::Return<void> debug(const ::android::hardware::hidl_handle& fd, const ::android::hardware::hidl_vec<::android::hardware::hidl_string>& options) override;

    /**
     * Return callback for interfaceDescriptor
     */
    using interfaceDescriptor_cb = std::function<void(const ::android::hardware::hidl_string& descriptor)>;
    /*
     * Provides run-time type information for this object.
     * For example, for the following interface definition:
     *     package android.hardware.foo@1.0;
     *     interface IParent {};
     *     interface IChild extends IParent {};
     * Calling interfaceDescriptor on an IChild object must yield
     *     "android.hardware.foo@1.0::IChild"
     *
     * @return descriptor a descriptor of the run-time type of the
     *         object (the first element of the vector returned by
     *         interfaceChain())
     */
    virtual ::android::hardware::Return<void> interfaceDescriptor(interfaceDescriptor_cb _hidl_cb) override;

    /**
     * Return callback for getHashChain
     */
    using getHashChain_cb = std::function<void(const ::android::hardware::hidl_vec<::android::hardware::hidl_array<uint8_t, 32>>& hashchain)>;
    /*
     * Returns hashes of the source HAL files that define the interfaces of the
     * runtime type information on the object.
     * For example, for the following interface definition:
     *     package android.hardware.foo@1.0;
     *     interface IParent {};
     *     interface IChild extends IParent {};
     * Calling interfaceChain on an IChild object must yield the following:
     *     [(hash of IChild.hal),
     *      (hash of IParent.hal)
     *      (hash of IBase.hal)].
     *
     * SHA-256 is used as the hashing algorithm. Each hash has 32 bytes
     * according to SHA-256 standard.
     *
     * @return hashchain a vector of SHA-1 digests
     */
    virtual ::android::hardware::Return<void> getHashChain(getHashChain_cb _hidl_cb) override;

    /*
     * This method trigger the interface to enable/disable instrumentation based
     * on system property hal.instrumentation.enable.
     */
    virtual ::android::hardware::Return<void> setHALInstrumentation() override;

    /*
     * Registers a death recipient, to be called when the process hosting this
     * interface dies.
     *
     * @param recipient a hidl_death_recipient callback object
     * @param cookie a cookie that must be returned with the callback
     * @return success whether the death recipient was registered successfully.
     */
    virtual ::android::hardware::Return<bool> linkToDeath(const ::android::sp<::android::hardware::hidl_death_recipient>& recipient, uint64_t cookie) override;

    /*
     * Provides way to determine if interface is running without requesting
     * any functionality.
     */
    virtual ::android::hardware::Return<void> ping() override;

    /**
     * Return callback for getDebugInfo
     */
    using getDebugInfo_cb = std::function<void(const ::android::hidl::base::V1_0::DebugInfo& info)>;
    /*
     * Get debug information on references on this interface.
     * @return info debugging information. See comments of DebugInfo.
     */
    virtual ::android::hardware::Return<void> getDebugInfo(getDebugInfo_cb _hidl_cb) override;

    /*
     * This method notifies the interface that one or more system properties
     * have changed. The default implementation calls
     * (C++)  report_sysprop_change() in libcutils or
     * (Java) android.os.SystemProperties.reportSyspropChanged,
     * which in turn calls a set of registered callbacks (eg to update trace
     * tags).
     */
    virtual ::android::hardware::Return<void> notifySyspropsChanged() override;

    /*
     * Unregisters the registered death recipient. If this service was registered
     * multiple times with the same exact death recipient, this unlinks the most
     * recently registered one.
     *
     * @param recipient a previously registered hidl_death_recipient callback
     * @return success whether the death recipient was unregistered successfully.
     */
    virtual ::android::hardware::Return<bool> unlinkToDeath(const ::android::sp<::android::hardware::hidl_death_recipient>& recipient) override;

    // cast static functions
    /**
     * This performs a checked cast based on what the underlying implementation actually is.
     */
    static ::android::hardware::Return<::android::sp<::android::hardware::gnss::V1_0::IGnssNiCallback>> castFrom(const ::android::sp<::android::hardware::gnss::V1_0::IGnssNiCallback>& parent, bool emitError = false);
    /**
     * This performs a checked cast based on what the underlying implementation actually is.
     */
    static ::android::hardware::Return<::android::sp<::android::hardware::gnss::V1_0::IGnssNiCallback>> castFrom(const ::android::sp<::android::hidl::base::V1_0::IBase>& parent, bool emitError = false);

    // helper methods for interactions with the hwservicemanager
    /**
     * This gets the service of this type with the specified instance name. If the
     * service is currently not available or not in the VINTF manifest on a Trebilized
     * device, this will return nullptr. This is useful when you don't want to block
     * during device boot. If getStub is true, this will try to return an unwrapped
     * passthrough implementation in the same process. This is useful when getting an
     * implementation from the same partition/compilation group.
     *
     * In general, prefer getService(std::string,bool)
     */
    static ::android::sp<IGnssNiCallback> tryGetService(const std::string &serviceName="default", bool getStub=false);
    /**
     * Deprecated. See tryGetService(std::string, bool)
     */
    static ::android::sp<IGnssNiCallback> tryGetService(const char serviceName[], bool getStub=false)  { std::string str(serviceName ? serviceName : "");      return tryGetService(str, getStub); }
    /**
     * Deprecated. See tryGetService(std::string, bool)
     */
    static ::android::sp<IGnssNiCallback> tryGetService(const ::android::hardware::hidl_string& serviceName, bool getStub=false)  { std::string str(serviceName.c_str());      return tryGetService(str, getStub); }
    /**
     * Calls tryGetService("default", bool). This is the recommended instance name for singleton services.
     */
    static ::android::sp<IGnssNiCallback> tryGetService(bool getStub) { return tryGetService("default", getStub); }
    /**
     * This gets the service of this type with the specified instance name. If the
     * service is not in the VINTF manifest on a Trebilized device, this will return
     * nullptr. If the service is not available, this will wait for the service to
     * become available. If the service is a lazy service, this will start the service
     * and return when it becomes available. If getStub is true, this will try to
     * return an unwrapped passthrough implementation in the same process. This is
     * useful when getting an implementation from the same partition/compilation group.
     */
    static ::android::sp<IGnssNiCallback> getService(const std::string &serviceName="default", bool getStub=false);
    /**
     * Deprecated. See getService(std::string, bool)
     */
    static ::android::sp<IGnssNiCallback> getService(const char serviceName[], bool getStub=false)  { std::string str(serviceName ? serviceName : "");      return getService(str, getStub); }
    /**
     * Deprecated. See getService(std::string, bool)
     */
    static ::android::sp<IGnssNiCallback> getService(const ::android::hardware::hidl_string& serviceName, bool getStub=false)  { std::string str(serviceName.c_str());      return getService(str, getStub); }
    /**
     * Calls getService("default", bool). This is the recommended instance name for singleton services.
     */
    static ::android::sp<IGnssNiCallback> getService(bool getStub) { return getService("default", getStub); }
    /**
     * Registers a service with the service manager. For Trebilized devices, the service
     * must also be in the VINTF manifest.
     */
    __attribute__ ((warn_unused_result))::android::status_t registerAsService(const std::string &serviceName="default");
    /**
     * Registers for notifications for when a service is registered.
     */
    static bool registerForNotifications(
            const std::string &serviceName,
            const ::android::sp<::android::hidl::manager::V1_0::IServiceNotification> &notification);
};

//
// type declarations for package
//

template<typename>
static inline std::string toString(uint8_t o);
static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType o);
static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType o, ::std::ostream* os);
constexpr uint8_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator|(const uint8_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType rhs) {
    return static_cast<uint8_t>(lhs | static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType lhs, const uint8_t rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) | rhs);
}
constexpr uint8_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator&(const uint8_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType rhs) {
    return static_cast<uint8_t>(lhs & static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType lhs, const uint8_t rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) & rhs);
}
constexpr uint8_t &operator|=(uint8_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType e) {
    v |= static_cast<uint8_t>(e);
    return v;
}
constexpr uint8_t &operator&=(uint8_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType e) {
    v &= static_cast<uint8_t>(e);
    return v;
}

template<typename>
static inline std::string toString(uint32_t o);
static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags o);
static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags o, ::std::ostream* os);
constexpr uint32_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags rhs) {
    return static_cast<uint32_t>(static_cast<uint32_t>(lhs) | static_cast<uint32_t>(rhs));
}
constexpr uint32_t operator|(const uint32_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags rhs) {
    return static_cast<uint32_t>(lhs | static_cast<uint32_t>(rhs));
}
constexpr uint32_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags lhs, const uint32_t rhs) {
    return static_cast<uint32_t>(static_cast<uint32_t>(lhs) | rhs);
}
constexpr uint32_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags rhs) {
    return static_cast<uint32_t>(static_cast<uint32_t>(lhs) & static_cast<uint32_t>(rhs));
}
constexpr uint32_t operator&(const uint32_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags rhs) {
    return static_cast<uint32_t>(lhs & static_cast<uint32_t>(rhs));
}
constexpr uint32_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags lhs, const uint32_t rhs) {
    return static_cast<uint32_t>(static_cast<uint32_t>(lhs) & rhs);
}
constexpr uint32_t &operator|=(uint32_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags e) {
    v |= static_cast<uint32_t>(e);
    return v;
}
constexpr uint32_t &operator&=(uint32_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags e) {
    v &= static_cast<uint32_t>(e);
    return v;
}

template<typename>
static inline std::string toString(uint8_t o);
static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType o);
static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType o, ::std::ostream* os);
constexpr uint8_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator|(const uint8_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType rhs) {
    return static_cast<uint8_t>(lhs | static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType lhs, const uint8_t rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) | rhs);
}
constexpr uint8_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator&(const uint8_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType rhs) {
    return static_cast<uint8_t>(lhs & static_cast<uint8_t>(rhs));
}
constexpr uint8_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType lhs, const uint8_t rhs) {
    return static_cast<uint8_t>(static_cast<uint8_t>(lhs) & rhs);
}
constexpr uint8_t &operator|=(uint8_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType e) {
    v |= static_cast<uint8_t>(e);
    return v;
}
constexpr uint8_t &operator&=(uint8_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType e) {
    v &= static_cast<uint8_t>(e);
    return v;
}

template<typename>
static inline std::string toString(int32_t o);
static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType o);
static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType o, ::std::ostream* os);
constexpr int32_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType rhs) {
    return static_cast<int32_t>(static_cast<int32_t>(lhs) | static_cast<int32_t>(rhs));
}
constexpr int32_t operator|(const int32_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType rhs) {
    return static_cast<int32_t>(lhs | static_cast<int32_t>(rhs));
}
constexpr int32_t operator|(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType lhs, const int32_t rhs) {
    return static_cast<int32_t>(static_cast<int32_t>(lhs) | rhs);
}
constexpr int32_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType rhs) {
    return static_cast<int32_t>(static_cast<int32_t>(lhs) & static_cast<int32_t>(rhs));
}
constexpr int32_t operator&(const int32_t lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType rhs) {
    return static_cast<int32_t>(lhs & static_cast<int32_t>(rhs));
}
constexpr int32_t operator&(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType lhs, const int32_t rhs) {
    return static_cast<int32_t>(static_cast<int32_t>(lhs) & rhs);
}
constexpr int32_t &operator|=(int32_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType e) {
    v |= static_cast<int32_t>(e);
    return v;
}
constexpr int32_t &operator&=(int32_t& v, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType e) {
    v &= static_cast<int32_t>(e);
    return v;
}

static inline std::string toString(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& o);
static inline void PrintTo(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& o, ::std::ostream*);
static inline bool operator==(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& rhs);
static inline bool operator!=(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& rhs);

static inline std::string toString(const ::android::sp<::android::hardware::gnss::V1_0::IGnssNiCallback>& o);

//
// type header definitions for package
//

template<>
inline std::string toString<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType>(uint8_t o) {
    using ::android::hardware::details::toHexString;
    std::string os;
    ::android::hardware::hidl_bitfield<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType> flipped = 0;
    bool first = true;
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::VOICE) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::VOICE)) {
        os += (first ? "" : " | ");
        os += "VOICE";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::VOICE;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_SUPL) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_SUPL)) {
        os += (first ? "" : " | ");
        os += "UMTS_SUPL";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_SUPL;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_CTRL_PLANE) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_CTRL_PLANE)) {
        os += (first ? "" : " | ");
        os += "UMTS_CTRL_PLANE";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_CTRL_PLANE;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::EMERGENCY_SUPL) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::EMERGENCY_SUPL)) {
        os += (first ? "" : " | ");
        os += "EMERGENCY_SUPL";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::EMERGENCY_SUPL;
    }
    if (o != flipped) {
        os += (first ? "" : " | ");
        os += toHexString(o & (~flipped));
    }os += " (";
    os += toHexString(o);
    os += ")";
    return os;
}

static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType o) {
    using ::android::hardware::details::toHexString;
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::VOICE) {
        return "VOICE";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_SUPL) {
        return "UMTS_SUPL";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_CTRL_PLANE) {
        return "UMTS_CTRL_PLANE";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::EMERGENCY_SUPL) {
        return "EMERGENCY_SUPL";
    }
    std::string os;
    os += toHexString(static_cast<uint8_t>(o));
    return os;
}

static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType o, ::std::ostream* os) {
    *os << toString(o);
}

template<>
inline std::string toString<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags>(uint32_t o) {
    using ::android::hardware::details::toHexString;
    std::string os;
    ::android::hardware::hidl_bitfield<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags> flipped = 0;
    bool first = true;
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_NOTIFY) == static_cast<uint32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_NOTIFY)) {
        os += (first ? "" : " | ");
        os += "NEED_NOTIFY";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_NOTIFY;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_VERIFY) == static_cast<uint32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_VERIFY)) {
        os += (first ? "" : " | ");
        os += "NEED_VERIFY";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_VERIFY;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::PRIVACY_OVERRIDE) == static_cast<uint32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::PRIVACY_OVERRIDE)) {
        os += (first ? "" : " | ");
        os += "PRIVACY_OVERRIDE";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::PRIVACY_OVERRIDE;
    }
    if (o != flipped) {
        os += (first ? "" : " | ");
        os += toHexString(o & (~flipped));
    }os += " (";
    os += toHexString(o);
    os += ")";
    return os;
}

static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags o) {
    using ::android::hardware::details::toHexString;
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_NOTIFY) {
        return "NEED_NOTIFY";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_VERIFY) {
        return "NEED_VERIFY";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::PRIVACY_OVERRIDE) {
        return "PRIVACY_OVERRIDE";
    }
    std::string os;
    os += toHexString(static_cast<uint32_t>(o));
    return os;
}

static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags o, ::std::ostream* os) {
    *os << toString(o);
}

template<>
inline std::string toString<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType>(uint8_t o) {
    using ::android::hardware::details::toHexString;
    std::string os;
    ::android::hardware::hidl_bitfield<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType> flipped = 0;
    bool first = true;
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_ACCEPT) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_ACCEPT)) {
        os += (first ? "" : " | ");
        os += "RESPONSE_ACCEPT";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_ACCEPT;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_DENY) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_DENY)) {
        os += (first ? "" : " | ");
        os += "RESPONSE_DENY";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_DENY;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_NORESP) == static_cast<uint8_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_NORESP)) {
        os += (first ? "" : " | ");
        os += "RESPONSE_NORESP";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_NORESP;
    }
    if (o != flipped) {
        os += (first ? "" : " | ");
        os += toHexString(o & (~flipped));
    }os += " (";
    os += toHexString(o);
    os += ")";
    return os;
}

static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType o) {
    using ::android::hardware::details::toHexString;
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_ACCEPT) {
        return "RESPONSE_ACCEPT";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_DENY) {
        return "RESPONSE_DENY";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_NORESP) {
        return "RESPONSE_NORESP";
    }
    std::string os;
    os += toHexString(static_cast<uint8_t>(o));
    return os;
}

static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType o, ::std::ostream* os) {
    *os << toString(o);
}

template<>
inline std::string toString<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType>(int32_t o) {
    using ::android::hardware::details::toHexString;
    std::string os;
    ::android::hardware::hidl_bitfield<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType> flipped = 0;
    bool first = true;
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_NONE) == static_cast<int32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_NONE)) {
        os += (first ? "" : " | ");
        os += "ENC_NONE";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_NONE;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_GSM_DEFAULT) == static_cast<int32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_GSM_DEFAULT)) {
        os += (first ? "" : " | ");
        os += "ENC_SUPL_GSM_DEFAULT";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_GSM_DEFAULT;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UTF8) == static_cast<int32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UTF8)) {
        os += (first ? "" : " | ");
        os += "ENC_SUPL_UTF8";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UTF8;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UCS2) == static_cast<int32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UCS2)) {
        os += (first ? "" : " | ");
        os += "ENC_SUPL_UCS2";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UCS2;
    }
    if ((o & ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_UNKNOWN) == static_cast<int32_t>(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_UNKNOWN)) {
        os += (first ? "" : " | ");
        os += "ENC_UNKNOWN";
        first = false;
        flipped |= ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_UNKNOWN;
    }
    if (o != flipped) {
        os += (first ? "" : " | ");
        os += toHexString(o & (~flipped));
    }os += " (";
    os += toHexString(o);
    os += ")";
    return os;
}

static inline std::string toString(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType o) {
    using ::android::hardware::details::toHexString;
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_NONE) {
        return "ENC_NONE";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_GSM_DEFAULT) {
        return "ENC_SUPL_GSM_DEFAULT";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UTF8) {
        return "ENC_SUPL_UTF8";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UCS2) {
        return "ENC_SUPL_UCS2";
    }
    if (o == ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_UNKNOWN) {
        return "ENC_UNKNOWN";
    }
    std::string os;
    os += toHexString(static_cast<int32_t>(o));
    return os;
}

static inline void PrintTo(::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType o, ::std::ostream* os) {
    *os << toString(o);
}

static inline std::string toString(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& o) {
    using ::android::hardware::toString;
    std::string os;
    os += "{";
    os += ".notificationId = ";
    os += ::android::hardware::toString(o.notificationId);
    os += ", .niType = ";
    os += ::android::hardware::gnss::V1_0::toString(o.niType);
    os += ", .notifyFlags = ";
    os += ::android::hardware::gnss::V1_0::toString<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags>(o.notifyFlags);
    os += ", .timeoutSec = ";
    os += ::android::hardware::toString(o.timeoutSec);
    os += ", .defaultResponse = ";
    os += ::android::hardware::gnss::V1_0::toString(o.defaultResponse);
    os += ", .requestorId = ";
    os += ::android::hardware::toString(o.requestorId);
    os += ", .notificationMessage = ";
    os += ::android::hardware::toString(o.notificationMessage);
    os += ", .requestorIdEncoding = ";
    os += ::android::hardware::gnss::V1_0::toString(o.requestorIdEncoding);
    os += ", .notificationIdEncoding = ";
    os += ::android::hardware::gnss::V1_0::toString(o.notificationIdEncoding);
    os += "}"; return os;
}

static inline void PrintTo(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& o, ::std::ostream* os) {
    *os << toString(o);
}

static inline bool operator==(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& rhs) {
    if (lhs.notificationId != rhs.notificationId) {
        return false;
    }
    if (lhs.niType != rhs.niType) {
        return false;
    }
    if (lhs.notifyFlags != rhs.notifyFlags) {
        return false;
    }
    if (lhs.timeoutSec != rhs.timeoutSec) {
        return false;
    }
    if (lhs.defaultResponse != rhs.defaultResponse) {
        return false;
    }
    if (lhs.requestorId != rhs.requestorId) {
        return false;
    }
    if (lhs.notificationMessage != rhs.notificationMessage) {
        return false;
    }
    if (lhs.requestorIdEncoding != rhs.requestorIdEncoding) {
        return false;
    }
    if (lhs.notificationIdEncoding != rhs.notificationIdEncoding) {
        return false;
    }
    return true;
}

static inline bool operator!=(const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& lhs, const ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotification& rhs){
    return !(lhs == rhs);
}

static inline std::string toString(const ::android::sp<::android::hardware::gnss::V1_0::IGnssNiCallback>& o) {
    std::string os = "[class or subclass of ";
    os += ::android::hardware::gnss::V1_0::IGnssNiCallback::descriptor;
    os += "]";
    os += o->isRemote() ? "@remote" : "@local";
    return os;
}


}  // namespace V1_0
}  // namespace gnss
}  // namespace hardware
}  // namespace android

//
// global type declarations for package
//

namespace android {
namespace hardware {
namespace details {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<> inline constexpr std::array<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType, 4> hidl_enum_values<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType> = {
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::VOICE,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_SUPL,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::UMTS_CTRL_PLANE,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiType::EMERGENCY_SUPL,
};
#pragma clang diagnostic pop
}  // namespace details
}  // namespace hardware
}  // namespace android

namespace android {
namespace hardware {
namespace details {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<> inline constexpr std::array<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags, 3> hidl_enum_values<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags> = {
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_NOTIFY,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::NEED_VERIFY,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiNotifyFlags::PRIVACY_OVERRIDE,
};
#pragma clang diagnostic pop
}  // namespace details
}  // namespace hardware
}  // namespace android

namespace android {
namespace hardware {
namespace details {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<> inline constexpr std::array<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType, 3> hidl_enum_values<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType> = {
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_ACCEPT,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_DENY,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssUserResponseType::RESPONSE_NORESP,
};
#pragma clang diagnostic pop
}  // namespace details
}  // namespace hardware
}  // namespace android

namespace android {
namespace hardware {
namespace details {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<> inline constexpr std::array<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType, 5> hidl_enum_values<::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType> = {
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_NONE,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_GSM_DEFAULT,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UTF8,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_SUPL_UCS2,
    ::android::hardware::gnss::V1_0::IGnssNiCallback::GnssNiEncodingType::ENC_UNKNOWN,
};
#pragma clang diagnostic pop
}  // namespace details
}  // namespace hardware
}  // namespace android


#endif  // HIDL_GENERATED_ANDROID_HARDWARE_GNSS_V1_0_IGNSSNICALLBACK_H
