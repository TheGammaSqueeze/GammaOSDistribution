/* Copyright (c) 2019, The Linux Foundation. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above
*       copyright notice, this list of conditions and the following
*       disclaimer in the documentation and/or other materials provided
*       with the distribution.
*     * Neither the name of The Linux Foundation nor the names of its
*       contributors may be used to endorse or promote products derived
*       from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

package vendor.qti.hardware.wifi.hostapd@1.1;

import android.hardware.wifi.hostapd@1.0::IHostapd;
import android.hardware.wifi.hostapd@1.0::types;

import @1.0::IHostapdVendor;
import @1.1::IHostapdVendorIfaceCallback;

/**
 * Vendor Interface exposed by the hostapd HIDL service registered
 * with the hardware service manager.
 * This is the root level object for any vendor specific hostapd interactions.
 */
interface IHostapdVendor extends @1.0::IHostapdVendor {
    /**
     * Debug levels for the hostapd.
     * Only log messages with a level greater than the set level
     * (via |setDebugParams|) will be logged.
     */
    enum DebugLevel : uint32_t {
      EXCESSIVE = 0,
      MSGDUMP = 1,
      DEBUG = 2,
      INFO = 3,
      WARNING = 4,
      ERROR = 5
    };

    /** Possble Security types. */
    enum VendorEncryptionType : uint32_t {
        NONE,
        WPA,
        WPA2,
        SAE,
        OWE
    };

    /**
     * Set debug parameters for the hostapd.
     *
     * @param level Debug logging level for the hostapd.
     *        (one of |DebugLevel| values).
     * @param timestamp Determines whether to show timestamps in logs or
     *        not.
     * @param showKeys Determines whether to show keys in debug logs or
     *        not.
     *        CAUTION: Do not set this param in production code!
     * @return status Status of the operation.
     *         Possible status codes:
     *         |HostapdStatusCode.SUCCESS|,
     *         |HostapdStatusCode.FAILURE_UNKNOWN|
     */
    setDebugParams(DebugLevel level, bool showTimestamp, bool showKeys)
        generates (HostapdStatus status);

    /**
     * Get the debug level set.
     *
     * @return level one of |DebugLevel| values.
     */
    getDebugLevel() generates (DebugLevel level);

    /**
     * Parameters to specify the channel range for ACS.
     */
    struct AcsChannelRange {
        /**
         * Channel number (IEEE 802.11) at the start of the range.
         */
        uint32_t start;
        /**
         * Channel number (IEEE 802.11) at the end of the range.
         */
        uint32_t end;
    };

    /**
     * Parameters to control the channel selection for the interface.
     */
    struct VendorChannelParams {
        /**
         * This option can be used to specify the channels selected by ACS.
         * If this is an empty list, all channels allowed in selected HW mode
         * are specified implicitly.
         * Note: channels may be overridden by firmware.
         * Note: this option is ignored if ACS is disabled.
         */
        vec<AcsChannelRange> acsChannelRanges;
        /** Channel params from @1.0::IHostapd::ChannelParams */
        ChannelParams channelParams;

    };

    /**
     * Parameters to use for setting up the access point interface.
     */
    struct VendorIfaceParams {
        /**
         * Baseline information as defined in HAL 1.0.
         */
        @1.0::IHostapdVendor.VendorIfaceParams VendorV1_0;
        /** Additional Channel params for the interface */
        VendorChannelParams vendorChannelParams;
        /** Key management mask for the network. overrides NetworkParams.encryptionType */
        VendorEncryptionType vendorEncryptionType;
        /** Iface name for OWE transition mode  */
        string oweTransIfaceName;
    };

    /**
     * Adds a new access point for hostapd to control.
     *
     * This should trigger the setup of an access point with the specified
     * interface and network params.
     *
     * @param ifaceParams AccessPoint Params for the access point.
     * @param nwParams Network Params for the access point.
     * @return status Status of the operation.
     *         Possible status codes:
     *         |HostapdStatusCode.SUCCESS|,
     *         |HostapdStatusCode.FAILURE_ARGS_INVALID|,
     *         |HostapdStatusCode.FAILURE_UNKNOWN|,
     *         |HostapdStatusCode.FAILURE_IFACE_EXISTS|
     */
    addVendorAccessPoint_1_1(VendorIfaceParams ifaceParams, NetworkParams nwParams)
        generates(HostapdStatus status);

    /**
     * Register for vendorcallback from this interface.
     *
     * These callbacks are invoked for events that are specific to this interface.
     * Registration of multiple vendor callback objects is supported. These objects
     * must be automatically deleted when the corresponding client process is dead or
     * if this interface is removed.
     *
     * @param ifaceName Name of the interface.
     * @param callback An instance of the |IHostapdVendorIfaceCallback| HIDL
     *        interface object.
     * @return status Status of the operation.
     *         Possible status codes:
     *         |HostapdStatusCode.SUCCESS|,
     *         |HostapdStatusCode.FAILURE_UNKNOWN|,
     *         |HostapdStatusCode.FAILURE_IFACE_UNKNOWN|
     */
    registerVendorCallback_1_1(string ifaceName, IHostapdVendorIfaceCallback callback)
        generates (HostapdStatus status);
};
