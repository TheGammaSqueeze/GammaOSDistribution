/* Copyright (c) 2018, The Linux Foundation. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above
*       copyright notice, this list of conditions and the following
*       disclaimer in the documentation and/or other materials provided
*       with the distribution.
*     * Neither the name of The Linux Foundation nor the names of its
*       contributors may be used to endorse or promote products derived
*       from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

package vendor.qti.hardware.wifi.supplicant@2.0;

import android.hardware.wifi.supplicant@1.1::ISupplicant;
import android.hardware.wifi.supplicant@1.0::ISupplicant;
import android.hardware.wifi.supplicant@1.0::ISupplicantIface;
import android.hardware.wifi.supplicant@1.0::SupplicantStatus;
import vendor.qti.hardware.wifi.supplicant@2.0::ISupplicantVendorIface;
import android.hardware.wifi.supplicant@1.0::types;

/**
 * Vendor Interface exposed by the supplicant HIDL service registered
 * with the hardware service manager.
 * This is the root level object for any vendor specific supplicant interactions.
 */
interface ISupplicantVendor {
  /**
   * Gets a HIDL interface object for the interface corresponding to iface
   * name which the supplicant already controls.
   *
   * @param ifaceInfo Combination of the iface type and name retrieved
   *        using |listInterfaces|.
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_UNKNOWN|,
   *         |SupplicantStatusCode.FAILURE_IFACE_UNKOWN|
   * @return iface HIDL interface object representing the interface if
   *         successful, null otherwise.
   */
  getVendorInterface(IfaceInfo ifaceInfo)
      generates (SupplicantStatus status, ISupplicantVendorIface iface);

  /**
   * Retrieve a list of all the vendor interfaces controlled by the supplicant.
   *
   * The corresponding |ISupplicantIface| object for any interface can be
   * retrieved using |getInterface| method.
   *
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_UNKNOWN|
   * @return ifaces List of all interfaces controlled by the supplicant.
   */
  listVendorInterfaces() generates (SupplicantStatus status, vec<IfaceInfo> ifaces);
};
