/*
 * Copyright (c) 2020 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *    * Neither the name of The Linux Foundation. nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package vendor.qti.hardware.camera.aon@1.0;

/** Status codes returned directly by the HIDL method calls upon errors */
enum Status : int32_t
{
    /** Success */
    SUCCESS                 = 0,

    /** Generic failure status */
    FAILED                  = 1,

    /** NOT_SUPPORTED */
    NOT_SUPPORTED           = 2,

    /** Bad State  */
    BAD_STATE               = 3,

    /** CB Pointer is invalid */
    INVALID_CALLBACK_PTR    = 4,

    /** AON Service Aborted */
    ABORT                   = 5
};

/** AON Service events triggered from AON service */
enum AONServiceStatus : int32_t
{
    /** Triggered upon successful AON Service event detection */
    EVENT_DETECTED      = 0,

    /** Triggered upon any generic failure in AON Service */
    SERVICE_FAILED      = 1
};

/** AON types supported by the service */
enum AONServiceType : int32_t
{
    /** Face detected */
    FaceDetect         = 0,

    /** QR Code */
    QRCode             = 1,

    /** Vendor defined events start */
    VendorDefinedStart = 0x1000000,

    /** Add vendor defined events here */

    /** Vendor defined event End */
    VendorDefinedEnd
};