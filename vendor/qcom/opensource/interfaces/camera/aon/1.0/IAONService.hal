/*
 * Copyright (c) 2020 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *    * Neither the name of The Linux Foundation. nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package vendor.qti.hardware.camera.aon@1.0;

import @1.0::types;
import @1.0::IAONServiceCallBack;

interface IAONService {

    /**
     * Get capabilities supported by AON Service.
     *
     * @return serviceCapabilities list of AON service types supported by service.
     *
     */
    getCapabilities() generates (vec<AONServiceType> serviceCapabilities);

    /**
     * Registers for AON service events.
     *
     * @param  callback            callback function that gets called during AON event
     * @param  serviceType         AON service type that client is interested in
     * @return status              Returns status of function.
     *                             Returns 0 in case of success; non-zero otherwise
     * @return clientHandle        AON Service assigns a valid client handle upon successfull return
     *                             Any value greater than 0 in case of success.
     *                             0 in case of failure
     *
     */
    registerClient(IAONServiceCallBack callback, AONServiceType serviceType)
                    generates (Status status, uint64_t clientHandle);


    /**
     * Unregisters for AON service events.
     *
     * @param clientHandle         Valid client handle assigned during registerClient API
     *                             This client handle will be no longer valid after return
     * @return status              Returns status of function.
     *                             Returns 0 in case of success; non-zero otherwise
     *
     */
    unregisterClient(uint64_t clientHandle) generates (Status status);
};