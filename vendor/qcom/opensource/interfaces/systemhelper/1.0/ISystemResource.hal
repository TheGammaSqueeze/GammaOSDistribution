/*
 * Copyright (c) 2019, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package vendor.qti.hardware.systemhelper@1.0;

import android.hardware.graphics.bufferqueue@1.0::IGraphicBufferProducer;

interface ISystemResource {
    /**
     * Acquire a system resource
     *
     * @param resource resource to acquire
     * @return status resource acquisition status
     *                0 in case of success and negative in case of failure
     * @return resourceId unique resource identifier for acquired resource
     *                      Note : resourceId stands invalid in case of API returned error
     */
    acquire(SystemResourceType resource) generates (int32_t status,
                                                    uint32_t resourceId);
    /**
     * Acquire a system graphics surface.
     *
     * @param width surface width
     * @param height surface height
     * @return status resource acquisition status
     *                0 in case of success and negative in case of failure
     * @return resourceId unique resource identifier for acquired resource
     *                    Note : resourceId stands invalid in case of API returned error
     * @return surface IGraphicBufferProducer interface for buffer enqueue/dequeue
     */
    acquireSurface(uint32_t width, uint32_t height)
        generates (int32_t status,
                   uint32_t resourceId,
                   IGraphicBufferProducer surface);

    /**
     * Release an acquired resource
     *
     * Both resource and surface shall be released via this API.
     *
     * @param resourceId unique resource identifier to be released
     * @return status    resource release status
     *                   0 in case of success and -1 in case of failure
     */
    release(uint32_t resourceId) generates (int32_t status);
};
