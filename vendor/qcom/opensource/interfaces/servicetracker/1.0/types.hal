/*
* Copyright (c) 2019 The Linux Foundation. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*    * Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above
*      copyright notice, this list of conditions and the following
*      disclaimer in the documentation and/or other materials provided
*      with the distribution.
*    * Neither the name of The Linux Foundation. nor the names of its
*      contributors may be used to endorse or promote products derived
*      from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package vendor.qti.hardware.servicetracker@1.0;

/**
*Enum Values indicating the result of operation
*/
enum Status : int32_t {
    /** No errors. */
    SUCCESS,
    /**
    *the component for which the query is made
    * is not yet available
    */
    ERROR_NOT_AVAILABLE,
    /** the arguments passed are invalid*/
    ERROR_INVALID_ARGS,
    /**
    *the information asked for the componenent
    *is not supported
    */
    ERROR_NOT_SUPPORTED,
    ERROR_UNKNOWN
};

/**
*Client information recieved by AMS
*/
struct ClientData {
    string processName;
    int32_t pid;
};

/**
*Service information recieved by AMS
*/
struct ServiceData {
    string packageName;
    string processName;
    int32_t pid;
	double lastActivity;
    bool serviceB;
};

/**
*structure to define client to service connection
*/
struct ClientConnection {
    string serviceName;
    int32_t servicePid;
    int32_t count;
};


/**
*structure to define service to client connection
*/
struct ServiceConnection {
    string clientName;
    int32_t clientPid;
    int32_t count;
};

/**
*Client information
*/
struct ClientRecord {
    string processName;
    int32_t pid;
    vec<ClientConnection> conn;
};

/**
*Service information
*/
struct ServiceRecord {
    string packageName;
    string processName;
    int32_t pid;
    bool serviceB;
	double lastActivity;
    vec<ServiceConnection> conn;
};

