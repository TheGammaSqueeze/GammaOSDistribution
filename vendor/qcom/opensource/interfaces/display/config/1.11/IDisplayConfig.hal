/*
 * Copyright (c) 2019 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *    * Neither the name of The Linux Foundation. nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package vendor.display.config@1.11;

import @1.10::IDisplayConfig;

interface IDisplayConfig extends @1.10::IDisplayConfig {
    enum QsyncMode : int32_t {
        /* Clear previous qsync mode if any */
        NONE,

        /*
         * Enable qsync only for the next frame. Qsync mode will be
         * automatically cleared after next frame has been composed.
         * Subsequent frames will not be affected.
         */
        WAIT_FOR_FENCES_ONE_FRAME,

        /*
         * Enable qsync for every frame from next cycle onwards. Vsync timelines
         * will be extended only if a frame has been committed to HWC i.e. if
         * HWC does not receive frames from client, vsync will be triggered at
         * normal intervals. This is similar to setting qsync mode as
         * WAIT_FOR_FENCES_ONE_FRAME with every commit.
         */
        WAIT_FOR_FENCES_EACH_FRAME,

        /*
         * Enable qsync for every vsync interrupt from next cycle onwards.
         * Vsync timelines will be extended to maximum stretch possible in an
         * anticipation that a frame will be commited shortly. If frames are
         * not commited, final frame rate will eventually drop to lowest
         * possible frame rate.
         */
        WAIT_FOR_COMMIT_EACH_FRAME,
    };

    /*
     * Set the desired qsync mode which will ideally take effect from next
     * composition cycle. Mode change may take longer than one cycle if there
     * is a conflict with current operation mode.
     *
     * @param disp_id display id.
     * @param mode desired qsync mode.
     *
     * @return error is NONE upon success.
     */
    @callflow(next="*")
    setQsyncMode(uint32_t disp_id, QsyncMode mode)  generates (int32_t error);
};
