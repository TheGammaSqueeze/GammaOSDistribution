/*
* Copyright (c) 2018 The Linux Foundation. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*    * Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above
*      copyright notice, this list of conditions and the following
*      disclaimer in the documentation and/or other materials provided
*      with the distribution.
*    * Neither the name of The Linux Foundation. nor the names of its
*      contributors may be used to endorse or promote products derived
*      from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package vendor.display.config@1.2;

import @1.1::IDisplayConfig;

interface IDisplayConfig extends @1.1::IDisplayConfig {
   enum DisplayTypeExt : int32_t {
        // primary display is just one, can be either builtin or pluggable.
        DISPLAY_PRIMARY = 0,
        DISPLAY_BUILTIN = 1,
        DISPLAY_PLUGGABLE = 2,
        DISPLAY_VIRTUAL = 3,
    };

    /*
    * Sets display index range that caller defined for a given display type.
    *
    * @param disp_type display type.
    * @param base start value in the range.
    * @param count maximum number of supported display of this type.
    *
    * @return one of the hwc2 errors
    */
    @callflow(next="*")
    setDisplayIndex(DisplayTypeExt disp_type, uint32_t base, uint32_t count)
          generates  (int32_t error);
};
