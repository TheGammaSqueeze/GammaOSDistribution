package vendor.semc.hardware.display@1.0;

interface IDisplay {
	init() generates (int32_t status);
	exit() generates (int32_t status);
	get_wp_limits() generates (PccLimits limits);
	set_primary_cc_matrix(vec<float> cc_matrix) generates (int32_t status);
	get_primary_cc_matrix() generates (vec<float> cc_matrix);
	save_primary_cc_matrix(vec<float> cc_matrix) generates (int32_t status);
	calibrate_from_file() generates (int32_t status);
	get_wp_limits_pcc() generates (PccLimits limits);
	set_primary_pcc_matrix(PccMatrix cc_matrix) generates (int32_t status);
	get_primary_pcc_matrix() generates (PccMatrix cc_matrix);
	save_primary_pcc_matrix(PccMatrix cc_matrix) generates (int32_t status);
	save_reset_data() generates (int32_t status);
	init_for_mm_pp() generates (int32_t status);
	load_pcc() generates (int32_t status);
	cabl_turn_on() generates (int32_t status);
	cabl_turn_off() generates (int32_t status);
	cabl_set_quality(int32_t data) generates (int32_t status);
	ad_turn_on() generates (int32_t status);
	ad_turn_off() generates (int32_t status);
	ad_set_assertiveness(int32_t data) generates (int32_t status);
	get_color_balance() generates (vec<double> conf);
	set_color_balance(vec<double> conf) generates (int32_t status);
	check_color_mode(int32_t mode_id) generates (bool is_enable, int32_t act_mode, int32_t mode_cnt);
	color_mode_switch() generates (int32_t status);
	set_color_mode(int32_t mode_id) generates (int32_t status);
	set_displaysetting_enabled(int32_t enable) generates (int32_t status);
	get_displaysetting_enabled() generates (int32_t status);
	get_pcc_mdp_rgb() generates (PccMatrix cc_matrix);
};
