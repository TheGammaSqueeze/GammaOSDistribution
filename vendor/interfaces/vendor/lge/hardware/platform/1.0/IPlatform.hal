package vendor.lge.hardware.platform@1.0;

interface IPlatform {
	getPcbRevisionInfo() generates (int32_t err, string info);
	getCpuPossible() generates (int32_t err, int32_t cnt);
	getCpuScalingCpuFreq(int32_t num) generates (int32_t cpu, int32_t clock);
	getGpuClockRate() generates (int32_t err, int32_t clock);
	getSmplBootup() generates (int32_t err, bool isSmpl);
	getSmplCountFilePath() generates (int32_t err, string path);
	getCpuOnlineStatus(int32_t num) generates (int32_t err, bool isOnline);
	getCpuInfoMaxFreq(int32_t num) generates (int32_t err, int32_t clock);
	getVsyncSkipRatio() generates (int32_t err, string ratio);
	getTritonCurPolicy() generates (int32_t err, int32_t policy);
	getCancunIsCompact() generates (int32_t, bool);
	getSpeedBin() generates (int32_t err, int32_t num);
	getHardResetTestMode() generates (int32_t err, bool enabled);
	setHardRestTestMode(bool enable) generates (int32_t err);
	getPowerVolDownResetMode() generaest (int32_t err, bool enabled);
	setPowerVolDownResetMode(bool enable) generates (int32_t err);
	getHighLuxMode() generates (int32_t err, bool enabled);
	setHighLuxMode(bool enable) generates (int32_t err);
	getMmcState(eMMCInfo num) generates (int32_t err, string data);
	getCrashInfo() generates (int32_t err, string info);
	getVregCtrl(int32_t name) generates (int32_t err, bool status);
	setVregCtrl(int32_t name, int32_t ctrl) generates (int32_t err);
};
