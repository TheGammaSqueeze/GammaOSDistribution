/*
 * Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Not a contribution.
 */

/*
 *  Copyright 2020 NXP
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package vendor.nxp.hardware.nfc@2.0;


/*
 * Functions supported
 */
interface INqNfc {

    /*
     * Returns the NFC HW chip-id present in the device
     */
    getNfcChipId() generates (string nq_chipid);

    /*
     * Returns the NFC Firmware version of the device
     */
    getNfcFirmwareVersion() generates (string nq_fw_ver);

    /*
     * Gets vendor params values whose Key has been provided.
     *
     * @param string
     * @return output data as string
     */
    getVendorParam(string key)  generates (string value);

    /*
     * Saves the vendor params provided as key-value pair
     *
     * @param string key string value
     * @return status as a boolean, true if success, false if failed
     */
    setVendorParam(string key, string value)  generates (bool status);

    /*
     * reset the ese based on resettype
     *
     * @param uint64_t to specify resetType
     * @return status as a boolean, true if success, false if failed
     */
    resetEse(uint64_t resetType) generates (bool status);

    /*
     * updates ese with current state and notifies upper layer
     *
     * @param input current ese state to set
     * @return status as a boolean, true if success, false if failed
     */
    setEseUpdateState(NxpNfcHalEseState eSEState)  generates (bool status);

    /*
     * Sets Transit config value
     *
     * @param string transit config value
     * @return status as a boolean, true if success, false if failed
     */
    setNxpTransitConfig(string transitConfValue) generates (bool status);

    /*
     * api to check jcop update is required or not
     *
     * @param none
     * @return status as a boolean, true if JCOP update required, false if not required.
     */
     isJcopUpdateRequired() generates (bool status);

    /*
     * api to check LS update is required or not
     *
     * @param none
     * @return status as a boolean, true if LS update required, false if not required.
     */
     isLsUpdateRequired() generates (bool status);
};
