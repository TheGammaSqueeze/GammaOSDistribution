/**
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <androidfw/ApkAssets.h>

#include <vector>
#include "../includes/common.h"
#include "../includes/memutils.h"

using android::LoadedArsc;

bool testInProgress = false;
char enable_selective_overload = ENABLE_NONE;
FILE *file = nullptr;

struct sigaction new_action, old_action;
void sigsegv_handler(int signum, siginfo_t *info, void *context) {
    if (testInProgress && info->si_signo == SIGSEGV) {
        (*old_action.sa_sigaction)(signum, info, context);
        return;
    }
    _exit(EXIT_FAILURE);
}

void exitHandler(void) {
    if (file) {
        fclose(file);
        file = nullptr;
    }
}

int main(int argc, char **argv) {
    atexit(exitHandler);
    sigemptyset(&new_action.sa_mask);
    new_action.sa_flags = SA_SIGINFO;
    new_action.sa_sigaction = sigsegv_handler;
    sigaction(SIGSEGV, &new_action, &old_action);
    FAIL_CHECK(argc >= 2);
    file = fopen(argv[1], "r");
    FAIL_CHECK(file);
    fseek(file, 0, SEEK_END);
    size_t size = ftell(file);
    fseek(file, 0, SEEK_SET);
    enable_selective_overload = ENABLE_ALL;
    std::vector<uint8_t> buffer(size);
    enable_selective_overload = ENABLE_FREE_CHECK | ENABLE_REALLOC_CHECK;
    FAIL_CHECK(fread((void *)buffer.data(), 1, size, file) == size);
    testInProgress = true;
    LoadedArsc::Load(buffer.data(), size);
    testInProgress = false;
    return EXIT_SUCCESS;
}
