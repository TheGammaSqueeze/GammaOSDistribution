/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.nokia.pl2_6_1;

public final class R {
  public static final class array {
    /**
     * Array of desired screen brightness in nits corresponding to the lux values
     * in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
     * config_screenBrightnessMaximumNits, the display brightness is defined as the measured
     * brightness of an all-white image.
     * If this is defined then:
     * - config_autoBrightnessLcdBacklightValues should not be defined
     * - config_screenBrightnessNits must be defined
     * - config_screenBrightnessBacklight must be defined
     * This array should have size one greater than the size of the config_autoBrightnessLevels
     * array. The brightness values must be non-negative and non-decreasing. This must be
     * overridden in platform specific overlays
     */
    public static final int config_autoBrightnessDisplayValuesNits=0x7f010000;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N  1 zones as follows:
     * Zone 0:        0 <= LUX < array[0]
     * Zone 1:        array[0] <= LUX < array[1]
     * ...
     * Zone N:        array[N - 1] <= LUX < array[N]
     * Zone N + 1     array[N] <= LUX < infinity
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * Values for GPS configuration
     */
    public static final int config_gpsParameters=0x7f010002;
    /**
     * Vibrator pattern for a very short but reliable vibration for soft keyboard tap
     */
    public static final int config_keyboardTapVibePattern=0x7f010003;
    /**
     * Vibrator pattern for feedback about a long screen/key press
     */
    public static final int config_longPressVibePattern=0x7f010004;
    /**
     * Configure mobile tcp buffer sizes in the form:
     * rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
     * If no value is found for the rat-name in use, the system default will be applied.
     */
    public static final int config_mobile_tcp_buffers=0x7f010005;
    /**
     * An array describing the screen's backlight values corresponding to the brightness
     * values in the config_screenBrightnessNits array.
     * This array should be equal in size to config_screenBrightnessBacklight.
     */
    public static final int config_screenBrightnessBacklight=0x7f010006;
    /**
     * An array of floats describing the screen brightness in nits corresponding to the backlight
     * values in the config_screenBrightnessBacklight array.  On OLED displays these  values
     * should be measured with an all white image while the display is in the fully on state.
     * Note that this value should *not* reflect the maximum brightness value for any high
     * brightness modes but only the maximum brightness value obtainable in a sustainable manner.
     * This array should be equal in size to config_screenBrightnessBacklight
     */
    public static final int config_screenBrightnessNits=0x7f010007;
    /**
     * Vibrator pattern for feedback about touching a virtual key
     */
    public static final int config_virtualKeyVibePattern=0x7f010008;
    /**
     * the 6th element indicates boot-time dependency-met value.
     */
    public static final int networkAttributes=0x7f010009;
    /**
     * An Array of "[ConnectivityManager connectionType],
     * [# simultaneous connection types]"
     */
    public static final int radioAttributes=0x7f01000a;
  }
  public static final class bool {
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
    /**
     * Boolean indicating if current platform supports HFP inband ringing
     */
    public static final int config_bluetooth_hfp_inband_ringing_support=0x7f020001;
    /**
     * Whether the display blanks itself when going from a doze to a non-doze state
     */
    public static final int config_displayBlanksAfterDoze=0x7f020002;
    /**
     * If true, the doze component is not started until after the screen has been turned off
     * and the screen off animation has been performed.
     */
    public static final int config_dozeAfterScreenOffByDefault=0x7f020003;
    /**
     * Doze: should the TYPE_PICK_UP_GESTURE sensor be used as a pulse signal.
     */
    public static final int config_dozePulsePickup=0x7f020004;
    /**
     * Is the device capable of hot swapping an UICC Card
     */
    public static final int config_hotswapCapable=0x7f020005;
    /**
     * Is the notification LED intrusive?
     * Used to decide if there should be a disable option
     */
    public static final int config_intrusiveNotificationLed=0x7f020006;
    /**
     * Specifies whether to decouple the interactive state of the device from the display on/off state.
     */
    public static final int config_powerDecoupleInteractiveModeFromDisplay=0x7f020007;
    /**
     * True if Unprocessed audio source supports the required frequency range and level
     */
    public static final int config_supportAudioSourceUnprocessed=0x7f020008;
    /**
     * Whether device supports double tap to wake
     */
    public static final int config_supportDoubleTapWake=0x7f020009;
    /**
     * Indicate whether to allow the device to suspend when the screen is off
     * due to the proximity sensor.  This resource should only be set to true
     * if the sensor HAL correctly handles the proximity sensor as a wake-up source.
     * Otherwise, the device may fail to wake out of suspend reliably.
     * The default is false.
     */
    public static final int config_suspendWhenScreenOffDueToProximity=0x7f02000a;
    /**
     * If this is true, device supports Sustained Performance Mode.
     */
    public static final int config_sustainedPerformanceModeSupported=0x7f02000b;
    /**
     * Config determines whether to update phone object when voice registration
     * state changes. Voice radio tech change will always trigger an update of
     * phone object irrespective of this config
     */
    public static final int config_switch_phone_on_voice_reg_state_change=0x7f02000c;
    /**
     * Boolean indicating whether the wifi chipset has background scan support
     */
    public static final int config_wifi_background_scan_support=0x7f02000d;
    /**
     * Wifi driver supports batched scan
     */
    public static final int config_wifi_batched_scan_supported=0x7f02000e;
    /**
     * Boolean indicating whether the wifi chipset has dual frequency band support
     */
    public static final int config_wifi_dual_band_support=0x7f02000f;
    /**
     * Boolean indicating whether 802.11r Fast BSS Transition is enabled on this platform
     */
    public static final int config_wifi_fast_bss_transition_enabled=0x7f020010;
    /**
     * The restoring is handled by modem if it is true
     */
    public static final int skip_restoring_network_selection=0x7f020011;
  }
  public static final class integer {
    /**
     * Stability requirements in milliseconds for accepting a new brightness level.  This is used
     * for debouncing the light sensor.  Different constants are used to debounce the light sensor
     * when adapting to brighter or darker environments.  This parameter controls how quickly
     * brightness changes occur in response to an observed change in light level that exceeds the
     * hysteresis threshold.
     */
    public static final int config_autoBrightnessBrighteningLightDebounce=0x7f030000;
    public static final int config_autoBrightnessDarkeningLightDebounce=0x7f030001;
    /**
     * Operating voltage for bluetooth controller. 0 by default
     */
    public static final int config_bluetooth_operating_voltage_mv=0x7f030002;
    /**
     * Minimum screen brightness allowed by the power manager.
     */
    public static final int config_screenBrightnessDim=0x7f030003;
    /**
     * Screen brightness when dozing.
     */
    public static final int config_screenBrightnessDoze=0x7f030004;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f030005;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f030006;
  }
}