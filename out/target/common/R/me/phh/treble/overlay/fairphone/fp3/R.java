/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.fairphone.fp3;

public final class R {
  public static final class array {
    /**
     * Array of desired screen brightness in nits corresponding to the lux values
     * in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
     * config_screenBrightnessMaximumNits, the display brightness is defined as the measured
     * brightness of an all-white image.
     * If this is defined then:
     * - config_autoBrightnessLcdBacklightValues should not be defined
     * - config_screenBrightnessNits must be defined
     * - config_screenBrightnessBacklight must be defined
     * This array should have size one greater than the size of the config_autoBrightnessLevels
     * array. The brightness values must be non-negative and non-decreasing. This must be
     * overridden in platform specific overlays
     */
    public static final int config_autoBrightnessDisplayValuesNits=0x7f010000;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N  1 zones as follows:
     * Zone 0:        0 <= LUX < array[0]
     * Zone 1:        array[0] <= LUX < array[1]
     * ...
     * Zone N:        array[N - 1] <= LUX < array[N]
     * Zone N + 1     array[N] <= LUX < infinity
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * 1500 at Fp3, 1410 at G7
     */
    public static final int config_defaultPinnerServiceFiles=0x7f010002;
    /**
     * Values for GPS configuration
     */
    public static final int config_gpsParameters=0x7f010003;
    /**
     * Vibrator pattern for a very short but reliable vibration for soft keyboard tap
     */
    public static final int config_keyboardTapVibePattern=0x7f010004;
    /**
     * Vibrator pattern for feedback about a long screen/key press
     */
    public static final int config_longPressVibePattern=0x7f010005;
    /**
     * Configure mobile tcp buffer sizes in the form:
     * rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
     * If no value is found for the rat-name in use, the system default will be applied.
     */
    public static final int config_mobile_tcp_buffers=0x7f010006;
    /**
     * An array describing the screen's backlight values corresponding to the brightness
     * values in the config_screenBrightnessNits array.
     * This array should be equal in size to config_screenBrightnessBacklight.
     */
    public static final int config_screenBrightnessBacklight=0x7f010007;
    /**
     * An array of floats describing the screen brightness in nits corresponding to the backlight
     * values in the config_screenBrightnessBacklight array.  On OLED displays these  values
     * should be measured with an all white image while the display is in the fully on state.
     * Note that this value should *not* reflect the maximum brightness value for any high
     * brightness modes but only the maximum brightness value obtainable in a sustainable manner.
     * This array should be equal in size to config_screenBrightnessBacklight
     */
    public static final int config_screenBrightnessNits=0x7f010008;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * USB interfaces.  If the device doesn't want to support tething over USB this should
     * be empty.  An example would be "usb.*"
     */
    public static final int config_tether_usb_regexs=0x7f010009;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
     * should be empty.  An example would be "softap.*"
     */
    public static final int config_tether_wifi_regexs=0x7f01000a;
    /**
     * Vibrator pattern for feedback about touching a virtual key
     */
    public static final int config_virtualKeyVibePattern=0x7f01000b;
    /**
     * the 6th element indicates boot-time dependency-met value.
     */
    public static final int networkAttributes=0x7f01000c;
    /**
     * An Array of "[ConnectivityManager connectionType],
     * [# simultaneous connection types]"
     */
    public static final int radioAttributes=0x7f01000d;
  }
  public static final class bool {
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
    /**
     * Flag specifying whether VoLTE should be available for carrier: independent of
     * carrier provisioning. If false: hard disabled. If true: then depends on carrier
     * provisioning, availability etc
     */
    public static final int config_carrier_volte_available=0x7f020001;
    /**
     * Flag specifying whether WFC over IMS should be available for carrier: independent of
     * carrier provisioning. If false: hard disabled. If true: then depends on carrier
     * provisioning, availability etc
     */
    public static final int config_carrier_wfc_ims_available=0x7f020002;
    /**
     * Flag specifying whether VoLTE & VT is available on device
     */
    public static final int config_device_volte_available=0x7f020003;
    /**
     * Flag specifying whether VT is available on device
     */
    public static final int config_device_vt_available=0x7f020004;
    /**
     * Flag specifying whether WFC over IMS is available on device
     */
    public static final int config_device_wfc_ims_available=0x7f020005;
    /**
     * If true, the doze component is not started until after the screen has been
     * turned off and the screen off animation has been performed.
     */
    public static final int config_dozeAfterScreenOffByDefault=0x7f020006;
    /**
     * Flag specifying whether or not IMS will use the ImsResolver dynamically
     */
    public static final int config_dynamic_bind_ims=0x7f020007;
    /**
     * Is the device capable of hot swapping an ICC Card
     */
    public static final int config_hotswapCapable=0x7f020008;
    /**
     * Is the notification LED intrusive? Used to decide if there should be a disable option
     */
    public static final int config_intrusiveNotificationLed=0x7f020009;
    /**
     * Control whether Night display is available. This should only be enabled on devices
     * that have a HWC implementation that can apply the matrix passed to setColorTransform
     * without impacting power, performance, and app compatibility (e.g. protected content).
     */
    public static final int config_nightDisplayAvailable=0x7f02000a;
    /**
     * Power Management: Specifies whether to decouple the auto-suspend state of the
     * device from the display on/off state.
     * When false, autosuspend_disable() will be called before the display is turned on
     * and autosuspend_enable() will be called after the display is turned off.
     * This mode provides best compatibility for devices using legacy power management
     * features such as early suspend / late resume.
     * When true, autosuspend_display() and autosuspend_enable() will be called
     * independently of whether the display is being turned on or off.  This mode
     * enables the power manager to suspend the application processor while the
     * display is on.
     * This resource should be set to "true" when a doze component has been specified
     * to maximize power savings but not all devices support it.
     * Refer to autosuspend.h for details.
     */
    public static final int config_powerDecoupleAutoSuspendModeFromDisplay=0x7f02000b;
    /**
     * Power Management: Specifies whether to decouple the interactive state of the
     * device from the display on/off state.
     * When false, setInteractive(..., true) will be called before the display is turned on
     * and setInteractive(..., false) will be called after the display is turned off.
     * This mode provides best compatibility for devices that expect the interactive
     * state to be tied to the display state.
     * When true, setInteractive(...) will be called independently of whether the display
     * is being turned on or off.  This mode enables the power manager to reduce
     * clocks and disable the touch controller while the display is on.
     * This resource should be set to "true" when a doze component has been specified
     * to maximize power savings but not all devices support it.
     * Refer to power.h for details.
     */
    public static final int config_powerDecoupleInteractiveModeFromDisplay=0x7f02000c;
    /**
     * Boolean indicating whether the HWC setColorTransform function can be performed efficiently
     * in hardware.
     */
    public static final int config_setColorTransformAccelerated=0x7f02000d;
    /**
     * Whether a software navigation bar should be shown. NOTE: in the future this may be
     * autodetected from the Configuration.
     */
    public static final int config_showNavigationBar=0x7f02000e;
    /**
     * Enable system navigation keys.
     */
    public static final int config_supportSystemNavigationKeys=0x7f02000f;
    /**
     * TODO
     */
    public static final int config_suspendWhenScreenOffDueToProximity=0x7f020010;
    /**
     * Config determines whether to update phone object when voice registration
     * state changes. Voice radio tech change will always trigger an update of
     * phone object irrespective of this config
     */
    public static final int config_switch_phone_on_voice_reg_state_change=0x7f020011;
    /**
     * When true use the linux /dev/input/event subsystem to detect the switch changes
     * on the headphone/microphone jack. When false use the older uevent framework.
     */
    public static final int config_useDevInputEventForAudioJack=0x7f020012;
    /**
     * Boolean indicating whether the wifi chipset supports background scanning mechanism.
     * This mechanism allows the host to remain in suspend state and the dongle to actively
     * scan and wake the host when a configured SSID is detected by the dongle. This chipset
     * capability can provide power savings when wifi needs to be always kept on.
     */
    public static final int config_wifi_background_scan_support=0x7f020013;
    /**
     * Wifi driver supports batched scan
     */
    public static final int config_wifi_batched_scan_supported=0x7f020014;
    /**
     * Boolean indicating whether the wifi chipset has dual frequency band support
     */
    public static final int config_wifi_dual_band_support=0x7f020015;
    /**
     * The restoring is handled by modem if it is true
     */
    public static final int skip_restoring_network_selection=0x7f020016;
  }
  public static final class fraction {
    /**
     * The maximum range of gamma adjustment possible using the screen
     * auto-brightness adjustment setting.
     */
    public static final int config_autoBrightnessAdjustmentMaxGamma=0x7f030000;
  }
  public static final class integer {
    /**
     * Stability requirements in milliseconds for accepting a new brightness level.  This is used
     * for debouncing the light sensor.  Different constants are used to debounce the light sensor
     * when adapting to brighter or darker environments.  This parameter controls how quickly
     * brightness changes occur in response to an observed change in light level that exceeds the
     * hysteresis threshold.
     */
    public static final int config_autoBrightnessBrighteningLightDebounce=0x7f040000;
    public static final int config_autoBrightnessDarkeningLightDebounce=0x7f040001;
    /**
     * Transferred from Moto G7 Power by GD
     */
    public static final int config_autoPowerModeAnyMotionSensor=0x7f040002;
    /**
     * 0 at Fp3, 30 at G7
     */
    public static final int config_mobile_mtu=0x7f040003;
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f040004;
    /**
     * Screen brightness used to dim the screen while dozing in a very low power state.
     * May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDoze=0x7f040005;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f040006;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f040007;
    /**
     * Shutdown if the battery temperature exceeds (this value * 0.1) Celsius.
     */
    public static final int config_shutdownBatteryTemperature=0x7f040008;
  }
  public static final class string {
    /**
     * ImsService package name to bind to by default, if config_dynamic_bind_ims is true
     */
    public static final int config_ims_package=0x7f050000;
  }
  public static final class xml {
    public static final int power_profile=0x7f060000;
  }
}