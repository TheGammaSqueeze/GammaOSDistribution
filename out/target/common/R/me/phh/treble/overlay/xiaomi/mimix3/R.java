/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.xiaomi.mimix3;

public final class R {
  public static final class array {
    /**
     * Array of desired screen brightness in nits corresponding to the lux values
     * in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
     * config_screenBrightnessMaximumNits, the display brightness is defined as the measured
     * brightness of an all-white image.
     * If this is defined then:
     * - config_autoBrightnessLcdBacklightValues should not be defined
     * - config_screenBrightnessNits must be defined
     * - config_screenBrightnessBacklight must be defined
     * This array should have size one greater than the size of the config_autoBrightnessLevels
     * array. The brightness values must be non-negative and non-decreasing. This must be
     * overridden in platform specific overlays
     */
    public static final int config_autoBrightnessDisplayValuesNits=0x7f010000;
    public static final int config_autoBrightnessLcdBacklightValues=0x7f010001;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N  1 zones as follows:
     * Zone 0:        0 <= LUX < array[0]
     * Zone 1:        array[0] <= LUX < array[1]
     * ...
     * Zone N:        array[N - 1] <= LUX < array[N]
     * Zone N + 1     array[N] <= LUX < infinity
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010002;
    public static final int config_dynamicHysteresisBrightLevels=0x7f010003;
    public static final int config_dynamicHysteresisDarkLevels=0x7f010004;
    public static final int config_dynamicHysteresisLuxLevels=0x7f010005;
    public static final int config_minimumBrightnessCurveNits=0x7f010006;
    /**
     * An array describing the screen's backlight values corresponding to the brightness
     * values in the config_screenBrightnessNits array.
     * This array should be equal in size to config_screenBrightnessBacklight.
     */
    public static final int config_screenBrightnessBacklight=0x7f010007;
    /**
     * An array of floats describing the screen brightness in nits corresponding to the backlight
     * values in the config_screenBrightnessBacklight array.  On OLED displays these  values
     * should be measured with an all white image while the display is in the fully on state.
     * Note that this value should *not* reflect the maximum brightness value for any high
     * brightness modes but only the maximum brightness value obtainable in a sustainable manner.
     * This array should be equal in size to config_screenBrightnessBacklight
     */
    public static final int config_screenBrightnessNits=0x7f010008;
  }
  public static final class bool {
    public static final int config_allowAutoBrightnessWhileDozing=0x7f020000;
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020001;
    public static final int config_bluetooth_le_peripheral_mode_supported=0x7f020002;
    public static final int config_device_volte_available=0x7f020003;
    public static final int config_device_vt_available=0x7f020004;
    public static final int config_displayBlanksAfterDoze=0x7f020005;
    public static final int config_dozeAfterScreenOff=0x7f020006;
    public static final int config_dozeAfterScreenOffByDefault=0x7f020007;
    public static final int config_dozeAlwaysOnDisplayAvailable=0x7f020008;
    public static final int config_enableBurnInProtection=0x7f020009;
    public static final int config_hotswapCapable=0x7f02000a;
    public static final int config_lidControlsSleep=0x7f02000b;
    public static final int config_powerDecoupleAutoSuspendModeFromDisplay=0x7f02000c;
    public static final int config_showNavigationBar=0x7f02000d;
    public static final int config_supportAudioSourceUnprocessed=0x7f02000e;
    public static final int config_sustainedPerformanceModeSupported=0x7f02000f;
    public static final int config_switch_phone_on_voice_reg_state_change=0x7f020010;
    public static final int config_useDevInputEventForAudioJack=0x7f020011;
    public static final int config_wifi_background_scan_support=0x7f020012;
    public static final int config_wifi_batched_scan_supported=0x7f020013;
    public static final int config_wifi_dual_band_support=0x7f020014;
    public static final int skip_restoring_network_selection=0x7f020015;
  }
  public static final class fraction {
    public static final int config_autoBrightnessAdjustmentMaxGamma=0x7f030000;
    /**
     * User activity timeout: Maximum screen dim duration as a percentage of screen off timeout.
     * This resource is similar to config_maximumScreenDimDuration but the maximum
     * screen dim duration is defined as a ratio of the overall screen off timeout
     * instead of as an absolute value in milliseconds.  This is useful for reducing
     * the dim duration when the screen off timeout is very short.
     * When computing the screen dim duration, the power manager uses the lesser
     * of the effective durations expressed by config_maximumScreenDimDuration and
     * config_maximumScreenDimRatio.
     * This value must be between 0% and 100%.  If the value is zero, the screen will not
     * dim before the device goes to sleep.
     */
    public static final int config_maximumScreenDimRatio=0x7f030001;
  }
  public static final class integer {
    /**
     * Stability requirements in milliseconds for accepting a new brightness level.  This is used
     * for debouncing the light sensor.  Different constants are used to debounce the light sensor
     * when adapting to brighter or darker environments.  This parameter controls how quickly
     * brightness changes occur in response to an observed change in light level that exceeds the
     * hysteresis threshold.
     */
    public static final int config_autoBrightnessBrighteningLightDebounce=0x7f040000;
    public static final int config_autoBrightnessDarkeningLightDebounce=0x7f040001;
    public static final int config_bluetooth_operating_voltage_mv=0x7f040002;
    public static final int config_brightness_ramp_rate_fast=0x7f040003;
    public static final int config_brightness_ramp_rate_slow=0x7f040004;
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f040005;
    public static final int config_screenBrightnessDoze=0x7f040006;
    /**
     * 8 bit brightness level of 6 corresponds to the 10 bit brightness level of 0x0B6,
     * 8 bit brightness level of 7 corresponds to the 10 bit brightness level of 0x0C1 on EVT1.1.
     */
    public static final int config_screenBrightnessForVrSettingDefault=0x7f040007;
    public static final int config_screenBrightnessForVrSettingMaximum=0x7f040008;
    public static final int config_screenBrightnessForVrSettingMinimum=0x7f040009;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f04000a;
    /**
     * Maximum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness above this level.
     */
    public static final int config_screenBrightnessSettingMaximum=0x7f04000b;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f04000c;
    public static final int config_shutdownBatteryTemperature=0x7f04000d;
  }
  public static final class xml {
    public static final int power_profile=0x7f050000;
  }
}