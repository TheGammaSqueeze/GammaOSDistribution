/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.htc.u12plus;

public final class R {
  public static final class array {
    /**
     * Array of output values for LCD backlight corresponding to the LUX values
     * in the config_autoBrightnessLevels array.  This array should have size one greater
     * than the size of the config_autoBrightnessLevels array.
     * This must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLcdBacklightValues=0x7f010000;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N  1 zones as follows:
     * Zone 0:        0 <= LUX < array[0]
     * Zone 1:        array[0] <= LUX < array[1]
     * ...
     * Zone N:        array[N - 1] <= LUX < array[N]
     * Zone N + 1     array[N] <= LUX < infinity
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
  }
  public static final class bool {
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
  }
  public static final class fraction {
    /**
     * The maximum range of gamma adjustment possible using the screen
     * auto-brightness adjustment setting.
     */
    public static final int config_autoBrightnessAdjustmentMaxGamma=0x7f030000;
  }
  public static final class integer {
    /**
     * Stability requirements in milliseconds for accepting a new brightness level.  This is used
     * for debouncing the light sensor.  Different constants are used to debounce the light sensor
     * when adapting to brighter or darker environments.  This parameter controls how quickly
     * brightness changes occur in response to an observed change in light level that exceeds the
     * hysteresis threshold.
     */
    public static final int config_autoBrightnessBrighteningLightDebounce=0x7f040000;
    public static final int config_autoBrightnessDarkeningLightDebounce=0x7f040001;
    /**
     * Amount of time it takes for the light sensor to warm up in milliseconds.
     * For this time after the screen turns on, the Power Manager
     * will not debounce light sensor readings
     */
    public static final int config_lightSensorWarmupTime=0x7f040002;
    public static final int config_screenBrightnessDark=0x7f040003;
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f040004;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f040005;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f040006;
  }
  public static final class xml {
    public static final int power_profile=0x7f050000;
  }
}