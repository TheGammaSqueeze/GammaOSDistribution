// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/blockreportspam/block_report_spam_dialog_info.proto

package com.android.dialer.blockreportspam;

/**
 * <pre>
 * Contains information needed in dialogs that allow a user to block a number
 * and/or report it as spam/not spam.
 * Next ID: 6
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.blockreportspam.BlockReportSpamDialogInfo}
 */
public  final class BlockReportSpamDialogInfo extends
    com.google.protobuf.GeneratedMessageLite<
        BlockReportSpamDialogInfo, BlockReportSpamDialogInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.blockreportspam.BlockReportSpamDialogInfo)
    BlockReportSpamDialogInfoOrBuilder {
  private BlockReportSpamDialogInfo() {
    normalizedNumber_ = "";
    countryIso_ = "";
  }
  private int bitField0_;
  public static final int NORMALIZED_NUMBER_FIELD_NUMBER = 1;
  private java.lang.String normalizedNumber_;
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public boolean hasNormalizedNumber() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public java.lang.String getNormalizedNumber() {
    return normalizedNumber_;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNormalizedNumberBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(normalizedNumber_);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumber(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void clearNormalizedNumber() {
    bitField0_ = (bitField0_ & ~0x00000001);
    normalizedNumber_ = getDefaultInstance().getNormalizedNumber();
  }
  /**
   * <pre>
   * A dialer-normalized version of the number used in the dialogs.
   * See DialerPhoneNumber#normalized_number.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumberBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value.toStringUtf8();
  }

  public static final int COUNTRY_ISO_FIELD_NUMBER = 2;
  private java.lang.String countryIso_;
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public boolean hasCountryIso() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public java.lang.String getCountryIso() {
    return countryIso_;
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCountryIsoBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(countryIso_);
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIso(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value;
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void clearCountryIso() {
    bitField0_ = (bitField0_ & ~0x00000002);
    countryIso_ = getDefaultInstance().getCountryIso();
  }
  /**
   * <pre>
   * The ISO 3166-1 two letters country code of the number.
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIsoBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value.toStringUtf8();
  }

  public static final int CALL_TYPE_FIELD_NUMBER = 3;
  private int callType_;
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  @java.lang.Override
  public boolean hasCallType() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  @java.lang.Override
  public int getCallType() {
    return callType_;
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  private void setCallType(int value) {
    bitField0_ |= 0x00000004;
    callType_ = value;
  }
  /**
   * <pre>
   * Type of the call to/from the number, as defined in
   * android.provider.CallLog.Calls
   * </pre>
   *
   * <code>optional int32 call_type = 3;</code>
   */
  private void clearCallType() {
    bitField0_ = (bitField0_ & ~0x00000004);
    callType_ = 0;
  }

  public static final int REPORTING_LOCATION_FIELD_NUMBER = 4;
  private int reportingLocation_;
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  @java.lang.Override
  public boolean hasReportingLocation() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  @java.lang.Override
  public com.android.dialer.logging.ReportingLocation.Type getReportingLocation() {
    com.android.dialer.logging.ReportingLocation.Type result = com.android.dialer.logging.ReportingLocation.Type.forNumber(reportingLocation_);
    return result == null ? com.android.dialer.logging.ReportingLocation.Type.UNKNOWN_REPORTING_LOCATION : result;
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  private void setReportingLocation(com.android.dialer.logging.ReportingLocation.Type value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000008;
    reportingLocation_ = value.getNumber();
  }
  /**
   * <pre>
   * The location where the number is reported.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
   */
  private void clearReportingLocation() {
    bitField0_ = (bitField0_ & ~0x00000008);
    reportingLocation_ = 0;
  }

  public static final int CONTACT_SOURCE_FIELD_NUMBER = 5;
  private int contactSource_;
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  @java.lang.Override
  public boolean hasContactSource() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  @java.lang.Override
  public com.android.dialer.logging.ContactSource.Type getContactSource() {
    com.android.dialer.logging.ContactSource.Type result = com.android.dialer.logging.ContactSource.Type.forNumber(contactSource_);
    return result == null ? com.android.dialer.logging.ContactSource.Type.UNKNOWN_SOURCE_TYPE : result;
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  private void setContactSource(com.android.dialer.logging.ContactSource.Type value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000010;
    contactSource_ = value.getNumber();
  }
  /**
   * <pre>
   * The source where contact info is associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
   */
  private void clearContactSource() {
    bitField0_ = (bitField0_ & ~0x00000010);
    contactSource_ = 0;
  }

  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.blockreportspam.BlockReportSpamDialogInfo prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Contains information needed in dialogs that allow a user to block a number
   * and/or report it as spam/not spam.
   * Next ID: 6
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.blockreportspam.BlockReportSpamDialogInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.blockreportspam.BlockReportSpamDialogInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.blockreportspam.BlockReportSpamDialogInfo)
      com.android.dialer.blockreportspam.BlockReportSpamDialogInfoOrBuilder {
    // Construct using com.android.dialer.blockreportspam.BlockReportSpamDialogInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public boolean hasNormalizedNumber() {
      return instance.hasNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getNormalizedNumber() {
      return instance.getNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNormalizedNumberBytes() {
      return instance.getNormalizedNumberBytes();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumber(
        java.lang.String value) {
      copyOnWrite();
      instance.setNormalizedNumber(value);
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder clearNormalizedNumber() {
      copyOnWrite();
      instance.clearNormalizedNumber();
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number used in the dialogs.
     * See DialerPhoneNumber#normalized_number.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumberBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNormalizedNumberBytes(value);
      return this;
    }

    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public boolean hasCountryIso() {
      return instance.hasCountryIso();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getCountryIso() {
      return instance.getCountryIso();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCountryIsoBytes() {
      return instance.getCountryIsoBytes();
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIso(
        java.lang.String value) {
      copyOnWrite();
      instance.setCountryIso(value);
      return this;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder clearCountryIso() {
      copyOnWrite();
      instance.clearCountryIso();
      return this;
    }
    /**
     * <pre>
     * The ISO 3166-1 two letters country code of the number.
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIsoBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCountryIsoBytes(value);
      return this;
    }

    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    @java.lang.Override
    public boolean hasCallType() {
      return instance.hasCallType();
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    @java.lang.Override
    public int getCallType() {
      return instance.getCallType();
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public Builder setCallType(int value) {
      copyOnWrite();
      instance.setCallType(value);
      return this;
    }
    /**
     * <pre>
     * Type of the call to/from the number, as defined in
     * android.provider.CallLog.Calls
     * </pre>
     *
     * <code>optional int32 call_type = 3;</code>
     */
    public Builder clearCallType() {
      copyOnWrite();
      instance.clearCallType();
      return this;
    }

    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    @java.lang.Override
    public boolean hasReportingLocation() {
      return instance.hasReportingLocation();
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    @java.lang.Override
    public com.android.dialer.logging.ReportingLocation.Type getReportingLocation() {
      return instance.getReportingLocation();
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public Builder setReportingLocation(com.android.dialer.logging.ReportingLocation.Type value) {
      copyOnWrite();
      instance.setReportingLocation(value);
      return this;
    }
    /**
     * <pre>
     * The location where the number is reported.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ReportingLocation.Type reporting_location = 4;</code>
     */
    public Builder clearReportingLocation() {
      copyOnWrite();
      instance.clearReportingLocation();
      return this;
    }

    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    @java.lang.Override
    public boolean hasContactSource() {
      return instance.hasContactSource();
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    @java.lang.Override
    public com.android.dialer.logging.ContactSource.Type getContactSource() {
      return instance.getContactSource();
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public Builder setContactSource(com.android.dialer.logging.ContactSource.Type value) {
      copyOnWrite();
      instance.setContactSource(value);
      return this;
    }
    /**
     * <pre>
     * The source where contact info is associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 5;</code>
     */
    public Builder clearContactSource() {
      copyOnWrite();
      instance.clearContactSource();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.blockreportspam.BlockReportSpamDialogInfo)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.blockreportspam.BlockReportSpamDialogInfo();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "normalizedNumber_",
            "countryIso_",
            "callType_",
            "reportingLocation_",
            com.android.dialer.logging.ReportingLocation.Type.internalGetVerifier(),
            "contactSource_",
            com.android.dialer.logging.ContactSource.Type.internalGetVerifier(),
          };
          java.lang.String info =
              "\u0001\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0000\u0001\b\u0000\u0002" +
              "\b\u0001\u0003\u0004\u0002\u0004\f\u0003\u0005\f\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.blockreportspam.BlockReportSpamDialogInfo> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.blockreportspam.BlockReportSpamDialogInfo.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.blockreportspam.BlockReportSpamDialogInfo>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.blockreportspam.BlockReportSpamDialogInfo)
  private static final com.android.dialer.blockreportspam.BlockReportSpamDialogInfo DEFAULT_INSTANCE;
  static {
    BlockReportSpamDialogInfo defaultInstance = new BlockReportSpamDialogInfo();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      BlockReportSpamDialogInfo.class, defaultInstance);
  }

  public static com.android.dialer.blockreportspam.BlockReportSpamDialogInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<BlockReportSpamDialogInfo> PARSER;

  public static com.google.protobuf.Parser<BlockReportSpamDialogInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

