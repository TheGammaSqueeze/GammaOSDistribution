// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/phonenumberproto/dialer_phone_number.proto

package com.android.dialer;

/**
 * <pre>
 * A phone number for use in the dialer application in the context of a call. It
 * consists of a normalized number string and a two-letter country code.
 * The country is retrieved from CallLog.Calls#COUNTRY: "The ISO 3166-1 two
 * letters country code of the country where the user received or made the
 * call."
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.DialerPhoneNumber}
 */
public  final class DialerPhoneNumber extends
    com.google.protobuf.GeneratedMessageLite<
        DialerPhoneNumber, DialerPhoneNumber.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.DialerPhoneNumber)
    DialerPhoneNumberOrBuilder {
  private DialerPhoneNumber() {
    normalizedNumber_ = "";
    countryIso_ = "";
    postDialPortion_ = "";
  }
  private int bitField0_;
  public static final int NORMALIZED_NUMBER_FIELD_NUMBER = 1;
  private java.lang.String normalizedNumber_;
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public boolean hasNormalizedNumber() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public java.lang.String getNormalizedNumber() {
    return normalizedNumber_;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNormalizedNumberBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(normalizedNumber_);
  }
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumber(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value;
  }
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void clearNormalizedNumber() {
    bitField0_ = (bitField0_ & ~0x00000001);
    normalizedNumber_ = getDefaultInstance().getNormalizedNumber();
  }
  /**
   * <pre>
   * A dialer-normalized version of the number. Here are some general rules:
   * -Numbers containing "#" or starting with "*" are considered service numbers
   * and are stored exactly as the user dialed them.
   * -If a number is valid according to libphonenumber and can be parsed, this
   *  is the E164 version of it, with post dial digits appended.
   * -Otherwise, it is the network portion of the number as dialed with
   *  non-digits removed, with post dial digits appended. An example invalid
   *  number is a 7-digit US number (missing an area code) like "456-7890" which
   *  would be stored as "4567890".
   *  Note: Using this field without country_iso effectively loses country info
   *  when the number is not valid and no country prefix was prepended. This may
   *  cause numbers like {"456-7890", "US"} to be treated equivalently to
   *  {"456-7890", "DE"}, when they are not in fact equivalent.
   *  See DialerPhoneNumberUtil#parse.
   * </pre>
   *
   * <code>optional string normalized_number = 1;</code>
   */
  private void setNormalizedNumberBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    normalizedNumber_ = value.toStringUtf8();
  }

  public static final int COUNTRY_ISO_FIELD_NUMBER = 2;
  private java.lang.String countryIso_;
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public boolean hasCountryIso() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public java.lang.String getCountryIso() {
    return countryIso_;
  }
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCountryIsoBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(countryIso_);
  }
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIso(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value;
  }
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void clearCountryIso() {
    bitField0_ = (bitField0_ & ~0x00000002);
    countryIso_ = getDefaultInstance().getCountryIso();
  }
  /**
   * <pre>
   * The country in which the call to the number occurred, retrieved from
   * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
   * country where the user received or made the call."
   * </pre>
   *
   * <code>optional string country_iso = 2;</code>
   */
  private void setCountryIsoBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    countryIso_ = value.toStringUtf8();
  }

  public static final int IS_VALID_FIELD_NUMBER = 3;
  private boolean isValid_;
  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  @java.lang.Override
  public boolean hasIsValid() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  @java.lang.Override
  public boolean getIsValid() {
    return isValid_;
  }
  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  private void setIsValid(boolean value) {
    bitField0_ |= 0x00000004;
    isValid_ = value;
  }
  /**
   * <pre>
   * True if the number is valid according to libphonenumber.
   * </pre>
   *
   * <code>optional bool is_valid = 3;</code>
   */
  private void clearIsValid() {
    bitField0_ = (bitField0_ & ~0x00000004);
    isValid_ = false;
  }

  public static final int POST_DIAL_PORTION_FIELD_NUMBER = 4;
  private java.lang.String postDialPortion_;
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  @java.lang.Override
  public boolean hasPostDialPortion() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  @java.lang.Override
  public java.lang.String getPostDialPortion() {
    return postDialPortion_;
  }
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPostDialPortionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(postDialPortion_);
  }
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  private void setPostDialPortion(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    postDialPortion_ = value;
  }
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  private void clearPostDialPortion() {
    bitField0_ = (bitField0_ & ~0x00000008);
    postDialPortion_ = getDefaultInstance().getPostDialPortion();
  }
  /**
   * <pre>
   * The post dial portion of the number as described by
   * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
   * normalized_number, but this information is duplicated here for convenience.
   * This includes pause and wait characters, but strips other characters, so
   * for example would be ",123;456" given the raw input of "456-7890,123; 456".
   * </pre>
   *
   * <code>optional string post_dial_portion = 4;</code>
   */
  private void setPostDialPortionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    postDialPortion_ = value.toStringUtf8();
  }

  public static com.android.dialer.DialerPhoneNumber parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.DialerPhoneNumber parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.DialerPhoneNumber parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.DialerPhoneNumber parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.DialerPhoneNumber prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A phone number for use in the dialer application in the context of a call. It
   * consists of a normalized number string and a two-letter country code.
   * The country is retrieved from CallLog.Calls#COUNTRY: "The ISO 3166-1 two
   * letters country code of the country where the user received or made the
   * call."
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.DialerPhoneNumber}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.DialerPhoneNumber, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.DialerPhoneNumber)
      com.android.dialer.DialerPhoneNumberOrBuilder {
    // Construct using com.android.dialer.DialerPhoneNumber.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public boolean hasNormalizedNumber() {
      return instance.hasNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getNormalizedNumber() {
      return instance.getNormalizedNumber();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNormalizedNumberBytes() {
      return instance.getNormalizedNumberBytes();
    }
    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumber(
        java.lang.String value) {
      copyOnWrite();
      instance.setNormalizedNumber(value);
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder clearNormalizedNumber() {
      copyOnWrite();
      instance.clearNormalizedNumber();
      return this;
    }
    /**
     * <pre>
     * A dialer-normalized version of the number. Here are some general rules:
     * -Numbers containing "#" or starting with "*" are considered service numbers
     * and are stored exactly as the user dialed them.
     * -If a number is valid according to libphonenumber and can be parsed, this
     *  is the E164 version of it, with post dial digits appended.
     * -Otherwise, it is the network portion of the number as dialed with
     *  non-digits removed, with post dial digits appended. An example invalid
     *  number is a 7-digit US number (missing an area code) like "456-7890" which
     *  would be stored as "4567890".
     *  Note: Using this field without country_iso effectively loses country info
     *  when the number is not valid and no country prefix was prepended. This may
     *  cause numbers like {"456-7890", "US"} to be treated equivalently to
     *  {"456-7890", "DE"}, when they are not in fact equivalent.
     *  See DialerPhoneNumberUtil#parse.
     * </pre>
     *
     * <code>optional string normalized_number = 1;</code>
     */
    public Builder setNormalizedNumberBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNormalizedNumberBytes(value);
      return this;
    }

    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public boolean hasCountryIso() {
      return instance.hasCountryIso();
    }
    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getCountryIso() {
      return instance.getCountryIso();
    }
    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCountryIsoBytes() {
      return instance.getCountryIsoBytes();
    }
    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIso(
        java.lang.String value) {
      copyOnWrite();
      instance.setCountryIso(value);
      return this;
    }
    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder clearCountryIso() {
      copyOnWrite();
      instance.clearCountryIso();
      return this;
    }
    /**
     * <pre>
     * The country in which the call to the number occurred, retrieved from
     * CallLog.Calls#COUNTRY: "The ISO 3166-1 two letters country code of the
     * country where the user received or made the call."
     * </pre>
     *
     * <code>optional string country_iso = 2;</code>
     */
    public Builder setCountryIsoBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCountryIsoBytes(value);
      return this;
    }

    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    @java.lang.Override
    public boolean hasIsValid() {
      return instance.hasIsValid();
    }
    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    @java.lang.Override
    public boolean getIsValid() {
      return instance.getIsValid();
    }
    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    public Builder setIsValid(boolean value) {
      copyOnWrite();
      instance.setIsValid(value);
      return this;
    }
    /**
     * <pre>
     * True if the number is valid according to libphonenumber.
     * </pre>
     *
     * <code>optional bool is_valid = 3;</code>
     */
    public Builder clearIsValid() {
      copyOnWrite();
      instance.clearIsValid();
      return this;
    }

    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    @java.lang.Override
    public boolean hasPostDialPortion() {
      return instance.hasPostDialPortion();
    }
    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getPostDialPortion() {
      return instance.getPostDialPortion();
    }
    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPostDialPortionBytes() {
      return instance.getPostDialPortionBytes();
    }
    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public Builder setPostDialPortion(
        java.lang.String value) {
      copyOnWrite();
      instance.setPostDialPortion(value);
      return this;
    }
    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public Builder clearPostDialPortion() {
      copyOnWrite();
      instance.clearPostDialPortion();
      return this;
    }
    /**
     * <pre>
     * The post dial portion of the number as described by
     * PhoneNumberUtils#extractPostDialPortion. Note that this is also part of
     * normalized_number, but this information is duplicated here for convenience.
     * This includes pause and wait characters, but strips other characters, so
     * for example would be ",123;456" given the raw input of "456-7890,123; 456".
     * </pre>
     *
     * <code>optional string post_dial_portion = 4;</code>
     */
    public Builder setPostDialPortionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPostDialPortionBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.DialerPhoneNumber)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.DialerPhoneNumber();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "normalizedNumber_",
            "countryIso_",
            "isValid_",
            "postDialPortion_",
          };
          java.lang.String info =
              "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\b\u0000\u0002" +
              "\b\u0001\u0003\u0007\u0002\u0004\b\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.DialerPhoneNumber> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.DialerPhoneNumber.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.DialerPhoneNumber>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.DialerPhoneNumber)
  private static final com.android.dialer.DialerPhoneNumber DEFAULT_INSTANCE;
  static {
    DialerPhoneNumber defaultInstance = new DialerPhoneNumber();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      DialerPhoneNumber.class, defaultInstance);
  }

  public static com.android.dialer.DialerPhoneNumber getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DialerPhoneNumber> PARSER;

  public static com.google.protobuf.Parser<DialerPhoneNumber> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

