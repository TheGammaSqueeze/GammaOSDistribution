// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/glidephotomanager/photo_info.proto

package com.android.dialer.glidephotomanager;

/**
 * <pre>
 * Contains information associated with a number, which is used to create the
 * photo.
 * Next ID: 13
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.glidephotomanager.PhotoInfo}
 */
public  final class PhotoInfo extends
    com.google.protobuf.GeneratedMessageLite<
        PhotoInfo, PhotoInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.glidephotomanager.PhotoInfo)
    PhotoInfoOrBuilder {
  private PhotoInfo() {
    name_ = "";
    formattedNumber_ = "";
    photoUri_ = "";
    lookupUri_ = "";
  }
  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    name_ = value;
  }
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void clearName() {
    bitField0_ = (bitField0_ & ~0x00000001);
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The display name of the number.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    name_ = value.toStringUtf8();
  }

  public static final int FORMATTED_NUMBER_FIELD_NUMBER = 2;
  private java.lang.String formattedNumber_;
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  @java.lang.Override
  public boolean hasFormattedNumber() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  @java.lang.Override
  public java.lang.String getFormattedNumber() {
    return formattedNumber_;
  }
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFormattedNumberBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(formattedNumber_);
  }
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  private void setFormattedNumber(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    formattedNumber_ = value;
  }
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  private void clearFormattedNumber() {
    bitField0_ = (bitField0_ & ~0x00000002);
    formattedNumber_ = getDefaultInstance().getFormattedNumber();
  }
  /**
   * <pre>
   * The number presented to the user.
   * </pre>
   *
   * <code>optional string formatted_number = 2;</code>
   */
  private void setFormattedNumberBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    formattedNumber_ = value.toStringUtf8();
  }

  public static final int PHOTO_URI_FIELD_NUMBER = 3;
  private java.lang.String photoUri_;
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  @java.lang.Override
  public boolean hasPhotoUri() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  @java.lang.Override
  public java.lang.String getPhotoUri() {
    return photoUri_;
  }
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPhotoUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
  }
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  private void setPhotoUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    photoUri_ = value;
  }
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  private void clearPhotoUri() {
    bitField0_ = (bitField0_ & ~0x00000004);
    photoUri_ = getDefaultInstance().getPhotoUri();
  }
  /**
   * <pre>
   * The URI of the photo.
   * </pre>
   *
   * <code>optional string photo_uri = 3;</code>
   */
  private void setPhotoUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    photoUri_ = value.toStringUtf8();
  }

  public static final int PHOTO_ID_FIELD_NUMBER = 4;
  private long photoId_;
  /**
   * <pre>
   * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
   * </pre>
   *
   * <code>optional int64 photo_id = 4;</code>
   */
  @java.lang.Override
  public boolean hasPhotoId() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
   * </pre>
   *
   * <code>optional int64 photo_id = 4;</code>
   */
  @java.lang.Override
  public long getPhotoId() {
    return photoId_;
  }
  /**
   * <pre>
   * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
   * </pre>
   *
   * <code>optional int64 photo_id = 4;</code>
   */
  private void setPhotoId(long value) {
    bitField0_ |= 0x00000008;
    photoId_ = value;
  }
  /**
   * <pre>
   * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
   * </pre>
   *
   * <code>optional int64 photo_id = 4;</code>
   */
  private void clearPhotoId() {
    bitField0_ = (bitField0_ & ~0x00000008);
    photoId_ = 0L;
  }

  public static final int LOOKUP_URI_FIELD_NUMBER = 5;
  private java.lang.String lookupUri_;
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  @java.lang.Override
  public boolean hasLookupUri() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  @java.lang.Override
  public java.lang.String getLookupUri() {
    return lookupUri_;
  }
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLookupUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
  }
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  private void setLookupUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    lookupUri_ = value;
  }
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  private void clearLookupUri() {
    bitField0_ = (bitField0_ & ~0x00000010);
    lookupUri_ = getDefaultInstance().getLookupUri();
  }
  /**
   * <pre>
   * The Contacts Provider lookup URI for the contact associated with the
   * number.
   * </pre>
   *
   * <code>optional string lookup_uri = 5;</code>
   */
  private void setLookupUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    lookupUri_ = value.toStringUtf8();
  }

  public static final int IS_BUSINESS_FIELD_NUMBER = 6;
  private boolean isBusiness_;
  /**
   * <pre>
   * Whether a business icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  @java.lang.Override
  public boolean hasIsBusiness() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Whether a business icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  @java.lang.Override
  public boolean getIsBusiness() {
    return isBusiness_;
  }
  /**
   * <pre>
   * Whether a business icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  private void setIsBusiness(boolean value) {
    bitField0_ |= 0x00000020;
    isBusiness_ = value;
  }
  /**
   * <pre>
   * Whether a business icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  private void clearIsBusiness() {
    bitField0_ = (bitField0_ & ~0x00000020);
    isBusiness_ = false;
  }

  public static final int IS_VOICEMAIL_FIELD_NUMBER = 7;
  private boolean isVoicemail_;
  /**
   * <pre>
   * Whether a voicemail icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_voicemail = 7;</code>
   */
  @java.lang.Override
  public boolean hasIsVoicemail() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Whether a voicemail icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_voicemail = 7;</code>
   */
  @java.lang.Override
  public boolean getIsVoicemail() {
    return isVoicemail_;
  }
  /**
   * <pre>
   * Whether a voicemail icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_voicemail = 7;</code>
   */
  private void setIsVoicemail(boolean value) {
    bitField0_ |= 0x00000040;
    isVoicemail_ = value;
  }
  /**
   * <pre>
   * Whether a voicemail icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_voicemail = 7;</code>
   */
  private void clearIsVoicemail() {
    bitField0_ = (bitField0_ & ~0x00000040);
    isVoicemail_ = false;
  }

  public static final int IS_BLOCKED_FIELD_NUMBER = 8;
  private boolean isBlocked_;
  /**
   * <pre>
   * Whether a "blocked" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_blocked = 8;</code>
   */
  @java.lang.Override
  public boolean hasIsBlocked() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Whether a "blocked" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_blocked = 8;</code>
   */
  @java.lang.Override
  public boolean getIsBlocked() {
    return isBlocked_;
  }
  /**
   * <pre>
   * Whether a "blocked" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_blocked = 8;</code>
   */
  private void setIsBlocked(boolean value) {
    bitField0_ |= 0x00000080;
    isBlocked_ = value;
  }
  /**
   * <pre>
   * Whether a "blocked" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_blocked = 8;</code>
   */
  private void clearIsBlocked() {
    bitField0_ = (bitField0_ & ~0x00000080);
    isBlocked_ = false;
  }

  public static final int IS_SPAM_FIELD_NUMBER = 9;
  private boolean isSpam_;
  /**
   * <pre>
   * Whether a "spam" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_spam = 9;</code>
   */
  @java.lang.Override
  public boolean hasIsSpam() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Whether a "spam" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_spam = 9;</code>
   */
  @java.lang.Override
  public boolean getIsSpam() {
    return isSpam_;
  }
  /**
   * <pre>
   * Whether a "spam" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_spam = 9;</code>
   */
  private void setIsSpam(boolean value) {
    bitField0_ |= 0x00000100;
    isSpam_ = value;
  }
  /**
   * <pre>
   * Whether a "spam" icon should be displayed.
   * </pre>
   *
   * <code>optional bool is_spam = 9;</code>
   */
  private void clearIsSpam() {
    bitField0_ = (bitField0_ & ~0x00000100);
    isSpam_ = false;
  }

  public static final int IS_VIDEO_FIELD_NUMBER = 10;
  private boolean isVideo_;
  /**
   * <pre>
   * Whether the photo should be badged as video call.
   * </pre>
   *
   * <code>optional bool is_video = 10;</code>
   */
  @java.lang.Override
  public boolean hasIsVideo() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Whether the photo should be badged as video call.
   * </pre>
   *
   * <code>optional bool is_video = 10;</code>
   */
  @java.lang.Override
  public boolean getIsVideo() {
    return isVideo_;
  }
  /**
   * <pre>
   * Whether the photo should be badged as video call.
   * </pre>
   *
   * <code>optional bool is_video = 10;</code>
   */
  private void setIsVideo(boolean value) {
    bitField0_ |= 0x00000200;
    isVideo_ = value;
  }
  /**
   * <pre>
   * Whether the photo should be badged as video call.
   * </pre>
   *
   * <code>optional bool is_video = 10;</code>
   */
  private void clearIsVideo() {
    bitField0_ = (bitField0_ & ~0x00000200);
    isVideo_ = false;
  }

  public static final int IS_RTT_FIELD_NUMBER = 11;
  private boolean isRtt_;
  /**
   * <pre>
   * Whether the photo should be badged as RTT call.
   * </pre>
   *
   * <code>optional bool is_rtt = 11;</code>
   */
  @java.lang.Override
  public boolean hasIsRtt() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Whether the photo should be badged as RTT call.
   * </pre>
   *
   * <code>optional bool is_rtt = 11;</code>
   */
  @java.lang.Override
  public boolean getIsRtt() {
    return isRtt_;
  }
  /**
   * <pre>
   * Whether the photo should be badged as RTT call.
   * </pre>
   *
   * <code>optional bool is_rtt = 11;</code>
   */
  private void setIsRtt(boolean value) {
    bitField0_ |= 0x00000400;
    isRtt_ = value;
  }
  /**
   * <pre>
   * Whether the photo should be badged as RTT call.
   * </pre>
   *
   * <code>optional bool is_rtt = 11;</code>
   */
  private void clearIsRtt() {
    bitField0_ = (bitField0_ & ~0x00000400);
    isRtt_ = false;
  }

  public static final int IS_CONFERENCE_FIELD_NUMBER = 12;
  private boolean isConference_;
  /**
   * <pre>
   * Whether to show conference call icon instead of contact icon.
   * </pre>
   *
   * <code>optional bool is_conference = 12;</code>
   */
  @java.lang.Override
  public boolean hasIsConference() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * Whether to show conference call icon instead of contact icon.
   * </pre>
   *
   * <code>optional bool is_conference = 12;</code>
   */
  @java.lang.Override
  public boolean getIsConference() {
    return isConference_;
  }
  /**
   * <pre>
   * Whether to show conference call icon instead of contact icon.
   * </pre>
   *
   * <code>optional bool is_conference = 12;</code>
   */
  private void setIsConference(boolean value) {
    bitField0_ |= 0x00000800;
    isConference_ = value;
  }
  /**
   * <pre>
   * Whether to show conference call icon instead of contact icon.
   * </pre>
   *
   * <code>optional bool is_conference = 12;</code>
   */
  private void clearIsConference() {
    bitField0_ = (bitField0_ & ~0x00000800);
    isConference_ = false;
  }

  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.glidephotomanager.PhotoInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.glidephotomanager.PhotoInfo prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Contains information associated with a number, which is used to create the
   * photo.
   * Next ID: 13
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.glidephotomanager.PhotoInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.glidephotomanager.PhotoInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.glidephotomanager.PhotoInfo)
      com.android.dialer.glidephotomanager.PhotoInfoOrBuilder {
    // Construct using com.android.dialer.glidephotomanager.PhotoInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return instance.hasName();
    }
    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The display name of the number.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    @java.lang.Override
    public boolean hasFormattedNumber() {
      return instance.hasFormattedNumber();
    }
    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getFormattedNumber() {
      return instance.getFormattedNumber();
    }
    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormattedNumberBytes() {
      return instance.getFormattedNumberBytes();
    }
    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public Builder setFormattedNumber(
        java.lang.String value) {
      copyOnWrite();
      instance.setFormattedNumber(value);
      return this;
    }
    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public Builder clearFormattedNumber() {
      copyOnWrite();
      instance.clearFormattedNumber();
      return this;
    }
    /**
     * <pre>
     * The number presented to the user.
     * </pre>
     *
     * <code>optional string formatted_number = 2;</code>
     */
    public Builder setFormattedNumberBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFormattedNumberBytes(value);
      return this;
    }

    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public boolean hasPhotoUri() {
      return instance.hasPhotoUri();
    }
    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getPhotoUri() {
      return instance.getPhotoUri();
    }
    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhotoUriBytes() {
      return instance.getPhotoUriBytes();
    }
    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public Builder setPhotoUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setPhotoUri(value);
      return this;
    }
    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public Builder clearPhotoUri() {
      copyOnWrite();
      instance.clearPhotoUri();
      return this;
    }
    /**
     * <pre>
     * The URI of the photo.
     * </pre>
     *
     * <code>optional string photo_uri = 3;</code>
     */
    public Builder setPhotoUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPhotoUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    @java.lang.Override
    public boolean hasPhotoId() {
      return instance.hasPhotoId();
    }
    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    @java.lang.Override
    public long getPhotoId() {
      return instance.getPhotoId();
    }
    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    public Builder setPhotoId(long value) {
      copyOnWrite();
      instance.setPhotoId(value);
      return this;
    }
    /**
     * <pre>
     * Value of android.provider.ContactsContract.CommonDataKinds.Photo#_ID
     * </pre>
     *
     * <code>optional int64 photo_id = 4;</code>
     */
    public Builder clearPhotoId() {
      copyOnWrite();
      instance.clearPhotoId();
      return this;
    }

    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    @java.lang.Override
    public boolean hasLookupUri() {
      return instance.hasLookupUri();
    }
    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    @java.lang.Override
    public java.lang.String getLookupUri() {
      return instance.getLookupUri();
    }
    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLookupUriBytes() {
      return instance.getLookupUriBytes();
    }
    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public Builder setLookupUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setLookupUri(value);
      return this;
    }
    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public Builder clearLookupUri() {
      copyOnWrite();
      instance.clearLookupUri();
      return this;
    }
    /**
     * <pre>
     * The Contacts Provider lookup URI for the contact associated with the
     * number.
     * </pre>
     *
     * <code>optional string lookup_uri = 5;</code>
     */
    public Builder setLookupUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLookupUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    @java.lang.Override
    public boolean hasIsBusiness() {
      return instance.hasIsBusiness();
    }
    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    @java.lang.Override
    public boolean getIsBusiness() {
      return instance.getIsBusiness();
    }
    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public Builder setIsBusiness(boolean value) {
      copyOnWrite();
      instance.setIsBusiness(value);
      return this;
    }
    /**
     * <pre>
     * Whether a business icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public Builder clearIsBusiness() {
      copyOnWrite();
      instance.clearIsBusiness();
      return this;
    }

    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    @java.lang.Override
    public boolean hasIsVoicemail() {
      return instance.hasIsVoicemail();
    }
    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    @java.lang.Override
    public boolean getIsVoicemail() {
      return instance.getIsVoicemail();
    }
    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    public Builder setIsVoicemail(boolean value) {
      copyOnWrite();
      instance.setIsVoicemail(value);
      return this;
    }
    /**
     * <pre>
     * Whether a voicemail icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_voicemail = 7;</code>
     */
    public Builder clearIsVoicemail() {
      copyOnWrite();
      instance.clearIsVoicemail();
      return this;
    }

    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    @java.lang.Override
    public boolean hasIsBlocked() {
      return instance.hasIsBlocked();
    }
    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    @java.lang.Override
    public boolean getIsBlocked() {
      return instance.getIsBlocked();
    }
    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    public Builder setIsBlocked(boolean value) {
      copyOnWrite();
      instance.setIsBlocked(value);
      return this;
    }
    /**
     * <pre>
     * Whether a "blocked" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_blocked = 8;</code>
     */
    public Builder clearIsBlocked() {
      copyOnWrite();
      instance.clearIsBlocked();
      return this;
    }

    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    @java.lang.Override
    public boolean hasIsSpam() {
      return instance.hasIsSpam();
    }
    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    @java.lang.Override
    public boolean getIsSpam() {
      return instance.getIsSpam();
    }
    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    public Builder setIsSpam(boolean value) {
      copyOnWrite();
      instance.setIsSpam(value);
      return this;
    }
    /**
     * <pre>
     * Whether a "spam" icon should be displayed.
     * </pre>
     *
     * <code>optional bool is_spam = 9;</code>
     */
    public Builder clearIsSpam() {
      copyOnWrite();
      instance.clearIsSpam();
      return this;
    }

    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    @java.lang.Override
    public boolean hasIsVideo() {
      return instance.hasIsVideo();
    }
    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    @java.lang.Override
    public boolean getIsVideo() {
      return instance.getIsVideo();
    }
    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    public Builder setIsVideo(boolean value) {
      copyOnWrite();
      instance.setIsVideo(value);
      return this;
    }
    /**
     * <pre>
     * Whether the photo should be badged as video call.
     * </pre>
     *
     * <code>optional bool is_video = 10;</code>
     */
    public Builder clearIsVideo() {
      copyOnWrite();
      instance.clearIsVideo();
      return this;
    }

    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    @java.lang.Override
    public boolean hasIsRtt() {
      return instance.hasIsRtt();
    }
    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    @java.lang.Override
    public boolean getIsRtt() {
      return instance.getIsRtt();
    }
    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    public Builder setIsRtt(boolean value) {
      copyOnWrite();
      instance.setIsRtt(value);
      return this;
    }
    /**
     * <pre>
     * Whether the photo should be badged as RTT call.
     * </pre>
     *
     * <code>optional bool is_rtt = 11;</code>
     */
    public Builder clearIsRtt() {
      copyOnWrite();
      instance.clearIsRtt();
      return this;
    }

    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    @java.lang.Override
    public boolean hasIsConference() {
      return instance.hasIsConference();
    }
    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    @java.lang.Override
    public boolean getIsConference() {
      return instance.getIsConference();
    }
    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    public Builder setIsConference(boolean value) {
      copyOnWrite();
      instance.setIsConference(value);
      return this;
    }
    /**
     * <pre>
     * Whether to show conference call icon instead of contact icon.
     * </pre>
     *
     * <code>optional bool is_conference = 12;</code>
     */
    public Builder clearIsConference() {
      copyOnWrite();
      instance.clearIsConference();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.glidephotomanager.PhotoInfo)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.glidephotomanager.PhotoInfo();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "name_",
            "formattedNumber_",
            "photoUri_",
            "photoId_",
            "lookupUri_",
            "isBusiness_",
            "isVoicemail_",
            "isBlocked_",
            "isSpam_",
            "isVideo_",
            "isRtt_",
            "isConference_",
          };
          java.lang.String info =
              "\u0001\f\u0000\u0001\u0001\f\f\u0000\u0000\u0000\u0001\b\u0000\u0002\b\u0001\u0003" +
              "\b\u0002\u0004\u0002\u0003\u0005\b\u0004\u0006\u0007\u0005\u0007\u0007\u0006\b\u0007" +
              "\u0007\t\u0007\b\n\u0007\t\u000b\u0007\n\f\u0007\u000b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.glidephotomanager.PhotoInfo> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.glidephotomanager.PhotoInfo.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.glidephotomanager.PhotoInfo>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.glidephotomanager.PhotoInfo)
  private static final com.android.dialer.glidephotomanager.PhotoInfo DEFAULT_INSTANCE;
  static {
    PhotoInfo defaultInstance = new PhotoInfo();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PhotoInfo.class, defaultInstance);
  }

  public static com.android.dialer.glidephotomanager.PhotoInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PhotoInfo> PARSER;

  public static com.google.protobuf.Parser<PhotoInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

