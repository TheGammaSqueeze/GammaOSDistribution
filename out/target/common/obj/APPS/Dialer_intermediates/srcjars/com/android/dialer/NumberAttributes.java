// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/calllog/database/contract/number_attributes.proto

package com.android.dialer;

/**
 * <pre>
 * Information related to the phone number of the call.
 * Next ID: 15
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.NumberAttributes}
 */
public  final class NumberAttributes extends
    com.google.protobuf.GeneratedMessageLite<
        NumberAttributes, NumberAttributes.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.NumberAttributes)
    NumberAttributesOrBuilder {
  private NumberAttributes() {
    name_ = "";
    photoUri_ = "";
    lookupUri_ = "";
    numberTypeLabel_ = "";
    geolocation_ = "";
  }
  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public boolean hasName() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    name_ = value;
  }
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void clearName() {
    bitField0_ = (bitField0_ & ~0x00000001);
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The name (which may be a person's name or business name, but not a number)
   * formatted exactly as it should appear to the user. If the user's locale or
   * name display preferences change, this field should be rewritten.
   * </pre>
   *
   * <code>optional string name = 1;</code>
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    name_ = value.toStringUtf8();
  }

  public static final int PHOTO_URI_FIELD_NUMBER = 2;
  private java.lang.String photoUri_;
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  @java.lang.Override
  public boolean hasPhotoUri() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  @java.lang.Override
  public java.lang.String getPhotoUri() {
    return photoUri_;
  }
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPhotoUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
  }
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  private void setPhotoUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    photoUri_ = value;
  }
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  private void clearPhotoUri() {
    bitField0_ = (bitField0_ & ~0x00000002);
    photoUri_ = getDefaultInstance().getPhotoUri();
  }
  /**
   * <pre>
   * A photo URI for the contact to display in the call log list view.
   * </pre>
   *
   * <code>optional string photo_uri = 2;</code>
   */
  private void setPhotoUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    photoUri_ = value.toStringUtf8();
  }

  public static final int PHOTO_ID_FIELD_NUMBER = 3;
  private long photoId_;
  /**
   * <pre>
   * A photo ID (from the contacts provider) for the contact to display in the
   * call log list view.
   * </pre>
   *
   * <code>optional int64 photo_id = 3;</code>
   */
  @java.lang.Override
  public boolean hasPhotoId() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * A photo ID (from the contacts provider) for the contact to display in the
   * call log list view.
   * </pre>
   *
   * <code>optional int64 photo_id = 3;</code>
   */
  @java.lang.Override
  public long getPhotoId() {
    return photoId_;
  }
  /**
   * <pre>
   * A photo ID (from the contacts provider) for the contact to display in the
   * call log list view.
   * </pre>
   *
   * <code>optional int64 photo_id = 3;</code>
   */
  private void setPhotoId(long value) {
    bitField0_ |= 0x00000004;
    photoId_ = value;
  }
  /**
   * <pre>
   * A photo ID (from the contacts provider) for the contact to display in the
   * call log list view.
   * </pre>
   *
   * <code>optional int64 photo_id = 3;</code>
   */
  private void clearPhotoId() {
    bitField0_ = (bitField0_ & ~0x00000004);
    photoId_ = 0L;
  }

  public static final int LOOKUP_URI_FIELD_NUMBER = 4;
  private java.lang.String lookupUri_;
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  @java.lang.Override
  public boolean hasLookupUri() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  @java.lang.Override
  public java.lang.String getLookupUri() {
    return lookupUri_;
  }
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLookupUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
  }
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  private void setLookupUri(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    lookupUri_ = value;
  }
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  private void clearLookupUri() {
    bitField0_ = (bitField0_ & ~0x00000008);
    lookupUri_ = getDefaultInstance().getLookupUri();
  }
  /**
   * <pre>
   * The contacts provider lookup URI for the contact associated with the call.
   * </pre>
   *
   * <code>optional string lookup_uri = 4;</code>
   */
  private void setLookupUriBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    lookupUri_ = value.toStringUtf8();
  }

  public static final int NUMBER_TYPE_LABEL_FIELD_NUMBER = 5;
  private java.lang.String numberTypeLabel_;
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  @java.lang.Override
  public boolean hasNumberTypeLabel() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  @java.lang.Override
  public java.lang.String getNumberTypeLabel() {
    return numberTypeLabel_;
  }
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNumberTypeLabelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(numberTypeLabel_);
  }
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  private void setNumberTypeLabel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    numberTypeLabel_ = value;
  }
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  private void clearNumberTypeLabel() {
    bitField0_ = (bitField0_ & ~0x00000010);
    numberTypeLabel_ = getDefaultInstance().getNumberTypeLabel();
  }
  /**
   * <pre>
   * The number type as a string to be displayed to the user, for example "Home"
   * or "Mobile". This column should be updated for the appropriate language
   * when the locale changes.
   * </pre>
   *
   * <code>optional string number_type_label = 5;</code>
   */
  private void setNumberTypeLabelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    numberTypeLabel_ = value.toStringUtf8();
  }

  public static final int IS_BUSINESS_FIELD_NUMBER = 6;
  private boolean isBusiness_;
  /**
   * <pre>
   * The number is a call to a business from nearby places lookup.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  @java.lang.Override
  public boolean hasIsBusiness() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The number is a call to a business from nearby places lookup.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  @java.lang.Override
  public boolean getIsBusiness() {
    return isBusiness_;
  }
  /**
   * <pre>
   * The number is a call to a business from nearby places lookup.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  private void setIsBusiness(boolean value) {
    bitField0_ |= 0x00000020;
    isBusiness_ = value;
  }
  /**
   * <pre>
   * The number is a call to a business from nearby places lookup.
   * </pre>
   *
   * <code>optional bool is_business = 6;</code>
   */
  private void clearIsBusiness() {
    bitField0_ = (bitField0_ & ~0x00000020);
    isBusiness_ = false;
  }

  public static final int CAN_REPORT_AS_INVALID_NUMBER_FIELD_NUMBER = 7;
  private boolean canReportAsInvalidNumber_;
  /**
   * <pre>
   * Can the number be reported as invalid through People API
   * </pre>
   *
   * <code>optional bool can_report_as_invalid_number = 7;</code>
   */
  @java.lang.Override
  public boolean hasCanReportAsInvalidNumber() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Can the number be reported as invalid through People API
   * </pre>
   *
   * <code>optional bool can_report_as_invalid_number = 7;</code>
   */
  @java.lang.Override
  public boolean getCanReportAsInvalidNumber() {
    return canReportAsInvalidNumber_;
  }
  /**
   * <pre>
   * Can the number be reported as invalid through People API
   * </pre>
   *
   * <code>optional bool can_report_as_invalid_number = 7;</code>
   */
  private void setCanReportAsInvalidNumber(boolean value) {
    bitField0_ |= 0x00000040;
    canReportAsInvalidNumber_ = value;
  }
  /**
   * <pre>
   * Can the number be reported as invalid through People API
   * </pre>
   *
   * <code>optional bool can_report_as_invalid_number = 7;</code>
   */
  private void clearCanReportAsInvalidNumber() {
    bitField0_ = (bitField0_ & ~0x00000040);
    canReportAsInvalidNumber_ = false;
  }

  public static final int IS_CP2_INFO_INCOMPLETE_FIELD_NUMBER = 8;
  private boolean isCp2InfoIncomplete_;
  /**
   * <pre>
   * True if the CP2 information is incomplete and needs to be queried at
   * display time.
   * </pre>
   *
   * <code>optional bool is_cp2_info_incomplete = 8;</code>
   */
  @java.lang.Override
  public boolean hasIsCp2InfoIncomplete() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * True if the CP2 information is incomplete and needs to be queried at
   * display time.
   * </pre>
   *
   * <code>optional bool is_cp2_info_incomplete = 8;</code>
   */
  @java.lang.Override
  public boolean getIsCp2InfoIncomplete() {
    return isCp2InfoIncomplete_;
  }
  /**
   * <pre>
   * True if the CP2 information is incomplete and needs to be queried at
   * display time.
   * </pre>
   *
   * <code>optional bool is_cp2_info_incomplete = 8;</code>
   */
  private void setIsCp2InfoIncomplete(boolean value) {
    bitField0_ |= 0x00000080;
    isCp2InfoIncomplete_ = value;
  }
  /**
   * <pre>
   * True if the CP2 information is incomplete and needs to be queried at
   * display time.
   * </pre>
   *
   * <code>optional bool is_cp2_info_incomplete = 8;</code>
   */
  private void clearIsCp2InfoIncomplete() {
    bitField0_ = (bitField0_ & ~0x00000080);
    isCp2InfoIncomplete_ = false;
  }

  public static final int IS_BLOCKED_FIELD_NUMBER = 9;
  private boolean isBlocked_;
  /**
   * <pre>
   * Whether the number is blocked.
   * </pre>
   *
   * <code>optional bool is_blocked = 9;</code>
   */
  @java.lang.Override
  public boolean hasIsBlocked() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Whether the number is blocked.
   * </pre>
   *
   * <code>optional bool is_blocked = 9;</code>
   */
  @java.lang.Override
  public boolean getIsBlocked() {
    return isBlocked_;
  }
  /**
   * <pre>
   * Whether the number is blocked.
   * </pre>
   *
   * <code>optional bool is_blocked = 9;</code>
   */
  private void setIsBlocked(boolean value) {
    bitField0_ |= 0x00000100;
    isBlocked_ = value;
  }
  /**
   * <pre>
   * Whether the number is blocked.
   * </pre>
   *
   * <code>optional bool is_blocked = 9;</code>
   */
  private void clearIsBlocked() {
    bitField0_ = (bitField0_ & ~0x00000100);
    isBlocked_ = false;
  }

  public static final int IS_SPAM_FIELD_NUMBER = 10;
  private boolean isSpam_;
  /**
   * <pre>
   * Whether the number is spam.
   * </pre>
   *
   * <code>optional bool is_spam = 10;</code>
   */
  @java.lang.Override
  public boolean hasIsSpam() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Whether the number is spam.
   * </pre>
   *
   * <code>optional bool is_spam = 10;</code>
   */
  @java.lang.Override
  public boolean getIsSpam() {
    return isSpam_;
  }
  /**
   * <pre>
   * Whether the number is spam.
   * </pre>
   *
   * <code>optional bool is_spam = 10;</code>
   */
  private void setIsSpam(boolean value) {
    bitField0_ |= 0x00000200;
    isSpam_ = value;
  }
  /**
   * <pre>
   * Whether the number is spam.
   * </pre>
   *
   * <code>optional bool is_spam = 10;</code>
   */
  private void clearIsSpam() {
    bitField0_ = (bitField0_ & ~0x00000200);
    isSpam_ = false;
  }

  public static final int CONTACT_SOURCE_FIELD_NUMBER = 11;
  private int contactSource_;
  /**
   * <pre>
   * Source of the contact associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
   */
  @java.lang.Override
  public boolean hasContactSource() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Source of the contact associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
   */
  @java.lang.Override
  public com.android.dialer.logging.ContactSource.Type getContactSource() {
    com.android.dialer.logging.ContactSource.Type result = com.android.dialer.logging.ContactSource.Type.forNumber(contactSource_);
    return result == null ? com.android.dialer.logging.ContactSource.Type.UNKNOWN_SOURCE_TYPE : result;
  }
  /**
   * <pre>
   * Source of the contact associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
   */
  private void setContactSource(com.android.dialer.logging.ContactSource.Type value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000400;
    contactSource_ = value.getNumber();
  }
  /**
   * <pre>
   * Source of the contact associated with the number.
   * </pre>
   *
   * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
   */
  private void clearContactSource() {
    bitField0_ = (bitField0_ & ~0x00000400);
    contactSource_ = 0;
  }

  public static final int CAN_SUPPORT_CARRIER_VIDEO_CALL_FIELD_NUMBER = 12;
  private boolean canSupportCarrierVideoCall_;
  /**
   * <pre>
   * Whether the number can be reached via a carrier video call.
   * </pre>
   *
   * <code>optional bool can_support_carrier_video_call = 12;</code>
   */
  @java.lang.Override
  public boolean hasCanSupportCarrierVideoCall() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * Whether the number can be reached via a carrier video call.
   * </pre>
   *
   * <code>optional bool can_support_carrier_video_call = 12;</code>
   */
  @java.lang.Override
  public boolean getCanSupportCarrierVideoCall() {
    return canSupportCarrierVideoCall_;
  }
  /**
   * <pre>
   * Whether the number can be reached via a carrier video call.
   * </pre>
   *
   * <code>optional bool can_support_carrier_video_call = 12;</code>
   */
  private void setCanSupportCarrierVideoCall(boolean value) {
    bitField0_ |= 0x00000800;
    canSupportCarrierVideoCall_ = value;
  }
  /**
   * <pre>
   * Whether the number can be reached via a carrier video call.
   * </pre>
   *
   * <code>optional bool can_support_carrier_video_call = 12;</code>
   */
  private void clearCanSupportCarrierVideoCall() {
    bitField0_ = (bitField0_ & ~0x00000800);
    canSupportCarrierVideoCall_ = false;
  }

  public static final int GEOLOCATION_FIELD_NUMBER = 13;
  private java.lang.String geolocation_;
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  @java.lang.Override
  public boolean hasGeolocation() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  @java.lang.Override
  public java.lang.String getGeolocation() {
    return geolocation_;
  }
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGeolocationBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(geolocation_);
  }
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  private void setGeolocation(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
    geolocation_ = value;
  }
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  private void clearGeolocation() {
    bitField0_ = (bitField0_ & ~0x00001000);
    geolocation_ = getDefaultInstance().getGeolocation();
  }
  /**
   * <pre>
   * Description of the number's geolocation (e.g., "Mountain View, CA").
   * This string is for display purpose only.
   * </pre>
   *
   * <code>optional string geolocation = 13;</code>
   */
  private void setGeolocationBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
    geolocation_ = value.toStringUtf8();
  }

  public static final int IS_EMERGENCY_NUMBER_FIELD_NUMBER = 14;
  private boolean isEmergencyNumber_;
  /**
   * <pre>
   * Whether the number is an emergency number.
   * </pre>
   *
   * <code>optional bool is_emergency_number = 14;</code>
   */
  @java.lang.Override
  public boolean hasIsEmergencyNumber() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * Whether the number is an emergency number.
   * </pre>
   *
   * <code>optional bool is_emergency_number = 14;</code>
   */
  @java.lang.Override
  public boolean getIsEmergencyNumber() {
    return isEmergencyNumber_;
  }
  /**
   * <pre>
   * Whether the number is an emergency number.
   * </pre>
   *
   * <code>optional bool is_emergency_number = 14;</code>
   */
  private void setIsEmergencyNumber(boolean value) {
    bitField0_ |= 0x00002000;
    isEmergencyNumber_ = value;
  }
  /**
   * <pre>
   * Whether the number is an emergency number.
   * </pre>
   *
   * <code>optional bool is_emergency_number = 14;</code>
   */
  private void clearIsEmergencyNumber() {
    bitField0_ = (bitField0_ & ~0x00002000);
    isEmergencyNumber_ = false;
  }

  public static com.android.dialer.NumberAttributes parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.NumberAttributes parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.NumberAttributes parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.NumberAttributes parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.NumberAttributes parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.NumberAttributes parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.NumberAttributes prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Information related to the phone number of the call.
   * Next ID: 15
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.NumberAttributes}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.NumberAttributes, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.NumberAttributes)
      com.android.dialer.NumberAttributesOrBuilder {
    // Construct using com.android.dialer.NumberAttributes.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return instance.hasName();
    }
    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The name (which may be a person's name or business name, but not a number)
     * formatted exactly as it should appear to the user. If the user's locale or
     * name display preferences change, this field should be rewritten.
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    @java.lang.Override
    public boolean hasPhotoUri() {
      return instance.hasPhotoUri();
    }
    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getPhotoUri() {
      return instance.getPhotoUri();
    }
    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhotoUriBytes() {
      return instance.getPhotoUriBytes();
    }
    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public Builder setPhotoUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setPhotoUri(value);
      return this;
    }
    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public Builder clearPhotoUri() {
      copyOnWrite();
      instance.clearPhotoUri();
      return this;
    }
    /**
     * <pre>
     * A photo URI for the contact to display in the call log list view.
     * </pre>
     *
     * <code>optional string photo_uri = 2;</code>
     */
    public Builder setPhotoUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPhotoUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    @java.lang.Override
    public boolean hasPhotoId() {
      return instance.hasPhotoId();
    }
    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    @java.lang.Override
    public long getPhotoId() {
      return instance.getPhotoId();
    }
    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    public Builder setPhotoId(long value) {
      copyOnWrite();
      instance.setPhotoId(value);
      return this;
    }
    /**
     * <pre>
     * A photo ID (from the contacts provider) for the contact to display in the
     * call log list view.
     * </pre>
     *
     * <code>optional int64 photo_id = 3;</code>
     */
    public Builder clearPhotoId() {
      copyOnWrite();
      instance.clearPhotoId();
      return this;
    }

    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    @java.lang.Override
    public boolean hasLookupUri() {
      return instance.hasLookupUri();
    }
    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getLookupUri() {
      return instance.getLookupUri();
    }
    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLookupUriBytes() {
      return instance.getLookupUriBytes();
    }
    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public Builder setLookupUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setLookupUri(value);
      return this;
    }
    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public Builder clearLookupUri() {
      copyOnWrite();
      instance.clearLookupUri();
      return this;
    }
    /**
     * <pre>
     * The contacts provider lookup URI for the contact associated with the call.
     * </pre>
     *
     * <code>optional string lookup_uri = 4;</code>
     */
    public Builder setLookupUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLookupUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    @java.lang.Override
    public boolean hasNumberTypeLabel() {
      return instance.hasNumberTypeLabel();
    }
    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    @java.lang.Override
    public java.lang.String getNumberTypeLabel() {
      return instance.getNumberTypeLabel();
    }
    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNumberTypeLabelBytes() {
      return instance.getNumberTypeLabelBytes();
    }
    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public Builder setNumberTypeLabel(
        java.lang.String value) {
      copyOnWrite();
      instance.setNumberTypeLabel(value);
      return this;
    }
    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public Builder clearNumberTypeLabel() {
      copyOnWrite();
      instance.clearNumberTypeLabel();
      return this;
    }
    /**
     * <pre>
     * The number type as a string to be displayed to the user, for example "Home"
     * or "Mobile". This column should be updated for the appropriate language
     * when the locale changes.
     * </pre>
     *
     * <code>optional string number_type_label = 5;</code>
     */
    public Builder setNumberTypeLabelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNumberTypeLabelBytes(value);
      return this;
    }

    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    @java.lang.Override
    public boolean hasIsBusiness() {
      return instance.hasIsBusiness();
    }
    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    @java.lang.Override
    public boolean getIsBusiness() {
      return instance.getIsBusiness();
    }
    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public Builder setIsBusiness(boolean value) {
      copyOnWrite();
      instance.setIsBusiness(value);
      return this;
    }
    /**
     * <pre>
     * The number is a call to a business from nearby places lookup.
     * </pre>
     *
     * <code>optional bool is_business = 6;</code>
     */
    public Builder clearIsBusiness() {
      copyOnWrite();
      instance.clearIsBusiness();
      return this;
    }

    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    @java.lang.Override
    public boolean hasCanReportAsInvalidNumber() {
      return instance.hasCanReportAsInvalidNumber();
    }
    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    @java.lang.Override
    public boolean getCanReportAsInvalidNumber() {
      return instance.getCanReportAsInvalidNumber();
    }
    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    public Builder setCanReportAsInvalidNumber(boolean value) {
      copyOnWrite();
      instance.setCanReportAsInvalidNumber(value);
      return this;
    }
    /**
     * <pre>
     * Can the number be reported as invalid through People API
     * </pre>
     *
     * <code>optional bool can_report_as_invalid_number = 7;</code>
     */
    public Builder clearCanReportAsInvalidNumber() {
      copyOnWrite();
      instance.clearCanReportAsInvalidNumber();
      return this;
    }

    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    @java.lang.Override
    public boolean hasIsCp2InfoIncomplete() {
      return instance.hasIsCp2InfoIncomplete();
    }
    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    @java.lang.Override
    public boolean getIsCp2InfoIncomplete() {
      return instance.getIsCp2InfoIncomplete();
    }
    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    public Builder setIsCp2InfoIncomplete(boolean value) {
      copyOnWrite();
      instance.setIsCp2InfoIncomplete(value);
      return this;
    }
    /**
     * <pre>
     * True if the CP2 information is incomplete and needs to be queried at
     * display time.
     * </pre>
     *
     * <code>optional bool is_cp2_info_incomplete = 8;</code>
     */
    public Builder clearIsCp2InfoIncomplete() {
      copyOnWrite();
      instance.clearIsCp2InfoIncomplete();
      return this;
    }

    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    @java.lang.Override
    public boolean hasIsBlocked() {
      return instance.hasIsBlocked();
    }
    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    @java.lang.Override
    public boolean getIsBlocked() {
      return instance.getIsBlocked();
    }
    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    public Builder setIsBlocked(boolean value) {
      copyOnWrite();
      instance.setIsBlocked(value);
      return this;
    }
    /**
     * <pre>
     * Whether the number is blocked.
     * </pre>
     *
     * <code>optional bool is_blocked = 9;</code>
     */
    public Builder clearIsBlocked() {
      copyOnWrite();
      instance.clearIsBlocked();
      return this;
    }

    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    @java.lang.Override
    public boolean hasIsSpam() {
      return instance.hasIsSpam();
    }
    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    @java.lang.Override
    public boolean getIsSpam() {
      return instance.getIsSpam();
    }
    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    public Builder setIsSpam(boolean value) {
      copyOnWrite();
      instance.setIsSpam(value);
      return this;
    }
    /**
     * <pre>
     * Whether the number is spam.
     * </pre>
     *
     * <code>optional bool is_spam = 10;</code>
     */
    public Builder clearIsSpam() {
      copyOnWrite();
      instance.clearIsSpam();
      return this;
    }

    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    @java.lang.Override
    public boolean hasContactSource() {
      return instance.hasContactSource();
    }
    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    @java.lang.Override
    public com.android.dialer.logging.ContactSource.Type getContactSource() {
      return instance.getContactSource();
    }
    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    public Builder setContactSource(com.android.dialer.logging.ContactSource.Type value) {
      copyOnWrite();
      instance.setContactSource(value);
      return this;
    }
    /**
     * <pre>
     * Source of the contact associated with the number.
     * </pre>
     *
     * <code>optional .com.android.dialer.logging.ContactSource.Type contact_source = 11;</code>
     */
    public Builder clearContactSource() {
      copyOnWrite();
      instance.clearContactSource();
      return this;
    }

    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    @java.lang.Override
    public boolean hasCanSupportCarrierVideoCall() {
      return instance.hasCanSupportCarrierVideoCall();
    }
    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    @java.lang.Override
    public boolean getCanSupportCarrierVideoCall() {
      return instance.getCanSupportCarrierVideoCall();
    }
    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    public Builder setCanSupportCarrierVideoCall(boolean value) {
      copyOnWrite();
      instance.setCanSupportCarrierVideoCall(value);
      return this;
    }
    /**
     * <pre>
     * Whether the number can be reached via a carrier video call.
     * </pre>
     *
     * <code>optional bool can_support_carrier_video_call = 12;</code>
     */
    public Builder clearCanSupportCarrierVideoCall() {
      copyOnWrite();
      instance.clearCanSupportCarrierVideoCall();
      return this;
    }

    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    @java.lang.Override
    public boolean hasGeolocation() {
      return instance.hasGeolocation();
    }
    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    @java.lang.Override
    public java.lang.String getGeolocation() {
      return instance.getGeolocation();
    }
    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGeolocationBytes() {
      return instance.getGeolocationBytes();
    }
    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public Builder setGeolocation(
        java.lang.String value) {
      copyOnWrite();
      instance.setGeolocation(value);
      return this;
    }
    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public Builder clearGeolocation() {
      copyOnWrite();
      instance.clearGeolocation();
      return this;
    }
    /**
     * <pre>
     * Description of the number's geolocation (e.g., "Mountain View, CA").
     * This string is for display purpose only.
     * </pre>
     *
     * <code>optional string geolocation = 13;</code>
     */
    public Builder setGeolocationBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setGeolocationBytes(value);
      return this;
    }

    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    @java.lang.Override
    public boolean hasIsEmergencyNumber() {
      return instance.hasIsEmergencyNumber();
    }
    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    @java.lang.Override
    public boolean getIsEmergencyNumber() {
      return instance.getIsEmergencyNumber();
    }
    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    public Builder setIsEmergencyNumber(boolean value) {
      copyOnWrite();
      instance.setIsEmergencyNumber(value);
      return this;
    }
    /**
     * <pre>
     * Whether the number is an emergency number.
     * </pre>
     *
     * <code>optional bool is_emergency_number = 14;</code>
     */
    public Builder clearIsEmergencyNumber() {
      copyOnWrite();
      instance.clearIsEmergencyNumber();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.NumberAttributes)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.NumberAttributes();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "name_",
            "photoUri_",
            "photoId_",
            "lookupUri_",
            "numberTypeLabel_",
            "isBusiness_",
            "canReportAsInvalidNumber_",
            "isCp2InfoIncomplete_",
            "isBlocked_",
            "isSpam_",
            "contactSource_",
            com.android.dialer.logging.ContactSource.Type.internalGetVerifier(),
            "canSupportCarrierVideoCall_",
            "geolocation_",
            "isEmergencyNumber_",
          };
          java.lang.String info =
              "\u0001\u000e\u0000\u0001\u0001\u000e\u000e\u0000\u0000\u0000\u0001\b\u0000\u0002" +
              "\b\u0001\u0003\u0002\u0002\u0004\b\u0003\u0005\b\u0004\u0006\u0007\u0005\u0007\u0007" +
              "\u0006\b\u0007\u0007\t\u0007\b\n\u0007\t\u000b\f\n\f\u0007\u000b\r\b\f\u000e\u0007" +
              "\r";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.NumberAttributes> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.NumberAttributes.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.NumberAttributes>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.NumberAttributes)
  private static final com.android.dialer.NumberAttributes DEFAULT_INSTANCE;
  static {
    NumberAttributes defaultInstance = new NumberAttributes();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      NumberAttributes.class, defaultInstance);
  }

  public static com.android.dialer.NumberAttributes getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<NumberAttributes> PARSER;

  public static com.google.protobuf.Parser<NumberAttributes> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

