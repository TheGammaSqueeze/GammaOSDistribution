// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/logging/contact_source.proto

package com.android.dialer.logging;

/**
 * Protobuf type {@code com.android.dialer.logging.ContactSource}
 */
public  final class ContactSource extends
    com.google.protobuf.GeneratedMessageLite<
        ContactSource, ContactSource.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.logging.ContactSource)
    ContactSourceOrBuilder {
  private ContactSource() {
  }
  /**
   * <pre>
   * Applies only to reports made from call history. If we have contact
   * information for the phone number, this field indicates its source.
   * Note that it represents the contact's status on the user's device at the
   * time they made the spam report, which could be different from the
   * number's status at the time they made or received the call.
   * Type definitions are from the CachedContactInfo interface in
   * CachedNumberLookupService.java
   * </pre>
   *
   * Protobuf enum {@code com.android.dialer.logging.ContactSource.Type}
   */
  public enum Type
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN_SOURCE_TYPE = 0;</code>
     */
    UNKNOWN_SOURCE_TYPE(0),
    /**
     * <pre>
     * Personal contact
     * </pre>
     *
     * <code>SOURCE_TYPE_DIRECTORY = 1;</code>
     */
    SOURCE_TYPE_DIRECTORY(1),
    /**
     * <pre>
     * Contact from a custom extended directory
     * </pre>
     *
     * <code>SOURCE_TYPE_EXTENDED = 2;</code>
     */
    SOURCE_TYPE_EXTENDED(2),
    /**
     * <pre>
     * Business number found via the People API
     * </pre>
     *
     * <code>SOURCE_TYPE_PLACES = 3;</code>
     */
    SOURCE_TYPE_PLACES(3),
    /**
     * <pre>
     * Non-business number found via the People API
     * </pre>
     *
     * <code>SOURCE_TYPE_PROFILE = 4;</code>
     */
    SOURCE_TYPE_PROFILE(4),
    /**
     * <pre>
     * Number has Caller Name Presentation (CNAP) information. Calls in this
     * category would have had ContactLookupResultType NOT_FOUND originally.
     * </pre>
     *
     * <code>SOURCE_TYPE_CNAP = 5;</code>
     */
    SOURCE_TYPE_CNAP(5),
    /**
     * <code>SOURCE_TYPE_CEQUINT_CALLER_ID = 6;</code>
     */
    SOURCE_TYPE_CEQUINT_CALLER_ID(6),
    /**
     * <pre>
     * A remote source not listed below
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_OTHER = 7;</code>
     */
    SOURCE_TYPE_REMOTE_OTHER(7),
    /**
     * <pre>
     * Manually-entered caller ID data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_MANUAL = 8;</code>
     */
    SOURCE_TYPE_REMOTE_MANUAL(8),
    /**
     * <pre>
     * Google Voice short code data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_GOOGLE_VOICE = 9;</code>
     */
    SOURCE_TYPE_REMOTE_GOOGLE_VOICE(9),
    /**
     * <pre>
     * Customer Service Applications data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_CSA = 10;</code>
     */
    SOURCE_TYPE_REMOTE_CSA(10),
    /**
     * <pre>
     * Knowledge Graph data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_KNOWLEDGE_GRAPH = 11;</code>
     */
    SOURCE_TYPE_REMOTE_KNOWLEDGE_GRAPH(11),
    ;

    /**
     * <code>UNKNOWN_SOURCE_TYPE = 0;</code>
     */
    public static final int UNKNOWN_SOURCE_TYPE_VALUE = 0;
    /**
     * <pre>
     * Personal contact
     * </pre>
     *
     * <code>SOURCE_TYPE_DIRECTORY = 1;</code>
     */
    public static final int SOURCE_TYPE_DIRECTORY_VALUE = 1;
    /**
     * <pre>
     * Contact from a custom extended directory
     * </pre>
     *
     * <code>SOURCE_TYPE_EXTENDED = 2;</code>
     */
    public static final int SOURCE_TYPE_EXTENDED_VALUE = 2;
    /**
     * <pre>
     * Business number found via the People API
     * </pre>
     *
     * <code>SOURCE_TYPE_PLACES = 3;</code>
     */
    public static final int SOURCE_TYPE_PLACES_VALUE = 3;
    /**
     * <pre>
     * Non-business number found via the People API
     * </pre>
     *
     * <code>SOURCE_TYPE_PROFILE = 4;</code>
     */
    public static final int SOURCE_TYPE_PROFILE_VALUE = 4;
    /**
     * <pre>
     * Number has Caller Name Presentation (CNAP) information. Calls in this
     * category would have had ContactLookupResultType NOT_FOUND originally.
     * </pre>
     *
     * <code>SOURCE_TYPE_CNAP = 5;</code>
     */
    public static final int SOURCE_TYPE_CNAP_VALUE = 5;
    /**
     * <code>SOURCE_TYPE_CEQUINT_CALLER_ID = 6;</code>
     */
    public static final int SOURCE_TYPE_CEQUINT_CALLER_ID_VALUE = 6;
    /**
     * <pre>
     * A remote source not listed below
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_OTHER = 7;</code>
     */
    public static final int SOURCE_TYPE_REMOTE_OTHER_VALUE = 7;
    /**
     * <pre>
     * Manually-entered caller ID data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_MANUAL = 8;</code>
     */
    public static final int SOURCE_TYPE_REMOTE_MANUAL_VALUE = 8;
    /**
     * <pre>
     * Google Voice short code data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_GOOGLE_VOICE = 9;</code>
     */
    public static final int SOURCE_TYPE_REMOTE_GOOGLE_VOICE_VALUE = 9;
    /**
     * <pre>
     * Customer Service Applications data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_CSA = 10;</code>
     */
    public static final int SOURCE_TYPE_REMOTE_CSA_VALUE = 10;
    /**
     * <pre>
     * Knowledge Graph data
     * </pre>
     *
     * <code>SOURCE_TYPE_REMOTE_KNOWLEDGE_GRAPH = 11;</code>
     */
    public static final int SOURCE_TYPE_REMOTE_KNOWLEDGE_GRAPH_VALUE = 11;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Type valueOf(int value) {
      return forNumber(value);
    }

    public static Type forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_SOURCE_TYPE;
        case 1: return SOURCE_TYPE_DIRECTORY;
        case 2: return SOURCE_TYPE_EXTENDED;
        case 3: return SOURCE_TYPE_PLACES;
        case 4: return SOURCE_TYPE_PROFILE;
        case 5: return SOURCE_TYPE_CNAP;
        case 6: return SOURCE_TYPE_CEQUINT_CALLER_ID;
        case 7: return SOURCE_TYPE_REMOTE_OTHER;
        case 8: return SOURCE_TYPE_REMOTE_MANUAL;
        case 9: return SOURCE_TYPE_REMOTE_GOOGLE_VOICE;
        case 10: return SOURCE_TYPE_REMOTE_CSA;
        case 11: return SOURCE_TYPE_REMOTE_KNOWLEDGE_GRAPH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            @java.lang.Override
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return TypeVerifier.INSTANCE;
    }

    private static final class TypeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Type.forNumber(number) != null;
            }
          };

    private final int value;

    private Type(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.android.dialer.logging.ContactSource.Type)
  }

  public static com.android.dialer.logging.ContactSource parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.logging.ContactSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.logging.ContactSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.logging.ContactSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.logging.ContactSource prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code com.android.dialer.logging.ContactSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.logging.ContactSource, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.logging.ContactSource)
      com.android.dialer.logging.ContactSourceOrBuilder {
    // Construct using com.android.dialer.logging.ContactSource.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    // @@protoc_insertion_point(builder_scope:com.android.dialer.logging.ContactSource)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.logging.ContactSource();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = null;java.lang.String info =
              "\u0001\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.logging.ContactSource> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.logging.ContactSource.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.logging.ContactSource>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.logging.ContactSource)
  private static final com.android.dialer.logging.ContactSource DEFAULT_INSTANCE;
  static {
    ContactSource defaultInstance = new ContactSource();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ContactSource.class, defaultInstance);
  }

  public static com.android.dialer.logging.ContactSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ContactSource> PARSER;

  public static com.google.protobuf.Parser<ContactSource> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

