// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/apps/Dialer/java/com/android/dialer/phonelookup/phone_lookup_info.proto

package com.android.dialer.phonelookup;

/**
 * <pre>
 * Contains information about a phone number, possibly from many sources.
 * This message is organized into sub-message fields where each one corresponds
 * to an implementation of PhoneLookup. For example, field
 * "cp2_info_in_default_directory" corresponds to class
 * Cp2DefaultDirectoryPhoneLookup, and class Cp2DefaultDirectoryPhoneLookup
 * alone is responsible for populating it.
 * Next ID: 11
 * </pre>
 *
 * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo}
 */
public  final class PhoneLookupInfo extends
    com.google.protobuf.GeneratedMessageLite<
        PhoneLookupInfo, PhoneLookupInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo)
    PhoneLookupInfoOrBuilder {
  private PhoneLookupInfo() {
  }
  /**
   * <pre>
   * Whether a number is blocked or not. Used by both the system block list and
   * dialer fallback
   * </pre>
   *
   * Protobuf enum {@code com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState}
   */
  public enum BlockedState
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>BLOCKED = 1;</code>
     */
    BLOCKED(1),
    /**
     * <code>NOT_BLOCKED = 2;</code>
     */
    NOT_BLOCKED(2),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>BLOCKED = 1;</code>
     */
    public static final int BLOCKED_VALUE = 1;
    /**
     * <code>NOT_BLOCKED = 2;</code>
     */
    public static final int NOT_BLOCKED_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BlockedState valueOf(int value) {
      return forNumber(value);
    }

    public static BlockedState forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return BLOCKED;
        case 2: return NOT_BLOCKED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BlockedState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BlockedState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BlockedState>() {
            @java.lang.Override
            public BlockedState findValueByNumber(int number) {
              return BlockedState.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return BlockedStateVerifier.INSTANCE;
    }

    private static final class BlockedStateVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new BlockedStateVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return BlockedState.forNumber(number) != null;
            }
          };

    private final int value;

    private BlockedState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState)
  }

  public interface Cp2InfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    java.util.List<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> 
        getCp2ContactInfoList();
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo getCp2ContactInfo(int index);
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    int getCp2ContactInfoCount();

    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    boolean hasIsIncomplete();
    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    boolean getIsIncomplete();
  }
  /**
   * <pre>
   * Information about a PhoneNumber retrieved from CP2.
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info}
   */
  public  static final class Cp2Info extends
      com.google.protobuf.GeneratedMessageLite<
          Cp2Info, Cp2Info.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info)
      Cp2InfoOrBuilder {
    private Cp2Info() {
      cp2ContactInfo_ = emptyProtobufList();
    }
    public interface Cp2ContactInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      boolean hasName();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      boolean hasPhotoThumbnailUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      java.lang.String getPhotoThumbnailUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      com.google.protobuf.ByteString
          getPhotoThumbnailUriBytes();

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      boolean hasPhotoUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      java.lang.String getPhotoUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      com.google.protobuf.ByteString
          getPhotoUriBytes();

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      boolean hasPhotoId();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      long getPhotoId();

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      boolean hasLabel();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      java.lang.String getLabel();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      com.google.protobuf.ByteString
          getLabelBytes();

      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      boolean hasContactId();
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      long getContactId();

      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      boolean hasLookupUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      java.lang.String getLookupUri();
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      com.google.protobuf.ByteString
          getLookupUriBytes();

      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      boolean hasCanSupportCarrierVideoCall();
      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      boolean getCanSupportCarrierVideoCall();
    }
    /**
     * <pre>
     * Information about a single contact.
     * Next ID: 9
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo}
     */
    public  static final class Cp2ContactInfo extends
        com.google.protobuf.GeneratedMessageLite<
            Cp2ContactInfo, Cp2ContactInfo.Builder> implements
        // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo)
        Cp2ContactInfoOrBuilder {
      private Cp2ContactInfo() {
        name_ = "";
        photoThumbnailUri_ = "";
        photoUri_ = "";
        label_ = "";
        lookupUri_ = "";
      }
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.String name_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getName() {
        return name_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(name_);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      private void setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      private void clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      private void setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value.toStringUtf8();
      }

      public static final int PHOTO_THUMBNAIL_URI_FIELD_NUMBER = 2;
      private java.lang.String photoThumbnailUri_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      @java.lang.Override
      public boolean hasPhotoThumbnailUri() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getPhotoThumbnailUri() {
        return photoThumbnailUri_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPhotoThumbnailUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(photoThumbnailUri_);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      private void setPhotoThumbnailUri(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        photoThumbnailUri_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      private void clearPhotoThumbnailUri() {
        bitField0_ = (bitField0_ & ~0x00000002);
        photoThumbnailUri_ = getDefaultInstance().getPhotoThumbnailUri();
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
       * </pre>
       *
       * <code>optional string photo_thumbnail_uri = 2;</code>
       */
      private void setPhotoThumbnailUriBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        photoThumbnailUri_ = value.toStringUtf8();
      }

      public static final int PHOTO_URI_FIELD_NUMBER = 3;
      private java.lang.String photoUri_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public boolean hasPhotoUri() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getPhotoUri() {
        return photoUri_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPhotoUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      private void setPhotoUri(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        photoUri_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      private void clearPhotoUri() {
        bitField0_ = (bitField0_ & ~0x00000004);
        photoUri_ = getDefaultInstance().getPhotoUri();
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
       * </pre>
       *
       * <code>optional string photo_uri = 3;</code>
       */
      private void setPhotoUriBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        photoUri_ = value.toStringUtf8();
      }

      public static final int PHOTO_ID_FIELD_NUMBER = 4;
      private long photoId_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      @java.lang.Override
      public boolean hasPhotoId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      @java.lang.Override
      public long getPhotoId() {
        return photoId_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      private void setPhotoId(long value) {
        bitField0_ |= 0x00000008;
        photoId_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
       * </pre>
       *
       * <code>optional fixed64 photo_id = 4;</code>
       */
      private void clearPhotoId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        photoId_ = 0L;
      }

      public static final int LABEL_FIELD_NUMBER = 5;
      private java.lang.String label_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      @java.lang.Override
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      @java.lang.Override
      public java.lang.String getLabel() {
        return label_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLabelBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(label_);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      private void setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        label_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      private void clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        label_ = getDefaultInstance().getLabel();
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.LABEL
       * The value can be "Home", "Mobile", ect.
       * </pre>
       *
       * <code>optional string label = 5;</code>
       */
      private void setLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        label_ = value.toStringUtf8();
      }

      public static final int CONTACT_ID_FIELD_NUMBER = 6;
      private long contactId_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      @java.lang.Override
      public boolean hasContactId() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      @java.lang.Override
      public long getContactId() {
        return contactId_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      private void setContactId(long value) {
        bitField0_ |= 0x00000020;
        contactId_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
       * For a contact in other directories:
       *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
       * </pre>
       *
       * <code>optional fixed64 contact_id = 6;</code>
       */
      private void clearContactId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        contactId_ = 0L;
      }

      public static final int LOOKUP_URI_FIELD_NUMBER = 7;
      private java.lang.String lookupUri_;
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public boolean hasLookupUri() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public java.lang.String getLookupUri() {
        return lookupUri_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLookupUriBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      private void setLookupUri(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        lookupUri_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      private void clearLookupUri() {
        bitField0_ = (bitField0_ & ~0x00000040);
        lookupUri_ = getDefaultInstance().getLookupUri();
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *   constructed based on
       *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
       * For a contact in other directories:
       *   constructed based on
       *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      private void setLookupUriBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        lookupUri_ = value.toStringUtf8();
      }

      public static final int CAN_SUPPORT_CARRIER_VIDEO_CALL_FIELD_NUMBER = 8;
      private boolean canSupportCarrierVideoCall_;
      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      @java.lang.Override
      public boolean hasCanSupportCarrierVideoCall() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      @java.lang.Override
      public boolean getCanSupportCarrierVideoCall() {
        return canSupportCarrierVideoCall_;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      private void setCanSupportCarrierVideoCall(boolean value) {
        bitField0_ |= 0x00000080;
        canSupportCarrierVideoCall_ = value;
      }
      /**
       * <pre>
       * For a contact in the default directory:
       *    value set based on
       *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
       * For a contact in other directories: always false.
       *    This is because we lookup contacts in other directories via
       *    android.provider.ContactsContract.PhoneLookup, to which carrier
       *    presence info is not directly accessible.
       * </pre>
       *
       * <code>optional bool can_support_carrier_video_call = 8;</code>
       */
      private void clearCanSupportCarrierVideoCall() {
        bitField0_ = (bitField0_ & ~0x00000080);
        canSupportCarrierVideoCall_ = false;
      }

      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Information about a single contact.
       * Next ID: 9
       * </pre>
       *
       * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo, Builder> implements
          // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo)
          com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfoOrBuilder {
        // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        @java.lang.Override
        public boolean hasName() {
          return instance.hasName();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        @java.lang.Override
        public java.lang.String getName() {
          return instance.getName();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getNameBytes() {
          return instance.getNameBytes();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          copyOnWrite();
          instance.setName(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder clearName() {
          copyOnWrite();
          instance.clearName();
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME_PRIMARY
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.DISPLAY_NAME_PRIMARY
         * </pre>
         *
         * <code>optional string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setNameBytes(value);
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        @java.lang.Override
        public boolean hasPhotoThumbnailUri() {
          return instance.hasPhotoThumbnailUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        @java.lang.Override
        public java.lang.String getPhotoThumbnailUri() {
          return instance.getPhotoThumbnailUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getPhotoThumbnailUriBytes() {
          return instance.getPhotoThumbnailUriBytes();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        public Builder setPhotoThumbnailUri(
            java.lang.String value) {
          copyOnWrite();
          instance.setPhotoThumbnailUri(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        public Builder clearPhotoThumbnailUri() {
          copyOnWrite();
          instance.clearPhotoThumbnailUri();
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_THUMBNAIL_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_THUMBNAIL_URI
         * </pre>
         *
         * <code>optional string photo_thumbnail_uri = 2;</code>
         */
        public Builder setPhotoThumbnailUriBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setPhotoThumbnailUriBytes(value);
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        @java.lang.Override
        public boolean hasPhotoUri() {
          return instance.hasPhotoUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        @java.lang.Override
        public java.lang.String getPhotoUri() {
          return instance.getPhotoUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getPhotoUriBytes() {
          return instance.getPhotoUriBytes();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder setPhotoUri(
            java.lang.String value) {
          copyOnWrite();
          instance.setPhotoUri(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder clearPhotoUri() {
          copyOnWrite();
          instance.clearPhotoUri();
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_URI
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_URI
         * </pre>
         *
         * <code>optional string photo_uri = 3;</code>
         */
        public Builder setPhotoUriBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setPhotoUriBytes(value);
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
         * </pre>
         *
         * <code>optional fixed64 photo_id = 4;</code>
         */
        @java.lang.Override
        public boolean hasPhotoId() {
          return instance.hasPhotoId();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
         * </pre>
         *
         * <code>optional fixed64 photo_id = 4;</code>
         */
        @java.lang.Override
        public long getPhotoId() {
          return instance.getPhotoId();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
         * </pre>
         *
         * <code>optional fixed64 photo_id = 4;</code>
         */
        public Builder setPhotoId(long value) {
          copyOnWrite();
          instance.setPhotoId(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.PHOTO_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.PHOTO_ID
         * </pre>
         *
         * <code>optional fixed64 photo_id = 4;</code>
         */
        public Builder clearPhotoId() {
          copyOnWrite();
          instance.clearPhotoId();
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        @java.lang.Override
        public boolean hasLabel() {
          return instance.hasLabel();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        @java.lang.Override
        public java.lang.String getLabel() {
          return instance.getLabel();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getLabelBytes() {
          return instance.getLabelBytes();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        public Builder setLabel(
            java.lang.String value) {
          copyOnWrite();
          instance.setLabel(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        public Builder clearLabel() {
          copyOnWrite();
          instance.clearLabel();
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LABEL
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.LABEL
         * The value can be "Home", "Mobile", ect.
         * </pre>
         *
         * <code>optional string label = 5;</code>
         */
        public Builder setLabelBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setLabelBytes(value);
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
         * </pre>
         *
         * <code>optional fixed64 contact_id = 6;</code>
         */
        @java.lang.Override
        public boolean hasContactId() {
          return instance.hasContactId();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
         * </pre>
         *
         * <code>optional fixed64 contact_id = 6;</code>
         */
        @java.lang.Override
        public long getContactId() {
          return instance.getContactId();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
         * </pre>
         *
         * <code>optional fixed64 contact_id = 6;</code>
         */
        public Builder setContactId(long value) {
          copyOnWrite();
          instance.setContactId(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   android.provider.ContactsContract.CommonDataKinds.Phone.CONTACT_ID
         * For a contact in other directories:
         *   android.provider.ContactsContract.PhoneLookup.CONTACT_ID
         * </pre>
         *
         * <code>optional fixed64 contact_id = 6;</code>
         */
        public Builder clearContactId() {
          copyOnWrite();
          instance.clearContactId();
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        @java.lang.Override
        public boolean hasLookupUri() {
          return instance.hasLookupUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        @java.lang.Override
        public java.lang.String getLookupUri() {
          return instance.getLookupUri();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getLookupUriBytes() {
          return instance.getLookupUriBytes();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        public Builder setLookupUri(
            java.lang.String value) {
          copyOnWrite();
          instance.setLookupUri(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        public Builder clearLookupUri() {
          copyOnWrite();
          instance.clearLookupUri();
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *   constructed based on
         *   android.provider.ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY
         * For a contact in other directories:
         *   constructed based on
         *   android.provider.ContactsContract.PhoneLookup.LOOKUP_KEY
         * </pre>
         *
         * <code>optional string lookup_uri = 7;</code>
         */
        public Builder setLookupUriBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setLookupUriBytes(value);
          return this;
        }

        /**
         * <pre>
         * For a contact in the default directory:
         *    value set based on
         *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
         * For a contact in other directories: always false.
         *    This is because we lookup contacts in other directories via
         *    android.provider.ContactsContract.PhoneLookup, to which carrier
         *    presence info is not directly accessible.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 8;</code>
         */
        @java.lang.Override
        public boolean hasCanSupportCarrierVideoCall() {
          return instance.hasCanSupportCarrierVideoCall();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *    value set based on
         *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
         * For a contact in other directories: always false.
         *    This is because we lookup contacts in other directories via
         *    android.provider.ContactsContract.PhoneLookup, to which carrier
         *    presence info is not directly accessible.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 8;</code>
         */
        @java.lang.Override
        public boolean getCanSupportCarrierVideoCall() {
          return instance.getCanSupportCarrierVideoCall();
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *    value set based on
         *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
         * For a contact in other directories: always false.
         *    This is because we lookup contacts in other directories via
         *    android.provider.ContactsContract.PhoneLookup, to which carrier
         *    presence info is not directly accessible.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 8;</code>
         */
        public Builder setCanSupportCarrierVideoCall(boolean value) {
          copyOnWrite();
          instance.setCanSupportCarrierVideoCall(value);
          return this;
        }
        /**
         * <pre>
         * For a contact in the default directory:
         *    value set based on
         *    android.provider.ContactsContract.CommonDataKinds.Phone.CARRIER_PRESENCE
         * For a contact in other directories: always false.
         *    This is because we lookup contacts in other directories via
         *    android.provider.ContactsContract.PhoneLookup, to which carrier
         *    presence info is not directly accessible.
         * </pre>
         *
         * <code>optional bool can_support_carrier_video_call = 8;</code>
         */
        public Builder clearCanSupportCarrierVideoCall() {
          copyOnWrite();
          instance.clearCanSupportCarrierVideoCall();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "name_",
                "photoThumbnailUri_",
                "photoUri_",
                "photoId_",
                "label_",
                "contactId_",
                "lookupUri_",
                "canSupportCarrierVideoCall_",
              };
              java.lang.String info =
                  "\u0001\b\u0000\u0001\u0001\b\b\u0000\u0000\u0000\u0001\b\u0000\u0002\b\u0001\u0003" +
                  "\b\u0002\u0004\u0005\u0003\u0005\b\u0004\u0006\u0005\u0005\u0007\b\u0006\b\u0007" +
                  "\u0007";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> parser = PARSER;
            if (parser == null) {
              synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo)
      private static final com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo DEFAULT_INSTANCE;
      static {
        Cp2ContactInfo defaultInstance = new Cp2ContactInfo();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Cp2ContactInfo.class, defaultInstance);
      }

      public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Cp2ContactInfo> PARSER;

      public static com.google.protobuf.Parser<Cp2ContactInfo> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int CP2_CONTACT_INFO_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> cp2ContactInfo_;
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    @java.lang.Override
    public java.util.List<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> getCp2ContactInfoList() {
      return cp2ContactInfo_;
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    public java.util.List<? extends com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfoOrBuilder> 
        getCp2ContactInfoOrBuilderList() {
      return cp2ContactInfo_;
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    @java.lang.Override
    public int getCp2ContactInfoCount() {
      return cp2ContactInfo_.size();
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo getCp2ContactInfo(int index) {
      return cp2ContactInfo_.get(index);
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfoOrBuilder getCp2ContactInfoOrBuilder(
        int index) {
      return cp2ContactInfo_.get(index);
    }
    private void ensureCp2ContactInfoIsMutable() {
      if (!cp2ContactInfo_.isModifiable()) {
        cp2ContactInfo_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(cp2ContactInfo_);
       }
    }

    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void setCp2ContactInfo(
        int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.set(index, value);
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void setCp2ContactInfo(
        int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void addCp2ContactInfo(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.add(value);
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void addCp2ContactInfo(
        int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.add(index, value);
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void addCp2ContactInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.add(builderForValue.build());
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void addCp2ContactInfo(
        int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void addAllCp2ContactInfo(
        java.lang.Iterable<? extends com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> values) {
      ensureCp2ContactInfoIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, cp2ContactInfo_);
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void clearCp2ContactInfo() {
      cp2ContactInfo_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Repeated because one phone number can be associated with multiple CP2
     * contacts.
     * Empty if there is no CP2 contact information for the number.
     * </pre>
     *
     * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
     */
    private void removeCp2ContactInfo(int index) {
      ensureCp2ContactInfoIsMutable();
      cp2ContactInfo_.remove(index);
    }

    public static final int IS_INCOMPLETE_FIELD_NUMBER = 2;
    private boolean isIncomplete_;
    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    @java.lang.Override
    public boolean hasIsIncomplete() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    @java.lang.Override
    public boolean getIsIncomplete() {
      return isIncomplete_;
    }
    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    private void setIsIncomplete(boolean value) {
      bitField0_ |= 0x00000001;
      isIncomplete_ = value;
    }
    /**
     * <pre>
     * The information for this number is incomplete. This can happen when the
     * call log is requested to be updated but there are many invalid numbers
     * and the update cannot be performed efficiently. In this case, the call
     * log needs to query for the CP2 information at render time.
     * </pre>
     *
     * <code>optional bool is_incomplete = 2;</code>
     */
    private void clearIsIncomplete() {
      bitField0_ = (bitField0_ & ~0x00000001);
      isIncomplete_ = false;
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Information about a PhoneNumber retrieved from CP2.
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info)
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2InfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      @java.lang.Override
      public java.util.List<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> getCp2ContactInfoList() {
        return java.util.Collections.unmodifiableList(
            instance.getCp2ContactInfoList());
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      @java.lang.Override
      public int getCp2ContactInfoCount() {
        return instance.getCp2ContactInfoCount();
      }/**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      @java.lang.Override
      public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo getCp2ContactInfo(int index) {
        return instance.getCp2ContactInfo(index);
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder setCp2ContactInfo(
          int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
        copyOnWrite();
        instance.setCp2ContactInfo(index, value);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder setCp2ContactInfo(
          int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setCp2ContactInfo(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder addCp2ContactInfo(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
        copyOnWrite();
        instance.addCp2ContactInfo(value);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder addCp2ContactInfo(
          int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo value) {
        copyOnWrite();
        instance.addCp2ContactInfo(index, value);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder addCp2ContactInfo(
          com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addCp2ContactInfo(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder addCp2ContactInfo(
          int index, com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addCp2ContactInfo(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder addAllCp2ContactInfo(
          java.lang.Iterable<? extends com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo> values) {
        copyOnWrite();
        instance.addAllCp2ContactInfo(values);
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder clearCp2ContactInfo() {
        copyOnWrite();
        instance.clearCp2ContactInfo();
        return this;
      }
      /**
       * <pre>
       * Repeated because one phone number can be associated with multiple CP2
       * contacts.
       * Empty if there is no CP2 contact information for the number.
       * </pre>
       *
       * <code>repeated .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo cp2_contact_info = 1;</code>
       */
      public Builder removeCp2ContactInfo(int index) {
        copyOnWrite();
        instance.removeCp2ContactInfo(index);
        return this;
      }

      /**
       * <pre>
       * The information for this number is incomplete. This can happen when the
       * call log is requested to be updated but there are many invalid numbers
       * and the update cannot be performed efficiently. In this case, the call
       * log needs to query for the CP2 information at render time.
       * </pre>
       *
       * <code>optional bool is_incomplete = 2;</code>
       */
      @java.lang.Override
      public boolean hasIsIncomplete() {
        return instance.hasIsIncomplete();
      }
      /**
       * <pre>
       * The information for this number is incomplete. This can happen when the
       * call log is requested to be updated but there are many invalid numbers
       * and the update cannot be performed efficiently. In this case, the call
       * log needs to query for the CP2 information at render time.
       * </pre>
       *
       * <code>optional bool is_incomplete = 2;</code>
       */
      @java.lang.Override
      public boolean getIsIncomplete() {
        return instance.getIsIncomplete();
      }
      /**
       * <pre>
       * The information for this number is incomplete. This can happen when the
       * call log is requested to be updated but there are many invalid numbers
       * and the update cannot be performed efficiently. In this case, the call
       * log needs to query for the CP2 information at render time.
       * </pre>
       *
       * <code>optional bool is_incomplete = 2;</code>
       */
      public Builder setIsIncomplete(boolean value) {
        copyOnWrite();
        instance.setIsIncomplete(value);
        return this;
      }
      /**
       * <pre>
       * The information for this number is incomplete. This can happen when the
       * call log is requested to be updated but there are many invalid numbers
       * and the update cannot be performed efficiently. In this case, the call
       * log needs to query for the CP2 information at render time.
       * </pre>
       *
       * <code>optional bool is_incomplete = 2;</code>
       */
      public Builder clearIsIncomplete() {
        copyOnWrite();
        instance.clearIsIncomplete();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "cp2ContactInfo_",
              com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Cp2ContactInfo.class,
              "isIncomplete_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001b\u0002\u0007" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info DEFAULT_INSTANCE;
    static {
      Cp2Info defaultInstance = new Cp2Info();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Cp2Info.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Cp2Info> PARSER;

    public static com.google.protobuf.Parser<Cp2Info> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SpamInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool is_spam = 1;</code>
     */
    boolean hasIsSpam();
    /**
     * <code>optional bool is_spam = 1;</code>
     */
    boolean getIsSpam();
  }
  /**
   * <pre>
   * Message for spam info.
   * SpamPhoneLookup is responsible for populating this message.
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo}
   */
  public  static final class SpamInfo extends
      com.google.protobuf.GeneratedMessageLite<
          SpamInfo, SpamInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo)
      SpamInfoOrBuilder {
    private SpamInfo() {
    }
    private int bitField0_;
    public static final int IS_SPAM_FIELD_NUMBER = 1;
    private boolean isSpam_;
    /**
     * <code>optional bool is_spam = 1;</code>
     */
    @java.lang.Override
    public boolean hasIsSpam() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool is_spam = 1;</code>
     */
    @java.lang.Override
    public boolean getIsSpam() {
      return isSpam_;
    }
    /**
     * <code>optional bool is_spam = 1;</code>
     */
    private void setIsSpam(boolean value) {
      bitField0_ |= 0x00000001;
      isSpam_ = value;
    }
    /**
     * <code>optional bool is_spam = 1;</code>
     */
    private void clearIsSpam() {
      bitField0_ = (bitField0_ & ~0x00000001);
      isSpam_ = false;
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for spam info.
     * SpamPhoneLookup is responsible for populating this message.
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool is_spam = 1;</code>
       */
      @java.lang.Override
      public boolean hasIsSpam() {
        return instance.hasIsSpam();
      }
      /**
       * <code>optional bool is_spam = 1;</code>
       */
      @java.lang.Override
      public boolean getIsSpam() {
        return instance.getIsSpam();
      }
      /**
       * <code>optional bool is_spam = 1;</code>
       */
      public Builder setIsSpam(boolean value) {
        copyOnWrite();
        instance.setIsSpam(value);
        return this;
      }
      /**
       * <code>optional bool is_spam = 1;</code>
       */
      public Builder clearIsSpam() {
        copyOnWrite();
        instance.clearIsSpam();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "isSpam_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0007\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo DEFAULT_INSTANCE;
    static {
      SpamInfo defaultInstance = new SpamInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SpamInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SpamInfo> PARSER;

    public static com.google.protobuf.Parser<SpamInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PeopleApiInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    boolean hasDisplayName();
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    java.lang.String getDisplayName();
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getDisplayNameBytes();

    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    boolean hasNumberType();
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    java.lang.String getNumberType();
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    com.google.protobuf.ByteString
        getNumberTypeBytes();

    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    boolean hasFormattedNumberType();
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    java.lang.String getFormattedNumberType();
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    com.google.protobuf.ByteString
        getFormattedNumberTypeBytes();

    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    boolean hasImageUrl();
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    java.lang.String getImageUrl();
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    com.google.protobuf.ByteString
        getImageUrlBytes();

    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    boolean hasPersonId();
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    java.lang.String getPersonId();
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    com.google.protobuf.ByteString
        getPersonIdBytes();

    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    boolean hasInfoType();
    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType getInfoType();

    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    boolean hasLookupUri();
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    java.lang.String getLookupUri();
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    com.google.protobuf.ByteString
        getLookupUriBytes();
  }
  /**
   * <pre>
   * Message for PeopleApi, including G+ contacts and nearby places
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo}
   */
  public  static final class PeopleApiInfo extends
      com.google.protobuf.GeneratedMessageLite<
          PeopleApiInfo, PeopleApiInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo)
      PeopleApiInfoOrBuilder {
    private PeopleApiInfo() {
      displayName_ = "";
      numberType_ = "";
      formattedNumberType_ = "";
      imageUrl_ = "";
      personId_ = "";
      lookupUri_ = "";
    }
    /**
     * Protobuf enum {@code com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType}
     */
    public enum InfoType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <pre>
       * the result is a saved contact in people API
       * </pre>
       *
       * <code>CONTACT = 1;</code>
       */
      CONTACT(1),
      /**
       * <pre>
       * the result is found through nearby places
       * </pre>
       *
       * <code>NEARBY_BUSINESS = 2;</code>
       */
      NEARBY_BUSINESS(2),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <pre>
       * the result is a saved contact in people API
       * </pre>
       *
       * <code>CONTACT = 1;</code>
       */
      public static final int CONTACT_VALUE = 1;
      /**
       * <pre>
       * the result is found through nearby places
       * </pre>
       *
       * <code>NEARBY_BUSINESS = 2;</code>
       */
      public static final int NEARBY_BUSINESS_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InfoType valueOf(int value) {
        return forNumber(value);
      }

      public static InfoType forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return CONTACT;
          case 2: return NEARBY_BUSINESS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InfoType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          InfoType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InfoType>() {
              @java.lang.Override
              public InfoType findValueByNumber(int number) {
                return InfoType.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return InfoTypeVerifier.INSTANCE;
      }

      private static final class InfoTypeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new InfoTypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return InfoType.forNumber(number) != null;
              }
            };

      private final int value;

      private InfoType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType)
    }

    private int bitField0_;
    public static final int DISPLAY_NAME_FIELD_NUMBER = 1;
    private java.lang.String displayName_;
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    @java.lang.Override
    public boolean hasDisplayName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      return displayName_;
    }
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
    }
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    private void setDisplayName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      displayName_ = value;
    }
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    private void clearDisplayName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      displayName_ = getDefaultInstance().getDisplayName();
    }
    /**
     * <pre>
     * Best display name determined by people API if available, first display
     * name otherwise.
     * </pre>
     *
     * <code>optional string display_name = 1;</code>
     */
    private void setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      displayName_ = value.toStringUtf8();
    }

    public static final int NUMBER_TYPE_FIELD_NUMBER = 2;
    private java.lang.String numberType_;
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    @java.lang.Override
    public boolean hasNumberType() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getNumberType() {
      return numberType_;
    }
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNumberTypeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(numberType_);
    }
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    private void setNumberType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      numberType_ = value;
    }
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    private void clearNumberType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      numberType_ = getDefaultInstance().getNumberType();
    }
    /**
     * <pre>
     * The type of the number, for example "phone" or "home".
     * </pre>
     *
     * <code>optional string number_type = 2;</code>
     */
    private void setNumberTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      numberType_ = value.toStringUtf8();
    }

    public static final int FORMATTED_NUMBER_TYPE_FIELD_NUMBER = 3;
    private java.lang.String formattedNumberType_;
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    @java.lang.Override
    public boolean hasFormattedNumberType() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getFormattedNumberType() {
      return formattedNumberType_;
    }
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormattedNumberTypeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(formattedNumberType_);
    }
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    private void setFormattedNumberType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      formattedNumberType_ = value;
    }
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    private void clearFormattedNumberType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      formattedNumberType_ = getDefaultInstance().getFormattedNumberType();
    }
    /**
     * <pre>
     * The number_type label in human readable string, for example "Phone".
     * The UI should display known number_type with string resources if possible
     * but if number_type is unrecognized formatted_number_type. For example
     * if the user set an custom type label.
     * </pre>
     *
     * <code>optional string formatted_number_type = 3;</code>
     */
    private void setFormattedNumberTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      formattedNumberType_ = value.toStringUtf8();
    }

    public static final int IMAGE_URL_FIELD_NUMBER = 4;
    private java.lang.String imageUrl_;
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    @java.lang.Override
    public boolean hasImageUrl() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getImageUrl() {
      return imageUrl_;
    }
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getImageUrlBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(imageUrl_);
    }
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    private void setImageUrl(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      imageUrl_ = value;
    }
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    private void clearImageUrl() {
      bitField0_ = (bitField0_ & ~0x00000008);
      imageUrl_ = getDefaultInstance().getImageUrl();
    }
    /**
     * <pre>
     * URL to the contact's full size photo.
     * </pre>
     *
     * <code>optional string image_url = 4;</code>
     */
    private void setImageUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      imageUrl_ = value.toStringUtf8();
    }

    public static final int PERSON_ID_FIELD_NUMBER = 5;
    private java.lang.String personId_;
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    @java.lang.Override
    public boolean hasPersonId() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    @java.lang.Override
    public java.lang.String getPersonId() {
      return personId_;
    }
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPersonIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(personId_);
    }
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    private void setPersonId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      personId_ = value;
    }
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    private void clearPersonId() {
      bitField0_ = (bitField0_ & ~0x00000010);
      personId_ = getDefaultInstance().getPersonId();
    }
    /**
     * <pre>
     * The primary key of the contact in people API.
     * </pre>
     *
     * <code>optional string person_id = 5;</code>
     */
    private void setPersonIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      personId_ = value.toStringUtf8();
    }

    public static final int INFO_TYPE_FIELD_NUMBER = 6;
    private int infoType_;
    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    @java.lang.Override
    public boolean hasInfoType() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType getInfoType() {
      com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType result = com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType.forNumber(infoType_);
      return result == null ? com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType.UNKNOWN : result;
    }
    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    private void setInfoType(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      infoType_ = value.getNumber();
    }
    /**
     * <pre>
     * The type of the lookup result, for example, a saved contact or a nearby
     * business.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
     */
    private void clearInfoType() {
      bitField0_ = (bitField0_ & ~0x00000020);
      infoType_ = 0;
    }

    public static final int LOOKUP_URI_FIELD_NUMBER = 7;
    private java.lang.String lookupUri_;
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    @java.lang.Override
    public boolean hasLookupUri() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    @java.lang.Override
    public java.lang.String getLookupUri() {
      return lookupUri_;
    }
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLookupUriBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(lookupUri_);
    }
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    private void setLookupUri(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
      lookupUri_ = value;
    }
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    private void clearLookupUri() {
      bitField0_ = (bitField0_ & ~0x00000040);
      lookupUri_ = getDefaultInstance().getLookupUri();
    }
    /**
     * <pre>
     * A URI that contains encoded JSON about the number so contacts can
     * populate the quick contact activity with name and numbers. This does not
     * point to any real contact entry anywhere.
     * </pre>
     *
     * <code>optional string lookup_uri = 7;</code>
     */
    private void setLookupUriBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
      lookupUri_ = value.toStringUtf8();
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for PeopleApi, including G+ contacts and nearby places
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      @java.lang.Override
      public boolean hasDisplayName() {
        return instance.hasDisplayName();
      }
      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getDisplayName() {
        return instance.getDisplayName();
      }
      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDisplayNameBytes() {
        return instance.getDisplayNameBytes();
      }
      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      public Builder setDisplayName(
          java.lang.String value) {
        copyOnWrite();
        instance.setDisplayName(value);
        return this;
      }
      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      public Builder clearDisplayName() {
        copyOnWrite();
        instance.clearDisplayName();
        return this;
      }
      /**
       * <pre>
       * Best display name determined by people API if available, first display
       * name otherwise.
       * </pre>
       *
       * <code>optional string display_name = 1;</code>
       */
      public Builder setDisplayNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDisplayNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      @java.lang.Override
      public boolean hasNumberType() {
        return instance.hasNumberType();
      }
      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getNumberType() {
        return instance.getNumberType();
      }
      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNumberTypeBytes() {
        return instance.getNumberTypeBytes();
      }
      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      public Builder setNumberType(
          java.lang.String value) {
        copyOnWrite();
        instance.setNumberType(value);
        return this;
      }
      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      public Builder clearNumberType() {
        copyOnWrite();
        instance.clearNumberType();
        return this;
      }
      /**
       * <pre>
       * The type of the number, for example "phone" or "home".
       * </pre>
       *
       * <code>optional string number_type = 2;</code>
       */
      public Builder setNumberTypeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNumberTypeBytes(value);
        return this;
      }

      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      @java.lang.Override
      public boolean hasFormattedNumberType() {
        return instance.hasFormattedNumberType();
      }
      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getFormattedNumberType() {
        return instance.getFormattedNumberType();
      }
      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFormattedNumberTypeBytes() {
        return instance.getFormattedNumberTypeBytes();
      }
      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      public Builder setFormattedNumberType(
          java.lang.String value) {
        copyOnWrite();
        instance.setFormattedNumberType(value);
        return this;
      }
      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      public Builder clearFormattedNumberType() {
        copyOnWrite();
        instance.clearFormattedNumberType();
        return this;
      }
      /**
       * <pre>
       * The number_type label in human readable string, for example "Phone".
       * The UI should display known number_type with string resources if possible
       * but if number_type is unrecognized formatted_number_type. For example
       * if the user set an custom type label.
       * </pre>
       *
       * <code>optional string formatted_number_type = 3;</code>
       */
      public Builder setFormattedNumberTypeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFormattedNumberTypeBytes(value);
        return this;
      }

      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      @java.lang.Override
      public boolean hasImageUrl() {
        return instance.hasImageUrl();
      }
      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      @java.lang.Override
      public java.lang.String getImageUrl() {
        return instance.getImageUrl();
      }
      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getImageUrlBytes() {
        return instance.getImageUrlBytes();
      }
      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      public Builder setImageUrl(
          java.lang.String value) {
        copyOnWrite();
        instance.setImageUrl(value);
        return this;
      }
      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      public Builder clearImageUrl() {
        copyOnWrite();
        instance.clearImageUrl();
        return this;
      }
      /**
       * <pre>
       * URL to the contact's full size photo.
       * </pre>
       *
       * <code>optional string image_url = 4;</code>
       */
      public Builder setImageUrlBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setImageUrlBytes(value);
        return this;
      }

      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      @java.lang.Override
      public boolean hasPersonId() {
        return instance.hasPersonId();
      }
      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      @java.lang.Override
      public java.lang.String getPersonId() {
        return instance.getPersonId();
      }
      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPersonIdBytes() {
        return instance.getPersonIdBytes();
      }
      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      public Builder setPersonId(
          java.lang.String value) {
        copyOnWrite();
        instance.setPersonId(value);
        return this;
      }
      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      public Builder clearPersonId() {
        copyOnWrite();
        instance.clearPersonId();
        return this;
      }
      /**
       * <pre>
       * The primary key of the contact in people API.
       * </pre>
       *
       * <code>optional string person_id = 5;</code>
       */
      public Builder setPersonIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPersonIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * The type of the lookup result, for example, a saved contact or a nearby
       * business.
       * </pre>
       *
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
       */
      @java.lang.Override
      public boolean hasInfoType() {
        return instance.hasInfoType();
      }
      /**
       * <pre>
       * The type of the lookup result, for example, a saved contact or a nearby
       * business.
       * </pre>
       *
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
       */
      @java.lang.Override
      public com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType getInfoType() {
        return instance.getInfoType();
      }
      /**
       * <pre>
       * The type of the lookup result, for example, a saved contact or a nearby
       * business.
       * </pre>
       *
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
       */
      public Builder setInfoType(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType value) {
        copyOnWrite();
        instance.setInfoType(value);
        return this;
      }
      /**
       * <pre>
       * The type of the lookup result, for example, a saved contact or a nearby
       * business.
       * </pre>
       *
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType info_type = 6;</code>
       */
      public Builder clearInfoType() {
        copyOnWrite();
        instance.clearInfoType();
        return this;
      }

      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public boolean hasLookupUri() {
        return instance.hasLookupUri();
      }
      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public java.lang.String getLookupUri() {
        return instance.getLookupUri();
      }
      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLookupUriBytes() {
        return instance.getLookupUriBytes();
      }
      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      public Builder setLookupUri(
          java.lang.String value) {
        copyOnWrite();
        instance.setLookupUri(value);
        return this;
      }
      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      public Builder clearLookupUri() {
        copyOnWrite();
        instance.clearLookupUri();
        return this;
      }
      /**
       * <pre>
       * A URI that contains encoded JSON about the number so contacts can
       * populate the quick contact activity with name and numbers. This does not
       * point to any real contact entry anywhere.
       * </pre>
       *
       * <code>optional string lookup_uri = 7;</code>
       */
      public Builder setLookupUriBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLookupUriBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "displayName_",
              "numberType_",
              "formattedNumberType_",
              "imageUrl_",
              "personId_",
              "infoType_",
              com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.InfoType.internalGetVerifier(),
              "lookupUri_",
            };
            java.lang.String info =
                "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0000\u0001\b\u0000\u0002" +
                "\b\u0001\u0003\b\u0002\u0004\b\u0003\u0005\b\u0004\u0006\f\u0005\u0007\b\u0006";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo DEFAULT_INSTANCE;
    static {
      PeopleApiInfo defaultInstance = new PeopleApiInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PeopleApiInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PeopleApiInfo> PARSER;

    public static com.google.protobuf.Parser<PeopleApiInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SystemBlockedNumberInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    boolean hasBlockedState();
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState getBlockedState();
  }
  /**
   * <pre>
   * Message for the android system BlockedNumber lookup. Available starting in
   * N.
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo}
   */
  public  static final class SystemBlockedNumberInfo extends
      com.google.protobuf.GeneratedMessageLite<
          SystemBlockedNumberInfo, SystemBlockedNumberInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo)
      SystemBlockedNumberInfoOrBuilder {
    private SystemBlockedNumberInfo() {
    }
    private int bitField0_;
    public static final int BLOCKED_STATE_FIELD_NUMBER = 1;
    private int blockedState_;
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    @java.lang.Override
    public boolean hasBlockedState() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState getBlockedState() {
      com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState result = com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState.forNumber(blockedState_);
      return result == null ? com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState.UNKNOWN : result;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    private void setBlockedState(com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      blockedState_ = value.getNumber();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
     */
    private void clearBlockedState() {
      bitField0_ = (bitField0_ & ~0x00000001);
      blockedState_ = 0;
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message for the android system BlockedNumber lookup. Available starting in
     * N.
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
       */
      @java.lang.Override
      public boolean hasBlockedState() {
        return instance.hasBlockedState();
      }
      /**
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
       */
      @java.lang.Override
      public com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState getBlockedState() {
        return instance.getBlockedState();
      }
      /**
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
       */
      public Builder setBlockedState(com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState value) {
        copyOnWrite();
        instance.setBlockedState(value);
        return this;
      }
      /**
       * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState blocked_state = 1;</code>
       */
      public Builder clearBlockedState() {
        copyOnWrite();
        instance.clearBlockedState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "blockedState_",
              com.android.dialer.phonelookup.PhoneLookupInfo.BlockedState.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\f\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo DEFAULT_INSTANCE;
    static {
      SystemBlockedNumberInfo defaultInstance = new SystemBlockedNumberInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SystemBlockedNumberInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SystemBlockedNumberInfo> PARSER;

    public static com.google.protobuf.Parser<SystemBlockedNumberInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CnapInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * Information obtained via CNAP
   * (https://en.wikipedia.org/wiki/Calling_Name_Presentation)
   * Next ID: 2
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo}
   */
  public  static final class CnapInfo extends
      com.google.protobuf.GeneratedMessageLite<
          CnapInfo, CnapInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo)
      CnapInfoOrBuilder {
    private CnapInfo() {
      name_ = "";
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.String name_;
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getName() {
      return name_;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value.toStringUtf8();
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Information obtained via CNAP
     * (https://en.wikipedia.org/wiki/Calling_Name_Presentation)
     * Next ID: 2
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getName() {
        return instance.getName();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "name_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\b\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo DEFAULT_INSTANCE;
    static {
      CnapInfo defaultInstance = new CnapInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CnapInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CnapInfo> PARSER;

    public static com.google.protobuf.Parser<CnapInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CequintInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    boolean hasGeolocation();
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    java.lang.String getGeolocation();
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    com.google.protobuf.ByteString
        getGeolocationBytes();

    /**
     * <code>optional string photo_uri = 3;</code>
     */
    boolean hasPhotoUri();
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    java.lang.String getPhotoUri();
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    com.google.protobuf.ByteString
        getPhotoUriBytes();
  }
  /**
   * <pre>
   * Information obtained via Cequint
   * Next ID: 4
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo}
   */
  public  static final class CequintInfo extends
      com.google.protobuf.GeneratedMessageLite<
          CequintInfo, CequintInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo)
      CequintInfoOrBuilder {
    private CequintInfo() {
      name_ = "";
      geolocation_ = "";
      photoUri_ = "";
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.String name_;
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getName() {
      return name_;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value.toStringUtf8();
    }

    public static final int GEOLOCATION_FIELD_NUMBER = 2;
    private java.lang.String geolocation_;
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    @java.lang.Override
    public boolean hasGeolocation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getGeolocation() {
      return geolocation_;
    }
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGeolocationBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(geolocation_);
    }
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    private void setGeolocation(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      geolocation_ = value;
    }
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    private void clearGeolocation() {
      bitField0_ = (bitField0_ & ~0x00000002);
      geolocation_ = getDefaultInstance().getGeolocation();
    }
    /**
     * <pre>
     * Description of the geolocation (e.g., "Mountain View, CA")
     * </pre>
     *
     * <code>optional string geolocation = 2;</code>
     */
    private void setGeolocationBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      geolocation_ = value.toStringUtf8();
    }

    public static final int PHOTO_URI_FIELD_NUMBER = 3;
    private java.lang.String photoUri_;
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public boolean hasPhotoUri() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getPhotoUri() {
      return photoUri_;
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhotoUriBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUri(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      photoUri_ = value;
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void clearPhotoUri() {
      bitField0_ = (bitField0_ & ~0x00000004);
      photoUri_ = getDefaultInstance().getPhotoUri();
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUriBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      photoUri_ = value.toStringUtf8();
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Information obtained via Cequint
     * Next ID: 4
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getName() {
        return instance.getName();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      @java.lang.Override
      public boolean hasGeolocation() {
        return instance.hasGeolocation();
      }
      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getGeolocation() {
        return instance.getGeolocation();
      }
      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getGeolocationBytes() {
        return instance.getGeolocationBytes();
      }
      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      public Builder setGeolocation(
          java.lang.String value) {
        copyOnWrite();
        instance.setGeolocation(value);
        return this;
      }
      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      public Builder clearGeolocation() {
        copyOnWrite();
        instance.clearGeolocation();
        return this;
      }
      /**
       * <pre>
       * Description of the geolocation (e.g., "Mountain View, CA")
       * </pre>
       *
       * <code>optional string geolocation = 2;</code>
       */
      public Builder setGeolocationBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setGeolocationBytes(value);
        return this;
      }

      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public boolean hasPhotoUri() {
        return instance.hasPhotoUri();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getPhotoUri() {
        return instance.getPhotoUri();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPhotoUriBytes() {
        return instance.getPhotoUriBytes();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder setPhotoUri(
          java.lang.String value) {
        copyOnWrite();
        instance.setPhotoUri(value);
        return this;
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder clearPhotoUri() {
        copyOnWrite();
        instance.clearPhotoUri();
        return this;
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder setPhotoUriBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPhotoUriBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "name_",
              "geolocation_",
              "photoUri_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\b\u0000\u0002" +
                "\b\u0001\u0003\b\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo DEFAULT_INSTANCE;
    static {
      CequintInfo defaultInstance = new CequintInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CequintInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CequintInfo> PARSER;

    public static com.google.protobuf.Parser<CequintInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EmergencyInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    boolean hasIsEmergencyNumber();
    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    boolean getIsEmergencyNumber();
  }
  /**
   * <pre>
   * Message indicating whether a number is an emergency number.
   * Next ID: 2
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo}
   */
  public  static final class EmergencyInfo extends
      com.google.protobuf.GeneratedMessageLite<
          EmergencyInfo, EmergencyInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo)
      EmergencyInfoOrBuilder {
    private EmergencyInfo() {
    }
    private int bitField0_;
    public static final int IS_EMERGENCY_NUMBER_FIELD_NUMBER = 1;
    private boolean isEmergencyNumber_;
    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    @java.lang.Override
    public boolean hasIsEmergencyNumber() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    @java.lang.Override
    public boolean getIsEmergencyNumber() {
      return isEmergencyNumber_;
    }
    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    private void setIsEmergencyNumber(boolean value) {
      bitField0_ |= 0x00000001;
      isEmergencyNumber_ = value;
    }
    /**
     * <code>optional bool is_emergency_number = 1;</code>
     */
    private void clearIsEmergencyNumber() {
      bitField0_ = (bitField0_ & ~0x00000001);
      isEmergencyNumber_ = false;
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Message indicating whether a number is an emergency number.
     * Next ID: 2
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool is_emergency_number = 1;</code>
       */
      @java.lang.Override
      public boolean hasIsEmergencyNumber() {
        return instance.hasIsEmergencyNumber();
      }
      /**
       * <code>optional bool is_emergency_number = 1;</code>
       */
      @java.lang.Override
      public boolean getIsEmergencyNumber() {
        return instance.getIsEmergencyNumber();
      }
      /**
       * <code>optional bool is_emergency_number = 1;</code>
       */
      public Builder setIsEmergencyNumber(boolean value) {
        copyOnWrite();
        instance.setIsEmergencyNumber(value);
        return this;
      }
      /**
       * <code>optional bool is_emergency_number = 1;</code>
       */
      public Builder clearIsEmergencyNumber() {
        copyOnWrite();
        instance.clearIsEmergencyNumber();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "isEmergencyNumber_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u0007\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo DEFAULT_INSTANCE;
    static {
      EmergencyInfo defaultInstance = new EmergencyInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        EmergencyInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EmergencyInfo> PARSER;

    public static com.google.protobuf.Parser<EmergencyInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface MigratedInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    boolean hasLabel();
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <code>optional string photo_uri = 3;</code>
     */
    boolean hasPhotoUri();
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    java.lang.String getPhotoUri();
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    com.google.protobuf.ByteString
        getPhotoUriBytes();

    /**
     * <code>optional bool is_business = 4;</code>
     */
    boolean hasIsBusiness();
    /**
     * <code>optional bool is_business = 4;</code>
     */
    boolean getIsBusiness();

    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    boolean hasSourceType();
    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    int getSourceType();
  }
  /**
   * <pre>
   * Information cached in the old calllog
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo}
   */
  public  static final class MigratedInfo extends
      com.google.protobuf.GeneratedMessageLite<
          MigratedInfo, MigratedInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo)
      MigratedInfoOrBuilder {
    private MigratedInfo() {
      name_ = "";
      label_ = "";
      photoUri_ = "";
    }
    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.String name_;
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public java.lang.String getName() {
      return name_;
    }
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(name_);
    }
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value;
    }
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void clearName() {
      bitField0_ = (bitField0_ & ~0x00000001);
      name_ = getDefaultInstance().getName();
    }
    /**
     * <pre>
     * The display name
     * </pre>
     *
     * <code>optional string name = 1;</code>
     */
    private void setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      name_ = value.toStringUtf8();
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.String label_;
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    @java.lang.Override
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    @java.lang.Override
    public java.lang.String getLabel() {
      return label_;
    }
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(label_);
    }
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      label_ = value;
    }
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void clearLabel() {
      bitField0_ = (bitField0_ & ~0x00000002);
      label_ = getDefaultInstance().getLabel();
    }
    /**
     * <pre>
     * Display label, i.e. "Home", "Mobile"
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      label_ = value.toStringUtf8();
    }

    public static final int PHOTO_URI_FIELD_NUMBER = 3;
    private java.lang.String photoUri_;
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public boolean hasPhotoUri() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public java.lang.String getPhotoUri() {
      return photoUri_;
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPhotoUriBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(photoUri_);
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUri(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      photoUri_ = value;
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void clearPhotoUri() {
      bitField0_ = (bitField0_ & ~0x00000004);
      photoUri_ = getDefaultInstance().getPhotoUri();
    }
    /**
     * <code>optional string photo_uri = 3;</code>
     */
    private void setPhotoUriBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      photoUri_ = value.toStringUtf8();
    }

    public static final int IS_BUSINESS_FIELD_NUMBER = 4;
    private boolean isBusiness_;
    /**
     * <code>optional bool is_business = 4;</code>
     */
    @java.lang.Override
    public boolean hasIsBusiness() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool is_business = 4;</code>
     */
    @java.lang.Override
    public boolean getIsBusiness() {
      return isBusiness_;
    }
    /**
     * <code>optional bool is_business = 4;</code>
     */
    private void setIsBusiness(boolean value) {
      bitField0_ |= 0x00000008;
      isBusiness_ = value;
    }
    /**
     * <code>optional bool is_business = 4;</code>
     */
    private void clearIsBusiness() {
      bitField0_ = (bitField0_ & ~0x00000008);
      isBusiness_ = false;
    }

    public static final int SOURCE_TYPE_FIELD_NUMBER = 5;
    private int sourceType_;
    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    @java.lang.Override
    public boolean hasSourceType() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    @java.lang.Override
    public int getSourceType() {
      return sourceType_;
    }
    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    private void setSourceType(int value) {
      bitField0_ |= 0x00000010;
      sourceType_ = value;
    }
    /**
     * <pre>
     * ContactSource.Type
     * </pre>
     *
     * <code>optional int32 source_type = 5;</code>
     */
    private void clearSourceType() {
      bitField0_ = (bitField0_ & ~0x00000010);
      sourceType_ = 0;
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Information cached in the old calllog
     * </pre>
     *
     * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo)
        com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfoOrBuilder {
      // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public boolean hasName() {
        return instance.hasName();
      }
      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public java.lang.String getName() {
        return instance.getName();
      }
      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return instance.getNameBytes();
      }
      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        copyOnWrite();
        instance.setName(value);
        return this;
      }
      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        copyOnWrite();
        instance.clearName();
        return this;
      }
      /**
       * <pre>
       * The display name
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNameBytes(value);
        return this;
      }

      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      @java.lang.Override
      public boolean hasLabel() {
        return instance.hasLabel();
      }
      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      @java.lang.Override
      public java.lang.String getLabel() {
        return instance.getLabel();
      }
      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLabelBytes() {
        return instance.getLabelBytes();
      }
      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
      }
      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }
      /**
       * <pre>
       * Display label, i.e. "Home", "Mobile"
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLabelBytes(value);
        return this;
      }

      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public boolean hasPhotoUri() {
        return instance.hasPhotoUri();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public java.lang.String getPhotoUri() {
        return instance.getPhotoUri();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPhotoUriBytes() {
        return instance.getPhotoUriBytes();
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder setPhotoUri(
          java.lang.String value) {
        copyOnWrite();
        instance.setPhotoUri(value);
        return this;
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder clearPhotoUri() {
        copyOnWrite();
        instance.clearPhotoUri();
        return this;
      }
      /**
       * <code>optional string photo_uri = 3;</code>
       */
      public Builder setPhotoUriBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPhotoUriBytes(value);
        return this;
      }

      /**
       * <code>optional bool is_business = 4;</code>
       */
      @java.lang.Override
      public boolean hasIsBusiness() {
        return instance.hasIsBusiness();
      }
      /**
       * <code>optional bool is_business = 4;</code>
       */
      @java.lang.Override
      public boolean getIsBusiness() {
        return instance.getIsBusiness();
      }
      /**
       * <code>optional bool is_business = 4;</code>
       */
      public Builder setIsBusiness(boolean value) {
        copyOnWrite();
        instance.setIsBusiness(value);
        return this;
      }
      /**
       * <code>optional bool is_business = 4;</code>
       */
      public Builder clearIsBusiness() {
        copyOnWrite();
        instance.clearIsBusiness();
        return this;
      }

      /**
       * <pre>
       * ContactSource.Type
       * </pre>
       *
       * <code>optional int32 source_type = 5;</code>
       */
      @java.lang.Override
      public boolean hasSourceType() {
        return instance.hasSourceType();
      }
      /**
       * <pre>
       * ContactSource.Type
       * </pre>
       *
       * <code>optional int32 source_type = 5;</code>
       */
      @java.lang.Override
      public int getSourceType() {
        return instance.getSourceType();
      }
      /**
       * <pre>
       * ContactSource.Type
       * </pre>
       *
       * <code>optional int32 source_type = 5;</code>
       */
      public Builder setSourceType(int value) {
        copyOnWrite();
        instance.setSourceType(value);
        return this;
      }
      /**
       * <pre>
       * ContactSource.Type
       * </pre>
       *
       * <code>optional int32 source_type = 5;</code>
       */
      public Builder clearSourceType() {
        copyOnWrite();
        instance.clearSourceType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "name_",
              "label_",
              "photoUri_",
              "isBusiness_",
              "sourceType_",
            };
            java.lang.String info =
                "\u0001\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0000\u0001\b\u0000\u0002" +
                "\b\u0001\u0003\b\u0002\u0004\u0007\u0003\u0005\u0004\u0004";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo> parser = PARSER;
          if (parser == null) {
            synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo)
    private static final com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo DEFAULT_INSTANCE;
    static {
      MigratedInfo defaultInstance = new MigratedInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        MigratedInfo.class, defaultInstance);
    }

    public static com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MigratedInfo> PARSER;

    public static com.google.protobuf.Parser<MigratedInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int DEFAULT_CP2_INFO_FIELD_NUMBER = 1;
  private com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info defaultCp2Info_;
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  @java.lang.Override
  public boolean hasDefaultCp2Info() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info getDefaultCp2Info() {
    return defaultCp2Info_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.getDefaultInstance() : defaultCp2Info_;
  }
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  private void setDefaultCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
    if (value == null) {
      throw new NullPointerException();
    }
    defaultCp2Info_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  private void setDefaultCp2Info(
      com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Builder builderForValue) {
    defaultCp2Info_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeDefaultCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (defaultCp2Info_ != null &&
        defaultCp2Info_ != com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.getDefaultInstance()) {
      defaultCp2Info_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.newBuilder(defaultCp2Info_).mergeFrom(value).buildPartial();
    } else {
      defaultCp2Info_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Information about a contact in the default directory, retrieved via CP2.
   * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
   */
  private void clearDefaultCp2Info() {  defaultCp2Info_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int EXTENDED_CP2_INFO_FIELD_NUMBER = 6;
  private com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extendedCp2Info_;
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  @java.lang.Override
  public boolean hasExtendedCp2Info() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info getExtendedCp2Info() {
    return extendedCp2Info_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.getDefaultInstance() : extendedCp2Info_;
  }
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  private void setExtendedCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
    if (value == null) {
      throw new NullPointerException();
    }
    extendedCp2Info_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  private void setExtendedCp2Info(
      com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Builder builderForValue) {
    extendedCp2Info_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeExtendedCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (extendedCp2Info_ != null &&
        extendedCp2Info_ != com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.getDefaultInstance()) {
      extendedCp2Info_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.newBuilder(extendedCp2Info_).mergeFrom(value).buildPartial();
    } else {
      extendedCp2Info_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Information about a contact in other directories, retrieved via CP2.
   * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
   * </pre>
   *
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
   */
  private void clearExtendedCp2Info() {  extendedCp2Info_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int SPAM_INFO_FIELD_NUMBER = 2;
  private com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spamInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  @java.lang.Override
  public boolean hasSpamInfo() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo getSpamInfo() {
    return spamInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.getDefaultInstance() : spamInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  private void setSpamInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    spamInfo_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  private void setSpamInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.Builder builderForValue) {
    spamInfo_ = builderForValue.build();
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeSpamInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (spamInfo_ != null &&
        spamInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.getDefaultInstance()) {
      spamInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.newBuilder(spamInfo_).mergeFrom(value).buildPartial();
    } else {
      spamInfo_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
   */
  private void clearSpamInfo() {  spamInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int PEOPLE_API_INFO_FIELD_NUMBER = 3;
  private com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo peopleApiInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  @java.lang.Override
  public boolean hasPeopleApiInfo() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo getPeopleApiInfo() {
    return peopleApiInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.getDefaultInstance() : peopleApiInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  private void setPeopleApiInfo(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    peopleApiInfo_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  private void setPeopleApiInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.Builder builderForValue) {
    peopleApiInfo_ = builderForValue.build();
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePeopleApiInfo(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (peopleApiInfo_ != null &&
        peopleApiInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.getDefaultInstance()) {
      peopleApiInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.newBuilder(peopleApiInfo_).mergeFrom(value).buildPartial();
    } else {
      peopleApiInfo_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
   */
  private void clearPeopleApiInfo() {  peopleApiInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int SYSTEM_BLOCKED_NUMBER_INFO_FIELD_NUMBER = 4;
  private com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo systemBlockedNumberInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  @java.lang.Override
  public boolean hasSystemBlockedNumberInfo() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo getSystemBlockedNumberInfo() {
    return systemBlockedNumberInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.getDefaultInstance() : systemBlockedNumberInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  private void setSystemBlockedNumberInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    systemBlockedNumberInfo_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  private void setSystemBlockedNumberInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.Builder builderForValue) {
    systemBlockedNumberInfo_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeSystemBlockedNumberInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (systemBlockedNumberInfo_ != null &&
        systemBlockedNumberInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.getDefaultInstance()) {
      systemBlockedNumberInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.newBuilder(systemBlockedNumberInfo_).mergeFrom(value).buildPartial();
    } else {
      systemBlockedNumberInfo_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
   */
  private void clearSystemBlockedNumberInfo() {  systemBlockedNumberInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int CNAP_INFO_FIELD_NUMBER = 7;
  private com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnapInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  @java.lang.Override
  public boolean hasCnapInfo() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo getCnapInfo() {
    return cnapInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.getDefaultInstance() : cnapInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  private void setCnapInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    cnapInfo_ = value;
    bitField0_ |= 0x00000020;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  private void setCnapInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.Builder builderForValue) {
    cnapInfo_ = builderForValue.build();
    bitField0_ |= 0x00000020;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCnapInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (cnapInfo_ != null &&
        cnapInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.getDefaultInstance()) {
      cnapInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.newBuilder(cnapInfo_).mergeFrom(value).buildPartial();
    } else {
      cnapInfo_ = value;
    }
    bitField0_ |= 0x00000020;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
   */
  private void clearCnapInfo() {  cnapInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000020);
  }

  public static final int CEQUINT_INFO_FIELD_NUMBER = 8;
  private com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequintInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  @java.lang.Override
  public boolean hasCequintInfo() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo getCequintInfo() {
    return cequintInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.getDefaultInstance() : cequintInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  private void setCequintInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    cequintInfo_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  private void setCequintInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.Builder builderForValue) {
    cequintInfo_ = builderForValue.build();
    bitField0_ |= 0x00000040;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCequintInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (cequintInfo_ != null &&
        cequintInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.getDefaultInstance()) {
      cequintInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.newBuilder(cequintInfo_).mergeFrom(value).buildPartial();
    } else {
      cequintInfo_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
   */
  private void clearCequintInfo() {  cequintInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public static final int EMERGENCY_INFO_FIELD_NUMBER = 9;
  private com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergencyInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  @java.lang.Override
  public boolean hasEmergencyInfo() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo getEmergencyInfo() {
    return emergencyInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.getDefaultInstance() : emergencyInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  private void setEmergencyInfo(com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    emergencyInfo_ = value;
    bitField0_ |= 0x00000080;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  private void setEmergencyInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.Builder builderForValue) {
    emergencyInfo_ = builderForValue.build();
    bitField0_ |= 0x00000080;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeEmergencyInfo(com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (emergencyInfo_ != null &&
        emergencyInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.getDefaultInstance()) {
      emergencyInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.newBuilder(emergencyInfo_).mergeFrom(value).buildPartial();
    } else {
      emergencyInfo_ = value;
    }
    bitField0_ |= 0x00000080;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
   */
  private void clearEmergencyInfo() {  emergencyInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000080);
  }

  public static final int MIGRATED_INFO_FIELD_NUMBER = 10;
  private com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migratedInfo_;
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  @java.lang.Override
  public boolean hasMigratedInfo() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  @java.lang.Override
  public com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo getMigratedInfo() {
    return migratedInfo_ == null ? com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.getDefaultInstance() : migratedInfo_;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  private void setMigratedInfo(com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    migratedInfo_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  private void setMigratedInfo(
      com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.Builder builderForValue) {
    migratedInfo_ = builderForValue.build();
    bitField0_ |= 0x00000100;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeMigratedInfo(com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    if (migratedInfo_ != null &&
        migratedInfo_ != com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.getDefaultInstance()) {
      migratedInfo_ =
        com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.newBuilder(migratedInfo_).mergeFrom(value).buildPartial();
    } else {
      migratedInfo_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
   */
  private void clearMigratedInfo() {  migratedInfo_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.android.dialer.phonelookup.PhoneLookupInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.android.dialer.phonelookup.PhoneLookupInfo prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Contains information about a phone number, possibly from many sources.
   * This message is organized into sub-message fields where each one corresponds
   * to an implementation of PhoneLookup. For example, field
   * "cp2_info_in_default_directory" corresponds to class
   * Cp2DefaultDirectoryPhoneLookup, and class Cp2DefaultDirectoryPhoneLookup
   * alone is responsible for populating it.
   * Next ID: 11
   * </pre>
   *
   * Protobuf type {@code com.android.dialer.phonelookup.PhoneLookupInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.android.dialer.phonelookup.PhoneLookupInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:com.android.dialer.phonelookup.PhoneLookupInfo)
      com.android.dialer.phonelookup.PhoneLookupInfoOrBuilder {
    // Construct using com.android.dialer.phonelookup.PhoneLookupInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    @java.lang.Override
    public boolean hasDefaultCp2Info() {
      return instance.hasDefaultCp2Info();
    }
    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info getDefaultCp2Info() {
      return instance.getDefaultCp2Info();
    }
    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    public Builder setDefaultCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
      copyOnWrite();
      instance.setDefaultCp2Info(value);
      return this;
      }
    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    public Builder setDefaultCp2Info(
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Builder builderForValue) {
      copyOnWrite();
      instance.setDefaultCp2Info(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    public Builder mergeDefaultCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
      copyOnWrite();
      instance.mergeDefaultCp2Info(value);
      return this;
    }
    /**
     * <pre>
     * Information about a contact in the default directory, retrieved via CP2.
     * Cp2DefaultDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info default_cp2_info = 1;</code>
     */
    public Builder clearDefaultCp2Info() {  copyOnWrite();
      instance.clearDefaultCp2Info();
      return this;
    }

    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    @java.lang.Override
    public boolean hasExtendedCp2Info() {
      return instance.hasExtendedCp2Info();
    }
    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info getExtendedCp2Info() {
      return instance.getExtendedCp2Info();
    }
    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    public Builder setExtendedCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
      copyOnWrite();
      instance.setExtendedCp2Info(value);
      return this;
      }
    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    public Builder setExtendedCp2Info(
        com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info.Builder builderForValue) {
      copyOnWrite();
      instance.setExtendedCp2Info(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    public Builder mergeExtendedCp2Info(com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info value) {
      copyOnWrite();
      instance.mergeExtendedCp2Info(value);
      return this;
    }
    /**
     * <pre>
     * Information about a contact in other directories, retrieved via CP2.
     * Cp2ExtendedDirectoryPhoneLookup is responsible for populating this field.
     * </pre>
     *
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.Cp2Info extended_cp2_info = 6;</code>
     */
    public Builder clearExtendedCp2Info() {  copyOnWrite();
      instance.clearExtendedCp2Info();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    @java.lang.Override
    public boolean hasSpamInfo() {
      return instance.hasSpamInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo getSpamInfo() {
      return instance.getSpamInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    public Builder setSpamInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo value) {
      copyOnWrite();
      instance.setSpamInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    public Builder setSpamInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setSpamInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    public Builder mergeSpamInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo value) {
      copyOnWrite();
      instance.mergeSpamInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SpamInfo spam_info = 2;</code>
     */
    public Builder clearSpamInfo() {  copyOnWrite();
      instance.clearSpamInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    @java.lang.Override
    public boolean hasPeopleApiInfo() {
      return instance.hasPeopleApiInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo getPeopleApiInfo() {
      return instance.getPeopleApiInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    public Builder setPeopleApiInfo(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo value) {
      copyOnWrite();
      instance.setPeopleApiInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    public Builder setPeopleApiInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setPeopleApiInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    public Builder mergePeopleApiInfo(com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo value) {
      copyOnWrite();
      instance.mergePeopleApiInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.PeopleApiInfo people_api_info = 3;</code>
     */
    public Builder clearPeopleApiInfo() {  copyOnWrite();
      instance.clearPeopleApiInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    @java.lang.Override
    public boolean hasSystemBlockedNumberInfo() {
      return instance.hasSystemBlockedNumberInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo getSystemBlockedNumberInfo() {
      return instance.getSystemBlockedNumberInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    public Builder setSystemBlockedNumberInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo value) {
      copyOnWrite();
      instance.setSystemBlockedNumberInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    public Builder setSystemBlockedNumberInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setSystemBlockedNumberInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    public Builder mergeSystemBlockedNumberInfo(com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo value) {
      copyOnWrite();
      instance.mergeSystemBlockedNumberInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.SystemBlockedNumberInfo system_blocked_number_info = 4;</code>
     */
    public Builder clearSystemBlockedNumberInfo() {  copyOnWrite();
      instance.clearSystemBlockedNumberInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    @java.lang.Override
    public boolean hasCnapInfo() {
      return instance.hasCnapInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo getCnapInfo() {
      return instance.getCnapInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    public Builder setCnapInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo value) {
      copyOnWrite();
      instance.setCnapInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    public Builder setCnapInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setCnapInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    public Builder mergeCnapInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo value) {
      copyOnWrite();
      instance.mergeCnapInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CnapInfo cnap_info = 7;</code>
     */
    public Builder clearCnapInfo() {  copyOnWrite();
      instance.clearCnapInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    @java.lang.Override
    public boolean hasCequintInfo() {
      return instance.hasCequintInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo getCequintInfo() {
      return instance.getCequintInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    public Builder setCequintInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo value) {
      copyOnWrite();
      instance.setCequintInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    public Builder setCequintInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setCequintInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    public Builder mergeCequintInfo(com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo value) {
      copyOnWrite();
      instance.mergeCequintInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.CequintInfo cequint_info = 8;</code>
     */
    public Builder clearCequintInfo() {  copyOnWrite();
      instance.clearCequintInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    @java.lang.Override
    public boolean hasEmergencyInfo() {
      return instance.hasEmergencyInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo getEmergencyInfo() {
      return instance.getEmergencyInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    public Builder setEmergencyInfo(com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo value) {
      copyOnWrite();
      instance.setEmergencyInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    public Builder setEmergencyInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setEmergencyInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    public Builder mergeEmergencyInfo(com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo value) {
      copyOnWrite();
      instance.mergeEmergencyInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.EmergencyInfo emergency_info = 9;</code>
     */
    public Builder clearEmergencyInfo() {  copyOnWrite();
      instance.clearEmergencyInfo();
      return this;
    }

    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    @java.lang.Override
    public boolean hasMigratedInfo() {
      return instance.hasMigratedInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    @java.lang.Override
    public com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo getMigratedInfo() {
      return instance.getMigratedInfo();
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    public Builder setMigratedInfo(com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo value) {
      copyOnWrite();
      instance.setMigratedInfo(value);
      return this;
      }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    public Builder setMigratedInfo(
        com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setMigratedInfo(builderForValue);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    public Builder mergeMigratedInfo(com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo value) {
      copyOnWrite();
      instance.mergeMigratedInfo(value);
      return this;
    }
    /**
     * <code>optional .com.android.dialer.phonelookup.PhoneLookupInfo.MigratedInfo migrated_info = 10;</code>
     */
    public Builder clearMigratedInfo() {  copyOnWrite();
      instance.clearMigratedInfo();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:com.android.dialer.phonelookup.PhoneLookupInfo)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.android.dialer.phonelookup.PhoneLookupInfo();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "defaultCp2Info_",
            "spamInfo_",
            "peopleApiInfo_",
            "systemBlockedNumberInfo_",
            "extendedCp2Info_",
            "cnapInfo_",
            "cequintInfo_",
            "emergencyInfo_",
            "migratedInfo_",
          };
          java.lang.String info =
              "\u0001\t\u0000\u0001\u0001\n\t\u0000\u0000\u0000\u0001\t\u0000\u0002\t\u0002\u0003" +
              "\t\u0003\u0004\t\u0004\u0006\t\u0001\u0007\t\u0005\b\t\u0006\t\t\u0007\n\t\b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.android.dialer.phonelookup.PhoneLookupInfo> parser = PARSER;
        if (parser == null) {
          synchronized (com.android.dialer.phonelookup.PhoneLookupInfo.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.android.dialer.phonelookup.PhoneLookupInfo>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:com.android.dialer.phonelookup.PhoneLookupInfo)
  private static final com.android.dialer.phonelookup.PhoneLookupInfo DEFAULT_INSTANCE;
  static {
    PhoneLookupInfo defaultInstance = new PhoneLookupInfo();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PhoneLookupInfo.class, defaultInstance);
  }

  public static com.android.dialer.phonelookup.PhoneLookupInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PhoneLookupInfo> PARSER;

  public static com.google.protobuf.Parser<PhoneLookupInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

