/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.dil3mm4.huawei.DUK;

public final class R {
  public static final class array {
    /**
     * Array of output values for LCD backlight corresponding to the LUX values
     * in the config_autoBrightnessLevels array.  This array should have size one greater
     * than the size of the config_autoBrightnessLevels array.
     * The brightness values must be between 0 and 255 and be non-decreasing.
     * This must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLcdBacklightValues=0x7f010000;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N + 1 control points as follows:
     * (1-based arrays)
     * Point 1:            (0, value[1]):             lux <= 0
     * Point 2:     (level[1], value[2]):  0        < lux <= level[1]
     * Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
     * ...
     * Point N+1: (level[N], value[N+1]):  level[N] < lux
     * The control points must be strictly increasing.  Each control point
     * corresponds to an entry in the brightness backlight values arrays.
     * For example, if LUX == level[1] (first element of the levels array)
     * then the brightness will be determined by value[2] (second element
     * of the brightness values array).
     * Spline interpolation is used to determine the auto-brightness
     * backlight values for LUX levels between these control points.
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
     * should be empty.
     */
    public static final int config_tether_bluetooth_regexs=0x7f010002;
    /**
     * Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
     * [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH
     */
    public static final int config_tether_upstream_types=0x7f010003;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * USB interfaces.  If the device doesn't want to support tething over USB this should
     * be empty.  An example would be "usb.*"
     */
    public static final int config_tether_usb_regexs=0x7f010004;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
     * should be empty.  An example would be "softap.*"
     */
    public static final int config_tether_wifi_regexs=0x7f010005;
  }
  public static final class bool {
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
    /**
     * Boolean indicating if current platform supports BLE peripheral mode
     */
    public static final int config_bluetooth_le_peripheral_mode_supported=0x7f020001;
    /**
     * Flag specifying whether VoLTE should be available for carrier: independent of
     * carrier provisioning. If false: hard disabled. If true: then depends on carrier
     * provisioning, availability etc
     */
    public static final int config_carrier_volte_available=0x7f020002;
    /**
     * Flag specifying whether WFC over IMS should be available for carrier: independent of
     * carrier provisioning. If false: hard disabled. If true: then depends on carrier
     * provisioning, availability etc
     */
    public static final int config_carrier_wfc_ims_available=0x7f020003;
    /**
     * Flag specifying whether VoLTE is available on device
     */
    public static final int config_device_volte_available=0x7f020004;
    /**
     * Flag specifying whether WFC over IMS is available on device
     */
    public static final int config_device_wfc_ims_available=0x7f020005;
    /**
     * If true, the doze component is not started until after the screen has been
     * turned off and the screen off animation has been performed.
     */
    public static final int config_dozeAfterScreenOff=0x7f020006;
    /**
     * Is the device capable of hot swapping an UICC Card
     */
    public static final int config_hotswapCapable=0x7f020007;
    /**
     * Is the notification LED intrusive? Used to decide if there should be a disable option
     */
    public static final int config_intrusiveNotificationLed=0x7f020008;
    /**
     * Power Management: Specifies whether to decouple the auto-suspend state of the
     * device from the display on/off state.
     * When false, autosuspend_disable() will be called before the display is turned on
     * and autosuspend_enable() will be called after the display is turned off.
     * This mode provides best compatibility for devices using legacy power management
     * features such as early suspend / late resume.
     * When true, autosuspend_display() and autosuspend_enable() will be called
     * independently of whether the display is being turned on or off.  This mode
     * enables the power manager to suspend the application processor while the
     * display is on.
     * This resource should be set to "true" when a doze component has been specified
     * to maximize power savings but not all devices support it.
     * Refer to autosuspend.h for details.
     */
    public static final int config_powerDecoupleAutoSuspendModeFromDisplay=0x7f020009;
    /**
     * Power Management: Specifies whether to decouple the interactive state of the
     * device from the display on/off state.
     * When false, setInteractive(..., true) will be called before the display is turned on
     * and setInteractive(..., false) will be called after the display is turned off.
     * This mode provides best compatibility for devices that expect the interactive
     * state to be tied to the display state.
     * When true, setInteractive(...) will be called independently of whether the display
     * is being turned on or off.  This mode enables the power manager to reduce
     * clocks and disable the touch controller while the display is on.
     * This resource should be set to "true" when a doze component has been specified
     * to maximize power savings but not all devices support it.
     * Refer to power.h for details.
     */
    public static final int config_powerDecoupleInteractiveModeFromDisplay=0x7f02000a;
    /**
     * Boolean indicating whether the HWC setColorTransform function can be performed efficiently
     * in hardware.
     */
    public static final int config_setColorTransformAccelerated=0x7f02000b;
    /**
     * Indicate whether to allow the device to suspend when the screen is off
     * due to the proximity sensor.  This resource should only be set to true
     * if the sensor HAL correctly handles the proximity sensor as a wake-up source.
     * Otherwise, the device may fail to wake out of suspend reliably.
     * The default is false.
     */
    public static final int config_suspendWhenScreenOffDueToProximity=0x7f02000c;
    /**
     * Boolean indicating whether the wifi chipset supports background scanning mechanism.
     * This mechanism allows the host to remain in suspend state and the dongle to actively
     * scan and wake the host when a configured SSID is detected by the dongle. This chipset
     * capability can provide power savings when wifi needs to be always kept on.
     */
    public static final int config_wifi_background_scan_support=0x7f02000d;
    /**
     * Boolean indicating whether the wifi chipset has dual frequency band support
     */
    public static final int config_wifi_dual_band_support=0x7f02000e;
  }
  public static final class integer {
    /**
     * Minimum screen brightness allowed by the power manager.
     */
    public static final int config_screenBrightnessDim=0x7f030000;
    /**
     * Screen brightness used to dim the screen while dozing in a very low power state.
     * May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDoze=0x7f030001;
  }
  public static final class xml {
    public static final int power_profile=0x7f040000;
  }
}