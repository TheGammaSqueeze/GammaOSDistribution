/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package android.auto_generated_rro_product__;

public final class R {
  public static final class array {
    public static final int config_availableColorModes=0x7f010000;
    public static final int config_biometric_sensors=0x7f010001;
    public static final int config_locationExtraPackageNames=0x7f010002;
    /**
     * Package name(s) containing location provider support.
     * These packages can contain services implementing location providers,
     * such as the Geocode Provider, Network Location Provider, and Fused
     * Location Provider.
     * The signatures of packages named below and installed in the system
     * image are "allowed" signatures.
     * The location framework checks ALL installed packages if they provide
     * an implementation of a specific location provider and compares the
     * signature of the package with the list of allowed signatures.
     * The location framework has support for installation of new or
     * updated location providers at run-time. However the new package must
     * have a signature that matches the signature of at least one package
     * on this list which is installed in the system image.
     * The chosen package for the specific location provider does not
     * depend on the order of this list.
     */
    public static final int config_locationProviderPackageNames=0x7f010003;
    /**
     * List of packages that can use the Conversation space for their category messages
     * notifications until they target R
     */
    public static final int config_notificationMsgPkgsAllowedAsConvos=0x7f010004;
    public static final int config_packagesExemptFromSuspension=0x7f010005;
    public static final int config_tether_bluetooth_regexs=0x7f010006;
    public static final int config_tether_usb_regexs=0x7f010007;
    public static final int config_tether_wifi_regexs=0x7f010008;
    /**
     * A list of apps to be retained on the managed device by a particular vendor.
     * Takes precedence over the disallowed apps lists.
     */
    public static final int vendor_required_apps_managed_device=0x7f010009;
    /**
     * A list of apps to be retained in the managed profile by a particular vendor.
     * Takes precedence over the disallowed apps lists.
     */
    public static final int vendor_required_apps_managed_profile=0x7f01000a;
    /**
     * A list of apps to be retained on the managed user by a particular vendor.
     * Takes precedence over the disallowed apps lists.
     */
    public static final int vendor_required_apps_managed_user=0x7f01000b;
  }
  public static final class bool {
    /**
     * Whether or not we should show the option to show battery percentage
     */
    public static final int config_battery_percentage_setting_available=0x7f020000;
    /**
     * Whether action menu items should be displayed in ALLCAPS or not.
     * Defaults to true. If this is not appropriate for specific locales
     * it should be disabled in that locale's resources.
     */
    public static final int config_buttonTextAllCaps=0x7f020001;
    public static final int config_cellBroadcastAppLinks=0x7f020002;
    /**
     * Set this to true to enable the platform's auto-power-save modes like doze and
     * app standby.  These are not enabled by default because they require a standard
     * cloud-to-device messaging service for apps to interact correctly with the modes
     * (such as to be able to deliver an instant message to the device even when it is
     * dozing).  This should be enabled if you have such services and expect apps to
     * correctly use them when installed on your device.  Otherwise, keep this disabled
     * so that applications can still use their own mechanisms.
     */
    public static final int config_enableAutoPowerModes=0x7f020003;
    /**
     * Enable lockscreen rotation by default
     */
    public static final int config_enableLockScreenRotation=0x7f020004;
    /**
     * Whether Multiuser UI should be shown
     */
    public static final int config_enableMultiUserUI=0x7f020005;
    public static final int config_intrusiveNotificationLed=0x7f020006;
    /**
     * Set to true to enable the user switcher on the keyguard.
     */
    public static final int config_keyguardUserSwitcher=0x7f020007;
    public static final int config_smart_battery_available=0x7f020008;
    public static final int config_supportAudioSourceUnprocessed=0x7f020009;
    /**
     * If this is true, long press on power button will be available from a
     * non-interactive state.
     */
    public static final int config_supportLongPressPowerWhenNonInteractive=0x7f02000a;
    /**
     * Whether this device is supporting the camera toggle
     */
    public static final int config_supportsCamToggle=0x7f02000b;
    /**
     * Whether this device is supporting the microphone toggle
     */
    public static final int config_supportsMicToggle=0x7f02000c;
    public static final int config_swipe_up_gesture_setting_available=0x7f02000d;
    public static final int config_unplugTurnsOnScreen=0x7f02000e;
    /**
     * Flag indicating whether round icons should be parsed from the application manifest.
     */
    public static final int config_useRoundIcon=0x7f02000f;
  }
  public static final class color {
    public static final int config_progress_background_tint=0x7f030000;
  }
  public static final class dimen {
    /**
     * Corner radius for bottom sheet system dialogs
     */
    public static final int config_bottomDialogCornerRadius=0x7f040000;
    /**
     * Corner radius of system buttons
     */
    public static final int config_buttonCornerRadius=0x7f040001;
    /**
     * Corner radius of system dialogs
     */
    public static final int config_dialogCornerRadius=0x7f040002;
    /**
     * Corner radius of system progress bars
     */
    public static final int config_progressBarCornerRadius=0x7f040003;
    /**
     * System-provided radius for the background view of app widgets. The resolved value of this resource may change at runtime.
     */
    public static final int system_app_widget_background_radius=0x7f040004;
    /**
     * System-provided radius for inner views on app widgets. The resolved value of this resource may change at runtime.
     */
    public static final int system_app_widget_inner_radius=0x7f040005;
  }
  public static final class drawable {
    public static final int default_wallpaper=0x7f050000;
    public static final int stat_sys_adb=0x7f050001;
  }
  public static final class integer {
    /**
     * Control the behavior when the user presses the power and volume up buttons together.
     * 0 - Nothing
     * 1 - Mute toggle
     * 2 - Global actions menu
     */
    public static final int config_keyChordPowerVolumeUp=0x7f060000;
    /**
     * Control the behavior when the user long presses the power button.
     * 0 - Nothing
     * 1 - Global actions menu
     * 2 - Power off (with confirmation)
     * 3 - Power off (without confirmation)
     * 4 - Go to voice assist
     * 5 - Go to assistant (Settings.Secure.ASSISTANT)
     */
    public static final int config_longPressOnPowerBehavior=0x7f060001;
    /**
     * Maximum number of supported users
     */
    public static final int config_multiuserMaximumUsers=0x7f060002;
  }
  public static final class string {
    /**
     * The package name for the default wellbeing app.
     * This package must be trusted, as it has the permissions to control other applications
     * on the device.
     * Example: "com.android.wellbeing"
     */
    public static final int config_defaultWellbeingPackage=0x7f070000;
    /**
     * Flag indicating which package name can access DeviceConfig table
     */
    public static final int config_deviceConfiguratorPackageName=0x7f070001;
    public static final int config_dozeComponent=0x7f070002;
    /**
     * Set icon mask to circle
     */
    public static final int config_icon_mask=0x7f070003;
    /**
     * Remote server that can provide NTP responses.
     */
    public static final int config_ntpServer=0x7f070004;
    /**
     * Flag indicating which package name can access the persistent data partition
     */
    public static final int config_persistentDataPackageName=0x7f070005;
    /**
     * Wallpaper cropper package. Used as the default cropper if the active launcher doesn't
     * handle wallpaper cropping.
     */
    public static final int config_wallpaperCropperPackage=0x7f070006;
  }
  public static final class xml {
    public static final int config_webview_packages=0x7f080000;
  }
}