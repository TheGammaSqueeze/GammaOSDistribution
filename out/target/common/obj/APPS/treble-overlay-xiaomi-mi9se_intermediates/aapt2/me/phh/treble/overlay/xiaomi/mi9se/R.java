/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.xiaomi.mi9se;

public final class R {
  public static final class array {
    /**
     * Array of desired screen brightness in nits corresponding to the lux values
     * in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
     * config_screenBrightnessMaximumNits, the display brightness is defined as the measured
     * brightness of an all-white image.
     * If this is defined then:
     * - config_autoBrightnessLcdBacklightValues should not be defined
     * - config_screenBrightnessNits must be defined
     * - config_screenBrightnessBacklight must be defined
     * This array should have size one greater than the size of the config_autoBrightnessLevels
     * array. The brightness values must be non-negative and non-decreasing. This must be
     * overridden in platform specific overlays
     */
    public static final int config_autoBrightnessDisplayValuesNits=0x7f010000;
    /**
     * Array of light sensor lux values to define our levels for auto backlight brightness support.
     * The N entries of this array define N + 1 control points as follows:
     * (1-based arrays)
     * Point 1:            (0, value[1]):             lux <= 0
     * Point 2:     (level[1], value[2]):  0        < lux <= level[1]
     * Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
     * ...
     * Point N+1: (level[N], value[N+1]):  level[N] < lux
     * The control points must be strictly increasing.  Each control point
     * corresponds to an entry in the brightness backlight values arrays.
     * For example, if lux == level[1] (first element of the levels array)
     * then the brightness will be determined by value[2] (second element
     * of the brightness values array).
     * Spline interpolation is used to determine the auto-brightness
     * backlight values for lux levels between these control points.
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * Indicate available ColorDisplayManager.COLOR_MODE_xxx.
     */
    public static final int config_availableColorModes=0x7f010002;
    /**
     * An array describing the screen's backlight values corresponding to the brightness
     * values in the config_screenBrightnessNits array.
     * This array should be equal in size to config_screenBrightnessBacklight.
     */
    public static final int config_screenBrightnessBacklight=0x7f010003;
    /**
     * An array of floats describing the screen brightness in nits corresponding to the backlight
     * values in the config_screenBrightnessBacklight array.  On OLED displays these  values
     * should be measured with an all white image while the display is in the fully on state.
     * Note that this value should *not* reflect the maximum brightness value for any high
     * brightness modes but only the maximum brightness value obtainable in a sustainable manner.
     * This array should be equal in size to config_screenBrightnessBacklight
     */
    public static final int config_screenBrightnessNits=0x7f010004;
  }
  public static final class bool {
    /**
     * Flag indicating whether we should enable the automatic brightness.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
    /**
     * Boolean indicating if current platform supports BLE peripheral mode
     */
    public static final int config_bluetooth_le_peripheral_mode_supported=0x7f020001;
    /**
     * Flag specifying whether VoLTE is available on device
     */
    public static final int config_device_volte_available=0x7f020002;
    /**
     * If true, the doze component is not started until after the screen has been
     * turned off and the screen off animation has been performed.
     */
    public static final int config_dozeAfterScreenOffByDefault=0x7f020003;
    /**
     * Control whether the always on display mode is available. This should only be enabled on
     * devices where the display has been tuned to be power efficient in DOZE and/or DOZE_SUSPEND
     * states.
     */
    public static final int config_dozeAlwaysOnDisplayAvailable=0x7f020004;
    /**
     * Enable Night display, which requires HWC 2.0.
     */
    public static final int config_nightDisplayAvailable=0x7f020005;
    /**
     * Boolean indicating whether the HWC setColorTransform function can be performed efficiently
     * in hardware.
     */
    public static final int config_setColorTransformAccelerated=0x7f020006;
    /**
     * Boolean indicating whether the wifi chipset supports background scanning mechanism.
     * This mechanism allows the host to remain in suspend state and the dongle to actively
     * scan and wake the host when a configured SSID is detected by the dongle. This chipset
     * capability can provide power savings when wifi needs to be always kept on.
     */
    public static final int config_wifi_background_scan_support=0x7f020007;
    /**
     * Boolean indicating whether the wifi chipset has dual frequency band support
     */
    public static final int config_wifi_dual_band_support=0x7f020008;
  }
  public static final class dimen {
    /**
     * Radius of the software rounded corners at the bottom of the display in its natural
     * orientation. If zero, the value of rounded_corner_radius is used.
     */
    public static final int rounded_corner_radius_bottom=0x7f030000;
    /**
     * Radius of the software rounded corners at the top of the display in its natural
     * orientation. If zero, the value of rounded_corner_radius is used.
     */
    public static final int rounded_corner_radius_top=0x7f030001;
    /**
     * Height of the status bar
     */
    public static final int status_bar_height=0x7f030002;
    /**
     * Height of the status bar in landscape
     */
    public static final int status_bar_height_landscape=0x7f030003;
    /**
     * Height of the status bar in portrait
     */
    public static final int status_bar_height_portrait=0x7f030004;
  }
  public static final class integer {
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f040000;
    /**
     * Screen brightness used to dim the screen while dozing in a very low power state.
     * May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDoze=0x7f040001;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f040002;
    /**
     * Maximum screen brightness allowed by the power manager.
     * The user is forbidden from setting the brightness above this level.
     */
    public static final int config_screenBrightnessSettingMaximum=0x7f040003;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f040004;
  }
  public static final class string {
    /**
     * ImsService package name to bind to by default. If none is specified in an overlay, an
     * empty string is passed in
     */
    public static final int config_ims_package=0x7f050000;
    public static final int config_mainBuiltInDisplayCutout=0x7f050001;
  }
  public static final class xml {
    public static final int power_profile=0x7f060000;
  }
}