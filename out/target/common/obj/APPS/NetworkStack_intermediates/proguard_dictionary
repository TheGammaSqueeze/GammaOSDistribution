# compiler: R8
# compiler_version: 3.0.41-sc04
# min_api: 29
# pg_map_id: 0ee3fbc
# common_typos_disable
android.net.DataStallReportParcelable -> android.net.DataStallReportParcelable:
    12:12:void <clinit>() -> <clinit>
    5:11:void <init>() -> <init>
    40:59:void readFromParcel(android.os.Parcel) -> readFromParcel
    63:69:java.lang.String toString() -> toString
    26:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.DataStallReportParcelable$1 -> android.net.DataStallReportParcelable$1:
    12:12:void <init>() -> <init>
    12:12:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    15:16:android.net.DataStallReportParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    12:12:java.lang.Object[] newArray(int) -> newArray
    21:21:android.net.DataStallReportParcelable[] newArray(int) -> newArray
android.net.DhcpResultsParcelable -> android.net.DhcpResultsParcelable:
    14:14:void <clinit>() -> <clinit>
    5:9:void <init>() -> <init>
    95:95:int describeContents() -> describeContents
    100:101:int describeContents(java.lang.Object) -> describeContents
    50:78:void readFromParcel(android.os.Parcel) -> readFromParcel
    82:90:java.lang.String toString() -> toString
    28:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.DhcpResultsParcelable$1 -> android.net.DhcpResultsParcelable$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.DhcpResultsParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.DhcpResultsParcelable[] newArray(int) -> newArray
android.net.IIpMemoryStore -> android.net.IIpMemoryStore:
    552:552:void <clinit>() -> <clinit>
android.net.IIpMemoryStore$Stub -> android.net.IIpMemoryStore$Stub:
    64:65:void <init>() -> <init>
    88:234:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.IIpMemoryStoreCallbacks -> android.net.IIpMemoryStoreCallbacks:
    207:207:void <clinit>() -> <clinit>
android.net.IIpMemoryStoreCallbacks$Stub -> android.net.IIpMemoryStoreCallbacks$Stub:
    52:56:android.net.IIpMemoryStoreCallbacks asInterface(android.os.IBinder) -> asInterface
    204:204:android.net.IIpMemoryStoreCallbacks getDefaultImpl() -> getDefaultImpl
android.net.IIpMemoryStoreCallbacks$Stub$Proxy -> android.net.IIpMemoryStoreCallbacks$Stub$Proxy:
    107:111:void <init>(android.os.IBinder) -> <init>
    114:114:android.os.IBinder asBinder() -> asBinder
    165:183:java.lang.String getInterfaceHash() -> getInterfaceHash
    143:161:int getInterfaceVersion() -> getInterfaceVersion
    122:139:void onIpMemoryStoreFetched(android.net.IIpMemoryStore) -> onIpMemoryStoreFetched
android.net.INetd$Stub -> android.net.INetd$Stub:
    4645:4645:void <clinit>() -> <clinit>
    397:401:android.net.INetd asInterface(android.os.IBinder) -> asInterface
    4769:4769:android.net.INetd getDefaultImpl() -> getDefaultImpl
android.net.INetd$Stub$Proxy -> android.net.INetd$Stub$Proxy:
    1755:1759:void <init>(android.os.IBinder) -> <init>
    1762:1762:android.os.IBinder asBinder() -> asBinder
    4246:4272:android.net.MarkMaskParcel getFwmarkForNetwork(int) -> getFwmarkForNetwork
    4623:4641:java.lang.String getInterfaceHash() -> getInterfaceHash
    4601:4619:int getInterfaceVersion() -> getInterfaceVersion
    2129:2151:void interfaceAddAddress(java.lang.String,java.lang.String,int) -> interfaceAddAddress
    3946:3966:void interfaceClearAddrs(java.lang.String) -> interfaceClearAddrs
    3891:3917:void interfaceSetCfg(android.net.InterfaceConfigurationParcel) -> interfaceSetCfg
    3970:3991:void interfaceSetEnableIPv6(java.lang.String,boolean) -> interfaceSetEnableIPv6
    3921:3942:void interfaceSetIPv6PrivacyExtensions(java.lang.String,boolean) -> interfaceSetIPv6PrivacyExtensions
    3995:4016:void interfaceSetMtu(java.lang.String,int) -> interfaceSetMtu
    4095:4115:void registerUnsolicitedEventListener(android.net.INetdUnsolicitedEventListener) -> registerUnsolicitedEventListener
    2666:2687:void setIPv6AddrGenMode(java.lang.String,int) -> setIPv6AddrGenMode
    2210:2234:void setProcSysNet(int,int,java.lang.String,java.lang.String,java.lang.String) -> setProcSysNet
android.net.INetdUnsolicitedEventListener -> android.net.INetdUnsolicitedEventListener:
    591:591:void <clinit>() -> <clinit>
android.net.INetdUnsolicitedEventListener$Stub -> android.net.INetdUnsolicitedEventListener$Stub:
    70:71:void <init>() -> <init>
    94:245:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.INetworkMonitor -> android.net.INetworkMonitor:
    583:583:void <clinit>() -> <clinit>
android.net.INetworkMonitor$Stub -> android.net.INetworkMonitor$Stub:
    70:71:void <init>() -> <init>
    94:228:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.INetworkMonitorCallbacks -> android.net.INetworkMonitorCallbacks:
    521:521:void <clinit>() -> <clinit>
android.net.INetworkMonitorCallbacks$Stub -> android.net.INetworkMonitorCallbacks$Stub:
    76:80:android.net.INetworkMonitorCallbacks asInterface(android.os.IBinder) -> asInterface
    518:518:android.net.INetworkMonitorCallbacks getDefaultImpl() -> getDefaultImpl
android.net.INetworkMonitorCallbacks$Stub$Proxy -> android.net.INetworkMonitorCallbacks$Stub$Proxy:
    219:223:void <init>(android.os.IBinder) -> <init>
    226:226:android.os.IBinder asBinder() -> asBinder
    471:489:java.lang.String getInterfaceHash() -> getInterfaceHash
    449:467:int getInterfaceVersion() -> getInterfaceVersion
    326:342:void hideProvisioningNotification() -> hideProvisioningNotification
    422:445:void notifyCaptivePortalDataChanged(android.net.CaptivePortalData) -> notifyCaptivePortalDataChanged
    395:418:void notifyDataStallSuspected(android.net.DataStallReportParcelable) -> notifyDataStallSuspected
    255:273:void notifyNetworkTested(int,java.lang.String) -> notifyNetworkTested
    368:391:void notifyNetworkTestedWithExtras(android.net.NetworkTestResultParcelable) -> notifyNetworkTestedWithExtras
    277:300:void notifyPrivateDnsConfigResolved(android.net.PrivateDnsConfigParcel) -> notifyPrivateDnsConfigResolved
    346:364:void notifyProbeStatusChanged(int,int) -> notifyProbeStatusChanged
    234:251:void onNetworkMonitorCreated(android.net.INetworkMonitor) -> onNetworkMonitorCreated
    304:322:void showProvisioningNotification(java.lang.String,java.lang.String) -> showProvisioningNotification
android.net.INetworkStackConnector -> android.net.INetworkStackConnector:
    379:379:void <clinit>() -> <clinit>
android.net.INetworkStackConnector$Stub -> android.net.INetworkStackConnector$Stub:
    52:53:void <init>() -> <init>
    76:165:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.INetworkStackStatusCallback -> android.net.INetworkStackStatusCallback:
    207:207:void <clinit>() -> <clinit>
android.net.INetworkStackStatusCallback$Stub -> android.net.INetworkStackStatusCallback$Stub:
    52:56:android.net.INetworkStackStatusCallback asInterface(android.os.IBinder) -> asInterface
    204:204:android.net.INetworkStackStatusCallback getDefaultImpl() -> getDefaultImpl
android.net.INetworkStackStatusCallback$Stub$Proxy -> android.net.INetworkStackStatusCallback$Stub$Proxy:
    107:111:void <init>(android.os.IBinder) -> <init>
    114:114:android.os.IBinder asBinder() -> asBinder
    122:139:void onStatusAvailable(int) -> onStatusAvailable
android.net.InformationElementParcelable -> android.net.InformationElementParcelable:
    9:9:void <clinit>() -> <clinit>
    5:7:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InformationElementParcelable$1 -> android.net.InformationElementParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.InformationElementParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.InformationElementParcelable[] newArray(int) -> newArray
android.net.InitialConfigurationParcelable -> android.net.InitialConfigurationParcelable:
    11:11:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    69:70:int describeContents() -> describeContents
    75:84:int describeContents(java.lang.Object) -> describeContents
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    59:64:java.lang.String toString() -> toString
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InitialConfigurationParcelable$1 -> android.net.InitialConfigurationParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.InitialConfigurationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.InitialConfigurationParcelable[] newArray(int) -> newArray
android.net.InterfaceConfigurationParcel -> android.net.InterfaceConfigurationParcel:
    13:13:void <clinit>() -> <clinit>
    6:11:void <init>() -> <init>
    41:60:void readFromParcel(android.os.Parcel) -> readFromParcel
    27:37:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InterfaceConfigurationParcel$1 -> android.net.InterfaceConfigurationParcel$1:
    13:13:void <init>() -> <init>
    13:13:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    16:17:android.net.InterfaceConfigurationParcel createFromParcel(android.os.Parcel) -> createFromParcel
    13:13:java.lang.Object[] newArray(int) -> newArray
    22:22:android.net.InterfaceConfigurationParcel[] newArray(int) -> newArray
android.net.IpMemoryStoreClient -> android.net.IpMemoryStoreClient:
    46:48:void <init>(android.content.Context) -> <init>
    60:60:void ignoringRemoteException(android.net.IpMemoryStoreClient$ThrowingRunnable) -> ignoringRemoteException
    65:67:void ignoringRemoteException(java.lang.String,android.net.IpMemoryStoreClient$ThrowingRunnable) -> ignoringRemoteException
    188:189:void lambda$retrieveNetworkAttributes$12(android.net.IIpMemoryStore,java.lang.String,android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> lambda$retrieveNetworkAttributes$12
    187:187:void lambda$retrieveNetworkAttributes$13(java.lang.String,android.net.ipmemorystore.OnNetworkAttributesRetrievedListener,android.net.IIpMemoryStore) -> lambda$retrieveNetworkAttributes$13
    192:192:void lambda$retrieveNetworkAttributes$14(android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> lambda$retrieveNetworkAttributes$14
    92:93:void lambda$storeNetworkAttributes$0(android.net.IIpMemoryStore,java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.OnStatusListener) -> lambda$storeNetworkAttributes$0
    91:91:void lambda$storeNetworkAttributes$1(java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.OnStatusListener,android.net.IIpMemoryStore) -> lambda$storeNetworkAttributes$1
    97:97:void lambda$storeNetworkAttributes$2(android.net.ipmemorystore.OnStatusListener) -> lambda$storeNetworkAttributes$2
    187:191:void retrieveNetworkAttributes(java.lang.String,android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> retrieveNetworkAttributes
    91:96:void storeNetworkAttributes(java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.OnStatusListener) -> storeNetworkAttributes
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda0 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda0:
    android.net.ipmemorystore.OnStatusListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.f$3 -> f$3
    android.net.ipmemorystore.NetworkAttributes android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.f$2 -> f$2
    android.net.IIpMemoryStore android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.f$0 -> f$0
    java.lang.String android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.f$1 -> f$1
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.<init>(android.net.IIpMemoryStore,java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.OnStatusListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$053f356f38516cbbb467cc8456ddbc009a742231d2c5d4ee492756342ea4d9d1$0.run() -> run
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda1 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda1:
    android.net.ipmemorystore.OnNetworkAttributesRetrievedListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$8f5957a7d256800fa475c65c074bd3a324a2bff9a8694601fcbef4af62750df3$0.f$2 -> f$2
    android.net.IIpMemoryStore android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$8f5957a7d256800fa475c65c074bd3a324a2bff9a8694601fcbef4af62750df3$0.f$0 -> f$0
    java.lang.String android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$8f5957a7d256800fa475c65c074bd3a324a2bff9a8694601fcbef4af62750df3$0.f$1 -> f$1
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$8f5957a7d256800fa475c65c074bd3a324a2bff9a8694601fcbef4af62750df3$0.<init>(android.net.IIpMemoryStore,java.lang.String,android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$3$8f5957a7d256800fa475c65c074bd3a324a2bff9a8694601fcbef4af62750df3$0.run() -> run
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda2 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda2:
    android.net.ipmemorystore.OnNetworkAttributesRetrievedListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$1.f$0 -> f$0
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$1.<init>(android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$1.run() -> run
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda3 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda3:
    android.net.ipmemorystore.OnStatusListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$1.f$0 -> f$0
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$1.<init>(android.net.ipmemorystore.OnStatusListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$1.run() -> run
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda4 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda4:
    android.net.ipmemorystore.OnStatusListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.f$3 -> f$3
    android.net.IpMemoryStoreClient android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.f$0 -> f$0
    android.net.ipmemorystore.NetworkAttributes android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.f$2 -> f$2
    java.lang.String android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.f$1 -> f$1
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.<init>(android.net.IpMemoryStoreClient,java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.OnStatusListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$fc796d939fed5f4ca2ccc7b14956af9599ef7686c3ca07cc640a9d0c5e2b2d12$0.accept(java.lang.Object) -> accept
android.net.IpMemoryStoreClient$$ExternalSyntheticLambda5 -> android.net.IpMemoryStoreClient$$ExternalSyntheticLambda5:
    android.net.ipmemorystore.OnNetworkAttributesRetrievedListener android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$0.f$2 -> f$2
    android.net.IpMemoryStoreClient android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$0.f$0 -> f$0
    java.lang.String android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$0.f$1 -> f$1
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$0.<init>(android.net.IpMemoryStoreClient,java.lang.String,android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> <init>
    void android.net.IpMemoryStoreClient$$InternalSyntheticLambda$2$d8086261de5afaef05d29bcb20a9be39ded42de7f750a4516fcdd45379c2dec7$0.accept(java.lang.Object) -> accept
android.net.Layer2InformationParcelable -> android.net.Layer2InformationParcelable:
    10:10:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    75:75:int describeContents() -> describeContents
    80:81:int describeContents(java.lang.Object) -> describeContents
    42:62:void readFromParcel(android.os.Parcel) -> readFromParcel
    66:70:java.lang.String toString() -> toString
    24:38:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.Layer2InformationParcelable$1 -> android.net.Layer2InformationParcelable$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.Layer2InformationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.Layer2InformationParcelable[] newArray(int) -> newArray
android.net.Layer2PacketParcelable -> android.net.Layer2PacketParcelable:
    9:9:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    70:70:int describeContents() -> describeContents
    75:76:int describeContents(java.lang.Object) -> describeContents
    40:58:void readFromParcel(android.os.Parcel) -> readFromParcel
    62:65:java.lang.String toString() -> toString
    23:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.Layer2PacketParcelable$1 -> android.net.Layer2PacketParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.Layer2PacketParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.Layer2PacketParcelable[] newArray(int) -> newArray
android.net.MarkMaskParcel -> android.net.MarkMaskParcel:
    10:10:void <clinit>() -> <clinit>
    6:9:void <init>() -> <init>
    35:48:void readFromParcel(android.os.Parcel) -> readFromParcel
    24:31:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.MarkMaskParcel$1 -> android.net.MarkMaskParcel$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.MarkMaskParcel createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.MarkMaskParcel[] newArray(int) -> newArray
android.net.NativeNetworkConfig -> android.net.NativeNetworkConfig:
    44:44:void <clinit>() -> <clinit>
    69:74:void <init>(int,int,int,boolean,int) -> <init>
    6:6:android.net.NativeNetworkConfig access$000(android.os.Parcel) -> access$000
    125:131:boolean equals(java.lang.Object) -> equals
    137:137:int hashCode() -> hashCode
    78:108:android.net.NativeNetworkConfig internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    113:119:java.lang.String toString() -> toString
    56:66:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NativeNetworkConfig$1 -> android.net.NativeNetworkConfig$1:
    44:44:void <init>() -> <init>
    44:44:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    47:47:android.net.NativeNetworkConfig createFromParcel(android.os.Parcel) -> createFromParcel
    44:44:java.lang.Object[] newArray(int) -> newArray
    51:51:android.net.NativeNetworkConfig[] newArray(int) -> newArray
android.net.NativeNetworkConfig$Builder -> android.net.NativeNetworkConfig$Builder:
    13:35:void <init>() -> <init>
    41:41:android.net.NativeNetworkConfig build() -> build
    17:17:android.net.NativeNetworkConfig$Builder setNetId(int) -> setNetId
    22:22:android.net.NativeNetworkConfig$Builder setNetworkType(int) -> setNetworkType
    27:27:android.net.NativeNetworkConfig$Builder setPermission(int) -> setPermission
    32:32:android.net.NativeNetworkConfig$Builder setSecure(boolean) -> setSecure
    37:37:android.net.NativeNetworkConfig$Builder setVpnType(int) -> setVpnType
android.net.NattKeepalivePacketDataParcelable -> android.net.NattKeepalivePacketDataParcelable:
    11:11:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    59:64:java.lang.String toString() -> toString
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NattKeepalivePacketDataParcelable$1 -> android.net.NattKeepalivePacketDataParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.NattKeepalivePacketDataParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.NattKeepalivePacketDataParcelable[] newArray(int) -> newArray
android.net.NetworkStackIpMemoryStore -> android.net.NetworkStackIpMemoryStore:
    37:38:void <init>(android.content.Context,android.net.IIpMemoryStore) -> <init>
    43:43:void runWhenServiceReady(java.util.function.Consumer) -> runWhenServiceReady
android.net.NetworkTestResultParcelable -> android.net.NetworkTestResultParcelable:
    12:12:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    40:59:void readFromParcel(android.os.Parcel) -> readFromParcel
    63:69:java.lang.String toString() -> toString
    26:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NetworkTestResultParcelable$1 -> android.net.NetworkTestResultParcelable$1:
    12:12:void <init>() -> <init>
    12:12:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    15:16:android.net.NetworkTestResultParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    12:12:java.lang.Object[] newArray(int) -> newArray
    21:21:android.net.NetworkTestResultParcelable[] newArray(int) -> newArray
android.net.PrivateDnsConfigParcel -> android.net.PrivateDnsConfigParcel:
    9:9:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.PrivateDnsConfigParcel$1 -> android.net.PrivateDnsConfigParcel$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.PrivateDnsConfigParcel createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.PrivateDnsConfigParcel[] newArray(int) -> newArray
android.net.ProvisioningConfigurationParcelable -> android.net.ProvisioningConfigurationParcelable:
    23:23:void <clinit>() -> <clinit>
    5:19:void <init>() -> <init>
    195:201:int describeContents() -> describeContents
    206:214:int describeContents(java.lang.Object) -> describeContents
    98:169:void readFromParcel(android.os.Parcel) -> readFromParcel
    173:190:java.lang.String toString() -> toString
    37:94:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ProvisioningConfigurationParcelable$1 -> android.net.ProvisioningConfigurationParcelable$1:
    23:23:void <init>() -> <init>
    23:23:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    26:27:android.net.ProvisioningConfigurationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    23:23:java.lang.Object[] newArray(int) -> newArray
    32:32:android.net.ProvisioningConfigurationParcelable[] newArray(int) -> newArray
android.net.RouteInfoParcel -> android.net.RouteInfoParcel:
    11:11:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.RouteInfoParcel$1 -> android.net.RouteInfoParcel$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.RouteInfoParcel createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.RouteInfoParcel[] newArray(int) -> newArray
android.net.ScanResultInfoParcelable -> android.net.ScanResultInfoParcelable:
    10:10:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    64:64:int describeContents() -> describeContents
    69:78:int describeContents(java.lang.Object) -> describeContents
    36:51:void readFromParcel(android.os.Parcel) -> readFromParcel
    55:59:java.lang.String toString() -> toString
    24:32:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ScanResultInfoParcelable$1 -> android.net.ScanResultInfoParcelable$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.ScanResultInfoParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.ScanResultInfoParcelable[] newArray(int) -> newArray
android.net.TcpKeepalivePacketDataParcelable -> android.net.TcpKeepalivePacketDataParcelable:
    17:17:void <clinit>() -> <clinit>
    5:16:void <init>() -> <init>
    50:79:void readFromParcel(android.os.Parcel) -> readFromParcel
    83:94:java.lang.String toString() -> toString
    31:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TcpKeepalivePacketDataParcelable$1 -> android.net.TcpKeepalivePacketDataParcelable$1:
    17:17:void <init>() -> <init>
    17:17:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    20:21:android.net.TcpKeepalivePacketDataParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    17:17:java.lang.Object[] newArray(int) -> newArray
    26:26:android.net.TcpKeepalivePacketDataParcelable[] newArray(int) -> newArray
android.net.TetherConfigParcel -> android.net.TetherConfigParcel:
    10:10:void <clinit>() -> <clinit>
    6:8:void <init>() -> <init>
    35:48:void readFromParcel(android.os.Parcel) -> readFromParcel
    24:31:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherConfigParcel$1 -> android.net.TetherConfigParcel$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.TetherConfigParcel createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.TetherConfigParcel[] newArray(int) -> newArray
android.net.TetherOffloadRuleParcel -> android.net.TetherOffloadRuleParcel:
    15:15:void <clinit>() -> <clinit>
    6:14:void <init>() -> <init>
    45:68:void readFromParcel(android.os.Parcel) -> readFromParcel
    29:41:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherOffloadRuleParcel$1 -> android.net.TetherOffloadRuleParcel$1:
    15:15:void <init>() -> <init>
    15:15:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    18:19:android.net.TetherOffloadRuleParcel createFromParcel(android.os.Parcel) -> createFromParcel
    15:15:java.lang.Object[] newArray(int) -> newArray
    24:24:android.net.TetherOffloadRuleParcel[] newArray(int) -> newArray
android.net.TetherStatsParcel -> android.net.TetherStatsParcel:
    14:14:void <clinit>() -> <clinit>
    6:13:void <init>() -> <init>
    43:64:void readFromParcel(android.os.Parcel) -> readFromParcel
    28:39:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherStatsParcel$1 -> android.net.TetherStatsParcel$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.TetherStatsParcel createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.TetherStatsParcel[] newArray(int) -> newArray
android.net.UidRangeParcel -> android.net.UidRangeParcel:
    26:26:void <clinit>() -> <clinit>
    48:50:void <init>(int,int) -> <init>
    6:6:android.net.UidRangeParcel access$000(android.os.Parcel) -> access$000
    86:89:boolean equals(java.lang.Object) -> equals
    95:95:int hashCode() -> hashCode
    54:72:android.net.UidRangeParcel internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    77:80:java.lang.String toString() -> toString
    38:45:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.UidRangeParcel$1 -> android.net.UidRangeParcel$1:
    26:26:void <init>() -> <init>
    26:26:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    29:29:android.net.UidRangeParcel createFromParcel(android.os.Parcel) -> createFromParcel
    26:26:java.lang.Object[] newArray(int) -> newArray
    33:33:android.net.UidRangeParcel[] newArray(int) -> newArray
android.net.UidRangeParcel$Builder -> android.net.UidRangeParcel$Builder:
    10:17:void <init>() -> <init>
    23:23:android.net.UidRangeParcel build() -> build
    14:14:android.net.UidRangeParcel$Builder setStart(int) -> setStart
    19:19:android.net.UidRangeParcel$Builder setStop(int) -> setStop
android.net.apf.ApfFilter -> android.net.apf.ApfFilter:
    311:327:void <clinit>() -> <clinit>
    367:1206:void <init>(android.content.Context,android.net.apf.ApfFilter$ApfConfiguration,android.net.util.InterfaceParams,android.net.ip.IpClient$IpClientCallbacksWrapper,android.net.metrics.IpConnectivityLog) -> <init>
    103:103:void access$000(android.net.apf.ApfFilter,java.lang.String) -> access$000
    103:103:int access$100(android.net.apf.ApfFilter) -> access$100
    103:103:long access$1000(android.net.apf.ApfFilter) -> access$1000
    103:103:void access$1100(android.net.apf.ApfFilter,android.net.apf.ApfGenerator,android.net.apf.ApfFilter$Counter) -> access$1100
    103:103:java.lang.String access$1200(android.net.apf.ApfFilter) -> access$1200
    103:103:byte[] access$1400(byte[][]) -> access$1400
    103:103:int access$200(android.net.apf.ApfFilter) -> access$200
    103:103:android.net.apf.ApfCapabilities access$300(android.net.apf.ApfFilter) -> access$300
    103:103:android.net.metrics.IpConnectivityLog access$400(android.net.apf.ApfFilter) -> access$400
    103:103:void access$500(android.net.apf.ApfFilter,long) -> access$500
    103:103:int access$600(java.nio.ByteBuffer,int) -> access$600
    103:103:long access$700(java.nio.ByteBuffer,int) -> access$700
    103:103:int access$800(java.nio.ByteBuffer,int) -> access$800
    103:103:int access$900(android.net.apf.ApfFilter) -> access$900
    1896:1905:void addNattKeepalivePacketFilter(int,android.net.NattKeepalivePacketDataParcelable) -> addNattKeepalivePacketFilter
    1876:1885:void addTcpKeepalivePacketFilter(int,android.net.TcpKeepalivePacketDataParcelable) -> addTcpKeepalivePacketFilter
    2054:2057:int bytesToBEInt(byte[]) -> bytesToBEInt
    2062:2069:byte[] concatArrays(byte[][]) -> concatArrays
    1921:1929:long counterValue(byte[],android.net.apf.ApfFilter$Counter) -> counterValue
    500:500:long currentTimeSeconds() -> currentTimeSeconds
    1936:2029:void dump(android.net.networkstack.util.IndentingPrintWriter) -> dump
    1594:1614:void emitEpilogue(android.net.apf.ApfGenerator) -> emitEpilogue
    1509:1580:android.net.apf.ApfGenerator emitPrologueLocked() -> emitPrologueLocked
    437:461:int[] filterEthTypeBlackList(int[]) -> filterEthTypeBlackList
    1841:1845:android.net.LinkAddress findIPv4LinkAddress(android.net.LinkProperties) -> findIPv4LinkAddress
    1238:1274:void generateArpFilterLocked(android.net.apf.ApfGenerator) -> generateArpFilterLocked
    1300:1362:void generateIPv4FilterLocked(android.net.apf.ApfGenerator) -> generateIPv4FilterLocked
    1419:1478:void generateIPv6FilterLocked(android.net.apf.ApfGenerator) -> generateIPv6FilterLocked
    1367:1383:void generateKeepaliveFilters(android.net.apf.ApfGenerator,java.lang.Class,int,int,java.lang.String) -> generateKeepaliveFilters
    1387:1387:void generateV4KeepaliveFilters(android.net.apf.ApfGenerator) -> generateV4KeepaliveFilters
    1393:1393:void generateV4NattKeepaliveFilters(android.net.apf.ApfGenerator) -> generateV4NattKeepaliveFilters
    1482:1482:void generateV6KeepaliveFilters(android.net.apf.ApfGenerator) -> generateV6KeepaliveFilters
    2042:2042:int getUint16(java.nio.ByteBuffer,int) -> getUint16
    2046:2046:long getUint32(java.nio.ByteBuffer,int) -> getUint32
    2050:2050:int getUint8(java.nio.ByteBuffer,int) -> getUint8
    432:432:long getUniqueNumberLocked() -> getUniqueNumberLocked
    1623:1685:void installNewProgramLocked() -> installNewProgramLocked
    2034:2034:int ipv4BroadcastAddress(byte[],int) -> ipv4BroadcastAddress
    1368:1368:boolean lambda$generateKeepaliveFilters$0(java.lang.Class,android.net.apf.ApfFilter$KeepalivePacket) -> lambda$generateKeepaliveFilters$0
    427:427:void log(java.lang.String) -> log
    1690:1700:void logApfProgramEventLocked(long) -> logApfProgramEventLocked
    1792:1809:android.net.apf.ApfFilter maybeCreate(android.content.Context,android.net.apf.ApfFilter$ApfConfiguration,android.net.util.InterfaceParams,android.net.ip.IpClient$IpClientCallbacksWrapper) -> maybeCreate
    182:183:void maybeSetupCounter(android.net.apf.ApfGenerator,android.net.apf.ApfFilter$Counter) -> maybeSetupCounter
    472:494:void maybeStartFilter() -> maybeStartFilter
    1737:1782:android.net.apf.ApfFilter$ProcessRaResult processRa(byte[],int) -> processRa
    1717:1720:void purgeExpiredRasLocked() -> purgeExpiredRasLocked
    1913:1916:void removeKeepalivePacketFilter(int) -> removeKeepalivePacketFilter
    423:424:void setDataSnapshot(byte[]) -> setDataSnapshot
    1833:1836:void setDozeMode(boolean) -> setDozeMode
    1856:1865:void setLinkProperties(android.net.LinkProperties) -> setLinkProperties
    1823:1829:void setMulticastFilter(boolean) -> setMulticastFilter
    1707:1708:boolean shouldInstallnewProgram() -> shouldInstallnewProgram
    1813:1820:void shutdown() -> shutdown
android.net.apf.ApfFilter$$ExternalSyntheticLambda0 -> android.net.apf.ApfFilter$$ExternalSyntheticLambda0:
    java.lang.Class android.net.apf.ApfFilter$$InternalSyntheticLambda$0$63caf9e1919e6bfa41f4664139708a3da745e28ed0f76bcbb532fd334aa199c7$0.f$0 -> f$0
    void android.net.apf.ApfFilter$$InternalSyntheticLambda$0$63caf9e1919e6bfa41f4664139708a3da745e28ed0f76bcbb532fd334aa199c7$0.<init>(java.lang.Class) -> <init>
    boolean android.net.apf.ApfFilter$$InternalSyntheticLambda$0$63caf9e1919e6bfa41f4664139708a3da745e28ed0f76bcbb532fd334aa199c7$0.test(java.lang.Object) -> test
android.net.apf.ApfFilter$$ExternalSyntheticLambda1 -> android.net.apf.ApfFilter$$ExternalSyntheticLambda1:
    android.net.apf.ApfFilter$$InternalSyntheticLambda$0$b49d18c0586a1a7adac74b7c8a823ea71c098f3780531e9433b612377ce7ec85$0 android.net.apf.ApfFilter$$InternalSyntheticLambda$0$b49d18c0586a1a7adac74b7c8a823ea71c098f3780531e9433b612377ce7ec85$0.INSTANCE -> INSTANCE
    void android.net.apf.ApfFilter$$InternalSyntheticLambda$0$b49d18c0586a1a7adac74b7c8a823ea71c098f3780531e9433b612377ce7ec85$0.<clinit>() -> <clinit>
    void android.net.apf.ApfFilter$$InternalSyntheticLambda$0$b49d18c0586a1a7adac74b7c8a823ea71c098f3780531e9433b612377ce7ec85$0.<init>() -> <init>
    int android.net.apf.ApfFilter$$InternalSyntheticLambda$0$b49d18c0586a1a7adac74b7c8a823ea71c098f3780531e9433b612377ce7ec85$0.applyAsInt(java.lang.Object) -> applyAsInt
android.net.apf.ApfFilter$1 -> android.net.apf.ApfFilter$1:
    367:367:void <init>(android.net.apf.ApfFilter) -> <init>
    370:375:void onReceive(android.content.Context,android.content.Intent) -> onReceive
android.net.apf.ApfFilter$2 -> android.net.apf.ApfFilter$2:
    236:236:void <clinit>() -> <clinit>
android.net.apf.ApfFilter$ApfConfiguration -> android.net.apf.ApfFilter$ApfConfiguration:
    106:106:void <init>() -> <init>
android.net.apf.ApfFilter$Counter -> android.net.apf.ApfFilter$Counter:
    131:164:void <clinit>() -> <clinit>
    132:132:void <init>(java.lang.String,int) -> <init>
    169:169:int offset() -> offset
    174:174:int totalSize() -> totalSize
    131:131:android.net.apf.ApfFilter$Counter valueOf(java.lang.String) -> valueOf
    131:131:android.net.apf.ApfFilter$Counter[] values() -> values
android.net.apf.ApfFilter$InvalidRaException -> android.net.apf.ApfFilter$InvalidRaException:
    505:505:void <init>(java.lang.String) -> <init>
android.net.apf.ApfFilter$KeepalivePacket -> android.net.apf.ApfFilter$KeepalivePacket:
    946:946:void <init>() -> <init>
    946:946:void <init>(android.net.apf.ApfFilter$1) -> <init>
android.net.apf.ApfFilter$NattKeepaliveResponse -> android.net.apf.ApfFilter$NattKeepaliveResponse:
    981:986:void <init>(android.net.apf.ApfFilter,android.net.NattKeepalivePacketDataParcelable) -> <init>
    999:1025:void generateFilterLocked(android.net.apf.ApfGenerator) -> generateFilterLocked
    990:994:byte[] generatePortFingerprint(int,int) -> generatePortFingerprint
    1030:1034:java.lang.String toString() -> toString
android.net.apf.ApfFilter$NattKeepaliveResponse$NattKeepaliveResponseData -> android.net.apf.ApfFilter$NattKeepaliveResponse$NattKeepaliveResponseData:
    969:973:void <init>(android.net.apf.ApfFilter$NattKeepaliveResponse,android.net.NattKeepalivePacketDataParcelable) -> <init>
android.net.apf.ApfFilter$PacketSection -> android.net.apf.ApfFilter$PacketSection:
    530:535:void <init>(int,int,android.net.apf.ApfFilter$PacketSection$Type,int,long) -> <init>
    539:542:java.lang.String toString() -> toString
android.net.apf.ApfFilter$PacketSection$Type -> android.net.apf.ApfFilter$PacketSection$Type:
    513:516:void <clinit>() -> <clinit>
    513:513:void <init>(java.lang.String,int) -> <init>
    513:513:android.net.apf.ApfFilter$PacketSection$Type valueOf(java.lang.String) -> valueOf
    513:513:android.net.apf.ApfFilter$PacketSection$Type[] values() -> values
android.net.apf.ApfFilter$ProcessRaResult -> android.net.apf.ApfFilter$ProcessRaResult:
    115:121:void <clinit>() -> <clinit>
    115:115:void <init>(java.lang.String,int) -> <init>
    115:115:android.net.apf.ApfFilter$ProcessRaResult valueOf(java.lang.String) -> valueOf
    115:115:android.net.apf.ApfFilter$ProcessRaResult[] values() -> values
android.net.apf.ApfFilter$Ra -> android.net.apf.ApfFilter$Ra:
    583:863:void <init>(android.net.apf.ApfFilter,byte[],int) -> <init>
    612:620:java.lang.String IPv6AddresstoString(int) -> IPv6AddresstoString
    749:752:long add4ByteLifetimeOption(int,int) -> add4ByteLifetimeOption
    725:727:void addIgnoreSection(int) -> addIgnoreSection
    737:740:void addLifetimeSection(int,int,long) -> addLifetimeSection
    707:709:void addMatchSection(int) -> addMatchSection
    717:717:void addMatchUntil(int) -> addMatchUntil
    894:894:long currentLifetime() -> currentLifetime
    907:940:long generateFilterLocked(android.net.apf.ApfGenerator) -> generateFilterLocked
    604:604:java.lang.String getLastMatchingPacket() -> getLastMatchingPacket
    900:900:boolean isExpired() -> isExpired
    766:767:boolean isRelevantLifetime(android.net.apf.ApfFilter$PacketSection) -> isRelevantLifetime
    868:873:boolean matches(byte[],int) -> matches
    883:885:long minLifetime() -> minLifetime
    633:637:void prefixOptionToString(java.lang.StringBuffer,int) -> prefixOptionToString
    641:649:void rdnssOptionToString(java.lang.StringBuffer,int) -> rdnssOptionToString
    653:670:void rioOptionToString(java.lang.StringBuffer,int) -> rioOptionToString
    761:762:boolean shouldIgnoreLifetime(int,long) -> shouldIgnoreLifetime
    675:689:java.lang.String toString() -> toString
android.net.apf.ApfFilter$ReceiveThread -> android.net.apf.ApfFilter$ReceiveThread:
    195:209:void <init>(android.net.apf.ApfFilter,java.io.FileDescriptor) -> <init>
    213:215:void halt() -> halt
    260:276:void logStats() -> logStats
    220:231:void run() -> run
    235:254:void updateStats(android.net.apf.ApfFilter$ProcessRaResult) -> updateStats
android.net.apf.ApfFilter$TcpKeepaliveAck -> android.net.apf.ApfFilter$TcpKeepaliveAck:
    1066:1069:void <init>(android.net.apf.ApfFilter$TcpKeepaliveAck$TcpKeepaliveAckData,byte[]) -> <init>
    1074:1080:byte[] generatePortSeqAckFingerprint(int,int,int,int) -> generatePortSeqAckFingerprint
    1085:1091:java.lang.String toString() -> toString
android.net.apf.ApfFilter$TcpKeepaliveAck$TcpKeepaliveAckData -> android.net.apf.ApfFilter$TcpKeepaliveAck$TcpKeepaliveAckData:
    1052:1058:void <init>(android.net.TcpKeepalivePacketDataParcelable) -> <init>
android.net.apf.ApfFilter$TcpKeepaliveAckV4 -> android.net.apf.ApfFilter$TcpKeepaliveAckV4:
    1106:1106:void <init>(android.net.apf.ApfFilter,android.net.TcpKeepalivePacketDataParcelable) -> <init>
    1108:1109:void <init>(android.net.apf.ApfFilter,android.net.apf.ApfFilter$TcpKeepaliveAck$TcpKeepaliveAckData) -> <init>
    1114:1143:void generateFilterLocked(android.net.apf.ApfGenerator) -> generateFilterLocked
android.net.apf.ApfFilter$TcpKeepaliveAckV6 -> android.net.apf.ApfFilter$TcpKeepaliveAckV6:
    1149:1149:void <init>(android.net.apf.ApfFilter,android.net.TcpKeepalivePacketDataParcelable) -> <init>
    1151:1152:void <init>(android.net.apf.ApfFilter,android.net.apf.ApfFilter$TcpKeepaliveAck$TcpKeepaliveAckData) -> <init>
    1157:1157:void generateFilterLocked(android.net.apf.ApfGenerator) -> generateFilterLocked
android.net.apf.ApfGenerator -> android.net.apf.ApfGenerator:
    363:377:void <init>(int) -> <init>
    30:30:java.util.HashMap access$000(android.net.apf.ApfGenerator) -> access$000
    30:30:android.net.apf.ApfGenerator$Instruction access$100(android.net.apf.ApfGenerator) -> access$100
    30:30:android.net.apf.ApfGenerator$Instruction access$200(android.net.apf.ApfGenerator) -> access$200
    505:507:android.net.apf.ApfGenerator addAdd(int) -> addAdd
    576:577:android.net.apf.ApfGenerator addAddR1() -> addAddR1
    535:537:android.net.apf.ApfGenerator addAnd(int) -> addAnd
    394:397:void addInstruction(android.net.apf.ApfGenerator$Instruction) -> addInstruction
    426:428:android.net.apf.ApfGenerator addJump(java.lang.String) -> addJump
    760:767:android.net.apf.ApfGenerator addJumpIfBytesNotEqual(android.net.apf.ApfGenerator$Register,byte[],java.lang.String) -> addJumpIfBytesNotEqual
    692:695:android.net.apf.ApfGenerator addJumpIfR0AnyBitsSet(int,java.lang.String) -> addJumpIfR0AnyBitsSet
    644:647:android.net.apf.ApfGenerator addJumpIfR0Equals(int,java.lang.String) -> addJumpIfR0Equals
    668:671:android.net.apf.ApfGenerator addJumpIfR0GreaterThan(int,java.lang.String) -> addJumpIfR0GreaterThan
    680:683:android.net.apf.ApfGenerator addJumpIfR0LessThan(int,java.lang.String) -> addJumpIfR0LessThan
    656:659:android.net.apf.ApfGenerator addJumpIfR0NotEquals(int,java.lang.String) -> addJumpIfR0NotEquals
    448:450:android.net.apf.ApfGenerator addLoad16(android.net.apf.ApfGenerator$Register,int) -> addLoad16
    483:485:android.net.apf.ApfGenerator addLoad16Indexed(android.net.apf.ApfGenerator$Register,int) -> addLoad16Indexed
    459:461:android.net.apf.ApfGenerator addLoad32(android.net.apf.ApfGenerator$Register,int) -> addLoad32
    437:439:android.net.apf.ApfGenerator addLoad8(android.net.apf.ApfGenerator$Register,int) -> addLoad8
    471:473:android.net.apf.ApfGenerator addLoad8Indexed(android.net.apf.ApfGenerator$Register,int) -> addLoad8Indexed
    850:853:android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator$Register,int) -> addLoadData
    778:782:android.net.apf.ApfGenerator addLoadFromMemory(android.net.apf.ApfGenerator$Register,int) -> addLoadFromMemory
    633:635:android.net.apf.ApfGenerator addLoadImmediate(android.net.apf.ApfGenerator$Register,int) -> addLoadImmediate
    815:817:android.net.apf.ApfGenerator addNeg(android.net.apf.ApfGenerator$Register) -> addNeg
    566:568:android.net.apf.ApfGenerator addRightShift(int) -> addRightShift
    865:868:android.net.apf.ApfGenerator addStoreData(android.net.apf.ApfGenerator$Register,int) -> addStoreData
    825:827:android.net.apf.ApfGenerator addSwap() -> addSwap
    416:418:android.net.apf.ApfGenerator defineLabel(java.lang.String) -> defineLabel
    902:933:byte[] generate() -> generate
    890:890:int programLengthOverEstimate() -> programLengthOverEstimate
    388:389:void requireApfVersion(int) -> requireApfVersion
    878:880:int updateInstructionOffsets() -> updateInstructionOffsets
android.net.apf.ApfGenerator$ExtendedOpcodes -> android.net.apf.ApfGenerator$ExtendedOpcodes:
    73:79:void <clinit>() -> <clinit>
    83:84:void <init>(java.lang.String,int,int) -> <init>
    73:73:android.net.apf.ApfGenerator$ExtendedOpcodes valueOf(java.lang.String) -> valueOf
    73:73:android.net.apf.ApfGenerator$ExtendedOpcodes[] values() -> values
android.net.apf.ApfGenerator$IllegalInstructionException -> android.net.apf.ApfGenerator$IllegalInstructionException:
    36:36:void <init>(java.lang.String) -> <init>
android.net.apf.ApfGenerator$Instruction -> android.net.apf.ApfGenerator$Instruction:
    114:116:void <init>(android.net.apf.ApfGenerator,android.net.apf.ApfGenerator$Opcodes,android.net.apf.ApfGenerator$Register) -> <init>
    120:120:void <init>(android.net.apf.ApfGenerator,android.net.apf.ApfGenerator$Opcodes) -> <init>
    271:284:int calculateTargetLabelOffset() -> calculateTargetLabelOffset
    236:253:void generate(byte[]) -> generate
    203:203:byte generateImmSizeField() -> generateImmSizeField
    212:213:byte generateInstructionByte() -> generateInstructionByte
    266:266:byte generatedImmSize() -> generatedImmSize
    155:158:void setCompareBytes(byte[]) -> setCompareBytes
    124:127:void setImm(int,boolean) -> setImm
    139:146:void setLabel(java.lang.String) -> setLabel
    135:135:void setSignedImm(int) -> setSignedImm
    150:151:void setTargetLabel(java.lang.String) -> setTargetLabel
    131:131:void setUnsignedImm(int) -> setUnsignedImm
    187:196:boolean shrink() -> shrink
    165:176:int size() -> size
    226:227:int writeValue(int,byte[],int) -> writeValue
android.net.apf.ApfGenerator$Opcodes -> android.net.apf.ApfGenerator$Opcodes:
    39:63:void <clinit>() -> <clinit>
    67:68:void <init>(java.lang.String,int,int) -> <init>
    39:39:android.net.apf.ApfGenerator$Opcodes valueOf(java.lang.String) -> valueOf
    39:39:android.net.apf.ApfGenerator$Opcodes[] values() -> values
android.net.apf.ApfGenerator$Register -> android.net.apf.ApfGenerator$Register:
    87:89:void <clinit>() -> <clinit>
    93:94:void <init>(java.lang.String,int,int) -> <init>
    87:87:android.net.apf.ApfGenerator$Register valueOf(java.lang.String) -> valueOf
    87:87:android.net.apf.ApfGenerator$Register[] values() -> values
android.net.captiveportal.CapportApiProbeResult -> android.net.captiveportal.CapportApiProbeResult:
    34:34:void <init>(android.net.captiveportal.CaptivePortalProbeResult,com.android.networkstack.apishim.common.CaptivePortalDataShim) -> <init>
    41:42:void <init>(int,java.lang.String,java.lang.String,com.android.networkstack.apishim.common.CaptivePortalDataShim,int) -> <init>
    46:46:com.android.networkstack.apishim.common.CaptivePortalDataShim getCaptivePortalData() -> getCaptivePortalData
android.net.captiveportal.CaptivePortalProbeResult -> android.net.captiveportal.CaptivePortalProbeResult:
    52:56:void <clinit>() -> <clinit>
    87:87:void <init>(int,int) -> <init>
    92:92:void <init>(int,java.lang.String,java.lang.String,int) -> <init>
    97:102:void <init>(int,java.lang.String,java.lang.String,android.net.captiveportal.CaptivePortalProbeSpec,int) -> <init>
    142:142:android.net.captiveportal.CaptivePortalProbeResult failed(int) -> failed
    169:169:boolean isConcludedFromHttp() -> isConcludedFromHttp
    160:160:boolean isConcludedFromHttps() -> isConcludedFromHttps
    133:133:boolean isDnsPrivateIpResponse() -> isDnsPrivateIpResponse
    125:125:boolean isFailed() -> isFailed
    129:129:boolean isPartialConnectivity() -> isPartialConnectivity
    110:110:boolean isPortal() -> isPortal
    121:121:boolean isPortalCode(int) -> isPortalCode
    106:106:boolean isSuccessful() -> isSuccessful
    151:151:android.net.captiveportal.CaptivePortalProbeResult success(int) -> success
android.net.captiveportal.CaptivePortalProbeSpec -> android.net.captiveportal.CaptivePortalProbeSpec:
    49:51:void <init>(java.lang.String,java.net.URL) -> <init>
    40:40:boolean access$000(java.lang.String,java.util.regex.Pattern) -> access$000
    203:203:java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    150:150:java.lang.String getEncodedSpec() -> getEncodedSpec
    155:155:java.net.URL getUrl() -> getUrl
    125:137:java.util.Collection parseCaptivePortalProbeSpecs(java.lang.String) -> parseCaptivePortalProbeSpecs
    87:94:java.util.regex.Pattern parsePatternIfNonEmpty(java.lang.String,int) -> parsePatternIfNonEmpty
    67:81:android.net.captiveportal.CaptivePortalProbeSpec parseSpec(java.lang.String) -> parseSpec
    107:109:android.net.captiveportal.CaptivePortalProbeSpec parseSpecOrNull(java.lang.String) -> parseSpecOrNull
    198:198:boolean safeMatch(java.lang.String,java.util.regex.Pattern) -> safeMatch
android.net.captiveportal.CaptivePortalProbeSpec$RegexMatchProbeSpec -> android.net.captiveportal.CaptivePortalProbeSpec$RegexMatchProbeSpec:
    173:183:void <init>(java.lang.String,java.net.URL,java.util.regex.Pattern,java.util.regex.Pattern) -> <init>
    188:192:android.net.captiveportal.CaptivePortalProbeResult getResult(int,java.lang.String) -> getResult
android.net.dhcp.DhcpAckPacket -> android.net.dhcp.DhcpAckPacket:
    35:38:void <init>(int,short,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],boolean) -> <init>
    60:66:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    74:80:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    42:53:java.lang.String toString() -> toString
android.net.dhcp.DhcpClient -> android.net.dhcp.DhcpClient:
    149:282:void <clinit>() -> <clinit>
    325:523:void <init>(android.content.Context,android.net.networkstack.util.StateMachine,java.lang.String,android.net.dhcp.DhcpClient$Dependencies) -> <init>
    855:869:void acceptDhcpResults(android.net.networkstack.DhcpResults,java.lang.String) -> acceptDhcpResults
    145:145:byte[] access$000(android.net.dhcp.DhcpClient) -> access$000
    145:145:boolean access$100() -> access$100
    145:145:android.net.networkstack.util.StateMachine access$1000(android.net.dhcp.DhcpClient) -> access$1000
    145:145:android.net.dhcp.DhcpClient$Configuration access$1100(android.net.dhcp.DhcpClient) -> access$1100
    145:145:android.net.dhcp.DhcpClient$Configuration access$1102(android.net.dhcp.DhcpClient,android.net.dhcp.DhcpClient$Configuration) -> access$1102
    145:145:android.net.networkstack.util.State access$1200(android.net.dhcp.DhcpClient) -> access$1200
    145:145:void access$1300(android.net.dhcp.DhcpClient) -> access$1300
    145:145:void access$1400(android.net.dhcp.DhcpClient) -> access$1400
    145:145:void access$1500(android.net.dhcp.DhcpClient) -> access$1500
    145:145:int access$1602(android.net.dhcp.DhcpClient,int) -> access$1602
    145:145:int access$1604(android.net.dhcp.DhcpClient) -> access$1604
    145:145:boolean access$1700(android.net.dhcp.DhcpClient) -> access$1700
    145:145:boolean access$1800(android.net.dhcp.DhcpClient) -> access$1800
    145:145:android.net.dhcp.DhcpClient$DhcpPacketHandler access$1900(android.net.dhcp.DhcpClient) -> access$1900
    145:145:android.net.dhcp.DhcpClient$DhcpPacketHandler access$1902(android.net.dhcp.DhcpClient,android.net.dhcp.DhcpClient$DhcpPacketHandler) -> access$1902
    145:145:java.lang.String access$200(android.net.dhcp.DhcpClient) -> access$200
    145:145:void access$2000(android.net.dhcp.DhcpClient) -> access$2000
    145:145:java.io.FileDescriptor access$2100(android.net.dhcp.DhcpClient) -> access$2100
    145:145:android.net.networkstack.util.State access$2200(android.net.dhcp.DhcpClient) -> access$2200
    145:145:android.net.networkstack.util.WakeupMessage access$2300(android.net.dhcp.DhcpClient) -> access$2300
    145:145:android.net.networkstack.util.WakeupMessage access$2400(android.net.dhcp.DhcpClient) -> access$2400
    145:145:java.util.Random access$2500(android.net.dhcp.DhcpClient) -> access$2500
    145:145:android.net.NetworkStackIpMemoryStore access$2600(android.net.dhcp.DhcpClient) -> access$2600
    145:145:android.net.networkstack.util.State access$2700(android.net.dhcp.DhcpClient) -> access$2700
    145:145:java.net.Inet4Address access$2800(android.net.dhcp.DhcpClient) -> access$2800
    145:145:java.net.Inet4Address access$2802(android.net.dhcp.DhcpClient,java.net.Inet4Address) -> access$2802
    145:145:long access$2902(android.net.dhcp.DhcpClient,long) -> access$2902
    145:145:android.net.metrics.IpConnectivityLog access$300(android.net.dhcp.DhcpClient) -> access$300
    145:145:android.net.networkstack.util.State access$3000(android.net.dhcp.DhcpClient) -> access$3000
    145:145:void access$3100(android.net.dhcp.DhcpClient,int) -> access$3100
    145:145:void access$3200(android.net.dhcp.DhcpClient,int) -> access$3200
    145:145:void access$3300(android.net.dhcp.DhcpClient,int) -> access$3300
    145:145:void access$3400(android.net.dhcp.DhcpClient) -> access$3400
    145:145:long access$3500(android.net.dhcp.DhcpClient) -> access$3500
    145:145:long access$3502(android.net.dhcp.DhcpClient,long) -> access$3502
    145:145:boolean access$3600(android.net.dhcp.DhcpClient) -> access$3600
    145:145:void access$3700(android.net.dhcp.DhcpClient,android.net.dhcp.DhcpPacket,boolean) -> access$3700
    145:145:int access$3800(android.net.dhcp.DhcpClient) -> access$3800
    145:145:short access$3900(android.net.dhcp.DhcpClient) -> access$3900
    145:145:com.android.networkstack.metrics.IpProvisioningMetrics access$400(android.net.dhcp.DhcpClient) -> access$400
    145:145:byte[] access$4000(android.net.dhcp.DhcpClient) -> access$4000
    145:145:byte[] access$4100(android.net.dhcp.DhcpClient) -> access$4100
    145:145:java.lang.String access$4200(android.net.dhcp.DhcpClient) -> access$4200
    145:145:android.net.networkstack.DhcpResults access$4300(android.net.dhcp.DhcpClient) -> access$4300
    145:145:android.net.networkstack.DhcpResults access$4302(android.net.dhcp.DhcpClient,android.net.networkstack.DhcpResults) -> access$4302
    145:145:boolean access$4400(android.net.dhcp.DhcpClient,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address) -> access$4400
    145:145:boolean access$4500(android.net.dhcp.DhcpClient,android.net.dhcp.DhcpPacket) -> access$4500
    145:145:void access$4600(android.net.dhcp.DhcpClient,android.net.dhcp.DhcpPacket,android.net.networkstack.DhcpResults) -> access$4600
    145:145:android.net.networkstack.util.State access$4700(android.net.dhcp.DhcpClient) -> access$4700
    145:145:android.net.networkstack.util.State access$4800(android.net.dhcp.DhcpClient) -> access$4800
    145:145:android.net.networkstack.util.WakeupMessage access$4900(android.net.dhcp.DhcpClient) -> access$4900
    145:145:android.net.util.InterfaceParams access$500(android.net.dhcp.DhcpClient) -> access$500
    145:145:android.net.networkstack.util.WakeupMessage access$5000(android.net.dhcp.DhcpClient) -> access$5000
    145:145:android.net.networkstack.util.WakeupMessage access$5100(android.net.dhcp.DhcpClient) -> access$5100
    145:145:void access$5200(android.net.dhcp.DhcpClient) -> access$5200
    145:145:android.net.networkstack.DhcpResults access$5300(android.net.dhcp.DhcpClient) -> access$5300
    145:145:android.net.networkstack.util.State access$5400(android.net.dhcp.DhcpClient) -> access$5400
    145:145:boolean access$5500(android.net.dhcp.DhcpClient,com.android.networkstack.arp.ArpPacket,java.net.Inet4Address) -> access$5500
    145:145:boolean access$5600() -> access$5600
    145:145:android.content.Context access$5700(android.net.dhcp.DhcpClient) -> access$5700
    145:145:android.net.dhcp.DhcpClient$Dependencies access$5800(android.net.dhcp.DhcpClient) -> access$5800
    145:145:android.net.networkstack.util.State access$5900(android.net.dhcp.DhcpClient) -> access$5900
    145:145:boolean access$600() -> access$600
    145:145:void access$6000(android.net.dhcp.DhcpClient,int) -> access$6000
    145:145:void access$6100(android.net.dhcp.DhcpClient,int) -> access$6100
    145:145:void access$6200(android.net.dhcp.DhcpClient,int) -> access$6200
    145:145:java.net.SocketAddress access$6300(android.net.dhcp.DhcpClient) -> access$6300
    145:145:boolean access$6400(android.net.dhcp.DhcpClient,java.net.Inet4Address) -> access$6400
    145:145:void access$6500(android.net.dhcp.DhcpClient) -> access$6500
    145:145:long access$6600(android.net.dhcp.DhcpClient) -> access$6600
    145:145:long access$6602(android.net.dhcp.DhcpClient,long) -> access$6602
    145:145:android.net.networkstack.util.State access$6700(android.net.dhcp.DhcpClient) -> access$6700
    145:145:android.net.networkstack.util.State access$6800(android.net.dhcp.DhcpClient) -> access$6800
    145:145:void access$6900(android.net.dhcp.DhcpClient,android.net.networkstack.util.State,android.net.networkstack.util.State) -> access$6900
    145:145:void access$700(android.net.dhcp.DhcpClient,java.lang.String,int) -> access$700
    145:145:android.net.networkstack.util.State access$7000(android.net.dhcp.DhcpClient) -> access$7000
    145:145:void access$7100(android.net.dhcp.DhcpClient,android.net.networkstack.DhcpResults,java.lang.String) -> access$7100
    145:145:boolean access$7200(android.net.dhcp.DhcpClient,java.net.Inet4Address,java.net.Inet4Address) -> access$7200
    145:145:long access$7300(android.net.dhcp.DhcpClient) -> access$7300
    145:145:long access$7302(android.net.dhcp.DhcpClient,long) -> access$7302
    145:145:boolean access$7400(android.net.dhcp.DhcpClient) -> access$7400
    145:145:android.util.SparseArray access$800() -> access$800
    145:145:boolean access$900() -> access$900
    873:875:void clearDhcpState() -> clearDhcpState
    590:591:void confirmDhcpLease(android.net.dhcp.DhcpPacket,android.net.networkstack.DhcpResults) -> confirmDhcpLease
    633:636:boolean connectUdpSock(java.net.Inet4Address) -> connectUdpSock
    884:885:void doQuit() -> doQuit
    642:645:byte[] getOptionsToSkip() -> getOptionsToSkip
    299:312:byte[] getRequestedParams() -> getRequestedParams
    718:718:short getSecs() -> getSecs
    1582:1594:boolean hasIpAddressConflict(com.android.networkstack.arp.ArpPacket,java.net.Inet4Address) -> hasIpAddressConflict
    595:602:boolean initInterface() -> initInterface
    613:627:boolean initUdpSocket() -> initUdpSocket
    1561:1562:boolean isArpProbe(com.android.networkstack.arp.ArpPacket) -> isArpProbe
    316:316:boolean isCapportApiEnabled() -> isCapportApiEnabled
    565:565:boolean isDhcpIpConflictDetectEnabled() -> isDhcpIpConflictDetectEnabled
    549:550:boolean isDhcpLeaseCacheEnabled() -> isDhcpLeaseCacheEnabled
    557:557:boolean isDhcpRapidCommitEnabled() -> isDhcpRapidCommitEnabled
    576:576:boolean isIPv6OnlyPreferredModeEnabled() -> isIPv6OnlyPreferredModeEnabled
    1078:1086:boolean isValidPacket(android.net.dhcp.DhcpPacket) -> isValidPacket
    834:834:void lambda$maybeSaveLeaseToIpMemoryStore$1(android.net.ipmemorystore.Status) -> lambda$maybeSaveLeaseToIpMemoryStore$1
    817:817:void lambda$setLeaseExpiredToIpMemoryStore$0(android.net.ipmemorystore.Status) -> lambda$setLeaseExpiredToIpMemoryStore$0
    1998:2002:void logState(java.lang.String,int) -> logState
    533:535:android.net.dhcp.DhcpClient makeDhcpClient(android.content.Context,android.net.networkstack.util.StateMachine,android.net.util.InterfaceParams,android.net.dhcp.DhcpClient$Dependencies) -> makeDhcpClient
    396:397:android.net.networkstack.util.WakeupMessage makeWakeupMessage(java.lang.String,int) -> makeWakeupMessage
    823:836:void maybeSaveLeaseToIpMemoryStore() -> maybeSaveLeaseToIpMemoryStore
    1271:1275:boolean maybeTransitionToIpv6OnlyWaitState(android.net.dhcp.DhcpPacket) -> maybeTransitionToIpv6OnlyWaitState
    848:851:void notifyFailure() -> notifyFailure
    840:843:void notifySuccess() -> notifySuccess
    890:891:void onQuitting() -> onQuitting
    1575:1577:boolean packetHasIpAddressConflict(com.android.networkstack.arp.ArpPacket,java.net.Inet4Address) -> packetHasIpAddressConflict
    976:976:void preDhcpTransitionTo(android.net.networkstack.util.State,android.net.networkstack.util.State) -> preDhcpTransitionTo
    1280:1304:void receiveOfferOrAckPacket(android.net.dhcp.DhcpPacket,boolean) -> receiveOfferOrAckPacket
    581:585:void recordMetricEnabledFeatures() -> recordMetricEnabledFeatures
    527:527:void registerForPreDhcpNotification() -> registerForPreDhcpNotification
    786:806:void scheduleLeaseTimers() -> scheduleLeaseTimers
    780:782:boolean sendDeclinePacket(java.net.Inet4Address,java.net.Inet4Address) -> sendDeclinePacket
    750:755:boolean sendDiscoverPacket() -> sendDiscoverPacket
    762:774:boolean sendRequestPacket(java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address) -> sendRequestPacket
    1093:1095:void setDhcpLeaseExpiry(android.net.dhcp.DhcpPacket) -> setDhcpLeaseExpiry
    810:819:void setLeaseExpiredToIpMemoryStore() -> setLeaseExpiredToIpMemoryStore
    1331:1335:void startInitRebootOrInit() -> startInitRebootOrInit
    608:609:void startNewTransaction() -> startNewTransaction
    724:743:boolean transmitPacket(java.nio.ByteBuffer,java.lang.String,int,java.net.Inet4Address) -> transmitPacket
android.net.dhcp.DhcpClient$$ExternalSyntheticLambda0 -> android.net.dhcp.DhcpClient$$ExternalSyntheticLambda0:
    android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$3deecc0328f5024f1deae31dbfc2d0ae5d76599e4f78b498e8dfc27cbd677848$0 android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$3deecc0328f5024f1deae31dbfc2d0ae5d76599e4f78b498e8dfc27cbd677848$0.INSTANCE -> INSTANCE
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$3deecc0328f5024f1deae31dbfc2d0ae5d76599e4f78b498e8dfc27cbd677848$0.<clinit>() -> <clinit>
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$3deecc0328f5024f1deae31dbfc2d0ae5d76599e4f78b498e8dfc27cbd677848$0.<init>() -> <init>
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$3deecc0328f5024f1deae31dbfc2d0ae5d76599e4f78b498e8dfc27cbd677848$0.onComplete(android.net.ipmemorystore.Status) -> onComplete
android.net.dhcp.DhcpClient$$ExternalSyntheticLambda1 -> android.net.dhcp.DhcpClient$$ExternalSyntheticLambda1:
    android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$c47f5f7dbab91b85158fb3fa1778f2cf0844d5f2ac4a590f544030bf2396ea4d$0 android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$c47f5f7dbab91b85158fb3fa1778f2cf0844d5f2ac4a590f544030bf2396ea4d$0.INSTANCE -> INSTANCE
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$c47f5f7dbab91b85158fb3fa1778f2cf0844d5f2ac4a590f544030bf2396ea4d$0.<clinit>() -> <clinit>
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$c47f5f7dbab91b85158fb3fa1778f2cf0844d5f2ac4a590f544030bf2396ea4d$0.<init>() -> <init>
    void android.net.dhcp.DhcpClient$$InternalSyntheticLambda$1$c47f5f7dbab91b85158fb3fa1778f2cf0844d5f2ac4a590f544030bf2396ea4d$0.onComplete(android.net.ipmemorystore.Status) -> onComplete
android.net.dhcp.DhcpClient$Configuration -> android.net.dhcp.DhcpClient$Configuration:
    993:996:void <init>(java.lang.String,boolean,java.util.List) -> <init>
android.net.dhcp.DhcpClient$ConfiguringInterfaceState -> android.net.dhcp.DhcpClient$ConfiguringInterfaceState:
    1474:1474:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1477:1483:void enter() -> enter
    1488:1491:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$Dependencies -> android.net.dhcp.DhcpClient$Dependencies:
    408:410:void <init>(android.net.NetworkStackIpMemoryStore,com.android.networkstack.metrics.IpProvisioningMetrics) -> <init>
    425:425:java.lang.String getDeviceName(android.content.Context) -> getDeviceName
    458:458:int getIntDeviceConfig(java.lang.String,int,int,int) -> getIntDeviceConfig
    433:433:android.net.NetworkStackIpMemoryStore getIpMemoryStore() -> getIpMemoryStore
    440:440:com.android.networkstack.metrics.IpProvisioningMetrics getIpProvisioningMetrics() -> getIpProvisioningMetrics
    418:418:boolean getSendHostnameOption(android.content.Context) -> getSendHostnameOption
    467:467:android.os.PowerManager$WakeLock getWakeLock(android.os.PowerManager) -> getWakeLock
    449:449:boolean isFeatureEnabled(android.content.Context,java.lang.String,boolean) -> isFeatureEnabled
android.net.dhcp.DhcpClient$DhcpBoundState -> android.net.dhcp.DhcpClient$DhcpBoundState:
    1751:1751:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1754:1769:void enter() -> enter
    1774:1775:void exit() -> exit
    1794:1798:void logTimeToBoundState() -> logTimeToBoundState
    1780:1786:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$DhcpDecliningState -> android.net.dhcp.DhcpClient$DhcpDecliningState:
    1942:1942:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1947:1955:void enter() -> enter
    1965:1967:boolean sendPacket() -> sendPacket
    1961:1961:void timeout() -> timeout
android.net.dhcp.DhcpClient$DhcpHaveLeaseState -> android.net.dhcp.DhcpClient$DhcpHaveLeaseState:
    1446:1446:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1463:1470:void exit() -> exit
    1449:1453:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$DhcpInitRebootState -> android.net.dhcp.DhcpClient$DhcpInitRebootState:
    1907:1907:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1910:1912:void enter() -> enter
    1934:1935:void exit() -> exit
    1925:1927:boolean sendPacket() -> sendPacket
android.net.dhcp.DhcpClient$DhcpInitState -> android.net.dhcp.DhcpClient$DhcpInitState:
    1310:1311:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1316:1318:void enter() -> enter
    1326:1326:void receivePacket(android.net.dhcp.DhcpPacket) -> receivePacket
    1322:1322:boolean sendPacket() -> sendPacket
android.net.dhcp.DhcpClient$DhcpPacketHandler -> android.net.dhcp.DhcpClient$DhcpPacketHandler:
    651:652:void <init>(android.net.dhcp.DhcpClient,android.os.Handler) -> <init>
    682:692:java.io.FileDescriptor createFd() -> createFd
    648:648:void handlePacket(java.lang.Object,int) -> handlePacket
    658:675:void handlePacket(byte[],int) -> handlePacket
    707:707:void logError(java.lang.String,java.lang.Exception) -> logError
    648:648:int readPacket(java.io.FileDescriptor,java.lang.Object) -> readPacket
    698:701:int readPacket(java.io.FileDescriptor,byte[]) -> readPacket
    712:713:int transmitPacket(java.nio.ByteBuffer,java.net.SocketAddress) -> transmitPacket
android.net.dhcp.DhcpClient$DhcpPreconnectingState -> android.net.dhcp.DhcpClient$DhcpPreconnectingState:
    1344:1345:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1350:1353:void enter() -> enter
    1358:1368:boolean processMessage(android.os.Message) -> processMessage
    1390:1398:void sendPreconnectionPacket() -> sendPreconnectionPacket
    1386:1386:void timeout() -> timeout
android.net.dhcp.DhcpClient$DhcpReacquiringState -> android.net.dhcp.DhcpClient$DhcpReacquiringState:
    1803:1803:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1808:1809:void enter() -> enter
    1823:1849:void receivePacket(android.net.dhcp.DhcpPacket) -> receivePacket
    1815:1819:boolean sendPacket() -> sendPacket
android.net.dhcp.DhcpClient$DhcpRebindingState -> android.net.dhcp.DhcpClient$DhcpRebindingState:
    1884:1885:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1890:1897:void enter() -> enter
    1903:1903:java.net.Inet4Address packetDestination() -> packetDestination
android.net.dhcp.DhcpClient$DhcpRebootingState -> android.net.dhcp.DhcpClient$DhcpRebootingState:
    1939:1939:void <init>(android.net.dhcp.DhcpClient) -> <init>
android.net.dhcp.DhcpClient$DhcpRenewingState -> android.net.dhcp.DhcpClient$DhcpRenewingState:
    1855:1856:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1878:1879:java.net.Inet4Address packetDestination() -> packetDestination
    1861:1867:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$DhcpRequestingState -> android.net.dhcp.DhcpClient$DhcpRequestingState:
    1407:1408:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1420:1435:void receivePacket(android.net.dhcp.DhcpPacket) -> receivePacket
    1412:1415:boolean sendPacket() -> sendPacket
    1442:1442:void timeout() -> timeout
android.net.dhcp.DhcpClient$DhcpSelectingState -> android.net.dhcp.DhcpClient$DhcpSelectingState:
    1403:1403:void <init>(android.net.dhcp.DhcpClient) -> <init>
android.net.dhcp.DhcpClient$DhcpState -> android.net.dhcp.DhcpClient$DhcpState:
    1037:1037:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1040:1050:void enter() -> enter
    1055:1060:void exit() -> exit
    1065:1068:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$IpAddressConflictDetectingState -> android.net.dhcp.DhcpClient$IpAddressConflictDetectingState:
    1599:1599:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1614:1655:void enter() -> enter
    1704:1710:void exit() -> exit
    1660:1683:boolean processMessage(android.os.Message) -> processMessage
    1719:1736:void readIpConflictParametersFromDeviceConfig() -> readIpConflictParametersFromDeviceConfig
    1699:1699:void scheduleAnnounce(int) -> scheduleAnnounce
    1693:1695:void scheduleProbe() -> scheduleProbe
    1746:1747:boolean sendArpAnnounce() -> sendArpAnnounce
    1741:1742:boolean sendArpProbe() -> sendArpProbe
android.net.dhcp.DhcpClient$IpConflictDetector -> android.net.dhcp.DhcpClient$IpConflictDetector:
    1503:1505:void <init>(android.net.dhcp.DhcpClient,android.os.Handler,java.net.Inet4Address) -> <init>
    1525:1532:java.io.FileDescriptor createFd() -> createFd
    1499:1499:void handlePacket(java.lang.Object,int) -> handlePacket
    1511:1517:void handlePacket(byte[],int) -> handlePacket
    1539:1539:void logError(java.lang.String,java.lang.Exception) -> logError
    1546:1554:boolean transmitPacket(java.net.Inet4Address,java.net.Inet4Address,byte[],java.net.SocketAddress) -> transmitPacket
android.net.dhcp.DhcpClient$Ipv6OnlyWaitState -> android.net.dhcp.DhcpClient$Ipv6OnlyWaitState:
    1975:1975:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1978:1983:void enter() -> enter
    1989:1989:void exit() -> exit
    1993:1993:void timeout() -> timeout
android.net.dhcp.DhcpClient$LoggingState -> android.net.dhcp.DhcpClient$LoggingState:
    894:894:void <init>(android.net.dhcp.DhcpClient) -> <init>
    899:900:void enter() -> enter
    905:906:void exit() -> exit
    936:936:java.lang.String getName() -> getName
    910:910:java.lang.String messageName(int) -> messageName
    914:921:java.lang.String messageToString(android.os.Message) -> messageToString
    926:927:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$ObtainingConfigurationState -> android.net.dhcp.DhcpClient$ObtainingConfigurationState:
    1206:1206:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1209:1224:void enter() -> enter
    1263:1266:void exit() -> exit
    1215:1222:void lambda$enter$0(android.net.ipmemorystore.Status,java.lang.String,android.net.ipmemorystore.NetworkAttributes) -> lambda$enter$0
    1229:1256:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$ObtainingConfigurationState$$ExternalSyntheticLambda0 -> android.net.dhcp.DhcpClient$ObtainingConfigurationState$$ExternalSyntheticLambda0:
    android.net.dhcp.DhcpClient$ObtainingConfigurationState android.net.dhcp.DhcpClient$ObtainingConfigurationState$$InternalSyntheticLambda$1$8e860b9c8a0e2a0bede2eea76cf3c9161124ceacfbfefdc5c10b372d6261c553$0.f$0 -> f$0
    void android.net.dhcp.DhcpClient$ObtainingConfigurationState$$InternalSyntheticLambda$1$8e860b9c8a0e2a0bede2eea76cf3c9161124ceacfbfefdc5c10b372d6261c553$0.<init>(android.net.dhcp.DhcpClient$ObtainingConfigurationState) -> <init>
    void android.net.dhcp.DhcpClient$ObtainingConfigurationState$$InternalSyntheticLambda$1$8e860b9c8a0e2a0bede2eea76cf3c9161124ceacfbfefdc5c10b372d6261c553$0.onNetworkAttributesRetrieved(android.net.ipmemorystore.Status,java.lang.String,android.net.ipmemorystore.NetworkAttributes) -> onNetworkAttributesRetrieved
android.net.dhcp.DhcpClient$PacketRetransmittingState -> android.net.dhcp.DhcpClient$PacketRetransmittingState:
    1145:1145:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1150:1152:void enter() -> enter
    1176:1177:void exit() -> exit
    1185:1185:void initTimer() -> initTimer
    1189:1190:int jitterTimer(int) -> jitterTimer
    1157:1167:boolean processMessage(android.os.Message) -> processMessage
    1195:1201:void scheduleKick() -> scheduleKick
android.net.dhcp.DhcpClient$StoppedState -> android.net.dhcp.DhcpClient$StoppedState:
    1000:1000:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1003:1011:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$TimeoutState -> android.net.dhcp.DhcpClient$TimeoutState:
    1098:1099:void <init>(android.net.dhcp.DhcpClient) -> <init>
    1103:1104:void enter() -> enter
    1121:1122:void exit() -> exit
    1127:1129:void maybeInitTimeout() -> maybeInitTimeout
    1109:1112:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$WaitBeforeObtainingConfigurationState -> android.net.dhcp.DhcpClient$WaitBeforeObtainingConfigurationState:
    1032:1033:void <init>(android.net.dhcp.DhcpClient,android.net.networkstack.util.State) -> <init>
android.net.dhcp.DhcpClient$WaitBeforeOtherState -> android.net.dhcp.DhcpClient$WaitBeforeOtherState:
    945:946:void <init>(android.net.dhcp.DhcpClient,android.net.networkstack.util.State) -> <init>
    951:952:void enter() -> enter
    957:960:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpClient$WaitBeforeRenewalState -> android.net.dhcp.DhcpClient$WaitBeforeRenewalState:
    1026:1027:void <init>(android.net.dhcp.DhcpClient,android.net.networkstack.util.State) -> <init>
android.net.dhcp.DhcpClient$WaitBeforeStartState -> android.net.dhcp.DhcpClient$WaitBeforeStartState:
    1020:1021:void <init>(android.net.dhcp.DhcpClient,android.net.networkstack.util.State) -> <init>
android.net.dhcp.DhcpDeclinePacket -> android.net.dhcp.DhcpDeclinePacket:
    32:34:void <init>(int,short,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],java.net.Inet4Address,java.net.Inet4Address) -> <init>
    46:50:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    58:63:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    38:39:java.lang.String toString() -> toString
android.net.dhcp.DhcpDiscoverPacket -> android.net.dhcp.DhcpDiscoverPacket:
    36:38:void <init>(int,short,java.net.Inet4Address,byte[],boolean,java.net.Inet4Address,boolean) -> <init>
    51:54:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    62:70:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    42:44:java.lang.String toString() -> toString
android.net.dhcp.DhcpInformPacket -> android.net.dhcp.DhcpInformPacket:
    32:32:void <init>(int,short,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[]) -> <init>
    44:48:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    56:60:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    36:37:java.lang.String toString() -> toString
android.net.dhcp.DhcpLease -> android.net.dhcp.DhcpLease:
    58:64:void <init>(byte[],android.net.MacAddress,java.net.Inet4Address,int,long,java.lang.String) -> <init>
    152:152:java.lang.String clientIdToString(byte[]) -> clientIdToString
    131:140:boolean equals(java.lang.Object) -> equals
    100:100:long getExpTime() -> getExpTime
    87:87:java.lang.String getHostname() -> getHostname
    92:92:java.net.Inet4Address getNetAddr() -> getNetAddr
    145:145:int hashCode() -> hashCode
    156:156:java.lang.String inet4AddrToString(java.net.Inet4Address) -> inet4AddrToString
    122:125:boolean matchesClient(byte[],android.net.MacAddress) -> matchesClient
    111:113:android.net.dhcp.DhcpLease renewedLease(long,java.lang.String) -> renewedLease
    171:177:android.net.dhcp.DhcpLeaseParcelable toParcelable() -> toParcelable
    161:164:java.lang.String toString() -> toString
android.net.dhcp.DhcpLeaseParcelable -> android.net.dhcp.DhcpLeaseParcelable:
    13:13:void <clinit>() -> <clinit>
    5:11:void <init>() -> <init>
    42:63:void readFromParcel(android.os.Parcel) -> readFromParcel
    67:74:java.lang.String toString() -> toString
    27:38:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.dhcp.DhcpLeaseParcelable$1 -> android.net.dhcp.DhcpLeaseParcelable$1:
    13:13:void <init>() -> <init>
    13:13:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    16:17:android.net.dhcp.DhcpLeaseParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    13:13:java.lang.Object[] newArray(int) -> newArray
    22:22:android.net.dhcp.DhcpLeaseParcelable[] newArray(int) -> newArray
android.net.dhcp.DhcpLeaseRepository -> android.net.dhcp.DhcpLeaseRepository:
    92:139:void <init>(android.net.IpPrefix,java.util.Set,long,java.net.Inet4Address,android.net.util.SharedLog,android.net.dhcp.DhcpServer$Clock) -> <init>
    452:453:void addLeaseCallbacks(android.net.dhcp.IDhcpEventCallbacks) -> addLeaseCallbacks
    329:345:android.net.dhcp.DhcpLease checkClientAndMakeLease(byte[],android.net.MacAddress,java.net.Inet4Address,java.lang.String,long) -> checkClientAndMakeLease
    238:239:void checkValidRelayAddr(java.net.Inet4Address) -> checkValidRelayAddr
    165:170:boolean cleanMap(java.util.Map) -> cleanMap
    350:352:void commitLease(android.net.dhcp.DhcpLease) -> commitLease
    250:251:android.net.dhcp.DhcpLease findByClient(byte[],android.net.MacAddress) -> findByClient
    526:526:int getAddrByIndex(int) -> getAddrByIndex
    522:522:int getAddrIndex(int) -> getAddrIndex
    226:228:android.net.dhcp.DhcpLease getCommittedLease(byte[],android.net.MacAddress,java.net.Inet4Address,java.lang.String) -> getCommittedLease
    435:436:java.util.List getCommittedLeases() -> getCommittedLeases
    592:599:int getFirstClientAddress(android.net.MacAddress) -> getFirstClientAddress
    573:575:int getNextAddress(int) -> getNextAddress
    191:208:android.net.dhcp.DhcpLease getOffer(byte[],android.net.MacAddress,java.net.Inet4Address,java.net.Inet4Address,java.lang.String) -> getOffer
    541:561:int getValidAddress(int) -> getValidAddress
    510:510:boolean isAvailable(java.net.Inet4Address) -> isAvailable
    245:245:boolean isIpAddrOutsidePrefix(android.net.IpPrefix,java.net.Inet4Address) -> isIpAddrOutsidePrefix
    568:569:boolean isValidAddress(java.net.Inet4Address) -> isValidAddress
    612:638:android.net.dhcp.DhcpLease makeNewOffer(byte[],android.net.MacAddress,long,java.lang.String) -> makeNewOffer
    425:426:boolean markAndReleaseDeclinedLease(byte[],android.net.MacAddress,java.net.Inet4Address) -> markAndReleaseDeclinedLease
    403:411:void markLeaseDeclined(java.net.Inet4Address) -> markLeaseDeclined
    462:463:void maybeUpdateEarliestExpiration(long) -> maybeUpdateEarliestExpiration
    384:398:void notifyLeasesChanged() -> notifyLeasesChanged
    368:379:boolean releaseLease(byte[],android.net.MacAddress,java.net.Inet4Address) -> releaseLease
    477:487:long removeExpired(long,java.util.Map,java.lang.String,java.util.function.Function) -> removeExpired
    497:506:void removeExpiredLeases(long) -> removeExpiredLeases
    357:358:void removeLease(java.net.Inet4Address,boolean) -> removeLease
    281:311:android.net.dhcp.DhcpLease requestLease(byte[],android.net.MacAddress,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,boolean,java.lang.String) -> requestLease
    144:155:void updateParams(android.net.IpPrefix,java.util.Set,long,java.net.Inet4Address) -> updateParams
android.net.dhcp.DhcpLeaseRepository$$ExternalSyntheticLambda0 -> android.net.dhcp.DhcpLeaseRepository$$ExternalSyntheticLambda0:
    android.net.dhcp.DhcpLeaseRepository$$InternalSyntheticLambda$0$feefa5cd87c07b271ad872cc0c68c49d71140a06c796ea239e7fa5e8a8c47529$0 android.net.dhcp.DhcpLeaseRepository$$InternalSyntheticLambda$0$feefa5cd87c07b271ad872cc0c68c49d71140a06c796ea239e7fa5e8a8c47529$0.INSTANCE -> INSTANCE
    void android.net.dhcp.DhcpLeaseRepository$$InternalSyntheticLambda$0$feefa5cd87c07b271ad872cc0c68c49d71140a06c796ea239e7fa5e8a8c47529$0.<clinit>() -> <clinit>
    void android.net.dhcp.DhcpLeaseRepository$$InternalSyntheticLambda$0$feefa5cd87c07b271ad872cc0c68c49d71140a06c796ea239e7fa5e8a8c47529$0.<init>() -> <init>
    java.lang.Object android.net.dhcp.DhcpLeaseRepository$$InternalSyntheticLambda$0$feefa5cd87c07b271ad872cc0c68c49d71140a06c796ea239e7fa5e8a8c47529$0.apply(java.lang.Object) -> apply
android.net.dhcp.DhcpLeaseRepository$DhcpLeaseException -> android.net.dhcp.DhcpLeaseRepository$DhcpLeaseException:
    99:99:void <init>(java.lang.String) -> <init>
android.net.dhcp.DhcpLeaseRepository$InvalidAddressException -> android.net.dhcp.DhcpLeaseRepository$InvalidAddressException:
    111:111:void <init>(java.lang.String) -> <init>
android.net.dhcp.DhcpLeaseRepository$InvalidSubnetException -> android.net.dhcp.DhcpLeaseRepository$InvalidSubnetException:
    117:117:void <init>(java.lang.String) -> <init>
android.net.dhcp.DhcpLeaseRepository$OutOfAddressesException -> android.net.dhcp.DhcpLeaseRepository$OutOfAddressesException:
    105:105:void <init>(java.lang.String) -> <init>
android.net.dhcp.DhcpNakPacket -> android.net.dhcp.DhcpNakPacket:
    31:31:void <init>(int,short,java.net.Inet4Address,byte[],boolean) -> <init>
    44:50:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    58:61:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    36:37:java.lang.String toString() -> toString
android.net.dhcp.DhcpOfferPacket -> android.net.dhcp.DhcpOfferPacket:
    36:37:void <init>(int,short,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[]) -> <init>
    62:68:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    76:80:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    41:55:java.lang.String toString() -> toString
android.net.dhcp.DhcpPacket -> android.net.dhcp.DhcpPacket:
    69:406:void <clinit>() -> <clinit>
    410:418:void <init>(int,short,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],boolean) -> <init>
    815:818:void addCommonClientTlvs(java.nio.ByteBuffer) -> addCommonClientTlvs
    836:857:void addCommonServerTlvs(java.nio.ByteBuffer) -> addCommonServerTlvs
    825:831:void addCustomizedClientTlvs(java.nio.ByteBuffer) -> addCustomizedClientTlvs
    664:666:void addTlv(java.nio.ByteBuffer,byte,byte) -> addTlv
    673:674:void addTlv(java.nio.ByteBuffer,byte) -> addTlv
    684:690:void addTlv(java.nio.ByteBuffer,byte,byte[]) -> addTlv
    701:701:void addTlv(java.nio.ByteBuffer,byte,java.net.Inet4Address) -> addTlv
    711:723:void addTlv(java.nio.ByteBuffer,byte,java.util.List) -> addTlv
    734:736:void addTlv(java.nio.ByteBuffer,byte,java.lang.Short) -> addTlv
    747:749:void addTlv(java.nio.ByteBuffer,byte,java.lang.Integer) -> addTlv
    761:763:void addTlv(java.nio.ByteBuffer,byte,java.lang.String) -> addTlv
    772:772:void addTlvEnd(java.nio.ByteBuffer) -> addTlvEnd
    1560:1579:java.nio.ByteBuffer buildAckPacket(int,int,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],java.lang.Integer,java.net.Inet4Address,java.net.Inet4Address,java.util.List,java.util.List,java.net.Inet4Address,java.lang.String,java.lang.String,boolean,short,boolean,java.lang.String,java.lang.Integer) -> buildAckPacket
    1591:1591:java.nio.ByteBuffer buildAckPacket(int,int,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],java.lang.Integer,java.net.Inet4Address,java.net.Inet4Address,java.util.List,java.util.List,java.net.Inet4Address,java.lang.String,java.lang.String,boolean,short,boolean,java.lang.String) -> buildAckPacket
    1648:1651:java.nio.ByteBuffer buildDeclinePacket(int,int,byte[],java.net.Inet4Address,java.net.Inet4Address) -> buildDeclinePacket
    1485:1491:java.nio.ByteBuffer buildDiscoverPacket(int,int,short,byte[],boolean,byte[],boolean,java.lang.String,java.util.List) -> buildDiscoverPacket
    1602:1606:java.nio.ByteBuffer buildNakPacket(int,int,java.net.Inet4Address,java.net.Inet4Address,byte[],boolean,java.lang.String) -> buildNakPacket
    1515:1534:java.nio.ByteBuffer buildOfferPacket(int,int,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],java.lang.Integer,java.net.Inet4Address,java.net.Inet4Address,java.util.List,java.util.List,java.net.Inet4Address,java.lang.String,java.lang.String,boolean,short,java.lang.String,java.lang.Integer) -> buildOfferPacket
    1546:1546:java.nio.ByteBuffer buildOfferPacket(int,int,boolean,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[],java.lang.Integer,java.net.Inet4Address,java.net.Inet4Address,java.util.List,java.util.List,java.net.Inet4Address,java.lang.String,java.lang.String,boolean,short,java.lang.String) -> buildOfferPacket
    1617:1625:java.nio.ByteBuffer buildRequestPacket(int,int,short,java.net.Inet4Address,boolean,byte[],java.net.Inet4Address,java.net.Inet4Address,byte[],java.lang.String,java.util.List) -> buildRequestPacket
    623:657:int checksum(java.nio.ByteBuffer,int,int,int) -> checksum
    988:1382:android.net.dhcp.DhcpPacket decodeFullPacket(java.nio.ByteBuffer,int,byte[]) -> decodeFullPacket
    1392:1398:android.net.dhcp.DhcpPacket decodeFullPacket(byte[],int,int,byte[]) -> decodeFullPacket
    1407:1407:android.net.dhcp.DhcpPacket decodeFullPacket(byte[],int,int) -> decodeFullPacket
    496:604:void fillInPacket(int,java.net.Inet4Address,java.net.Inet4Address,short,short,java.nio.ByteBuffer,byte,boolean) -> fillInPacket
    458:463:byte[] getClientId() -> getClientId
    432:432:byte[] getClientMac() -> getClientMac
    449:449:byte[] getExplicitClientIdOrNull() -> getExplicitClientIdOrNull
    801:805:java.lang.String getHostname() -> getHostname
    1475:1476:long getIpv6OnlyWaitTimeMillis() -> getIpv6OnlyWaitTimeMillis
    1462:1467:long getLeaseTimeMillis() -> getLeaseTimeMillis
    425:425:int getTransactionId() -> getTransactionId
    782:788:java.lang.String getVendorId(java.util.List) -> getVendorId
    441:441:boolean hasExplicitClientId() -> hasExplicitClientId
    476:480:boolean hasRequestedParam(byte) -> hasRequestedParam
    866:874:java.lang.String macToString(byte[]) -> macToString
    912:914:java.lang.String readAsciiString(java.nio.ByteBuffer,int,boolean) -> readAsciiString
    919:931:java.lang.String readAsciiString(byte[],boolean) -> readAsciiString
    894:897:java.net.Inet4Address readIpAddress(java.nio.ByteBuffer) -> readIpAddress
    961:961:boolean shouldSkipOption(byte,byte[]) -> shouldSkipOption
    955:955:int skipOption(java.nio.ByteBuffer,int) -> skipOption
    1414:1452:android.net.networkstack.DhcpResults toDhcpResults() -> toDhcpResults
    882:882:java.lang.String toString() -> toString
android.net.dhcp.DhcpPacket$ParseException -> android.net.dhcp.DhcpPacket$ParseException:
    945:946:void <init>(int,java.lang.String,java.lang.Object[]) -> <init>
android.net.dhcp.DhcpPacketListener -> android.net.dhcp.DhcpPacketListener:
    44:44:void <init>(android.os.Handler) -> <init>
    36:36:void handlePacket(java.lang.Object,int) -> handlePacket
    54:65:void handlePacket(android.net.dhcp.DhcpPacketListener$Payload,int) -> handlePacket
    84:85:java.net.Inet4Address inet4AddrOrNull(java.net.InetSocketAddress) -> inet4AddrOrNull
    36:36:int readPacket(java.io.FileDescriptor,java.lang.Object) -> readPacket
    72:78:int readPacket(java.io.FileDescriptor,android.net.dhcp.DhcpPacketListener$Payload) -> readPacket
android.net.dhcp.DhcpPacketListener$Payload -> android.net.dhcp.DhcpPacketListener$Payload:
    37:38:void <init>() -> <init>
android.net.dhcp.DhcpReleasePacket -> android.net.dhcp.DhcpReleasePacket:
    34:37:void <init>(int,java.net.Inet4Address,java.net.Inet4Address,java.net.Inet4Address,byte[]) -> <init>
    43:46:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    52:56:void finishPacket(java.nio.ByteBuffer) -> finishPacket
android.net.dhcp.DhcpRequestPacket -> android.net.dhcp.DhcpRequestPacket:
    31:31:void <init>(int,short,java.net.Inet4Address,java.net.Inet4Address,byte[],boolean) -> <init>
    45:49:java.nio.ByteBuffer buildPacket(int,short,short) -> buildPacket
    57:68:void finishPacket(java.nio.ByteBuffer) -> finishPacket
    35:38:java.lang.String toString() -> toString
android.net.dhcp.DhcpResultsParcelableUtil -> android.net.dhcp.DhcpResultsParcelableUtil:
    38:45:android.net.DhcpResultsParcelable toStableParcelable(android.net.networkstack.DhcpResults) -> toStableParcelable
android.net.dhcp.DhcpServer -> android.net.dhcp.DhcpServer:
    247:247:void <init>(android.content.Context,java.lang.String,android.net.dhcp.DhcpServingParams,android.net.util.SharedLog) -> <init>
    130:276:void <init>(android.content.Context,java.lang.String,android.net.dhcp.DhcpServingParams,android.net.util.SharedLog,android.net.dhcp.DhcpServer$Dependencies) -> <init>
    91:91:android.net.dhcp.DhcpLeaseRepository access$1000(android.net.dhcp.DhcpServer) -> access$1000
    91:91:void access$1100(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpServingParams,android.net.INetworkStackStatusCallback) -> access$1100
    91:91:android.net.dhcp.DhcpServer$StoppedState access$1200(android.net.dhcp.DhcpServer) -> access$1200
    91:91:android.net.dhcp.DhcpServingParams access$1400(android.net.dhcp.DhcpServer) -> access$1400
    91:91:android.net.MacAddress access$1500(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpPacket) -> access$1500
    91:91:boolean access$1600(android.net.dhcp.DhcpServer) -> access$1600
    91:91:boolean access$1700(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,android.net.MacAddress) -> access$1700
    91:91:boolean access$1800(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,android.net.MacAddress) -> access$1800
    91:91:boolean access$1900(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpPacket,java.lang.String) -> access$1900
    91:91:void access$200(android.net.dhcp.DhcpServer,android.net.INetworkStackStatusCallback,int) -> access$200
    91:91:android.net.dhcp.DhcpServer$WaitBeforeRetrievalState access$2000(android.net.dhcp.DhcpServer) -> access$2000
    91:91:java.io.FileDescriptor access$2100(android.net.dhcp.DhcpServer) -> access$2100
    91:91:java.io.FileDescriptor access$2102(android.net.dhcp.DhcpServer,java.io.FileDescriptor) -> access$2102
    91:91:java.lang.String access$2200(android.net.dhcp.DhcpServer) -> access$2200
    91:91:android.net.dhcp.DhcpServer$StartedState access$300(android.net.dhcp.DhcpServer) -> access$300
    91:91:android.net.dhcp.IDhcpEventCallbacks access$500(android.net.dhcp.DhcpServer) -> access$500
    91:91:android.net.dhcp.IDhcpEventCallbacks access$502(android.net.dhcp.DhcpServer,android.net.dhcp.IDhcpEventCallbacks) -> access$502
    91:91:android.net.dhcp.DhcpServer$RunningState access$600(android.net.dhcp.DhcpServer) -> access$600
    91:91:android.net.dhcp.DhcpPacketListener access$700(android.net.dhcp.DhcpServer) -> access$700
    91:91:android.net.dhcp.DhcpPacketListener access$702(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpPacketListener) -> access$702
    91:91:android.net.util.SharedLog access$800(android.net.dhcp.DhcpServer) -> access$800
    91:91:android.net.dhcp.DhcpServer$Dependencies access$900(android.net.dhcp.DhcpServer) -> access$900
    767:770:boolean addArpEntry(android.net.MacAddress,java.net.Inet4Address) -> addArpEntry
    645:652:java.net.Inet4Address getAckOrOfferDst(android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,boolean) -> getAckOrOfferDst
    668:668:boolean getBroadcastFlag(android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease) -> getBroadcastFlag
    679:680:java.lang.String getHostnameIfRequested(android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease) -> getHostnameIfRequested
    786:792:int getLeaseTimeout(android.net.dhcp.DhcpLease) -> getLeaseTimeout
    807:811:android.net.MacAddress getMacAddr(android.net.dhcp.DhcpPacket) -> getMacAddr
    386:392:void handleUpdateServingParams(android.net.dhcp.DhcpServingParams,android.net.INetworkStackStatusCallback) -> handleUpdateServingParams
    816:816:boolean isEmpty(java.net.Inet4Address) -> isEmpty
    283:283:android.net.dhcp.IDhcpServer makeConnector() -> makeConnector
    378:380:void maybeNotifyStatus(android.net.INetworkStackStatusCallback,int) -> maybeNotifyStatus
    331:331:void start(android.net.INetworkStackStatusCallback) -> start
    342:342:void start(android.net.INetworkStackStatusCallback,android.net.dhcp.IDhcpEventCallbacks) -> start
    371:372:void stop(android.net.INetworkStackStatusCallback) -> stop
    710:724:boolean transmitAck(android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,android.net.MacAddress) -> transmitAck
    728:737:boolean transmitNak(android.net.dhcp.DhcpPacket,java.lang.String) -> transmitNak
    686:703:boolean transmitOffer(android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,android.net.MacAddress) -> transmitOffer
    742:751:boolean transmitOfferOrAckPacket(java.nio.ByteBuffer,android.net.dhcp.DhcpPacket,android.net.dhcp.DhcpLease,android.net.MacAddress,boolean) -> transmitOfferOrAckPacket
    757:759:boolean transmitPacket(java.nio.ByteBuffer,java.lang.String,java.net.Inet4Address) -> transmitPacket
    354:360:void updateParams(android.net.dhcp.DhcpServingParamsParcel,android.net.INetworkStackStatusCallback) -> updateParams
android.net.dhcp.DhcpServer$Clock -> android.net.dhcp.DhcpServer$Clock:
    143:143:void <init>() -> <init>
    148:148:long elapsedRealtime() -> elapsedRealtime
android.net.dhcp.DhcpServer$DependenciesImpl -> android.net.dhcp.DhcpServer$DependenciesImpl:
    201:201:void <init>(android.net.dhcp.DhcpServer) -> <init>
    201:201:void <init>(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpServer$1) -> <init>
    230:230:void addArpEntry(java.net.Inet4Address,android.net.MacAddress,java.lang.String,java.io.FileDescriptor) -> addArpEntry
    235:235:boolean isFeatureEnabled(android.content.Context,java.lang.String) -> isFeatureEnabled
    224:224:android.net.dhcp.DhcpServer$Clock makeClock() -> makeClock
    211:214:android.net.dhcp.DhcpLeaseRepository makeLeaseRepository(android.net.dhcp.DhcpServingParams,android.net.util.SharedLog,android.net.dhcp.DhcpServer$Clock) -> makeLeaseRepository
    219:219:android.net.dhcp.DhcpPacketListener makePacketListener(android.os.Handler) -> makePacketListener
    205:205:void sendPacket(java.io.FileDescriptor,java.nio.ByteBuffer,java.net.InetAddress) -> sendPacket
android.net.dhcp.DhcpServer$DhcpServerConnector -> android.net.dhcp.DhcpServer$DhcpServerConnector:
    286:286:void <init>(android.net.dhcp.DhcpServer) -> <init>
    286:286:void <init>(android.net.dhcp.DhcpServer,android.net.dhcp.DhcpServer$1) -> <init>
    289:290:void start(android.net.INetworkStackStatusCallback) -> start
    296:297:void startWithCallbacks(android.net.INetworkStackStatusCallback,android.net.dhcp.IDhcpEventCallbacks) -> startWithCallbacks
    309:310:void stop(android.net.INetworkStackStatusCallback) -> stop
    303:304:void updateParams(android.net.dhcp.DhcpServingParamsParcel,android.net.INetworkStackStatusCallback) -> updateParams
android.net.dhcp.DhcpServer$MalformedPacketException -> android.net.dhcp.DhcpServer$MalformedPacketException:
    241:241:void <init>(java.lang.String,java.lang.Throwable) -> <init>
android.net.dhcp.DhcpServer$PacketListener -> android.net.dhcp.DhcpServer$PacketListener:
    820:821:void <init>(android.net.dhcp.DhcpServer,android.os.Handler) -> <init>
    850:864:java.io.FileDescriptor createFd() -> createFd
    838:838:void logError(java.lang.String,java.lang.Exception) -> logError
    844:844:void logParseError(byte[],int,android.net.dhcp.DhcpPacket$ParseException) -> logParseError
    828:833:void onReceive(android.net.dhcp.DhcpPacket,java.net.Inet4Address,int) -> onReceive
android.net.dhcp.DhcpServer$RunningState -> android.net.dhcp.DhcpServer$RunningState:
    483:483:void <init>(android.net.dhcp.DhcpServer) -> <init>
    526:526:void logIgnoredPacketInvalidSubnet(android.net.dhcp.DhcpLeaseRepository$InvalidSubnetException) -> logIgnoredPacketInvalidSubnet
    582:608:void processDecline(android.net.dhcp.DhcpDeclinePacket) -> processDecline
    532:546:void processDiscover(android.net.dhcp.DhcpDiscoverPacket) -> processDiscover
    486:488:boolean processMessage(android.os.Message) -> processMessage
    498:520:void processPacket(android.net.dhcp.DhcpPacket) -> processPacket
    573:577:void processRelease(android.net.dhcp.DhcpReleasePacket) -> processRelease
    553:568:void processRequest(android.net.dhcp.DhcpRequestPacket) -> processRequest
android.net.dhcp.DhcpServer$StartedState -> android.net.dhcp.DhcpServer$StartedState:
    423:423:void <init>(android.net.dhcp.DhcpServer) -> <init>
    423:423:android.net.INetworkStackStatusCallback access$402(android.net.dhcp.DhcpServer$StartedState,android.net.INetworkStackStatusCallback) -> access$402
    428:450:void enter() -> enter
    478:479:void exit() -> exit
    455:468:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpServer$StoppedState -> android.net.dhcp.DhcpServer$StoppedState:
    395:395:void <init>(android.net.dhcp.DhcpServer) -> <init>
    395:395:android.net.INetworkStackStatusCallback access$1302(android.net.dhcp.DhcpServer$StoppedState,android.net.INetworkStackStatusCallback) -> access$1302
    400:401:void enter() -> enter
    406:415:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpServer$WaitBeforeRetrievalState -> android.net.dhcp.DhcpServer$WaitBeforeRetrievalState:
    613:613:void <init>(android.net.dhcp.DhcpServer) -> <init>
    616:631:boolean processMessage(android.os.Message) -> processMessage
android.net.dhcp.DhcpServingParams -> android.net.dhcp.DhcpServingParams:
    48:48:void <init>(android.net.LinkAddress,java.util.Set,java.util.Set,java.util.Set,long,int,boolean,java.net.Inet4Address,boolean,android.net.dhcp.DhcpServingParams$1) -> <init>
    114:123:void <init>(android.net.LinkAddress,java.util.Set,java.util.Set,java.util.Set,long,int,boolean,java.net.Inet4Address,boolean) -> <init>
    133:153:android.net.dhcp.DhcpServingParams fromParcelableObject(android.net.dhcp.DhcpServingParamsParcel) -> fromParcelableObject
    191:192:java.net.Inet4Address getBroadcastAddress() -> getBroadcastAddress
    180:180:java.net.Inet4Address getPrefixMaskAsAddress() -> getPrefixMaskAsAddress
    170:170:java.net.Inet4Address getServerInet4Addr() -> getServerInet4Addr
    416:416:android.net.IpPrefix makeIpPrefix(android.net.LinkAddress) -> makeIpPrefix
    158:163:java.util.Set toInet4AddressSet(int[]) -> toInet4AddressSet
android.net.dhcp.DhcpServingParams$Builder -> android.net.dhcp.DhcpServingParams$Builder:
    199:205:void <init>() -> <init>
    363:406:android.net.dhcp.DhcpServingParams build() -> build
    349:349:android.net.dhcp.DhcpServingParams$Builder setChangePrefixOnDecline(boolean) -> setChangePrefixOnDecline
    227:227:android.net.dhcp.DhcpServingParams$Builder setDefaultRouters(java.util.Set) -> setDefaultRouters
    307:307:android.net.dhcp.DhcpServingParams$Builder setDhcpLeaseTimeSecs(long) -> setDhcpLeaseTimeSecs
    257:257:android.net.dhcp.DhcpServingParams$Builder setDnsServers(java.util.Set) -> setDnsServers
    287:287:android.net.dhcp.DhcpServingParams$Builder setExcludedAddrs(java.util.Set) -> setExcludedAddrs
    318:318:android.net.dhcp.DhcpServingParams$Builder setLinkMtu(int) -> setLinkMtu
    328:328:android.net.dhcp.DhcpServingParams$Builder setMetered(boolean) -> setMetered
    216:216:android.net.dhcp.DhcpServingParams$Builder setServerAddr(android.net.LinkAddress) -> setServerAddr
    338:338:android.net.dhcp.DhcpServingParams$Builder setSingleClientAddr(java.net.Inet4Address) -> setSingleClientAddr
android.net.dhcp.DhcpServingParams$InvalidParameterException -> android.net.dhcp.DhcpServingParams$InvalidParameterException:
    106:106:void <init>(java.lang.String) -> <init>
android.net.dhcp.DhcpServingParamsParcel -> android.net.dhcp.DhcpServingParamsParcel:
    17:17:void <clinit>() -> <clinit>
    5:16:void <init>() -> <init>
    50:79:void readFromParcel(android.os.Parcel) -> readFromParcel
    83:94:java.lang.String toString() -> toString
    31:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.dhcp.DhcpServingParamsParcel$1 -> android.net.dhcp.DhcpServingParamsParcel$1:
    17:17:void <init>() -> <init>
    17:17:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    20:21:android.net.dhcp.DhcpServingParamsParcel createFromParcel(android.os.Parcel) -> createFromParcel
    17:17:java.lang.Object[] newArray(int) -> newArray
    26:26:android.net.dhcp.DhcpServingParamsParcel[] newArray(int) -> newArray
android.net.dhcp.IDhcpEventCallbacks -> android.net.dhcp.IDhcpEventCallbacks:
    250:250:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpEventCallbacks$Stub -> android.net.dhcp.IDhcpEventCallbacks$Stub:
    54:58:android.net.dhcp.IDhcpEventCallbacks asInterface(android.os.IBinder) -> asInterface
    247:247:android.net.dhcp.IDhcpEventCallbacks getDefaultImpl() -> getDefaultImpl
android.net.dhcp.IDhcpEventCallbacks$Stub$Proxy -> android.net.dhcp.IDhcpEventCallbacks$Stub$Proxy:
    122:126:void <init>(android.os.IBinder) -> <init>
    129:129:android.os.IBinder asBinder() -> asBinder
    137:154:void onLeasesChanged(java.util.List) -> onLeasesChanged
    158:181:void onNewPrefixRequest(android.net.IpPrefix) -> onNewPrefixRequest
android.net.dhcp.IDhcpServer -> android.net.dhcp.IDhcpServer:
    323:323:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpServer$Stub -> android.net.dhcp.IDhcpServer$Stub:
    49:50:void <init>() -> <init>
    73:141:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.dhcp.IDhcpServerCallbacks -> android.net.dhcp.IDhcpServerCallbacks:
    210:210:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpServerCallbacks$Stub -> android.net.dhcp.IDhcpServerCallbacks$Stub:
    52:56:android.net.dhcp.IDhcpServerCallbacks asInterface(android.os.IBinder) -> asInterface
    207:207:android.net.dhcp.IDhcpServerCallbacks getDefaultImpl() -> getDefaultImpl
android.net.dhcp.IDhcpServerCallbacks$Stub$Proxy -> android.net.dhcp.IDhcpServerCallbacks$Stub$Proxy:
    109:113:void <init>(android.os.IBinder) -> <init>
    116:116:android.os.IBinder asBinder() -> asBinder
    168:186:java.lang.String getInterfaceHash() -> getInterfaceHash
    146:164:int getInterfaceVersion() -> getInterfaceVersion
    124:142:void onDhcpServerCreated(int,android.net.dhcp.IDhcpServer) -> onDhcpServerCreated
android.net.ip.ConnectivityPacketTracker -> android.net.ip.ConnectivityPacketTracker:
    75:85:void <init>(android.os.Handler,android.net.util.InterfaceParams,android.net.networkstack.util.LocalLog) -> <init>
    61:61:android.net.networkstack.util.TokenBucket access$000(android.net.ip.ConnectivityPacketTracker) -> access$000
    61:61:long access$100(android.net.ip.ConnectivityPacketTracker) -> access$100
    61:61:long access$102(android.net.ip.ConnectivityPacketTracker,long) -> access$102
    61:61:java.lang.String access$200(android.net.ip.ConnectivityPacketTracker) -> access$200
    61:61:android.net.networkstack.util.LocalLog access$300(android.net.ip.ConnectivityPacketTracker) -> access$300
    61:61:boolean access$400(android.net.ip.ConnectivityPacketTracker) -> access$400
    61:61:java.lang.String access$500(android.net.ip.ConnectivityPacketTracker) -> access$500
    89:91:void start(java.lang.String) -> start
    95:97:void stop() -> stop
android.net.ip.ConnectivityPacketTracker$PacketListener -> android.net.ip.ConnectivityPacketTracker$PacketListener:
    103:105:void <init>(android.net.ip.ConnectivityPacketTracker,android.os.Handler,android.net.util.InterfaceParams) -> <init>
    173:173:void addLogEntry(java.lang.String) -> addLogEntry
    112:117:java.io.FileDescriptor createFd() -> createFd
    100:100:void handlePacket(java.lang.Object,int) -> handlePacket
    125:146:void handlePacket(byte[],int) -> handlePacket
    168:169:void logError(java.lang.String,java.lang.Exception) -> logError
    151:154:void onStart() -> onStart
    159:163:void onStop() -> onStop
android.net.ip.IIpClient -> android.net.ip.IIpClient:
    721:721:void <clinit>() -> <clinit>
android.net.ip.IIpClient$Stub -> android.net.ip.IIpClient$Stub:
    82:83:void <init>() -> <init>
    106:276:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.ip.IIpClientCallbacks -> android.net.ip.IIpClientCallbacks:
    668:668:void <clinit>() -> <clinit>
android.net.ip.IIpClientCallbacks$Stub -> android.net.ip.IIpClientCallbacks$Stub:
    91:95:android.net.ip.IIpClientCallbacks asInterface(android.os.IBinder) -> asInterface
    665:665:android.net.ip.IIpClientCallbacks getDefaultImpl() -> getDefaultImpl
android.net.ip.IIpClientCallbacks$Stub$Proxy -> android.net.ip.IIpClientCallbacks$Stub$Proxy:
    262:266:void <init>(android.os.IBinder) -> <init>
    269:269:android.os.IBinder asBinder() -> asBinder
    613:631:java.lang.String getInterfaceHash() -> getInterfaceHash
    591:609:int getInterfaceVersion() -> getInterfaceVersion
    487:504:void installPacketFilter(byte[]) -> installPacketFilter
    277:294:void onIpClientCreated(android.net.ip.IIpClient) -> onIpClientCreated
    419:442:void onLinkPropertiesChange(android.net.LinkProperties) -> onLinkPropertiesChange
    338:361:void onNewDhcpResults(android.net.DhcpResultsParcelable) -> onNewDhcpResults
    318:334:void onPostDhcpAction() -> onPostDhcpAction
    298:314:void onPreDhcpAction() -> onPreDhcpAction
    570:587:void onPreconnectionStart(java.util.List) -> onPreconnectionStart
    392:415:void onProvisioningFailure(android.net.LinkProperties) -> onProvisioningFailure
    365:388:void onProvisioningSuccess(android.net.LinkProperties) -> onProvisioningSuccess
    467:483:void onQuit() -> onQuit
    446:463:void onReachabilityLost(java.lang.String) -> onReachabilityLost
    528:545:void setFallbackMulticastFilter(boolean) -> setFallbackMulticastFilter
    549:566:void setNeighborDiscoveryOffload(boolean) -> setNeighborDiscoveryOffload
    508:524:void startReadPacketFilter() -> startReadPacketFilter
android.net.ip.InterfaceController -> android.net.ip.InterfaceController:
    48:51:void <init>(java.lang.String,android.net.INetd,android.net.util.SharedLog) -> <init>
    166:166:boolean addAddress(android.net.LinkAddress) -> addAddress
    174:176:boolean addAddress(java.net.InetAddress,int) -> addAddress
    200:202:boolean clearAllAddresses() -> clearAllAddresses
    100:100:boolean clearIPv4Address() -> clearIPv4Address
    124:124:boolean disableIPv6() -> disableIPv6
    117:117:boolean enableIPv6() -> enableIPv6
    209:209:void logError(java.lang.String,java.lang.Object[]) -> logError
    105:107:boolean setEnableIPv6(boolean) -> setEnableIPv6
    93:93:boolean setIPv4Address(android.net.LinkAddress) -> setIPv4Address
    149:155:boolean setIPv6AddrGenModeIfSupported(int) -> setIPv6AddrGenModeIfSupported
    133:135:boolean setIPv6PrivacyExtensions(boolean) -> setIPv6PrivacyExtensions
    59:83:boolean setInterfaceConfiguration(android.net.LinkAddress,java.lang.Boolean) -> setInterfaceConfiguration
android.net.ip.IpClient -> android.net.ip.IpClient:
    153:478:void <clinit>() -> <clinit>
    624:624:void <init>(android.content.Context,java.lang.String,android.net.ip.IIpClientCallbacks,com.android.server.NetworkObserverRegistry,com.android.server.NetworkStackService$NetworkStackServiceManager) -> <init>
    161:739:void <init>(android.content.Context,java.lang.String,android.net.ip.IIpClientCallbacks,com.android.server.NetworkObserverRegistry,com.android.server.NetworkStackService$NetworkStackServiceManager,android.net.ip.IpClient$Dependencies) -> <init>
    149:149:java.lang.String access$100(android.net.ip.IpClient) -> access$100
    149:149:void access$1000(android.net.ip.IpClient) -> access$1000
    149:149:long access$1100(android.net.ip.IpClient) -> access$1100
    149:149:long access$1102(android.net.ip.IpClient,long) -> access$1102
    149:149:android.net.LinkProperties access$1200(android.net.ip.IpClient) -> access$1200
    149:149:void access$1300(android.net.ip.IpClient,int) -> access$1300
    149:149:void access$1400(android.net.ip.IpClient) -> access$1400
    149:149:android.net.shared.ProvisioningConfiguration access$1500(android.net.ip.IpClient) -> access$1500
    149:149:android.net.shared.ProvisioningConfiguration access$1502(android.net.ip.IpClient,android.net.shared.ProvisioningConfiguration) -> access$1502
    149:149:android.net.networkstack.util.State access$1600(android.net.ip.IpClient) -> access$1600
    149:149:boolean access$1700(android.net.ip.IpClient,boolean) -> access$1700
    149:149:java.lang.String access$1802(android.net.ip.IpClient,java.lang.String) -> access$1802
    149:149:android.net.ProxyInfo access$1902(android.net.ip.IpClient,android.net.ProxyInfo) -> access$1902
    149:149:java.lang.String access$200(android.net.ip.IpClient) -> access$200
    149:149:java.lang.String access$2002(android.net.ip.IpClient,java.lang.String) -> access$2002
    149:149:java.lang.String access$2102(android.net.ip.IpClient,java.lang.String) -> access$2102
    149:149:boolean access$2200(android.net.ip.IpClient) -> access$2200
    149:149:boolean access$2202(android.net.ip.IpClient,boolean) -> access$2202
    149:149:void access$2300(android.net.ip.IpClient,java.lang.String,java.lang.Object[]) -> access$2300
    149:149:android.net.ip.IpClient$MessageHandlingLogger access$2400(android.net.ip.IpClient) -> access$2400
    149:149:android.net.dhcp.DhcpClient access$2500(android.net.ip.IpClient) -> access$2500
    149:149:android.net.dhcp.DhcpClient access$2502(android.net.ip.IpClient,android.net.dhcp.DhcpClient) -> access$2502
    149:149:void access$2600(android.net.ip.IpClient) -> access$2600
    149:149:android.net.networkstack.util.State access$2700(android.net.ip.IpClient) -> access$2700
    149:149:android.net.ip.InterfaceController access$2800(android.net.ip.IpClient) -> access$2800
    149:149:android.net.util.InterfaceParams access$2900(android.net.ip.IpClient) -> access$2900
    149:149:android.net.util.InterfaceParams access$2902(android.net.ip.IpClient,android.net.util.InterfaceParams) -> access$2902
    149:149:java.util.Set access$300(android.net.ip.IpClient) -> access$300
    149:149:android.net.ip.IpClient$Dependencies access$3000(android.net.ip.IpClient) -> access$3000
    149:149:void access$3100(android.net.ip.IpClient,int) -> access$3100
    149:149:boolean access$3200(android.net.ip.IpClient) -> access$3200
    149:149:android.net.networkstack.util.State access$3300(android.net.ip.IpClient) -> access$3300
    149:149:android.net.networkstack.util.State access$3400(android.net.ip.IpClient) -> access$3400
    149:149:void access$3500(android.net.ip.IpClient) -> access$3500
    149:149:com.android.networkstack.metrics.IpProvisioningMetrics access$3600(android.net.ip.IpClient) -> access$3600
    149:149:android.net.networkstack.util.WakeupMessage access$3700(android.net.ip.IpClient) -> access$3700
    149:149:void access$3800(android.net.ip.IpClient,android.stats.connectivity.DisconnectCode) -> access$3800
    149:149:void access$3900(android.net.ip.IpClient,android.net.Layer2InformationParcelable) -> access$3900
    149:149:java.lang.String access$400(android.net.ip.IpClient) -> access$400
    149:149:void access$4000(android.net.ip.IpClient,android.stats.connectivity.DisconnectCode) -> access$4000
    149:149:android.content.Context access$4100(android.net.ip.IpClient) -> access$4100
    149:149:int access$4200(android.net.ip.IpClient) -> access$4200
    149:149:android.net.apf.ApfFilter access$4300(android.net.ip.IpClient) -> access$4300
    149:149:android.net.apf.ApfFilter access$4302(android.net.ip.IpClient,android.net.apf.ApfFilter) -> access$4302
    149:149:boolean access$4400(android.net.ip.IpClient) -> access$4400
    149:149:boolean access$4500(android.net.ip.IpClient) -> access$4500
    149:149:boolean access$4600(android.net.ip.IpClient,android.net.shared.InitialConfiguration) -> access$4600
    149:149:boolean access$4700(android.net.ip.IpClient) -> access$4700
    149:149:android.net.ip.IpReachabilityMonitor access$4800(android.net.ip.IpClient) -> access$4800
    149:149:android.net.ip.IpReachabilityMonitor access$4802(android.net.ip.IpClient,android.net.ip.IpReachabilityMonitor) -> access$4802
    149:149:android.net.networkstack.util.LocalLog access$4900(android.net.ip.IpClient) -> access$4900
    149:149:android.net.util.SharedLog access$500(android.net.ip.IpClient) -> access$500
    149:149:android.net.networkstack.util.WakeupMessage access$5000(android.net.ip.IpClient) -> access$5000
    149:149:android.os.ConditionVariable access$5100(android.net.ip.IpClient) -> access$5100
    149:149:void access$5200(android.net.ip.IpClient,int,android.net.LinkProperties) -> access$5200
    149:149:void access$5300(android.net.ip.IpClient,android.net.networkstack.DhcpResults) -> access$5300
    149:149:void access$5400(android.net.ip.IpClient) -> access$5400
    149:149:void access$600(android.net.ip.IpClient) -> access$600
    149:149:void access$700(android.net.ip.IpClient,int) -> access$700
    149:149:boolean access$802(android.net.ip.IpClient,boolean) -> access$802
    149:149:android.net.ip.IpClientLinkObserver access$900(android.net.ip.IpClient) -> access$900
    1497:1499:void addAllReachableDnsServers(android.net.LinkProperties,java.lang.Iterable) -> addAllReachableDnsServers
    1013:1013:void addKeepalivePacketFilter(int,android.net.TcpKeepalivePacketDataParcelable) -> addKeepalivePacketFilter
    1022:1022:void addNattKeepalivePacketFilter(int,android.net.NattKeepalivePacketDataParcelable) -> addNattKeepalivePacketFilter
    1765:1766:boolean applyInitialConfig(android.net.shared.InitialConfiguration) -> applyInitialConfig
    1396:1466:android.net.LinkProperties assembleLinkProperties() -> assembleLinkProperties
    1641:1652:boolean checkIfOuiAndTypeMatched(android.net.shared.ProvisioningConfiguration$ScanResultInfo,java.util.List) -> checkIfOuiAndTypeMatched
    1242:1332:int compareProvisioning(android.net.LinkProperties,android.net.LinkProperties) -> compareProvisioning
    958:958:void completedPreDhcpAction() -> completedPreDhcpAction
    843:853:void configureAndStartStateMachine() -> configureAndStartStateMachine
    949:949:void confirmConfiguration() -> confirmConfiguration
    1664:1672:boolean detectUpstreamHotspotFromVendorIe() -> detectUpstreamHotspotFromVendorIe
    1350:1366:void dispatchCallback(int,android.net.LinkProperties) -> dispatchCallback
    1733:1735:void doImmediateProvisioningFailure(int) -> doImmediateProvisioningFailure
    1053:1122:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    170:189:void dumpAllLogs(java.io.PrintWriter,java.util.Set) -> dumpAllLogs
    2538:2538:java.util.List findAll(java.util.Collection,java.util.function.Predicate) -> findAll
    838:838:java.lang.String getInterfaceName() -> getInterfaceName
    1545:1548:java.net.Inet6Address getIpv6LinkLocalAddress(android.net.LinkProperties) -> getIpv6LinkLocalAddress
    1137:1148:java.lang.String getLogRecString(android.os.Message) -> getLogRecString
    1630:1633:java.util.List getVendorSpecificIEs(android.net.shared.ProvisioningConfiguration$ScanResultInfo) -> getVendorSpecificIEs
    1132:1132:java.lang.String getWhatToString(int) -> getWhatToString
    1701:1708:void handleIPv4Failure() -> handleIPv4Failure
    1676:1691:void handleIPv4Success(android.net.networkstack.DhcpResults) -> handleIPv4Success
    1592:1615:boolean handleLinkPropertiesUpdate(boolean) -> handleLinkPropertiesUpdate
    1712:1728:void handleProvisioningFailure(android.stats.connectivity.DisconnectCode) -> handleProvisioningFailure
    1840:1881:void handleUpdateL2Information(android.net.Layer2InformationParcelable) -> handleUpdateL2Information
    871:871:boolean isGratuitousArpNaRoamingEnabled() -> isGratuitousArpNaRoamingEnabled
    866:866:boolean isGratuitousNaEnabled() -> isGratuitousNaEnabled
    1485:1485:boolean isParseableUrl(java.lang.String) -> isParseableUrl
    1207:1216:boolean isProvisioned(android.net.LinkProperties,android.net.shared.InitialConfiguration) -> isProvisioned
    1999:1999:boolean isUsingPreconnection() -> isUsingPreconnection
    2020:2020:int lambda$maybeFilterCustomizedDhcpOptions$1(android.net.networkstack.aidl.dhcp.DhcpOption,android.net.networkstack.aidl.dhcp.DhcpOption) -> lambda$maybeFilterCustomizedDhcpOptions$1
    669:669:void lambda$new$0(boolean) -> lambda$new$0
    1165:1165:void logError(java.lang.String,java.lang.Throwable,java.lang.Object[]) -> logError
    1169:1169:void logError(java.lang.String,java.lang.Object[]) -> logError
    746:746:android.net.ip.IIpClient makeConnector() -> makeConnector
    2007:2019:java.util.List maybeFilterCustomizedDhcpOptions() -> maybeFilterCustomizedDhcpOptions
    1814:1834:void maybeRestoreInterfaceMtu() -> maybeRestoreInterfaceMtu
    1578:1585:void maybeSendGratuitousARP(android.net.LinkProperties) -> maybeSendGratuitousARP
    1554:1573:void maybeSendGratuitousNAs(android.net.LinkProperties,boolean) -> maybeSendGratuitousNAs
    1039:1039:void notifyPreconnectionComplete(boolean) -> notifyPreconnectionComplete
    904:905:void onQuitting() -> onQuitting
    965:965:void readPacketFilterComplete(byte[]) -> readPacketFilterComplete
    1157:1159:boolean recordLogRec(android.os.Message) -> recordLogRec
    1190:1193:void recordMetric(int) -> recordMetric
    1622:1624:java.lang.String removeDoubleQuotes(java.lang.String) -> removeDoubleQuotes
    1030:1030:void removeKeepalivePacketFilter(int) -> removeKeepalivePacketFilter
    1177:1184:void resetLinkProperties() -> resetLinkProperties
    1229:1231:void restartIpv6WithAcceptRaDisabled() -> restartIpv6WithAcceptRaDisabled
    1533:1541:void sendGratuitousARP(java.net.Inet4Address) -> sendGratuitousARP
    1520:1529:void sendGratuitousNA(java.net.Inet6Address,java.net.Inet6Address) -> sendGratuitousNA
    997:997:void setHttpProxy(android.net.ProxyInfo) -> setHttpProxy
    876:893:void setInitialBssid(android.net.shared.ProvisioningConfiguration) -> setInitialBssid
    1221:1224:void setIpv6AcceptRa(int) -> setIpv6AcceptRa
    985:986:void setL2KeyAndCluster(java.lang.String,java.lang.String) -> setL2KeyAndCluster
    1375:1388:int setLinkProperties(android.net.LinkProperties) -> setLinkProperties
    1005:1005:void setMulticastFilter(boolean) -> setMulticastFilter
    975:975:void setTcpBufferSizes(java.lang.String) -> setTcpBufferSizes
    898:898:boolean shouldDisableAcceptRaOnProvisioningLoss() -> shouldDisableAcceptRaOnProvisioningLoss
    912:913:void shutdown() -> shutdown
    2026:2039:void startDhcpClient() -> startDhcpClient
    1741:1751:boolean startIPv4() -> startIPv4
    1758:1760:boolean startIPv6() -> startIPv6
    1774:1796:boolean startIpReachabilityMonitor() -> startIpReachabilityMonitor
    920:930:void startProvisioning(android.net.shared.ProvisioningConfiguration) -> startProvisioning
    857:857:void startStateMachineUpdaters() -> startStateMachineUpdaters
    942:942:void stop() -> stop
    1805:1806:void stopAllIP() -> stopAllIP
    861:862:void stopStateMachineUpdaters() -> stopStateMachineUpdaters
    1198:1199:void transitionToStoppingState(android.stats.connectivity.DisconnectCode) -> transitionToStoppingState
    1508:1515:void transmitPacket(java.nio.ByteBuffer,java.net.SocketAddress,java.lang.String) -> transmitPacket
    1046:1046:void updateLayer2Information(android.net.Layer2InformationParcelable) -> updateLayer2Information
android.net.ip.IpClient$$ExternalSyntheticBackport0 -> android.net.ip.IpClient$$ExternalSyntheticBackport0:
    java.util.Map android.net.ip.IpClient$$InternalSyntheticBackport$0$d9096e684ab6018a33e5ad9e8181eff5c57caa09cb3c3963fd416baddfc7fc01$0.m(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> m
android.net.ip.IpClient$$ExternalSyntheticBackport1 -> android.net.ip.IpClient$$ExternalSyntheticBackport1:
    java.util.Map android.net.ip.IpClient$$InternalSyntheticBackport$1$2917fd9caef124067f4906d58cf2d987e1cbc169237a0ee68ed303a2fffd0c01$0.m(java.util.Map$Entry[]) -> m
android.net.ip.IpClient$$ExternalSyntheticLambda2 -> android.net.ip.IpClient$$ExternalSyntheticLambda2:
    android.net.ip.IpClient android.net.ip.IpClient$$InternalSyntheticLambda$0$d97aef024a02897e1a5629f5ca3677c4f951f4ff5116be12a8130147c6817087$0.f$0 -> f$0
    void android.net.ip.IpClient$$InternalSyntheticLambda$0$d97aef024a02897e1a5629f5ca3677c4f951f4ff5116be12a8130147c6817087$0.<init>(android.net.ip.IpClient) -> <init>
    void android.net.ip.IpClient$$InternalSyntheticLambda$0$d97aef024a02897e1a5629f5ca3677c4f951f4ff5116be12a8130147c6817087$0.update(boolean) -> update
android.net.ip.IpClient$$ExternalSyntheticLambda3 -> android.net.ip.IpClient$$ExternalSyntheticLambda3:
    android.net.ip.IpClient$$InternalSyntheticLambda$1$87674e14c55e75e303c2c9fd8e6048ce964e6fbeff9d00d7b58cd1231fe23653$0 android.net.ip.IpClient$$InternalSyntheticLambda$1$87674e14c55e75e303c2c9fd8e6048ce964e6fbeff9d00d7b58cd1231fe23653$0.INSTANCE -> INSTANCE
    void android.net.ip.IpClient$$InternalSyntheticLambda$1$87674e14c55e75e303c2c9fd8e6048ce964e6fbeff9d00d7b58cd1231fe23653$0.<clinit>() -> <clinit>
    void android.net.ip.IpClient$$InternalSyntheticLambda$1$87674e14c55e75e303c2c9fd8e6048ce964e6fbeff9d00d7b58cd1231fe23653$0.<init>() -> <init>
    int android.net.ip.IpClient$$InternalSyntheticLambda$1$87674e14c55e75e303c2c9fd8e6048ce964e6fbeff9d00d7b58cd1231fe23653$0.compare(java.lang.Object,java.lang.Object) -> compare
android.net.ip.IpClient$$ExternalSyntheticLambda4 -> android.net.ip.IpClient$$ExternalSyntheticLambda4:
    android.net.ip.IpClient$$InternalSyntheticLambda$1$b90e1c482ade5e1f04fd05fac7c0eaa4850e770abd144b693eb43bbcdc6dc376$0 android.net.ip.IpClient$$InternalSyntheticLambda$1$b90e1c482ade5e1f04fd05fac7c0eaa4850e770abd144b693eb43bbcdc6dc376$0.INSTANCE -> INSTANCE
    void android.net.ip.IpClient$$InternalSyntheticLambda$1$b90e1c482ade5e1f04fd05fac7c0eaa4850e770abd144b693eb43bbcdc6dc376$0.<clinit>() -> <clinit>
    void android.net.ip.IpClient$$InternalSyntheticLambda$1$b90e1c482ade5e1f04fd05fac7c0eaa4850e770abd144b693eb43bbcdc6dc376$0.<init>() -> <init>
    boolean android.net.ip.IpClient$$InternalSyntheticLambda$1$b90e1c482ade5e1f04fd05fac7c0eaa4850e770abd144b693eb43bbcdc6dc376$0.test(java.lang.Object) -> test
android.net.ip.IpClient$1 -> android.net.ip.IpClient$1:
    672:672:void <init>(android.net.ip.IpClient,android.content.Context,android.os.Handler,java.lang.String,android.net.ip.IpClientLinkObserver$Callback,android.net.ip.IpClientLinkObserver$Configuration,android.net.util.SharedLog) -> <init>
    721:721:void lambda$logMsg$0(java.lang.String) -> lambda$logMsg$0
    720:721:void logMsg(java.lang.String) -> logMsg
    675:683:void onInterfaceAdded(java.lang.String) -> onInterfaceAdded
    706:715:void onInterfaceAddressRemoved(android.net.LinkAddress,java.lang.String) -> onInterfaceAddressRemoved
    688:701:void onInterfaceRemoved(java.lang.String) -> onInterfaceRemoved
android.net.ip.IpClient$1$$ExternalSyntheticLambda0 -> android.net.ip.IpClient$1$$ExternalSyntheticLambda0:
    android.net.ip.IpClient$1 android.net.ip.IpClient$1$$InternalSyntheticLambda$2$02ef9f3e4c4912d5c01da019eefdaf045f955e443b418657f9927afc4a32567f$0.f$0 -> f$0
    java.lang.String android.net.ip.IpClient$1$$InternalSyntheticLambda$2$02ef9f3e4c4912d5c01da019eefdaf045f955e443b418657f9927afc4a32567f$0.f$1 -> f$1
    void android.net.ip.IpClient$1$$InternalSyntheticLambda$2$02ef9f3e4c4912d5c01da019eefdaf045f955e443b418657f9927afc4a32567f$0.<init>(android.net.ip.IpClient$1,java.lang.String) -> <init>
    void android.net.ip.IpClient$1$$InternalSyntheticLambda$2$02ef9f3e4c4912d5c01da019eefdaf045f955e443b418657f9927afc4a32567f$0.run() -> run
android.net.ip.IpClient$2 -> android.net.ip.IpClient$2:
    1779:1779:void <init>(android.net.ip.IpClient) -> <init>
    1782:1782:void notifyLost(java.net.InetAddress,java.lang.String) -> notifyLost
android.net.ip.IpClient$ClearingIpAddressesState -> android.net.ip.IpClient$ClearingIpAddressesState:
    2042:2042:void <init>(android.net.ip.IpClient) -> <init>
    2047:2067:void enter() -> enter
    2072:2095:boolean processMessage(android.os.Message) -> processMessage
    2101:2101:boolean readyToProceed() -> readyToProceed
android.net.ip.IpClient$Dependencies -> android.net.ip.IpClient$Dependencies:
    543:543:void <init>() -> <init>
    586:586:int getDeviceConfigPropertyInt(java.lang.String,int) -> getDeviceConfigPropertyInt
    579:579:android.net.dhcp.DhcpClient$Dependencies getDhcpClientDependencies(android.net.NetworkStackIpMemoryStore,com.android.networkstack.metrics.IpProvisioningMetrics) -> getDhcpClientDependencies
    548:548:android.net.util.InterfaceParams getInterfaceParams(java.lang.String) -> getInterfaceParams
    594:594:android.net.metrics.IpConnectivityLog getIpConnectivityLog() -> getIpConnectivityLog
    563:563:android.net.NetworkStackIpMemoryStore getIpMemoryStore(android.content.Context,com.android.server.NetworkStackService$NetworkStackServiceManager) -> getIpMemoryStore
    555:555:android.net.INetd getNetd(android.content.Context) -> getNetd
    598:598:com.android.networkstack.metrics.NetworkQuirkMetrics getNetworkQuirkMetrics() -> getNetworkQuirkMetrics
    607:607:boolean isFeatureEnabled(android.content.Context,java.lang.String,boolean) -> isFeatureEnabled
    571:571:android.net.dhcp.DhcpClient makeDhcpClient(android.content.Context,android.net.networkstack.util.StateMachine,android.net.util.InterfaceParams,android.net.dhcp.DhcpClient$Dependencies) -> makeDhcpClient
    618:618:android.net.apf.ApfFilter maybeCreateApfFilter(android.content.Context,android.net.apf.ApfFilter$ApfConfiguration,android.net.util.InterfaceParams,android.net.ip.IpClient$IpClientCallbacksWrapper) -> maybeCreateApfFilter
android.net.ip.IpClient$IpClientCallbacksWrapper -> android.net.ip.IpClient$IpClientCallbacksWrapper:
    222:225:void <init>(android.net.ip.IIpClientCallbacks,android.net.util.SharedLog,com.android.networkstack.apishim.common.NetworkInformationShim) -> <init>
    339:343:void installPacketFilter(byte[]) -> installPacketFilter
    229:229:void log(java.lang.String) -> log
    233:233:void log(java.lang.String,java.lang.Throwable) -> log
    302:306:void onLinkPropertiesChange(android.net.LinkProperties) -> onLinkPropertiesChange
    266:270:void onNewDhcpResults(android.net.networkstack.DhcpResults) -> onNewDhcpResults
    254:258:void onPostDhcpAction() -> onPostDhcpAction
    241:245:void onPreDhcpAction() -> onPreDhcpAction
    390:394:void onPreconnectionStart(java.util.List) -> onPreconnectionStart
    290:294:void onProvisioningFailure(android.net.LinkProperties) -> onProvisioningFailure
    278:282:void onProvisioningSuccess(android.net.LinkProperties) -> onProvisioningSuccess
    327:331:void onQuit() -> onQuit
    315:319:void onReachabilityLost(java.lang.String) -> onReachabilityLost
    365:369:void setFallbackMulticastFilter(boolean) -> setFallbackMulticastFilter
    378:382:void setNeighborDiscoveryOffload(boolean) -> setNeighborDiscoveryOffload
    352:356:void startReadPacketFilter() -> startReadPacketFilter
android.net.ip.IpClient$IpClientConnector -> android.net.ip.IpClient$IpClientConnector:
    749:749:void <init>(android.net.ip.IpClient) -> <init>
    802:803:void addKeepalivePacketFilter(int,android.net.TcpKeepalivePacketDataParcelable) -> addKeepalivePacketFilter
    807:808:void addNattKeepalivePacketFilter(int,android.net.NattKeepalivePacketDataParcelable) -> addNattKeepalivePacketFilter
    752:753:void completedPreDhcpAction() -> completedPreDhcpAction
    757:758:void confirmConfiguration() -> confirmConfiguration
    817:818:void notifyPreconnectionComplete(boolean) -> notifyPreconnectionComplete
    762:763:void readPacketFilterComplete(byte[]) -> readPacketFilterComplete
    812:813:void removeKeepalivePacketFilter(int) -> removeKeepalivePacketFilter
    792:793:void setHttpProxy(android.net.ProxyInfo) -> setHttpProxy
    782:783:void setL2KeyAndGroupHint(java.lang.String,java.lang.String) -> setL2KeyAndGroupHint
    797:798:void setMulticastFilter(boolean) -> setMulticastFilter
    787:788:void setTcpBufferSizes(java.lang.String) -> setTcpBufferSizes
    767:768:void shutdown() -> shutdown
    772:773:void startProvisioning(android.net.ProvisioningConfigurationParcelable) -> startProvisioning
    777:778:void stop() -> stop
    822:823:void updateLayer2Information(android.net.Layer2InformationParcelable) -> updateLayer2Information
android.net.ip.IpClient$MessageHandlingLogger -> android.net.ip.IpClient$MessageHandlingLogger:
    2486:2486:void <init>() -> <init>
    2486:2486:void <init>(android.net.ip.IpClient$1) -> <init>
    2496:2497:void handled(android.net.networkstack.util.State,android.net.networkstack.util.IState) -> handled
    2491:2492:void reset() -> reset
    2501:2501:java.lang.String toString() -> toString
android.net.ip.IpClient$PreconnectingState -> android.net.ip.IpClient$PreconnectingState:
    2105:2105:void <init>(android.net.ip.IpClient) -> <init>
    2108:2108:void enter() -> enter
    2113:2135:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpClient$RunningState -> android.net.ip.IpClient$RunningState:
    2200:2200:void <init>(android.net.ip.IpClient) -> <init>
    2293:2294:android.net.ip.ConnectivityPacketTracker createPacketTracker() -> createPacketTracker
    2288:2288:void enqueueJumpToStoppingState(android.stats.connectivity.DisconnectCode) -> enqueueJumpToStoppingState
    2301:2306:void ensureDhcpAction() -> ensureDhcpAction
    2206:2255:void enter() -> enter
    2262:2284:void exit() -> exit
    2320:2481:boolean processMessage(android.os.Message) -> processMessage
    2311:2314:void stopDhcpAction() -> stopDhcpAction
android.net.ip.IpClient$StartedState -> android.net.ip.IpClient$StartedState:
    2141:2141:void <init>(android.net.ip.IpClient) -> <init>
    2144:2149:void enter() -> enter
    2155:2159:void exit() -> exit
    2164:2195:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpClient$StoppedState -> android.net.ip.IpClient$StoppedState:
    1884:1884:void <init>(android.net.ip.IpClient) -> <init>
    1887:1899:void enter() -> enter
    1905:1953:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpClient$StoppingState -> android.net.ip.IpClient$StoppingState:
    1958:1958:void <init>(android.net.ip.IpClient) -> <init>
    1961:1967:void enter() -> enter
    1972:1993:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpClientLinkObserver -> android.net.ip.IpClientLinkObserver:
    124:136:void <init>(android.content.Context,android.os.Handler,java.lang.String,android.net.ip.IpClientLinkObserver$Callback,android.net.ip.IpClientLinkObserver$Configuration,android.net.util.SharedLog) -> <init>
    83:83:android.app.AlarmManager access$000(android.net.ip.IpClientLinkObserver) -> access$000
    83:83:android.net.LinkProperties access$100(android.net.ip.IpClientLinkObserver) -> access$100
    83:83:boolean access$200(android.net.ip.IpClientLinkObserver) -> access$200
    83:83:android.net.ip.IpClientLinkObserver$Callback access$300(android.net.ip.IpClientLinkObserver) -> access$300
    298:298:void clearInterfaceParams() -> clearInterfaceParams
    277:281:void clearLinkProperties() -> clearLinkProperties
    284:284:boolean getInterfaceLinkStateLocked() -> getInterfaceLinkStateLocked
    267:267:android.net.LinkProperties getLinkProperties() -> getLinkProperties
    201:210:void onInterfaceAddressRemoved(android.net.LinkAddress,java.lang.String) -> onInterfaceAddressRemoved
    185:194:void onInterfaceAddressUpdated(android.net.LinkAddress,java.lang.String) -> onInterfaceAddressUpdated
    249:258:void onInterfaceDnsServerInfo(java.lang.String,long,java.lang.String[]) -> onInterfaceDnsServerInfo
    175:179:void onInterfaceLinkStateChanged(java.lang.String,boolean) -> onInterfaceLinkStateChanged
    158:169:void onInterfaceRemoved(java.lang.String) -> onInterfaceRemoved
    233:242:void onRouteRemoved(android.net.RouteInfo) -> onRouteRemoved
    217:226:void onRouteUpdated(android.net.RouteInfo) -> onRouteUpdated
    288:288:void setInterfaceLinkStateLocked(boolean) -> setInterfaceLinkStateLocked
    293:293:void setInterfaceParams(android.net.util.InterfaceParams) -> setInterfaceParams
    140:140:void shutdown() -> shutdown
android.net.ip.IpClientLinkObserver$$ExternalSyntheticLambda0 -> android.net.ip.IpClientLinkObserver$$ExternalSyntheticLambda0:
    android.net.ip.IpClientLinkObserver$MyNetlinkMonitor android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$b132437dfbca8e0ebdf89cafb224e6224dd8133834e39dae450200ded2425b5e$0.f$0 -> f$0
    void android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$b132437dfbca8e0ebdf89cafb224e6224dd8133834e39dae450200ded2425b5e$0.<init>(android.net.ip.IpClientLinkObserver$MyNetlinkMonitor) -> <init>
    void android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$b132437dfbca8e0ebdf89cafb224e6224dd8133834e39dae450200ded2425b5e$0.run() -> run
android.net.ip.IpClientLinkObserver$$ExternalSyntheticLambda1 -> android.net.ip.IpClientLinkObserver$$ExternalSyntheticLambda1:
    android.net.ip.IpClientLinkObserver$MyNetlinkMonitor android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$fb7a56ba2f503ecf7a52a64b3d5b4c2692b9784027b4176e75d85c7c8a9b7667$0.f$0 -> f$0
    void android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$fb7a56ba2f503ecf7a52a64b3d5b4c2692b9784027b4176e75d85c7c8a9b7667$0.<init>(android.net.ip.IpClientLinkObserver$MyNetlinkMonitor) -> <init>
    void android.net.ip.IpClientLinkObserver$$InternalSyntheticLambda$1$fb7a56ba2f503ecf7a52a64b3d5b4c2692b9784027b4176e75d85c7c8a9b7667$0.run() -> run
android.net.ip.IpClientLinkObserver$Configuration -> android.net.ip.IpClientLinkObserver$Configuration:
    105:106:void <init>(int) -> <init>
android.net.ip.IpClientLinkObserver$DnsServerEntry -> android.net.ip.IpClientLinkObserver$DnsServerEntry:
    606:608:void <init>(java.net.InetAddress,long) -> <init>
    599:599:int compareTo(java.lang.Object) -> compareTo
    612:612:int compareTo(android.net.ip.IpClientLinkObserver$DnsServerEntry) -> compareTo
android.net.ip.IpClientLinkObserver$DnsServerRepository -> android.net.ip.IpClientLinkObserver$DnsServerRepository:
    496:500:void <init>(int) -> <init>
    515:548:boolean addServers(long,java.lang.String[]) -> addServers
    505:506:void setDnsServersOn(android.net.LinkProperties) -> setDnsServersOn
    561:585:boolean updateCurrentServers() -> updateCurrentServers
    552:557:boolean updateExistingEntry(java.net.InetAddress,long) -> updateExistingEntry
android.net.ip.IpClientLinkObserver$MyNetlinkMonitor -> android.net.ip.IpClientLinkObserver$MyNetlinkMonitor:
    308:334:void <init>(android.net.ip.IpClientLinkObserver,android.os.Handler,android.net.util.SharedLog,java.lang.String) -> <init>
    349:351:void cancelPref64Alarm() -> cancelPref64Alarm
    331:331:void clearAlarms() -> clearAlarms
    342:343:void lambda$new$0() -> lambda$new$0
    412:417:void processNduseroptMessage(android.net.netlink.NduseroptMessage,long) -> processNduseroptMessage
    428:429:void processNetlinkMessage(android.net.netlink.NetlinkMessage,long) -> processNetlinkMessage
    407:408:void processPref64Option(android.net.netlink.StructNdOptPref64,long) -> processPref64Option
    357:358:void schedulePref64Alarm() -> schedulePref64Alarm
    327:327:void setIfindex(int) -> setIfindex
    373:404:void updatePref64(android.net.IpPrefix,long,long) -> updatePref64
android.net.ip.IpClientLinkObserver$MyNetlinkMonitor$$ExternalSyntheticLambda0 -> android.net.ip.IpClientLinkObserver$MyNetlinkMonitor$$ExternalSyntheticLambda0:
    android.net.ip.IpClientLinkObserver$MyNetlinkMonitor android.net.ip.IpClientLinkObserver$MyNetlinkMonitor$$InternalSyntheticLambda$2$6c5c006537627e9139e51b943a4b4a89e40b6945e4fd7aab9cd410232098a051$0.f$0 -> f$0
    void android.net.ip.IpClientLinkObserver$MyNetlinkMonitor$$InternalSyntheticLambda$2$6c5c006537627e9139e51b943a4b4a89e40b6945e4fd7aab9cd410232098a051$0.<init>(android.net.ip.IpClientLinkObserver$MyNetlinkMonitor) -> <init>
    void android.net.ip.IpClientLinkObserver$MyNetlinkMonitor$$InternalSyntheticLambda$2$6c5c006537627e9139e51b943a4b4a89e40b6945e4fd7aab9cd410232098a051$0.onAlarm() -> onAlarm
android.net.ip.IpNeighborMonitor -> android.net.ip.IpNeighborMonitor:
    126:127:void <init>(android.os.Handler,android.net.util.SharedLog,android.net.ip.IpNeighborMonitor$NeighborEventConsumer) -> <init>
    169:171:android.net.MacAddress getMacAddress(byte[]) -> getMacAddress
    132:163:void processNetlinkMessage(android.net.netlink.NetlinkMessage,long) -> processNetlinkMessage
    62:72:int startKernelNeighborProbe(int,java.net.InetAddress) -> startKernelNeighborProbe
android.net.ip.IpNeighborMonitor$$ExternalSyntheticLambda0 -> android.net.ip.IpNeighborMonitor$$ExternalSyntheticLambda0:
    android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0 android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.INSTANCE -> INSTANCE
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.<clinit>() -> <clinit>
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.<init>() -> <init>
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.accept(android.net.ip.IpNeighborMonitor$NeighborEvent) -> accept
android.net.ip.IpNeighborMonitor$NeighborEvent -> android.net.ip.IpNeighborMonitor$NeighborEvent:
    87:93:void <init>(long,short,int,java.net.InetAddress,short,android.net.MacAddress) -> <init>
    106:113:java.lang.String toString() -> toString
android.net.ip.IpReachabilityMonitor -> android.net.ip.IpReachabilityMonitor:
    138:139:void <clinit>() -> <clinit>
    203:204:void <init>(android.content.Context,android.net.util.InterfaceParams,android.os.Handler,android.net.util.SharedLog,android.net.ip.IpReachabilityMonitor$Callback,boolean,android.net.INetd) -> <init>
    193:250:void <init>(android.content.Context,android.net.util.InterfaceParams,android.os.Handler,android.net.util.SharedLog,android.net.ip.IpReachabilityMonitor$Callback,boolean,android.net.ip.IpReachabilityMonitor$Dependencies,android.net.metrics.IpConnectivityLog,android.net.INetd) -> <init>
    400:400:boolean avoidingBadLinks() -> avoidingBadLinks
    331:333:void clearLinkProperties() -> clearLinkProperties
    275:275:java.lang.String describeWatchList() -> describeWatchList
    278:287:java.lang.String describeWatchList(java.lang.String) -> describeWatchList
    259:271:void dump(java.io.PrintWriter) -> dump
    428:428:long getProbeWakeLockDuration() -> getProbeWakeLockDuration
    337:379:void handleNeighborLost(android.net.ip.IpNeighborMonitor$NeighborEvent) -> handleNeighborLost
    291:292:boolean isOnLink(java.util.List,java.net.InetAddress) -> isOnLink
    266:267:void lambda$dump$1(java.io.PrintWriter,android.os.ConditionVariable) -> lambda$dump$1
    236:247:void lambda$new$0(android.net.ip.IpNeighborMonitor$NeighborEvent) -> lambda$new$0
    475:475:void logEvent(int,int) -> logEvent
    479:482:void logNudFailed(boolean) -> logNudFailed
    383:396:void maybeRestoreNeighborParameters() -> maybeRestoreNeighborParameters
    404:423:void probeAll() -> probeAll
    453:470:void setNeighborParameters(int,int) -> setNeighborParameters
    443:447:void setNeighborParametersFromResources(int,int) -> setNeighborParametersFromResources
    437:437:void setNeighbourParametersForSteadyState() -> setNeighbourParametersForSteadyState
    432:432:void setNeighbourParametersPostRoaming() -> setNeighbourParametersPostRoaming
    254:255:void stop() -> stop
    300:327:void updateLinkProperties(android.net.LinkProperties) -> updateLinkProperties
android.net.ip.IpReachabilityMonitor$$ExternalSyntheticLambda0 -> android.net.ip.IpReachabilityMonitor$$ExternalSyntheticLambda0:
    android.net.ip.IpReachabilityMonitor android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$998e0ab0df282d0e90ddd9d0ac9bc56140dd202203cea06aa09e2689d739a354$0.f$0 -> f$0
    void android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$998e0ab0df282d0e90ddd9d0ac9bc56140dd202203cea06aa09e2689d739a354$0.<init>(android.net.ip.IpReachabilityMonitor) -> <init>
    void android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$998e0ab0df282d0e90ddd9d0ac9bc56140dd202203cea06aa09e2689d739a354$0.accept(android.net.ip.IpNeighborMonitor$NeighborEvent) -> accept
android.net.ip.IpReachabilityMonitor$$ExternalSyntheticLambda1 -> android.net.ip.IpReachabilityMonitor$$ExternalSyntheticLambda1:
    java.io.PrintWriter android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$7a178149ec4566a9c59cf1b8224c2a866306c51a4ced37b3a52fdfdd003e79af$0.f$1 -> f$1
    android.net.ip.IpReachabilityMonitor android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$7a178149ec4566a9c59cf1b8224c2a866306c51a4ced37b3a52fdfdd003e79af$0.f$0 -> f$0
    android.os.ConditionVariable android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$7a178149ec4566a9c59cf1b8224c2a866306c51a4ced37b3a52fdfdd003e79af$0.f$2 -> f$2
    void android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$7a178149ec4566a9c59cf1b8224c2a866306c51a4ced37b3a52fdfdd003e79af$0.<init>(android.net.ip.IpReachabilityMonitor,java.io.PrintWriter,android.os.ConditionVariable) -> <init>
    void android.net.ip.IpReachabilityMonitor$$InternalSyntheticLambda$0$7a178149ec4566a9c59cf1b8224c2a866306c51a4ced37b3a52fdfdd003e79af$0.run() -> run
android.net.ip.IpReachabilityMonitor$Dependencies -> android.net.ip.IpReachabilityMonitor$Dependencies:
    166:170:android.net.ip.IpReachabilityMonitor$Dependencies makeDefault(android.content.Context,java.lang.String) -> makeDefault
android.net.ip.IpReachabilityMonitor$Dependencies$1 -> android.net.ip.IpReachabilityMonitor$Dependencies$1:
    170:170:void <init>(android.os.PowerManager$WakeLock) -> <init>
    172:172:void acquireWakeLock(long) -> acquireWakeLock
    177:177:android.net.ip.IpNeighborMonitor makeIpNeighborMonitor(android.os.Handler,android.net.util.SharedLog,android.net.ip.IpNeighborMonitor$NeighborEventConsumer) -> makeIpNeighborMonitor
android.net.ip.NetlinkMonitor -> android.net.ip.NetlinkMonitor:
    74:78:void <init>(android.os.Handler,android.net.util.SharedLog,java.lang.String,int,int) -> <init>
    134:134:void closeSocketQuietly(java.io.FileDescriptor) -> closeSocketQuietly
    86:96:java.io.FileDescriptor createFd() -> createFd
    54:54:void handlePacket(java.lang.Object,int) -> handlePacket
    105:126:void handlePacket(byte[],int) -> handlePacket
android.net.ipmemorystore.Blob -> android.net.ipmemorystore.Blob:
    9:9:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    33:44:void readFromParcel(android.os.Parcel) -> readFromParcel
    23:29:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.Blob$1 -> android.net.ipmemorystore.Blob$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.ipmemorystore.Blob createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.ipmemorystore.Blob[] newArray(int) -> newArray
android.net.ipmemorystore.IOnBlobRetrievedListener -> android.net.ipmemorystore.IOnBlobRetrievedListener:
    238:238:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnBlobRetrievedListener$Stub -> android.net.ipmemorystore.IOnBlobRetrievedListener$Stub:
    52:56:android.net.ipmemorystore.IOnBlobRetrievedListener asInterface(android.os.IBinder) -> asInterface
    235:235:android.net.ipmemorystore.IOnBlobRetrievedListener getDefaultImpl() -> getDefaultImpl
android.net.ipmemorystore.IOnBlobRetrievedListener$Stub$Proxy -> android.net.ipmemorystore.IOnBlobRetrievedListener$Stub$Proxy:
    123:127:void <init>(android.os.IBinder) -> <init>
    130:130:android.os.IBinder asBinder() -> asBinder
    138:170:void onBlobRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,java.lang.String,android.net.ipmemorystore.Blob) -> onBlobRetrieved
android.net.ipmemorystore.IOnL2KeyResponseListener -> android.net.ipmemorystore.IOnL2KeyResponseListener:
    221:221:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnL2KeyResponseListener$Stub -> android.net.ipmemorystore.IOnL2KeyResponseListener$Stub:
    52:56:android.net.ipmemorystore.IOnL2KeyResponseListener asInterface(android.os.IBinder) -> asInterface
    218:218:android.net.ipmemorystore.IOnL2KeyResponseListener getDefaultImpl() -> getDefaultImpl
android.net.ipmemorystore.IOnL2KeyResponseListener$Stub$Proxy -> android.net.ipmemorystore.IOnL2KeyResponseListener$Stub$Proxy:
    114:118:void <init>(android.os.IBinder) -> <init>
    121:121:android.os.IBinder asBinder() -> asBinder
    129:153:void onL2KeyResponse(android.net.ipmemorystore.StatusParcelable,java.lang.String) -> onL2KeyResponse
android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener -> android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener:
    235:235:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener$Stub -> android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener$Stub:
    40:41:void <init>() -> <init>
    52:56:android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener asInterface(android.os.IBinder) -> asInterface
    232:232:android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener getDefaultImpl() -> getDefaultImpl
    64:113:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener$Stub$Proxy -> android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener$Stub$Proxy:
    121:125:void <init>(android.os.IBinder) -> <init>
    128:128:android.os.IBinder asBinder() -> asBinder
    136:167:void onNetworkAttributesRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable) -> onNetworkAttributesRetrieved
android.net.ipmemorystore.IOnSameL3NetworkResponseListener -> android.net.ipmemorystore.IOnSameL3NetworkResponseListener:
    232:232:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnSameL3NetworkResponseListener$Stub -> android.net.ipmemorystore.IOnSameL3NetworkResponseListener$Stub:
    52:56:android.net.ipmemorystore.IOnSameL3NetworkResponseListener asInterface(android.os.IBinder) -> asInterface
    229:229:android.net.ipmemorystore.IOnSameL3NetworkResponseListener getDefaultImpl() -> getDefaultImpl
android.net.ipmemorystore.IOnSameL3NetworkResponseListener$Stub$Proxy -> android.net.ipmemorystore.IOnSameL3NetworkResponseListener$Stub$Proxy:
    119:123:void <init>(android.os.IBinder) -> <init>
    126:126:android.os.IBinder asBinder() -> asBinder
    134:164:void onSameL3NetworkResponse(android.net.ipmemorystore.StatusParcelable,android.net.ipmemorystore.SameL3NetworkResponseParcelable) -> onSameL3NetworkResponse
android.net.ipmemorystore.IOnStatusAndCountListener -> android.net.ipmemorystore.IOnStatusAndCountListener:
    221:221:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnStatusAndCountListener$Stub -> android.net.ipmemorystore.IOnStatusAndCountListener$Stub:
    52:56:android.net.ipmemorystore.IOnStatusAndCountListener asInterface(android.os.IBinder) -> asInterface
    218:218:android.net.ipmemorystore.IOnStatusAndCountListener getDefaultImpl() -> getDefaultImpl
android.net.ipmemorystore.IOnStatusAndCountListener$Stub$Proxy -> android.net.ipmemorystore.IOnStatusAndCountListener$Stub$Proxy:
    114:118:void <init>(android.os.IBinder) -> <init>
    121:121:android.os.IBinder asBinder() -> asBinder
    129:153:void onComplete(android.net.ipmemorystore.StatusParcelable,int) -> onComplete
android.net.ipmemorystore.IOnStatusListener -> android.net.ipmemorystore.IOnStatusListener:
    218:218:void <clinit>() -> <clinit>
android.net.ipmemorystore.IOnStatusListener$Stub -> android.net.ipmemorystore.IOnStatusListener$Stub:
    40:41:void <init>() -> <init>
    52:56:android.net.ipmemorystore.IOnStatusListener asInterface(android.os.IBinder) -> asInterface
    215:215:android.net.ipmemorystore.IOnStatusListener getDefaultImpl() -> getDefaultImpl
    64:104:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.ipmemorystore.IOnStatusListener$Stub$Proxy -> android.net.ipmemorystore.IOnStatusListener$Stub$Proxy:
    112:116:void <init>(android.os.IBinder) -> <init>
    119:119:android.os.IBinder asBinder() -> asBinder
    127:150:void onComplete(android.net.ipmemorystore.StatusParcelable) -> onComplete
android.net.ipmemorystore.NetworkAttributes -> android.net.ipmemorystore.NetworkAttributes:
    113:124:void <init>(java.net.Inet4Address,java.lang.Long,java.lang.String,java.util.List,java.lang.Integer,android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirk) -> <init>
    131:137:void <init>(android.net.ipmemorystore.NetworkAttributesParcelable) -> <init>
    154:157:java.util.List blobArrayToInetAddressList(android.net.ipmemorystore.Blob[]) -> blobArrayToInetAddressList
    350:357:boolean equals(java.lang.Object) -> equals
    145:145:java.net.InetAddress getByAddressOrNull(byte[]) -> getByAddressOrNull
    203:210:float getNetworkGroupSamenessConfidence(android.net.ipmemorystore.NetworkAttributes) -> getNetworkGroupSamenessConfidence
    362:362:int hashCode() -> hashCode
    165:173:android.net.ipmemorystore.Blob[] inetAddressListToBlobArray(java.util.List) -> inetAddressListToBlobArray
    343:343:boolean isEmpty() -> isEmpty
    197:197:float samenessContribution(float,java.lang.Object,java.lang.Object) -> samenessContribution
    179:188:android.net.ipmemorystore.NetworkAttributesParcelable toParcelable() -> toParcelable
    369:426:java.lang.String toString() -> toString
android.net.ipmemorystore.NetworkAttributes$Builder -> android.net.ipmemorystore.NetworkAttributes$Builder:
    243:243:void <init>() -> <init>
    336:336:android.net.ipmemorystore.NetworkAttributes build() -> build
    263:263:android.net.ipmemorystore.NetworkAttributes$Builder setAssignedV4Address(java.net.Inet4Address) -> setAssignedV4Address
    276:279:android.net.ipmemorystore.NetworkAttributes$Builder setAssignedV4AddressExpiry(java.lang.Long) -> setAssignedV4AddressExpiry
    289:289:android.net.ipmemorystore.NetworkAttributes$Builder setCluster(java.lang.String) -> setCluster
    302:306:android.net.ipmemorystore.NetworkAttributes$Builder setDnsAddresses(java.util.List) -> setDnsAddresses
    316:317:android.net.ipmemorystore.NetworkAttributes$Builder setMtu(java.lang.Integer) -> setMtu
android.net.ipmemorystore.NetworkAttributesParcelable -> android.net.ipmemorystore.NetworkAttributesParcelable:
    14:14:void <clinit>() -> <clinit>
    6:12:void <init>() -> <init>
    91:92:int describeContents() -> describeContents
    97:106:int describeContents(java.lang.Object) -> describeContents
    49:75:void readFromParcel(android.os.Parcel) -> readFromParcel
    79:86:java.lang.String toString() -> toString
    28:45:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.NetworkAttributesParcelable$1 -> android.net.ipmemorystore.NetworkAttributesParcelable$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.ipmemorystore.NetworkAttributesParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.ipmemorystore.NetworkAttributesParcelable[] newArray(int) -> newArray
android.net.ipmemorystore.OnNetworkAttributesRetrievedListener -> android.net.ipmemorystore.OnNetworkAttributesRetrievedListener:
    35:35:android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener toAIDL(android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> toAIDL
android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1 -> android.net.ipmemorystore.OnNetworkAttributesRetrievedListener$1:
    35:35:void <init>(android.net.ipmemorystore.OnNetworkAttributesRetrievedListener) -> <init>
    41:44:void onNetworkAttributesRetrieved(android.net.ipmemorystore.StatusParcelable,java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable) -> onNetworkAttributesRetrieved
android.net.ipmemorystore.OnStatusListener -> android.net.ipmemorystore.OnStatusListener:
    35:35:android.net.ipmemorystore.IOnStatusListener toAIDL(android.net.ipmemorystore.OnStatusListener) -> toAIDL
android.net.ipmemorystore.OnStatusListener$1 -> android.net.ipmemorystore.OnStatusListener$1:
    35:35:void <init>(android.net.ipmemorystore.OnStatusListener) -> <init>
    38:39:void onComplete(android.net.ipmemorystore.StatusParcelable) -> onComplete
android.net.ipmemorystore.SameL3NetworkResponse -> android.net.ipmemorystore.SameL3NetworkResponse:
    96:99:void <init>(java.lang.String,java.lang.String,float) -> <init>
    105:105:void <init>(android.net.ipmemorystore.SameL3NetworkResponseParcelable) -> <init>
    122:124:boolean equals(java.lang.Object) -> equals
    90:90:int getNetworkSameness() -> getNetworkSameness
    130:130:int hashCode() -> hashCode
    111:114:android.net.ipmemorystore.SameL3NetworkResponseParcelable toParcelable() -> toParcelable
    136:144:java.lang.String toString() -> toString
android.net.ipmemorystore.SameL3NetworkResponseParcelable -> android.net.ipmemorystore.SameL3NetworkResponseParcelable:
    11:11:void <clinit>() -> <clinit>
    6:10:void <init>() -> <init>
    37:52:void readFromParcel(android.os.Parcel) -> readFromParcel
    56:60:java.lang.String toString() -> toString
    25:33:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.SameL3NetworkResponseParcelable$1 -> android.net.ipmemorystore.SameL3NetworkResponseParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.ipmemorystore.SameL3NetworkResponseParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.ipmemorystore.SameL3NetworkResponseParcelable[] newArray(int) -> newArray
android.net.ipmemorystore.Status -> android.net.ipmemorystore.Status:
    39:40:void <init>(int) -> <init>
    45:45:void <init>(android.net.ipmemorystore.StatusParcelable) -> <init>
    57:57:boolean isSuccess() -> isSuccess
    51:52:android.net.ipmemorystore.StatusParcelable toParcelable() -> toParcelable
    63:63:java.lang.String toString() -> toString
android.net.ipmemorystore.StatusParcelable -> android.net.ipmemorystore.StatusParcelable:
    9:9:void <clinit>() -> <clinit>
    6:8:void <init>() -> <init>
    33:44:void readFromParcel(android.os.Parcel) -> readFromParcel
    48:50:java.lang.String toString() -> toString
    23:29:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.StatusParcelable$1 -> android.net.ipmemorystore.StatusParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.ipmemorystore.StatusParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.ipmemorystore.StatusParcelable[] newArray(int) -> newArray
android.net.netd.aidl.NativeUidRangeConfig -> android.net.netd.aidl.NativeUidRangeConfig:
    32:32:void <clinit>() -> <clinit>
    55:58:void <init>(int,android.net.UidRangeParcel[],int) -> <init>
    6:6:android.net.netd.aidl.NativeUidRangeConfig access$000(android.os.Parcel) -> access$000
    114:114:int describeContents() -> describeContents
    119:128:int describeContents(java.lang.Object) -> describeContents
    99:103:boolean equals(java.lang.Object) -> equals
    109:109:int hashCode() -> hashCode
    62:84:android.net.netd.aidl.NativeUidRangeConfig internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    89:93:java.lang.String toString() -> toString
    44:52:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.netd.aidl.NativeUidRangeConfig$1 -> android.net.netd.aidl.NativeUidRangeConfig$1:
    32:32:void <init>() -> <init>
    32:32:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    35:35:android.net.netd.aidl.NativeUidRangeConfig createFromParcel(android.os.Parcel) -> createFromParcel
    32:32:java.lang.Object[] newArray(int) -> newArray
    39:39:android.net.netd.aidl.NativeUidRangeConfig[] newArray(int) -> newArray
android.net.netd.aidl.NativeUidRangeConfig$Builder -> android.net.netd.aidl.NativeUidRangeConfig$Builder:
    11:23:void <init>() -> <init>
    29:29:android.net.netd.aidl.NativeUidRangeConfig build() -> build
    15:15:android.net.netd.aidl.NativeUidRangeConfig$Builder setNetId(int) -> setNetId
    25:25:android.net.netd.aidl.NativeUidRangeConfig$Builder setSubPriority(int) -> setSubPriority
    20:20:android.net.netd.aidl.NativeUidRangeConfig$Builder setUidRanges(android.net.UidRangeParcel[]) -> setUidRanges
android.net.netlink.ConntrackMessage -> android.net.netlink.ConntrackMessage:
    450:455:void <init>(android.net.netlink.StructNlMsgHdr,android.net.netlink.StructNfGenMsg,android.net.netlink.ConntrackMessage$Tuple,android.net.netlink.ConntrackMessage$Tuple,int,int) -> <init>
    337:338:java.net.Inet4Address castToInet4Address(java.net.InetAddress) -> castToInet4Address
    232:275:android.net.netlink.ConntrackMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    318:332:android.net.netlink.ConntrackMessage$Tuple parseTuple(java.nio.ByteBuffer) -> parseTuple
    348:362:android.net.netlink.ConntrackMessage$TupleIpv4 parseTupleIpv4(java.nio.ByteBuffer) -> parseTupleIpv4
    373:394:android.net.netlink.ConntrackMessage$TupleProto parseTupleProto(java.nio.ByteBuffer) -> parseTupleProto
    471:536:java.lang.String stringForIpConntrackStatus(int) -> stringForIpConntrackStatus
    541:549:java.lang.String toString() -> toString
android.net.netlink.ConntrackMessage$Tuple -> android.net.netlink.ConntrackMessage$Tuple:
    113:118:void <init>(android.net.netlink.ConntrackMessage$TupleIpv4,android.net.netlink.ConntrackMessage$TupleProto) -> <init>
    124:127:boolean equals(java.lang.Object) -> equals
    135:135:int hashCode() -> hashCode
    140:147:java.lang.String toString() -> toString
android.net.netlink.ConntrackMessage$TupleIpv4 -> android.net.netlink.ConntrackMessage$TupleIpv4:
    161:163:void <init>(java.net.Inet4Address,java.net.Inet4Address) -> <init>
android.net.netlink.ConntrackMessage$TupleProto -> android.net.netlink.ConntrackMessage$TupleProto:
    177:180:void <init>(byte,short,short) -> <init>
android.net.netlink.InetDiagMessage -> android.net.netlink.InetDiagMessage:
    134:134:void <clinit>() -> <clinit>
    105:106:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    87:98:byte[] InetDiagReqV2(int,java.net.InetSocketAddress,java.net.InetSocketAddress,int,short,int,int,int) -> InetDiagReqV2
    110:111:android.net.netlink.InetDiagMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    215:219:java.lang.String toString() -> toString
android.net.netlink.NdOption -> android.net.netlink.NdOption:
    82:82:void <clinit>() -> <clinit>
    33:35:void <init>(byte,int) -> <init>
    54:68:android.net.netlink.NdOption parse(java.nio.ByteBuffer) -> parse
    79:79:java.lang.String toString() -> toString
android.net.netlink.NduseroptMessage -> android.net.netlink.NduseroptMessage:
    66:107:void <init>(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> <init>
    121:132:android.net.netlink.NduseroptMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    137:139:java.lang.String toString() -> toString
android.net.netlink.NetlinkConstants -> android.net.netlink.NetlinkConstants:
    225:225:void <clinit>() -> <clinit>
    52:52:int alignedLengthOf(short) -> alignedLengthOf
    57:57:int alignedLengthOf(int) -> alignedLengthOf
    75:75:java.lang.String hexify(byte[]) -> hexify
    80:81:java.lang.String hexify(java.nio.ByteBuffer) -> hexify
    61:64:java.lang.String stringForAddressFamily(int) -> stringForAddressFamily
    140:140:java.lang.String stringForCtlMsgType(short) -> stringForCtlMsgType
    178:178:java.lang.String stringForInetDiagMsgType(short) -> stringForInetDiagMsgType
    203:203:java.lang.String stringForNfMsgType(short) -> stringForNfMsgType
    213:222:java.lang.String stringForNlMsgType(short,int) -> stringForNlMsgType
    68:70:java.lang.String stringForProtocol(int) -> stringForProtocol
    167:167:java.lang.String stringForRtMsgType(short) -> stringForRtMsgType
    231:240:java.lang.String toHexString(byte[],int,int) -> toHexString
android.net.netlink.NetlinkErrorMessage -> android.net.netlink.NetlinkErrorMessage:
    43:44:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    48:48:android.net.netlink.StructNlMsgErr getNlMsgError() -> getNlMsgError
    30:32:android.net.netlink.NetlinkErrorMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    53:55:java.lang.String toString() -> toString
android.net.netlink.NetlinkMessage -> android.net.netlink.NetlinkMessage:
    84:85:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    89:89:android.net.netlink.StructNlMsgHdr getHeader() -> getHeader
    48:76:android.net.netlink.NetlinkMessage parse(java.nio.ByteBuffer,int) -> parse
    105:112:android.net.netlink.NetlinkMessage parseCtlMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer,int) -> parseCtlMessage
    134:136:android.net.netlink.NetlinkMessage parseInetDiagMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseInetDiagMessage
    144:149:android.net.netlink.NetlinkMessage parseNfMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseNfMessage
    120:126:android.net.netlink.NetlinkMessage parseRtMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseRtMessage
    99:99:java.lang.String toString() -> toString
android.net.netlink.NetlinkSocket -> android.net.netlink.NetlinkSocket:
    118:118:void checkTimeout(long) -> checkTimeout
    113:113:void connectToKernel(java.io.FileDescriptor) -> connectToKernel
    107:108:java.io.FileDescriptor forProto(int) -> forProto
    130:141:java.nio.ByteBuffer recvMessage(java.io.FileDescriptor,int,long) -> recvMessage
    154:156:int sendMessage(java.io.FileDescriptor,byte[],int,int,long) -> sendMessage
    61:103:void sendOneShotKernelMessage(int,byte[]) -> sendOneShotKernelMessage
android.net.netlink.RtNetlinkNeighborMessage -> android.net.netlink.RtNetlinkNeighborMessage:
    153:158:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    166:166:java.net.InetAddress getDestination() -> getDestination
    170:170:byte[] getLinkLayerAddress() -> getLinkLayerAddress
    162:162:android.net.netlink.StructNdMsg getNdHeader() -> getNdHeader
    183:188:int getRequiredSpace() -> getRequiredSpace
    124:142:byte[] newNewNeighborMessage(int,java.net.InetAddress,short,int,byte[]) -> newNewNeighborMessage
    205:212:void pack(java.nio.ByteBuffer) -> pack
    197:201:void packNlAttr(short,byte[],java.nio.ByteBuffer) -> packNlAttr
    52:90:android.net.netlink.RtNetlinkNeighborMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    218:226:java.lang.String toString() -> toString
android.net.netlink.StructInetDiagMsg -> android.net.netlink.StructInetDiagMsg:
    41:41:void <init>() -> <init>
    48:49:android.net.netlink.StructInetDiagMsg parse(java.nio.ByteBuffer) -> parse
    55:55:java.lang.String toString() -> toString
android.net.netlink.StructInetDiagReqV2 -> android.net.netlink.StructInetDiagReqV2:
    59:70:void <init>(int,java.net.InetSocketAddress,java.net.InetSocketAddress,int,int,int,int) -> <init>
    75:80:void pack(java.nio.ByteBuffer) -> pack
    85:94:java.lang.String toString() -> toString
android.net.netlink.StructInetDiagSockId -> android.net.netlink.StructInetDiagSockId:
    48:55:void <init>(java.net.InetSocketAddress,java.net.InetSocketAddress) -> <init>
    59:72:void pack(java.nio.ByteBuffer) -> pack
    77:81:java.lang.String toString() -> toString
android.net.netlink.StructNdMsg -> android.net.netlink.StructNdMsg:
    128:129:void <init>() -> <init>
    102:102:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    136:142:void pack(java.nio.ByteBuffer) -> pack
    106:118:android.net.netlink.StructNdMsg parse(java.nio.ByteBuffer) -> parse
    78:98:java.lang.String stringForNudFlags(byte) -> stringForNudFlags
    57:57:java.lang.String stringForNudState(short) -> stringForNudState
    155:158:java.lang.String toString() -> toString
android.net.netlink.StructNdOptPref64 -> android.net.netlink.StructNdOptPref64:
    111:126:void <init>(java.nio.ByteBuffer) -> <init>
    138:145:android.net.netlink.StructNdOptPref64 parse(java.nio.ByteBuffer) -> parse
    70:70:int plcToPrefixLength(int) -> plcToPrefixLength
    167:167:java.lang.String toString() -> toString
android.net.netlink.StructNdaCacheInfo -> android.net.netlink.StructNdaCacheInfo:
    56:56:void <clinit>() -> <clinit>
    94:94:void <init>() -> <init>
    37:37:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    101:101:long lastConfirmed() -> lastConfirmed
    105:105:long lastUpdated() -> lastUpdated
    97:97:long lastUsed() -> lastUsed
    41:50:android.net.netlink.StructNdaCacheInfo parse(java.nio.ByteBuffer) -> parse
    60:60:long ticksToMilliSeconds(int) -> ticksToMilliSeconds
    110:113:java.lang.String toString() -> toString
android.net.netlink.StructNfGenMsg -> android.net.netlink.StructNfGenMsg:
    67:70:void <init>(byte,byte,short) -> <init>
    90:90:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    52:64:android.net.netlink.StructNfGenMsg parse(java.nio.ByteBuffer) -> parse
    95:100:java.lang.String toString() -> toString
android.net.netlink.StructNlAttr -> android.net.netlink.StructNlAttr:
    117:121:void <init>() -> <init>
    101:112:android.net.netlink.StructNlAttr findNextAttrOfType(short,java.nio.ByteBuffer) -> findNextAttrOfType
    183:183:int getAlignedLength() -> getAlignedLength
    190:200:short getValueAsBe16(short) -> getValueAsBe16
    204:214:int getValueAsBe32(int) -> getValueAsBe32
    231:235:byte getValueAsByte(byte) -> getValueAsByte
    218:223:java.nio.ByteBuffer getValueAsByteBuffer() -> getValueAsByteBuffer
    247:250:java.net.InetAddress getValueAsInetAddress() -> getValueAsInetAddress
    239:243:int getValueAsInt(int) -> getValueAsInt
    257:268:void pack(java.nio.ByteBuffer) -> pack
    72:85:android.net.netlink.StructNlAttr parse(java.nio.ByteBuffer) -> parse
    48:64:android.net.netlink.StructNlAttr peek(java.nio.ByteBuffer) -> peek
    278:281:java.lang.String toString() -> toString
android.net.netlink.StructNlMsgErr -> android.net.netlink.StructNlMsgErr:
    29:29:void <init>() -> <init>
    33:33:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    37:44:android.net.netlink.StructNlMsgErr parse(java.nio.ByteBuffer) -> parse
    63:65:java.lang.String toString() -> toString
android.net.netlink.StructNlMsgHdr -> android.net.netlink.StructNlMsgHdr:
    110:115:void <init>() -> <init>
    81:81:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    122:126:void pack(java.nio.ByteBuffer) -> pack
    85:97:android.net.netlink.StructNlMsgHdr parse(java.nio.ByteBuffer) -> parse
    53:77:java.lang.String stringForNlMsgFlags(short) -> stringForNlMsgFlags
    131:131:java.lang.String toString() -> toString
    144:150:java.lang.String toString(java.lang.Integer) -> toString
android.net.networkstack.DhcpResults -> android.net.networkstack.DhcpResults:
    182:182:void <clinit>() -> <clinit>
    50:76:void <init>() -> <init>
    50:96:void <init>(android.net.StaticIpConfiguration) -> <init>
    102:109:void <init>(android.net.networkstack.DhcpResults) -> <init>
    41:41:android.net.networkstack.DhcpResults access$000(android.os.Parcel) -> access$000
    166:176:boolean equals(java.lang.Object) -> equals
    210:217:android.net.networkstack.DhcpResults readFromParcel(android.os.Parcel) -> readFromParcel
    83:88:android.net.StaticIpConfiguration toStaticIpConfiguration() -> toStaticIpConfiguration
    148:159:java.lang.String toString() -> toString
    195:201:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.networkstack.DhcpResults$1 -> android.net.networkstack.DhcpResults$1:
    183:183:void <init>() -> <init>
    183:183:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    185:185:android.net.networkstack.DhcpResults createFromParcel(android.os.Parcel) -> createFromParcel
    183:183:java.lang.Object[] newArray(int) -> newArray
    189:189:android.net.networkstack.DhcpResults[] newArray(int) -> newArray
android.net.networkstack.aidl.dhcp.DhcpOption -> android.net.networkstack.aidl.dhcp.DhcpOption:
    9:9:void <clinit>() -> <clinit>
    5:7:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.networkstack.aidl.dhcp.DhcpOption$1 -> android.net.networkstack.aidl.dhcp.DhcpOption$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.networkstack.aidl.dhcp.DhcpOption createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.networkstack.aidl.dhcp.DhcpOption[] newArray(int) -> newArray
android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirk -> android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirk:
    35:37:void <init>(int,long) -> <init>
    62:64:boolean equals(java.lang.Object) -> equals
    57:57:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirk fromStableParcelable(android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable) -> fromStableParcelable
    69:69:int hashCode() -> hashCode
    44:46:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable toStableParcelable() -> toStableParcelable
    74:77:java.lang.String toString() -> toString
android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable -> android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable:
    9:9:void <clinit>() -> <clinit>
    5:8:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable$1 -> android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable[] newArray(int) -> newArray
android.net.networkstack.util.AndroidUtilIndentingPrintWriter -> android.net.networkstack.util.AndroidUtilIndentingPrintWriter:
# {"id":"sourceFile","fileName":"IndentingPrintWriter.java"}
    70:70:void <init>(java.io.Writer,java.lang.String,int) -> <init>
    41:79:void <init>(java.io.Writer,java.lang.String,java.lang.String,int) -> <init>
    130:131:android.net.networkstack.util.AndroidUtilIndentingPrintWriter decreaseIndent() -> decreaseIndent
    120:121:android.net.networkstack.util.AndroidUtilIndentingPrintWriter increaseIndent() -> increaseIndent
    242:248:void maybeWriteIndent() -> maybeWriteIndent
    181:181:void println() -> println
    186:187:void write(int) -> write
    192:194:void write(java.lang.String,int,int) -> write
    199:237:void write(char[],int,int) -> write
android.net.networkstack.util.HexDump -> android.net.networkstack.util.HexDump:
    24:25:void <clinit>() -> <clinit>
    29:29:java.lang.String dumpHexString(byte[]) -> dumpHexString
    35:96:java.lang.String dumpHexString(byte[],int,int) -> dumpHexString
    107:107:java.lang.String toHexString(byte[]) -> toHexString
    113:113:java.lang.String toHexString(byte[],boolean) -> toHexString
    119:119:java.lang.String toHexString(byte[],int,int) -> toHexString
    124:135:java.lang.String toHexString(byte[],int,int,boolean) -> toHexString
    141:141:java.lang.String toHexString(int) -> toHexString
android.net.networkstack.util.IndentingPrintWriter -> android.net.networkstack.util.IndentingPrintWriter:
    32:32:void <init>(java.io.Writer,java.lang.String) -> <init>
    61:61:android.net.networkstack.util.IndentingPrintWriter decreaseIndent() -> decreaseIndent
    55:55:android.net.networkstack.util.IndentingPrintWriter increaseIndent() -> increaseIndent
android.net.networkstack.util.LocalLog -> android.net.networkstack.util.LocalLog:
    48:48:void <init>(int) -> <init>
    51:54:void <init>(int,boolean) -> <init>
    72:76:void append(java.lang.String) -> append
    84:85:void dump(java.io.PrintWriter) -> dump
    94:98:void dump(java.lang.String,java.io.PrintWriter) -> dump
    59:68:void log(java.lang.String) -> log
    133:133:android.net.networkstack.util.LocalLog$ReadOnlyLocalLog readOnlyLocalLog() -> readOnlyLocalLog
android.net.networkstack.util.LocalLog$ReadOnlyLocalLog -> android.net.networkstack.util.LocalLog$ReadOnlyLocalLog:
    113:114:void <init>(android.net.networkstack.util.LocalLog) -> <init>
    118:118:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.net.networkstack.util.MessageUtils -> android.net.networkstack.util.MessageUtils:
    119:119:void <clinit>() -> <clinit>
    53:101:android.util.SparseArray findMessageNames(java.lang.Class[],java.lang.String[]) -> findMessageNames
    129:129:android.util.SparseArray findMessageNames(java.lang.Class[]) -> findMessageNames
android.net.networkstack.util.MessageUtils$DuplicateConstantError -> android.net.networkstack.util.MessageUtils$DuplicateConstantError:
    38:39:void <init>(java.lang.String,java.lang.String,int) -> <init>
android.net.networkstack.util.Preconditions -> android.net.networkstack.util.Preconditions:
    44:44:void checkArgument(boolean) -> checkArgument
    59:59:void checkArgument(boolean,java.lang.Object) -> checkArgument
    340:340:int checkArgumentNonnegative(int) -> checkArgumentNonnegative
    387:387:int checkArgumentPositive(int,java.lang.String) -> checkArgumentPositive
    147:147:java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
android.net.networkstack.util.RingBufferIndices -> android.net.networkstack.util.RingBufferIndices:
    33:34:void <init>(int) -> <init>
    43:51:int add() -> add
    76:77:int indexOf(int) -> indexOf
    68:68:int size() -> size
android.net.networkstack.util.State -> android.net.networkstack.util.State:
    36:36:void <init>() -> <init>
    79:81:java.lang.String getName() -> getName
android.net.networkstack.util.StateMachine -> android.net.networkstack.util.StateMachine:
    1305:1310:void <init>(java.lang.String) -> <init>
    1329:1330:void <init>(java.lang.String,android.os.Handler) -> <init>
    424:424:android.os.HandlerThread access$400(android.net.networkstack.util.StateMachine) -> access$400
    424:424:android.os.HandlerThread access$402(android.net.networkstack.util.StateMachine,android.os.HandlerThread) -> access$402
    424:424:android.net.networkstack.util.StateMachine$SmHandler access$502(android.net.networkstack.util.StateMachine,android.net.networkstack.util.StateMachine$SmHandler) -> access$502
    424:424:java.lang.String access$700(android.net.networkstack.util.StateMachine) -> access$700
    1354:1354:void addState(android.net.networkstack.util.State,android.net.networkstack.util.State) -> addState
    1363:1363:void addState(android.net.networkstack.util.State) -> addState
    1445:1445:void deferMessage(android.os.Message) -> deferMessage
    1400:1402:android.net.networkstack.util.IState getCurrentState() -> getCurrentState
    1603:1603:android.os.Handler getHandler() -> getHandler
    1522:1524:int getLogRecMaxSize() -> getLogRecMaxSize
    1485:1485:java.lang.String getName() -> getName
    1295:1296:void initStateMachine(java.lang.String,android.os.Looper) -> initStateMachine
    2128:2128:void log(java.lang.String) -> log
    2173:2173:void loge(java.lang.String) -> loge
    2183:2183:void loge(java.lang.String,java.lang.Throwable) -> loge
    2164:2164:void logw(java.lang.String) -> logw
    1632:1632:android.os.Message obtainMessage(int) -> obtainMessage
    1649:1649:android.os.Message obtainMessage(int,java.lang.Object) -> obtainMessage
    1667:1667:android.os.Message obtainMessage(int,int) -> obtainMessage
    1686:1686:android.os.Message obtainMessage(int,int,int) -> obtainMessage
    1706:1706:android.os.Message obtainMessage(int,int,int,java.lang.Object) -> obtainMessage
    2026:2029:void quit() -> quit
    1962:1965:void removeMessages(int) -> removeMessages
    1717:1720:void sendMessage(int) -> sendMessage
    1731:1734:void sendMessage(int,java.lang.Object) -> sendMessage
    1745:1748:void sendMessage(int,int) -> sendMessage
    1758:1761:void sendMessage(int,int,int) -> sendMessage
    1772:1775:void sendMessage(int,int,int,java.lang.Object) -> sendMessage
    1786:1789:void sendMessage(android.os.Message) -> sendMessage
    1799:1802:void sendMessageDelayed(int,long) -> sendMessageDelayed
    1825:1828:void sendMessageDelayed(int,int,long) -> sendMessageDelayed
    1865:1868:void sendMessageDelayed(android.os.Message,long) -> sendMessageDelayed
    2061:2064:void setDbg(boolean) -> setDbg
    1382:1382:void setInitialState(android.net.networkstack.util.State) -> setInitialState
    2073:2077:void start() -> start
    2104:2109:java.lang.String toString() -> toString
    1421:1421:void transitionTo(android.net.networkstack.util.IState) -> transitionTo
    1454:1454:void unhandledMessage(android.os.Message) -> unhandledMessage
android.net.networkstack.util.StateMachine$LogRec -> android.net.networkstack.util.StateMachine$LogRec:
    472:473:void <init>(android.net.networkstack.util.StateMachine,android.os.Message,java.lang.String,android.net.networkstack.util.IState,android.net.networkstack.util.IState,android.net.networkstack.util.IState) -> <init>
    537:562:java.lang.String toString() -> toString
    484:490:void update(android.net.networkstack.util.StateMachine,android.os.Message,java.lang.String,android.net.networkstack.util.IState,android.net.networkstack.util.IState,android.net.networkstack.util.IState) -> update
android.net.networkstack.util.StateMachine$LogRecords -> android.net.networkstack.util.StateMachine$LogRecords:
    577:577:void <init>(android.net.networkstack.util.StateMachine$1) -> <init>
    581:590:void <init>() -> <init>
    577:577:int access$1900(android.net.networkstack.util.StateMachine$LogRecords) -> access$1900
    668:679:void add(android.net.networkstack.util.StateMachine,android.os.Message,java.lang.String,android.net.networkstack.util.IState,android.net.networkstack.util.IState,android.net.networkstack.util.IState) -> add
    634:635:void cleanup() -> cleanup
    613:613:boolean logOnlyTransitions() -> logOnlyTransitions
android.net.networkstack.util.StateMachine$SmHandler -> android.net.networkstack.util.StateMachine$SmHandler:
    691:691:void <clinit>() -> <clinit>
    682:682:void <init>(android.os.Looper,android.net.networkstack.util.StateMachine,android.net.networkstack.util.StateMachine$1) -> <init>
    685:1226:void <init>(android.os.Looper,android.net.networkstack.util.StateMachine) -> <init>
    682:682:void access$1100(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.State) -> access$1100
    682:682:android.net.networkstack.util.IState access$1300(android.net.networkstack.util.StateMachine$SmHandler) -> access$1300
    682:682:void access$1400(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.IState) -> access$1400
    682:682:void access$1600(android.net.networkstack.util.StateMachine$SmHandler,android.os.Message) -> access$1600
    682:682:boolean access$1700(android.net.networkstack.util.StateMachine$SmHandler) -> access$1700
    682:682:android.net.networkstack.util.StateMachine$LogRecords access$1800(android.net.networkstack.util.StateMachine$SmHandler) -> access$1800
    682:682:void access$2600(android.net.networkstack.util.StateMachine$SmHandler) -> access$2600
    682:682:void access$2900(android.net.networkstack.util.StateMachine$SmHandler,boolean) -> access$2900
    682:682:android.net.networkstack.util.StateMachine access$300(android.net.networkstack.util.StateMachine$SmHandler) -> access$300
    682:682:void access$3000(android.net.networkstack.util.StateMachine$SmHandler) -> access$3000
    682:682:android.net.networkstack.util.StateMachine$SmHandler$StateInfo access$900(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.State,android.net.networkstack.util.State) -> access$900
    1165:1191:android.net.networkstack.util.StateMachine$SmHandler$StateInfo addState(android.net.networkstack.util.State,android.net.networkstack.util.State) -> addState
    927:943:void cleanupAfterQuitting() -> cleanupAfterQuitting
    950:975:void completeConstruction() -> completeConstruction
    1247:1253:void deferMessage(android.os.Message) -> deferMessage
    1152:1152:android.net.networkstack.util.IState getCurrentState() -> getCurrentState
    796:826:void handleMessage(android.os.Message) -> handleMessage
    1032:1041:void invokeEnterMethods(int) -> invokeEnterMethods
    1018:1024:void invokeExitMethods(android.net.networkstack.util.StateMachine$SmHandler$StateInfo) -> invokeExitMethods
    1270:1270:boolean isQuit(android.os.Message) -> isQuit
    1054:1059:void moveDeferredMessageAtFrontOfQueue() -> moveDeferredMessageAtFrontOfQueue
    1070:1084:int moveTempStateStackToStateStack() -> moveTempStateStackToStateStack
    841:918:void performTransitions(android.net.networkstack.util.State,android.os.Message) -> performTransitions
    985:1010:android.net.networkstack.util.State processMsg(android.os.Message) -> processMsg
    1258:1259:void quit() -> quit
    1280:1280:void setDbg(boolean) -> setDbg
    1231:1232:void setInitialState(android.net.networkstack.util.State) -> setInitialState
    1125:1138:void setupInitialStateStack() -> setupInitialStateStack
    1107:1115:android.net.networkstack.util.StateMachine$SmHandler$StateInfo setupTempStateStackWithStatesToEnter(android.net.networkstack.util.State) -> setupTempStateStackWithStatesToEnter
    1237:1242:void transitionTo(android.net.networkstack.util.IState) -> transitionTo
android.net.networkstack.util.StateMachine$SmHandler$HaltingState -> android.net.networkstack.util.StateMachine$SmHandler$HaltingState:
    770:770:void <init>(android.net.networkstack.util.StateMachine$SmHandler) -> <init>
    770:770:void <init>(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.StateMachine$1) -> <init>
    773:773:boolean processMessage(android.os.Message) -> processMessage
android.net.networkstack.util.StateMachine$SmHandler$QuittingState -> android.net.networkstack.util.StateMachine$SmHandler$QuittingState:
    781:781:void <init>(android.net.networkstack.util.StateMachine$SmHandler) -> <init>
    781:781:void <init>(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.StateMachine$1) -> <init>
android.net.networkstack.util.StateMachine$SmHandler$StateInfo -> android.net.networkstack.util.StateMachine$SmHandler$StateInfo:
    727:727:void <init>(android.net.networkstack.util.StateMachine$SmHandler) -> <init>
    727:727:void <init>(android.net.networkstack.util.StateMachine$SmHandler,android.net.networkstack.util.StateMachine$1) -> <init>
    742:743:java.lang.String toString() -> toString
android.net.networkstack.util.TokenBucket -> android.net.networkstack.util.TokenBucket:
    53:57:void <init>(int,int,int) -> <init>
    67:67:void <init>(int,int) -> <init>
    119:122:void fill() -> fill
    96:96:boolean get() -> get
    105:114:int get(int) -> get
    126:126:long scaledTime() -> scaledTime
android.net.networkstack.util.WakeupMessage -> android.net.networkstack.util.WakeupMessage:
    54:62:void <init>(android.content.Context,android.os.Handler,java.lang.String,int,int,int,java.lang.Object) -> <init>
    75:75:void <init>(android.content.Context,android.os.Handler,java.lang.String,int) -> <init>
    110:114:void cancel() -> cancel
    90:90:android.app.AlarmManager getAlarmManager(android.content.Context) -> getAlarmManager
    122:134:void onAlarm() -> onAlarm
    100:103:void schedule(long) -> schedule
android.net.shared.InitialConfiguration -> android.net.shared.InitialConfiguration:
    46:46:void <clinit>() -> <clinit>
    38:41:void <init>() -> <init>
    231:231:boolean all(java.lang.Iterable,java.util.function.Predicate) -> all
    219:220:boolean any(java.lang.Iterable,java.util.function.Predicate) -> any
    55:58:android.net.shared.InitialConfiguration copy(android.net.shared.InitialConfiguration) -> copy
    173:177:boolean equals(java.lang.Object) -> equals
    163:167:android.net.shared.InitialConfiguration fromStableParcelable(android.net.InitialConfigurationParcelable) -> fromStableParcelable
    181:181:boolean isDirectlyConnectedRoute(android.net.RouteInfo,android.net.IpPrefix) -> isDirectlyConnectedRoute
    198:198:boolean isIPv4(android.net.IpPrefix) -> isIPv4
    202:202:boolean isIPv4(android.net.LinkAddress) -> isIPv4
    206:206:boolean isIPv6DefaultRoute(android.net.IpPrefix) -> isIPv6DefaultRoute
    210:210:boolean isIPv6GUA(android.net.LinkAddress) -> isIPv6GUA
    185:185:boolean isPrefixLengthCompliant(android.net.LinkAddress) -> isPrefixLengthCompliant
    189:189:boolean isPrefixLengthCompliant(android.net.IpPrefix) -> isPrefixLengthCompliant
    124:136:boolean isProvisionedBy(java.util.List,java.util.List) -> isProvisionedBy
    74:107:boolean isValid() -> isValid
    129:129:boolean lambda$isProvisionedBy$2(android.net.LinkAddress,android.net.LinkAddress) -> lambda$isProvisionedBy$2
    136:136:boolean lambda$isProvisionedBy$3(android.net.IpPrefix,android.net.RouteInfo) -> lambda$isProvisionedBy$3
    80:80:boolean lambda$isValid$0(android.net.LinkAddress,android.net.IpPrefix) -> lambda$isValid$0
    86:86:boolean lambda$isValid$1(java.net.InetAddress,android.net.IpPrefix) -> lambda$isValid$1
    238:238:boolean lambda$not$4(java.util.function.Predicate,java.lang.Object) -> lambda$not$4
    238:238:java.util.function.Predicate not(java.util.function.Predicate) -> not
    64:67:java.lang.String toString() -> toString
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda1 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda1:
    android.net.IpPrefix android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$1.f$0 -> f$0
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$1.<init>(android.net.IpPrefix) -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$1.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda10 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda10:
    android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$4 android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$4.INSTANCE -> INSTANCE
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$4.<clinit>() -> <clinit>
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$4.<init>() -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$4.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda2 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda2:
    android.net.LinkAddress android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$0.f$0 -> f$0
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$0.<init>(android.net.LinkAddress) -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$0.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda3 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda3:
    android.net.LinkAddress android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$0.f$0 -> f$0
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$0.<init>(android.net.LinkAddress) -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$d43f9611772343e7e71432b3f6c1530effe799857f1f162b0d0e879a83e9e6ec$0.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda4 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda4:
    java.net.InetAddress android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$1.f$0 -> f$0
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$1.<init>(java.net.InetAddress) -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$1.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda5 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda5:
    java.util.function.Predicate android.net.shared.InitialConfiguration$$InternalSyntheticLambda$1$7d4fa7eabde97cbe61d88ca37e9568be19569230b34c6a292f5f54aa78475d71$0.f$0 -> f$0
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$1$7d4fa7eabde97cbe61d88ca37e9568be19569230b34c6a292f5f54aa78475d71$0.<init>(java.util.function.Predicate) -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$1$7d4fa7eabde97cbe61d88ca37e9568be19569230b34c6a292f5f54aa78475d71$0.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda6 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda6:
    android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$3 android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$3.INSTANCE -> INSTANCE
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$3.<clinit>() -> <clinit>
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$3.<init>() -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$3.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda7 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda7:
    android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$5 android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$5.INSTANCE -> INSTANCE
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$5.<clinit>() -> <clinit>
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$5.<init>() -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$5.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda8 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda8:
    android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$6 android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$6.INSTANCE -> INSTANCE
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$6.<clinit>() -> <clinit>
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$6.<init>() -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$6.test(java.lang.Object) -> test
android.net.shared.InitialConfiguration$$ExternalSyntheticLambda9 -> android.net.shared.InitialConfiguration$$ExternalSyntheticLambda9:
    android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$2 android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$2.INSTANCE -> INSTANCE
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$2.<clinit>() -> <clinit>
    void android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$2.<init>() -> <init>
    boolean android.net.shared.InitialConfiguration$$InternalSyntheticLambda$0$9ab8cb85311565b571d4bdd9403b3bac48ca212f4d956ff06bacb24d39a30ed9$2.test(java.lang.Object) -> test
android.net.shared.IpConfigurationParcelableUtil -> android.net.shared.IpConfigurationParcelableUtil:
    37:37:java.lang.String parcelAddress(java.net.InetAddress) -> parcelAddress
    46:46:java.net.InetAddress unparcelAddress(java.lang.String) -> unparcelAddress
android.net.shared.Layer2Information -> android.net.shared.Layer2Information:
    38:41:void <init>(java.lang.String,java.lang.String,android.net.MacAddress) -> <init>
    75:79:boolean equals(java.lang.Object) -> equals
    70:70:android.net.shared.Layer2Information fromStableParcelable(android.net.Layer2InformationParcelable) -> fromStableParcelable
    84:84:int hashCode() -> hashCode
    46:50:java.lang.String toString() -> toString
android.net.shared.NetworkMonitorUtils -> android.net.shared.NetworkMonitorUtils:
    71:95:boolean isPrivateDnsValidationRequired(android.net.NetworkCapabilities) -> isPrivateDnsValidationRequired
    108:108:boolean isValidationRequired(android.net.NetworkCapabilities) -> isValidationRequired
android.net.shared.ParcelableUtil -> android.net.shared.ParcelableUtil:
    57:59:java.util.ArrayList fromParcelableArray(java.lang.Object[],java.util.function.Function) -> fromParcelableArray
    42:45:java.lang.Object[] toParcelableArray(java.util.Collection,java.util.function.Function,java.lang.Class) -> toParcelableArray
android.net.shared.PrivateDnsConfig -> android.net.shared.PrivateDnsConfig:
    35:35:void <init>() -> <init>
    38:41:void <init>(boolean) -> <init>
    44:47:void <init>(java.lang.String,java.net.InetAddress[]) -> <init>
    85:88:android.net.shared.PrivateDnsConfig fromParcel(android.net.PrivateDnsConfigParcel) -> fromParcel
    60:60:boolean inStrictMode() -> inStrictMode
    73:76:android.net.PrivateDnsConfigParcel toParcel() -> toParcel
    65:66:java.lang.String toString() -> toString
android.net.shared.PrivateDnsConfig$$ExternalSyntheticLambda0 -> android.net.shared.PrivateDnsConfig$$ExternalSyntheticLambda0:
    android.net.shared.PrivateDnsConfig$$InternalSyntheticLambda$0$9d3ed6793b243eae40b6ff9a12f286842c51e9de1b8e3a43819b86cb914ff802$0 android.net.shared.PrivateDnsConfig$$InternalSyntheticLambda$0$9d3ed6793b243eae40b6ff9a12f286842c51e9de1b8e3a43819b86cb914ff802$0.INSTANCE -> INSTANCE
    void android.net.shared.PrivateDnsConfig$$InternalSyntheticLambda$0$9d3ed6793b243eae40b6ff9a12f286842c51e9de1b8e3a43819b86cb914ff802$0.<clinit>() -> <clinit>
    void android.net.shared.PrivateDnsConfig$$InternalSyntheticLambda$0$9d3ed6793b243eae40b6ff9a12f286842c51e9de1b8e3a43819b86cb914ff802$0.<init>() -> <init>
    java.lang.Object android.net.shared.PrivateDnsConfig$$InternalSyntheticLambda$0$9d3ed6793b243eae40b6ff9a12f286842c51e9de1b8e3a43819b86cb914ff802$0.apply(java.lang.Object) -> apply
android.net.shared.ProvisioningConfiguration -> android.net.shared.ProvisioningConfiguration:
    436:453:void <init>() -> <init>
    436:473:void <init>(android.net.shared.ProvisioningConfiguration) -> <init>
    557:557:boolean dhcpOptionEquals(android.net.networkstack.aidl.dhcp.DhcpOption,android.net.networkstack.aidl.dhcp.DhcpOption) -> dhcpOptionEquals
    566:569:boolean dhcpOptionListEquals(java.util.List,java.util.List) -> dhcpOptionListEquals
    576:593:boolean equals(java.lang.Object) -> equals
    508:526:android.net.shared.ProvisioningConfiguration fromStableParcelable(android.net.ProvisioningConfigurationParcelable) -> fromStableParcelable
    597:597:boolean isValid() -> isValid
    532:549:java.lang.String toString() -> toString
android.net.shared.ProvisioningConfiguration$ScanResultInfo -> android.net.shared.ProvisioningConfiguration$ScanResultInfo:
    337:343:void <init>(java.lang.String,java.lang.String,java.util.List) -> <init>
    259:259:byte[] access$000(java.nio.ByteBuffer) -> access$000
    423:429:byte[] convertToByteArray(java.nio.ByteBuffer) -> convertToByteArray
    386:390:boolean equals(java.lang.Object) -> equals
    416:419:android.net.shared.ProvisioningConfiguration$ScanResultInfo fromStableParcelable(android.net.ScanResultInfoParcelable) -> fromStableParcelable
    359:359:java.lang.String getBssid() -> getBssid
    367:367:java.util.List getInformationElements() -> getInformationElements
    351:351:java.lang.String getSsid() -> getSsid
    395:395:int hashCode() -> hashCode
    372:380:java.lang.String toString() -> toString
android.net.shared.ProvisioningConfiguration$ScanResultInfo$$ExternalSyntheticLambda0 -> android.net.shared.ProvisioningConfiguration$ScanResultInfo$$ExternalSyntheticLambda0:
    android.net.shared.ProvisioningConfiguration$ScanResultInfo$$InternalSyntheticLambda$0$43910aa27f59d2cd7cadf8483a868a00fa854d95cc0963d7c4a90794dddae007$0 android.net.shared.ProvisioningConfiguration$ScanResultInfo$$InternalSyntheticLambda$0$43910aa27f59d2cd7cadf8483a868a00fa854d95cc0963d7c4a90794dddae007$0.INSTANCE -> INSTANCE
    void android.net.shared.ProvisioningConfiguration$ScanResultInfo$$InternalSyntheticLambda$0$43910aa27f59d2cd7cadf8483a868a00fa854d95cc0963d7c4a90794dddae007$0.<clinit>() -> <clinit>
    void android.net.shared.ProvisioningConfiguration$ScanResultInfo$$InternalSyntheticLambda$0$43910aa27f59d2cd7cadf8483a868a00fa854d95cc0963d7c4a90794dddae007$0.<init>() -> <init>
    java.lang.Object android.net.shared.ProvisioningConfiguration$ScanResultInfo$$InternalSyntheticLambda$0$43910aa27f59d2cd7cadf8483a868a00fa854d95cc0963d7c4a90794dddae007$0.apply(java.lang.Object) -> apply
android.net.shared.ProvisioningConfiguration$ScanResultInfo$InformationElement -> android.net.shared.ProvisioningConfiguration$ScanResultInfo$InformationElement:
    276:278:void <init>(int,java.nio.ByteBuffer) -> <init>
    299:301:boolean equals(java.lang.Object) -> equals
    331:332:android.net.shared.ProvisioningConfiguration$ScanResultInfo$InformationElement fromStableParcelable(android.net.InformationElementParcelable) -> fromStableParcelable
    285:285:int getId() -> getId
    293:293:java.nio.ByteBuffer getPayload() -> getPayload
    306:306:int hashCode() -> hashCode
    311:311:java.lang.String toString() -> toString
android.net.util.ConnectivityPacketSummary -> android.net.util.ConnectivityPacketSummary:
    111:121:void <init>(android.net.MacAddress,byte[],int) -> <init>
    433:433:java.lang.String asString(int) -> asString
    396:396:java.lang.String getIPv4AddressString(java.nio.ByteBuffer) -> getIPv4AddressString
    400:400:java.lang.String getIPv6AddressString(java.nio.ByteBuffer) -> getIPv6AddressString
    404:410:java.lang.String getIpAddressString(java.nio.ByteBuffer,int) -> getIpAddressString
    417:426:java.lang.String getMacAddressString(java.nio.ByteBuffer) -> getMacAddressString
    166:191:void parseARP(java.util.StringJoiner) -> parseARP
    388:391:void parseDHCPv4(java.util.StringJoiner) -> parseDHCPv4
    129:160:void parseEther(java.util.StringJoiner) -> parseEther
    263:291:void parseICMPv6(java.util.StringJoiner) -> parseICMPv6
    334:363:void parseICMPv6NeighborDiscoveryOptions(java.util.StringJoiner) -> parseICMPv6NeighborDiscoveryOptions
    321:328:void parseICMPv6NeighborMessage(java.util.StringJoiner) -> parseICMPv6NeighborMessage
    309:315:void parseICMPv6RouterAdvertisement(java.util.StringJoiner) -> parseICMPv6RouterAdvertisement
    298:304:void parseICMPv6RouterSolicitation(java.util.StringJoiner) -> parseICMPv6RouterSolicitation
    196:232:void parseIPv4(java.util.StringJoiner) -> parseIPv4
    237:258:void parseIPv6(java.util.StringJoiner) -> parseIPv6
    368:381:void parseUDP(java.util.StringJoiner) -> parseUDP
    107:108:java.lang.String summarize(android.net.MacAddress,byte[],int) -> summarize
    125:125:java.lang.String toString() -> toString
android.net.util.HostnameTransliterator -> android.net.util.HostnameTransliterator:
    46:59:void <init>() -> <init>
    64:65:void <init>(android.icu.text.Transliterator) -> <init>
    74:80:java.lang.String maybeRemoveRedundantSymbols(java.lang.String) -> maybeRemoveRedundantSymbols
    90:101:java.lang.String transliterate(java.lang.String) -> transliterate
android.net.util.InterfaceParams -> android.net.util.InterfaceParams:
    66:78:void <init>(java.lang.String,int,android.net.MacAddress,int) -> <init>
    49:56:android.net.util.InterfaceParams getByName(java.lang.String) -> getByName
    96:96:android.net.MacAddress getMacAddress(java.net.NetworkInterface) -> getMacAddress
    88:88:java.net.NetworkInterface getNetworkInterfaceByName(java.lang.String) -> getNetworkInterfaceByName
    83:83:java.lang.String toString() -> toString
android.net.util.NetworkStackUtils -> android.net.util.NetworkStackUtils:
    161:259:void <clinit>() -> <clinit>
    316:316:void addArpEntry(java.net.Inet4Address,android.net.MacAddress,java.lang.String,java.io.FileDescriptor) -> addArpEntry
    267:267:void closeSocketQuietly(java.io.FileDescriptor) -> closeSocketQuietly
    277:284:android.net.MacAddress ipv6MulticastToEthernetMulticast(java.net.Inet6Address) -> ipv6MulticastToEthernetMulticast
android.net.util.SharedLog -> android.net.util.SharedLog:
    59:59:void <init>(java.lang.String) -> <init>
    63:63:void <init>(int,java.lang.String) -> <init>
    66:69:void <init>(android.net.networkstack.util.LocalLog,java.lang.String,java.lang.String) -> <init>
    92:92:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    115:115:void e(java.lang.String) -> e
    126:129:void e(java.lang.String,java.lang.Throwable) -> e
    80:83:android.net.util.SharedLog forSubComponent(java.lang.String) -> forSubComponent
    73:73:java.lang.String getTag() -> getTag
    138:138:void i(java.lang.String) -> i
    199:199:boolean isRootLogInstance() -> isRootLogInstance
    160:160:void log(java.lang.String) -> log
    189:192:java.lang.String logLine(android.net.util.SharedLog$Category,java.lang.String) -> logLine
    170:170:void logf(java.lang.String,java.lang.Object[]) -> logf
    183:184:java.lang.String record(android.net.util.SharedLog$Category,java.lang.String) -> record
    147:147:void w(java.lang.String) -> w
android.net.util.SharedLog$Category -> android.net.util.SharedLog$Category:
    41:45:void <clinit>() -> <clinit>
    41:41:void <init>(java.lang.String,int) -> <init>
    41:41:android.net.util.SharedLog$Category valueOf(java.lang.String) -> valueOf
    41:41:android.net.util.SharedLog$Category[] values() -> values
android.net.util.Stopwatch -> android.net.util.Stopwatch:
    25:25:void <init>() -> <init>
    38:38:boolean isRunning() -> isRunning
    30:30:boolean isStarted() -> isStarted
    34:34:boolean isStopped() -> isStopped
    89:90:void reset() -> reset
    55:56:android.net.util.Stopwatch restart() -> restart
    45:46:android.net.util.Stopwatch start() -> start
    65:69:long stop() -> stop
android.stats.connectivity.DhcpErrorCode -> android.stats.connectivity.DhcpErrorCode:
    13:397:void <clinit>() -> <clinit>
    421:422:void <init>(java.lang.String,int,int) -> <init>
    366:387:android.stats.connectivity.DhcpErrorCode forNumber(int) -> forNumber
    353:353:int getNumber() -> getNumber
    407:407:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    13:13:android.stats.connectivity.DhcpErrorCode valueOf(java.lang.String) -> valueOf
    13:13:android.stats.connectivity.DhcpErrorCode[] values() -> values
android.stats.connectivity.DhcpErrorCode$1 -> android.stats.connectivity.DhcpErrorCode$1:
    398:398:void <init>() -> <init>
    398:398:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    401:401:android.stats.connectivity.DhcpErrorCode findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.DhcpErrorCode$DhcpErrorCodeVerifier -> android.stats.connectivity.DhcpErrorCode$DhcpErrorCodeVerifier:
    412:412:void <clinit>() -> <clinit>
    410:410:void <init>() -> <init>
    415:415:boolean isInRange(int) -> isInRange
android.stats.connectivity.DhcpFeature -> android.stats.connectivity.DhcpFeature:
    9:116:void <clinit>() -> <clinit>
    140:141:void <init>(java.lang.String,int,int) -> <init>
    102:106:android.stats.connectivity.DhcpFeature forNumber(int) -> forNumber
    89:89:int getNumber() -> getNumber
    126:126:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.DhcpFeature valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.DhcpFeature[] values() -> values
android.stats.connectivity.DhcpFeature$1 -> android.stats.connectivity.DhcpFeature$1:
    117:117:void <init>() -> <init>
    117:117:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    120:120:android.stats.connectivity.DhcpFeature findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.DhcpFeature$DhcpFeatureVerifier -> android.stats.connectivity.DhcpFeature$DhcpFeatureVerifier:
    131:131:void <clinit>() -> <clinit>
    129:129:void <init>() -> <init>
    134:134:boolean isInRange(int) -> isInRange
android.stats.connectivity.DisconnectCode -> android.stats.connectivity.DisconnectCode:
    9:120:void <clinit>() -> <clinit>
    144:145:void <init>(java.lang.String,int,int) -> <init>
    102:110:android.stats.connectivity.DisconnectCode forNumber(int) -> forNumber
    89:89:int getNumber() -> getNumber
    130:130:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.DisconnectCode valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.DisconnectCode[] values() -> values
android.stats.connectivity.DisconnectCode$1 -> android.stats.connectivity.DisconnectCode$1:
    121:121:void <init>() -> <init>
    121:121:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    124:124:android.stats.connectivity.DisconnectCode findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.DisconnectCode$DisconnectCodeVerifier -> android.stats.connectivity.DisconnectCode$DisconnectCodeVerifier:
    135:135:void <clinit>() -> <clinit>
    133:133:void <init>() -> <init>
    138:138:boolean isInRange(int) -> isInRange
android.stats.connectivity.HostnameTransResult -> android.stats.connectivity.HostnameTransResult:
    9:75:void <clinit>() -> <clinit>
    99:100:void <init>(java.lang.String,int,int) -> <init>
    62:65:android.stats.connectivity.HostnameTransResult forNumber(int) -> forNumber
    49:49:int getNumber() -> getNumber
    85:85:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.HostnameTransResult valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.HostnameTransResult[] values() -> values
android.stats.connectivity.HostnameTransResult$1 -> android.stats.connectivity.HostnameTransResult$1:
    76:76:void <init>() -> <init>
    76:76:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    79:79:android.stats.connectivity.HostnameTransResult findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.HostnameTransResult$HostnameTransResultVerifier -> android.stats.connectivity.HostnameTransResult$HostnameTransResultVerifier:
    90:90:void <clinit>() -> <clinit>
    88:88:void <init>() -> <init>
    93:93:boolean isInRange(int) -> isInRange
android.stats.connectivity.NetworkQuirkEvent -> android.stats.connectivity.NetworkQuirkEvent:
    9:57:void <clinit>() -> <clinit>
    81:82:void <init>(java.lang.String,int,int) -> <init>
    46:47:android.stats.connectivity.NetworkQuirkEvent forNumber(int) -> forNumber
    33:33:int getNumber() -> getNumber
    67:67:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.NetworkQuirkEvent valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.NetworkQuirkEvent[] values() -> values
android.stats.connectivity.NetworkQuirkEvent$1 -> android.stats.connectivity.NetworkQuirkEvent$1:
    58:58:void <init>() -> <init>
    58:58:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    61:61:android.stats.connectivity.NetworkQuirkEvent findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.NetworkQuirkEvent$NetworkQuirkEventVerifier -> android.stats.connectivity.NetworkQuirkEvent$NetworkQuirkEventVerifier:
    72:72:void <clinit>() -> <clinit>
    70:70:void <init>() -> <init>
    75:75:boolean isInRange(int) -> isInRange
android.stats.connectivity.ProbeResult -> android.stats.connectivity.ProbeResult:
    9:92:void <clinit>() -> <clinit>
    116:117:void <init>(java.lang.String,int,int) -> <init>
    78:82:android.stats.connectivity.ProbeResult forNumber(int) -> forNumber
    65:65:int getNumber() -> getNumber
    102:102:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.ProbeResult valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.ProbeResult[] values() -> values
android.stats.connectivity.ProbeResult$1 -> android.stats.connectivity.ProbeResult$1:
    93:93:void <init>() -> <init>
    93:93:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    96:96:android.stats.connectivity.ProbeResult findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.ProbeResult$ProbeResultVerifier -> android.stats.connectivity.ProbeResult$ProbeResultVerifier:
    107:107:void <clinit>() -> <clinit>
    105:105:void <init>() -> <init>
    110:110:boolean isInRange(int) -> isInRange
android.stats.connectivity.ProbeType -> android.stats.connectivity.ProbeType:
    9:111:void <clinit>() -> <clinit>
    135:136:void <init>(java.lang.String,int,int) -> <init>
    94:101:android.stats.connectivity.ProbeType forNumber(int) -> forNumber
    81:81:int getNumber() -> getNumber
    121:121:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.ProbeType valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.ProbeType[] values() -> values
android.stats.connectivity.ProbeType$1 -> android.stats.connectivity.ProbeType$1:
    112:112:void <init>() -> <init>
    112:112:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    115:115:android.stats.connectivity.ProbeType findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.ProbeType$ProbeTypeVerifier -> android.stats.connectivity.ProbeType$ProbeTypeVerifier:
    126:126:void <clinit>() -> <clinit>
    124:124:void <init>() -> <init>
    129:129:boolean isInRange(int) -> isInRange
android.stats.connectivity.TransportType -> android.stats.connectivity.TransportType:
    9:252:void <clinit>() -> <clinit>
    276:277:void <init>(java.lang.String,int,int) -> <init>
    230:242:android.stats.connectivity.TransportType forNumber(int) -> forNumber
    217:217:int getNumber() -> getNumber
    262:262:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.TransportType valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.TransportType[] values() -> values
android.stats.connectivity.TransportType$1 -> android.stats.connectivity.TransportType$1:
    253:253:void <init>() -> <init>
    253:253:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    256:256:android.stats.connectivity.TransportType findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.TransportType$TransportTypeVerifier -> android.stats.connectivity.TransportType$TransportTypeVerifier:
    267:267:void <clinit>() -> <clinit>
    265:265:void <init>() -> <init>
    270:270:boolean isInRange(int) -> isInRange
android.stats.connectivity.ValidationResult -> android.stats.connectivity.ValidationResult:
    9:84:void <clinit>() -> <clinit>
    108:109:void <init>(java.lang.String,int,int) -> <init>
    70:74:android.stats.connectivity.ValidationResult forNumber(int) -> forNumber
    57:57:int getNumber() -> getNumber
    94:94:com.android.networkstack.protobuf.Internal$EnumVerifier internalGetVerifier() -> internalGetVerifier
    9:9:android.stats.connectivity.ValidationResult valueOf(java.lang.String) -> valueOf
    9:9:android.stats.connectivity.ValidationResult[] values() -> values
android.stats.connectivity.ValidationResult$1 -> android.stats.connectivity.ValidationResult$1:
    85:85:void <init>() -> <init>
    85:85:com.android.networkstack.protobuf.Internal$EnumLite findValueByNumber(int) -> findValueByNumber
    88:88:android.stats.connectivity.ValidationResult findValueByNumber(int) -> findValueByNumber
android.stats.connectivity.ValidationResult$ValidationResultVerifier -> android.stats.connectivity.ValidationResult$ValidationResultVerifier:
    99:99:void <clinit>() -> <clinit>
    97:97:void <init>() -> <init>
    102:102:boolean isInRange(int) -> isInRange
com.android.networkstack.NetworkStackNotifier -> com.android.networkstack.NetworkStackNotifier:
    107:107:void <init>(android.content.Context,android.os.Looper) -> <init>
    61:129:void <init>(android.content.Context,android.os.Looper,com.android.networkstack.NetworkStackNotifier$Dependencies) -> <init>
    55:55:java.util.Hashtable access$1000(com.android.networkstack.NetworkStackNotifier) -> access$1000
    55:55:java.lang.String access$1100(android.net.Network) -> access$1100
    55:55:void access$1200(com.android.networkstack.NetworkStackNotifier,java.lang.String,com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$1200
    55:55:android.net.Network access$700(com.android.networkstack.NetworkStackNotifier) -> access$700
    55:55:android.net.Network access$702(com.android.networkstack.NetworkStackNotifier,android.net.Network) -> access$702
    55:55:void access$800(com.android.networkstack.NetworkStackNotifier,android.net.Network) -> access$800
    55:55:void access$900(com.android.networkstack.NetworkStackNotifier,android.net.Network,java.util.function.Consumer) -> access$900
    142:147:void createNotificationChannel(java.lang.String,int,int,int) -> createNotificationChannel
    281:282:void dismissNotification(java.lang.String,com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> dismissNotification
    180:180:com.android.networkstack.apishim.common.CaptivePortalDataShim getCaptivePortalData(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> getCaptivePortalData
    299:302:android.content.Context getContextAsUser(android.content.Context,android.os.UserHandle) -> getContextAsUser
    137:137:android.os.Handler getHandler() -> getHandler
    288:290:android.app.Notification$Builder getNotificationBuilder(java.lang.String,com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus,android.content.res.Resources,java.lang.CharSequence) -> getNotificationBuilder
    159:159:android.app.NotificationManager getNotificationManagerForChannels() -> getNotificationManagerForChannels
    315:315:java.lang.String getNotificationTag(android.net.Network) -> getNotificationTag
    184:184:java.lang.String getSsid(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> getSsid
    307:311:boolean isVenueInfoNotificationEnabled() -> isVenueInfoNotificationEnabled
    168:168:void lambda$notifyCaptivePortalValidationPending$0(android.net.Network) -> lambda$notifyCaptivePortalValidationPending$0
    173:174:void lambda$setCaptivePortalValidationPending$1(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> lambda$setCaptivePortalValidationPending$1
    190:190:com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus lambda$updateNetworkStatus$2(android.net.Network) -> lambda$updateNetworkStatus$2
    168:168:void notifyCaptivePortalValidationPending(android.net.Network) -> notifyCaptivePortalValidationPending
    172:172:void setCaptivePortalValidationPending(android.net.Network) -> setCaptivePortalValidationPending
    189:191:void updateNetworkStatus(android.net.Network,java.util.function.Consumer) -> updateNetworkStatus
    195:277:void updateNotifications(android.net.Network) -> updateNotifications
com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda0 -> com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda0:
    com.android.networkstack.NetworkStackNotifier com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$0$ab33da05b64d01f468f61cba32846d8af7088709aef7fa0c21d0aae53e1372dc$0.f$0 -> f$0
    android.net.Network com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$0$ab33da05b64d01f468f61cba32846d8af7088709aef7fa0c21d0aae53e1372dc$0.f$1 -> f$1
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$0$ab33da05b64d01f468f61cba32846d8af7088709aef7fa0c21d0aae53e1372dc$0.<init>(com.android.networkstack.NetworkStackNotifier,android.net.Network) -> <init>
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$0$ab33da05b64d01f468f61cba32846d8af7088709aef7fa0c21d0aae53e1372dc$0.run() -> run
com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda1 -> com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda1:
    com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$1ba756d7958616b18d04076377e7459423de70621a56cd6f18c6cd1e0352808b$0 com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$1ba756d7958616b18d04076377e7459423de70621a56cd6f18c6cd1e0352808b$0.INSTANCE -> INSTANCE
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$1ba756d7958616b18d04076377e7459423de70621a56cd6f18c6cd1e0352808b$0.<clinit>() -> <clinit>
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$1ba756d7958616b18d04076377e7459423de70621a56cd6f18c6cd1e0352808b$0.<init>() -> <init>
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$1ba756d7958616b18d04076377e7459423de70621a56cd6f18c6cd1e0352808b$0.accept(java.lang.Object) -> accept
com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda2 -> com.android.networkstack.NetworkStackNotifier$$ExternalSyntheticLambda2:
    com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$f254b6306c1a54931d992e6b5b005d6823ea1917205a9c125b0784d7597d66ef$0 com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$f254b6306c1a54931d992e6b5b005d6823ea1917205a9c125b0784d7597d66ef$0.INSTANCE -> INSTANCE
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$f254b6306c1a54931d992e6b5b005d6823ea1917205a9c125b0784d7597d66ef$0.<clinit>() -> <clinit>
    void com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$f254b6306c1a54931d992e6b5b005d6823ea1917205a9c125b0784d7597d66ef$0.<init>() -> <init>
    java.lang.Object com.android.networkstack.NetworkStackNotifier$$InternalSyntheticLambda$1$f254b6306c1a54931d992e6b5b005d6823ea1917205a9c125b0784d7597d66ef$0.apply(java.lang.Object) -> apply
com.android.networkstack.NetworkStackNotifier$AllNetworksCallback -> com.android.networkstack.NetworkStackNotifier$AllNetworksCallback:
    337:337:void <init>(com.android.networkstack.NetworkStackNotifier) -> <init>
    337:337:void <init>(com.android.networkstack.NetworkStackNotifier,com.android.networkstack.NetworkStackNotifier$1) -> <init>
    347:347:void lambda$onCapabilitiesChanged$1(android.net.NetworkCapabilities,com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> lambda$onCapabilitiesChanged$1
    340:340:void lambda$onLinkPropertiesChanged$0(android.net.LinkProperties,com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> lambda$onLinkPropertiesChanged$0
    347:348:void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities) -> onCapabilitiesChanged
    340:341:void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties) -> onLinkPropertiesChanged
    353:355:void onLost(android.net.Network) -> onLost
com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$ExternalSyntheticLambda0 -> com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$ExternalSyntheticLambda0:
    android.net.LinkProperties com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$27d572dbdb3080c3a2f721f378178a364d48af6833da825ae25eaa203d41e786$0.f$0 -> f$0
    void com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$27d572dbdb3080c3a2f721f378178a364d48af6833da825ae25eaa203d41e786$0.<init>(android.net.LinkProperties) -> <init>
    void com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$27d572dbdb3080c3a2f721f378178a364d48af6833da825ae25eaa203d41e786$0.accept(java.lang.Object) -> accept
com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$ExternalSyntheticLambda1 -> com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$ExternalSyntheticLambda1:
    android.net.NetworkCapabilities com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$ea48639272bb5245e029022cc9a92baa989cc5a90af495bc3017002b41deb173$0.f$0 -> f$0
    void com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$ea48639272bb5245e029022cc9a92baa989cc5a90af495bc3017002b41deb173$0.<init>(android.net.NetworkCapabilities) -> <init>
    void com.android.networkstack.NetworkStackNotifier$AllNetworksCallback$$InternalSyntheticLambda$0$ea48639272bb5245e029022cc9a92baa989cc5a90af495bc3017002b41deb173$0.accept(java.lang.Object) -> accept
com.android.networkstack.NetworkStackNotifier$DefaultNetworkCallback -> com.android.networkstack.NetworkStackNotifier$DefaultNetworkCallback:
    318:318:void <init>(com.android.networkstack.NetworkStackNotifier) -> <init>
    318:318:void <init>(com.android.networkstack.NetworkStackNotifier,com.android.networkstack.NetworkStackNotifier$1) -> <init>
    321:321:void onAvailable(android.net.Network) -> onAvailable
    326:326:void onLost(android.net.Network) -> onLost
    330:333:void updateDefaultNetwork(android.net.Network) -> updateDefaultNetwork
com.android.networkstack.NetworkStackNotifier$Dependencies -> com.android.networkstack.NetworkStackNotifier$Dependencies:
    100:100:void <init>() -> <init>
    102:102:android.app.PendingIntent getActivityPendingIntent(android.content.Context,android.content.Intent,int) -> getActivityPendingIntent
com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus -> com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus:
    74:76:void <init>() -> <init>
    74:74:void <init>(com.android.networkstack.NetworkStackNotifier$1) -> <init>
    74:74:android.net.LinkProperties access$200(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$200
    74:74:android.net.LinkProperties access$202(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus,android.net.LinkProperties) -> access$202
    74:74:android.net.NetworkCapabilities access$300(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$300
    74:74:android.net.NetworkCapabilities access$302(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus,android.net.NetworkCapabilities) -> access$302
    74:74:boolean access$400(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$400
    74:74:boolean access$500(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$500
    74:74:boolean access$502(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus,boolean) -> access$502
    74:74:int access$600(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus) -> access$600
    74:74:int access$602(com.android.networkstack.NetworkStackNotifier$TrackedNetworkStatus,int) -> access$602
    81:82:boolean isValidated() -> isValidated
com.android.networkstack.apishim.CaptivePortalDataShimImpl -> com.android.networkstack.apishim.CaptivePortalDataShimImpl:
    32:32:void <init>(android.net.CaptivePortalData) -> <init>
    46:46:int getUserPortalUrlSource() -> getUserPortalUrlSource
    37:37:java.lang.CharSequence getVenueFriendlyName() -> getVenueFriendlyName
com.android.networkstack.apishim.NetworkInformationShimImpl -> com.android.networkstack.apishim.NetworkInformationShimImpl:
    36:36:void <init>() -> <init>
    59:60:com.android.networkstack.apishim.common.CaptivePortalDataShim getCaptivePortalData(android.net.LinkProperties) -> getCaptivePortalData
    50:53:com.android.networkstack.apishim.common.NetworkInformationShim newInstance() -> newInstance
    43:43:boolean useApiAboveR() -> useApiAboveR
com.android.networkstack.apishim.api29.CaptivePortalDataShimImpl -> com.android.networkstack.apishim.api29.CaptivePortalDataShimImpl:
    37:37:void <init>() -> <init>
    50:50:com.android.networkstack.apishim.common.CaptivePortalDataShim fromJson(org.json.JSONObject) -> fromJson
com.android.networkstack.apishim.api29.NetworkInformationShimImpl -> com.android.networkstack.apishim.api29.NetworkInformationShimImpl:
    40:40:void <init>() -> <init>
    108:108:android.net.LinkProperties makeSensitiveFieldsParcelingCopy(android.net.LinkProperties) -> makeSensitiveFieldsParcelingCopy
    49:49:com.android.networkstack.apishim.common.NetworkInformationShim newInstance() -> newInstance
com.android.networkstack.apishim.api29.NetworkShimImpl -> com.android.networkstack.apishim.api29.NetworkShimImpl:
    32:33:void <init>(android.net.Network) -> <init>
    53:53:int getNetId() -> getNetId
    43:43:com.android.networkstack.apishim.common.NetworkShim newInstance(android.net.Network) -> newInstance
com.android.networkstack.apishim.api29.SocketUtilsShimImpl -> com.android.networkstack.apishim.api29.SocketUtilsShimImpl:
    31:31:void <init>() -> <init>
    48:48:java.net.SocketAddress makePacketSocketAddress(int,int,byte[]) -> makePacketSocketAddress
    40:40:com.android.networkstack.apishim.common.SocketUtilsShim newInstance() -> newInstance
com.android.networkstack.apishim.api30.CaptivePortalDataShimImpl -> com.android.networkstack.apishim.api30.CaptivePortalDataShimImpl:
    42:43:void <init>(android.net.CaptivePortalData) -> <init>
    58:77:com.android.networkstack.apishim.common.CaptivePortalDataShim fromJson(org.json.JSONObject) -> fromJson
    101:101:long getByteLimit() -> getByteLimit
    106:106:long getExpiryTimeMillis() -> getExpiryTimeMillis
    85:86:long getLongOrDefault(org.json.JSONObject,java.lang.String,long) -> getLongOrDefault
    90:91:android.net.Uri getUriOrNull(org.json.JSONObject,java.lang.String) -> getUriOrNull
    111:111:android.net.Uri getUserPortalUrl() -> getUserPortalUrl
    116:116:android.net.Uri getVenueInfoUrl() -> getVenueInfoUrl
    96:96:boolean isCaptive() -> isCaptive
    81:81:boolean isSupported() -> isSupported
    121:121:void notifyChanged(android.net.INetworkMonitorCallbacks) -> notifyChanged
com.android.networkstack.apishim.api30.NetworkInformationShimImpl -> com.android.networkstack.apishim.api30.NetworkInformationShimImpl:
    43:43:void <init>() -> <init>
    67:67:android.net.Uri getCaptivePortalApiUrl(android.net.LinkProperties) -> getCaptivePortalApiUrl
    78:79:com.android.networkstack.apishim.common.CaptivePortalDataShim getCaptivePortalData(android.net.LinkProperties) -> getCaptivePortalData
    85:85:android.net.IpPrefix getNat64Prefix(android.net.LinkProperties) -> getNat64Prefix
    97:97:java.lang.String getSsid(android.net.NetworkCapabilities) -> getSsid
    103:103:android.net.LinkProperties makeSensitiveFieldsParcelingCopy(android.net.LinkProperties) -> makeSensitiveFieldsParcelingCopy
    49:52:com.android.networkstack.apishim.common.NetworkInformationShim newInstance() -> newInstance
    72:72:void setCaptivePortalApiUrl(android.net.LinkProperties,android.net.Uri) -> setCaptivePortalApiUrl
    109:109:void setDhcpServerAddress(android.net.LinkProperties,java.net.Inet4Address) -> setDhcpServerAddress
    90:90:void setNat64Prefix(android.net.LinkProperties,android.net.IpPrefix) -> setNat64Prefix
    60:60:boolean useApiAboveQ() -> useApiAboveQ
com.android.networkstack.apishim.api30.NetworkShimImpl -> com.android.networkstack.apishim.api30.NetworkShimImpl:
    32:32:void <init>(android.net.Network) -> <init>
    50:50:int getNetId() -> getNetId
    39:42:com.android.networkstack.apishim.common.NetworkShim newInstance(android.net.Network) -> newInstance
com.android.networkstack.apishim.api30.SocketUtilsShimImpl -> com.android.networkstack.apishim.api30.SocketUtilsShimImpl:
    34:34:void <init>() -> <init>
    50:50:java.net.SocketAddress makePacketSocketAddress(int,int,byte[]) -> makePacketSocketAddress
    40:43:com.android.networkstack.apishim.common.SocketUtilsShim newInstance() -> newInstance
com.android.networkstack.apishim.common.ShimUtils -> com.android.networkstack.apishim.common.ShimUtils:
    57:57:boolean isAtLeastS() -> isAtLeastS
    41:42:boolean isReleaseOrDevelopmentApiAbove(int) -> isReleaseOrDevelopmentApiAbove
com.android.networkstack.apishim.common.UnsupportedApiLevelException -> com.android.networkstack.apishim.common.UnsupportedApiLevelException:
    29:29:void <init>() -> <init>
    39:39:void <init>(java.lang.String) -> <init>
com.android.networkstack.arp.ArpPacket -> com.android.networkstack.arp.ArpPacket:
    55:60:void <init>(short,android.net.MacAddress,java.net.Inet4Address,android.net.MacAddress,java.net.Inet4Address) -> <init>
    70:87:java.nio.ByteBuffer buildArpPacket(byte[],byte[],byte[],byte[],byte[],short) -> buildArpPacket
    98:159:com.android.networkstack.arp.ArpPacket parseArpPacket(byte[],int) -> parseArpPacket
com.android.networkstack.arp.ArpPacket$ParseException -> com.android.networkstack.arp.ArpPacket$ParseException:
    168:168:void <init>(java.lang.String) -> <init>
com.android.networkstack.metrics.CapportApiData -> com.android.networkstack.metrics.CapportApiData:
    548:552:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    9:9:com.android.networkstack.metrics.CapportApiData access$000() -> access$000
    9:9:void access$100(com.android.networkstack.metrics.CapportApiData,int) -> access$100
    9:9:void access$300(com.android.networkstack.metrics.CapportApiData,int) -> access$300
    9:9:void access$500(com.android.networkstack.metrics.CapportApiData,boolean) -> access$500
    9:9:void access$700(com.android.networkstack.metrics.CapportApiData,boolean) -> access$700
    495:541:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    280:280:com.android.networkstack.metrics.CapportApiData$Builder newBuilder() -> newBuilder
    143:144:void setHasPortalUrl(boolean) -> setHasPortalUrl
    190:191:void setHasVenueInfo(boolean) -> setHasVenueInfo
    96:97:void setRemainingBytes(int) -> setRemainingBytes
    49:50:void setRemainingTtlSecs(int) -> setRemainingTtlSecs
com.android.networkstack.metrics.CapportApiData$1 -> com.android.networkstack.metrics.CapportApiData$1:
    495:495:void <clinit>() -> <clinit>
com.android.networkstack.metrics.CapportApiData$Builder -> com.android.networkstack.metrics.CapportApiData$Builder:
    289:289:void <init>(com.android.networkstack.metrics.CapportApiData$1) -> <init>
    296:296:void <init>() -> <init>
    424:425:com.android.networkstack.metrics.CapportApiData$Builder setHasPortalUrl(boolean) -> setHasPortalUrl
    471:472:com.android.networkstack.metrics.CapportApiData$Builder setHasVenueInfo(boolean) -> setHasVenueInfo
    377:378:com.android.networkstack.metrics.CapportApiData$Builder setRemainingBytes(int) -> setRemainingBytes
    330:331:com.android.networkstack.metrics.CapportApiData$Builder setRemainingTtlSecs(int) -> setRemainingTtlSecs
com.android.networkstack.metrics.DataStallDetectionStats -> com.android.networkstack.metrics.DataStallDetectionStats:
    74:85:void <init>(byte[],byte[],int[],long[],int,int,int,int) -> <init>
    100:105:byte[] emptyCellDataIfNull(byte[]) -> emptyCellDataIfNull
    120:123:byte[] emptyWifiInfoIfNull(byte[]) -> emptyWifiInfoIfNull
    147:153:boolean equals(java.lang.Object) -> equals
    160:161:int hashCode() -> hashCode
    128:142:java.lang.String toString() -> toString
com.android.networkstack.metrics.DataStallDetectionStats$Builder -> com.android.networkstack.metrics.DataStallDetectionStats$Builder:
    169:181:void <init>() -> <init>
    191:192:com.android.networkstack.metrics.DataStallDetectionStats$Builder addDnsEvent(int,long) -> addDnsEvent
    301:303:com.android.networkstack.metrics.DataStallDetectionStats build() -> build
    263:263:int getWifiBand(android.net.wifi.WifiInfo) -> getWifiBand
    287:293:com.android.networkstack.metrics.DataStallDetectionStats$Builder setCellData(int,boolean,java.lang.String,java.lang.String,int) -> setCellData
    203:203:com.android.networkstack.metrics.DataStallDetectionStats$Builder setEvaluationType(int) -> setEvaluationType
    214:214:com.android.networkstack.metrics.DataStallDetectionStats$Builder setNetworkType(int) -> setNetworkType
    227:227:com.android.networkstack.metrics.DataStallDetectionStats$Builder setTcpFailRate(int) -> setTcpFailRate
    242:242:com.android.networkstack.metrics.DataStallDetectionStats$Builder setTcpSentSinceLastRecv(int) -> setTcpSentSinceLastRecv
    253:256:com.android.networkstack.metrics.DataStallDetectionStats$Builder setWiFiData(android.net.wifi.WifiInfo) -> setWiFiData
com.android.networkstack.metrics.DataStallStatsUtils -> com.android.networkstack.metrics.DataStallStatsUtils:
    50:54:int probeResultToEnum(android.net.captiveportal.CaptivePortalProbeResult) -> probeResultToEnum
    66:71:void write(com.android.networkstack.metrics.DataStallDetectionStats,android.net.captiveportal.CaptivePortalProbeResult) -> write
com.android.networkstack.metrics.DhcpSession -> com.android.networkstack.metrics.DhcpSession:
    29:977:void <clinit>() -> <clinit>
    21:23:void <init>() -> <init>
    16:16:com.android.networkstack.metrics.DhcpSession access$000() -> access$000
    16:16:void access$1200(com.android.networkstack.metrics.DhcpSession,android.stats.connectivity.DhcpErrorCode) -> access$1200
    16:16:void access$1500(com.android.networkstack.metrics.DhcpSession,android.stats.connectivity.HostnameTransResult) -> access$1500
    16:16:void access$200(com.android.networkstack.metrics.DhcpSession,android.stats.connectivity.DhcpFeature) -> access$200
    16:16:void access$500(com.android.networkstack.metrics.DhcpSession,int) -> access$500
    16:16:void access$700(com.android.networkstack.metrics.DhcpSession,int) -> access$700
    16:16:void access$900(com.android.networkstack.metrics.DhcpSession,int) -> access$900
    358:361:void addErrorCode(android.stats.connectivity.DhcpErrorCode) -> addErrorCode
    102:105:void addUsedFeatures(android.stats.connectivity.DhcpFeature) -> addUsedFeatures
    915:966:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    327:329:void ensureErrorCodeIsMutable() -> ensureErrorCodeIsMutable
    73:75:void ensureUsedFeaturesIsMutable() -> ensureUsedFeaturesIsMutable
    250:250:int getConflictCount() -> getConflictCount
    982:982:com.android.networkstack.metrics.DhcpSession getDefaultInstance() -> getDefaultInstance
    154:154:int getDiscoverCount() -> getDiscoverCount
    312:312:int getErrorCodeCount() -> getErrorCodeCount
    201:201:int getRequestCount() -> getRequestCount
    516:516:com.android.networkstack.metrics.DhcpSession$Builder newBuilder() -> newBuilder
    261:262:void setConflictCount(int) -> setConflictCount
    164:165:void setDiscoverCount(int) -> setDiscoverCount
    424:427:void setHtResult(android.stats.connectivity.HostnameTransResult) -> setHtResult
    211:212:void setRequestCount(int) -> setRequestCount
com.android.networkstack.metrics.DhcpSession$1 -> com.android.networkstack.metrics.DhcpSession$1:
    31:31:void <init>() -> <init>
com.android.networkstack.metrics.DhcpSession$2 -> com.android.networkstack.metrics.DhcpSession$2:
    282:282:void <init>() -> <init>
com.android.networkstack.metrics.DhcpSession$3 -> com.android.networkstack.metrics.DhcpSession$3:
    915:915:void <clinit>() -> <clinit>
com.android.networkstack.metrics.DhcpSession$Builder -> com.android.networkstack.metrics.DhcpSession$Builder:
    532:532:void <init>(com.android.networkstack.metrics.DhcpSession$1) -> <init>
    539:539:void <init>() -> <init>
    830:831:com.android.networkstack.metrics.DhcpSession$Builder addErrorCode(android.stats.connectivity.DhcpErrorCode) -> addErrorCode
    597:598:com.android.networkstack.metrics.DhcpSession$Builder addUsedFeatures(android.stats.connectivity.DhcpFeature) -> addUsedFeatures
    742:742:int getConflictCount() -> getConflictCount
    646:646:int getDiscoverCount() -> getDiscoverCount
    793:793:int getErrorCodeCount() -> getErrorCodeCount
    693:693:int getRequestCount() -> getRequestCount
    753:754:com.android.networkstack.metrics.DhcpSession$Builder setConflictCount(int) -> setConflictCount
    656:657:com.android.networkstack.metrics.DhcpSession$Builder setDiscoverCount(int) -> setDiscoverCount
    891:892:com.android.networkstack.metrics.DhcpSession$Builder setHtResult(android.stats.connectivity.HostnameTransResult) -> setHtResult
    703:704:com.android.networkstack.metrics.DhcpSession$Builder setRequestCount(int) -> setRequestCount
com.android.networkstack.metrics.IpProvisioningMetrics -> com.android.networkstack.metrics.IpProvisioningMetrics:
    38:46:void <init>() -> <init>
    137:138:void addDhcpErrorCode(int) -> addDhcpErrorCode
    128:129:android.stats.connectivity.DhcpErrorCode dhcpErrorFromNumberSafe(int) -> dhcpErrorFromNumberSafe
    99:99:void incrementCountForDiscover() -> incrementCountForDiscover
    113:113:void incrementCountForIpConflict() -> incrementCountForIpConflict
    106:106:void incrementCountForRequest() -> incrementCountForRequest
    55:60:void reset() -> reset
    91:92:void setDhcpEnabledFeature(android.stats.connectivity.DhcpFeature) -> setDhcpEnabledFeature
    145:146:void setDisconnectCode(android.stats.connectivity.DisconnectCode) -> setDisconnectCode
    120:121:void setHostnameTransinfo(boolean,boolean) -> setHostnameTransinfo
    73:74:void setIPv4ProvisionedLatencyOnFirstTime(boolean) -> setIPv4ProvisionedLatencyOnFirstTime
    82:83:void setIPv6ProvisionedLatencyOnFirstTime(boolean) -> setIPv6ProvisionedLatencyOnFirstTime
    153:170:com.android.networkstack.metrics.NetworkIpProvisioningReported statsWrite() -> statsWrite
com.android.networkstack.metrics.NetworkIpProvisioningReported -> com.android.networkstack.metrics.NetworkIpProvisioningReported:
    917:921:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    16:16:com.android.networkstack.metrics.NetworkIpProvisioningReported access$000() -> access$000
    16:16:void access$1200(com.android.networkstack.metrics.NetworkIpProvisioningReported,com.android.networkstack.metrics.DhcpSession$Builder) -> access$1200
    16:16:void access$1500(com.android.networkstack.metrics.NetworkIpProvisioningReported,int) -> access$1500
    16:16:void access$300(com.android.networkstack.metrics.NetworkIpProvisioningReported,int) -> access$300
    16:16:void access$500(com.android.networkstack.metrics.NetworkIpProvisioningReported,int) -> access$500
    16:16:void access$700(com.android.networkstack.metrics.NetworkIpProvisioningReported,long) -> access$700
    16:16:void access$900(com.android.networkstack.metrics.NetworkIpProvisioningReported,android.stats.connectivity.DisconnectCode) -> access$900
    858:910:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    289:289:com.android.networkstack.metrics.DhcpSession getDhcpSession() -> getDhcpSession
    238:239:android.stats.connectivity.DisconnectCode getDisconnectCode() -> getDisconnectCode
    97:97:int getIpv4LatencyMicros() -> getIpv4LatencyMicros
    144:144:int getIpv6LatencyMicros() -> getIpv6LatencyMicros
    191:191:long getProvisioningDurationMicros() -> getProvisioningDurationMicros
    371:371:int getRandomNumber() -> getRandomNumber
    46:47:android.stats.connectivity.TransportType getTransportType() -> getTransportType
    227:227:boolean hasDisconnectCode() -> hasDisconnectCode
    86:86:boolean hasIpv4LatencyMicros() -> hasIpv4LatencyMicros
    133:133:boolean hasIpv6LatencyMicros() -> hasIpv6LatencyMicros
    471:471:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder newBuilder() -> newBuilder
    314:315:void setDhcpSession(com.android.networkstack.metrics.DhcpSession$Builder) -> setDhcpSession
    250:253:void setDisconnectCode(android.stats.connectivity.DisconnectCode) -> setDisconnectCode
    107:108:void setIpv4LatencyMicros(int) -> setIpv4LatencyMicros
    154:155:void setIpv6LatencyMicros(int) -> setIpv6LatencyMicros
    201:202:void setProvisioningDurationMicros(long) -> setProvisioningDurationMicros
    381:382:void setRandomNumber(int) -> setRandomNumber
com.android.networkstack.metrics.NetworkIpProvisioningReported$1 -> com.android.networkstack.metrics.NetworkIpProvisioningReported$1:
    858:858:void <clinit>() -> <clinit>
com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder -> com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder:
    487:487:void <init>(com.android.networkstack.metrics.NetworkIpProvisioningReported$1) -> <init>
    494:494:void <init>() -> <init>
    695:695:boolean hasDisconnectCode() -> hasDisconnectCode
    554:554:boolean hasIpv4LatencyMicros() -> hasIpv4LatencyMicros
    601:601:boolean hasIpv6LatencyMicros() -> hasIpv6LatencyMicros
    776:777:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setDhcpSession(com.android.networkstack.metrics.DhcpSession$Builder) -> setDhcpSession
    716:717:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setDisconnectCode(android.stats.connectivity.DisconnectCode) -> setDisconnectCode
    575:576:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setIpv4LatencyMicros(int) -> setIpv4LatencyMicros
    622:623:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setIpv6LatencyMicros(int) -> setIpv6LatencyMicros
    669:670:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setProvisioningDurationMicros(long) -> setProvisioningDurationMicros
    834:835:com.android.networkstack.metrics.NetworkIpProvisioningReported$Builder setRandomNumber(int) -> setRandomNumber
com.android.networkstack.metrics.NetworkQuirkMetrics -> com.android.networkstack.metrics.NetworkQuirkMetrics:
    49:49:void <init>() -> <init>
    30:54:void <init>(com.android.networkstack.metrics.NetworkQuirkMetrics$Dependencies) -> <init>
    61:61:void setEvent(android.stats.connectivity.NetworkQuirkEvent) -> setEvent
    68:69:com.android.networkstack.metrics.NetworkStackQuirkReported statsWrite() -> statsWrite
com.android.networkstack.metrics.NetworkQuirkMetrics$Dependencies -> com.android.networkstack.metrics.NetworkQuirkMetrics$Dependencies:
    35:35:void <init>() -> <init>
    40:40:void writeStats(int) -> writeStats
com.android.networkstack.metrics.NetworkStackQuirkReported -> com.android.networkstack.metrics.NetworkStackQuirkReported:
    384:388:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    17:17:com.android.networkstack.metrics.NetworkStackQuirkReported access$000() -> access$000
    17:17:void access$300(com.android.networkstack.metrics.NetworkStackQuirkReported,android.stats.connectivity.NetworkQuirkEvent) -> access$300
    331:377:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    98:99:android.stats.connectivity.NetworkQuirkEvent getEvent() -> getEvent
    202:202:com.android.networkstack.metrics.NetworkStackQuirkReported$Builder newBuilder() -> newBuilder
    110:113:void setEvent(android.stats.connectivity.NetworkQuirkEvent) -> setEvent
com.android.networkstack.metrics.NetworkStackQuirkReported$1 -> com.android.networkstack.metrics.NetworkStackQuirkReported$1:
    331:331:void <clinit>() -> <clinit>
com.android.networkstack.metrics.NetworkStackQuirkReported$Builder -> com.android.networkstack.metrics.NetworkStackQuirkReported$Builder:
    219:219:void <init>(com.android.networkstack.metrics.NetworkStackQuirkReported$1) -> <init>
    226:226:void <init>() -> <init>
    307:308:com.android.networkstack.metrics.NetworkStackQuirkReported$Builder setEvent(android.stats.connectivity.NetworkQuirkEvent) -> setEvent
com.android.networkstack.metrics.NetworkStackStatsLog -> com.android.networkstack.metrics.NetworkStackStatsLog:
    237:250:void write(int,int,byte[],int,int,int,int) -> write
    255:264:void write(int,int,int) -> write
    284:299:void write(int,int,int,int,byte[],byte[],byte[],int,int) -> write
    322:336:void write(int,int,int,int,long,int,byte[],int) -> write
com.android.networkstack.metrics.NetworkStackStatsLog$QLogger -> com.android.networkstack.metrics.NetworkStackStatsLog$QLogger:
    672:675:void copyInt(byte[],int,int) -> copyInt
    680:687:void copyLong(byte[],int,long) -> copyLong
    402:441:void write(int,int,byte[],int,int,int,int) -> write
    457:470:void write(int,int,int) -> write
    515:568:void write(int,int,int,int,byte[],byte[],byte[],int,int) -> write
    627:666:void write(int,int,int,int,long,int,byte[],int) -> write
com.android.networkstack.metrics.NetworkValidationMetrics -> com.android.networkstack.metrics.NetworkValidationMetrics:
    52:58:void <init>() -> <init>
    196:218:void addProbeEvent(android.stats.connectivity.ProbeType,long,android.stats.connectivity.ProbeResult,com.android.networkstack.apishim.common.CaptivePortalDataShim) -> addProbeEvent
    91:125:android.stats.connectivity.TransportType getTransportTypeFromNC(android.net.NetworkCapabilities) -> getTransportTypeFromNC
    154:165:android.stats.connectivity.ProbeResult httpProbeResultToEnum(android.net.captiveportal.CaptivePortalProbeResult) -> httpProbeResultToEnum
    235:251:com.android.networkstack.metrics.NetworkValidationReported maybeStopCollectionAndSend() -> maybeStopCollectionAndSend
    134:146:android.stats.connectivity.ProbeType probeTypeToEnum(int) -> probeTypeToEnum
    225:225:void setValidationResult(int,java.lang.String) -> setValidationResult
    68:73:void startCollection(android.net.NetworkCapabilities) -> startCollection
    177:183:android.stats.connectivity.ValidationResult validationResultToEnum(int,java.lang.String) -> validationResultToEnum
com.android.networkstack.metrics.NetworkValidationReported -> com.android.networkstack.metrics.NetworkValidationReported:
    821:825:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    16:16:com.android.networkstack.metrics.NetworkValidationReported access$000() -> access$000
    16:16:void access$100(com.android.networkstack.metrics.NetworkValidationReported,android.stats.connectivity.TransportType) -> access$100
    16:16:void access$1100(com.android.networkstack.metrics.NetworkValidationReported,int) -> access$1100
    16:16:void access$1300(com.android.networkstack.metrics.NetworkValidationReported,int) -> access$1300
    16:16:void access$400(com.android.networkstack.metrics.NetworkValidationReported,com.android.networkstack.metrics.ProbeEvents$Builder) -> access$400
    16:16:void access$700(com.android.networkstack.metrics.NetworkValidationReported,android.stats.connectivity.ValidationResult) -> access$700
    16:16:void access$900(com.android.networkstack.metrics.NetworkValidationReported,int) -> access$900
    764:814:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    230:230:int getLatencyMicros() -> getLatencyMicros
    97:97:com.android.networkstack.metrics.ProbeEvents getProbeEvents() -> getProbeEvents
    324:324:int getRandomNumber() -> getRandomNumber
    46:47:android.stats.connectivity.TransportType getTransportType() -> getTransportType
    277:277:int getValidationIndex() -> getValidationIndex
    179:180:android.stats.connectivity.ValidationResult getValidationResult() -> getValidationResult
    424:424:com.android.networkstack.metrics.NetworkValidationReported$Builder newBuilder() -> newBuilder
    240:241:void setLatencyMicros(int) -> setLatencyMicros
    122:123:void setProbeEvents(com.android.networkstack.metrics.ProbeEvents$Builder) -> setProbeEvents
    334:335:void setRandomNumber(int) -> setRandomNumber
    58:61:void setTransportType(android.stats.connectivity.TransportType) -> setTransportType
    287:288:void setValidationIndex(int) -> setValidationIndex
    191:194:void setValidationResult(android.stats.connectivity.ValidationResult) -> setValidationResult
com.android.networkstack.metrics.NetworkValidationReported$1 -> com.android.networkstack.metrics.NetworkValidationReported$1:
    764:764:void <clinit>() -> <clinit>
com.android.networkstack.metrics.NetworkValidationReported$Builder -> com.android.networkstack.metrics.NetworkValidationReported$Builder:
    440:440:void <init>(com.android.networkstack.metrics.NetworkValidationReported$1) -> <init>
    447:447:void <init>() -> <init>
    646:647:com.android.networkstack.metrics.NetworkValidationReported$Builder setLatencyMicros(int) -> setLatencyMicros
    541:542:com.android.networkstack.metrics.NetworkValidationReported$Builder setProbeEvents(com.android.networkstack.metrics.ProbeEvents$Builder) -> setProbeEvents
    740:741:com.android.networkstack.metrics.NetworkValidationReported$Builder setRandomNumber(int) -> setRandomNumber
    481:482:com.android.networkstack.metrics.NetworkValidationReported$Builder setTransportType(android.stats.connectivity.TransportType) -> setTransportType
    693:694:com.android.networkstack.metrics.NetworkValidationReported$Builder setValidationIndex(int) -> setValidationIndex
    599:600:com.android.networkstack.metrics.NetworkValidationReported$Builder setValidationResult(android.stats.connectivity.ValidationResult) -> setValidationResult
com.android.networkstack.metrics.ProbeEvent -> com.android.networkstack.metrics.ProbeEvent:
    617:621:void <clinit>() -> <clinit>
    14:14:void <init>() -> <init>
    9:9:com.android.networkstack.metrics.ProbeEvent access$000() -> access$000
    9:9:void access$100(com.android.networkstack.metrics.ProbeEvent,android.stats.connectivity.ProbeType) -> access$100
    9:9:void access$300(com.android.networkstack.metrics.ProbeEvent,int) -> access$300
    9:9:void access$500(com.android.networkstack.metrics.ProbeEvent,android.stats.connectivity.ProbeResult) -> access$500
    9:9:void access$800(com.android.networkstack.metrics.ProbeEvent,com.android.networkstack.metrics.CapportApiData$Builder) -> access$800
    562:610:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    323:323:com.android.networkstack.metrics.ProbeEvent$Builder newBuilder() -> newBuilder
    213:214:void setCapportApiData(com.android.networkstack.metrics.CapportApiData$Builder) -> setCapportApiData
    100:101:void setLatencyMicros(int) -> setLatencyMicros
    149:152:void setProbeResult(android.stats.connectivity.ProbeResult) -> setProbeResult
    51:54:void setProbeType(android.stats.connectivity.ProbeType) -> setProbeType
com.android.networkstack.metrics.ProbeEvent$1 -> com.android.networkstack.metrics.ProbeEvent$1:
    562:562:void <clinit>() -> <clinit>
com.android.networkstack.metrics.ProbeEvent$Builder -> com.android.networkstack.metrics.ProbeEvent$Builder:
    332:332:void <init>(com.android.networkstack.metrics.ProbeEvent$1) -> <init>
    339:339:void <init>() -> <init>
    527:528:com.android.networkstack.metrics.ProbeEvent$Builder setCapportApiData(com.android.networkstack.metrics.CapportApiData$Builder) -> setCapportApiData
    420:421:com.android.networkstack.metrics.ProbeEvent$Builder setLatencyMicros(int) -> setLatencyMicros
    467:468:com.android.networkstack.metrics.ProbeEvent$Builder setProbeResult(android.stats.connectivity.ProbeResult) -> setProbeResult
    373:374:com.android.networkstack.metrics.ProbeEvent$Builder setProbeType(android.stats.connectivity.ProbeType) -> setProbeType
com.android.networkstack.metrics.ProbeEvents -> com.android.networkstack.metrics.ProbeEvents:
    495:499:void <clinit>() -> <clinit>
    14:15:void <init>() -> <init>
    9:9:com.android.networkstack.metrics.ProbeEvents access$000() -> access$000
    9:9:void access$500(com.android.networkstack.metrics.ProbeEvents,com.android.networkstack.metrics.ProbeEvent$Builder) -> access$500
    146:147:void addProbeEvent(com.android.networkstack.metrics.ProbeEvent$Builder) -> addProbeEvent
    446:488:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object,java.lang.Object) -> dynamicMethod
    75:77:void ensureProbeEventIsMutable() -> ensureProbeEventIsMutable
    504:504:com.android.networkstack.metrics.ProbeEvents getDefaultInstance() -> getDefaultInstance
    50:50:int getProbeEventCount() -> getProbeEventCount
    271:271:com.android.networkstack.metrics.ProbeEvents$Builder newBuilder() -> newBuilder
com.android.networkstack.metrics.ProbeEvents$1 -> com.android.networkstack.metrics.ProbeEvents$1:
    446:446:void <clinit>() -> <clinit>
com.android.networkstack.metrics.ProbeEvents$Builder -> com.android.networkstack.metrics.ProbeEvents$Builder:
    280:280:void <init>(com.android.networkstack.metrics.ProbeEvents$1) -> <init>
    287:287:void <init>() -> <init>
    384:385:com.android.networkstack.metrics.ProbeEvents$Builder addProbeEvent(com.android.networkstack.metrics.ProbeEvent$Builder) -> addProbeEvent
    312:312:int getProbeEventCount() -> getProbeEventCount
com.android.networkstack.netlink.TcpInfo -> com.android.networkstack.netlink.TcpInfo:
    93:99:void <clinit>() -> <clinit>
    114:128:void <init>(java.nio.ByteBuffer,int) -> <init>
    132:136:void <init>(int,int,int,int) -> <init>
    179:182:boolean equals(java.lang.Object) -> equals
    107:111:int getFieldOffset(com.android.networkstack.netlink.TcpInfo$Field) -> getFieldOffset
    173:173:java.lang.String getTcpStateName(int) -> getTcpStateName
    188:188:int hashCode() -> hashCode
    143:146:com.android.networkstack.netlink.TcpInfo parse(java.nio.ByteBuffer,int) -> parse
    193:193:java.lang.String toString() -> toString
com.android.networkstack.netlink.TcpInfo$Field -> com.android.networkstack.netlink.TcpInfo$Field:
    36:82:void <clinit>() -> <clinit>
    86:87:void <init>(java.lang.String,int,int) -> <init>
    36:36:com.android.networkstack.netlink.TcpInfo$Field valueOf(java.lang.String) -> valueOf
    36:36:com.android.networkstack.netlink.TcpInfo$Field[] values() -> values
com.android.networkstack.netlink.TcpSocketTracker -> com.android.networkstack.netlink.TcpSocketTracker:
    90:90:void <clinit>() -> <clinit>
    106:172:void <init>(com.android.networkstack.netlink.TcpSocketTracker$Dependencies,android.net.Network) -> <init>
    87:87:int access$002(com.android.networkstack.netlink.TcpSocketTracker,int) -> access$002
    87:87:com.android.networkstack.netlink.TcpSocketTracker$Dependencies access$100(com.android.networkstack.netlink.TcpSocketTracker) -> access$100
    87:87:int access$202(com.android.networkstack.netlink.TcpSocketTracker,int) -> access$202
    335:355:com.android.networkstack.netlink.TcpSocketTracker$TcpStat calculateLatestPacketsStat(com.android.networkstack.netlink.TcpSocketTracker$SocketInfo,com.android.networkstack.netlink.TcpSocketTracker$SocketInfo) -> calculateLatestPacketsStat
    279:288:void cleanupSocketInfo(long) -> cleanupSocketInfo
    391:391:boolean enoughBytesRemainForValidNlMsg(java.nio.ByteBuffer) -> enoughBytesRemainForValidNlMsg
    367:370:int getLatestPacketFailPercentage() -> getLatestPacketFailPercentage
    384:385:int getLatestReceivedCount() -> getLatestReceivedCount
    399:399:int getMinPacketsThreshold() -> getMinPacketsThreshold
    178:183:android.net.MarkMaskParcel getNetworkMarkMask() -> getNetworkMarkMask
    378:379:int getSentSinceLastRecv() -> getSentSinceLastRecv
    403:403:int getTcpPacketsFailRateThreshold() -> getTcpPacketsFailRateThreshold
    327:328:boolean isDataStallSuspected() -> isDataStallSuspected
    297:317:com.android.networkstack.netlink.TcpSocketTracker$SocketInfo parseSockInfo(java.nio.ByteBuffer,int,int,long) -> parseSockInfo
    195:273:boolean pollSocketsInfo() -> pollSocketsInfo
    427:428:void skipRemainingAttributesBytesAligned(java.nio.ByteBuffer,short) -> skipRemainingAttributesBytesAligned
com.android.networkstack.netlink.TcpSocketTracker$1 -> com.android.networkstack.netlink.TcpSocketTracker$1:
    131:131:void <init>(com.android.networkstack.netlink.TcpSocketTracker) -> <init>
    134:138:void onPropertiesChanged(android.provider.DeviceConfig$Properties) -> onPropertiesChanged
com.android.networkstack.netlink.TcpSocketTracker$Dependencies -> com.android.networkstack.netlink.TcpSocketTracker$Dependencies:
    530:531:void <init>(android.content.Context) -> <init>
    608:608:void addDeviceConfigChangedListener(android.provider.DeviceConfig$OnPropertiesChangedListener) -> addDeviceConfigChangedListener
    541:544:java.io.FileDescriptor connectToKernel() -> connectToKernel
    573:573:int getDeviceConfigPropertyInt(java.lang.String,java.lang.String,int) -> getDeviceConfigPropertyInt
    601:602:android.net.INetd getNetd() -> getNetd
    582:582:boolean isTcpInfoParsingSupported() -> isTcpInfoParsingSupported
    590:590:java.nio.ByteBuffer recvMessage(java.io.FileDescriptor) -> recvMessage
    558:560:void sendPollingRequest(java.io.FileDescriptor,byte[]) -> sendPollingRequest
com.android.networkstack.netlink.TcpSocketTracker$RoutingAttribute -> com.android.networkstack.netlink.TcpSocketTracker$RoutingAttribute:
    453:455:void <init>(com.android.networkstack.netlink.TcpSocketTracker,short,short) -> <init>
    458:458:short getDataLength() -> getDataLength
com.android.networkstack.netlink.TcpSocketTracker$SocketInfo -> com.android.networkstack.netlink.TcpSocketTracker$SocketInfo:
    479:483:void <init>(com.android.networkstack.netlink.TcpSocketTracker,com.android.networkstack.netlink.TcpInfo,int,int,long) -> <init>
    493:495:java.lang.String ipTypeToString(int) -> ipTypeToString
    488:488:java.lang.String toString() -> toString
com.android.networkstack.netlink.TcpSocketTracker$TcpStat -> com.android.networkstack.netlink.TcpSocketTracker$TcpStat:
    507:507:void <init>(com.android.networkstack.netlink.TcpSocketTracker) -> <init>
    507:507:void <init>(com.android.networkstack.netlink.TcpSocketTracker,com.android.networkstack.netlink.TcpSocketTracker$1) -> <init>
    516:519:void accumulate(com.android.networkstack.netlink.TcpSocketTracker$TcpStat) -> accumulate
com.android.networkstack.packets.NeighborAdvertisement -> com.android.networkstack.packets.NeighborAdvertisement:
    94:95:java.nio.ByteBuffer build(android.net.MacAddress,android.net.MacAddress,java.net.Inet6Address,java.net.Inet6Address,int,java.net.Inet6Address) -> build
com.android.networkstack.protobuf.AbstractMessageLite -> com.android.networkstack.protobuf.AbstractMessageLite:
    49:53:void <init>() -> <init>
    102:102:int getMemoizedSerializedSize() -> getMemoizedSerializedSize
    111:114:int getSerializedSize(com.android.networkstack.protobuf.Schema) -> getSerializedSize
    125:126:java.lang.String getSerializingExceptionMessage(java.lang.String) -> getSerializingExceptionMessage
    121:121:com.android.networkstack.protobuf.UninitializedMessageException newUninitializedMessageException() -> newUninitializedMessageException
    106:106:void setMemoizedSerializedSize(int) -> setMemoizedSerializedSize
    69:75:byte[] toByteArray() -> toByteArray
    58:62:com.android.networkstack.protobuf.ByteString toByteString() -> toByteString
com.android.networkstack.protobuf.AbstractMessageLite$Builder -> com.android.networkstack.protobuf.AbstractMessageLite$Builder:
    154:154:void <init>() -> <init>
    153:153:com.android.networkstack.protobuf.MessageLite$Builder mergeFrom(com.android.networkstack.protobuf.MessageLite) -> mergeFrom
    339:344:com.android.networkstack.protobuf.AbstractMessageLite$Builder mergeFrom(com.android.networkstack.protobuf.MessageLite) -> mergeFrom
    379:379:com.android.networkstack.protobuf.UninitializedMessageException newUninitializedMessageException(com.android.networkstack.protobuf.MessageLite) -> newUninitializedMessageException
com.android.networkstack.protobuf.AbstractParser -> com.android.networkstack.protobuf.AbstractParser:
    75:75:void <clinit>() -> <clinit>
    48:48:void <init>() -> <init>
    66:69:com.android.networkstack.protobuf.MessageLite checkMessageInitialized(com.android.networkstack.protobuf.MessageLite) -> checkMessageInitialized
    52:55:com.android.networkstack.protobuf.UninitializedMessageException newUninitializedMessageException(com.android.networkstack.protobuf.MessageLite) -> newUninitializedMessageException
    48:48:java.lang.Object parseFrom(com.android.networkstack.protobuf.ByteString,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parseFrom
    120:120:com.android.networkstack.protobuf.MessageLite parseFrom(com.android.networkstack.protobuf.ByteString,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parseFrom
    99:108:com.android.networkstack.protobuf.MessageLite parsePartialFrom(com.android.networkstack.protobuf.ByteString,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.android.networkstack.protobuf.AbstractProtobufList -> com.android.networkstack.protobuf.AbstractProtobufList:
    54:55:void <init>() -> <init>
    98:99:boolean add(java.lang.Object) -> add
    110:111:boolean addAll(java.util.Collection) -> addAll
    116:117:boolean addAll(int,java.util.Collection) -> addAll
    122:123:void clear() -> clear
    171:172:void ensureIsMutable() -> ensureIsMutable
    63:79:boolean equals(java.lang.Object) -> equals
    88:91:int hashCode() -> hashCode
    128:128:boolean isModifiable() -> isModifiable
    133:133:void makeImmutable() -> makeImmutable
    144:145:boolean remove(java.lang.Object) -> remove
    150:151:boolean removeAll(java.util.Collection) -> removeAll
    156:157:boolean retainAll(java.util.Collection) -> retainAll
com.android.networkstack.protobuf.Android -> com.android.networkstack.protobuf.Android:
    35:37:void <clinit>() -> <clinit>
    52:52:java.lang.Class getClassForName(java.lang.String) -> getClassForName
    41:41:boolean isOnAndroidDevice() -> isOnAndroidDevice
com.android.networkstack.protobuf.BinaryReader -> com.android.networkstack.protobuf.BinaryReader:
    52:52:void <init>(com.android.networkstack.protobuf.BinaryReader$1) -> <init>
    77:77:void <init>() -> <init>
    68:73:com.android.networkstack.protobuf.BinaryReader newInstance(java.nio.ByteBuffer,boolean) -> newInstance
com.android.networkstack.protobuf.BinaryReader$SafeHeapReader -> com.android.networkstack.protobuf.BinaryReader$SafeHeapReader:
    100:104:void <init>(java.nio.ByteBuffer,boolean) -> <init>
    118:125:int getFieldNumber() -> getFieldNumber
    130:130:int getTag() -> getTag
    108:108:boolean isAtEnd() -> isAtEnd
    204:205:boolean readBool() -> readBool
    812:869:void readBoolList(java.util.List) -> readBoolList
    1612:1615:byte readByte() -> readByte
    311:322:com.android.networkstack.protobuf.ByteString readBytes() -> readBytes
    994:1009:void readBytesList(java.util.List) -> readBytesList
    162:163:double readDouble() -> readDouble
    364:421:void readDoubleList(java.util.List) -> readDoubleList
    334:335:int readEnum() -> readEnum
    1079:1134:void readEnumList(java.util.List) -> readEnumList
    198:199:int readFixed32() -> readFixed32
    748:805:void readFixed32List(java.util.List) -> readFixed32List
    192:193:long readFixed64() -> readFixed64
    684:741:void readFixed64List(java.util.List) -> readFixed64List
    168:169:float readFloat() -> readFloat
    428:485:void readFloatList(java.util.List) -> readFloatList
    277:278:java.lang.Object readGroup(java.lang.Class,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroup
    290:306:java.lang.Object readGroup(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroup
    284:285:java.lang.Object readGroupBySchemaWithCheck(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroupBySchemaWithCheck
    971:986:void readGroupList(java.util.List,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroupList
    186:187:int readInt32() -> readInt32
    620:677:void readInt32List(java.util.List) -> readInt32List
    180:181:long readInt64() -> readInt64
    556:613:void readInt64List(java.util.List) -> readInt64List
    1619:1620:int readLittleEndian32() -> readLittleEndian32
    1629:1632:int readLittleEndian32_NoCheck() -> readLittleEndian32_NoCheck
    1624:1625:long readLittleEndian64() -> readLittleEndian64
    1639:1642:long readLittleEndian64_NoCheck() -> readLittleEndian64_NoCheck
    1398:1445:void readMap(java.util.Map,com.android.networkstack.protobuf.MapEntryLite$Metadata,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMap
    237:238:java.lang.Object readMessage(java.lang.Class,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessage
    250:271:java.lang.Object readMessage(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessage
    244:245:java.lang.Object readMessageBySchemaWithCheck(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessageBySchemaWithCheck
    938:953:void readMessageList(java.util.List,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessageList
    340:341:int readSFixed32() -> readSFixed32
    1141:1198:void readSFixed32List(java.util.List) -> readSFixed32List
    346:347:long readSFixed64() -> readSFixed64
    1205:1262:void readSFixed64List(java.util.List) -> readSFixed64List
    352:353:int readSInt32() -> readSInt32
    1269:1324:void readSInt32List(java.util.List) -> readSInt32List
    358:359:long readSInt64() -> readSInt64
    1331:1386:void readSInt64List(java.util.List) -> readSInt64List
    210:210:java.lang.String readString() -> readString
    219:230:java.lang.String readStringInternal(boolean) -> readStringInternal
    876:876:void readStringList(java.util.List) -> readStringList
    886:919:void readStringListInternal(java.util.List,boolean) -> readStringListInternal
    881:881:void readStringListRequireUtf8(java.util.List) -> readStringListRequireUtf8
    215:215:java.lang.String readStringRequireUtf8() -> readStringRequireUtf8
    328:329:int readUInt32() -> readUInt32
    1017:1072:void readUInt32List(java.util.List) -> readUInt32List
    174:175:long readUInt64() -> readUInt64
    492:549:void readUInt64List(java.util.List) -> readUInt64List
    1496:1527:int readVarint32() -> readVarint32
    1543:1595:long readVarint64() -> readVarint64
    1602:1608:long readVarint64SlowPath() -> readVarint64SlowPath
    1696:1697:void requireBytes(int) -> requireBytes
    1724:1725:void requirePosition(int) -> requirePosition
    1702:1703:void requireWireType(int) -> requireWireType
    1676:1678:void skipBytes(int) -> skipBytes
    135:156:boolean skipField() -> skipField
    1682:1692:void skipGroup() -> skipGroup
    1653:1663:void skipVarint() -> skipVarint
    1668:1672:void skipVarintSlowPath() -> skipVarintSlowPath
    1716:1719:void verifyPackedFixed32Length(int) -> verifyPackedFixed32Length
    1708:1711:void verifyPackedFixed64Length(int) -> verifyPackedFixed64Length
com.android.networkstack.protobuf.BooleanArrayList -> com.android.networkstack.protobuf.BooleanArrayList:
    48:51:void <clinit>() -> <clinit>
    69:69:void <init>() -> <init>
    76:78:void <init>(boolean[],int) -> <init>
    45:45:void add(int,java.lang.Object) -> add
    165:165:void add(int,java.lang.Boolean) -> add
    204:231:boolean addAll(java.util.Collection) -> addAll
    171:171:void addBoolean(boolean) -> addBoolean
    176:199:void addBoolean(int,boolean) -> addBoolean
    269:270:void ensureIndexInRange(int) -> ensureIndexInRange
    98:108:boolean equals(java.lang.Object) -> equals
    45:45:java.lang.Object get(int) -> get
    135:135:java.lang.Boolean get(int) -> get
    140:141:boolean getBoolean(int) -> getBoolean
    119:120:int hashCode() -> hashCode
    275:275:java.lang.String makeOutOfBoundsExceptionMessage(int) -> makeOutOfBoundsExceptionMessage
    45:45:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    127:130:com.android.networkstack.protobuf.Internal$BooleanList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    45:45:java.lang.Object remove(int) -> remove
    237:242:boolean remove(java.lang.Object) -> remove
    251:259:java.lang.Boolean remove(int) -> remove
    83:90:void removeRange(int,int) -> removeRange
    45:45:java.lang.Object set(int,java.lang.Object) -> set
    151:151:java.lang.Boolean set(int,java.lang.Boolean) -> set
    156:159:boolean setBoolean(int,boolean) -> setBoolean
    146:146:int size() -> size
com.android.networkstack.protobuf.ByteOutput -> com.android.networkstack.protobuf.ByteOutput:
    50:50:void <init>() -> <init>
com.android.networkstack.protobuf.ByteString -> com.android.networkstack.protobuf.ByteString:
    85:253:void <clinit>() -> <clinit>
    133:136:void <init>() -> <init>
    67:67:int access$200(byte) -> access$200
    1237:1239:void checkIndex(int,int) -> checkIndex
    1256:1263:int checkRange(int,int,int) -> checkRange
    352:353:com.android.networkstack.protobuf.ByteString copyFrom(byte[],int,int) -> copyFrom
    453:453:com.android.networkstack.protobuf.ByteString copyFromUtf8(java.lang.String) -> copyFromUtf8
    899:907:int hashCode() -> hashCode
    67:67:java.util.Iterator iterator() -> iterator
    166:166:com.android.networkstack.protobuf.ByteString$ByteIterator iterator() -> iterator
    1159:1159:com.android.networkstack.protobuf.ByteString$CodedBuilder newCodedBuilder(int) -> newCodedBuilder
    1212:1212:int peekCachedHashCode() -> peekCachedHashCode
    681:686:byte[] toByteArray() -> toByteArray
    791:791:java.lang.String toString(java.nio.charset.Charset) -> toString
    1270:1271:java.lang.String toString() -> toString
    811:811:java.lang.String toStringUtf8() -> toStringUtf8
    382:382:com.android.networkstack.protobuf.ByteString wrap(byte[]) -> wrap
    390:390:com.android.networkstack.protobuf.ByteString wrap(byte[],int,int) -> wrap
com.android.networkstack.protobuf.ByteString$1 -> com.android.networkstack.protobuf.ByteString$1:
    166:168:void <init>(com.android.networkstack.protobuf.ByteString) -> <init>
    172:172:boolean hasNext() -> hasNext
    177:182:byte nextByte() -> nextByte
com.android.networkstack.protobuf.ByteString$2 -> com.android.networkstack.protobuf.ByteString$2:
    254:254:void <init>() -> <init>
    254:254:int compare(java.lang.Object,java.lang.Object) -> compare
    257:270:int compare(com.android.networkstack.protobuf.ByteString,com.android.networkstack.protobuf.ByteString) -> compare
com.android.networkstack.protobuf.ByteString$AbstractByteIterator -> com.android.networkstack.protobuf.ByteString$AbstractByteIterator:
    200:200:void <init>() -> <init>
    200:200:java.lang.Object next() -> next
    204:204:java.lang.Byte next() -> next
    209:209:void remove() -> remove
com.android.networkstack.protobuf.ByteString$ArraysByteArrayCopier -> com.android.networkstack.protobuf.ByteString$ArraysByteArrayCopier:
    114:114:void <init>() -> <init>
    114:114:void <init>(com.android.networkstack.protobuf.ByteString$1) -> <init>
    117:117:byte[] copyFrom(byte[],int,int) -> copyFrom
com.android.networkstack.protobuf.ByteString$BoundedByteString -> com.android.networkstack.protobuf.ByteString$BoundedByteString:
    1531:1535:void <init>(byte[],int,int) -> <init>
    1551:1552:byte byteAt(int) -> byteAt
    1576:1577:void copyToInternal(byte[],int,int,int) -> copyToInternal
    1567:1567:int getOffsetIntoBytes() -> getOffsetIntoBytes
    1557:1557:byte internalByteAt(int) -> internalByteAt
    1590:1590:void readObject(java.io.ObjectInputStream) -> readObject
    1562:1562:int size() -> size
    1586:1586:java.lang.Object writeReplace() -> writeReplace
com.android.networkstack.protobuf.ByteString$CodedBuilder -> com.android.networkstack.protobuf.ByteString$CodedBuilder:
    1163:1163:void <init>(int,com.android.networkstack.protobuf.ByteString$1) -> <init>
    1167:1169:void <init>(int) -> <init>
    1173:1178:com.android.networkstack.protobuf.ByteString build() -> build
    1182:1182:com.android.networkstack.protobuf.CodedOutputStream getCodedOutput() -> getCodedOutput
com.android.networkstack.protobuf.ByteString$LeafByteString -> com.android.networkstack.protobuf.ByteString$LeafByteString:
    864:864:void <init>() -> <init>
com.android.networkstack.protobuf.ByteString$LiteralByteString -> com.android.networkstack.protobuf.ByteString$LiteralByteString:
    1294:1298:void <init>(byte[]) -> <init>
    1306:1306:byte byteAt(int) -> byteAt
    1342:1342:void copyToInternal(byte[],int,int,int) -> copyToInternal
    1404:1428:boolean equals(java.lang.Object) -> equals
    1443:1467:boolean equalsRange(com.android.networkstack.protobuf.ByteString,int,int) -> equalsRange
    1311:1311:byte internalByteAt(int) -> internalByteAt
    1386:1387:boolean isValidUtf8() -> isValidUtf8
    1487:1488:com.android.networkstack.protobuf.CodedInputStream newCodedInput() -> newCodedInput
    1472:1472:int partialHash(int,int,int) -> partialHash
    1316:1316:int size() -> size
    1324:1330:com.android.networkstack.protobuf.ByteString substring(int,int) -> substring
    1378:1378:java.lang.String toStringInternal(java.nio.charset.Charset) -> toStringInternal
    1373:1373:void writeTo(com.android.networkstack.protobuf.ByteOutput) -> writeTo
com.android.networkstack.protobuf.ByteString$SystemByteArrayCopier -> com.android.networkstack.protobuf.ByteString$SystemByteArrayCopier:
    104:104:void <init>() -> <init>
    104:104:void <init>(com.android.networkstack.protobuf.ByteString$1) -> <init>
    107:108:byte[] copyFrom(byte[],int,int) -> copyFrom
com.android.networkstack.protobuf.CodedInputStream -> com.android.networkstack.protobuf.CodedInputStream:
    61:61:void <init>(com.android.networkstack.protobuf.CodedInputStream$1) -> <init>
    70:419:void <init>() -> <init>
    134:134:com.android.networkstack.protobuf.CodedInputStream newInstance(byte[]) -> newInstance
    139:139:com.android.networkstack.protobuf.CodedInputStream newInstance(byte[],int,int) -> newInstance
    145:161:com.android.networkstack.protobuf.CodedInputStream newInstance(byte[],int,int,boolean) -> newInstance
com.android.networkstack.protobuf.CodedInputStream$ArrayDecoder -> com.android.networkstack.protobuf.CodedInputStream$ArrayDecoder:
    593:593:void <init>(byte[],int,int,boolean,com.android.networkstack.protobuf.CodedInputStream$1) -> <init>
    604:611:void <init>(byte[],int,int,boolean) -> <init>
    632:633:void checkLastTagWas(int) -> checkLastTagWas
    1230:1230:int getTotalBytesRead() -> getTotalBytesRead
    1225:1225:boolean isAtEnd() -> isAtEnd
    1210:1211:void popLimit(int) -> popLimit
    1182:1191:int pushLimit(int) -> pushLimit
    780:780:boolean readBool() -> readBool
    895:910:com.android.networkstack.protobuf.ByteString readBytes() -> readBytes
    745:745:double readDouble() -> readDouble
    953:953:int readEnum() -> readEnum
    775:775:int readFixed32() -> readFixed32
    770:770:long readFixed64() -> readFixed64
    750:750:float readFloat() -> readFloat
    765:765:int readInt32() -> readInt32
    760:760:long readInt64() -> readInt64
    1235:1238:byte readRawByte() -> readRawByte
    1243:1256:byte[] readRawBytes(int) -> readRawBytes
    1135:1143:int readRawLittleEndian32() -> readRawLittleEndian32
    1151:1159:long readRawLittleEndian64() -> readRawLittleEndian64
    983:1018:int readRawVarint32() -> readRawVarint32
    1062:1117:long readRawVarint64() -> readRawVarint64
    1124:1130:long readRawVarint64SlowPath() -> readRawVarint64SlowPath
    958:958:int readSFixed32() -> readSFixed32
    963:963:long readSFixed64() -> readSFixed64
    968:968:int readSInt32() -> readSInt32
    973:973:long readSInt64() -> readSInt64
    785:800:java.lang.String readString() -> readString
    805:818:java.lang.String readStringRequireUtf8() -> readStringRequireUtf8
    616:627:int readTag() -> readTag
    948:948:int readUInt32() -> readUInt32
    755:755:long readUInt64() -> readUInt64
    1197:1204:void recomputeBufferSizeAfterLimit() -> recomputeBufferSizeAfterLimit
    644:665:boolean skipField(int) -> skipField
    723:724:void skipMessage() -> skipMessage
    1261:1270:void skipRawBytes(int) -> skipRawBytes
    1022:1025:void skipRawVarint() -> skipRawVarint
    1031:1035:void skipRawVarintFastPath() -> skipRawVarintFastPath
    1040:1044:void skipRawVarintSlowPath() -> skipRawVarintSlowPath
com.android.networkstack.protobuf.CodedInputStreamReader -> com.android.networkstack.protobuf.CodedInputStreamReader:
    56:67:void <init>(com.android.networkstack.protobuf.CodedInputStream) -> <init>
    59:62:com.android.networkstack.protobuf.CodedInputStreamReader forCodedInput(com.android.networkstack.protobuf.CodedInputStream) -> forCodedInput
    77:86:int getFieldNumber() -> getFieldNumber
    91:91:int getTag() -> getTag
    152:153:boolean readBool() -> readBool
    693:744:void readBoolList(java.util.List) -> readBoolList
    245:246:com.android.networkstack.protobuf.ByteString readBytes() -> readBytes
    856:868:void readBytesList(java.util.List) -> readBytesList
    110:111:double readDouble() -> readDouble
    287:338:void readDoubleList(java.util.List) -> readDoubleList
    257:258:int readEnum() -> readEnum
    934:985:void readEnumList(java.util.List) -> readEnumList
    146:147:int readFixed32() -> readFixed32
    635:686:void readFixed32List(java.util.List) -> readFixed32List
    140:141:long readFixed64() -> readFixed64
    577:628:void readFixed64List(java.util.List) -> readFixed64List
    116:117:float readFloat() -> readFloat
    345:396:void readFloatList(java.util.List) -> readFloatList
    188:189:java.lang.Object readGroup(java.lang.Class,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroup
    224:240:java.lang.Object readGroup(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroup
    196:197:java.lang.Object readGroupBySchemaWithCheck(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroupBySchemaWithCheck
    836:848:void readGroupList(java.util.List,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroupList
    134:135:int readInt32() -> readInt32
    519:570:void readInt32List(java.util.List) -> readInt32List
    128:129:long readInt64() -> readInt64
    461:512:void readInt64List(java.util.List) -> readInt64List
    1236:1239:void readMap(java.util.Map,com.android.networkstack.protobuf.MapEntryLite$Metadata,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMap
    172:173:java.lang.Object readMessage(java.lang.Class,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessage
    203:218:java.lang.Object readMessage(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessage
    180:181:java.lang.Object readMessageBySchemaWithCheck(com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessageBySchemaWithCheck
    806:818:void readMessageList(java.util.List,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessageList
    263:264:int readSFixed32() -> readSFixed32
    992:1043:void readSFixed32List(java.util.List) -> readSFixed32List
    269:270:long readSFixed64() -> readSFixed64
    1050:1101:void readSFixed64List(java.util.List) -> readSFixed64List
    275:276:int readSInt32() -> readSInt32
    1108:1159:void readSInt32List(java.util.List) -> readSInt32List
    281:282:long readSInt64() -> readSInt64
    1166:1217:void readSInt64List(java.util.List) -> readSInt64List
    158:159:java.lang.String readString() -> readString
    751:751:void readStringList(java.util.List) -> readStringList
    760:787:void readStringListInternal(java.util.List,boolean) -> readStringListInternal
    756:756:void readStringListRequireUtf8(java.util.List) -> readStringListRequireUtf8
    164:165:java.lang.String readStringRequireUtf8() -> readStringRequireUtf8
    251:252:int readUInt32() -> readUInt32
    876:927:void readUInt32List(java.util.List) -> readUInt32List
    122:123:long readUInt64() -> readUInt64
    403:454:void readUInt64List(java.util.List) -> readUInt64List
    1329:1330:void requirePosition(int) -> requirePosition
    103:104:void requireWireType(int) -> requireWireType
    96:99:boolean skipField() -> skipField
    1324:1324:void verifyPackedFixed32Length(int) -> verifyPackedFixed32Length
    1225:1225:void verifyPackedFixed64Length(int) -> verifyPackedFixed64Length
com.android.networkstack.protobuf.CodedOutputStream -> com.android.networkstack.protobuf.CodedOutputStream:
    60:61:void <clinit>() -> <clinit>
    59:59:void <init>(com.android.networkstack.protobuf.CodedOutputStream$1) -> <init>
    224:224:void <init>() -> <init>
    59:59:boolean access$100() -> access$100
    938:939:void checkNoSpaceLeft() -> checkNoSpaceLeft
    604:604:int computeBoolSize(int,boolean) -> computeBoolSize
    867:867:int computeByteArraySizeNoTag(byte[]) -> computeByteArraySizeNoTag
    629:629:int computeBytesSize(int,com.android.networkstack.protobuf.ByteString) -> computeBytesSize
    862:862:int computeBytesSizeNoTag(com.android.networkstack.protobuf.ByteString) -> computeBytesSizeNoTag
    597:597:int computeDoubleSize(int,double) -> computeDoubleSize
    613:613:int computeEnumSize(int,int) -> computeEnumSize
    835:835:int computeEnumSizeNoTag(int) -> computeEnumSizeNoTag
    533:533:int computeFixed32Size(int,int) -> computeFixed32Size
    573:573:int computeFixed64Size(int,long) -> computeFixed64Size
    589:589:int computeFloatSize(int,float) -> computeFloatSize
    1070:1070:int computeGroupSize(int,com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> computeGroupSize
    1076:1076:int computeGroupSizeNoTag(com.android.networkstack.protobuf.MessageLite) -> computeGroupSizeNoTag
    1082:1082:int computeGroupSizeNoTag(com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> computeGroupSizeNoTag
    509:509:int computeInt32Size(int,int) -> computeInt32Size
    719:719:int computeInt32SizeNoTag(int) -> computeInt32SizeNoTag
    549:549:int computeInt64Size(int,long) -> computeInt64Size
    763:763:int computeInt64SizeNoTag(long) -> computeInt64SizeNoTag
    701:703:int computeLazyFieldMessageSetExtensionSize(int,com.android.networkstack.protobuf.LazyFieldLite) -> computeLazyFieldMessageSetExtensionSize
    653:653:int computeLazyFieldSize(int,com.android.networkstack.protobuf.LazyFieldLite) -> computeLazyFieldSize
    857:857:int computeLazyFieldSizeNoTag(com.android.networkstack.protobuf.LazyFieldLite) -> computeLazyFieldSizeNoTag
    886:886:int computeLengthDelimitedFieldSize(int) -> computeLengthDelimitedFieldSize
    678:680:int computeMessageSetExtensionSize(int,com.android.networkstack.protobuf.MessageLite) -> computeMessageSetExtensionSize
    661:661:int computeMessageSize(int,com.android.networkstack.protobuf.MessageLite) -> computeMessageSize
    670:670:int computeMessageSize(int,com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> computeMessageSize
    877:877:int computeMessageSizeNoTag(com.android.networkstack.protobuf.MessageLite) -> computeMessageSizeNoTag
    882:882:int computeMessageSizeNoTag(com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> computeMessageSizeNoTag
    689:691:int computeRawMessageSetExtensionSize(int,com.android.networkstack.protobuf.ByteString) -> computeRawMessageSetExtensionSize
    1114:1114:int computeRawVarint32Size(int) -> computeRawVarint32Size
    541:541:int computeSFixed32Size(int,int) -> computeSFixed32Size
    581:581:int computeSFixed64Size(int,long) -> computeSFixed64Size
    525:525:int computeSInt32Size(int,int) -> computeSInt32Size
    745:745:int computeSInt32SizeNoTag(int) -> computeSInt32SizeNoTag
    565:565:int computeSInt64Size(int,long) -> computeSInt64Size
    796:796:int computeSInt64SizeNoTag(long) -> computeSInt64SizeNoTag
    621:621:int computeStringSize(int,java.lang.String) -> computeStringSize
    842:849:int computeStringSizeNoTag(java.lang.String) -> computeStringSizeNoTag
    710:710:int computeTagSize(int) -> computeTagSize
    517:517:int computeUInt32Size(int,int) -> computeUInt32Size
    557:557:int computeUInt64Size(int,long) -> computeUInt64Size
    984:1000:void inefficientWriteStringNoTag(java.lang.String,com.android.networkstack.protobuf.Utf8$UnpairedSurrogateException) -> inefficientWriteStringNoTag
    186:186:boolean isSerializationDeterministic() -> isSerializationDeterministic
    115:115:com.android.networkstack.protobuf.CodedOutputStream newInstance(byte[]) -> newInstance
    126:126:com.android.networkstack.protobuf.CodedOutputStream newInstance(byte[],int,int) -> newInstance
    447:447:void writeBoolNoTag(boolean) -> writeBoolNoTag
    284:284:void writeDouble(int,double) -> writeDouble
    442:442:void writeDoubleNoTag(double) -> writeDoubleNoTag
    296:296:void writeEnum(int,int) -> writeEnum
    455:455:void writeEnumNoTag(int) -> writeEnumNoTag
    279:279:void writeFloat(int,float) -> writeFloat
    437:437:void writeFloatNoTag(float) -> writeFloatNoTag
    1026:1028:void writeGroup(int,com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> writeGroup
    1048:1048:void writeGroupNoTag(com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> writeGroupNoTag
    256:256:void writeInt64(int,long) -> writeInt64
    414:414:void writeInt64NoTag(long) -> writeInt64NoTag
    251:251:void writeSFixed32(int,int) -> writeSFixed32
    409:409:void writeSFixed32NoTag(int) -> writeSFixed32NoTag
    274:274:void writeSFixed64(int,long) -> writeSFixed64
    432:432:void writeSFixed64NoTag(long) -> writeSFixed64NoTag
    242:242:void writeSInt32(int,int) -> writeSInt32
    400:400:void writeSInt32NoTag(int) -> writeSInt32NoTag
    265:265:void writeSInt64(int,long) -> writeSInt64
    423:423:void writeSInt64NoTag(long) -> writeSInt64NoTag
com.android.networkstack.protobuf.CodedOutputStream$ArrayEncoder -> com.android.networkstack.protobuf.CodedOutputStream$ArrayEncoder:
    1156:1169:void <init>(byte[],int,int) -> <init>
    1517:1517:int spaceLeft() -> spaceLeft
    1318:1321:void write(byte) -> write
    1446:1450:void write(byte[],int,int) -> write
    1209:1210:void writeBool(int,boolean) -> writeBool
    1221:1222:void writeBytes(int,com.android.networkstack.protobuf.ByteString) -> writeBytes
    1248:1249:void writeBytesNoTag(com.android.networkstack.protobuf.ByteString) -> writeBytesNoTag
    1191:1192:void writeFixed32(int,int) -> writeFixed32
    1386:1392:void writeFixed32NoTag(int) -> writeFixed32NoTag
    1203:1204:void writeFixed64(int,long) -> writeFixed64
    1429:1439:void writeFixed64NoTag(long) -> writeFixed64NoTag
    1179:1180:void writeInt32(int,int) -> writeInt32
    1328:1331:void writeInt32NoTag(int) -> writeInt32NoTag
    1456:1456:void writeLazy(byte[],int,int) -> writeLazy
    1273:1274:void writeMessage(int,com.android.networkstack.protobuf.MessageLite) -> writeMessage
    1280:1282:void writeMessage(int,com.android.networkstack.protobuf.MessageLite,com.android.networkstack.protobuf.Schema) -> writeMessage
    1305:1306:void writeMessageNoTag(com.android.networkstack.protobuf.MessageLite) -> writeMessageNoTag
    1288:1291:void writeMessageSetExtension(int,com.android.networkstack.protobuf.MessageLite) -> writeMessageSetExtension
    1297:1300:void writeRawMessageSetExtension(int,com.android.networkstack.protobuf.ByteString) -> writeRawMessageSetExtension
    1215:1216:void writeString(int,java.lang.String) -> writeString
    1478:1506:void writeStringNoTag(java.lang.String) -> writeStringNoTag
    1174:1174:void writeTag(int,int) -> writeTag
    1185:1186:void writeUInt32(int,int) -> writeUInt32
    1337:1378:void writeUInt32NoTag(int) -> writeUInt32NoTag
    1197:1198:void writeUInt64(int,long) -> writeUInt64
    1398:1421:void writeUInt64NoTag(long) -> writeUInt64NoTag
com.android.networkstack.protobuf.CodedOutputStream$OutOfSpaceException -> com.android.networkstack.protobuf.CodedOutputStream$OutOfSpaceException:
    954:954:void <init>() -> <init>
    958:958:void <init>(java.lang.String) -> <init>
    962:962:void <init>(java.lang.Throwable) -> <init>
    966:966:void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.android.networkstack.protobuf.CodedOutputStreamWriter -> com.android.networkstack.protobuf.CodedOutputStreamWriter:
    53:55:void <init>(com.android.networkstack.protobuf.CodedOutputStream) -> <init>
    60:60:com.android.networkstack.protobuf.Writer$FieldOrder fieldOrder() -> fieldOrder
    47:50:com.android.networkstack.protobuf.CodedOutputStreamWriter forCodedOutput(com.android.networkstack.protobuf.CodedOutputStream) -> forCodedOutput
    119:119:void writeBool(int,boolean) -> writeBool
    381:396:void writeBoolList(int,java.util.List,boolean) -> writeBoolList
    129:129:void writeBytes(int,com.android.networkstack.protobuf.ByteString) -> writeBytes
    425:426:void writeBytesList(int,java.util.List) -> writeBytesList
    596:596:void writeDeterministicMap(int,com.android.networkstack.protobuf.MapEntryLite$Metadata,java.util.Map) -> writeDeterministicMap
    89:89:void writeDouble(int,double) -> writeDouble
    333:348:void writeDoubleList(int,java.util.List,boolean) -> writeDoubleList
    174:174:void writeEndGroup(int) -> writeEndGroup
    94:94:void writeEnum(int,int) -> writeEnum
    357:372:void writeEnumList(int,java.util.List,boolean) -> writeEnumList
    114:114:void writeFixed32(int,int) -> writeFixed32
    214:229:void writeFixed32List(int,java.util.List,boolean) -> writeFixed32List
    109:109:void writeFixed64(int,long) -> writeFixed64
    285:300:void writeFixed64List(int,java.util.List,boolean) -> writeFixed64List
    84:84:void writeFloat(int,float) -> writeFloat
    309:324:void writeFloatList(int,java.util.List,boolean) -> writeFloatList
    164:164:void writeGroup(int,java.lang.Object,com.android.networkstack.protobuf.Schema) -> writeGroup
    573:574:void writeGroupList(int,java.util.List,com.android.networkstack.protobuf.Schema) -> writeGroupList
    104:104:void writeInt32(int,int) -> writeInt32
    190:205:void writeInt32List(int,java.util.List,boolean) -> writeInt32List
    74:74:void writeInt64(int,long) -> writeInt64
    237:252:void writeInt64List(int,java.util.List,boolean) -> writeInt64List
    416:419:void writeLazyString(int,java.lang.Object) -> writeLazyString
    581:589:void writeMap(int,com.android.networkstack.protobuf.MapEntryLite$Metadata,java.util.Map) -> writeMap
    154:154:void writeMessage(int,java.lang.Object,com.android.networkstack.protobuf.Schema) -> writeMessage
    559:560:void writeMessageList(int,java.util.List,com.android.networkstack.protobuf.Schema) -> writeMessageList
    179:182:void writeMessageSetItem(int,java.lang.Object) -> writeMessageSetItem
    69:69:void writeSFixed32(int,int) -> writeSFixed32
    458:473:void writeSFixed32List(int,java.util.List,boolean) -> writeSFixed32List
    79:79:void writeSFixed64(int,long) -> writeSFixed64
    482:497:void writeSFixed64List(int,java.util.List,boolean) -> writeSFixed64List
    139:139:void writeSInt32(int,int) -> writeSInt32
    506:521:void writeSInt32List(int,java.util.List,boolean) -> writeSInt32List
    144:144:void writeSInt64(int,long) -> writeSInt64
    530:545:void writeSInt64List(int,java.util.List,boolean) -> writeSInt64List
    169:169:void writeStartGroup(int) -> writeStartGroup
    124:124:void writeString(int,java.lang.String) -> writeString
    403:410:void writeStringList(int,java.util.List) -> writeStringList
    134:134:void writeUInt32(int,int) -> writeUInt32
    434:449:void writeUInt32List(int,java.util.List,boolean) -> writeUInt32List
    99:99:void writeUInt64(int,long) -> writeUInt64
    261:276:void writeUInt64List(int,java.util.List,boolean) -> writeUInt64List
com.android.networkstack.protobuf.CodedOutputStreamWriter$1 -> com.android.networkstack.protobuf.CodedOutputStreamWriter$1:
    596:596:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.DoubleArrayList -> com.android.networkstack.protobuf.DoubleArrayList:
    48:51:void <clinit>() -> <clinit>
    69:69:void <init>() -> <init>
    75:77:void <init>(double[],int) -> <init>
    45:45:void add(int,java.lang.Object) -> add
    165:165:void add(int,java.lang.Double) -> add
    204:231:boolean addAll(java.util.Collection) -> addAll
    171:171:void addDouble(double) -> addDouble
    176:199:void addDouble(int,double) -> addDouble
    269:270:void ensureIndexInRange(int) -> ensureIndexInRange
    97:107:boolean equals(java.lang.Object) -> equals
    45:45:java.lang.Object get(int) -> get
    135:135:java.lang.Double get(int) -> get
    140:141:double getDouble(int) -> getDouble
    118:120:int hashCode() -> hashCode
    275:275:java.lang.String makeOutOfBoundsExceptionMessage(int) -> makeOutOfBoundsExceptionMessage
    45:45:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    127:130:com.android.networkstack.protobuf.Internal$DoubleList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    45:45:java.lang.Object remove(int) -> remove
    237:242:boolean remove(java.lang.Object) -> remove
    251:259:java.lang.Double remove(int) -> remove
    82:89:void removeRange(int,int) -> removeRange
    45:45:java.lang.Object set(int,java.lang.Object) -> set
    151:151:java.lang.Double set(int,java.lang.Double) -> set
    156:159:double setDouble(int,double) -> setDouble
    146:146:int size() -> size
com.android.networkstack.protobuf.ExtensionRegistryFactory -> com.android.networkstack.protobuf.ExtensionRegistryFactory:
    47:47:void <clinit>() -> <clinit>
    74:81:com.android.networkstack.protobuf.ExtensionRegistryLite createEmpty() -> createEmpty
    92:93:com.android.networkstack.protobuf.ExtensionRegistryLite invokeSubclassFactory(java.lang.String) -> invokeSubclassFactory
    52:52:java.lang.Class reflectExtensionRegistry() -> reflectExtensionRegistry
com.android.networkstack.protobuf.ExtensionRegistryLite -> com.android.networkstack.protobuf.ExtensionRegistryLite:
    97:197:void <clinit>() -> <clinit>
    192:193:void <init>() -> <init>
    210:211:void <init>(boolean) -> <init>
    157:158:com.android.networkstack.protobuf.GeneratedMessageLite$GeneratedExtension findLiteExtensionByNumber(com.android.networkstack.protobuf.MessageLite,int) -> findLiteExtensionByNumber
    126:137:com.android.networkstack.protobuf.ExtensionRegistryLite getEmptyRegistry() -> getEmptyRegistry
    89:89:java.lang.Class resolveExtensionClass() -> resolveExtensionClass
com.android.networkstack.protobuf.ExtensionRegistryLite$ObjectIntPair -> com.android.networkstack.protobuf.ExtensionRegistryLite$ObjectIntPair:
    219:221:void <init>(java.lang.Object,int) -> <init>
    231:235:boolean equals(java.lang.Object) -> equals
    226:226:int hashCode() -> hashCode
com.android.networkstack.protobuf.ExtensionSchema -> com.android.networkstack.protobuf.ExtensionSchema:
    36:36:void <init>() -> <init>
com.android.networkstack.protobuf.ExtensionSchemaLite -> com.android.networkstack.protobuf.ExtensionSchemaLite:
    41:41:void <init>() -> <init>
    294:295:int extensionNumber(java.util.Map$Entry) -> extensionNumber
    504:504:java.lang.Object findExtensionByNumber(com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.MessageLite,int) -> findExtensionByNumber
    50:50:com.android.networkstack.protobuf.FieldSet getExtensions(java.lang.Object) -> getExtensions
    60:60:com.android.networkstack.protobuf.FieldSet getMutableExtensions(java.lang.Object) -> getMutableExtensions
    45:45:boolean hasExtensions(com.android.networkstack.protobuf.MessageLite) -> hasExtensions
    65:65:void makeImmutable(java.lang.Object) -> makeImmutable
    77:285:java.lang.Object parseExtension(com.android.networkstack.protobuf.Reader,java.lang.Object,com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.FieldSet,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> parseExtension
    514:518:void parseLengthPrefixedMessageSetItem(com.android.networkstack.protobuf.Reader,java.lang.Object,com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.FieldSet) -> parseLengthPrefixedMessageSetItem
    528:538:void parseMessageSetItem(com.android.networkstack.protobuf.ByteString,java.lang.Object,com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.FieldSet) -> parseMessageSetItem
    301:495:void serializeExtension(com.android.networkstack.protobuf.Writer,java.util.Map$Entry) -> serializeExtension
com.android.networkstack.protobuf.ExtensionSchemaLite$1 -> com.android.networkstack.protobuf.ExtensionSchemaLite$1:
    83:83:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.ExtensionSchemas -> com.android.networkstack.protobuf.ExtensionSchemas:
    34:35:void <clinit>() -> <clinit>
    51:52:com.android.networkstack.protobuf.ExtensionSchema full() -> full
    47:47:com.android.networkstack.protobuf.ExtensionSchema lite() -> lite
    39:40:com.android.networkstack.protobuf.ExtensionSchema loadSchemaForFullRuntime() -> loadSchemaForFullRuntime
com.android.networkstack.protobuf.FieldSet -> com.android.networkstack.protobuf.FieldSet:
    102:102:void <clinit>() -> <clinit>
    77:81:void <init>() -> <init>
    77:87:void <init>(boolean) -> <init>
    350:366:void addRepeatedField(com.android.networkstack.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> addRepeatedField
    51:51:java.lang.Object clone() -> clone
    158:168:com.android.networkstack.protobuf.FieldSet clone() -> clone
    498:501:java.lang.Object cloneIfMutable(java.lang.Object) -> cloneIfMutable
    803:809:int computeElementSize(com.android.networkstack.protobuf.WireFormat$FieldType,int,java.lang.Object) -> computeElementSize
    821:880:int computeElementSizeNoTag(com.android.networkstack.protobuf.WireFormat$FieldType,java.lang.Object) -> computeElementSizeNoTag
    885:904:int computeFieldSize(com.android.networkstack.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> computeFieldSize
    227:230:java.util.Iterator descendingIterator() -> descendingIterator
    98:98:com.android.networkstack.protobuf.FieldSet emptySet() -> emptySet
    135:140:boolean equals(java.lang.Object) -> equals
    248:250:java.lang.Object getField(com.android.networkstack.protobuf.FieldSet$FieldDescriptorLite) -> getField
    765:769:int getMessageSetSerializedSize() -> getMessageSetSerializedSize
    775:788:int getMessageSetSerializedSize(java.util.Map$Entry) -> getMessageSetSerializedSize
    752:757:int getSerializedSize() -> getSerializedSize
    145:145:int hashCode() -> hashCode
    106:106:boolean isEmpty() -> isEmpty
    126:126:boolean isImmutable() -> isImmutable
    434:440:boolean isInitialized() -> isInitialized
    449:466:boolean isInitialized(java.util.Map$Entry) -> isInitialized
    215:218:java.util.Iterator iterator() -> iterator
    112:116:void makeImmutable() -> makeImmutable
    489:493:void mergeFrom(com.android.networkstack.protobuf.FieldSet) -> mergeFrom
    510:539:void mergeFromField(java.util.Map$Entry) -> mergeFromField
    92:92:com.android.networkstack.protobuf.FieldSet newFieldSet() -> newFieldSet
    260:281:void setField(com.android.networkstack.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> setField
    377:420:void verifyType(com.android.networkstack.protobuf.WireFormat$FieldType,java.lang.Object) -> verifyType
com.android.networkstack.protobuf.FieldSet$1 -> com.android.networkstack.protobuf.FieldSet$1:
    380:641:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.FieldType -> com.android.networkstack.protobuf.FieldType:
    40:222:void <clinit>() -> <clinit>
    100:130:void <init>(java.lang.String,int,int,com.android.networkstack.protobuf.FieldType$Collection,com.android.networkstack.protobuf.JavaType) -> <init>
    135:135:int id() -> id
    40:40:com.android.networkstack.protobuf.FieldType valueOf(java.lang.String) -> valueOf
    40:40:com.android.networkstack.protobuf.FieldType[] values() -> values
com.android.networkstack.protobuf.FieldType$1 -> com.android.networkstack.protobuf.FieldType$1:
    105:120:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.FieldType$Collection -> com.android.networkstack.protobuf.FieldType$Collection:
    329:333:void <clinit>() -> <clinit>
    337:338:void <init>(java.lang.String,int,boolean) -> <init>
    329:329:com.android.networkstack.protobuf.FieldType$Collection valueOf(java.lang.String) -> valueOf
    329:329:com.android.networkstack.protobuf.FieldType$Collection[] values() -> values
com.android.networkstack.protobuf.FloatArrayList -> com.android.networkstack.protobuf.FloatArrayList:
    48:51:void <clinit>() -> <clinit>
    69:69:void <init>() -> <init>
    75:77:void <init>(float[],int) -> <init>
    45:45:void add(int,java.lang.Object) -> add
    164:164:void add(int,java.lang.Float) -> add
    203:230:boolean addAll(java.util.Collection) -> addAll
    170:170:void addFloat(float) -> addFloat
    175:198:void addFloat(int,float) -> addFloat
    268:269:void ensureIndexInRange(int) -> ensureIndexInRange
    97:107:boolean equals(java.lang.Object) -> equals
    45:45:java.lang.Object get(int) -> get
    134:134:java.lang.Float get(int) -> get
    139:140:float getFloat(int) -> getFloat
    118:119:int hashCode() -> hashCode
    274:274:java.lang.String makeOutOfBoundsExceptionMessage(int) -> makeOutOfBoundsExceptionMessage
    45:45:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    126:129:com.android.networkstack.protobuf.Internal$FloatList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    45:45:java.lang.Object remove(int) -> remove
    236:241:boolean remove(java.lang.Object) -> remove
    250:258:java.lang.Float remove(int) -> remove
    82:89:void removeRange(int,int) -> removeRange
    45:45:java.lang.Object set(int,java.lang.Object) -> set
    150:150:java.lang.Float set(int,java.lang.Float) -> set
    155:158:float setFloat(int,float) -> setFloat
    145:145:int size() -> size
com.android.networkstack.protobuf.GeneratedMessageInfoFactory -> com.android.networkstack.protobuf.GeneratedMessageInfoFactory:
    37:37:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    43:43:com.android.networkstack.protobuf.GeneratedMessageInfoFactory getInstance() -> getInstance
    48:48:boolean isSupported(java.lang.Class) -> isSupported
    53:62:com.android.networkstack.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> messageInfoFor
com.android.networkstack.protobuf.GeneratedMessageLite -> com.android.networkstack.protobuf.GeneratedMessageLite:
    282:282:void <clinit>() -> <clinit>
    60:69:void <init>() -> <init>
    279:279:java.lang.Object buildMessageInfo() -> buildMessageInfo
    177:177:com.android.networkstack.protobuf.GeneratedMessageLite$Builder createBuilder() -> createBuilder
    246:246:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke,java.lang.Object) -> dynamicMethod
    251:251:java.lang.Object dynamicMethod(com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke) -> dynamicMethod
    1429:1429:com.android.networkstack.protobuf.Internal$IntList emptyIntList() -> emptyIntList
    1479:1479:com.android.networkstack.protobuf.Internal$ProtobufList emptyProtobufList() -> emptyProtobufList
    123:127:boolean equals(java.lang.Object) -> equals
    287:306:com.android.networkstack.protobuf.GeneratedMessageLite getDefaultInstance(java.lang.Class) -> getDefaultInstance
    60:60:com.android.networkstack.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    80:80:com.android.networkstack.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    256:256:int getMemoizedSerializedSize() -> getMemoizedSerializedSize
    74:74:com.android.networkstack.protobuf.Parser getParserForType() -> getParserForType
    271:274:int getSerializedSize() -> getSerializedSize
    109:112:int hashCode() -> hashCode
    1157:1168:java.lang.Object invokeOrDie(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> invokeOrDie
    189:189:boolean isInitialized() -> isInitialized
    1412:1422:boolean isInitialized(com.android.networkstack.protobuf.GeneratedMessageLite,boolean) -> isInitialized
    170:170:void makeImmutable() -> makeImmutable
    1433:1434:com.android.networkstack.protobuf.Internal$IntList mutableCopy(com.android.networkstack.protobuf.Internal$IntList) -> mutableCopy
    1483:1484:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopy(com.android.networkstack.protobuf.Internal$ProtobufList) -> mutableCopy
    60:60:com.android.networkstack.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    86:86:com.android.networkstack.protobuf.GeneratedMessageLite$Builder newBuilderForType() -> newBuilderForType
    318:318:java.lang.Object newMessageInfo(com.android.networkstack.protobuf.MessageLite,java.lang.String,java.lang.Object[]) -> newMessageInfo
    1526:1542:com.android.networkstack.protobuf.GeneratedMessageLite parsePartialFrom(com.android.networkstack.protobuf.GeneratedMessageLite,com.android.networkstack.protobuf.CodedInputStream,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    313:313:void registerDefaultInstance(java.lang.Class,com.android.networkstack.protobuf.GeneratedMessageLite) -> registerDefaultInstance
    261:261:void setMemoizedSerializedSize(int) -> setMemoizedSerializedSize
    60:60:com.android.networkstack.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    195:196:com.android.networkstack.protobuf.GeneratedMessageLite$Builder toBuilder() -> toBuilder
    103:103:java.lang.String toString() -> toString
    265:267:void writeTo(com.android.networkstack.protobuf.CodedOutputStream) -> writeTo
com.android.networkstack.protobuf.GeneratedMessageLite$Builder -> com.android.networkstack.protobuf.GeneratedMessageLite$Builder:
    340:344:void <init>(com.android.networkstack.protobuf.GeneratedMessageLite) -> <init>
    330:330:com.android.networkstack.protobuf.MessageLite build() -> build
    394:396:com.android.networkstack.protobuf.GeneratedMessageLite build() -> build
    330:330:com.android.networkstack.protobuf.MessageLite buildPartial() -> buildPartial
    382:389:com.android.networkstack.protobuf.GeneratedMessageLite buildPartial() -> buildPartial
    369:369:com.android.networkstack.protobuf.GeneratedMessageLite$Builder clear() -> clear
    330:330:java.lang.Object clone() -> clone
    375:376:com.android.networkstack.protobuf.GeneratedMessageLite$Builder clone() -> clone
    352:357:void copyOnWrite() -> copyOnWrite
    330:330:com.android.networkstack.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    419:419:com.android.networkstack.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    330:330:com.android.networkstack.protobuf.AbstractMessageLite$Builder internalMergeFrom(com.android.networkstack.protobuf.AbstractMessageLite) -> internalMergeFrom
    403:403:com.android.networkstack.protobuf.GeneratedMessageLite$Builder internalMergeFrom(com.android.networkstack.protobuf.GeneratedMessageLite) -> internalMergeFrom
    408:409:com.android.networkstack.protobuf.GeneratedMessageLite$Builder mergeFrom(com.android.networkstack.protobuf.GeneratedMessageLite) -> mergeFrom
    414:414:void mergeFromInstance(com.android.networkstack.protobuf.GeneratedMessageLite,com.android.networkstack.protobuf.GeneratedMessageLite) -> mergeFromInstance
com.android.networkstack.protobuf.GeneratedMessageLite$DefaultInstanceBasedParser -> com.android.networkstack.protobuf.GeneratedMessageLite$DefaultInstanceBasedParser:
    1498:1499:void <init>(com.android.networkstack.protobuf.GeneratedMessageLite) -> <init>
    1493:1493:java.lang.Object parsePartialFrom(com.android.networkstack.protobuf.CodedInputStream,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parsePartialFrom
    1505:1505:com.android.networkstack.protobuf.GeneratedMessageLite parsePartialFrom(com.android.networkstack.protobuf.CodedInputStream,com.android.networkstack.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.android.networkstack.protobuf.GeneratedMessageLite$ExtendableMessage -> com.android.networkstack.protobuf.GeneratedMessageLite$ExtendableMessage:
    493:500:void <init>() -> <init>
    780:783:com.android.networkstack.protobuf.FieldSet ensureExtensionsAreMutable() -> ensureExtensionsAreMutable
com.android.networkstack.protobuf.GeneratedMessageLite$ExtensionDescriptor -> com.android.networkstack.protobuf.GeneratedMessageLite$ExtensionDescriptor:
    1076:1076:int compareTo(java.lang.Object) -> compareTo
    1136:1136:int compareTo(com.android.networkstack.protobuf.GeneratedMessageLite$ExtensionDescriptor) -> compareTo
    1124:1124:com.android.networkstack.protobuf.Internal$EnumLiteMap getEnumType() -> getEnumType
    1109:1109:com.android.networkstack.protobuf.WireFormat$JavaType getLiteJavaType() -> getLiteJavaType
    1104:1104:com.android.networkstack.protobuf.WireFormat$FieldType getLiteType() -> getLiteType
    1099:1099:int getNumber() -> getNumber
    1130:1130:com.android.networkstack.protobuf.MessageLite$Builder internalMergeFrom(com.android.networkstack.protobuf.MessageLite$Builder,com.android.networkstack.protobuf.MessageLite) -> internalMergeFrom
    1119:1119:boolean isPacked() -> isPacked
    1114:1114:boolean isRepeated() -> isRepeated
com.android.networkstack.protobuf.GeneratedMessageLite$GeneratedExtension -> com.android.networkstack.protobuf.GeneratedMessageLite$GeneratedExtension:
    1289:1289:com.android.networkstack.protobuf.WireFormat$FieldType getLiteType() -> getLiteType
    1234:1234:com.android.networkstack.protobuf.MessageLite getMessageDefaultInstance() -> getMessageDefaultInstance
    1225:1225:int getNumber() -> getNumber
    1294:1294:boolean isRepeated() -> isRepeated
com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke -> com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke:
    206:216:void <clinit>() -> <clinit>
    206:206:void <init>(java.lang.String,int) -> <init>
    206:206:com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke valueOf(java.lang.String) -> valueOf
    206:206:com.android.networkstack.protobuf.GeneratedMessageLite$MethodToInvoke[] values() -> values
com.android.networkstack.protobuf.IntArrayList -> com.android.networkstack.protobuf.IntArrayList:
    48:51:void <clinit>() -> <clinit>
    69:69:void <init>() -> <init>
    75:77:void <init>(int[],int) -> <init>
    45:45:void add(int,java.lang.Object) -> add
    164:164:void add(int,java.lang.Integer) -> add
    203:230:boolean addAll(java.util.Collection) -> addAll
    170:170:void addInt(int) -> addInt
    175:198:void addInt(int,int) -> addInt
    55:55:com.android.networkstack.protobuf.IntArrayList emptyList() -> emptyList
    268:269:void ensureIndexInRange(int) -> ensureIndexInRange
    97:107:boolean equals(java.lang.Object) -> equals
    45:45:java.lang.Object get(int) -> get
    134:134:java.lang.Integer get(int) -> get
    139:140:int getInt(int) -> getInt
    118:119:int hashCode() -> hashCode
    274:274:java.lang.String makeOutOfBoundsExceptionMessage(int) -> makeOutOfBoundsExceptionMessage
    45:45:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    126:129:com.android.networkstack.protobuf.Internal$IntList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    45:45:java.lang.Object remove(int) -> remove
    236:241:boolean remove(java.lang.Object) -> remove
    250:258:java.lang.Integer remove(int) -> remove
    82:89:void removeRange(int,int) -> removeRange
    45:45:java.lang.Object set(int,java.lang.Object) -> set
    150:150:java.lang.Integer set(int,java.lang.Integer) -> set
    155:158:int setInt(int,int) -> setInt
    145:145:int size() -> size
com.android.networkstack.protobuf.Internal -> com.android.networkstack.protobuf.Internal:
    58:382:void <clinit>() -> <clinit>
    64:64:java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    72:72:java.lang.Object checkNotNull(java.lang.Object,java.lang.String) -> checkNotNull
    283:283:int hashCode(byte[]) -> hashCode
    292:292:int hashCode(byte[],int,int) -> hashCode
    181:181:boolean isValidUtf8(byte[]) -> isValidUtf8
    387:387:java.lang.Object mergeMessage(java.lang.Object,java.lang.Object) -> mergeMessage
    299:299:int partialHash(int,byte[],int,int) -> partialHash
    191:191:java.lang.String toStringUtf8(byte[]) -> toStringUtf8
com.android.networkstack.protobuf.InvalidProtocolBufferException -> com.android.networkstack.protobuf.InvalidProtocolBufferException:
    43:46:void <init>(java.lang.String) -> <init>
    106:106:com.android.networkstack.protobuf.InvalidProtocolBufferException invalidEndTag() -> invalidEndTag
    102:102:com.android.networkstack.protobuf.InvalidProtocolBufferException invalidTag() -> invalidTag
    141:141:com.android.networkstack.protobuf.InvalidProtocolBufferException invalidUtf8() -> invalidUtf8
    111:111:com.android.networkstack.protobuf.InvalidProtocolBufferException$InvalidWireTypeException invalidWireType() -> invalidWireType
    98:98:com.android.networkstack.protobuf.InvalidProtocolBufferException malformedVarint() -> malformedVarint
    92:92:com.android.networkstack.protobuf.InvalidProtocolBufferException negativeSize() -> negativeSize
    137:137:com.android.networkstack.protobuf.InvalidProtocolBufferException parseFailure() -> parseFailure
    125:125:com.android.networkstack.protobuf.InvalidProtocolBufferException recursionLimitExceeded() -> recursionLimitExceeded
    64:64:com.android.networkstack.protobuf.InvalidProtocolBufferException setUnfinishedMessage(com.android.networkstack.protobuf.MessageLite) -> setUnfinishedMessage
    84:84:com.android.networkstack.protobuf.InvalidProtocolBufferException truncatedMessage() -> truncatedMessage
com.android.networkstack.protobuf.InvalidProtocolBufferException$InvalidWireTypeException -> com.android.networkstack.protobuf.InvalidProtocolBufferException$InvalidWireTypeException:
    120:120:void <init>(java.lang.String) -> <init>
com.android.networkstack.protobuf.JavaType -> com.android.networkstack.protobuf.JavaType:
    34:45:void <clinit>() -> <clinit>
    51:54:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class,java.lang.Object) -> <init>
    69:69:java.lang.Class getBoxedType() -> getBoxedType
    34:34:com.android.networkstack.protobuf.JavaType valueOf(java.lang.String) -> valueOf
    34:34:com.android.networkstack.protobuf.JavaType[] values() -> values
com.android.networkstack.protobuf.LazyField -> com.android.networkstack.protobuf.LazyField:
    77:77:boolean equals(java.lang.Object) -> equals
    67:67:com.android.networkstack.protobuf.MessageLite getValue() -> getValue
    72:72:int hashCode() -> hashCode
    82:82:java.lang.String toString() -> toString
com.android.networkstack.protobuf.LazyField$LazyEntry -> com.android.networkstack.protobuf.LazyField$LazyEntry:
    91:91:void <init>(java.util.Map$Entry,com.android.networkstack.protobuf.LazyField$1) -> <init>
    94:95:void <init>(java.util.Map$Entry) -> <init>
    113:113:com.android.networkstack.protobuf.LazyField getField() -> getField
    100:100:java.lang.Object getKey() -> getKey
    105:109:java.lang.Object getValue() -> getValue
    118:123:java.lang.Object setValue(java.lang.Object) -> setValue
com.android.networkstack.protobuf.LazyField$LazyIterator -> com.android.networkstack.protobuf.LazyField$LazyIterator:
    130:131:void <init>(java.util.Iterator) -> <init>
    136:136:boolean hasNext() -> hasNext
    127:127:java.lang.Object next() -> next
    142:144:java.util.Map$Entry next() -> next
    151:151:void remove() -> remove
com.android.networkstack.protobuf.LazyFieldLite -> com.android.networkstack.protobuf.LazyFieldLite:
    58:58:void <clinit>() -> <clinit>
    125:125:void <init>() -> <init>
    406:430:void ensureInitialized(com.android.networkstack.protobuf.MessageLite) -> ensureInitialized
    143:162:boolean equals(java.lang.Object) -> equals
    357:362:int getSerializedSize() -> getSerializedSize
    223:224:com.android.networkstack.protobuf.MessageLite getValue(com.android.networkstack.protobuf.MessageLite) -> getValue
    234:237:com.android.networkstack.protobuf.MessageLite setValue(com.android.networkstack.protobuf.MessageLite) -> setValue
    370:388:com.android.networkstack.protobuf.ByteString toByteString() -> toByteString
com.android.networkstack.protobuf.LazyStringArrayList -> com.android.networkstack.protobuf.LazyStringArrayList:
    64:75:void <clinit>() -> <clinit>
    80:80:void <init>() -> <init>
    84:84:void <init>(int) -> <init>
    96:97:void <init>(java.util.ArrayList) -> <init>
    61:61:void add(int,java.lang.Object) -> add
    61:61:boolean add(java.lang.Object) -> add
    146:148:void add(int,java.lang.String) -> add
    217:219:void add(com.android.networkstack.protobuf.ByteString) -> add
    169:169:boolean addAll(java.util.Collection) -> addAll
    174:180:boolean addAll(int,java.util.Collection) -> addAll
    275:280:java.lang.String asString(java.lang.Object) -> asString
    210:212:void clear() -> clear
    61:61:boolean equals(java.lang.Object) -> equals
    61:61:java.lang.Object get(int) -> get
    112:126:java.lang.String get(int) -> get
    231:231:java.lang.Object getRaw(int) -> getRaw
    306:306:java.util.List getUnderlyingElements() -> getUnderlyingElements
    412:413:com.android.networkstack.protobuf.LazyStringList getUnmodifiableView() -> getUnmodifiableView
    61:61:int hashCode() -> hashCode
    61:61:boolean isModifiable() -> isModifiable
    61:61:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    102:107:com.android.networkstack.protobuf.LazyStringArrayList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    61:61:java.lang.Object remove(int) -> remove
    61:61:boolean remove(java.lang.Object) -> remove
    202:205:java.lang.String remove(int) -> remove
    61:61:boolean removeAll(java.util.Collection) -> removeAll
    61:61:boolean retainAll(java.util.Collection) -> retainAll
    61:61:java.lang.Object set(int,java.lang.Object) -> set
    139:141:java.lang.String set(int,java.lang.String) -> set
    134:134:int size() -> size
com.android.networkstack.protobuf.ListFieldSchema -> com.android.networkstack.protobuf.ListFieldSchema:
    45:46:void <clinit>() -> <clinit>
    41:41:void <init>(com.android.networkstack.protobuf.ListFieldSchema$1) -> <init>
    43:43:void <init>() -> <init>
    55:55:com.android.networkstack.protobuf.ListFieldSchema full() -> full
    59:59:com.android.networkstack.protobuf.ListFieldSchema lite() -> lite
com.android.networkstack.protobuf.ListFieldSchema$ListFieldSchemaFull -> com.android.networkstack.protobuf.ListFieldSchema$ListFieldSchemaFull:
    66:66:void <clinit>() -> <clinit>
    63:63:void <init>() -> <init>
    63:63:void <init>(com.android.networkstack.protobuf.ListFieldSchema$1) -> <init>
    141:141:java.util.List getList(java.lang.Object,long) -> getList
    75:90:void makeImmutableListAt(java.lang.Object,long) -> makeImmutableListAt
    126:136:void mergeListsAt(java.lang.Object,java.lang.Object,long) -> mergeListsAt
    70:70:java.util.List mutableListAt(java.lang.Object,long) -> mutableListAt
    95:119:java.util.List mutableListAt(java.lang.Object,long,int) -> mutableListAt
com.android.networkstack.protobuf.ListFieldSchema$ListFieldSchemaLite -> com.android.networkstack.protobuf.ListFieldSchema$ListFieldSchemaLite:
    146:146:void <init>() -> <init>
    146:146:void <init>(com.android.networkstack.protobuf.ListFieldSchema$1) -> <init>
    187:187:com.android.networkstack.protobuf.Internal$ProtobufList getProtobufList(java.lang.Object,long) -> getProtobufList
    163:164:void makeImmutableListAt(java.lang.Object,long) -> makeImmutableListAt
    169:182:void mergeListsAt(java.lang.Object,java.lang.Object,long) -> mergeListsAt
    150:156:java.util.List mutableListAt(java.lang.Object,long) -> mutableListAt
com.android.networkstack.protobuf.LongArrayList -> com.android.networkstack.protobuf.LongArrayList:
    48:51:void <clinit>() -> <clinit>
    69:69:void <init>() -> <init>
    75:77:void <init>(long[],int) -> <init>
    45:45:void add(int,java.lang.Object) -> add
    164:164:void add(int,java.lang.Long) -> add
    203:230:boolean addAll(java.util.Collection) -> addAll
    170:170:void addLong(long) -> addLong
    175:198:void addLong(int,long) -> addLong
    268:269:void ensureIndexInRange(int) -> ensureIndexInRange
    97:107:boolean equals(java.lang.Object) -> equals
    45:45:java.lang.Object get(int) -> get
    134:134:java.lang.Long get(int) -> get
    139:140:long getLong(int) -> getLong
    118:119:int hashCode() -> hashCode
    274:274:java.lang.String makeOutOfBoundsExceptionMessage(int) -> makeOutOfBoundsExceptionMessage
    45:45:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    126:129:com.android.networkstack.protobuf.Internal$LongList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    45:45:java.lang.Object remove(int) -> remove
    236:241:boolean remove(java.lang.Object) -> remove
    250:258:java.lang.Long remove(int) -> remove
    82:89:void removeRange(int,int) -> removeRange
    45:45:java.lang.Object set(int,java.lang.Object) -> set
    150:150:java.lang.Long set(int,java.lang.Long) -> set
    155:158:long setLong(int,long) -> setLong
    145:145:int size() -> size
com.android.networkstack.protobuf.ManifestSchemaFactory -> com.android.networkstack.protobuf.ManifestSchemaFactory:
    151:151:void <clinit>() -> <clinit>
    44:44:void <init>() -> <init>
    47:48:void <init>(com.android.networkstack.protobuf.MessageInfoFactory) -> <init>
    53:71:com.android.networkstack.protobuf.Schema createSchema(java.lang.Class) -> createSchema
    118:119:com.android.networkstack.protobuf.MessageInfoFactory getDefaultMessageInfoFactory() -> getDefaultMessageInfoFactory
    166:169:com.android.networkstack.protobuf.MessageInfoFactory getDescriptorMessageInfoFactory() -> getDescriptorMessageInfoFactory
    114:114:boolean isProto2(com.android.networkstack.protobuf.MessageInfo) -> isProto2
    75:110:com.android.networkstack.protobuf.Schema newSchema(java.lang.Class,com.android.networkstack.protobuf.MessageInfo) -> newSchema
com.android.networkstack.protobuf.ManifestSchemaFactory$1 -> com.android.networkstack.protobuf.ManifestSchemaFactory$1:
    152:152:void <init>() -> <init>
    160:160:com.android.networkstack.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> messageInfoFor
com.android.networkstack.protobuf.ManifestSchemaFactory$CompositeMessageInfoFactory -> com.android.networkstack.protobuf.ManifestSchemaFactory$CompositeMessageInfoFactory:
    125:126:void <init>(com.android.networkstack.protobuf.MessageInfoFactory[]) -> <init>
    131:132:boolean isSupported(java.lang.Class) -> isSupported
    141:147:com.android.networkstack.protobuf.MessageInfo messageInfoFor(java.lang.Class) -> messageInfoFor
com.android.networkstack.protobuf.MapEntryLite -> com.android.networkstack.protobuf.MapEntryLite:
    157:159:int computeMessageSize(int,java.lang.Object,java.lang.Object) -> computeMessageSize
    114:114:int computeSerializedSize(com.android.networkstack.protobuf.MapEntryLite$Metadata,java.lang.Object,java.lang.Object) -> computeSerializedSize
    229:229:com.android.networkstack.protobuf.MapEntryLite$Metadata getMetadata() -> getMetadata
    109:109:void writeTo(com.android.networkstack.protobuf.CodedOutputStream,com.android.networkstack.protobuf.MapEntryLite$Metadata,java.lang.Object,java.lang.Object) -> writeTo
com.android.networkstack.protobuf.MapFieldLite -> com.android.networkstack.protobuf.MapFieldLite:
    61:64:void <clinit>() -> <clinit>
    51:52:void <init>() -> <init>
    56:57:void <init>(java.util.Map) -> <init>
    178:180:int calculateHashCodeForMap(java.util.Map) -> calculateHashCodeForMap
    162:169:int calculateHashCodeForObject(java.lang.Object) -> calculateHashCodeForObject
    119:121:void checkForNullKeysAndValues(java.util.Map) -> checkForNullKeysAndValues
    88:89:void clear() -> clear
    70:70:com.android.networkstack.protobuf.MapFieldLite emptyMapField() -> emptyMapField
    231:232:void ensureMutable() -> ensureMutable
    83:83:java.util.Set entrySet() -> entrySet
    126:129:boolean equals(java.lang.Object,java.lang.Object) -> equals
    140:147:boolean equals(java.util.Map,java.util.Map) -> equals
    158:158:boolean equals(java.lang.Object) -> equals
    187:187:int hashCode() -> hashCode
    227:227:boolean isMutable() -> isMutable
    222:222:void makeImmutable() -> makeImmutable
    74:76:void mergeFrom(com.android.networkstack.protobuf.MapFieldLite) -> mergeFrom
    214:214:com.android.networkstack.protobuf.MapFieldLite mutableCopy() -> mutableCopy
    94:98:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    107:109:void putAll(java.util.Map) -> putAll
    114:115:java.lang.Object remove(java.lang.Object) -> remove
com.android.networkstack.protobuf.MapFieldSchemaLite -> com.android.networkstack.protobuf.MapFieldSchemaLite:
    36:36:void <init>() -> <init>
    50:50:java.util.Map forMapData(java.lang.Object) -> forMapData
    45:45:com.android.networkstack.protobuf.MapEntryLite$Metadata forMapMetadata(java.lang.Object) -> forMapMetadata
    40:40:java.util.Map forMutableMapData(java.lang.Object) -> forMutableMapData
    89:89:int getSerializedSize(int,java.lang.Object,java.lang.Object) -> getSerializedSize
    95:103:int getSerializedSizeLite(int,java.lang.Object,java.lang.Object) -> getSerializedSizeLite
    55:55:boolean isImmutable(java.lang.Object) -> isImmutable
    71:71:java.lang.Object mergeFrom(java.lang.Object,java.lang.Object) -> mergeFrom
    76:82:com.android.networkstack.protobuf.MapFieldLite mergeFromLite(java.lang.Object,java.lang.Object) -> mergeFromLite
    66:66:java.lang.Object newMapField(java.lang.Object) -> newMapField
    60:60:java.lang.Object toImmutable(java.lang.Object) -> toImmutable
com.android.networkstack.protobuf.MapFieldSchemas -> com.android.networkstack.protobuf.MapFieldSchemas:
    34:35:void <clinit>() -> <clinit>
    38:38:com.android.networkstack.protobuf.MapFieldSchema full() -> full
    42:42:com.android.networkstack.protobuf.MapFieldSchema lite() -> lite
    47:48:com.android.networkstack.protobuf.MapFieldSchema loadSchemaForFullRuntime() -> loadSchemaForFullRuntime
com.android.networkstack.protobuf.MessageLiteToString -> com.android.networkstack.protobuf.MessageLiteToString:
    271:279:java.lang.String camelCaseToSnakeCase(java.lang.String) -> camelCaseToSnakeCase
    183:205:boolean isDefaultValue(java.lang.Object) -> isDefaultValue
    222:266:void printField(java.lang.StringBuilder,int,java.lang.String,java.lang.Object) -> printField
    76:178:void reflectivePrintWithIndent(com.android.networkstack.protobuf.MessageLite,java.lang.StringBuilder,int) -> reflectivePrintWithIndent
    59:62:java.lang.String toString(com.android.networkstack.protobuf.MessageLite,java.lang.String) -> toString
com.android.networkstack.protobuf.MessageSchema -> com.android.networkstack.protobuf.MessageSchema:
    92:101:void <clinit>() -> <clinit>
    189:209:void <init>(int[],java.lang.Object[],int,int,com.android.networkstack.protobuf.MessageLite,boolean,boolean,int[],int,int,com.android.networkstack.protobuf.NewInstanceSchema,com.android.networkstack.protobuf.ListFieldSchema,com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MapFieldSchema) -> <init>
    5746:5746:boolean arePresentForEquals(java.lang.Object,java.lang.Object,int) -> arePresentForEquals
    5721:5721:boolean booleanAt(java.lang.Object,long) -> booleanAt
    5705:5705:double doubleAt(java.lang.Object,long) -> doubleAt
    785:801:boolean equals(java.lang.Object,java.lang.Object) -> equals
    807:929:boolean equals(java.lang.Object,java.lang.Object,int) -> equals
    5454:5467:java.lang.Object filterMapUnknownEnumValues(java.lang.Object,int,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> filterMapUnknownEnumValues
    5480:5499:java.lang.Object filterUnknownEnumMap(int,int,java.util.Map,com.android.networkstack.protobuf.Internal$EnumVerifier,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> filterUnknownEnumMap
    5709:5709:float floatAt(java.lang.Object,long) -> floatAt
    4859:4859:com.android.networkstack.protobuf.Internal$EnumVerifier getEnumFieldVerifier(int) -> getEnumFieldVerifier
    4855:4855:java.lang.Object getMapFieldDefaultEntry(int) -> getMapFieldDefaultEntry
    4844:4850:com.android.networkstack.protobuf.Schema getMessageFieldSchema(int) -> getMessageFieldSchema
    1411:1411:int getSerializedSize(java.lang.Object) -> getSerializedSize
    1418:1977:int getSerializedSizeProto2(java.lang.Object) -> getSerializedSizeProto2
    1984:2510:int getSerializedSizeProto3(java.lang.Object) -> getSerializedSizeProto3
    2517:2518:int getUnknownFieldsSerializedSize(com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object) -> getUnknownFieldsSerializedSize
    939:1160:int hashCode(java.lang.Object) -> hashCode
    5713:5713:int intAt(java.lang.Object,long) -> intAt
    5750:5751:boolean isFieldPresent(java.lang.Object,int,int,int) -> isFieldPresent
    5758:5811:boolean isFieldPresent(java.lang.Object,int) -> isFieldPresent
    5509:5568:boolean isInitialized(java.lang.Object) -> isInitialized
    5577:5578:boolean isInitialized(java.lang.Object,int,com.android.networkstack.protobuf.Schema) -> isInitialized
    5583:5591:boolean isListInitialized(java.lang.Object,int,int) -> isListInitialized
    5599:5605:boolean isMapInitialized(java.lang.Object,int,int) -> isMapInitialized
    5835:5837:boolean isOneofCaseEqual(java.lang.Object,java.lang.Object,int) -> isOneofCaseEqual
    5830:5831:boolean isOneofPresent(java.lang.Object,int,int) -> isOneofPresent
    2522:2522:java.util.List listAt(java.lang.Object,long) -> listAt
    5717:5717:long longAt(java.lang.Object,long) -> longAt
    5405:5419:void makeImmutable(java.lang.Object) -> makeImmutable
    1169:1180:void mergeFrom(java.lang.Object,java.lang.Object) -> mergeFrom
    3844:3846:void mergeFrom(java.lang.Object,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite) -> mergeFrom
    3864:4331:void mergeFromHelper(com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,java.lang.Object,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite) -> mergeFromHelper
    5431:5448:void mergeMap(java.lang.Object,int,java.lang.Object,com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.Reader) -> mergeMap
    1369:1384:void mergeMessage(java.lang.Object,java.lang.Object,int) -> mergeMessage
    1389:1405:void mergeOneofMessage(java.lang.Object,java.lang.Object,int) -> mergeOneofMessage
    1186:1361:void mergeSingleField(java.lang.Object,java.lang.Object,int) -> mergeSingleField
    780:780:java.lang.Object newInstance() -> newInstance
    220:230:com.android.networkstack.protobuf.MessageSchema newSchema(java.lang.Class,com.android.networkstack.protobuf.MessageInfo,com.android.networkstack.protobuf.NewInstanceSchema,com.android.networkstack.protobuf.ListFieldSchema,com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MapFieldSchema) -> newSchema
    619:708:com.android.networkstack.protobuf.MessageSchema newSchemaForMessageInfo(com.android.networkstack.protobuf.StructuralMessageInfo,com.android.networkstack.protobuf.NewInstanceSchema,com.android.networkstack.protobuf.ListFieldSchema,com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MapFieldSchema) -> newSchemaForMessageInfo
    247:574:com.android.networkstack.protobuf.MessageSchema newSchemaForRawMessageInfo(com.android.networkstack.protobuf.RawMessageInfo,com.android.networkstack.protobuf.NewInstanceSchema,com.android.networkstack.protobuf.ListFieldSchema,com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MapFieldSchema) -> newSchemaForRawMessageInfo
    5677:5677:int numberAt(int) -> numberAt
    5741:5741:boolean oneofBooleanAt(java.lang.Object,long) -> oneofBooleanAt
    5725:5725:double oneofDoubleAt(java.lang.Object,long) -> oneofDoubleAt
    5729:5729:float oneofFloatAt(java.lang.Object,long) -> oneofFloatAt
    5733:5733:int oneofIntAt(java.lang.Object,long) -> oneofIntAt
    5737:5737:long oneofLongAt(java.lang.Object,long) -> oneofLongAt
    5846:5847:int positionForFieldNumber(int) -> positionForFieldNumber
    5685:5685:int presenceMaskAndOffsetAt(int) -> presenceMaskAndOffsetAt
    5672:5673:void readGroupList(java.lang.Object,long,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readGroupList
    5660:5662:void readMessageList(java.lang.Object,int,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.Schema,com.android.networkstack.protobuf.ExtensionRegistryLite) -> readMessageList
    5630:5640:void readString(java.lang.Object,int,com.android.networkstack.protobuf.Reader) -> readString
    5645:5649:void readStringList(java.lang.Object,int,com.android.networkstack.protobuf.Reader) -> readStringList
    589:608:java.lang.reflect.Field reflectField(java.lang.Class,java.lang.String) -> reflectField
    5816:5826:void setFieldPresent(java.lang.Object,int) -> setFieldPresent
    5841:5842:void setOneofPresent(java.lang.Object,int,int) -> setOneofPresent
    5860:5865:int slowPositionForFieldNumber(int,int) -> slowPositionForFieldNumber
    5681:5681:int typeAndOffsetAt(int) -> typeAndOffsetAt
    2546:2915:void writeFieldsInAscendingOrderProto2(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeFieldsInAscendingOrderProto2
    2922:3369:void writeFieldsInAscendingOrderProto3(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeFieldsInAscendingOrderProto3
    3374:3820:void writeFieldsInDescendingOrder(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeFieldsInDescendingOrder
    3828:3831:void writeMapHelper(com.android.networkstack.protobuf.Writer,int,java.lang.Object,int) -> writeMapHelper
    5622:5625:void writeString(int,java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeString
    2531:2537:void writeTo(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeTo
    3837:3837:void writeUnknownInMessageTo(com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeUnknownInMessageTo
com.android.networkstack.protobuf.MessageSetSchema -> com.android.networkstack.protobuf.MessageSetSchema:
    47:51:void <init>(com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MessageLite) -> <init>
    69:77:boolean equals(java.lang.Object,java.lang.Object) -> equals
    378:381:int getSerializedSize(java.lang.Object) -> getSerializedSize
    389:390:int getUnknownFieldsSerializedSize(com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object) -> getUnknownFieldsSerializedSize
    84:87:int hashCode(java.lang.Object) -> hashCode
    370:371:boolean isInitialized(java.lang.Object) -> isInitialized
    269:270:void makeImmutable(java.lang.Object) -> makeImmutable
    94:96:void mergeFrom(java.lang.Object,java.lang.Object) -> mergeFrom
    227:227:void mergeFrom(java.lang.Object,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite) -> mergeFrom
    242:264:void mergeFromHelper(com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,java.lang.Object,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite) -> mergeFromHelper
    64:64:java.lang.Object newInstance() -> newInstance
    58:58:com.android.networkstack.protobuf.MessageSetSchema newSchema(com.android.networkstack.protobuf.UnknownFieldSchema,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.MessageLite) -> newSchema
    282:362:boolean parseMessageSetItemOrUnknownField(com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite,com.android.networkstack.protobuf.ExtensionSchema,com.android.networkstack.protobuf.FieldSet,com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object) -> parseMessageSetItemOrUnknownField
    103:118:void writeTo(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeTo
    127:127:void writeUnknownFieldsHelper(com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeUnknownFieldsHelper
com.android.networkstack.protobuf.NewInstanceSchemaLite -> com.android.networkstack.protobuf.NewInstanceSchemaLite:
    33:33:void <init>() -> <init>
    36:37:java.lang.Object newInstance(java.lang.Object) -> newInstance
com.android.networkstack.protobuf.NewInstanceSchemas -> com.android.networkstack.protobuf.NewInstanceSchemas:
    34:35:void <clinit>() -> <clinit>
    38:38:com.android.networkstack.protobuf.NewInstanceSchema full() -> full
    42:42:com.android.networkstack.protobuf.NewInstanceSchema lite() -> lite
    47:48:com.android.networkstack.protobuf.NewInstanceSchema loadSchemaForFullRuntime() -> loadSchemaForFullRuntime
com.android.networkstack.protobuf.ProtoSyntax -> com.android.networkstack.protobuf.ProtoSyntax:
    34:37:void <clinit>() -> <clinit>
    35:35:void <init>(java.lang.String,int) -> <init>
    34:34:com.android.networkstack.protobuf.ProtoSyntax valueOf(java.lang.String) -> valueOf
    34:34:com.android.networkstack.protobuf.ProtoSyntax[] values() -> values
com.android.networkstack.protobuf.Protobuf -> com.android.networkstack.protobuf.Protobuf:
    45:45:void <clinit>() -> <clinit>
    50:140:void <init>() -> <init>
    55:55:com.android.networkstack.protobuf.Protobuf getInstance() -> getInstance
    71:71:void mergeFrom(java.lang.Object,com.android.networkstack.protobuf.Reader,com.android.networkstack.protobuf.ExtensionRegistryLite) -> mergeFrom
    119:121:com.android.networkstack.protobuf.Schema registerSchema(java.lang.Class,com.android.networkstack.protobuf.Schema) -> registerSchema
    89:95:com.android.networkstack.protobuf.Schema schemaFor(java.lang.Class) -> schemaFor
    107:107:com.android.networkstack.protobuf.Schema schemaFor(java.lang.Object) -> schemaFor
com.android.networkstack.protobuf.ProtobufArrayList -> com.android.networkstack.protobuf.ProtobufArrayList:
    40:44:void <clinit>() -> <clinit>
    58:59:void <init>(java.util.List) -> <init>
    74:76:void add(int,java.lang.Object) -> add
    49:49:com.android.networkstack.protobuf.ProtobufArrayList emptyList() -> emptyList
    81:81:java.lang.Object get(int) -> get
    38:38:com.android.networkstack.protobuf.Internal$ProtobufList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    64:69:com.android.networkstack.protobuf.ProtobufArrayList mutableCopyWithCapacity(int) -> mutableCopyWithCapacity
    86:88:java.lang.Object remove(int) -> remove
    94:96:java.lang.Object set(int,java.lang.Object) -> set
    102:102:int size() -> size
com.android.networkstack.protobuf.RawMessageInfo -> com.android.networkstack.protobuf.RawMessageInfo:
    179:194:void <init>(com.android.networkstack.protobuf.MessageLite,java.lang.String,java.lang.Object[]) -> <init>
    208:208:com.android.networkstack.protobuf.MessageLite getDefaultInstance() -> getDefaultInstance
    203:203:java.lang.Object[] getObjects() -> getObjects
    199:199:java.lang.String getStringInfo() -> getStringInfo
    213:213:com.android.networkstack.protobuf.ProtoSyntax getSyntax() -> getSyntax
    218:218:boolean isMessageSetWireFormat() -> isMessageSetWireFormat
com.android.networkstack.protobuf.SchemaUtil -> com.android.networkstack.protobuf.SchemaUtil:
    45:50:void <clinit>() -> <clinit>
    626:635:int computeSizeBoolList(int,java.util.List,boolean) -> computeSizeBoolList
    622:622:int computeSizeBoolListNoTag(java.util.List) -> computeSizeBoolListNoTag
    711:717:int computeSizeByteStringList(int,java.util.List) -> computeSizeByteStringList
    461:471:int computeSizeEnumList(int,java.util.List,boolean) -> computeSizeEnumList
    440:454:int computeSizeEnumListNoTag(java.util.List) -> computeSizeEnumListNoTag
    589:598:int computeSizeFixed32List(int,java.util.List,boolean) -> computeSizeFixed32List
    585:585:int computeSizeFixed32ListNoTag(java.util.List) -> computeSizeFixed32ListNoTag
    607:616:int computeSizeFixed64List(int,java.util.List,boolean) -> computeSizeFixed64List
    603:603:int computeSizeFixed64ListNoTag(java.util.List) -> computeSizeFixed64ListNoTag
    735:741:int computeSizeGroupList(int,java.util.List,com.android.networkstack.protobuf.Schema) -> computeSizeGroupList
    497:507:int computeSizeInt32List(int,java.util.List,boolean) -> computeSizeInt32List
    476:490:int computeSizeInt32ListNoTag(java.util.List) -> computeSizeInt32ListNoTag
    353:363:int computeSizeInt64List(int,java.util.List,boolean) -> computeSizeInt64List
    332:346:int computeSizeInt64ListNoTag(java.util.List) -> computeSizeInt64ListNoTag
    669:672:int computeSizeMessage(int,java.lang.Object,com.android.networkstack.protobuf.Schema) -> computeSizeMessage
    694:704:int computeSizeMessageList(int,java.util.List,com.android.networkstack.protobuf.Schema) -> computeSizeMessageList
    569:580:int computeSizeSInt32List(int,java.util.List,boolean) -> computeSizeSInt32List
    548:562:int computeSizeSInt32ListNoTag(java.util.List) -> computeSizeSInt32ListNoTag
    425:435:int computeSizeSInt64List(int,java.util.List,boolean) -> computeSizeSInt64List
    404:418:int computeSizeSInt64ListNoTag(java.util.List) -> computeSizeSInt64ListNoTag
    640:661:int computeSizeStringList(int,java.util.List) -> computeSizeStringList
    533:543:int computeSizeUInt32List(int,java.util.List,boolean) -> computeSizeUInt32List
    512:526:int computeSizeUInt32ListNoTag(java.util.List) -> computeSizeUInt32ListNoTag
    389:399:int computeSizeUInt64List(int,java.util.List,boolean) -> computeSizeUInt64List
    368:382:int computeSizeUInt64ListNoTag(java.util.List) -> computeSizeUInt64ListNoTag
    913:935:java.lang.Object filterUnknownEnumList(int,java.util.List,com.android.networkstack.protobuf.Internal$EnumLiteMap,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> filterUnknownEnumList
    953:975:java.lang.Object filterUnknownEnumList(int,java.util.List,com.android.networkstack.protobuf.Internal$EnumVerifier,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> filterUnknownEnumList
    811:811:java.lang.Class getGeneratedMessageClass() -> getGeneratedMessageClass
    799:803:com.android.networkstack.protobuf.UnknownFieldSchema getUnknownFieldSetSchema(boolean) -> getUnknownFieldSetSchema
    819:819:java.lang.Class getUnknownFieldSetSchemaClass() -> getUnknownFieldSetSchemaClass
    887:890:void mergeExtensions(com.android.networkstack.protobuf.ExtensionSchema,java.lang.Object,java.lang.Object) -> mergeExtensions
    880:882:void mergeMap(com.android.networkstack.protobuf.MapFieldSchema,java.lang.Object,java.lang.Object,long) -> mergeMap
    896:899:void mergeUnknownFields(com.android.networkstack.protobuf.UnknownFieldSchema,java.lang.Object,java.lang.Object) -> mergeUnknownFields
    786:786:com.android.networkstack.protobuf.UnknownFieldSchema proto2UnknownFieldSetSchema() -> proto2UnknownFieldSetSchema
    790:790:com.android.networkstack.protobuf.UnknownFieldSchema proto3UnknownFieldSetSchema() -> proto3UnknownFieldSetSchema
    62:65:void requireGeneratedMessage(java.lang.Class) -> requireGeneratedMessage
    875:875:boolean safeEquals(java.lang.Object,java.lang.Object) -> safeEquals
    986:988:java.lang.Object storeUnknownEnum(int,int,java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSchema) -> storeUnknownEnum
    794:794:com.android.networkstack.protobuf.UnknownFieldSchema unknownFieldSetLiteSchema() -> unknownFieldSetLiteSchema
    275:276:void writeBoolList(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeBoolList
    289:290:void writeBytesList(int,java.util.List,com.android.networkstack.protobuf.Writer) -> writeBytesList
    184:185:void writeDoubleList(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeDoubleList
    268:269:void writeEnumList(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeEnumList
    254:255:void writeFixed32List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeFixed32List
    219:220:void writeFixed64List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeFixed64List
    191:192:void writeFloatList(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeFloatList
    326:327:void writeGroupList(int,java.util.List,com.android.networkstack.protobuf.Writer,com.android.networkstack.protobuf.Schema) -> writeGroupList
    233:234:void writeInt32List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeInt32List
    198:199:void writeInt64List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeInt64List
    303:304:void writeMessageList(int,java.util.List,com.android.networkstack.protobuf.Writer,com.android.networkstack.protobuf.Schema) -> writeMessageList
    261:262:void writeSFixed32List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeSFixed32List
    226:227:void writeSFixed64List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeSFixed64List
    247:248:void writeSInt32List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeSInt32List
    212:213:void writeSInt64List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeSInt64List
    282:283:void writeStringList(int,java.util.List,com.android.networkstack.protobuf.Writer) -> writeStringList
    240:241:void writeUInt32List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeUInt32List
    205:206:void writeUInt64List(int,java.util.List,com.android.networkstack.protobuf.Writer,boolean) -> writeUInt64List
com.android.networkstack.protobuf.SmallSortedMap -> com.android.networkstack.protobuf.SmallSortedMap:
    83:83:void <init>(int,com.android.networkstack.protobuf.SmallSortedMap$1) -> <init>
    146:150:void <init>(int) -> <init>
    83:83:void access$300(com.android.networkstack.protobuf.SmallSortedMap) -> access$300
    83:83:java.util.List access$600(com.android.networkstack.protobuf.SmallSortedMap) -> access$600
    83:83:java.util.Map access$700(com.android.networkstack.protobuf.SmallSortedMap) -> access$700
    83:83:java.lang.Object access$800(com.android.networkstack.protobuf.SmallSortedMap,int) -> access$800
    83:83:java.util.Map access$900(com.android.networkstack.protobuf.SmallSortedMap) -> access$900
    316:332:int binarySearchInArray(java.lang.Comparable) -> binarySearchInArray
    368:369:void checkMutable() -> checkMutable
    264:269:void clear() -> clear
    218:219:boolean containsKey(java.lang.Object) -> containsKey
    360:363:java.util.Set descendingEntrySet() -> descendingEntrySet
    389:391:void ensureEntryArrayMutable() -> ensureEntryArrayMutable
    353:356:java.util.Set entrySet() -> entrySet
    670:693:boolean equals(java.lang.Object) -> equals
    230:235:java.lang.Object get(java.lang.Object) -> get
    184:184:java.util.Map$Entry getArrayEntryAt(int) -> getArrayEntryAt
    179:179:int getNumArrayEntries() -> getNumArrayEntries
    189:189:int getNumOverflowEntries() -> getNumOverflowEntries
    194:196:java.lang.Iterable getOverflowEntries() -> getOverflowEntries
    379:384:java.util.SortedMap getOverflowEntriesMutable() -> getOverflowEntriesMutable
    702:708:int hashCode() -> hashCode
    174:174:boolean isImmutable() -> isImmutable
    155:168:void makeImmutable() -> makeImmutable
    95:95:com.android.networkstack.protobuf.SmallSortedMap newFieldMap(int) -> newFieldMap
    83:83:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    240:258:java.lang.Object put(java.lang.Comparable,java.lang.Object) -> put
    280:292:java.lang.Object remove(java.lang.Object) -> remove
    297:304:java.lang.Object removeArrayEntryAt(int) -> removeArrayEntryAt
    207:207:int size() -> size
com.android.networkstack.protobuf.SmallSortedMap$1 -> com.android.networkstack.protobuf.SmallSortedMap$1:
    95:95:void <init>(int) -> <init>
    99:114:void makeImmutable() -> makeImmutable
com.android.networkstack.protobuf.SmallSortedMap$DescendingEntryIterator -> com.android.networkstack.protobuf.SmallSortedMap$DescendingEntryIterator:
    589:591:void <init>(com.android.networkstack.protobuf.SmallSortedMap) -> <init>
    589:589:void <init>(com.android.networkstack.protobuf.SmallSortedMap,com.android.networkstack.protobuf.SmallSortedMap$1) -> <init>
    618:621:java.util.Iterator getOverflowIterator() -> getOverflowIterator
    596:596:boolean hasNext() -> hasNext
    589:589:java.lang.Object next() -> next
    601:604:java.util.Map$Entry next() -> next
    609:609:void remove() -> remove
com.android.networkstack.protobuf.SmallSortedMap$DescendingEntrySet -> com.android.networkstack.protobuf.SmallSortedMap$DescendingEntrySet:
    523:523:void <init>(com.android.networkstack.protobuf.SmallSortedMap) -> <init>
    523:523:void <init>(com.android.networkstack.protobuf.SmallSortedMap,com.android.networkstack.protobuf.SmallSortedMap$1) -> <init>
    526:526:java.util.Iterator iterator() -> iterator
com.android.networkstack.protobuf.SmallSortedMap$EmptySet -> com.android.networkstack.protobuf.SmallSortedMap$EmptySet:
    632:650:void <clinit>() -> <clinit>
    630:630:java.util.Iterator access$1000() -> access$1000
    660:660:java.lang.Iterable iterable() -> iterable
com.android.networkstack.protobuf.SmallSortedMap$EmptySet$1 -> com.android.networkstack.protobuf.SmallSortedMap$EmptySet$1:
    633:633:void <init>() -> <init>
    641:641:java.lang.Object next() -> next
    646:646:void remove() -> remove
com.android.networkstack.protobuf.SmallSortedMap$EmptySet$2 -> com.android.networkstack.protobuf.SmallSortedMap$EmptySet$2:
    651:651:void <init>() -> <init>
    654:654:java.util.Iterator iterator() -> iterator
com.android.networkstack.protobuf.SmallSortedMap$Entry -> com.android.networkstack.protobuf.SmallSortedMap$Entry:
    405:405:void <init>(com.android.networkstack.protobuf.SmallSortedMap,java.util.Map$Entry) -> <init>
    408:410:void <init>(com.android.networkstack.protobuf.SmallSortedMap,java.lang.Comparable,java.lang.Object) -> <init>
    399:399:int compareTo(java.lang.Object) -> compareTo
    425:425:int compareTo(com.android.networkstack.protobuf.SmallSortedMap$Entry) -> compareTo
    441:446:boolean equals(java.lang.Object) -> equals
    461:461:boolean equals(java.lang.Object,java.lang.Object) -> equals
    399:399:java.lang.Object getKey() -> getKey
    415:415:java.lang.Comparable getKey() -> getKey
    420:420:java.lang.Object getValue() -> getValue
    451:451:int hashCode() -> hashCode
    430:432:java.lang.Object setValue(java.lang.Object) -> setValue
    456:456:java.lang.String toString() -> toString
com.android.networkstack.protobuf.SmallSortedMap$EntryIterator -> com.android.networkstack.protobuf.SmallSortedMap$EntryIterator:
    534:536:void <init>(com.android.networkstack.protobuf.SmallSortedMap) -> <init>
    534:534:void <init>(com.android.networkstack.protobuf.SmallSortedMap,com.android.networkstack.protobuf.SmallSortedMap$1) -> <init>
    578:581:java.util.Iterator getOverflowIterator() -> getOverflowIterator
    542:543:boolean hasNext() -> hasNext
    534:534:java.lang.Object next() -> next
    548:554:java.util.Map$Entry next() -> next
    559:568:void remove() -> remove
com.android.networkstack.protobuf.SmallSortedMap$EntrySet -> com.android.networkstack.protobuf.SmallSortedMap$EntrySet:
    466:466:void <init>(com.android.networkstack.protobuf.SmallSortedMap) -> <init>
    466:466:void <init>(com.android.networkstack.protobuf.SmallSortedMap,com.android.networkstack.protobuf.SmallSortedMap$1) -> <init>
    466:466:boolean add(java.lang.Object) -> add
    494:495:boolean add(java.util.Map$Entry) -> add
    519:519:void clear() -> clear
    486:489:boolean contains(java.lang.Object) -> contains
    470:470:java.util.Iterator iterator() -> iterator
    509:511:boolean remove(java.lang.Object) -> remove
    475:475:int size() -> size
com.android.networkstack.protobuf.StructuralMessageInfo -> com.android.networkstack.protobuf.StructuralMessageInfo:
    84:84:int[] getCheckInitialized() -> getCheckInitialized
    97:97:com.android.networkstack.protobuf.MessageLite getDefaultInstance() -> getDefaultInstance
    92:92:com.android.networkstack.protobuf.FieldInfo[] getFields() -> getFields
    73:73:com.android.networkstack.protobuf.ProtoSyntax getSyntax() -> getSyntax
    79:79:boolean isMessageSetWireFormat() -> isMessageSetWireFormat
com.android.networkstack.protobuf.TextFormatEscaper -> com.android.networkstack.protobuf.TextFormatEscaper:
    50:99:java.lang.String escapeBytes(com.android.networkstack.protobuf.TextFormatEscaper$ByteSequence) -> escapeBytes
    109:109:java.lang.String escapeBytes(com.android.networkstack.protobuf.ByteString) -> escapeBytes
    145:145:java.lang.String escapeText(java.lang.String) -> escapeText
com.android.networkstack.protobuf.TextFormatEscaper$1 -> com.android.networkstack.protobuf.TextFormatEscaper$1:
    110:110:void <init>(com.android.networkstack.protobuf.ByteString) -> <init>
    118:118:byte byteAt(int) -> byteAt
    113:113:int size() -> size
com.android.networkstack.protobuf.UninitializedMessageException -> com.android.networkstack.protobuf.UninitializedMessageException:
    51:54:void <init>(com.android.networkstack.protobuf.MessageLite) -> <init>
    79:79:com.android.networkstack.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException() -> asInvalidProtocolBufferException
com.android.networkstack.protobuf.UnknownFieldSchema -> com.android.networkstack.protobuf.UnknownFieldSchema:
    36:36:void <init>() -> <init>
    115:116:void mergeFrom(java.lang.Object,com.android.networkstack.protobuf.Reader) -> mergeFrom
    82:109:boolean mergeOneFieldFrom(java.lang.Object,com.android.networkstack.protobuf.Reader) -> mergeOneFieldFrom
com.android.networkstack.protobuf.UnknownFieldSetLite -> com.android.networkstack.protobuf.UnknownFieldSetLite:
    52:52:void <clinit>() -> <clinit>
    99:99:void <init>() -> <init>
    92:107:void <init>(int,int[],java.lang.Object[],boolean) -> <init>
    121:122:void checkMutable() -> checkMutable
    400:405:void ensureCapacity() -> ensureCapacity
    306:306:boolean equals(int[],int[],int) -> equals
    315:315:boolean equals(java.lang.Object[],java.lang.Object[],int) -> equals
    332:339:boolean equals(java.lang.Object) -> equals
    61:61:com.android.networkstack.protobuf.UnknownFieldSetLite getDefaultInstance() -> getDefaultInstance
    267:299:int getSerializedSize() -> getSerializedSize
    243:256:int getSerializedSizeAsMessageSet() -> getSerializedSizeAsMessageSet
    349:349:int hashCode(int[],int) -> hashCode
    357:357:int hashCode(java.lang.Object[],int) -> hashCode
    366:368:int hashCode() -> hashCode
    116:116:void makeImmutable() -> makeImmutable
    74:79:com.android.networkstack.protobuf.UnknownFieldSetLite mutableCopyOf(com.android.networkstack.protobuf.UnknownFieldSetLite,com.android.networkstack.protobuf.UnknownFieldSetLite) -> mutableCopyOf
    66:66:com.android.networkstack.protobuf.UnknownFieldSetLite newInstance() -> newInstance
    382:384:void printWithIndent(java.lang.StringBuilder,int) -> printWithIndent
    390:395:void storeField(int,java.lang.Object) -> storeField
    173:183:void writeAsMessageSetTo(com.android.networkstack.protobuf.Writer) -> writeAsMessageSetTo
    207:234:void writeField(int,java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeField
    190:201:void writeTo(com.android.networkstack.protobuf.Writer) -> writeTo
com.android.networkstack.protobuf.UnknownFieldSetLiteSchema -> com.android.networkstack.protobuf.UnknownFieldSetLiteSchema:
    38:38:void <init>() -> <init>
    35:35:void addFixed32(java.lang.Object,int,int) -> addFixed32
    58:58:void addFixed32(com.android.networkstack.protobuf.UnknownFieldSetLite,int,int) -> addFixed32
    35:35:void addFixed64(java.lang.Object,int,long) -> addFixed64
    63:63:void addFixed64(com.android.networkstack.protobuf.UnknownFieldSetLite,int,long) -> addFixed64
    35:35:void addGroup(java.lang.Object,int,java.lang.Object) -> addGroup
    73:73:void addGroup(com.android.networkstack.protobuf.UnknownFieldSetLite,int,com.android.networkstack.protobuf.UnknownFieldSetLite) -> addGroup
    35:35:void addLengthDelimited(java.lang.Object,int,com.android.networkstack.protobuf.ByteString) -> addLengthDelimited
    68:68:void addLengthDelimited(com.android.networkstack.protobuf.UnknownFieldSetLite,int,com.android.networkstack.protobuf.ByteString) -> addLengthDelimited
    35:35:void addVarint(java.lang.Object,int,long) -> addVarint
    53:53:void addVarint(com.android.networkstack.protobuf.UnknownFieldSetLite,int,long) -> addVarint
    35:35:java.lang.Object getBuilderFromMessage(java.lang.Object) -> getBuilderFromMessage
    94:99:com.android.networkstack.protobuf.UnknownFieldSetLite getBuilderFromMessage(java.lang.Object) -> getBuilderFromMessage
    35:35:java.lang.Object getFromMessage(java.lang.Object) -> getFromMessage
    89:89:com.android.networkstack.protobuf.UnknownFieldSetLite getFromMessage(java.lang.Object) -> getFromMessage
    35:35:int getSerializedSize(java.lang.Object) -> getSerializedSize
    133:133:int getSerializedSize(com.android.networkstack.protobuf.UnknownFieldSetLite) -> getSerializedSize
    35:35:int getSerializedSizeAsMessageSet(java.lang.Object) -> getSerializedSizeAsMessageSet
    138:138:int getSerializedSizeAsMessageSet(com.android.networkstack.protobuf.UnknownFieldSetLite) -> getSerializedSizeAsMessageSet
    111:111:void makeImmutable(java.lang.Object) -> makeImmutable
    35:35:java.lang.Object merge(java.lang.Object,java.lang.Object) -> merge
    126:128:com.android.networkstack.protobuf.UnknownFieldSetLite merge(com.android.networkstack.protobuf.UnknownFieldSetLite,com.android.networkstack.protobuf.UnknownFieldSetLite) -> merge
    35:35:java.lang.Object newBuilder() -> newBuilder
    48:48:com.android.networkstack.protobuf.UnknownFieldSetLite newBuilder() -> newBuilder
    35:35:void setBuilderToMessage(java.lang.Object,java.lang.Object) -> setBuilderToMessage
    106:106:void setBuilderToMessage(java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSetLite) -> setBuilderToMessage
    35:35:void setToMessage(java.lang.Object,java.lang.Object) -> setToMessage
    84:84:void setToMessage(java.lang.Object,com.android.networkstack.protobuf.UnknownFieldSetLite) -> setToMessage
    35:35:java.lang.Object toImmutable(java.lang.Object) -> toImmutable
    78:78:com.android.networkstack.protobuf.UnknownFieldSetLite toImmutable(com.android.networkstack.protobuf.UnknownFieldSetLite) -> toImmutable
    35:35:void writeAsMessageSetTo(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeAsMessageSetTo
    121:121:void writeAsMessageSetTo(com.android.networkstack.protobuf.UnknownFieldSetLite,com.android.networkstack.protobuf.Writer) -> writeAsMessageSetTo
    35:35:void writeTo(java.lang.Object,com.android.networkstack.protobuf.Writer) -> writeTo
    116:116:void writeTo(com.android.networkstack.protobuf.UnknownFieldSetLite,com.android.networkstack.protobuf.Writer) -> writeTo
com.android.networkstack.protobuf.UnmodifiableLazyStringList -> com.android.networkstack.protobuf.UnmodifiableLazyStringList:
    52:53:void <init>(com.android.networkstack.protobuf.LazyStringList) -> <init>
    47:47:com.android.networkstack.protobuf.LazyStringList access$000(com.android.networkstack.protobuf.UnmodifiableLazyStringList) -> access$000
    78:78:void add(com.android.networkstack.protobuf.ByteString) -> add
    47:47:java.lang.Object get(int) -> get
    58:58:java.lang.String get(int) -> get
    63:63:java.lang.Object getRaw(int) -> getRaw
    188:188:java.util.List getUnderlyingElements() -> getUnderlyingElements
    165:165:java.util.Iterator iterator() -> iterator
    113:113:java.util.ListIterator listIterator(int) -> listIterator
    68:68:int size() -> size
com.android.networkstack.protobuf.UnmodifiableLazyStringList$1 -> com.android.networkstack.protobuf.UnmodifiableLazyStringList$1:
    113:114:void <init>(com.android.networkstack.protobuf.UnmodifiableLazyStringList,int) -> <init>
    113:113:void add(java.lang.Object) -> add
    158:158:void add(java.lang.String) -> add
    118:118:boolean hasNext() -> hasNext
    128:128:boolean hasPrevious() -> hasPrevious
    113:113:java.lang.Object next() -> next
    123:123:java.lang.String next() -> next
    138:138:int nextIndex() -> nextIndex
    113:113:java.lang.Object previous() -> previous
    133:133:java.lang.String previous() -> previous
    143:143:int previousIndex() -> previousIndex
    148:148:void remove() -> remove
    113:113:void set(java.lang.Object) -> set
    153:153:void set(java.lang.String) -> set
com.android.networkstack.protobuf.UnmodifiableLazyStringList$2 -> com.android.networkstack.protobuf.UnmodifiableLazyStringList$2:
    165:166:void <init>(com.android.networkstack.protobuf.UnmodifiableLazyStringList) -> <init>
    170:170:boolean hasNext() -> hasNext
    165:165:java.lang.Object next() -> next
    175:175:java.lang.String next() -> next
    180:180:void remove() -> remove
com.android.networkstack.protobuf.UnsafeUtil -> com.android.networkstack.protobuf.UnsafeUtil:
    44:80:void <clinit>() -> <clinit>
    82:82:void <init>() -> <init>
    96:98:java.lang.Object allocateInstance(java.lang.Class) -> allocateInstance
    107:107:int arrayBaseOffset(java.lang.Class) -> arrayBaseOffset
    111:111:int arrayIndexScale(java.lang.Class) -> arrayIndexScale
    388:389:java.lang.reflect.Field bufferAddressField() -> bufferAddressField
    480:480:java.lang.reflect.Field field(java.lang.Class,java.lang.String) -> field
    471:471:long fieldOffset(java.lang.reflect.Field) -> fieldOffset
    139:139:boolean getBoolean(java.lang.Object,long) -> getBoolean
    171:171:byte getByte(byte[],long) -> getByte
    155:155:double getDouble(java.lang.Object,long) -> getDouble
    147:147:float getFloat(java.lang.Object,long) -> getFloat
    123:123:int getInt(java.lang.Object,long) -> getInt
    131:131:long getLong(java.lang.Object,long) -> getLong
    314:317:com.android.networkstack.protobuf.UnsafeUtil$MemoryAccessor getMemoryAccessor() -> getMemoryAccessor
    163:163:java.lang.Object getObject(java.lang.Object,long) -> getObject
    287:288:sun.misc.Unsafe getUnsafe() -> getUnsafe
    85:85:boolean hasUnsafeArrayOperations() -> hasUnsafeArrayOperations
    89:89:boolean hasUnsafeByteBufferOperations() -> hasUnsafeByteBufferOperations
    143:143:void putBoolean(java.lang.Object,long,boolean) -> putBoolean
    175:175:void putByte(byte[],long,byte) -> putByte
    159:159:void putDouble(java.lang.Object,long,double) -> putDouble
    151:151:void putFloat(java.lang.Object,long,float) -> putFloat
    127:127:void putInt(java.lang.Object,long,int) -> putInt
    135:135:void putLong(java.lang.Object,long,long) -> putLong
    167:167:void putObject(java.lang.Object,long,java.lang.Object) -> putObject
    322:347:boolean supportsUnsafeArrayOperations() -> supportsUnsafeArrayOperations
    355:378:boolean supportsUnsafeByteBufferOperations() -> supportsUnsafeByteBufferOperations
com.android.networkstack.protobuf.UnsafeUtil$1 -> com.android.networkstack.protobuf.UnsafeUtil$1:
    289:289:void <init>() -> <init>
    289:289:java.lang.Object run() -> run
    292:298:sun.misc.Unsafe run() -> run
com.android.networkstack.protobuf.UnsafeUtil$JvmMemoryAccessor -> com.android.networkstack.protobuf.UnsafeUtil$JvmMemoryAccessor:
    570:570:void <init>(sun.misc.Unsafe) -> <init>
    615:615:boolean getBoolean(java.lang.Object,long) -> getBoolean
    605:605:byte getByte(java.lang.Object,long) -> getByte
    635:635:double getDouble(java.lang.Object,long) -> getDouble
    625:625:float getFloat(java.lang.Object,long) -> getFloat
    620:620:void putBoolean(java.lang.Object,long,boolean) -> putBoolean
    610:610:void putByte(java.lang.Object,long,byte) -> putByte
    640:640:void putDouble(java.lang.Object,long,double) -> putDouble
    630:630:void putFloat(java.lang.Object,long,float) -> putFloat
com.android.networkstack.protobuf.UnsafeUtil$MemoryAccessor -> com.android.networkstack.protobuf.UnsafeUtil$MemoryAccessor:
    492:493:void <init>(sun.misc.Unsafe) -> <init>
    541:541:int arrayBaseOffset(java.lang.Class) -> arrayBaseOffset
    545:545:int arrayIndexScale(java.lang.Class) -> arrayIndexScale
    505:505:int getInt(java.lang.Object,long) -> getInt
    513:513:long getLong(java.lang.Object,long) -> getLong
    533:533:java.lang.Object getObject(java.lang.Object,long) -> getObject
    497:497:long objectFieldOffset(java.lang.reflect.Field) -> objectFieldOffset
    509:509:void putInt(java.lang.Object,long,int) -> putInt
    517:517:void putLong(java.lang.Object,long,long) -> putLong
    537:537:void putObject(java.lang.Object,long,java.lang.Object) -> putObject
com.android.networkstack.protobuf.Utf8 -> com.android.networkstack.protobuf.Utf8:
    84:86:void <clinit>() -> <clinit>
    76:76:int access$000(int,int) -> access$000
    76:76:int access$100(int,int,int) -> access$100
    76:76:int access$1100(byte[],int,int) -> access$1100
    76:76:int access$1200(int) -> access$1200
    340:340:java.lang.String decodeUtf8(byte[],int,int) -> decodeUtf8
    293:293:int encode(java.lang.CharSequence,byte[],int,int) -> encode
    241:263:int encodedLength(java.lang.CharSequence) -> encodedLength
    270:283:int encodedLengthGeneral(java.lang.CharSequence,int) -> encodedLengthGeneral
    194:203:int incompleteStateFor(byte[],int,int) -> incompleteStateFor
    147:147:boolean isValidUtf8(byte[]) -> isValidUtf8
    159:159:boolean isValidUtf8(byte[],int,int) -> isValidUtf8
com.android.networkstack.protobuf.Utf8$DecodeUtil -> com.android.networkstack.protobuf.Utf8$DecodeUtil:
    1883:1883:void access$1000(byte,byte,byte,byte,char[],int) -> access$1000
    1883:1883:boolean access$400(byte) -> access$400
    1883:1883:void access$500(byte,char[],int) -> access$500
    1883:1883:boolean access$600(byte) -> access$600
    1883:1883:void access$700(byte,byte,char[],int) -> access$700
    1883:1883:boolean access$800(byte) -> access$800
    1883:1883:void access$900(byte,byte,byte,char[],int) -> access$900
    1933:1952:void handleFourBytes(byte,byte,byte,byte,char[],int) -> handleFourBytes
    1901:1901:void handleOneByte(byte,char[],int) -> handleOneByte
    1917:1927:void handleThreeBytes(byte,byte,byte,char[],int) -> handleThreeBytes
    1908:1911:void handleTwoBytes(byte,byte,char[],int) -> handleTwoBytes
com.android.networkstack.protobuf.Utf8$Processor -> com.android.networkstack.protobuf.Utf8$Processor:
    380:380:void <init>() -> <init>
    390:390:boolean isValidUtf8(byte[],int,int) -> isValidUtf8
com.android.networkstack.protobuf.Utf8$SafeProcessor -> com.android.networkstack.protobuf.Utf8$SafeProcessor:
    860:860:void <init>() -> <init>
    958:1027:java.lang.String decodeUtf8(byte[],int,int) -> decodeUtf8
    1039:1083:int encodeUtf8(java.lang.CharSequence,byte[],int,int) -> encodeUtf8
    881:946:int partialIsValidUtf8(int,byte[],int,int) -> partialIsValidUtf8
    1098:1102:int partialIsValidUtf8(byte[],int,int) -> partialIsValidUtf8
    1115:1151:int partialIsValidUtf8NonAscii(byte[],int,int) -> partialIsValidUtf8NonAscii
com.android.networkstack.protobuf.Utf8$UnpairedSurrogateException -> com.android.networkstack.protobuf.Utf8$UnpairedSurrogateException:
    227:227:void <init>(int,int) -> <init>
com.android.networkstack.protobuf.Utf8$UnsafeProcessor -> com.android.networkstack.protobuf.Utf8$UnsafeProcessor:
    1169:1169:void <init>() -> <init>
    1369:1439:java.lang.String decodeUtf8(byte[],int,int) -> decodeUtf8
    1522:1571:int encodeUtf8(java.lang.CharSequence,byte[],int,int) -> encodeUtf8
    1172:1172:boolean isAvailable() -> isAvailable
    1178:1267:int partialIsValidUtf8(int,byte[],int,int) -> partialIsValidUtf8
    1700:1765:int partialIsValidUtf8(byte[],long,int) -> partialIsValidUtf8
    1660:1660:int unsafeEstimateConsecutiveAscii(byte[],long,int) -> unsafeEstimateConsecutiveAscii
    1852:1859:int unsafeIncompleteStateFor(byte[],int,long,int) -> unsafeIncompleteStateFor
com.android.networkstack.protobuf.WireFormat -> com.android.networkstack.protobuf.WireFormat:
    178:182:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.WireFormat$FieldType -> com.android.networkstack.protobuf.WireFormat$FieldType:
    111:149:void <clinit>() -> <clinit>
    111:111:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int,com.android.networkstack.protobuf.WireFormat$1) -> <init>
    151:153:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int) -> <init>
    160:160:com.android.networkstack.protobuf.WireFormat$JavaType getJavaType() -> getJavaType
    111:111:com.android.networkstack.protobuf.WireFormat$FieldType valueOf(java.lang.String) -> valueOf
    111:111:com.android.networkstack.protobuf.WireFormat$FieldType[] values() -> values
com.android.networkstack.protobuf.WireFormat$FieldType$1 -> com.android.networkstack.protobuf.WireFormat$FieldType$1:
    120:120:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int) -> <init>
com.android.networkstack.protobuf.WireFormat$FieldType$2 -> com.android.networkstack.protobuf.WireFormat$FieldType$2:
    126:126:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int) -> <init>
com.android.networkstack.protobuf.WireFormat$FieldType$3 -> com.android.networkstack.protobuf.WireFormat$FieldType$3:
    132:132:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int) -> <init>
com.android.networkstack.protobuf.WireFormat$FieldType$4 -> com.android.networkstack.protobuf.WireFormat$FieldType$4:
    138:138:void <init>(java.lang.String,int,com.android.networkstack.protobuf.WireFormat$JavaType,int) -> <init>
com.android.networkstack.protobuf.WireFormat$JavaType -> com.android.networkstack.protobuf.WireFormat$JavaType:
    84:93:void <clinit>() -> <clinit>
    95:96:void <init>(java.lang.String,int,java.lang.Object) -> <init>
    84:84:com.android.networkstack.protobuf.WireFormat$JavaType valueOf(java.lang.String) -> valueOf
    84:84:com.android.networkstack.protobuf.WireFormat$JavaType[] values() -> values
com.android.networkstack.protobuf.Writer$FieldOrder -> com.android.networkstack.protobuf.Writer$FieldOrder:
    42:47:void <clinit>() -> <clinit>
    42:42:void <init>(java.lang.String,int) -> <init>
    42:42:com.android.networkstack.protobuf.Writer$FieldOrder valueOf(java.lang.String) -> valueOf
    42:42:com.android.networkstack.protobuf.Writer$FieldOrder[] values() -> values
com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano -> com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano:
    60:60:void <init>(byte[],int,int) -> <init>
    63:65:void <init>(java.nio.ByteBuffer) -> <init>
    906:907:void checkNoSpaceLeft() -> checkNoSpaceLeft
    621:621:int computeBoolSize(int,boolean) -> computeBoolSize
    594:594:int computeInt32Size(int,int) -> computeInt32Size
    775:775:int computeInt32SizeNoTag(int) -> computeInt32SizeNoTag
    766:766:int computeInt64SizeNoTag(long) -> computeInt64SizeNoTag
    630:630:int computeStringSize(int,java.lang.String) -> computeStringSize
    811:812:int computeStringSizeNoTag(java.lang.String) -> computeStringSizeNoTag
    982:982:int computeTagSize(int) -> computeTagSize
    408:423:void encode(java.lang.CharSequence,java.nio.ByteBuffer) -> encode
    457:495:int encode(java.lang.CharSequence,byte[],int,int) -> encode
    428:451:void encodeDirect(java.lang.CharSequence,java.nio.ByteBuffer) -> encodeDirect
    340:362:int encodedLength(java.lang.CharSequence) -> encodedLength
    369:382:int encodedLengthGeneral(java.lang.CharSequence,int) -> encodedLengthGeneral
    87:87:com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano newInstance(byte[],int,int) -> newInstance
    895:895:int spaceLeft() -> spaceLeft
    144:145:void writeBool(int,boolean) -> writeBool
    292:292:void writeBoolNoTag(boolean) -> writeBoolNoTag
    123:124:void writeInt32(int,int) -> writeInt32
    273:276:void writeInt32NoTag(int) -> writeInt32NoTag
    116:117:void writeInt64(int,long) -> writeInt64
    267:267:void writeInt64NoTag(long) -> writeInt64NoTag
    945:950:void writeRawByte(byte) -> writeRawByte
    955:955:void writeRawByte(int) -> writeRawByte
    992:995:void writeRawVarint32(int) -> writeRawVarint32
    1018:1021:void writeRawVarint64(long) -> writeRawVarint64
    151:152:void writeString(int,java.lang.String) -> writeString
    301:325:void writeStringNoTag(java.lang.String) -> writeStringNoTag
    977:977:void writeTag(int,int) -> writeTag
com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano$OutOfSpaceException -> com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano$OutOfSpaceException:
    938:938:void <init>(int,int) -> <init>
com.android.networkstack.protobuf.nano.ExtendableMessageNano -> com.android.networkstack.protobuf.nano.ExtendableMessageNano:
    39:39:void <init>() -> <init>
    39:39:com.android.networkstack.protobuf.nano.MessageNano clone() -> clone
    39:39:java.lang.Object clone() -> clone
    165:166:com.android.networkstack.protobuf.nano.ExtendableMessageNano clone() -> clone
com.android.networkstack.protobuf.nano.InternalNano -> com.android.networkstack.protobuf.nano.InternalNano:
    70:85:void <clinit>() -> <clinit>
    543:543:void cloneUnknownFieldData(com.android.networkstack.protobuf.nano.ExtendableMessageNano,com.android.networkstack.protobuf.nano.ExtendableMessageNano) -> cloneUnknownFieldData
com.android.networkstack.protobuf.nano.MessageNano -> com.android.networkstack.protobuf.nano.MessageNano:
    41:42:void <init>() -> <init>
    41:41:java.lang.Object clone() -> clone
    196:196:com.android.networkstack.protobuf.nano.MessageNano clone() -> clone
    65:66:int getSerializedSize() -> getSerializedSize
    100:101:byte[] toByteArray(com.android.networkstack.protobuf.nano.MessageNano) -> toByteArray
    116:120:void toByteArray(com.android.networkstack.protobuf.nano.MessageNano,byte[],int,int) -> toByteArray
    188:188:java.lang.String toString() -> toString
com.android.networkstack.protobuf.nano.MessageNanoPrinter -> com.android.networkstack.protobuf.nano.MessageNanoPrinter:
    258:273:void appendQuotedBytes(byte[],java.lang.StringBuffer) -> appendQuotedBytes
    211:222:java.lang.String deCamelCaseify(java.lang.String) -> deCamelCaseify
    240:250:java.lang.String escapeString(java.lang.String) -> escapeString
    66:74:java.lang.String print(com.android.networkstack.protobuf.nano.MessageNano) -> print
    97:203:void print(java.lang.String,java.lang.Object,java.lang.StringBuffer,java.lang.StringBuffer) -> print
    229:233:java.lang.String sanitizeString(java.lang.String) -> sanitizeString
com.android.networkstack.protobuf.nano.WireFormatNano -> com.android.networkstack.protobuf.nano.WireFormatNano:
    75:82:void <clinit>() -> <clinit>
com.android.networkstack.protobuf.nano.android.ParcelableExtendableMessageNano -> com.android.networkstack.protobuf.nano.android.ParcelableExtendableMessageNano:
    42:42:void <init>() -> <init>
    52:52:void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.android.networkstack.protobuf.nano.android.ParcelableMessageNano -> com.android.networkstack.protobuf.nano.android.ParcelableMessageNano:
    41:41:void <init>() -> <init>
    50:50:void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.android.networkstack.protobuf.nano.android.ParcelableMessageNanoCreator -> com.android.networkstack.protobuf.nano.android.ParcelableMessageNanoCreator:
    94:95:void writeToParcel(java.lang.Class,com.android.networkstack.protobuf.nano.MessageNano,android.os.Parcel) -> writeToParcel
com.android.networkstack.util.CollectionUtils -> com.android.networkstack.util.CollectionUtils:
    115:116:boolean any(android.util.SparseArray,java.util.function.Predicate) -> any
    39:39:boolean isEmpty(java.lang.Object[]) -> isEmpty
    54:57:int[] toIntArray(java.util.Collection) -> toIntArray
    68:71:long[] toLongArray(java.util.Collection) -> toLongArray
com.android.networkstack.util.ConnectivityUtils -> com.android.networkstack.util.ConnectivityUtils:
    37:39:java.lang.String addressAndPortToString(java.net.InetAddress,int) -> addressAndPortToString
    46:47:boolean isIPv6ULA(java.net.InetAddress) -> isIPv6ULA
com.android.networkstack.util.DeviceConfigUtils -> com.android.networkstack.util.DeviceConfigUtils:
    69:69:java.lang.String getDeviceConfigProperty(java.lang.String,java.lang.String,java.lang.String) -> getDeviceConfigProperty
    82:84:int getDeviceConfigPropertyInt(java.lang.String,java.lang.String,int) -> getDeviceConfigPropertyInt
    106:106:int getDeviceConfigPropertyInt(java.lang.String,java.lang.String,int,int,int) -> getDeviceConfigPropertyInt
    50:55:long getPackageVersion(android.content.Context) -> getPackageVersion
    249:251:boolean getResBooleanConfig(android.content.Context,int,boolean) -> getResBooleanConfig
    139:139:boolean isFeatureEnabled(android.content.Context,java.lang.String,java.lang.String) -> isFeatureEnabled
    160:163:boolean isFeatureEnabled(android.content.Context,java.lang.String,java.lang.String,boolean) -> isFeatureEnabled
    206:206:boolean isFeatureEnabled(android.content.Context,long,java.lang.String,java.lang.String,boolean) -> isFeatureEnabled
    41:42:void resetPackageVersionCacheForTest() -> resetPackageVersionCacheForTest
com.android.networkstack.util.DnsSdTxtRecord -> com.android.networkstack.util.DnsSdTxtRecord:
    313:313:void <clinit>() -> <clinit>
    48:49:void <init>() -> <init>
    42:42:byte[] access$000(com.android.networkstack.util.DnsSdTxtRecord) -> access$000
    289:294:boolean equals(java.lang.Object) -> equals
    197:208:java.lang.String getKey(int) -> getKey
    222:233:byte[] getValue(int) -> getValue
    242:243:java.lang.String getValueAsString(int) -> getValueAsString
    299:299:int hashCode() -> hashCode
    269:279:java.lang.String toString() -> toString
    309:309:void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.android.networkstack.util.DnsSdTxtRecord$1 -> com.android.networkstack.util.DnsSdTxtRecord$1:
    314:314:void <init>() -> <init>
    314:314:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    316:317:com.android.networkstack.util.DnsSdTxtRecord createFromParcel(android.os.Parcel) -> createFromParcel
    314:314:java.lang.Object[] newArray(int) -> newArray
    322:322:com.android.networkstack.util.DnsSdTxtRecord[] newArray(int) -> newArray
com.android.networkstack.util.DnsUtils -> com.android.networkstack.util.DnsUtils:
    54:55:void <clinit>() -> <clinit>
    48:48:void <init>() -> <init>
    48:48:boolean access$000() -> access$000
    48:48:java.lang.String access$100() -> access$100
    65:90:java.net.InetAddress[] getAllByName(android.net.DnsResolver,android.net.Network,java.lang.String,int,com.android.server.connectivity.NetworkMonitor$DnsLogFunc) -> getAllByName
    101:155:java.net.InetAddress[] getAllByName(android.net.DnsResolver,android.net.Network,java.lang.String,int,int,int,com.android.server.connectivity.NetworkMonitor$DnsLogFunc) -> getAllByName
    132:132:void lambda$getAllByName$0(java.lang.Runnable) -> lambda$getAllByName$0
    135:135:void lambda$getAllByName$1(java.lang.Runnable) -> lambda$getAllByName$1
    165:172:void logDnsResult(java.util.List,long,com.android.server.connectivity.NetworkMonitor$DnsLogFunc,int,java.lang.String) -> logDnsResult
com.android.networkstack.util.DnsUtils$$ExternalSyntheticLambda0 -> com.android.networkstack.util.DnsUtils$$ExternalSyntheticLambda0:
    com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$1 com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$1.INSTANCE -> INSTANCE
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$1.<clinit>() -> <clinit>
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$1.<init>() -> <init>
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$1.execute(java.lang.Runnable) -> execute
com.android.networkstack.util.DnsUtils$$ExternalSyntheticLambda1 -> com.android.networkstack.util.DnsUtils$$ExternalSyntheticLambda1:
    com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$0 com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$0.INSTANCE -> INSTANCE
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$0.<clinit>() -> <clinit>
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$0.<init>() -> <init>
    void com.android.networkstack.util.DnsUtils$$InternalSyntheticLambda$1$d15ad27dd725f36c9e4c75152a0b3e15cf9f1235b275c3106bab84fea6664960$0.execute(java.lang.Runnable) -> execute
com.android.networkstack.util.DnsUtils$1 -> com.android.networkstack.util.DnsUtils$1:
    106:106:void <init>(java.util.concurrent.CompletableFuture,java.lang.String) -> <init>
    106:106:void onAnswer(java.lang.Object,int) -> onAnswer
    109:112:void onAnswer(java.util.List,int) -> onAnswer
    118:121:void onError(android.net.DnsResolver$DnsException) -> onError
com.android.networkstack.util.FdEventsReader -> com.android.networkstack.util.FdEventsReader:
    92:95:void <init>(android.os.Handler,java.lang.Object) -> <init>
    87:87:void closeFd(java.io.FileDescriptor) -> closeFd
    185:210:boolean createAndRegisterFd() -> createAndRegisterFd
    124:124:android.os.Handler getHandler() -> getHandler
    101:101:android.os.MessageQueue getMessageQueue() -> getMessageQueue
    220:249:boolean handleInput() -> handleInput
    215:215:boolean isRunning() -> isRunning
    204:205:int lambda$createAndRegisterFd$0(java.io.FileDescriptor,int) -> lambda$createAndRegisterFd$0
    266:266:boolean onCorrectThread() -> onCorrectThread
    106:110:boolean start() -> start
    115:119:void stop() -> stop
    257:262:void unregisterAndDestroyFd() -> unregisterAndDestroyFd
com.android.networkstack.util.FdEventsReader$$ExternalSyntheticLambda0 -> com.android.networkstack.util.FdEventsReader$$ExternalSyntheticLambda0:
    com.android.networkstack.util.FdEventsReader com.android.networkstack.util.FdEventsReader$$InternalSyntheticLambda$0$a2f1229ca75ca6dbd854a490136de88327088cfa5c99c8d0361b99b77ff39fb7$0.f$0 -> f$0
    void com.android.networkstack.util.FdEventsReader$$InternalSyntheticLambda$0$a2f1229ca75ca6dbd854a490136de88327088cfa5c99c8d0361b99b77ff39fb7$0.<init>(com.android.networkstack.util.FdEventsReader) -> <init>
    int com.android.networkstack.util.FdEventsReader$$InternalSyntheticLambda$0$a2f1229ca75ca6dbd854a490136de88327088cfa5c99c8d0361b99b77ff39fb7$0.onFileDescriptorEvents(java.io.FileDescriptor,int) -> onFileDescriptorEvents
com.android.networkstack.util.HexDump -> com.android.networkstack.util.HexDump:
    25:27:void <clinit>() -> <clinit>
    116:116:java.lang.String toHexString(byte[]) -> toHexString
    149:159:java.lang.String toHexString(byte[],int,int,boolean) -> toHexString
com.android.networkstack.util.Inet4AddressUtils -> com.android.networkstack.util.Inet4AddressUtils:
    152:154:java.net.Inet4Address getBroadcastAddress(java.net.Inet4Address,int) -> getBroadcastAddress
    133:133:int getImplicitNetmask(java.net.Inet4Address) -> getImplicitNetmask
    164:164:java.net.Inet4Address getPrefixMaskAsInet4Address(int) -> getPrefixMaskAsInet4Address
    69:70:int inet4AddressToIntHTH(java.net.Inet4Address) -> inet4AddressToIntHTH
    52:54:java.net.Inet4Address intToInet4AddressHTH(int) -> intToInet4AddressHTH
    120:124:int netmaskToPrefixLength(java.net.Inet4Address) -> netmaskToPrefixLength
    93:93:int prefixLengthToV4NetmaskIntHTH(int) -> prefixLengthToV4NetmaskIntHTH
com.android.networkstack.util.InetAddressUtils -> com.android.networkstack.util.InetAddressUtils:
    39:45:void parcelInetAddress(android.os.Parcel,java.net.InetAddress,int) -> parcelInetAddress
    56:68:java.net.InetAddress unparcelInetAddress(android.os.Parcel) -> unparcelInetAddress
com.android.networkstack.util.IpUtils -> com.android.networkstack.util.IpUtils:
    47:78:int checksum(java.nio.ByteBuffer,int,int,int) -> checksum
    152:152:short icmpv6Checksum(java.nio.ByteBuffer,int,int,int) -> icmpv6Checksum
    101:101:byte ipversion(java.nio.ByteBuffer,int) -> ipversion
    84:87:int pseudoChecksumIPv4(java.nio.ByteBuffer,int,int,int) -> pseudoChecksumIPv4
    95:95:int pseudoChecksumIPv6(java.nio.ByteBuffer,int,int,int) -> pseudoChecksumIPv6
    112:125:short transportChecksum(java.nio.ByteBuffer,int,int,int,int) -> transportChecksum
com.android.networkstack.util.Ipv6Utils -> com.android.networkstack.util.Ipv6Utils:
    53:82:java.nio.ByteBuffer buildIcmpv6Packet(android.net.MacAddress,android.net.MacAddress,java.net.Inet6Address,java.net.Inet6Address,short,short,java.nio.ByteBuffer[]) -> buildIcmpv6Packet
    94:96:java.nio.ByteBuffer[] buildIcmpv6Payload(java.nio.ByteBuffer,java.nio.ByteBuffer[]) -> buildIcmpv6Payload
    121:124:java.nio.ByteBuffer buildNaPacket(android.net.MacAddress,android.net.MacAddress,java.net.Inet6Address,java.net.Inet6Address,int,java.net.Inet6Address,java.nio.ByteBuffer[]) -> buildNaPacket
com.android.networkstack.util.NetworkStackConstants -> com.android.networkstack.util.NetworkStackConstants:
    52:125:void <clinit>() -> <clinit>
    220:222:java.net.Inet4Address makeInet4Address(byte,byte,byte,byte) -> makeInet4Address
    231:233:java.net.Inet6Address makeInet6Address(byte[]) -> makeInet6Address
com.android.networkstack.util.PacketReader -> com.android.networkstack.util.PacketReader:
    37:37:void <init>(android.os.Handler) -> <init>
    41:41:void <init>(android.os.Handler,int) -> <init>
    32:32:int readPacket(java.io.FileDescriptor,java.lang.Object) -> readPacket
    57:57:int readPacket(java.io.FileDescriptor,byte[]) -> readPacket
com.android.networkstack.util.Struct -> com.android.networkstack.util.Struct:
    159:159:void <clinit>() -> <clinit>
    105:105:void <init>() -> <init>
    264:265:boolean allFieldsFinal(com.android.networkstack.util.Struct$FieldInfo[],boolean) -> allFieldsFinal
    333:340:byte[] bigIntegerToU64Bytes(java.math.BigInteger,java.nio.ByteOrder,com.android.networkstack.util.Struct$Type) -> bigIntegerToU64Bytes
    162:206:void checkAnnotationType(com.android.networkstack.util.Struct$Field,java.lang.Class) -> checkAnnotationType
    614:617:void checkByteArraySize(byte[],com.android.networkstack.util.Struct$FieldInfo) -> checkByteArraySize
    671:687:boolean equals(java.lang.Object) -> equals
    257:258:int getAnnotationFieldCount(java.lang.Class) -> getAnnotationFieldCount
    518:551:com.android.networkstack.util.Struct$FieldInfo[] getClassFieldInfo(java.lang.Class) -> getClassFieldInfo
    211:248:int getFieldLength(com.android.networkstack.util.Struct$Field) -> getFieldLength
    349:427:java.lang.Object getFieldValue(java.nio.ByteBuffer,com.android.networkstack.util.Struct$FieldInfo) -> getFieldValue
    435:437:java.lang.Object getFieldValue(java.lang.reflect.Field) -> getFieldValue
    310:315:byte[] getLast8Bytes(byte[]) -> getLast8Bytes
    636:637:int getSize(java.lang.Class) -> getSize
    603:604:int getSizeInternal(com.android.networkstack.util.Struct$FieldInfo[]) -> getSizeInternal
    271:272:boolean hasBothMutableAndImmutableFields(com.android.networkstack.util.Struct$FieldInfo[]) -> hasBothMutableAndImmutableFields
    695:708:int hashCode() -> hashCode
    252:252:boolean isStructSubclass(java.lang.Class) -> isStructSubclass
    276:279:boolean matchConstructor(java.lang.reflect.Constructor,com.android.networkstack.util.Struct$FieldInfo[]) -> matchConstructor
    565:597:java.lang.Object parse(java.lang.Class,java.nio.ByteBuffer) -> parse
    443:514:void putFieldValue(java.nio.ByteBuffer,com.android.networkstack.util.Struct$FieldInfo,java.lang.Object) -> putFieldValue
    297:301:java.math.BigInteger readBigInteger(java.nio.ByteBuffer,com.android.networkstack.util.Struct$Type) -> readBigInteger
    713:730:java.lang.String toString() -> toString
    646:647:void writeToByteBuffer(java.nio.ByteBuffer) -> writeToByteBuffer
    622:627:void writeToByteBufferInternal(java.nio.ByteBuffer,com.android.networkstack.util.Struct$FieldInfo[]) -> writeToByteBufferInternal
    656:660:byte[] writeToBytes(java.nio.ByteOrder) -> writeToBytes
    666:666:byte[] writeToBytes() -> writeToBytes
com.android.networkstack.util.Struct$1 -> com.android.networkstack.util.Struct$1:
    162:162:void <clinit>() -> <clinit>
com.android.networkstack.util.Struct$FieldInfo -> com.android.networkstack.util.Struct$FieldInfo:
    154:156:void <init>(com.android.networkstack.util.Struct$Field,java.lang.reflect.Field) -> <init>
com.android.networkstack.util.Struct$Type -> com.android.networkstack.util.Struct$Type:
    106:123:void <clinit>() -> <clinit>
    106:106:void <init>(java.lang.String,int) -> <init>
    106:106:com.android.networkstack.util.Struct$Type valueOf(java.lang.String) -> valueOf
    106:106:com.android.networkstack.util.Struct$Type[] values() -> values
com.android.networkstack.util.structs.EthernetHeader -> com.android.networkstack.util.structs.EthernetHeader:
    55:58:void <init>(android.net.MacAddress,android.net.MacAddress,int) -> <init>
com.android.networkstack.util.structs.Icmpv6Header -> com.android.networkstack.util.structs.Icmpv6Header:
    40:43:void <init>(short,short,short) -> <init>
com.android.networkstack.util.structs.Ipv6Header -> com.android.networkstack.util.structs.Ipv6Header:
    67:73:void <init>(int,int,byte,short,java.net.Inet6Address,java.net.Inet6Address) -> <init>
com.android.networkstack.util.structs.LlaOption -> com.android.networkstack.util.structs.LlaOption:
    48:51:void <init>(byte,byte,android.net.MacAddress) -> <init>
    58:59:java.nio.ByteBuffer build(byte,android.net.MacAddress) -> build
com.android.networkstack.util.structs.NaHeader -> com.android.networkstack.util.structs.NaHeader:
    53:55:void <init>(int,java.net.Inet6Address) -> <init>
com.android.server.NetworkObserverRegistry -> com.android.server.NetworkObserverRegistry:
    43:43:void <clinit>() -> <clinit>
    42:56:void <init>() -> <init>
    96:107:void invokeForAllObservers(com.android.server.NetworkObserverRegistry$NetworkObserverEventCallback) -> invokeForAllObservers
    100:100:void lambda$invokeForAllObservers$0(com.android.server.NetworkObserverRegistry$NetworkObserverEventCallback,com.android.server.NetworkObserver) -> lambda$invokeForAllObservers$0
    147:147:void lambda$onInterfaceAdded$6(java.lang.String,com.android.server.NetworkObserver) -> lambda$onInterfaceAdded$6
    142:142:void lambda$onInterfaceAddressRemoved$5(android.net.LinkAddress,java.lang.String,com.android.server.NetworkObserver) -> lambda$onInterfaceAddressRemoved$5
    135:135:void lambda$onInterfaceAddressUpdated$4(android.net.LinkAddress,java.lang.String,com.android.server.NetworkObserver) -> lambda$onInterfaceAddressUpdated$4
    157:157:void lambda$onInterfaceChanged$8(java.lang.String,boolean,com.android.server.NetworkObserver) -> lambda$onInterfaceChanged$8
    115:115:void lambda$onInterfaceClassActivityChanged$1(boolean,int,long,int,com.android.server.NetworkObserver) -> lambda$onInterfaceClassActivityChanged$1
    129:129:void lambda$onInterfaceDnsServerInfo$3(java.lang.String,long,java.lang.String[],com.android.server.NetworkObserver) -> lambda$onInterfaceDnsServerInfo$3
    162:162:void lambda$onInterfaceLinkStateChanged$9(java.lang.String,boolean,com.android.server.NetworkObserver) -> lambda$onInterfaceLinkStateChanged$9
    152:152:void lambda$onInterfaceRemoved$7(java.lang.String,com.android.server.NetworkObserver) -> lambda$onInterfaceRemoved$7
    124:124:void lambda$onQuotaLimitReached$2(java.lang.String,java.lang.String,com.android.server.NetworkObserver) -> lambda$onQuotaLimitReached$2
    171:171:void lambda$onRouteChanged$10(android.net.RouteInfo,com.android.server.NetworkObserver) -> lambda$onRouteChanged$10
    173:173:void lambda$onRouteChanged$11(android.net.RouteInfo,com.android.server.NetworkObserver) -> lambda$onRouteChanged$11
    147:147:void onInterfaceAdded(java.lang.String) -> onInterfaceAdded
    141:142:void onInterfaceAddressRemoved(java.lang.String,java.lang.String,int,int) -> onInterfaceAddressRemoved
    134:135:void onInterfaceAddressUpdated(java.lang.String,java.lang.String,int,int) -> onInterfaceAddressUpdated
    157:157:void onInterfaceChanged(java.lang.String,boolean) -> onInterfaceChanged
    115:115:void onInterfaceClassActivityChanged(boolean,int,long,int) -> onInterfaceClassActivityChanged
    129:129:void onInterfaceDnsServerInfo(java.lang.String,long,java.lang.String[]) -> onInterfaceDnsServerInfo
    162:162:void onInterfaceLinkStateChanged(java.lang.String,boolean) -> onInterfaceLinkStateChanged
    152:152:void onInterfaceRemoved(java.lang.String) -> onInterfaceRemoved
    124:124:void onQuotaLimitReached(java.lang.String,java.lang.String) -> onQuotaLimitReached
    167:173:void onRouteChanged(boolean,java.lang.String,java.lang.String,java.lang.String) -> onRouteChanged
    53:53:void register(android.net.INetd) -> register
    77:77:void registerObserverForNonblockingCallback(com.android.server.NetworkObserver) -> registerObserverForNonblockingCallback
    85:85:void unregisterObserver(com.android.server.NetworkObserver) -> unregisterObserver
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda0 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda0:
    android.net.LinkAddress com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$79f7bc9a5fff952797c5107da0333cada285e72fd4e4f9f8e1c826fd70b96abd$0.f$0 -> f$0
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$79f7bc9a5fff952797c5107da0333cada285e72fd4e4f9f8e1c826fd70b96abd$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$79f7bc9a5fff952797c5107da0333cada285e72fd4e4f9f8e1c826fd70b96abd$0.<init>(android.net.LinkAddress,java.lang.String) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$79f7bc9a5fff952797c5107da0333cada285e72fd4e4f9f8e1c826fd70b96abd$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda1 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda1:
    android.net.LinkAddress com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$1395b9f576ac981a4a0a6b5e573dcdd544771c8f74be69e74004d6ea99817fb8$0.f$0 -> f$0
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$1395b9f576ac981a4a0a6b5e573dcdd544771c8f74be69e74004d6ea99817fb8$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$1395b9f576ac981a4a0a6b5e573dcdd544771c8f74be69e74004d6ea99817fb8$0.<init>(android.net.LinkAddress,java.lang.String) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$1395b9f576ac981a4a0a6b5e573dcdd544771c8f74be69e74004d6ea99817fb8$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda10 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda10:
    long com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.f$2 -> f$2
    int com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.f$3 -> f$3
    boolean com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.f$0 -> f$0
    int com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.<init>(boolean,int,long,int) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7064035032c01788b2775f53bc14ca509b98ad120a0cc4f24294c82f68b25e6b$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda11 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda11:
    com.android.server.NetworkObserverRegistry$NetworkObserverEventCallback com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$1$38e59723926116cccd68e01d90f9691500c7b438ed6877f8251aa8bf87396859$0.f$0 -> f$0
    com.android.server.NetworkObserver com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$1$38e59723926116cccd68e01d90f9691500c7b438ed6877f8251aa8bf87396859$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$1$38e59723926116cccd68e01d90f9691500c7b438ed6877f8251aa8bf87396859$0.<init>(com.android.server.NetworkObserverRegistry$NetworkObserverEventCallback,com.android.server.NetworkObserver) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$1$38e59723926116cccd68e01d90f9691500c7b438ed6877f8251aa8bf87396859$0.run() -> run
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda2 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda2:
    android.net.RouteInfo com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$0.f$0 -> f$0
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$0.<init>(android.net.RouteInfo) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda3 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda3:
    android.net.RouteInfo com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$1.f$0 -> f$0
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$1.<init>(android.net.RouteInfo) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$951d642914bc6083d586381cd2e56139e0e6ab35a10d1cb36b4739af4d929fae$1.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda4 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda4:
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7762bed26d95acb9a35a3a59ed83ddc9845bebb2e0b36a47b6f8668886b974f4$0.f$0 -> f$0
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7762bed26d95acb9a35a3a59ed83ddc9845bebb2e0b36a47b6f8668886b974f4$0.<init>(java.lang.String) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$7762bed26d95acb9a35a3a59ed83ddc9845bebb2e0b36a47b6f8668886b974f4$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda5 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda5:
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$35ac5da55933c9080e402534855dd98c602a81268fc294e8677c19dffdaee1ef$0.f$0 -> f$0
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$35ac5da55933c9080e402534855dd98c602a81268fc294e8677c19dffdaee1ef$0.<init>(java.lang.String) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$35ac5da55933c9080e402534855dd98c602a81268fc294e8677c19dffdaee1ef$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda6 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda6:
    long com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$9a65081974bb9d466744e9867b8e9665d4de4ecc6311b674ada4df3262a1db1c$0.f$1 -> f$1
    java.lang.String[] com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$9a65081974bb9d466744e9867b8e9665d4de4ecc6311b674ada4df3262a1db1c$0.f$2 -> f$2
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$9a65081974bb9d466744e9867b8e9665d4de4ecc6311b674ada4df3262a1db1c$0.f$0 -> f$0
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$9a65081974bb9d466744e9867b8e9665d4de4ecc6311b674ada4df3262a1db1c$0.<init>(java.lang.String,long,java.lang.String[]) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$9a65081974bb9d466744e9867b8e9665d4de4ecc6311b674ada4df3262a1db1c$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda7 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda7:
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$ebfdde25f78b95fecf3310f5adf3a15e18394da503c9e79200d352e711663ea1$0.f$0 -> f$0
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$ebfdde25f78b95fecf3310f5adf3a15e18394da503c9e79200d352e711663ea1$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$ebfdde25f78b95fecf3310f5adf3a15e18394da503c9e79200d352e711663ea1$0.<init>(java.lang.String,java.lang.String) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$ebfdde25f78b95fecf3310f5adf3a15e18394da503c9e79200d352e711663ea1$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda8 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda8:
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$094b7af27faaab9e7b35a69b0d4e88684c9fc17cfa939a4ea806d1d0185cf4eb$0.f$0 -> f$0
    boolean com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$094b7af27faaab9e7b35a69b0d4e88684c9fc17cfa939a4ea806d1d0185cf4eb$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$094b7af27faaab9e7b35a69b0d4e88684c9fc17cfa939a4ea806d1d0185cf4eb$0.<init>(java.lang.String,boolean) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$094b7af27faaab9e7b35a69b0d4e88684c9fc17cfa939a4ea806d1d0185cf4eb$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda9 -> com.android.server.NetworkObserverRegistry$$ExternalSyntheticLambda9:
    java.lang.String com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$dbfb25be326bd55f57121013d143b23d677587653a252bcc57e7452d729b5bcf$0.f$0 -> f$0
    boolean com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$dbfb25be326bd55f57121013d143b23d677587653a252bcc57e7452d729b5bcf$0.f$1 -> f$1
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$dbfb25be326bd55f57121013d143b23d677587653a252bcc57e7452d729b5bcf$0.<init>(java.lang.String,boolean) -> <init>
    void com.android.server.NetworkObserverRegistry$$InternalSyntheticLambda$0$dbfb25be326bd55f57121013d143b23d677587653a252bcc57e7452d729b5bcf$0.sendCallback(com.android.server.NetworkObserver) -> sendCallback
com.android.server.NetworkStackService -> com.android.server.NetworkStackService:
    90:90:void <clinit>() -> <clinit>
    89:89:void <init>() -> <init>
    89:89:java.lang.String access$000() -> access$000
    100:103:android.os.IBinder makeConnector(android.content.Context) -> makeConnector
    109:109:android.os.IBinder onBind(android.content.Intent) -> onBind
com.android.server.NetworkStackService$Dependencies -> com.android.server.NetworkStackService$Dependencies:
    143:143:void <init>() -> <init>
    160:160:android.net.dhcp.DhcpServer makeDhcpServer(android.content.Context,java.lang.String,android.net.dhcp.DhcpServingParams,android.net.util.SharedLog) -> makeDhcpServer
    176:176:android.net.ip.IpClient makeIpClient(android.content.Context,java.lang.String,android.net.ip.IIpClientCallbacks,com.android.server.NetworkObserverRegistry,com.android.server.NetworkStackService$NetworkStackServiceManager) -> makeIpClient
    147:147:com.android.server.connectivity.ipmemorystore.IpMemoryStoreService makeIpMemoryStoreService(android.content.Context) -> makeIpMemoryStoreService
    168:168:com.android.server.connectivity.NetworkMonitor makeNetworkMonitor(android.content.Context,android.net.INetworkMonitorCallbacks,android.net.Network,android.net.util.SharedLog,com.android.server.NetworkStackService$NetworkStackServiceManager) -> makeNetworkMonitor
    153:153:com.android.networkstack.NetworkStackNotifier makeNotifier(android.content.Context,android.os.Looper) -> makeNotifier
com.android.server.NetworkStackService$NetworkMonitorConnector -> com.android.server.NetworkStackService$NetworkMonitorConnector:
    568:570:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.NetworkStackService$PermissionChecker) -> <init>
    599:600:void forceReevaluation(int) -> forceReevaluation
    581:582:void launchCaptivePortalApp() -> launchCaptivePortalApp
    587:588:void notifyCaptivePortalAppFinished(int) -> notifyCaptivePortalAppFinished
    611:612:void notifyDnsResponse(int) -> notifyDnsResponse
    629:630:void notifyLinkPropertiesChanged(android.net.LinkProperties) -> notifyLinkPropertiesChanged
    635:636:void notifyNetworkCapabilitiesChanged(android.net.NetworkCapabilities) -> notifyNetworkCapabilitiesChanged
    617:618:void notifyNetworkConnected(android.net.LinkProperties,android.net.NetworkCapabilities) -> notifyNetworkConnected
    623:624:void notifyNetworkDisconnected() -> notifyNetworkDisconnected
    605:606:void notifyPrivateDnsChanged(android.net.PrivateDnsConfigParcel) -> notifyPrivateDnsChanged
    593:594:void setAcceptPartialConnectivity() -> setAcceptPartialConnectivity
    575:576:void start() -> start
com.android.server.NetworkStackService$NetworkStackConnector -> com.android.server.NetworkStackService$NetworkStackConnector:
    277:277:void <init>(android.content.Context) -> <init>
    192:339:void <init>(android.content.Context,com.android.server.NetworkStackService$PermissionChecker,com.android.server.NetworkStackService$Dependencies) -> <init>
    266:272:android.net.util.SharedLog addValidationLogs(android.net.Network,java.lang.String) -> addValidationLogs
    418:420:void allowTestUid(int,android.net.INetworkStackStatusCallback) -> allowTestUid
    426:480:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    488:499:void dumpVersion(java.io.PrintWriter) -> dumpVersion
    517:540:void dumpVersionNumberOnly(java.io.PrintWriter) -> dumpVersionNumberOnly
    409:411:void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks) -> fetchIpMemoryStore
    398:398:android.net.IIpMemoryStore getIpMemoryStoreService() -> getIpMemoryStoreService
    403:403:com.android.networkstack.NetworkStackNotifier getNotifier() -> getNotifier
    344:362:void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks) -> makeDhcpServer
    377:393:void makeIpClient(java.lang.String,android.net.ip.IIpClientCallbacks) -> makeIpClient
    368:372:void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks) -> makeNetworkMonitor
    503:504:java.util.List sortVersions(java.util.Collection) -> sortVersions
    333:335:void updateIpMemoryStoreAidlVersion(int,java.lang.String) -> updateIpMemoryStoreAidlVersion
    321:323:void updateNetdAidlVersion(int,java.lang.String) -> updateNetdAidlVersion
    327:329:void updateNetworkStackAidlVersion(int,java.lang.String) -> updateNetworkStackAidlVersion
com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion -> com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion:
    227:230:void <clinit>() -> <clinit>
    232:235:void <init>(java.lang.String,int,java.lang.String) -> <init>
    220:220:int compareTo(java.lang.Object) -> compareTo
    261:261:int compareTo(com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion) -> compareTo
    245:249:boolean equals(java.lang.Object) -> equals
    240:240:int hashCode() -> hashCode
    228:228:java.lang.String lambda$static$0(com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion) -> lambda$static$0
    229:229:int lambda$static$1(com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion) -> lambda$static$1
    230:230:java.lang.String lambda$static$2(com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion) -> lambda$static$2
    256:256:java.lang.String toString() -> toString
com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda0 -> com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda0:
    com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$3 com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$3.INSTANCE -> INSTANCE
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$3.<clinit>() -> <clinit>
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$3.<init>() -> <init>
    int com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$3.compare(java.lang.Object,java.lang.Object) -> compare
com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda1 -> com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda1:
    com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$2 com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$2.INSTANCE -> INSTANCE
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$2.<clinit>() -> <clinit>
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$2.<init>() -> <init>
    java.lang.Object com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$2.apply(java.lang.Object) -> apply
com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda2 -> com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda2:
    com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$0 com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$0.INSTANCE -> INSTANCE
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$0.<clinit>() -> <clinit>
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$0.<init>() -> <init>
    java.lang.Object com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$0.apply(java.lang.Object) -> apply
com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda3 -> com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$ExternalSyntheticLambda3:
    com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$1 com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$1.INSTANCE -> INSTANCE
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$1.<clinit>() -> <clinit>
    void com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$1.<init>() -> <init>
    int com.android.server.NetworkStackService$NetworkStackConnector$AidlVersion$$InternalSyntheticLambda$0$dc3a08f8cdb7e2667a2e5ecc438fa76bf9154b873f6a920fa90e52e9d0d65eef$1.applyAsInt(java.lang.Object) -> applyAsInt
com.android.server.NetworkStackService$PermissionChecker -> com.android.server.NetworkStackService$PermissionChecker:
    131:131:void <init>() -> <init>
    136:136:void enforceNetworkStackCallingPermission() -> enforceNetworkStackCallingPermission
com.android.server.TestNetworkStackService -> com.android.server.TestNetworkStackService:
    29:29:void <init>() -> <init>
    33:37:android.os.IBinder onBind(android.content.Intent) -> onBind
com.android.server.connectivity.NetworkMonitor -> com.android.server.connectivity.NetworkMonitor:
    220:279:void <clinit>() -> <clinit>
    549:550:void <init>(android.content.Context,android.net.INetworkMonitorCallbacks,android.net.Network,android.net.util.SharedLog,com.android.server.NetworkStackService$NetworkStackServiceManager) -> <init>
    402:624:void <init>(android.content.Context,android.net.INetworkMonitorCallbacks,android.net.Network,android.net.metrics.IpConnectivityLog,android.net.util.SharedLog,com.android.server.NetworkStackService$NetworkStackServiceManager,com.android.server.connectivity.NetworkMonitor$Dependencies,com.android.networkstack.netlink.TcpSocketTracker) -> <init>
    219:219:void access$1000(com.android.server.connectivity.NetworkMonitor,int) -> access$1000
    219:219:android.net.networkstack.util.State access$1100(com.android.server.connectivity.NetworkMonitor) -> access$1100
    219:219:void access$1200(com.android.server.connectivity.NetworkMonitor) -> access$1200
    219:219:android.net.networkstack.util.State access$1300(com.android.server.connectivity.NetworkMonitor) -> access$1300
    219:219:void access$1400(com.android.server.connectivity.NetworkMonitor,java.lang.String) -> access$1400
    219:219:int access$1500(com.android.server.connectivity.NetworkMonitor) -> access$1500
    219:219:int access$1502(com.android.server.connectivity.NetworkMonitor,int) -> access$1502
    219:219:boolean access$1600(com.android.server.connectivity.NetworkMonitor) -> access$1600
    219:219:boolean access$1602(com.android.server.connectivity.NetworkMonitor,boolean) -> access$1602
    219:219:boolean access$1700(com.android.server.connectivity.NetworkMonitor) -> access$1700
    219:219:boolean access$1702(com.android.server.connectivity.NetworkMonitor,boolean) -> access$1702
    219:219:android.net.networkstack.util.State access$1800(com.android.server.connectivity.NetworkMonitor) -> access$1800
    219:219:boolean access$1900(com.android.server.connectivity.NetworkMonitor) -> access$1900
    219:219:boolean access$1902(com.android.server.connectivity.NetworkMonitor,boolean) -> access$1902
    219:219:com.android.server.connectivity.NetworkMonitor$EvaluationState access$2000(com.android.server.connectivity.NetworkMonitor) -> access$2000
    219:219:boolean access$2100(com.android.server.connectivity.NetworkMonitor) -> access$2100
    219:219:java.lang.String access$2200(com.android.server.connectivity.NetworkMonitor) -> access$2200
    219:219:java.lang.String access$2202(com.android.server.connectivity.NetworkMonitor,java.lang.String) -> access$2202
    219:219:void access$2300(com.android.server.connectivity.NetworkMonitor,int) -> access$2300
    219:219:void access$2400(com.android.server.connectivity.NetworkMonitor,boolean) -> access$2400
    219:219:android.net.LinkProperties access$2500(com.android.server.connectivity.NetworkMonitor) -> access$2500
    219:219:android.net.LinkProperties access$2502(com.android.server.connectivity.NetworkMonitor,android.net.LinkProperties) -> access$2502
    219:219:android.net.Uri access$2600(android.net.LinkProperties) -> access$2600
    219:219:android.net.NetworkCapabilities access$2700(com.android.server.connectivity.NetworkMonitor) -> access$2700
    219:219:android.net.NetworkCapabilities access$2702(com.android.server.connectivity.NetworkMonitor,android.net.NetworkCapabilities) -> access$2702
    219:219:void access$2800(com.android.server.connectivity.NetworkMonitor) -> access$2800
    219:219:com.android.server.connectivity.NetworkMonitor$ValidationStage access$2900(com.android.server.connectivity.NetworkMonitor) -> access$2900
    219:219:int access$3000(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationStage,com.android.server.connectivity.NetworkMonitor$EvaluationResult) -> access$3000
    219:219:void access$3100(com.android.server.connectivity.NetworkMonitor,int) -> access$3100
    219:219:boolean access$3200(com.android.server.connectivity.NetworkMonitor) -> access$3200
    219:219:int access$3300(com.android.server.connectivity.NetworkMonitor) -> access$3300
    219:219:int access$3308(com.android.server.connectivity.NetworkMonitor) -> access$3308
    219:219:boolean access$3400(com.android.server.connectivity.NetworkMonitor) -> access$3400
    219:219:com.android.networkstack.netlink.TcpSocketTracker access$3500(com.android.server.connectivity.NetworkMonitor) -> access$3500
    219:219:android.net.networkstack.util.State access$3600(com.android.server.connectivity.NetworkMonitor) -> access$3600
    219:219:void access$3700(com.android.server.connectivity.NetworkMonitor,int) -> access$3700
    219:219:android.net.Network access$4000(com.android.server.connectivity.NetworkMonitor) -> access$4000
    219:219:android.net.captiveportal.CaptivePortalProbeResult access$4100(com.android.server.connectivity.NetworkMonitor) -> access$4100
    219:219:android.net.captiveportal.CaptivePortalProbeResult access$4102(com.android.server.connectivity.NetworkMonitor,android.net.captiveportal.CaptivePortalProbeResult) -> access$4102
    219:219:java.net.URL access$4200(com.android.server.connectivity.NetworkMonitor,java.lang.String) -> access$4200
    219:219:java.lang.String access$4300(com.android.server.connectivity.NetworkMonitor) -> access$4300
    219:219:com.android.networkstack.NetworkStackNotifier access$4400(com.android.server.connectivity.NetworkMonitor) -> access$4400
    219:219:android.net.ConnectivityManager access$4500(com.android.server.connectivity.NetworkMonitor) -> access$4500
    219:219:android.content.Context access$4600(com.android.server.connectivity.NetworkMonitor) -> access$4600
    219:219:com.android.server.connectivity.NetworkMonitor$Dependencies access$4700(com.android.server.connectivity.NetworkMonitor) -> access$4700
    219:219:com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver access$4800(com.android.server.connectivity.NetworkMonitor) -> access$4800
    219:219:com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver access$4802(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver) -> access$4802
    219:219:void access$4900(com.android.server.connectivity.NetworkMonitor) -> access$4900
    219:219:android.net.util.Stopwatch access$5000(com.android.server.connectivity.NetworkMonitor) -> access$5000
    219:219:com.android.networkstack.apishim.common.NetworkInformationShim access$5100(com.android.server.connectivity.NetworkMonitor) -> access$5100
    219:219:boolean access$5200(com.android.server.connectivity.NetworkMonitor,com.android.networkstack.apishim.common.CaptivePortalDataShim) -> access$5200
    219:219:android.net.networkstack.util.State access$5300(com.android.server.connectivity.NetworkMonitor) -> access$5300
    219:219:int access$5400(com.android.server.connectivity.NetworkMonitor) -> access$5400
    219:219:int access$5404(com.android.server.connectivity.NetworkMonitor) -> access$5404
    219:219:int access$5500(com.android.server.connectivity.NetworkMonitor) -> access$5500
    219:219:int access$5502(com.android.server.connectivity.NetworkMonitor,int) -> access$5502
    219:219:int access$5528(com.android.server.connectivity.NetworkMonitor,int) -> access$5528
    219:219:int access$5600(com.android.server.connectivity.NetworkMonitor) -> access$5600
    219:219:int access$5602(com.android.server.connectivity.NetworkMonitor,int) -> access$5602
    219:219:int access$5608(com.android.server.connectivity.NetworkMonitor) -> access$5608
    219:219:android.net.networkstack.util.State access$5700(com.android.server.connectivity.NetworkMonitor) -> access$5700
    219:219:void access$5900(com.android.server.connectivity.NetworkMonitor,java.lang.String) -> access$5900
    219:219:void access$6000(com.android.server.connectivity.NetworkMonitor,int) -> access$6000
    219:219:void access$6100(com.android.server.connectivity.NetworkMonitor,android.stats.connectivity.ProbeType,long,android.stats.connectivity.ProbeResult,com.android.networkstack.apishim.common.CaptivePortalDataShim) -> access$6100
    219:219:android.net.networkstack.util.State access$6200(com.android.server.connectivity.NetworkMonitor) -> access$6200
    219:219:int access$6300(com.android.server.connectivity.NetworkMonitor) -> access$6300
    219:219:android.net.INetworkMonitorCallbacks access$6400(com.android.server.connectivity.NetworkMonitor) -> access$6400
    219:219:java.lang.String access$6500() -> access$6500
    219:219:android.net.Network access$6600(com.android.server.connectivity.NetworkMonitor) -> access$6600
    219:219:void access$6700(com.android.server.connectivity.NetworkMonitor,int,java.lang.Object,java.lang.String) -> access$6700
    219:219:void access$6800(com.android.server.connectivity.NetworkMonitor,long,int,int) -> access$6800
    219:219:void access$6900(com.android.server.connectivity.NetworkMonitor) -> access$6900
    219:219:int access$7000(com.android.server.connectivity.NetworkMonitor) -> access$7000
    219:219:int access$7004(com.android.server.connectivity.NetworkMonitor) -> access$7004
    219:219:long access$7102(com.android.server.connectivity.NetworkMonitor,long) -> access$7102
    219:219:void access$7200(com.android.server.connectivity.NetworkMonitor,android.net.captiveportal.CaptivePortalProbeResult) -> access$7200
    219:219:android.net.networkstack.util.State access$7300(com.android.server.connectivity.NetworkMonitor) -> access$7300
    219:219:android.net.captiveportal.CaptivePortalProbeResult access$7400(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationProperties) -> access$7400
    219:219:java.lang.String access$7500(com.android.server.connectivity.NetworkMonitor) -> access$7500
    219:219:java.net.HttpURLConnection access$7600(com.android.server.connectivity.NetworkMonitor,java.net.URL,boolean) -> access$7600
    219:219:int access$7700(com.android.server.connectivity.NetworkMonitor) -> access$7700
    219:219:java.util.concurrent.atomic.AtomicInteger access$7800(com.android.server.connectivity.NetworkMonitor) -> access$7800
    219:219:int access$7900(com.android.server.connectivity.NetworkMonitor) -> access$7900
    219:219:void access$8000(com.android.server.connectivity.NetworkMonitor,int) -> access$8000
    219:219:void access$8100(com.android.server.connectivity.NetworkMonitor,int) -> access$8100
    219:219:boolean access$8200(android.net.captiveportal.CaptivePortalProbeResult,android.net.Uri) -> access$8200
    219:219:android.net.captiveportal.CaptivePortalProbeResult access$8300(com.android.server.connectivity.NetworkMonitor,android.net.ProxyInfo,java.net.URL,int) -> access$8300
    219:219:boolean access$8600() -> access$8600
    219:219:void access$8800(com.android.server.connectivity.NetworkMonitor,int,int) -> access$8800
    219:219:void access$8900(com.android.server.connectivity.NetworkMonitor,android.net.NetworkTestResultParcelable) -> access$8900
    219:219:void access$900(com.android.server.connectivity.NetworkMonitor,android.os.Message) -> access$900
    219:219:void access$9000(com.android.server.connectivity.NetworkMonitor,int,java.lang.String) -> access$9000
    1163:1169:void addDnsEvents(com.android.networkstack.metrics.DataStallDetectionStats$Builder) -> addDnsEvents
    1154:1158:void addTcpStats(com.android.networkstack.metrics.DataStallDetectionStats$Builder) -> addTcpStats
    1117:1150:com.android.networkstack.metrics.DataStallDetectionStats buildDataStallDetectionStats(int,int) -> buildDataStallDetectionStats
    2165:2172:java.net.URL[] combineCaptivePortalUrls(java.lang.String,java.lang.String) -> combineCaptivePortalUrls
    2253:2266:java.lang.Object[] convertStrings(java.lang.String[],java.util.function.Function,java.lang.Object[]) -> convertStrings
    3285:3285:boolean dataStallEvaluateTypeEnabled(int) -> dataStallEvaluateTypeEnabled
    2901:2938:android.net.captiveportal.CaptivePortalProbeResult evaluateCapportResult(java.util.List,int,boolean) -> evaluateCapportResult
    2642:2652:java.nio.charset.Charset extractCharset(java.lang.String) -> extractCharset
    640:640:void forceReevaluation(int) -> forceReevaluation
    533:542:int getCallbackVersion(android.net.INetworkMonitorCallbacks) -> getCallbackVersion
    3539:3539:android.net.Uri getCaptivePortalApiUrl(android.net.LinkProperties) -> getCaptivePortalApiUrl
    2046:2048:java.lang.String getCaptivePortalServerHttpUrl() -> getCaptivePortalServerHttpUrl
    1966:1968:java.lang.String getCaptivePortalServerHttpsUrl() -> getCaptivePortalServerHttpsUrl
    2270:2270:java.lang.String getCaptivePortalUserAgent() -> getCaptivePortalUserAgent
    2053:2053:int getConsecutiveDnsTimeoutThreshold() -> getConsecutiveDnsTimeoutThreshold
    1908:1911:android.content.Context getContextByMccMnc(int,int) -> getContextByMccMnc
    1917:1939:android.content.Context getCustomizedContextOrDefault() -> getCustomizedContextOrDefault
    2072:2072:int getDataStallEvaluationType() -> getDataStallEvaluationType
    2059:2059:int getDataStallMinEvaluateTime() -> getDataStallMinEvaluateTime
    2065:2065:int getDataStallValidDnsTimeThreshold() -> getDataStallValidDnsTimeThreshold
    1985:1985:int getDnsProbeTimeout() -> getDnsProbeTimeout
    3276:3276:com.android.server.connectivity.NetworkMonitor$DnsStallDetector getDnsStallDetector() -> getDnsStallDetector
    3468:3468:com.android.server.connectivity.NetworkMonitor$EvaluationState getEvaluationState() -> getEvaluationState
    2001:2005:int getIntSetting(android.content.Context,int,java.lang.String,int) -> getIntSetting
    1825:1825:boolean getIsCaptivePortalCheckEnabled() -> getIsCaptivePortalCheckEnabled
    1830:1831:boolean getIsPrivateIpNoInternetEnabled() -> getIsPrivateIpNoInternetEnabled
    3290:3290:long getLastProbeTime() -> getLastProbeTime
    770:770:int getLegacyTestResult(int,int) -> getLegacyTestResult
    1865:1891:java.lang.String getLocationMcc() -> getLocationMcc
    1842:1851:java.lang.String getMccFromCellInfo(android.telephony.CellInfo) -> getMccFromCellInfo
    1903:1904:com.android.server.connectivity.NetworkMonitor$MccMncOverrideInfo getMccMncOverrideInfo() -> getMccMncOverrideInfo
    2213:2214:java.lang.Object[] getProbeUrlArrayConfig(java.lang.Object[],int,int,java.util.function.Function) -> getProbeUrlArrayConfig
    2231:2242:java.lang.Object[] getProbeUrlArrayConfig(java.lang.Object[],int,java.lang.String[],java.util.function.Function) -> getProbeUrlArrayConfig
    2016:2018:int getResIntConfig(android.content.Context,int,int) -> getResIntConfig
    2030:2032:java.lang.String getResStringConfig(android.content.Context,int,java.lang.String) -> getResStringConfig
    2188:2195:java.lang.String getSettingFromResource(android.content.Context,int,java.lang.String,java.lang.String) -> getSettingFromResource
    2078:2078:int getTcpPollingInterval() -> getTcpPollingInterval
    3281:3281:com.android.networkstack.netlink.TcpSocketTracker getTcpSocketTracker() -> getTcpSocketTracker
    3523:3528:com.android.networkstack.netlink.TcpSocketTracker getTcpSocketTrackerOrNull(android.content.Context,android.net.Network) -> getTcpSocketTrackerOrNull
    1944:1962:java.net.URL getTestUrl(java.lang.String) -> getTestUrl
    1836:1836:boolean getUseHttpsValidation() -> getUseHttpsValidation
    2446:2448:boolean hasPrivateIpAddress(java.net.InetAddress[]) -> hasPrivateIpAddress
    801:803:void hideProvisioningNotification() -> hideProvisioningNotification
    3535:3535:com.android.server.connectivity.NetworkMonitor$DnsStallDetector initDnsStallDetectorIfRequired(int,int) -> initDnsStallDetectorIfRequired
    2311:2374:android.net.captiveportal.CaptivePortalProbeResult isCaptivePortal(com.android.server.connectivity.NetworkMonitor$ValidationProperties) -> isCaptivePortal
    2827:2828:boolean isConclusiveResult(android.net.captiveportal.CaptivePortalProbeResult,android.net.Uri) -> isConclusiveResult
    3295:3367:boolean isDataStall() -> isDataStall
    737:737:boolean isPrivateDnsValidationRequired() -> isPrivateDnsValidationRequired
    3548:3551:boolean isTermsAndConditionsCaptive(com.android.networkstack.apishim.common.CaptivePortalDataShim) -> isTermsAndConditionsCaptive
    1973:1979:boolean isValidTestUrl(java.lang.String) -> isValidTestUrl
    733:733:boolean isValidationRequired() -> isValidationRequired
    1889:1889:int lambda$getLocationMcc$0(java.util.Map$Entry,java.util.Map$Entry) -> lambda$getLocationMcc$0
    2411:2411:void lambda$sendDnsProbeWithTimeout$1(java.lang.String,java.lang.String) -> lambda$sendDnsProbeWithTimeout$1
    2859:2860:android.net.captiveportal.CaptivePortalProbeResult lambda$sendMultiParallelHttpAndHttpsProbes$2(com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,java.net.URL,android.net.Uri) -> lambda$sendMultiParallelHttpAndHttpsProbes$2
    2864:2865:android.net.captiveportal.CaptivePortalProbeResult lambda$sendMultiParallelHttpAndHttpsProbes$3(com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,android.net.Uri) -> lambda$sendMultiParallelHttpAndHttpsProbes$3
    2885:2885:void lambda$sendMultiParallelHttpAndHttpsProbes$4(java.util.concurrent.Future) -> lambda$sendMultiParallelHttpAndHttpsProbes$4
    703:703:void launchCaptivePortalApp() -> launchCaptivePortalApp
    715:715:void log(java.lang.String) -> log
    3050:3051:void logNetworkEvent(int) -> logNetworkEvent
    3080:3087:void logValidationProbe(long,int,int) -> logValidationProbe
    2103:2117:android.net.captiveportal.CaptivePortalProbeSpec[] makeCaptivePortalFallbackProbeSpecs() -> makeCaptivePortalFallbackProbeSpecs
    2086:2096:java.net.URL[] makeCaptivePortalFallbackUrls() -> makeCaptivePortalFallbackUrls
    2144:2160:java.net.URL[] makeCaptivePortalHttpUrls() -> makeCaptivePortalHttpUrls
    2123:2139:java.net.URL[] makeCaptivePortalHttpsUrls() -> makeCaptivePortalHttpsUrls
    2603:2610:java.net.HttpURLConnection makeProbeConnection(java.net.URL,boolean) -> makeProbeConnection
    3041:3043:java.net.URL makeURL(java.lang.String) -> makeURL
    2575:2579:boolean matchesHttpContent(java.lang.String,int) -> matchesHttpContent
    2591:2597:boolean matchesHttpContentLength(long) -> matchesHttpContentLength
    3472:3477:void maybeDisableHttpsProbing(boolean) -> maybeDisableHttpsProbing
    3071:3075:void maybeLogEvaluationResult(int) -> maybeLogEvaluationResult
    3505:3507:void maybeReportCaptivePortalData(com.android.networkstack.apishim.common.CaptivePortalDataShim) -> maybeReportCaptivePortalData
    850:856:void maybeStopCollectionAndSendMetrics() -> maybeStopCollectionAndSendMetrics
    1098:1111:void maybeWriteDataStallStats(android.net.captiveportal.CaptivePortalProbeResult) -> maybeWriteDataStallStats
    1812:1815:boolean needEvaluatingBandwidth() -> needEvaluatingBandwidth
    3055:3062:int networkEventType(com.android.server.connectivity.NetworkMonitor$ValidationStage,com.android.server.connectivity.NetworkMonitor$EvaluationResult) -> networkEventType
    2284:2289:android.net.captiveportal.CaptivePortalProbeSpec nextFallbackSpec() -> nextFallbackSpec
    2275:2280:java.net.URL nextFallbackUrl() -> nextFallbackUrl
    710:710:void notifyCaptivePortalAppFinished(int) -> notifyCaptivePortalAppFinished
    809:811:void notifyDataStallSuspected(android.net.DataStallReportParcelable) -> notifyDataStallSuspected
    648:648:void notifyDnsResponse(int) -> notifyDnsResponse
    689:689:void notifyLinkPropertiesChanged(android.net.LinkProperties) -> notifyLinkPropertiesChanged
    696:696:void notifyNetworkCapabilitiesChanged(android.net.NetworkCapabilities) -> notifyNetworkCapabilitiesChanged
    666:666:void notifyNetworkConnected(android.net.LinkProperties,android.net.NetworkCapabilities) -> notifyNetworkConnected
    682:682:void notifyNetworkDisconnected() -> notifyNetworkDisconnected
    748:756:void notifyNetworkTested(android.net.NetworkTestResultParcelable) -> notifyNetworkTested
    657:659:void notifyPrivateDnsSettingsChanged(android.net.shared.PrivateDnsConfig) -> notifyPrivateDnsSettingsChanged
    785:787:void notifyProbeStatusChanged(int,int) -> notifyProbeStatusChanged
    1805:1806:boolean onlyWifiTransport() -> onlyWifiTransport
    2619:2631:java.lang.String readAsString(java.io.InputStream,int,java.nio.charset.Charset) -> readAsString
    828:834:void recordProbeEventMetrics(android.stats.connectivity.ProbeType,long,android.stats.connectivity.ProbeResult,com.android.networkstack.apishim.common.CaptivePortalDataShim) -> recordProbeEventMetrics
    839:845:void recordValidationResult(int,java.lang.String) -> recordValidationResult
    3485:3496:void reportHttpProbeResult(int,android.net.captiveportal.CaptivePortalProbeResult) -> reportHttpProbeResult
    2945:2956:void reportProbeResult(android.net.captiveportal.CaptivePortalProbeResult) -> reportProbeResult
    2388:2402:android.net.captiveportal.CaptivePortalProbeResult sendDnsAndHttpProbes(android.net.ProxyInfo,java.net.URL,int) -> sendDnsAndHttpProbes
    2416:2434:java.net.InetAddress[] sendDnsProbe(java.lang.String) -> sendDnsProbe
    2409:2409:java.net.InetAddress[] sendDnsProbeWithTimeout(java.lang.String,int) -> sendDnsProbeWithTimeout
    2964:3034:android.net.captiveportal.CaptivePortalProbeResult sendHttpAndHttpsParallelWithFallbackProbes(com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,java.net.URL) -> sendHttpAndHttpsParallelWithFallbackProbes
    2465:2568:android.net.captiveportal.CaptivePortalProbeResult sendHttpProbe(java.net.URL,int,android.net.captiveportal.CaptivePortalProbeSpec) -> sendHttpProbe
    2840:2889:android.net.captiveportal.CaptivePortalProbeResult sendMultiParallelHttpAndHttpsProbes(com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL[],java.net.URL[]) -> sendMultiParallelHttpAndHttpsProbes
    1092:1093:void sendTcpPollingEvent() -> sendTcpPollingEvent
    633:633:void setAcceptPartialConnectivity() -> setAcceptPartialConnectivity
    793:795:void showProvisioningNotification(java.lang.String) -> showProvisioningNotification
    816:822:void startMetricsCollection() -> startMetricsCollection
    741:742:void suppressNotificationIfNetworkRestricted() -> suppressNotificationIfNetworkRestricted
    671:675:void updateConnectedNetworkAttributes(android.os.Message) -> updateConnectedNetworkAttributes
    719:720:void validationLog(int,java.lang.Object,java.lang.String) -> validationLog
    724:725:void validationLog(java.lang.String) -> validationLog
    729:729:com.android.server.connectivity.NetworkMonitor$ValidationStage validationStage() -> validationStage
com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda0 -> com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda0:
    com.android.server.connectivity.NetworkMonitor com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$3262c7633557a3885dc73d0115a0ab86828d7697c73c9ab6a0546f9fa69722cb$0.f$0 -> f$0
    java.lang.String com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$3262c7633557a3885dc73d0115a0ab86828d7697c73c9ab6a0546f9fa69722cb$0.f$1 -> f$1
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$3262c7633557a3885dc73d0115a0ab86828d7697c73c9ab6a0546f9fa69722cb$0.<init>(com.android.server.connectivity.NetworkMonitor,java.lang.String) -> <init>
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$3262c7633557a3885dc73d0115a0ab86828d7697c73c9ab6a0546f9fa69722cb$0.log(java.lang.String) -> log
com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda1 -> com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda1:
    com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$7ee5f750cf57361de0f1bb44ba355df76c6b1f207925ae429868cbc4fa0b0d56$0 com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$7ee5f750cf57361de0f1bb44ba355df76c6b1f207925ae429868cbc4fa0b0d56$0.INSTANCE -> INSTANCE
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$7ee5f750cf57361de0f1bb44ba355df76c6b1f207925ae429868cbc4fa0b0d56$0.<clinit>() -> <clinit>
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$7ee5f750cf57361de0f1bb44ba355df76c6b1f207925ae429868cbc4fa0b0d56$0.<init>() -> <init>
    int com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$7ee5f750cf57361de0f1bb44ba355df76c6b1f207925ae429868cbc4fa0b0d56$0.compare(java.lang.Object,java.lang.Object) -> compare
com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda2 -> com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda2:
    com.android.server.connectivity.NetworkMonitor$ValidationProperties com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.f$1 -> f$1
    android.net.Uri com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.f$4 -> f$4
    com.android.server.connectivity.NetworkMonitor com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.f$0 -> f$0
    android.net.ProxyInfo com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.f$2 -> f$2
    java.net.URL com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.f$3 -> f$3
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.<init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,android.net.Uri) -> <init>
    java.lang.Object com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$1.call() -> call
com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda3 -> com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda3:
    com.android.server.connectivity.NetworkMonitor$ValidationProperties com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$1 -> f$1
    android.net.Uri com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$5 -> f$5
    com.android.server.connectivity.NetworkMonitor com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$0 -> f$0
    android.net.ProxyInfo com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$2 -> f$2
    java.net.URL com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$3 -> f$3
    java.net.URL com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.f$4 -> f$4
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.<init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,java.net.URL,android.net.Uri) -> <init>
    java.lang.Object com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$1$58241739021072912e016c641baf16e5c872389ff8fad1af000349b74a2e2a06$0.call() -> call
com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda6 -> com.android.server.connectivity.NetworkMonitor$$ExternalSyntheticLambda6:
    com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$a360834e58e0765068336d0b984744ce83170e01597cf088d525ebff63c8f539$0 com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$a360834e58e0765068336d0b984744ce83170e01597cf088d525ebff63c8f539$0.INSTANCE -> INSTANCE
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$a360834e58e0765068336d0b984744ce83170e01597cf088d525ebff63c8f539$0.<clinit>() -> <clinit>
    void com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$a360834e58e0765068336d0b984744ce83170e01597cf088d525ebff63c8f539$0.<init>() -> <init>
    java.lang.Object com.android.server.connectivity.NetworkMonitor$$InternalSyntheticLambda$0$a360834e58e0765068336d0b984744ce83170e01597cf088d525ebff63c8f539$0.apply(java.lang.Object) -> apply
com.android.server.connectivity.NetworkMonitor$CaptivePortalState -> com.android.server.connectivity.NetworkMonitor$CaptivePortalState:
    1366:1366:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1366:1366:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1372:1392:void enter() -> enter
    1397:1397:void exit() -> exit
com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver -> com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver:
    1347:1351:void <init>(com.android.server.connectivity.NetworkMonitor,java.lang.String,int,int) -> <init>
    1343:1343:java.lang.String access$5800(com.android.server.connectivity.NetworkMonitor$CustomIntentReceiver) -> access$5800
    1360:1360:void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.server.connectivity.NetworkMonitor$DefaultState -> com.android.server.connectivity.NetworkMonitor$DefaultState:
    862:862:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    862:862:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    865:995:boolean processMessage(android.os.Message) -> processMessage
com.android.server.connectivity.NetworkMonitor$Dependencies -> com.android.server.connectivity.NetworkMonitor$Dependencies:
    3189:3189:void <clinit>() -> <clinit>
    3091:3091:void <init>() -> <init>
    3134:3134:java.lang.String getDeviceConfigProperty(java.lang.String,java.lang.String,java.lang.String) -> getDeviceConfigProperty
    3147:3147:int getDeviceConfigPropertyInt(java.lang.String,java.lang.String,int) -> getDeviceConfigPropertyInt
    3097:3097:android.net.DnsResolver getDnsResolver() -> getDnsResolver
    3093:3093:android.net.Network getPrivateDnsBypassNetwork(android.net.Network) -> getPrivateDnsBypassNetwork
    3101:3101:java.util.Random getRandom() -> getRandom
    3110:3110:int getSetting(android.content.Context,java.lang.String,int) -> getSetting
    3119:3119:java.lang.String getSetting(android.content.Context,java.lang.String,java.lang.String) -> getSetting
    3157:3157:boolean isFeatureEnabled(android.content.Context,java.lang.String) -> isFeatureEnabled
    3174:3174:boolean isFeatureEnabled(android.content.Context,java.lang.String,java.lang.String,boolean) -> isFeatureEnabled
    3186:3186:void writeDataStallDetectionStats(com.android.networkstack.metrics.DataStallDetectionStats,android.net.captiveportal.CaptivePortalProbeResult) -> writeDataStallDetectionStats
com.android.server.connectivity.NetworkMonitor$DnsResult -> com.android.server.connectivity.NetworkMonitor$DnsResult:
    3263:3265:void <init>(int) -> <init>
    3255:3255:int access$3800(com.android.server.connectivity.NetworkMonitor$DnsResult) -> access$3800
    3255:3255:long access$3900(com.android.server.connectivity.NetworkMonitor$DnsResult) -> access$3900
    3255:3255:boolean access$8500(com.android.server.connectivity.NetworkMonitor$DnsResult) -> access$8500
    3269:3269:boolean isTimeout() -> isTimeout
com.android.server.connectivity.NetworkMonitor$DnsStallDetector -> com.android.server.connectivity.NetworkMonitor$DnsStallDetector:
    3199:3207:void <init>(com.android.server.connectivity.NetworkMonitor,int) -> <init>
    3198:3198:boolean access$8700(com.android.server.connectivity.NetworkMonitor$DnsStallDetector,int,int) -> access$8700
    3212:3219:void accumulateConsecutiveDnsTimeoutCount(int) -> accumulateConsecutiveDnsTimeoutCount
    3251:3251:int getConsecutiveTimeoutCount() -> getConsecutiveTimeoutCount
    3225:3244:boolean isDataStallSuspected(int,int) -> isDataStallSuspected
com.android.server.connectivity.NetworkMonitor$EvaluatingBandwidthState -> com.android.server.connectivity.NetworkMonitor$EvaluatingBandwidthState:
    1721:1721:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1721:1721:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1728:1731:void enter() -> enter
    1771:1773:void exit() -> exit
    1736:1753:boolean processMessage(android.os.Message) -> processMessage
    1762:1765:void scheduleReevaluatingBandwidth() -> scheduleReevaluatingBandwidth
com.android.server.connectivity.NetworkMonitor$EvaluatingBandwidthThread -> com.android.server.connectivity.NetworkMonitor$EvaluatingBandwidthThread:
    1674:1675:void <init>(com.android.server.connectivity.NetworkMonitor,int) -> <init>
    1716:1717:void readContentFromDownloadUrl(java.net.HttpURLConnection) -> readContentFromDownloadUrl
    1682:1710:void run() -> run
com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState -> com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState:
    1401:1401:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1401:1401:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1407:1409:void enter() -> enter
    1505:1518:void handlePrivateDnsEvaluationFailure() -> handlePrivateDnsEvaluationFailure
    1500:1500:void handlePrivateDnsEvaluationSuccess() -> handlePrivateDnsEvaluationSuccess
    1470:1470:boolean inStrictMode() -> inStrictMode
    1474:1475:boolean isStrictModeHostnameResolved() -> isStrictModeHostnameResolved
    1484:1484:void lambda$resolveStrictModeHostname$0(java.lang.String) -> lambda$resolveStrictModeHostname$0
    1493:1495:void notifyPrivateDnsConfigResolved() -> notifyPrivateDnsConfigResolved
    1414:1460:boolean processMessage(android.os.Message) -> processMessage
    1482:1487:void resolveStrictModeHostname() -> resolveStrictModeHostname
    1523:1541:boolean sendPrivateDnsProbe() -> sendPrivateDnsProbe
com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState$$ExternalSyntheticLambda0 -> com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState$$ExternalSyntheticLambda0:
    com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState$$InternalSyntheticLambda$0$a53d7b08493ded82b0e0cb988acfb332f0a782d37b0a9a1d4c03528a14ec0d09$0.f$0 -> f$0
    void com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState$$InternalSyntheticLambda$0$a53d7b08493ded82b0e0cb988acfb332f0a782d37b0a9a1d4c03528a14ec0d09$0.<init>(com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState) -> <init>
    void com.android.server.connectivity.NetworkMonitor$EvaluatingPrivateDnsState$$InternalSyntheticLambda$0$a53d7b08493ded82b0e0cb988acfb332f0a782d37b0a9a1d4c03528a14ec0d09$0.log(java.lang.String) -> log
com.android.server.connectivity.NetworkMonitor$EvaluatingState -> com.android.server.connectivity.NetworkMonitor$EvaluatingState:
    1228:1228:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1228:1228:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1236:1265:void enter() -> enter
    1338:1338:void exit() -> exit
    1270:1320:boolean processMessage(android.os.Message) -> processMessage
    1331:1333:boolean shouldAcceptForceRevalidation() -> shouldAcceptForceRevalidation
com.android.server.connectivity.NetworkMonitor$EvaluationResult -> com.android.server.connectivity.NetworkMonitor$EvaluationResult:
    246:248:void <clinit>() -> <clinit>
    250:251:void <init>(java.lang.String,int,boolean) -> <init>
    246:246:com.android.server.connectivity.NetworkMonitor$EvaluationResult valueOf(java.lang.String) -> valueOf
    246:246:com.android.server.connectivity.NetworkMonitor$EvaluationResult[] values() -> values
com.android.server.connectivity.NetworkMonitor$EvaluationState -> com.android.server.connectivity.NetworkMonitor$EvaluationState:
    3393:3401:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    3406:3407:void clearProbeResults() -> clearProbeResults
    3452:3452:int getEvaluationResult() -> getEvaluationResult
    3462:3462:int getProbeCompletedResult() -> getProbeCompletedResult
    3457:3457:int getProbeResults() -> getProbeResults
    3428:3432:void lambda$noteProbeResult$1(int,boolean) -> lambda$noteProbeResult$1
    3421:3422:void lambda$removeProbeResult$0(int) -> lambda$removeProbeResult$0
    3411:3415:void maybeNotifyProbeResults(java.lang.Runnable) -> maybeNotifyProbeResults
    3427:3427:void noteProbeResult(int,boolean) -> noteProbeResult
    3420:3420:void removeProbeResult(int) -> removeProbeResult
    3438:3447:void reportEvaluationResult(int,java.lang.String) -> reportEvaluationResult
com.android.server.connectivity.NetworkMonitor$EvaluationState$$ExternalSyntheticLambda0 -> com.android.server.connectivity.NetworkMonitor$EvaluationState$$ExternalSyntheticLambda0:
    int com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$8e3dfe36f51c9e0080d01c338c52f1bf8b636bcc0adc56b53daff34e116b5103$0.f$1 -> f$1
    com.android.server.connectivity.NetworkMonitor$EvaluationState com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$8e3dfe36f51c9e0080d01c338c52f1bf8b636bcc0adc56b53daff34e116b5103$0.f$0 -> f$0
    void com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$8e3dfe36f51c9e0080d01c338c52f1bf8b636bcc0adc56b53daff34e116b5103$0.<init>(com.android.server.connectivity.NetworkMonitor$EvaluationState,int) -> <init>
    void com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$8e3dfe36f51c9e0080d01c338c52f1bf8b636bcc0adc56b53daff34e116b5103$0.run() -> run
com.android.server.connectivity.NetworkMonitor$EvaluationState$$ExternalSyntheticLambda1 -> com.android.server.connectivity.NetworkMonitor$EvaluationState$$ExternalSyntheticLambda1:
    int com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$e2874db97610805f59d03481cef58233d46490b5fac23cd4fa7b3f1aa3a55602$0.f$1 -> f$1
    com.android.server.connectivity.NetworkMonitor$EvaluationState com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$e2874db97610805f59d03481cef58233d46490b5fac23cd4fa7b3f1aa3a55602$0.f$0 -> f$0
    boolean com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$e2874db97610805f59d03481cef58233d46490b5fac23cd4fa7b3f1aa3a55602$0.f$2 -> f$2
    void com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$e2874db97610805f59d03481cef58233d46490b5fac23cd4fa7b3f1aa3a55602$0.<init>(com.android.server.connectivity.NetworkMonitor$EvaluationState,int,boolean) -> <init>
    void com.android.server.connectivity.NetworkMonitor$EvaluationState$$InternalSyntheticLambda$0$e2874db97610805f59d03481cef58233d46490b5fac23cd4fa7b3f1aa3a55602$0.run() -> run
com.android.server.connectivity.NetworkMonitor$HttpProbe -> com.android.server.connectivity.NetworkMonitor$HttpProbe:
    2720:2721:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,android.net.Uri) -> <init>
    2727:2778:com.android.networkstack.apishim.common.CaptivePortalDataShim sendCapportApiProbe() -> sendCapportApiProbe
    2795:2815:android.net.captiveportal.CaptivePortalProbeResult sendProbe() -> sendProbe
    2784:2788:com.android.networkstack.apishim.common.CaptivePortalDataShim tryCapportApiProbe() -> tryCapportApiProbe
com.android.server.connectivity.NetworkMonitor$HttpsProbe -> com.android.server.connectivity.NetworkMonitor$HttpsProbe:
    2708:2709:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,android.net.Uri) -> <init>
    2714:2714:android.net.captiveportal.CaptivePortalProbeResult sendProbe() -> sendProbe
com.android.server.connectivity.NetworkMonitor$MaybeNotifyState -> com.android.server.connectivity.NetworkMonitor$MaybeNotifyState:
    1176:1176:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1176:1176:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1218:1222:void exit() -> exit
    1179:1200:boolean processMessage(android.os.Message) -> processMessage
    1211:1212:boolean useRedirectUrlForPortal() -> useRedirectUrlForPortal
com.android.server.connectivity.NetworkMonitor$MccMncOverrideInfo -> com.android.server.connectivity.NetworkMonitor$MccMncOverrideInfo:
    268:270:void <init>(int,int) -> <init>
com.android.server.connectivity.NetworkMonitor$OneAddressPerFamilyNetwork -> com.android.server.connectivity.NetworkMonitor$OneAddressPerFamilyNetwork:
    1783:1783:void <init>(android.net.Network) -> <init>
    1788:1799:java.net.InetAddress[] getAllByName(java.lang.String) -> getAllByName
com.android.server.connectivity.NetworkMonitor$Probe -> com.android.server.connectivity.NetworkMonitor$Probe:
    2696:2700:void <init>(com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,android.net.Uri) -> <init>
com.android.server.connectivity.NetworkMonitor$ProbeThread -> com.android.server.connectivity.NetworkMonitor$ProbeThread:
    2661:2666:void <init>(com.android.server.connectivity.NetworkMonitor,java.util.concurrent.CountDownLatch,com.android.server.connectivity.NetworkMonitor$ValidationProperties,android.net.ProxyInfo,java.net.URL,int,android.net.Uri) -> <init>
    2672:2672:android.net.captiveportal.CaptivePortalProbeResult result() -> result
    2677:2685:void run() -> run
com.android.server.connectivity.NetworkMonitor$ProbingState -> com.android.server.connectivity.NetworkMonitor$ProbingState:
    1546:1546:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1546:1546:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1554:1568:void enter() -> enter
    1634:1637:void exit() -> exit
    1566:1567:void lambda$enter$0(int,com.android.server.connectivity.NetworkMonitor$ValidationProperties) -> lambda$enter$0
    1573:1627:boolean processMessage(android.os.Message) -> processMessage
com.android.server.connectivity.NetworkMonitor$ProbingState$$ExternalSyntheticLambda0 -> com.android.server.connectivity.NetworkMonitor$ProbingState$$ExternalSyntheticLambda0:
    com.android.server.connectivity.NetworkMonitor$ValidationProperties com.android.server.connectivity.NetworkMonitor$ProbingState$$InternalSyntheticLambda$0$5e86563cbef00dedf100b9e8f6424ed6d34a9be012fde9bddc40a6e3e30a24ba$0.f$2 -> f$2
    com.android.server.connectivity.NetworkMonitor$ProbingState com.android.server.connectivity.NetworkMonitor$ProbingState$$InternalSyntheticLambda$0$5e86563cbef00dedf100b9e8f6424ed6d34a9be012fde9bddc40a6e3e30a24ba$0.f$0 -> f$0
    int com.android.server.connectivity.NetworkMonitor$ProbingState$$InternalSyntheticLambda$0$5e86563cbef00dedf100b9e8f6424ed6d34a9be012fde9bddc40a6e3e30a24ba$0.f$1 -> f$1
    void com.android.server.connectivity.NetworkMonitor$ProbingState$$InternalSyntheticLambda$0$5e86563cbef00dedf100b9e8f6424ed6d34a9be012fde9bddc40a6e3e30a24ba$0.<init>(com.android.server.connectivity.NetworkMonitor$ProbingState,int,com.android.server.connectivity.NetworkMonitor$ValidationProperties) -> <init>
    void com.android.server.connectivity.NetworkMonitor$ProbingState$$InternalSyntheticLambda$0$5e86563cbef00dedf100b9e8f6424ed6d34a9be012fde9bddc40a6e3e30a24ba$0.run() -> run
com.android.server.connectivity.NetworkMonitor$ValidatedState -> com.android.server.connectivity.NetworkMonitor$ValidatedState:
    1008:1008:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1008:1008:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1011:1025:void enter() -> enter
    1076:1077:boolean evaluateDataStall() -> evaluateDataStall
    1086:1086:void exit() -> exit
    1029:1033:void initSocketTrackingIfRequired() -> initSocketTrackingIfRequired
    1039:1066:boolean processMessage(android.os.Message) -> processMessage
com.android.server.connectivity.NetworkMonitor$ValidationProperties -> com.android.server.connectivity.NetworkMonitor$ValidationProperties:
    2305:2306:void <init>(android.net.NetworkCapabilities) -> <init>
    2300:2300:boolean access$8400(com.android.server.connectivity.NetworkMonitor$ValidationProperties) -> access$8400
com.android.server.connectivity.NetworkMonitor$ValidationStage -> com.android.server.connectivity.NetworkMonitor$ValidationStage:
    255:257:void <clinit>() -> <clinit>
    259:260:void <init>(java.lang.String,int,boolean) -> <init>
    255:255:com.android.server.connectivity.NetworkMonitor$ValidationStage valueOf(java.lang.String) -> valueOf
    255:255:com.android.server.connectivity.NetworkMonitor$ValidationStage[] values() -> values
com.android.server.connectivity.NetworkMonitor$WaitingForNextProbeState -> com.android.server.connectivity.NetworkMonitor$WaitingForNextProbeState:
    1647:1647:void <init>(com.android.server.connectivity.NetworkMonitor) -> <init>
    1647:1647:void <init>(com.android.server.connectivity.NetworkMonitor,com.android.server.connectivity.NetworkMonitor$1) -> <init>
    1652:1653:void enter() -> enter
    1657:1661:void scheduleNextProbe() -> scheduleNextProbe
com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase:
    334:421:void <clinit>() -> <clinit>
    54:54:java.lang.String access$000() -> access$000
    240:247:java.util.ArrayList decodeAddressList(byte[]) -> decodeAddressList
    613:613:com.android.server.connectivity.ipmemorystore.StatusAndCount delete(android.database.sqlite.SQLiteDatabase,java.lang.String,boolean) -> delete
    629:629:com.android.server.connectivity.ipmemorystore.StatusAndCount deleteCluster(android.database.sqlite.SQLiteDatabase,java.lang.String,boolean) -> deleteCluster
    636:656:com.android.server.connectivity.ipmemorystore.StatusAndCount deleteEntriesWithColumn(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,boolean) -> deleteEntriesWithColumn
    662:679:int dropAllExpiredRecords(android.database.sqlite.SQLiteDatabase) -> dropAllExpiredRecords
    695:727:int dropNumberOfRecords(android.database.sqlite.SQLiteDatabase,int) -> dropNumberOfRecords
    229:235:byte[] encodeAddressList(java.util.List) -> encodeAddressList
    557:598:java.lang.String findClosestAttributes(android.database.sqlite.SQLiteDatabase,android.net.ipmemorystore.NetworkAttributes) -> findClosestAttributes
    754:755:byte[] getBlob(android.database.Cursor,java.lang.String) -> getBlob
    344:356:long getExpiry(android.database.sqlite.SQLiteDatabase,java.lang.String) -> getExpiry
    759:760:int getInt(android.database.Cursor,java.lang.String,int) -> getInt
    764:765:long getLong(android.database.Cursor,java.lang.String,long) -> getLong
    750:751:java.lang.String getString(android.database.Cursor,java.lang.String) -> getString
    736:745:int getTotalRecordNumber(android.database.sqlite.SQLiteDatabase) -> getTotalRecordNumber
    306:331:android.net.ipmemorystore.NetworkAttributes readNetworkAttributesLine(android.database.Cursor) -> readNetworkAttributesLine
    428:442:byte[] retrieveBlob(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String) -> retrieveBlob
    406:418:android.net.ipmemorystore.NetworkAttributes retrieveNetworkAttributes(android.database.sqlite.SQLiteDatabase,java.lang.String) -> retrieveNetworkAttributes
    398:399:int storeBlob(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,byte[]) -> storeBlob
    372:390:int storeNetworkAttributes(android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.ipmemorystore.NetworkAttributes) -> storeNetworkAttributes
    255:273:android.content.ContentValues toContentValues(android.net.ipmemorystore.NetworkAttributes) -> toContentValues
    283:285:android.content.ContentValues toContentValues(java.lang.String,android.net.ipmemorystore.NetworkAttributes,long) -> toContentValues
    295:299:android.content.ContentValues toContentValues(java.lang.String,java.lang.String,java.lang.String,byte[]) -> toContentValues
    769:769:int vacuum(android.database.sqlite.SQLiteDatabase) -> vacuum
    450:485:void wipeDataUponNetworkReset(android.database.sqlite.SQLiteDatabase) -> wipeDataUponNetworkReset
com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase$CustomCursorFactory -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase$CustomCursorFactory:
    526:527:void <init>(java.util.ArrayList) -> <init>
    534:548:android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery) -> newCursor
com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase$DbHelper -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreDatabase$DbHelper:
    157:158:void <init>(android.content.Context) -> <init>
    223:223:void createTrigger(android.database.sqlite.SQLiteDatabase) -> createTrigger
    164:166:void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    205:212:void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
    185:196:void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService:
    64:64:void <clinit>() -> <clinit>
    88:126:void <init>(android.content.Context) -> <init>
    550:551:boolean checkForInterrupt(android.net.ipmemorystore.IOnStatusListener,com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance) -> checkForInterrupt
    425:425:void delete(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> delete
    451:451:void deleteCluster(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> deleteCluster
    467:467:void factoryReset() -> factoryReset
    269:269:void findL2Key(android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnL2KeyResponseListener) -> findL2Key
    500:500:void fullMaintenance(android.net.ipmemorystore.IOnStatusListener,com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance) -> fullMaintenance
    477:481:long getDbSize() -> getDbSize
    490:490:boolean isDbSizeOverThreshold() -> isDbSizeOverThreshold
    301:301:void isSameNetwork(java.lang.String,java.lang.String,android.net.ipmemorystore.IOnSameL3NetworkResponseListener) -> isSameNetwork
    427:428:void lambda$delete$6(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> lambda$delete$6
    453:455:void lambda$deleteCluster$7(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> lambda$deleteCluster$7
    467:467:void lambda$factoryReset$8() -> lambda$factoryReset$8
    272:281:void lambda$findL2Key$2(android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnL2KeyResponseListener) -> lambda$findL2Key$2
    502:541:void lambda$fullMaintenance$9(android.net.ipmemorystore.IOnStatusListener,com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance) -> lambda$fullMaintenance$9
    304:326:void lambda$isSameNetwork$3(java.lang.String,java.lang.String,android.net.ipmemorystore.IOnSameL3NetworkResponseListener) -> lambda$isSameNetwork$3
    391:404:void lambda$retrieveBlob$5(java.lang.String,android.net.ipmemorystore.IOnBlobRetrievedListener,java.lang.String,java.lang.String) -> lambda$retrieveBlob$5
    350:365:void lambda$retrieveNetworkAttributes$4(java.lang.String,android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener) -> lambda$retrieveNetworkAttributes$4
    204:206:void lambda$storeBlob$1(java.lang.String,java.lang.String,java.lang.String,byte[],android.net.ipmemorystore.IOnStatusListener) -> lambda$storeBlob$1
    177:179:void lambda$storeNetworkAttributes$0(java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.IOnStatusListener) -> lambda$storeNetworkAttributes$0
    146:146:android.net.ipmemorystore.StatusParcelable makeStatus(int) -> makeStatus
    388:388:void retrieveBlob(java.lang.String,java.lang.String,java.lang.String,android.net.ipmemorystore.IOnBlobRetrievedListener) -> retrieveBlob
    347:347:void retrieveNetworkAttributes(java.lang.String,android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener) -> retrieveNetworkAttributes
    201:202:void storeBlob(java.lang.String,java.lang.String,java.lang.String,android.net.ipmemorystore.Blob,android.net.ipmemorystore.IOnStatusListener) -> storeBlob
    174:175:void storeNetworkAttributes(java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnStatusListener) -> storeNetworkAttributes
    228:245:int storeNetworkAttributesAndBlobSync(java.lang.String,android.net.ipmemorystore.NetworkAttributes,java.lang.String,java.lang.String,byte[]) -> storeNetworkAttributesAndBlobSync
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda0 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda0:
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$5eb91bd1bb1d7fb82dd266ab43f286d5049b351a4ea2f797af65166437ea8d06$0.f$0 -> f$0
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$5eb91bd1bb1d7fb82dd266ab43f286d5049b351a4ea2f797af65166437ea8d06$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$5eb91bd1bb1d7fb82dd266ab43f286d5049b351a4ea2f797af65166437ea8d06$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda1 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda1:
    com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$cf070c6e085da76937d958c3e6cd7a1c014c985c6f77da97a3480e6c22e1c716$0.f$2 -> f$2
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$cf070c6e085da76937d958c3e6cd7a1c014c985c6f77da97a3480e6c22e1c716$0.f$0 -> f$0
    android.net.ipmemorystore.IOnStatusListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$cf070c6e085da76937d958c3e6cd7a1c014c985c6f77da97a3480e6c22e1c716$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$cf070c6e085da76937d958c3e6cd7a1c014c985c6f77da97a3480e6c22e1c716$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,android.net.ipmemorystore.IOnStatusListener,com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$cf070c6e085da76937d958c3e6cd7a1c014c985c6f77da97a3480e6c22e1c716$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda2 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda2:
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$32d904f63cda2900217578f01cd0a17c8a63d3105f8a49a9513da05e5261c8c8$0.f$0 -> f$0
    android.net.ipmemorystore.NetworkAttributesParcelable com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$32d904f63cda2900217578f01cd0a17c8a63d3105f8a49a9513da05e5261c8c8$0.f$1 -> f$1
    android.net.ipmemorystore.IOnL2KeyResponseListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$32d904f63cda2900217578f01cd0a17c8a63d3105f8a49a9513da05e5261c8c8$0.f$2 -> f$2
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$32d904f63cda2900217578f01cd0a17c8a63d3105f8a49a9513da05e5261c8c8$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnL2KeyResponseListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$32d904f63cda2900217578f01cd0a17c8a63d3105f8a49a9513da05e5261c8c8$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda3 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda3:
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.f$4 -> f$4
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.f$0 -> f$0
    android.net.ipmemorystore.IOnBlobRetrievedListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.f$2 -> f$2
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.f$3 -> f$3
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,android.net.ipmemorystore.IOnBlobRetrievedListener,java.lang.String,java.lang.String) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2dea725b45996c90bb81b48c0bb0afc8d25b9870b884a92fd612ad63e94767b1$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda4 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda4:
    android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$099fe30153e4b4a500fccfe1da8df7ff91415cc3cb5964698587548fda9a858a$0.f$2 -> f$2
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$099fe30153e4b4a500fccfe1da8df7ff91415cc3cb5964698587548fda9a858a$0.f$0 -> f$0
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$099fe30153e4b4a500fccfe1da8df7ff91415cc3cb5964698587548fda9a858a$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$099fe30153e4b4a500fccfe1da8df7ff91415cc3cb5964698587548fda9a858a$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$099fe30153e4b4a500fccfe1da8df7ff91415cc3cb5964698587548fda9a858a$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda5 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda5:
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.f$0 -> f$0
    android.net.ipmemorystore.NetworkAttributes com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.f$2 -> f$2
    android.net.ipmemorystore.IOnStatusListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.f$3 -> f$3
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,android.net.ipmemorystore.NetworkAttributes,android.net.ipmemorystore.IOnStatusListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$746c04ab44e77e2f3c620b936bb98facf61d314ac751a93c3b0a14810649801f$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda6 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda6:
    android.net.ipmemorystore.IOnSameL3NetworkResponseListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.f$3 -> f$3
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.f$0 -> f$0
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.f$2 -> f$2
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,java.lang.String,android.net.ipmemorystore.IOnSameL3NetworkResponseListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$3249b5b0fa84202ef0bc2ab17957f221cb6a54d2defb90151413e6f75f9b0c8e$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda7 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda7:
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$0 -> f$0
    android.net.ipmemorystore.IOnStatusListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$5 -> f$5
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$2 -> f$2
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$3 -> f$3
    byte[] com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$4 -> f$4
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,java.lang.String,java.lang.String,byte[],android.net.ipmemorystore.IOnStatusListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$9709785bb248e418dfcc4144c88d1d24a654701d84f31e5c44d72c8522f61f60$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda8 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda8:
    android.net.ipmemorystore.IOnStatusAndCountListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.f$3 -> f$3
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.f$0 -> f$0
    boolean com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.f$2 -> f$2
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$648098350c3130984935d39c0497f512629d3d90f11a5dd1e0a9496567b75c00$0.run() -> run
com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda9 -> com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$ExternalSyntheticLambda9:
    android.net.ipmemorystore.IOnStatusAndCountListener com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.f$3 -> f$3
    com.android.server.connectivity.ipmemorystore.IpMemoryStoreService com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.f$0 -> f$0
    boolean com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.f$2 -> f$2
    java.lang.String com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.f$1 -> f$1
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.<init>(com.android.server.connectivity.ipmemorystore.IpMemoryStoreService,java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener) -> <init>
    void com.android.server.connectivity.ipmemorystore.IpMemoryStoreService$$InternalSyntheticLambda$0$2d99e341e22376ed9a4b50c0732afc3c94b183b65eab28d71d019a22b1ad05fa$0.run() -> run
com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService -> com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService:
    68:68:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    39:39:java.util.concurrent.CopyOnWriteArrayList access$000() -> access$000
    74:82:boolean onStartJob(android.app.job.JobParameters) -> onStartJob
    114:117:boolean onStopJob(android.app.job.JobParameters) -> onStopJob
    126:141:void schedule(android.content.Context,com.android.server.connectivity.ipmemorystore.IpMemoryStoreService) -> schedule
com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$1 -> com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$1:
    82:82:void <init>(com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService,com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance,android.app.job.JobParameters) -> <init>
    85:91:void onComplete(android.net.ipmemorystore.StatusParcelable) -> onComplete
com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance -> com.android.server.connectivity.ipmemorystore.RegularMaintenanceJobService$InterruptMaintenance:
    50:52:void <init>(int) -> <init>
    56:56:int getJobId() -> getJobId
    64:64:boolean isInterrupted() -> isInterrupted
    60:60:void setInterrupted(boolean) -> setInterrupted
com.android.server.connectivity.ipmemorystore.RelevanceUtils -> com.android.server.connectivity.ipmemorystore.RelevanceUtils:
    209:217:void <clinit>() -> <clinit>
    303:304:long bumpExpiryDate(long) -> bumpExpiryDate
    276:280:long bumpExpiryDuration(long) -> bumpExpiryDuration
    219:219:double logF(double) -> logF
    224:224:double powF(double) -> powF
com.android.server.connectivity.ipmemorystore.StatusAndCount -> com.android.server.connectivity.ipmemorystore.StatusAndCount:
    25:27:void <init>(int,int) -> <init>
com.android.server.connectivity.ipmemorystore.Utils -> com.android.server.connectivity.ipmemorystore.Utils:
    50:50:void appendByteArray(java.lang.StringBuilder,byte[],int,int) -> appendByteArray
    34:43:java.lang.String byteArrayToString(byte[]) -> byteArrayToString
com.android.server.connectivity.nano.CellularData -> com.android.server.connectivity.nano.CellularData:
    38:39:void <init>() -> <init>
    43:48:com.android.server.connectivity.nano.CellularData clear() -> clear
    75:94:int computeSerializedSize() -> computeSerializedSize
    55:70:void writeTo(com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano) -> writeTo
com.android.server.connectivity.nano.DnsEvent -> com.android.server.connectivity.nano.DnsEvent:
    29:30:void <init>() -> <init>
    34:36:com.android.server.connectivity.nano.DnsEvent clear() -> clear
    58:77:int computeSerializedSize() -> computeSerializedSize
    43:53:void writeTo(com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano) -> writeTo
com.android.server.connectivity.nano.WifiData -> com.android.server.connectivity.nano.WifiData:
    29:30:void <init>() -> <init>
    34:36:com.android.server.connectivity.nano.WifiData clear() -> clear
    54:61:int computeSerializedSize() -> computeSerializedSize
    43:49:void writeTo(com.android.networkstack.protobuf.nano.CodedOutputByteBufferNano) -> writeTo
com.android.server.util.PermissionUtil -> com.android.server.util.PermissionUtil:
    37:39:void <clinit>() -> <clinit>
    67:75:void checkConsistentSystemPid() -> checkConsistentSystemPid
    120:123:void checkDumpPermission() -> checkDumpPermission
    46:55:void enforceNetworkStackCallingPermission() -> enforceNetworkStackCallingPermission
    132:132:boolean isDebuggableBuild() -> isDebuggableBuild
    80:80:boolean isTestUid(int) -> isTestUid
    107:107:boolean lambda$setTestUid$0(android.content.pm.PackageManager,java.lang.String) -> lambda$setTestUid$0
    89:112:void setTestUid(android.content.Context,int) -> setTestUid
com.android.server.util.PermissionUtil$$ExternalSyntheticLambda0 -> com.android.server.util.PermissionUtil$$ExternalSyntheticLambda0:
    android.content.pm.PackageManager com.android.server.util.PermissionUtil$$InternalSyntheticLambda$0$cbaa28d7572cd5356b70e1b9b107902635d2937ee015e4ec207e7c27d7c51f0f$0.f$0 -> f$0
    void com.android.server.util.PermissionUtil$$InternalSyntheticLambda$0$cbaa28d7572cd5356b70e1b9b107902635d2937ee015e4ec207e7c27d7c51f0f$0.<init>(android.content.pm.PackageManager) -> <init>
    boolean com.android.server.util.PermissionUtil$$InternalSyntheticLambda$0$cbaa28d7572cd5356b70e1b9b107902635d2937ee015e4ec207e7c27d7c51f0f$0.test(java.lang.Object) -> test
