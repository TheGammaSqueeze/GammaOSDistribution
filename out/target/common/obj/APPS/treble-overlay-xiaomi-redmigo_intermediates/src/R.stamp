/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.xiaomi.redmigo;

public final class R {
  public static final class array {
    /**
     * Array of output values for LCD backlight corresponding to the LUX values
     * in the config_autoBrightnessLevels array.  This array should have size one greater
     * than the size of the config_autoBrightnessLevels array.
     * The brightness values must be between 0 and 255 and be non-decreasing.
     * This must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLcdBacklightValues=0x7f010000;
    /**
     * Array of light sensor LUX values to define our levels for auto backlight brightness support.
     * The N entries of this array define N + 1 control points as follows:
     * (1-based arrays)
     * Point 1:            (0, value[1]):             lux <= 0
     * Point 2:     (level[1], value[2]):  0        < lux <= level[1]
     * Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
     * ...
     * Point N+1: (level[N], value[N+1]):  level[N] < lux
     * The control points must be strictly increasing.  Each control point
     * corresponds to an entry in the brightness backlight values arrays.
     * For example, if LUX == level[1] (first element of the levels array)
     * then the brightness will be determined by value[2] (second element
     * of the brightness values array).
     * Spline interpolation is used to determine the auto-brightness
     * backlight values for LUX levels between these control points.
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * Configure mobile tcp buffer sizes in the form:
     * rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
     * If no value is found for the rat-name in use, the system default will be applied.
     */
    public static final int config_mobile_tcp_buffers=0x7f010002;
    /**
     * Array of ConnectivityManager.TYPE_xxxx values allowable for tethering.
     * Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
     * [1,7,0] for TYPE_WIFI, TYPE_BLUETOOTH, and TYPE_MOBILE.
     * This list is also modified by code within the framework, including:
     * - TYPE_ETHERNET (9) is prepended to this list, and
     * - the return value of TelephonyManager.getTetherApnRequired()
     * determines how the array is further modified:
     * * DUN_REQUIRED
     * TYPE_MOBILE is removed (if present)
     * TYPE_MOBILE_HIPRI is removed (if present)
     * TYPE_MOBILE_DUN is appended (if not already present)
     * * DUN_NOT_REQUIRED
     * TYPE_MOBILE_DUN is removed (if present)
     * TYPE_MOBILE is appended (if not already present)
     * TYPE_MOBILE_HIPRI is appended (if not already present)
     * * DUN_UNSPECIFIED
     * if any of TYPE_MOBILE{,_DUN,_HIPRI} are present:
     * change nothing
     * else:
     * TYPE_MOBILE is appended
     * TYPE_MOBILE_HIPRI is appended
     * For other changes applied to this list, now and in the future, see
     * com.android.server.connectivity.tethering.TetheringConfiguration.
     * Note also: the order of this is important. The first upstream type
     * for which a satisfying network exists is used.
     */
    public static final int config_tether_upstream_types=0x7f010003;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * USB interfaces.  If the device doesn't want to support tethering over USB this should
     * be empty.  An example would be "usb.*"
     */
    public static final int config_tether_usb_regexs=0x7f010004;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
     * should be empty.  An example would be "softap.*"
     */
    public static final int config_tether_wifi_regexs=0x7f010005;
  }
  public static final class bool {
    /**
     * Flag indicating whether the we should enable the automatic brightness in Settings.
     * Software implementation will be used if config_hardware_auto_brightness_available is not set
     */
    public static final int config_automatic_brightness_available=0x7f020000;
    /**
     * Boolean indicating if current platform supports BLE peripheral mode
     */
    public static final int config_bluetooth_le_peripheral_mode_supported=0x7f020001;
    /**
     * Flag specifying whether VT should be available for carrier: independent of
     * carrier provisioning. If false: hard disabled. If true: then depends on carrier
     * provisioning, availability etc
     */
    public static final int config_device_vt_available=0x7f020002;
    /**
     * If true, the doze component is not started until after the screen has been
     * turned off and the screen off animation has been performed.
     */
    public static final int config_dozeAfterScreenOff=0x7f020003;
    /**
     * Is the device capable of hot swapping an UICC Card
     */
    public static final int config_hotswapCapable=0x7f020004;
    /**
     * Boolean indicating whether the HWC setColorTransform function can be performed efficiently
     * in hardware.
     */
    public static final int config_setColorTransformAccelerated=0x7f020005;
    /**
     * Flag indicating if the speed up audio on mt call code should be executed
     */
    public static final int config_speed_up_audio_on_mt_calls=0x7f020006;
    /**
     * Whether device supports double tap to wake
     */
    public static final int config_supportDoubleTapWake=0x7f020007;
    /**
     * Indicate whether to allow the device to suspend when the screen is off
     * due to the proximity sensor.  This resource should only be set to true
     * if the sensor HAL correctly handles the proximity sensor as a wake-up source.
     * Otherwise, the device may fail to wake out of suspend reliably.
     * The default is false.
     */
    public static final int config_suspendWhenScreenOffDueToProximity=0x7f020008;
    /**
     * Config determines whether to update phone object when voice registration
     * state changes. Voice radio tech change will always trigger an update of
     * phone object irrespective of this config
     */
    public static final int config_switch_phone_on_voice_reg_state_change=0x7f020009;
    /**
     * When true use the linux /dev/input/event subsystem to detect the switch changes
     * on the headphone/microphone jack. When false use the older uevent framework.
     */
    public static final int config_useDevInputEventForAudioJack=0x7f02000a;
    /**
     * Set to true if the wifi display supports compositing content stored
     * in gralloc protected buffers.  For this to be true, there must exist
     * a protected hardware path for surface flinger to composite and send
     * protected buffers to the wifi display video encoder.
     * If this flag is false, we advise applications not to use protected
     * buffers (if possible) when presenting content to a wifi display because
     * the content may be blanked.
     * This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
     * flag is set for wifi displays.
     */
    public static final int config_wifiDisplaySupportsProtectedBuffers=0x7f02000b;
    /**
     * Boolean indicating whether the wifi chipset supports background scanning mechanism.
     * This mechanism allows the host to remain in suspend state and the dongle to actively
     * scan and wake the host when a configured SSID is detected by the dongle. This chipset
     * capability can provide power savings when wifi needs to be always kept on.
     */
    public static final int config_wifi_background_scan_support=0x7f02000c;
    /**
     * Wifi driver supports batched scan
     */
    public static final int config_wifi_batched_scan_supported=0x7f02000d;
    /**
     * Boolean indicating whether or not wifi firmware debugging is enabled
     */
    public static final int config_wifi_enable_wifi_firmware_debugging=0x7f02000e;
  }
  public static final class integer {
    /**
     * Stability requirements in milliseconds for accepting a new brightness level.  This is used
     * for debouncing the light sensor.  Different constants are used to debounce the light sensor
     * when adapting to brighter or darker environments.  This parameter controls how quickly
     * brightness changes occur in response to an observed change in light level that exceeds the
     * hysteresis threshold.
     */
    public static final int config_autoBrightnessBrighteningLightDebounce=0x7f030000;
    public static final int config_autoBrightnessDarkeningLightDebounce=0x7f030001;
    /**
     * Operating volatage for bluetooth controller. 0 by default
     */
    public static final int config_bluetooth_operating_voltage_mv=0x7f030002;
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f030003;
    /**
     * Screen brightness used to dim the screen while dozing in a very low power state.
     * May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDoze=0x7f030004;
    /**
     * Minimum screen brightness setting allowed by the power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f030005;
  }
  public static final class xml {
    public static final int power_profile=0x7f040000;
  }
}