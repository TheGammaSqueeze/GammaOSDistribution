/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package me.phh.treble.overlay.samsung.a20;

public final class R {
  public static final class array {
    /**
     * Array of output values for LCD backlight corresponding to the lux values
     * in the config_autoBrightnessLevels array.  This array should have size one greater
     * than the size of the config_autoBrightnessLevels array.
     * The brightness values must be between 0 and 255 and be non-decreasing.
     * This must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLcdBacklightValues=0x7f010000;
    /**
     * Array of light sensor lux values to define our levels for auto backlight brightness support.
     * The N entries of this array define N + 1 control points as follows:
     * (1-based arrays)
     * Point 1:            (0, value[1]):             lux <= 0
     * Point 2:     (level[1], value[2]):  0        < lux <= level[1]
     * Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
     * ...
     * Point N+1: (level[N], value[N+1]):  level[N] < lux
     * The control points must be strictly increasing.  Each control point
     * corresponds to an entry in the brightness backlight values arrays.
     * For example, if lux == level[1] (first element of the levels array)
     * then the brightness will be determined by value[2] (second element
     * of the brightness values array).
     * Spline interpolation is used to determine the auto-brightness
     * backlight values for lux levels between these control points.
     * Must be overridden in platform specific overlays
     */
    public static final int config_autoBrightnessLevels=0x7f010001;
    /**
     * Configure mobile tcp buffer sizes in the form:
     * rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
     * If no value is found for the rat-name in use, the system default will be applied.
     */
    public static final int config_mobile_tcp_buffers=0x7f010002;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * USB interfaces.  If the device doesn't want to support tethering over USB this should
     * be empty.  An example would be "usb.*"
     */
    public static final int config_tether_usb_regexs=0x7f010003;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
     * should be empty.  An example would be "softap.*"
     */
    public static final int config_tether_wifi_regexs=0x7f010004;
    /**
     * NOTE: The telephony module is no longer reading the configuration below for available
     * APN types.  The set of APN types and relevant settings are specified within the telephony
     * module and are non-configurable.  Whether or not data connectivity over a cellular network
     * is available at all is controlled by the flag: config_moble_data_capable.
     */
    public static final int networkAttributes=0x7f010005;
  }
  public static final class bool {
    /**
     * Control whether the always on display mode is available. This should only be enabled on
     * devices where the display has been tuned to be power efficient in DOZE and/or DOZE_SUSPEND
     * states.
     */
    public static final int config_dozeAlwaysOnDisplayAvailable=0x7f020000;
    /**
     * Whether the display cutout region of the main built-in display should be forced to
     * black in software (to avoid aliasing or emulate a cutout that is not physically existent).
     */
    public static final int config_fillMainBuiltInDisplayCutout=0x7f020001;
    /**
     * Whether a software navigation bar should be shown
     */
    public static final int config_showNavigationBar=0x7f020002;
    /**
     * When true use the linux /dev/input/event subsystem to detect the switch changes
     * on the headphone/microphone jack. When false use the older uevent framework.
     */
    public static final int config_useDevInputEventForAudioJack=0x7f020003;
    /**
     * Boolean indicating whether the wifi chipset has background scan support
     */
    public static final int config_wifi_background_scan_support=0x7f020004;
    /**
     * True if the firmware supports connected MAC randomization
     */
    public static final int config_wifi_connected_mac_randomization_supported=0x7f020005;
    /**
     * Boolean indicating whether 802.11r Fast BSS Transition is enabled on this platform
     */
    public static final int config_wifi_fast_bss_transition_enabled=0x7f020006;
  }
  public static final class dimen {
    /**
     * Radius of the software rounded corners.
     */
    public static final int rounded_corner_radius_bottom=0x7f030000;
    public static final int rounded_corner_radius_top=0x7f030001;
    /**
     * Height of the status bar
     */
    public static final int status_bar_height=0x7f030002;
    public static final int status_bar_height_portrait=0x7f030003;
  }
  public static final class integer {
    /**
     * Screen brightness used to dim the screen when the user activity
     * timeout expires.  May be less than the minimum allowed brightness setting
     * that can be set by the user.
     */
    public static final int config_screenBrightnessDim=0x7f040000;
    /**
     * Default screen brightness setting.
     * Must be in the range specified by minimum and maximum.
     */
    public static final int config_screenBrightnessSettingDefault=0x7f040001;
    /**
     * Maximum screen brightness allowed by the power manager.
     * The user is forbidden from setting the brightness above this level.
     */
    public static final int config_screenBrightnessSettingMaximum=0x7f040002;
    /**
     * Minimum screen brightness setting allowed by power manager.
     * The user is forbidden from setting the brightness below this level.
     */
    public static final int config_screenBrightnessSettingMinimum=0x7f040003;
  }
  public static final class string {
    /**
     * The bounding path of the cutout region of the main built-in display.
     * Must either be empty if there is no cutout region, or a string that is parsable by
     * {@link android.util.PathParser}.
     * The path is assumed to be specified in display coordinates with pixel units and in
     * the display's native orientation, with the origin of the coordinate system at the
     * center top of the display. Optionally, you can append either `@left` or `@right` to the
     * end of the path string, in order to change the path origin to either the top left,
     * or top right of the display.
     * To facilitate writing device-independent emulation overlays, the marker `@dp` can be
     * appended after the path string to interpret coordinates in dp instead of px units.
     * Note that a physical cutout should be configured in pixels for the best results.
     * Example for a 10px x 10px square top-center cutout:
     * <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z</string>
     * Example for a 10dp x 10dp square top-center cutout:
     * <string ...>M -5,0 L -5,10 L 5,10 L 5,0 Z @dp</string>
     * @see https://www.w3.org/TR/SVG/paths.html#PathData
     */
    public static final int config_mainBuiltInDisplayCutout=0x7f050000;
  }
  public static final class xml {
    public static final int power_profile=0x7f060000;
  }
}