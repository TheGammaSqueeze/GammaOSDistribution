#include <iostream>

#include "thread_state.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ThreadState rhs) {
  switch (rhs) {
    case kTerminated: os << "Terminated"; break;
    case kRunnable: os << "Runnable"; break;
    case kTimedWaiting: os << "TimedWaiting"; break;
    case kSleeping: os << "Sleeping"; break;
    case kBlocked: os << "Blocked"; break;
    case kWaiting: os << "Waiting"; break;
    case kWaitingForLockInflation: os << "WaitingForLockInflation"; break;
    case kWaitingForTaskProcessor: os << "WaitingForTaskProcessor"; break;
    case kWaitingForGcToComplete: os << "WaitingForGcToComplete"; break;
    case kWaitingForCheckPointsToRun: os << "WaitingForCheckPointsToRun"; break;
    case kWaitingPerformingGc: os << "WaitingPerformingGc"; break;
    case kWaitingForDebuggerSend: os << "WaitingForDebuggerSend"; break;
    case kWaitingForDebuggerToAttach: os << "WaitingForDebuggerToAttach"; break;
    case kWaitingInMainDebuggerLoop: os << "WaitingInMainDebuggerLoop"; break;
    case kWaitingForDebuggerSuspension: os << "WaitingForDebuggerSuspension"; break;
    case kWaitingForJniOnLoad: os << "WaitingForJniOnLoad"; break;
    case kWaitingForSignalCatcherOutput: os << "WaitingForSignalCatcherOutput"; break;
    case kWaitingInMainSignalCatcherLoop: os << "WaitingInMainSignalCatcherLoop"; break;
    case kWaitingForDeoptimization: os << "WaitingForDeoptimization"; break;
    case kWaitingForMethodTracingStart: os << "WaitingForMethodTracingStart"; break;
    case kWaitingForVisitObjects: os << "WaitingForVisitObjects"; break;
    case kWaitingForGetObjectsAllocated: os << "WaitingForGetObjectsAllocated"; break;
    case kWaitingWeakGcRootRead: os << "WaitingWeakGcRootRead"; break;
    case kWaitingForGcThreadFlip: os << "WaitingForGcThreadFlip"; break;
    case kNativeForAbort: os << "NativeForAbort"; break;
    case kStarting: os << "Starting"; break;
    case kNative: os << "Native"; break;
    case kSuspended: os << "Suspended"; break;
    default: os << "ThreadState[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

