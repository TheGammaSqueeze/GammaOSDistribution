#include <iostream>

#include "base/locks.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, LockLevel rhs) {
  switch (rhs) {
    case kLoggingLock: os << "LoggingLock"; break;
    case kSwapMutexesLock: os << "SwapMutexesLock"; break;
    case kUnexpectedSignalLock: os << "UnexpectedSignalLock"; break;
    case kThreadSuspendCountLock: os << "ThreadSuspendCountLock"; break;
    case kAbortLock: os << "AbortLock"; break;
    case kJniIdLock: os << "JniIdLock"; break;
    case kNativeDebugInterfaceLock: os << "NativeDebugInterfaceLock"; break;
    case kSignalHandlingLock: os << "SignalHandlingLock"; break;
    case kGenericBottomLock: os << "GenericBottomLock"; break;
    case kThreadWaitWakeLock: os << "ThreadWaitWakeLock"; break;
    case kJdwpAdbStateLock: os << "JdwpAdbStateLock"; break;
    case kJdwpSocketLock: os << "JdwpSocketLock"; break;
    case kRegionSpaceRegionLock: os << "RegionSpaceRegionLock"; break;
    case kMarkSweepMarkStackLock: os << "MarkSweepMarkStackLock"; break;
    case kThreadWaitLock: os << "ThreadWaitLock"; break;
    case kCHALock: os << "CHALock"; break;
    case kJitCodeCacheLock: os << "JitCodeCacheLock"; break;
    case kRosAllocGlobalLock: os << "RosAllocGlobalLock"; break;
    case kRosAllocBracketLock: os << "RosAllocBracketLock"; break;
    case kRosAllocBulkFreeLock: os << "RosAllocBulkFreeLock"; break;
    case kAllocSpaceLock: os << "AllocSpaceLock"; break;
    case kTaggingLockLevel: os << "TaggingLockLevel"; break;
    case kTransactionLogLock: os << "TransactionLogLock"; break;
    case kCustomTlsLock: os << "CustomTlsLock"; break;
    case kJniFunctionTableLock: os << "JniFunctionTableLock"; break;
    case kJniWeakGlobalsLock: os << "JniWeakGlobalsLock"; break;
    case kJniGlobalsLock: os << "JniGlobalsLock"; break;
    case kReferenceQueueSoftReferencesLock: os << "ReferenceQueueSoftReferencesLock"; break;
    case kReferenceQueuePhantomReferencesLock: os << "ReferenceQueuePhantomReferencesLock"; break;
    case kReferenceQueueFinalizerReferencesLock: os << "ReferenceQueueFinalizerReferencesLock"; break;
    case kReferenceQueueWeakReferencesLock: os << "ReferenceQueueWeakReferencesLock"; break;
    case kReferenceQueueClearedReferencesLock: os << "ReferenceQueueClearedReferencesLock"; break;
    case kReferenceProcessorLock: os << "ReferenceProcessorLock"; break;
    case kJitDebugInterfaceLock: os << "JitDebugInterfaceLock"; break;
    case kBumpPointerSpaceBlockLock: os << "BumpPointerSpaceBlockLock"; break;
    case kArenaPoolLock: os << "ArenaPoolLock"; break;
    case kInternTableLock: os << "InternTableLock"; break;
    case kOatFileSecondaryLookupLock: os << "OatFileSecondaryLookupLock"; break;
    case kHostDlOpenHandlesLock: os << "HostDlOpenHandlesLock"; break;
    case kVerifierDepsLock: os << "VerifierDepsLock"; break;
    case kOatFileManagerLock: os << "OatFileManagerLock"; break;
    case kTracingUniqueMethodsLock: os << "TracingUniqueMethodsLock"; break;
    case kTracingStreamingLock: os << "TracingStreamingLock"; break;
    case kClassLoaderClassesLock: os << "ClassLoaderClassesLock"; break;
    case kDefaultMutexLevel: os << "DefaultMutexLevel"; break;
    case kDexLock: os << "DexLock"; break;
    case kMarkSweepLargeObjectLock: os << "MarkSweepLargeObjectLock"; break;
    case kJdwpObjectRegistryLock: os << "JdwpObjectRegistryLock"; break;
    case kModifyLdtLock: os << "ModifyLdtLock"; break;
    case kAllocatedThreadIdsLock: os << "AllocatedThreadIdsLock"; break;
    case kMonitorPoolLock: os << "MonitorPoolLock"; break;
    case kClassLinkerClassesLock: os << "ClassLinkerClassesLock"; break;
    case kDexToDexCompilerLock: os << "DexToDexCompilerLock"; break;
    case kSubtypeCheckLock: os << "SubtypeCheckLock"; break;
    case kBreakpointLock: os << "BreakpointLock"; break;
    case kPostMonitorLock: os << "PostMonitorLock"; break;
    case kMonitorLock: os << "MonitorLock"; break;
    case kMonitorListLock: os << "MonitorListLock"; break;
    case kJniLoadLibraryLock: os << "JniLoadLibraryLock"; break;
    case kThreadListLock: os << "ThreadListLock"; break;
    case kAllocTrackerLock: os << "AllocTrackerLock"; break;
    case kDeoptimizationLock: os << "DeoptimizationLock"; break;
    case kProfilerLock: os << "ProfilerLock"; break;
    case kJdwpShutdownLock: os << "JdwpShutdownLock"; break;
    case kJdwpEventListLock: os << "JdwpEventListLock"; break;
    case kJdwpAttachLock: os << "JdwpAttachLock"; break;
    case kJdwpStartLock: os << "JdwpStartLock"; break;
    case kRuntimeThreadPoolLock: os << "RuntimeThreadPoolLock"; break;
    case kRuntimeShutdownLock: os << "RuntimeShutdownLock"; break;
    case kTraceLock: os << "TraceLock"; break;
    case kHeapBitmapLock: os << "HeapBitmapLock"; break;
    case kPostMutatorTopLockLevel: os << "PostMutatorTopLockLevel"; break;
    case kMutatorLock: os << "MutatorLock"; break;
    case kInstrumentEntrypointsLock: os << "InstrumentEntrypointsLock"; break;
    case kPostUserCodeSuspensionTopLevelLock: os << "PostUserCodeSuspensionTopLevelLock"; break;
    case kUserCodeSuspensionLock: os << "UserCodeSuspensionLock"; break;
    case kZygoteCreationLock: os << "ZygoteCreationLock"; break;
    case kTopLockLevel: os << "TopLockLevel"; break;
    case kLockLevelCount: os << "LockLevelCount"; break;
    default: os << "LockLevel[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

