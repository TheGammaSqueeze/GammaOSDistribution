#include <iostream>

#include "stack.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, StackVisitor::StackWalkKind rhs) {
  switch (rhs) {
    case StackVisitor::StackWalkKind::kIncludeInlinedFrames: os << "IncludeInlinedFrames"; break;
    case StackVisitor::StackWalkKind::kSkipInlinedFrames: os << "SkipInlinedFrames"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, VRegKind rhs) {
  switch (rhs) {
    case kReferenceVReg: os << "ReferenceVReg"; break;
    case kIntVReg: os << "IntVReg"; break;
    case kFloatVReg: os << "FloatVReg"; break;
    case kLongLoVReg: os << "LongLoVReg"; break;
    case kLongHiVReg: os << "LongHiVReg"; break;
    case kDoubleLoVReg: os << "DoubleLoVReg"; break;
    case kDoubleHiVReg: os << "DoubleHiVReg"; break;
    case kConstant: os << "Constant"; break;
    case kImpreciseConstant: os << "ImpreciseConstant"; break;
    case kUndefined: os << "Undefined"; break;
    default: os << "VRegKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, StackVisitor::CountTransitions rhs) {
  switch (rhs) {
    case StackVisitor::CountTransitions::kYes: os << "Yes"; break;
    case StackVisitor::CountTransitions::kNo: os << "No"; break;
  }
  return os;
}
}  // namespace art

