#include <iostream>

#include "reflective_value_visitor.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ReflectionSourceType rhs) {
  switch (rhs) {
    case kSourceUnknown: os << "SourceUnknown"; break;
    case kSourceJavaLangReflectExecutable: os << "SourceJavaLangReflectExecutable"; break;
    case kSourceJavaLangReflectField: os << "SourceJavaLangReflectField"; break;
    case kSourceJavaLangInvokeMethodHandle: os << "SourceJavaLangInvokeMethodHandle"; break;
    case kSourceJavaLangInvokeFieldVarHandle: os << "SourceJavaLangInvokeFieldVarHandle"; break;
    case kSourceThreadHandleScope: os << "SourceThreadHandleScope"; break;
    case kSourceJniFieldId: os << "SourceJniFieldId"; break;
    case kSourceJniMethodId: os << "SourceJniMethodId"; break;
    case kSourceDexCacheResolvedMethod: os << "SourceDexCacheResolvedMethod"; break;
    case kSourceDexCacheResolvedField: os << "SourceDexCacheResolvedField"; break;
    case kSourceMiscInternal: os << "SourceMiscInternal"; break;
    default: os << "ReflectionSourceType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

