#include <iostream>

#include "verifier/verifier_enums.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace verifier {
std::ostream& operator<<(std::ostream& os, VerifyError rhs) {
  switch (rhs) {
    case VERIFY_ERROR_BAD_CLASS_HARD: os << "VERIFY_ERROR_BAD_CLASS_HARD"; break;
    case VERIFY_ERROR_BAD_CLASS_SOFT: os << "VERIFY_ERROR_BAD_CLASS_SOFT"; break;
    case VERIFY_ERROR_NO_CLASS: os << "VERIFY_ERROR_NO_CLASS"; break;
    case VERIFY_ERROR_UNRESOLVED_TYPE_CHECK: os << "VERIFY_ERROR_UNRESOLVED_TYPE_CHECK"; break;
    case VERIFY_ERROR_NO_METHOD: os << "VERIFY_ERROR_NO_METHOD"; break;
    case VERIFY_ERROR_ACCESS_CLASS: os << "VERIFY_ERROR_ACCESS_CLASS"; break;
    case VERIFY_ERROR_ACCESS_FIELD: os << "VERIFY_ERROR_ACCESS_FIELD"; break;
    case VERIFY_ERROR_ACCESS_METHOD: os << "VERIFY_ERROR_ACCESS_METHOD"; break;
    case VERIFY_ERROR_CLASS_CHANGE: os << "VERIFY_ERROR_CLASS_CHANGE"; break;
    case VERIFY_ERROR_INSTANTIATION: os << "VERIFY_ERROR_INSTANTIATION"; break;
    case VERIFY_ERROR_FORCE_INTERPRETER: os << "VERIFY_ERROR_FORCE_INTERPRETER"; break;
    case VERIFY_ERROR_LOCKING: os << "VERIFY_ERROR_LOCKING"; break;
    case VERIFY_ERROR_SKIP_COMPILER: os << "VERIFY_ERROR_SKIP_COMPILER"; break;
    default: os << "VerifyError[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace verifier
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace verifier {
std::ostream& operator<<(std::ostream& os, MethodType rhs) {
  switch (rhs) {
    case METHOD_UNKNOWN: os << "METHOD_UNKNOWN"; break;
    case METHOD_DIRECT: os << "METHOD_DIRECT"; break;
    case METHOD_STATIC: os << "METHOD_STATIC"; break;
    case METHOD_VIRTUAL: os << "METHOD_VIRTUAL"; break;
    case METHOD_SUPER: os << "METHOD_SUPER"; break;
    case METHOD_INTERFACE: os << "METHOD_INTERFACE"; break;
    case METHOD_POLYMORPHIC: os << "METHOD_POLYMORPHIC"; break;
    default: os << "MethodType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace verifier
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace verifier {
std::ostream& operator<<(std::ostream& os, VerifyMode rhs) {
  switch (rhs) {
    case VerifyMode::kNone: os << "None"; break;
    case VerifyMode::kEnable: os << "Enable"; break;
    case VerifyMode::kSoftFail: os << "SoftFail"; break;
  }
  return os;
}
}  // namespace verifier
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace verifier {
std::ostream& operator<<(std::ostream& os, HardFailLogMode rhs) {
  switch (rhs) {
    case HardFailLogMode::kLogNone: os << "LogNone"; break;
    case HardFailLogMode::kLogVerbose: os << "LogVerbose"; break;
    case HardFailLogMode::kLogWarning: os << "LogWarning"; break;
    case HardFailLogMode::kLogInternalFatal: os << "LogInternalFatal"; break;
  }
  return os;
}
}  // namespace verifier
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace verifier {
std::ostream& operator<<(std::ostream& os, FailureKind rhs) {
  switch (rhs) {
    case FailureKind::kNoFailure: os << "NoFailure"; break;
    case FailureKind::kAccessChecksFailure: os << "AccessChecksFailure"; break;
    case FailureKind::kTypeChecksFailure: os << "TypeChecksFailure"; break;
    case FailureKind::kSoftFailure: os << "SoftFailure"; break;
    case FailureKind::kHardFailure: os << "HardFailure"; break;
  }
  return os;
}
}  // namespace verifier
}  // namespace art

