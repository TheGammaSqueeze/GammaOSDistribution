#include <iostream>

#include "image.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ImageHeader::ImageSections rhs) {
  switch (rhs) {
    case ImageHeader::kSectionObjects: os << "SectionObjects"; break;
    case ImageHeader::kSectionArtFields: os << "SectionArtFields"; break;
    case ImageHeader::kSectionArtMethods: os << "SectionArtMethods"; break;
    case ImageHeader::kSectionRuntimeMethods: os << "SectionRuntimeMethods"; break;
    case ImageHeader::kSectionImTables: os << "SectionImTables"; break;
    case ImageHeader::kSectionIMTConflictTables: os << "SectionIMTConflictTables"; break;
    case ImageHeader::kSectionInternedStrings: os << "SectionInternedStrings"; break;
    case ImageHeader::kSectionClassTable: os << "SectionClassTable"; break;
    case ImageHeader::kSectionStringReferenceOffsets: os << "SectionStringReferenceOffsets"; break;
    case ImageHeader::kSectionMetadata: os << "SectionMetadata"; break;
    case ImageHeader::kSectionImageBitmap: os << "SectionImageBitmap"; break;
    case ImageHeader::kSectionCount: os << "SectionCount"; break;
    default: os << "ImageHeader::ImageSections[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ImageHeader::BootImageLiveObjects rhs) {
  switch (rhs) {
    case ImageHeader::kOomeWhenThrowingException: os << "OomeWhenThrowingException"; break;
    case ImageHeader::kOomeWhenThrowingOome: os << "OomeWhenThrowingOome"; break;
    case ImageHeader::kOomeWhenHandlingStackOverflow: os << "OomeWhenHandlingStackOverflow"; break;
    case ImageHeader::kNoClassDefFoundError: os << "NoClassDefFoundError"; break;
    case ImageHeader::kClearedJniWeakSentinel: os << "ClearedJniWeakSentinel"; break;
    case ImageHeader::kIntrinsicObjectsStart: os << "IntrinsicObjectsStart"; break;
    default: os << "ImageHeader::BootImageLiveObjects[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ImageHeader::ImageMethod rhs) {
  switch (rhs) {
    case ImageHeader::kResolutionMethod: os << "ResolutionMethod"; break;
    case ImageHeader::kImtConflictMethod: os << "ImtConflictMethod"; break;
    case ImageHeader::kImtUnimplementedMethod: os << "ImtUnimplementedMethod"; break;
    case ImageHeader::kSaveAllCalleeSavesMethod: os << "SaveAllCalleeSavesMethod"; break;
    case ImageHeader::kSaveRefsOnlyMethod: os << "SaveRefsOnlyMethod"; break;
    case ImageHeader::kSaveRefsAndArgsMethod: os << "SaveRefsAndArgsMethod"; break;
    case ImageHeader::kSaveEverythingMethod: os << "SaveEverythingMethod"; break;
    case ImageHeader::kSaveEverythingMethodForClinit: os << "SaveEverythingMethodForClinit"; break;
    case ImageHeader::kSaveEverythingMethodForSuspendCheck: os << "SaveEverythingMethodForSuspendCheck"; break;
    case ImageHeader::kImageMethodsCount: os << "ImageMethodsCount"; break;
    default: os << "ImageHeader::ImageMethod[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ImageHeader::ImageRoot rhs) {
  switch (rhs) {
    case ImageHeader::kDexCaches: os << "DexCaches"; break;
    case ImageHeader::kClassRoots: os << "ClassRoots"; break;
    case ImageHeader::kSpecialRoots: os << "SpecialRoots"; break;
    case ImageHeader::kImageRootsMax: os << "ImageRootsMax"; break;
    default: os << "ImageHeader::ImageRoot[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, ImageHeader::StorageMode rhs) {
  switch (rhs) {
    case ImageHeader::kStorageModeUncompressed: os << "StorageModeUncompressed"; break;
    case ImageHeader::kStorageModeLZ4: os << "StorageModeLZ4"; break;
    case ImageHeader::kStorageModeLZ4HC: os << "StorageModeLZ4HC"; break;
    case ImageHeader::kStorageModeCount: os << "StorageModeCount"; break;
    default: os << "ImageHeader::StorageMode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

