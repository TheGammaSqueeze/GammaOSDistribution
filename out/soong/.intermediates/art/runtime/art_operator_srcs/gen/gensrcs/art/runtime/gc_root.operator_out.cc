#include <iostream>

#include "gc_root.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, RootType rhs) {
  switch (rhs) {
    case kRootUnknown: os << "RootUnknown"; break;
    case kRootJNIGlobal: os << "RootJNIGlobal"; break;
    case kRootJNILocal: os << "RootJNILocal"; break;
    case kRootJavaFrame: os << "RootJavaFrame"; break;
    case kRootNativeStack: os << "RootNativeStack"; break;
    case kRootStickyClass: os << "RootStickyClass"; break;
    case kRootThreadBlock: os << "RootThreadBlock"; break;
    case kRootMonitorUsed: os << "RootMonitorUsed"; break;
    case kRootThreadObject: os << "RootThreadObject"; break;
    case kRootInternedString: os << "RootInternedString"; break;
    case kRootFinalizing: os << "RootFinalizing"; break;
    case kRootDebugger: os << "RootDebugger"; break;
    case kRootReferenceCleanup: os << "RootReferenceCleanup"; break;
    case kRootVMInternal: os << "RootVMInternal"; break;
    case kRootJNIMonitor: os << "RootJNIMonitor"; break;
    default: os << "RootType[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, VisitRootFlags rhs) {
  switch (rhs) {
    case kVisitRootFlagAllRoots: os << "VisitRootFlagAllRoots"; break;
    case kVisitRootFlagNewRoots: os << "VisitRootFlagNewRoots"; break;
    case kVisitRootFlagStartLoggingNewRoots: os << "VisitRootFlagStartLoggingNewRoots"; break;
    case kVisitRootFlagStopLoggingNewRoots: os << "VisitRootFlagStopLoggingNewRoots"; break;
    case kVisitRootFlagClearRootLog: os << "VisitRootFlagClearRootLog"; break;
    case kVisitRootFlagClassLoader: os << "VisitRootFlagClassLoader"; break;
    case kVisitRootFlagPrecise: os << "VisitRootFlagPrecise"; break;
    default: os << "VisitRootFlags[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

