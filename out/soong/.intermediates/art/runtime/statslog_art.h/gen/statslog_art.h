// This file is autogenerated

#pragma once

#include <stdint.h>
#include <vector>
#include <map>
#include <set>

namespace art {
namespace metrics {
namespace statsd {

/*
 * API For logging statistics events.
 */

/**
 * Constants for atom codes.
 */
enum {

    /**
     * ArtDatumReported art_datum_reported
     * Usage: stats_write(StatsLog.ART_DATUM_REPORTED, int64_t session_id, int32_t uid, int32_t compile_filter, int32_t compilation_reason, int64_t timestamp_millis, int32_t thread_type, int32_t kind, int64_t value, int32_t dex_metadata_type, int32_t apk_type, int32_t isa);
     */
    ART_DATUM_REPORTED = 332,

    /**
     * OdrefreshReported odrefresh_reported
     * Usage: stats_write(StatsLog.ODREFRESH_REPORTED, int64_t art_apex_version, int32_t trigger, int32_t stage_reached, int32_t status, int32_t primary_bcp_compilation_seconds, int32_t secondary_bcp_compilation_seconds, int32_t system_server_compilation_seconds, int32_t cache_space_free_start_mib, int32_t cache_space_free_end_mib);
     */
    ODREFRESH_REPORTED = 366

};

//
// Constants for enum values
//

// Values for ArtDatumReported.compile_filter
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_ERROR = 1;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_UNKNOWN = 2;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_ASSUMED_VERIFIED = 3;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_EXTRACT = 4;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_VERIFY = 5;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_QUICKEN = 6;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_SPACE_PROFILE = 7;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_SPACE = 8;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_SPEED_PROFILE = 9;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_SPEED = 10;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_EVERYTHING_PROFILE = 11;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_EVERYTHING = 12;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_FAKE_RUN_FROM_APK = 13;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_FAKE_RUN_FROM_APK_FALLBACK = 14;
const int32_t ART_DATUM_REPORTED__COMPILE_FILTER__ART_COMPILATION_FILTER_FAKE_RUN_FROM_VDEX_FALLBACK = 15;

// Values for ArtDatumReported.compilation_reason
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_ERROR = 1;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_UNKNOWN = 2;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_FIRST_BOOT = 3;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_BOOT = 4;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL = 5;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_BG_DEXOPT = 6;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_AB_OTA = 7;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INACTIVE = 8;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_SHARED = 9;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_WITH_DEX_METADATA = 10;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_POST_BOOT = 11;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_FAST = 12;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_BULK = 13;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_BULK_SECONDARY = 14;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_BULK_DOWNGRADED = 15;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_INSTALL_BULK_SECONDARY_DOWNGRADED = 16;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_BOOT_AFTER_OTA = 17;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_PREBUILT = 18;
const int32_t ART_DATUM_REPORTED__COMPILATION_REASON__ART_COMPILATION_REASON_CMDLINE = 19;

// Values for ArtDatumReported.thread_type
const int32_t ART_DATUM_REPORTED__THREAD_TYPE__ART_THREAD_MAIN = 1;
const int32_t ART_DATUM_REPORTED__THREAD_TYPE__ART_THREAD_BACKGROUND = 2;

// Values for ArtDatumReported.kind
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_INVALID = 0;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_WORLD_STOP_TIME_AVG_MICROS = 1;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_COLLECTION_TIME_HISTO_MILLIS = 2;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_COLLECTION_COUNT = 3;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_COLLECTION_TIME_HISTO_MILLIS = 4;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_COLLECTION_COUNT = 5;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_JIT_METHOD_COMPILE_TIME_MICROS = 6;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_AOT_COMPILE_TIME = 7;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_CLASS_VERIFICATION_TIME_COUNTER_MICROS = 8;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_CLASS_LOADING_TIME_COUNTER_MICROS = 9;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_RESULT_CODE = 10;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_DEX_CODE_COUNTER_BYTES = 11;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_TOTAL_TIME_COUNTER_MILLIS = 12;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_VERIFY_DEX_FILE_TIME_COUNTER_MILLIS = 13;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_FAST_VERIFY_TIME_COUNTER_MILLIS = 14;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_DEX2OAT_RESOLVE_METHODS_AND_FIELDS_TIME_COUNTER_MILLIS = 15;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_CLASS_VERIFICATION_COUNT = 16;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_TOTAL_BYTES_ALLOCATED = 17;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_TOTAL_METADATA_SIZE_BYTES = 18;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_COLLECTION_THROUGHPUT_HISTO_MB_PER_SEC = 19;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_COLLECTION_THROUGHPUT_HISTO_MB_PER_SEC = 20;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_JIT_METHOD_COMPILE_COUNT = 21;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_TRACING_THROUGHPUT_HISTO_MB_PER_SEC = 22;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_TRACING_THROUGHPUT_HISTO_MB_PER_SEC = 23;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_COLLECTION_THROUGHPUT_AVG_MB_PER_SEC = 24;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_COLLECTION_THROUGHPUT_AVG_MB_PER_SEC = 25;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_YOUNG_GENERATION_TRACING_THROUGHPUT_AVG_MB_PER_SEC = 26;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_FULL_HEAP_TRACING_THROUGHPUT_AVG_MB_PER_SEC = 27;
const int32_t ART_DATUM_REPORTED__KIND__ART_DATUM_GC_TOTAL_COLLECTION_TIME_MS = 28;

// Values for ArtDatumReported.dex_metadata_type
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_UNKNOWN = 0;
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_PROFILE = 1;
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_VDEX = 2;
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_PROFILE_AND_VDEX = 3;
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_NONE = 4;
const int32_t ART_DATUM_REPORTED__DEX_METADATA_TYPE__ART_DEX_METADATA_TYPE_ERROR = 5;

// Values for ArtDatumReported.apk_type
const int32_t ART_DATUM_REPORTED__APK_TYPE__ART_APK_TYPE_UNKNOWN = 0;
const int32_t ART_DATUM_REPORTED__APK_TYPE__ART_APK_TYPE_BASE = 1;
const int32_t ART_DATUM_REPORTED__APK_TYPE__ART_APK_TYPE_SPLIT = 2;

// Values for ArtDatumReported.isa
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_UNKNOWN = 0;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_ARM = 1;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_ARM64 = 2;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_X86 = 3;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_X86_64 = 4;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_MIPS = 5;
const int32_t ART_DATUM_REPORTED__ISA__ART_ISA_MIPS64 = 6;

// Values for OdrefreshReported.trigger
const int32_t ODREFRESH_REPORTED__TRIGGER__TRIGGER_UNKNOWN = 0;
const int32_t ODREFRESH_REPORTED__TRIGGER__TRIGGER_APEX_VERSION_MISMATCH = 1;
const int32_t ODREFRESH_REPORTED__TRIGGER__TRIGGER_DEX_FILES_CHANGED = 2;
const int32_t ODREFRESH_REPORTED__TRIGGER__TRIGGER_MISSING_ARTIFACTS = 3;

// Values for OdrefreshReported.stage_reached
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_UNKNOWN = 0;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_CHECK = 10;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_PREPARATION = 20;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_PRIMARY_BOOT_CLASSPATH = 30;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_SECONDARY_BOOT_CLASSPATH = 40;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_SYSTEM_SERVER_CLASSPATH = 50;
const int32_t ODREFRESH_REPORTED__STAGE_REACHED__STAGE_COMPLETE = 60;

// Values for OdrefreshReported.status
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_UNKNOWN = 0;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_OK = 1;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_NO_SPACE = 2;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_IO_ERROR = 3;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_DEX2OAT_ERROR = 4;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_TIME_LIMIT_EXCEEDED = 5;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_STAGING_FAILED = 6;
const int32_t ODREFRESH_REPORTED__STATUS__STATUS_INSTALL_FAILED = 7;

struct BytesField {
  BytesField(char const* array, size_t len) : arg(array), arg_length(len) {}
  char const* arg;
  size_t arg_length;
};

//
// Write methods
//
int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9);
int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int32_t arg6, int32_t arg7, int64_t arg8, int32_t arg9, int32_t arg10, int32_t arg11);

//
// Write flattened methods
//

//
// Add AStatsEvent methods
//

} // namespace statsd
} // namespace metrics
} // namespace art
