#include <iostream>

#include "linker/image_writer.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace linker {
std::ostream& operator<<(std::ostream& os, ImageWriter::Bin rhs) {
  switch (rhs) {
    case ImageWriter::Bin::kKnownDirty: os << "KnownDirty"; break;
    case ImageWriter::Bin::kMiscDirty: os << "MiscDirty"; break;
    case ImageWriter::Bin::kClassVerified: os << "ClassVerified"; break;
    case ImageWriter::Bin::kRegular: os << "Regular"; break;
    case ImageWriter::Bin::kClassInitialized: os << "ClassInitialized"; break;
    case ImageWriter::Bin::kClassInitializedFinalStatics: os << "ClassInitializedFinalStatics"; break;
    case ImageWriter::Bin::kString: os << "String"; break;
    case ImageWriter::Bin::kMethodPointerArray: os << "MethodPointerArray"; break;
    case ImageWriter::Bin::kArtField: os << "ArtField"; break;
    case ImageWriter::Bin::kArtMethodClean: os << "ArtMethodClean"; break;
    case ImageWriter::Bin::kArtMethodDirty: os << "ArtMethodDirty"; break;
    case ImageWriter::Bin::kImTable: os << "ImTable"; break;
    case ImageWriter::Bin::kIMTConflictTable: os << "IMTConflictTable"; break;
    case ImageWriter::Bin::kRuntimeMethod: os << "RuntimeMethod"; break;
    case ImageWriter::Bin::kMetadata: os << "Metadata"; break;
  }
  return os;
}
}  // namespace linker
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace linker {
std::ostream& operator<<(std::ostream& os, ImageWriter::NativeObjectRelocationType rhs) {
  switch (rhs) {
    case ImageWriter::NativeObjectRelocationType::kArtFieldArray: os << "ArtFieldArray"; break;
    case ImageWriter::NativeObjectRelocationType::kArtMethodClean: os << "ArtMethodClean"; break;
    case ImageWriter::NativeObjectRelocationType::kArtMethodArrayClean: os << "ArtMethodArrayClean"; break;
    case ImageWriter::NativeObjectRelocationType::kArtMethodDirty: os << "ArtMethodDirty"; break;
    case ImageWriter::NativeObjectRelocationType::kArtMethodArrayDirty: os << "ArtMethodArrayDirty"; break;
    case ImageWriter::NativeObjectRelocationType::kGcRootPointer: os << "GcRootPointer"; break;
    case ImageWriter::NativeObjectRelocationType::kRuntimeMethod: os << "RuntimeMethod"; break;
    case ImageWriter::NativeObjectRelocationType::kIMTable: os << "IMTable"; break;
    case ImageWriter::NativeObjectRelocationType::kIMTConflictTable: os << "IMTConflictTable"; break;
  }
  return os;
}
}  // namespace linker
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace linker {
std::ostream& operator<<(std::ostream& os, ImageWriter::StubType rhs) {
  switch (rhs) {
    case ImageWriter::StubType::kJNIDlsymLookupTrampoline: os << "JNIDlsymLookupTrampoline"; break;
    case ImageWriter::StubType::kJNIDlsymLookupCriticalTrampoline: os << "JNIDlsymLookupCriticalTrampoline"; break;
    case ImageWriter::StubType::kQuickGenericJNITrampoline: os << "QuickGenericJNITrampoline"; break;
    case ImageWriter::StubType::kQuickIMTConflictTrampoline: os << "QuickIMTConflictTrampoline"; break;
    case ImageWriter::StubType::kQuickResolutionTrampoline: os << "QuickResolutionTrampoline"; break;
    case ImageWriter::StubType::kQuickToInterpreterBridge: os << "QuickToInterpreterBridge"; break;
    case ImageWriter::StubType::kNterpTrampoline: os << "NterpTrampoline"; break;
  }
  return os;
}
}  // namespace linker
}  // namespace art

