#include <iostream>

#include "optimizing/optimizing_compiler_stats.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, MethodCompilationStat rhs) {
  switch (rhs) {
    case MethodCompilationStat::kAttemptBytecodeCompilation: os << "AttemptBytecodeCompilation"; break;
    case MethodCompilationStat::kAttemptIntrinsicCompilation: os << "AttemptIntrinsicCompilation"; break;
    case MethodCompilationStat::kCompiledNativeStub: os << "CompiledNativeStub"; break;
    case MethodCompilationStat::kCompiledIntrinsic: os << "CompiledIntrinsic"; break;
    case MethodCompilationStat::kCompiledBytecode: os << "CompiledBytecode"; break;
    case MethodCompilationStat::kCHAInline: os << "CHAInline"; break;
    case MethodCompilationStat::kInlinedInvoke: os << "InlinedInvoke"; break;
    case MethodCompilationStat::kReplacedInvokeWithSimplePattern: os << "ReplacedInvokeWithSimplePattern"; break;
    case MethodCompilationStat::kInstructionSimplifications: os << "InstructionSimplifications"; break;
    case MethodCompilationStat::kInstructionSimplificationsArch: os << "InstructionSimplificationsArch"; break;
    case MethodCompilationStat::kUnresolvedMethod: os << "UnresolvedMethod"; break;
    case MethodCompilationStat::kUnresolvedField: os << "UnresolvedField"; break;
    case MethodCompilationStat::kUnresolvedFieldNotAFastAccess: os << "UnresolvedFieldNotAFastAccess"; break;
    case MethodCompilationStat::kRemovedCheckedCast: os << "RemovedCheckedCast"; break;
    case MethodCompilationStat::kRemovedDeadInstruction: os << "RemovedDeadInstruction"; break;
    case MethodCompilationStat::kRemovedNullCheck: os << "RemovedNullCheck"; break;
    case MethodCompilationStat::kNotCompiledSkipped: os << "NotCompiledSkipped"; break;
    case MethodCompilationStat::kNotCompiledInvalidBytecode: os << "NotCompiledInvalidBytecode"; break;
    case MethodCompilationStat::kNotCompiledThrowCatchLoop: os << "NotCompiledThrowCatchLoop"; break;
    case MethodCompilationStat::kNotCompiledAmbiguousArrayOp: os << "NotCompiledAmbiguousArrayOp"; break;
    case MethodCompilationStat::kNotCompiledHugeMethod: os << "NotCompiledHugeMethod"; break;
    case MethodCompilationStat::kNotCompiledLargeMethodNoBranches: os << "NotCompiledLargeMethodNoBranches"; break;
    case MethodCompilationStat::kNotCompiledMalformedOpcode: os << "NotCompiledMalformedOpcode"; break;
    case MethodCompilationStat::kNotCompiledNoCodegen: os << "NotCompiledNoCodegen"; break;
    case MethodCompilationStat::kNotCompiledPathological: os << "NotCompiledPathological"; break;
    case MethodCompilationStat::kNotCompiledSpaceFilter: os << "NotCompiledSpaceFilter"; break;
    case MethodCompilationStat::kNotCompiledUnhandledInstruction: os << "NotCompiledUnhandledInstruction"; break;
    case MethodCompilationStat::kNotCompiledUnsupportedIsa: os << "NotCompiledUnsupportedIsa"; break;
    case MethodCompilationStat::kNotCompiledVerificationError: os << "NotCompiledVerificationError"; break;
    case MethodCompilationStat::kNotCompiledVerifyAtRuntime: os << "NotCompiledVerifyAtRuntime"; break;
    case MethodCompilationStat::kNotCompiledIrreducibleLoopAndStringInit: os << "NotCompiledIrreducibleLoopAndStringInit"; break;
    case MethodCompilationStat::kNotCompiledPhiEquivalentInOsr: os << "NotCompiledPhiEquivalentInOsr"; break;
    case MethodCompilationStat::kInlinedMonomorphicCall: os << "InlinedMonomorphicCall"; break;
    case MethodCompilationStat::kInlinedPolymorphicCall: os << "InlinedPolymorphicCall"; break;
    case MethodCompilationStat::kMonomorphicCall: os << "MonomorphicCall"; break;
    case MethodCompilationStat::kPolymorphicCall: os << "PolymorphicCall"; break;
    case MethodCompilationStat::kMegamorphicCall: os << "MegamorphicCall"; break;
    case MethodCompilationStat::kBooleanSimplified: os << "BooleanSimplified"; break;
    case MethodCompilationStat::kIntrinsicRecognized: os << "IntrinsicRecognized"; break;
    case MethodCompilationStat::kLoopInvariantMoved: os << "LoopInvariantMoved"; break;
    case MethodCompilationStat::kLoopVectorized: os << "LoopVectorized"; break;
    case MethodCompilationStat::kLoopVectorizedIdiom: os << "LoopVectorizedIdiom"; break;
    case MethodCompilationStat::kSelectGenerated: os << "SelectGenerated"; break;
    case MethodCompilationStat::kRemovedInstanceOf: os << "RemovedInstanceOf"; break;
    case MethodCompilationStat::kInlinedInvokeVirtualOrInterface: os << "InlinedInvokeVirtualOrInterface"; break;
    case MethodCompilationStat::kImplicitNullCheckGenerated: os << "ImplicitNullCheckGenerated"; break;
    case MethodCompilationStat::kExplicitNullCheckGenerated: os << "ExplicitNullCheckGenerated"; break;
    case MethodCompilationStat::kSimplifyIf: os << "SimplifyIf"; break;
    case MethodCompilationStat::kSimplifyThrowingInvoke: os << "SimplifyThrowingInvoke"; break;
    case MethodCompilationStat::kInstructionSunk: os << "InstructionSunk"; break;
    case MethodCompilationStat::kNotInlinedUnresolvedEntrypoint: os << "NotInlinedUnresolvedEntrypoint"; break;
    case MethodCompilationStat::kNotInlinedDexCache: os << "NotInlinedDexCache"; break;
    case MethodCompilationStat::kNotInlinedStackMaps: os << "NotInlinedStackMaps"; break;
    case MethodCompilationStat::kNotInlinedEnvironmentBudget: os << "NotInlinedEnvironmentBudget"; break;
    case MethodCompilationStat::kNotInlinedInstructionBudget: os << "NotInlinedInstructionBudget"; break;
    case MethodCompilationStat::kNotInlinedLoopWithoutExit: os << "NotInlinedLoopWithoutExit"; break;
    case MethodCompilationStat::kNotInlinedIrreducibleLoop: os << "NotInlinedIrreducibleLoop"; break;
    case MethodCompilationStat::kNotInlinedAlwaysThrows: os << "NotInlinedAlwaysThrows"; break;
    case MethodCompilationStat::kNotInlinedInfiniteLoop: os << "NotInlinedInfiniteLoop"; break;
    case MethodCompilationStat::kNotInlinedTryCatch: os << "NotInlinedTryCatch"; break;
    case MethodCompilationStat::kNotInlinedRegisterAllocator: os << "NotInlinedRegisterAllocator"; break;
    case MethodCompilationStat::kNotInlinedCannotBuild: os << "NotInlinedCannotBuild"; break;
    case MethodCompilationStat::kNotInlinedNotVerified: os << "NotInlinedNotVerified"; break;
    case MethodCompilationStat::kNotInlinedCodeItem: os << "NotInlinedCodeItem"; break;
    case MethodCompilationStat::kNotInlinedWont: os << "NotInlinedWont"; break;
    case MethodCompilationStat::kNotInlinedRecursiveBudget: os << "NotInlinedRecursiveBudget"; break;
    case MethodCompilationStat::kNotInlinedProxy: os << "NotInlinedProxy"; break;
    case MethodCompilationStat::kNotInlinedUnresolved: os << "NotInlinedUnresolved"; break;
    case MethodCompilationStat::kNotInlinedPolymorphic: os << "NotInlinedPolymorphic"; break;
    case MethodCompilationStat::kNotInlinedCustom: os << "NotInlinedCustom"; break;
    case MethodCompilationStat::kTryInline: os << "TryInline"; break;
    case MethodCompilationStat::kConstructorFenceGeneratedNew: os << "ConstructorFenceGeneratedNew"; break;
    case MethodCompilationStat::kConstructorFenceGeneratedFinal: os << "ConstructorFenceGeneratedFinal"; break;
    case MethodCompilationStat::kConstructorFenceRemovedLSE: os << "ConstructorFenceRemovedLSE"; break;
    case MethodCompilationStat::kConstructorFenceRemovedPFRA: os << "ConstructorFenceRemovedPFRA"; break;
    case MethodCompilationStat::kConstructorFenceRemovedCFRE: os << "ConstructorFenceRemovedCFRE"; break;
    case MethodCompilationStat::kBitstringTypeCheck: os << "BitstringTypeCheck"; break;
    case MethodCompilationStat::kJitOutOfMemoryForCommit: os << "JitOutOfMemoryForCommit"; break;
    case MethodCompilationStat::kFullLSEAllocationRemoved: os << "FullLSEAllocationRemoved"; break;
    case MethodCompilationStat::kFullLSEPossible: os << "FullLSEPossible"; break;
    case MethodCompilationStat::kNonPartialLoadRemoved: os << "NonPartialLoadRemoved"; break;
    case MethodCompilationStat::kPartialLSEPossible: os << "PartialLSEPossible"; break;
    case MethodCompilationStat::kPartialStoreRemoved: os << "PartialStoreRemoved"; break;
    case MethodCompilationStat::kPartialAllocationMoved: os << "PartialAllocationMoved"; break;
    case MethodCompilationStat::kPredicatedLoadAdded: os << "PredicatedLoadAdded"; break;
    case MethodCompilationStat::kPredicatedStoreAdded: os << "PredicatedStoreAdded"; break;
    case MethodCompilationStat::kDevirtualized: os << "Devirtualized"; break;
    case MethodCompilationStat::kLastStat: os << "LastStat"; break;
  }
  return os;
}
}  // namespace art

