#include <iostream>

#include "optimizing/nodes.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, IntrinsicNeedsEnvironment rhs) {
  switch (rhs) {
    case kNoEnvironment: os << "NoEnvironment"; break;
    case kNeedsEnvironment: os << "NeedsEnvironment"; break;
    default: os << "IntrinsicNeedsEnvironment[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, HLoadClass::LoadKind rhs) {
  switch (rhs) {
    case HLoadClass::LoadKind::kInvalid: os << "Invalid"; break;
    case HLoadClass::LoadKind::kReferrersClass: os << "ReferrersClass"; break;
    case HLoadClass::LoadKind::kBootImageLinkTimePcRelative: os << "BootImageLinkTimePcRelative"; break;
    case HLoadClass::LoadKind::kBootImageRelRo: os << "BootImageRelRo"; break;
    case HLoadClass::LoadKind::kBssEntry: os << "BssEntry"; break;
    case HLoadClass::LoadKind::kBssEntryPublic: os << "BssEntryPublic"; break;
    case HLoadClass::LoadKind::kBssEntryPackage: os << "BssEntryPackage"; break;
    case HLoadClass::LoadKind::kJitBootImageAddress: os << "JitBootImageAddress"; break;
    case HLoadClass::LoadKind::kJitTableAddress: os << "JitTableAddress"; break;
    case HLoadClass::LoadKind::kRuntimeCall: os << "RuntimeCall"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, MethodLoadKind rhs) {
  switch (rhs) {
    case MethodLoadKind::kStringInit: os << "StringInit"; break;
    case MethodLoadKind::kRecursive: os << "Recursive"; break;
    case MethodLoadKind::kBootImageLinkTimePcRelative: os << "BootImageLinkTimePcRelative"; break;
    case MethodLoadKind::kBootImageRelRo: os << "BootImageRelRo"; break;
    case MethodLoadKind::kBssEntry: os << "BssEntry"; break;
    case MethodLoadKind::kJitDirectAddress: os << "JitDirectAddress"; break;
    case MethodLoadKind::kRuntimeCall: os << "RuntimeCall"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, IntrinsicExceptions rhs) {
  switch (rhs) {
    case kNoThrow: os << "NoThrow"; break;
    case kCanThrow: os << "CanThrow"; break;
    default: os << "IntrinsicExceptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, HTryBoundary::BoundaryKind rhs) {
  switch (rhs) {
    case HTryBoundary::BoundaryKind::kEntry: os << "Entry"; break;
    case HTryBoundary::BoundaryKind::kExit: os << "Exit"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, HMonitorOperation::OperationKind rhs) {
  switch (rhs) {
    case HMonitorOperation::OperationKind::kEnter: os << "Enter"; break;
    case HMonitorOperation::OperationKind::kExit: os << "Exit"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, MemBarrierKind rhs) {
  switch (rhs) {
    case kAnyStore: os << "AnyStore"; break;
    case kLoadAny: os << "LoadAny"; break;
    case kStoreStore: os << "StoreStore"; break;
    case kAnyAny: os << "AnyAny"; break;
    case kNTStoreStore: os << "NTStoreStore"; break;
    default: os << "MemBarrierKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, GraphAnalysisResult rhs) {
  switch (rhs) {
    case kAnalysisSkipped: os << "AnalysisSkipped"; break;
    case kAnalysisInvalidBytecode: os << "AnalysisInvalidBytecode"; break;
    case kAnalysisFailThrowCatchLoop: os << "AnalysisFailThrowCatchLoop"; break;
    case kAnalysisFailAmbiguousArrayOp: os << "AnalysisFailAmbiguousArrayOp"; break;
    case kAnalysisFailIrreducibleLoopAndStringInit: os << "AnalysisFailIrreducibleLoopAndStringInit"; break;
    case kAnalysisFailPhiEquivalentInOsr: os << "AnalysisFailPhiEquivalentInOsr"; break;
    case kAnalysisSuccess: os << "AnalysisSuccess"; break;
    default: os << "GraphAnalysisResult[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, HLoadString::LoadKind rhs) {
  switch (rhs) {
    case HLoadString::LoadKind::kBootImageLinkTimePcRelative: os << "BootImageLinkTimePcRelative"; break;
    case HLoadString::LoadKind::kBootImageRelRo: os << "BootImageRelRo"; break;
    case HLoadString::LoadKind::kBssEntry: os << "BssEntry"; break;
    case HLoadString::LoadKind::kJitBootImageAddress: os << "JitBootImageAddress"; break;
    case HLoadString::LoadKind::kJitTableAddress: os << "JitTableAddress"; break;
    case HLoadString::LoadKind::kRuntimeCall: os << "RuntimeCall"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, CodePtrLocation rhs) {
  switch (rhs) {
    case CodePtrLocation::kCallSelf: os << "CallSelf"; break;
    case CodePtrLocation::kCallCriticalNative: os << "CallCriticalNative"; break;
    case CodePtrLocation::kCallArtMethod: os << "CallArtMethod"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, IntrinsicSideEffects rhs) {
  switch (rhs) {
    case kNoSideEffects: os << "NoSideEffects"; break;
    case kReadSideEffects: os << "ReadSideEffects"; break;
    case kWriteSideEffects: os << "WriteSideEffects"; break;
    case kAllSideEffects: os << "AllSideEffects"; break;
    default: os << "IntrinsicSideEffects[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, IfCondition rhs) {
  switch (rhs) {
    case kCondEQ: os << "CondEQ"; break;
    case kCondNE: os << "CondNE"; break;
    case kCondLT: os << "CondLT"; break;
    case kCondLE: os << "CondLE"; break;
    case kCondGT: os << "CondGT"; break;
    case kCondGE: os << "CondGE"; break;
    case kCondB: os << "CondB"; break;
    case kCondBE: os << "CondBE"; break;
    case kCondA: os << "CondA"; break;
    case kCondAE: os << "CondAE"; break;
    default: os << "IfCondition[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, HClassTableGet::TableKind rhs) {
  switch (rhs) {
    case HClassTableGet::TableKind::kVTable: os << "VTable"; break;
    case HClassTableGet::TableKind::kIMTable: os << "IMTable"; break;
  }
  return os;
}
}  // namespace art

