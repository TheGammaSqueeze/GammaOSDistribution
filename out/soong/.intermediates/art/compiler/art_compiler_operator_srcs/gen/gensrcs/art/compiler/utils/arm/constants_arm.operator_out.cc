#include <iostream>

#include "utils/arm/constants_arm.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, Opcode rhs) {
  switch (rhs) {
    case kNoOperand: os << "NoOperand"; break;
    case AND: os << "AND"; break;
    case EOR: os << "EOR"; break;
    case SUB: os << "SUB"; break;
    case RSB: os << "RSB"; break;
    case ADD: os << "ADD"; break;
    case ADC: os << "ADC"; break;
    case SBC: os << "SBC"; break;
    case RSC: os << "RSC"; break;
    case TST: os << "TST"; break;
    case TEQ: os << "TEQ"; break;
    case CMP: os << "CMP"; break;
    case CMN: os << "CMN"; break;
    case ORR: os << "ORR"; break;
    case MOV: os << "MOV"; break;
    case BIC: os << "BIC"; break;
    case MVN: os << "MVN"; break;
    case ORN: os << "ORN"; break;
    case kMaxOperand: os << "MaxOperand"; break;
    default: os << "Opcode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, ScaleFactor rhs) {
  switch (rhs) {
    case TIMES_1: os << "TIMES_1"; break;
    case TIMES_2: os << "TIMES_2"; break;
    case TIMES_4: os << "TIMES_4"; break;
    case TIMES_8: os << "TIMES_8"; break;
    default: os << "ScaleFactor[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace arm {
std::ostream& operator<<(std::ostream& os, DmbOptions rhs) {
  switch (rhs) {
    case SY: os << "SY"; break;
    case ST: os << "ST"; break;
    case ISH: os << "ISH"; break;
    case ISHST: os << "ISHST"; break;
    case NSH: os << "NSH"; break;
    case NSHST: os << "NSHST"; break;
    default: os << "DmbOptions[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace arm
}  // namespace art

