#include <iostream>

#include "linker/linker_patch.h"

// This was automatically generated by art/tools/generate_operator_out.py --- do not edit!
namespace art {
namespace linker {
std::ostream& operator<<(std::ostream& os, LinkerPatch::Type rhs) {
  switch (rhs) {
    case LinkerPatch::Type::kIntrinsicReference: os << "IntrinsicReference"; break;
    case LinkerPatch::Type::kDataBimgRelRo: os << "DataBimgRelRo"; break;
    case LinkerPatch::Type::kMethodRelative: os << "MethodRelative"; break;
    case LinkerPatch::Type::kMethodBssEntry: os << "MethodBssEntry"; break;
    case LinkerPatch::Type::kJniEntrypointRelative: os << "JniEntrypointRelative"; break;
    case LinkerPatch::Type::kCallRelative: os << "CallRelative"; break;
    case LinkerPatch::Type::kTypeRelative: os << "TypeRelative"; break;
    case LinkerPatch::Type::kTypeBssEntry: os << "TypeBssEntry"; break;
    case LinkerPatch::Type::kPublicTypeBssEntry: os << "PublicTypeBssEntry"; break;
    case LinkerPatch::Type::kPackageTypeBssEntry: os << "PackageTypeBssEntry"; break;
    case LinkerPatch::Type::kStringRelative: os << "StringRelative"; break;
    case LinkerPatch::Type::kStringBssEntry: os << "StringBssEntry"; break;
    case LinkerPatch::Type::kCallEntrypoint: os << "CallEntrypoint"; break;
    case LinkerPatch::Type::kBakerReadBarrierBranch: os << "BakerReadBarrierBranch"; break;
  }
  return os;
}
}  // namespace linker
}  // namespace art

