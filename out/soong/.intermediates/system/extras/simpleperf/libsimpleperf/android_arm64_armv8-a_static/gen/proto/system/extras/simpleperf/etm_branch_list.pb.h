// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/extras/simpleperf/etm_branch_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace simpleperf {
namespace proto {
class ETMBranchList;
class ETMBranchListDefaultTypeInternal;
extern ETMBranchListDefaultTypeInternal _ETMBranchList_default_instance_;
class ETMBranchList_Binary;
class ETMBranchList_BinaryDefaultTypeInternal;
extern ETMBranchList_BinaryDefaultTypeInternal _ETMBranchList_Binary_default_instance_;
class ETMBranchList_Binary_Address;
class ETMBranchList_Binary_AddressDefaultTypeInternal;
extern ETMBranchList_Binary_AddressDefaultTypeInternal _ETMBranchList_Binary_Address_default_instance_;
class ETMBranchList_Binary_Address_Branch;
class ETMBranchList_Binary_Address_BranchDefaultTypeInternal;
extern ETMBranchList_Binary_Address_BranchDefaultTypeInternal _ETMBranchList_Binary_Address_Branch_default_instance_;
class ETMBranchList_Binary_KernelBinaryInfo;
class ETMBranchList_Binary_KernelBinaryInfoDefaultTypeInternal;
extern ETMBranchList_Binary_KernelBinaryInfoDefaultTypeInternal _ETMBranchList_Binary_KernelBinaryInfo_default_instance_;
}  // namespace proto
}  // namespace simpleperf
PROTOBUF_NAMESPACE_OPEN
template<> ::simpleperf::proto::ETMBranchList* Arena::CreateMaybeMessage<::simpleperf::proto::ETMBranchList>(Arena*);
template<> ::simpleperf::proto::ETMBranchList_Binary* Arena::CreateMaybeMessage<::simpleperf::proto::ETMBranchList_Binary>(Arena*);
template<> ::simpleperf::proto::ETMBranchList_Binary_Address* Arena::CreateMaybeMessage<::simpleperf::proto::ETMBranchList_Binary_Address>(Arena*);
template<> ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* Arena::CreateMaybeMessage<::simpleperf::proto::ETMBranchList_Binary_Address_Branch>(Arena*);
template<> ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* Arena::CreateMaybeMessage<::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simpleperf {
namespace proto {

enum ETMBranchList_Binary_BinaryType : int {
  ETMBranchList_Binary_BinaryType_ELF_FILE = 0,
  ETMBranchList_Binary_BinaryType_KERNEL = 1,
  ETMBranchList_Binary_BinaryType_KERNEL_MODULE = 2,
  ETMBranchList_Binary_BinaryType_ETMBranchList_Binary_BinaryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ETMBranchList_Binary_BinaryType_ETMBranchList_Binary_BinaryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ETMBranchList_Binary_BinaryType_IsValid(int value);
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary_BinaryType_BinaryType_MIN = ETMBranchList_Binary_BinaryType_ELF_FILE;
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary_BinaryType_BinaryType_MAX = ETMBranchList_Binary_BinaryType_KERNEL_MODULE;
constexpr int ETMBranchList_Binary_BinaryType_BinaryType_ARRAYSIZE = ETMBranchList_Binary_BinaryType_BinaryType_MAX + 1;

const std::string& ETMBranchList_Binary_BinaryType_Name(ETMBranchList_Binary_BinaryType value);
template<typename T>
inline const std::string& ETMBranchList_Binary_BinaryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETMBranchList_Binary_BinaryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETMBranchList_Binary_BinaryType_Name.");
  return ETMBranchList_Binary_BinaryType_Name(static_cast<ETMBranchList_Binary_BinaryType>(enum_t_value));
}
bool ETMBranchList_Binary_BinaryType_Parse(
    const std::string& name, ETMBranchList_Binary_BinaryType* value);
// ===================================================================

class ETMBranchList_Binary_Address_Branch :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.ETMBranchList.Binary.Address.Branch) */ {
 public:
  ETMBranchList_Binary_Address_Branch();
  virtual ~ETMBranchList_Binary_Address_Branch();

  ETMBranchList_Binary_Address_Branch(const ETMBranchList_Binary_Address_Branch& from);
  ETMBranchList_Binary_Address_Branch(ETMBranchList_Binary_Address_Branch&& from) noexcept
    : ETMBranchList_Binary_Address_Branch() {
    *this = ::std::move(from);
  }

  inline ETMBranchList_Binary_Address_Branch& operator=(const ETMBranchList_Binary_Address_Branch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ETMBranchList_Binary_Address_Branch& operator=(ETMBranchList_Binary_Address_Branch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ETMBranchList_Binary_Address_Branch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETMBranchList_Binary_Address_Branch* internal_default_instance() {
    return reinterpret_cast<const ETMBranchList_Binary_Address_Branch*>(
               &_ETMBranchList_Binary_Address_Branch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ETMBranchList_Binary_Address_Branch& a, ETMBranchList_Binary_Address_Branch& b) {
    a.Swap(&b);
  }
  inline void Swap(ETMBranchList_Binary_Address_Branch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ETMBranchList_Binary_Address_Branch* New() const final {
    return CreateMaybeMessage<ETMBranchList_Binary_Address_Branch>(nullptr);
  }

  ETMBranchList_Binary_Address_Branch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ETMBranchList_Binary_Address_Branch>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ETMBranchList_Binary_Address_Branch& from);
  void MergeFrom(const ETMBranchList_Binary_Address_Branch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ETMBranchList_Binary_Address_Branch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.ETMBranchList.Binary.Address.Branch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBranchFieldNumber = 1,
    kCountFieldNumber = 3,
    kBranchSizeFieldNumber = 2,
  };
  // bytes branch = 1;
  void clear_branch();
  const std::string& branch() const;
  void set_branch(const std::string& value);
  void set_branch(std::string&& value);
  void set_branch(const char* value);
  void set_branch(const void* value, size_t size);
  std::string* mutable_branch();
  std::string* release_branch();
  void set_allocated_branch(std::string* branch);

  // uint64 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 branch_size = 2;
  void clear_branch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 branch_size() const;
  void set_branch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 branch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
};
// -------------------------------------------------------------------

class ETMBranchList_Binary_Address :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.ETMBranchList.Binary.Address) */ {
 public:
  ETMBranchList_Binary_Address();
  virtual ~ETMBranchList_Binary_Address();

  ETMBranchList_Binary_Address(const ETMBranchList_Binary_Address& from);
  ETMBranchList_Binary_Address(ETMBranchList_Binary_Address&& from) noexcept
    : ETMBranchList_Binary_Address() {
    *this = ::std::move(from);
  }

  inline ETMBranchList_Binary_Address& operator=(const ETMBranchList_Binary_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline ETMBranchList_Binary_Address& operator=(ETMBranchList_Binary_Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ETMBranchList_Binary_Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETMBranchList_Binary_Address* internal_default_instance() {
    return reinterpret_cast<const ETMBranchList_Binary_Address*>(
               &_ETMBranchList_Binary_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ETMBranchList_Binary_Address& a, ETMBranchList_Binary_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(ETMBranchList_Binary_Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ETMBranchList_Binary_Address* New() const final {
    return CreateMaybeMessage<ETMBranchList_Binary_Address>(nullptr);
  }

  ETMBranchList_Binary_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ETMBranchList_Binary_Address>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ETMBranchList_Binary_Address& from);
  void MergeFrom(const ETMBranchList_Binary_Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ETMBranchList_Binary_Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.ETMBranchList.Binary.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ETMBranchList_Binary_Address_Branch Branch;

  // accessors -------------------------------------------------------

  enum : int {
    kBranchesFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
  int branches_size() const;
  void clear_branches();
  ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* mutable_branches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >*
      mutable_branches();
  const ::simpleperf::proto::ETMBranchList_Binary_Address_Branch& branches(int index) const;
  ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* add_branches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >&
      branches() const;

  // uint64 addr = 1;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.ETMBranchList.Binary.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch > branches_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
};
// -------------------------------------------------------------------

class ETMBranchList_Binary_KernelBinaryInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo) */ {
 public:
  ETMBranchList_Binary_KernelBinaryInfo();
  virtual ~ETMBranchList_Binary_KernelBinaryInfo();

  ETMBranchList_Binary_KernelBinaryInfo(const ETMBranchList_Binary_KernelBinaryInfo& from);
  ETMBranchList_Binary_KernelBinaryInfo(ETMBranchList_Binary_KernelBinaryInfo&& from) noexcept
    : ETMBranchList_Binary_KernelBinaryInfo() {
    *this = ::std::move(from);
  }

  inline ETMBranchList_Binary_KernelBinaryInfo& operator=(const ETMBranchList_Binary_KernelBinaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ETMBranchList_Binary_KernelBinaryInfo& operator=(ETMBranchList_Binary_KernelBinaryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ETMBranchList_Binary_KernelBinaryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETMBranchList_Binary_KernelBinaryInfo* internal_default_instance() {
    return reinterpret_cast<const ETMBranchList_Binary_KernelBinaryInfo*>(
               &_ETMBranchList_Binary_KernelBinaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ETMBranchList_Binary_KernelBinaryInfo& a, ETMBranchList_Binary_KernelBinaryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ETMBranchList_Binary_KernelBinaryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ETMBranchList_Binary_KernelBinaryInfo* New() const final {
    return CreateMaybeMessage<ETMBranchList_Binary_KernelBinaryInfo>(nullptr);
  }

  ETMBranchList_Binary_KernelBinaryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ETMBranchList_Binary_KernelBinaryInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ETMBranchList_Binary_KernelBinaryInfo& from);
  void MergeFrom(const ETMBranchList_Binary_KernelBinaryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ETMBranchList_Binary_KernelBinaryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelStartAddrFieldNumber = 1,
  };
  // uint64 kernel_start_addr = 1;
  void clear_kernel_start_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 kernel_start_addr() const;
  void set_kernel_start_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kernel_start_addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
};
// -------------------------------------------------------------------

class ETMBranchList_Binary :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.ETMBranchList.Binary) */ {
 public:
  ETMBranchList_Binary();
  virtual ~ETMBranchList_Binary();

  ETMBranchList_Binary(const ETMBranchList_Binary& from);
  ETMBranchList_Binary(ETMBranchList_Binary&& from) noexcept
    : ETMBranchList_Binary() {
    *this = ::std::move(from);
  }

  inline ETMBranchList_Binary& operator=(const ETMBranchList_Binary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ETMBranchList_Binary& operator=(ETMBranchList_Binary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ETMBranchList_Binary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETMBranchList_Binary* internal_default_instance() {
    return reinterpret_cast<const ETMBranchList_Binary*>(
               &_ETMBranchList_Binary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ETMBranchList_Binary& a, ETMBranchList_Binary& b) {
    a.Swap(&b);
  }
  inline void Swap(ETMBranchList_Binary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ETMBranchList_Binary* New() const final {
    return CreateMaybeMessage<ETMBranchList_Binary>(nullptr);
  }

  ETMBranchList_Binary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ETMBranchList_Binary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ETMBranchList_Binary& from);
  void MergeFrom(const ETMBranchList_Binary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ETMBranchList_Binary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.ETMBranchList.Binary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ETMBranchList_Binary_Address Address;
  typedef ETMBranchList_Binary_KernelBinaryInfo KernelBinaryInfo;

  typedef ETMBranchList_Binary_BinaryType BinaryType;
  static constexpr BinaryType ELF_FILE =
    ETMBranchList_Binary_BinaryType_ELF_FILE;
  static constexpr BinaryType KERNEL =
    ETMBranchList_Binary_BinaryType_KERNEL;
  static constexpr BinaryType KERNEL_MODULE =
    ETMBranchList_Binary_BinaryType_KERNEL_MODULE;
  static inline bool BinaryType_IsValid(int value) {
    return ETMBranchList_Binary_BinaryType_IsValid(value);
  }
  static constexpr BinaryType BinaryType_MIN =
    ETMBranchList_Binary_BinaryType_BinaryType_MIN;
  static constexpr BinaryType BinaryType_MAX =
    ETMBranchList_Binary_BinaryType_BinaryType_MAX;
  static constexpr int BinaryType_ARRAYSIZE =
    ETMBranchList_Binary_BinaryType_BinaryType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& BinaryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BinaryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BinaryType_Name.");
    return ETMBranchList_Binary_BinaryType_Name(enum_t_value);
  }
  static inline bool BinaryType_Parse(const std::string& name,
      BinaryType* value) {
    return ETMBranchList_Binary_BinaryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddrsFieldNumber = 3,
    kPathFieldNumber = 1,
    kBuildIdFieldNumber = 2,
    kKernelInfoFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
  int addrs_size() const;
  void clear_addrs();
  ::simpleperf::proto::ETMBranchList_Binary_Address* mutable_addrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address >*
      mutable_addrs();
  const ::simpleperf::proto::ETMBranchList_Binary_Address& addrs(int index) const;
  ::simpleperf::proto::ETMBranchList_Binary_Address* add_addrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address >&
      addrs() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // string build_id = 2;
  void clear_build_id();
  const std::string& build_id() const;
  void set_build_id(const std::string& value);
  void set_build_id(std::string&& value);
  void set_build_id(const char* value);
  void set_build_id(const char* value, size_t size);
  std::string* mutable_build_id();
  std::string* release_build_id();
  void set_allocated_build_id(std::string* build_id);

  // .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
  bool has_kernel_info() const;
  void clear_kernel_info();
  const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo& kernel_info() const;
  ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* release_kernel_info();
  ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* mutable_kernel_info();
  void set_allocated_kernel_info(::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* kernel_info);

  // .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
  void clear_type();
  ::simpleperf::proto::ETMBranchList_Binary_BinaryType type() const;
  void set_type(::simpleperf::proto::ETMBranchList_Binary_BinaryType value);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.ETMBranchList.Binary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address > addrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_id_;
  ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* kernel_info_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
};
// -------------------------------------------------------------------

class ETMBranchList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.ETMBranchList) */ {
 public:
  ETMBranchList();
  virtual ~ETMBranchList();

  ETMBranchList(const ETMBranchList& from);
  ETMBranchList(ETMBranchList&& from) noexcept
    : ETMBranchList() {
    *this = ::std::move(from);
  }

  inline ETMBranchList& operator=(const ETMBranchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ETMBranchList& operator=(ETMBranchList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ETMBranchList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ETMBranchList* internal_default_instance() {
    return reinterpret_cast<const ETMBranchList*>(
               &_ETMBranchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ETMBranchList& a, ETMBranchList& b) {
    a.Swap(&b);
  }
  inline void Swap(ETMBranchList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ETMBranchList* New() const final {
    return CreateMaybeMessage<ETMBranchList>(nullptr);
  }

  ETMBranchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ETMBranchList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ETMBranchList& from);
  void MergeFrom(const ETMBranchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ETMBranchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.ETMBranchList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ETMBranchList_Binary Binary;

  // accessors -------------------------------------------------------

  enum : int {
    kBinariesFieldNumber = 2,
    kMagicFieldNumber = 1,
  };
  // repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
  int binaries_size() const;
  void clear_binaries();
  ::simpleperf::proto::ETMBranchList_Binary* mutable_binaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary >*
      mutable_binaries();
  const ::simpleperf::proto::ETMBranchList_Binary& binaries(int index) const;
  ::simpleperf::proto::ETMBranchList_Binary* add_binaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary >&
      binaries() const;

  // string magic = 1;
  void clear_magic();
  const std::string& magic() const;
  void set_magic(const std::string& value);
  void set_magic(std::string&& value);
  void set_magic(const char* value);
  void set_magic(const char* value, size_t size);
  std::string* mutable_magic();
  std::string* release_magic();
  void set_allocated_magic(std::string* magic);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.ETMBranchList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary > binaries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ETMBranchList_Binary_Address_Branch

// bytes branch = 1;
inline void ETMBranchList_Binary_Address_Branch::clear_branch() {
  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ETMBranchList_Binary_Address_Branch::branch() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
  return branch_.GetNoArena();
}
inline void ETMBranchList_Binary_Address_Branch::set_branch(const std::string& value) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
}
inline void ETMBranchList_Binary_Address_Branch::set_branch(std::string&& value) {
  
  branch_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
}
inline void ETMBranchList_Binary_Address_Branch::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
}
inline void ETMBranchList_Binary_Address_Branch::set_branch(const void* value, size_t size) {
  
  branch_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
}
inline std::string* ETMBranchList_Binary_Address_Branch::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
  return branch_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ETMBranchList_Binary_Address_Branch::release_branch() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
  
  return branch_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ETMBranchList_Binary_Address_Branch::set_allocated_branch(std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch)
}

// uint32 branch_size = 2;
inline void ETMBranchList_Binary_Address_Branch::clear_branch_size() {
  branch_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ETMBranchList_Binary_Address_Branch::branch_size() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch_size)
  return branch_size_;
}
inline void ETMBranchList_Binary_Address_Branch::set_branch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  branch_size_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.Address.Branch.branch_size)
}

// uint64 count = 3;
inline void ETMBranchList_Binary_Address_Branch::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ETMBranchList_Binary_Address_Branch::count() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.Address.Branch.count)
  return count_;
}
inline void ETMBranchList_Binary_Address_Branch::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.Address.Branch.count)
}

// -------------------------------------------------------------------

// ETMBranchList_Binary_Address

// uint64 addr = 1;
inline void ETMBranchList_Binary_Address::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ETMBranchList_Binary_Address::addr() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.Address.addr)
  return addr_;
}
inline void ETMBranchList_Binary_Address::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.Address.addr)
}

// repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
inline int ETMBranchList_Binary_Address::branches_size() const {
  return branches_.size();
}
inline void ETMBranchList_Binary_Address::clear_branches() {
  branches_.Clear();
}
inline ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* ETMBranchList_Binary_Address::mutable_branches(int index) {
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.Address.branches)
  return branches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >*
ETMBranchList_Binary_Address::mutable_branches() {
  // @@protoc_insertion_point(field_mutable_list:simpleperf.proto.ETMBranchList.Binary.Address.branches)
  return &branches_;
}
inline const ::simpleperf::proto::ETMBranchList_Binary_Address_Branch& ETMBranchList_Binary_Address::branches(int index) const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.Address.branches)
  return branches_.Get(index);
}
inline ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* ETMBranchList_Binary_Address::add_branches() {
  // @@protoc_insertion_point(field_add:simpleperf.proto.ETMBranchList.Binary.Address.branches)
  return branches_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >&
ETMBranchList_Binary_Address::branches() const {
  // @@protoc_insertion_point(field_list:simpleperf.proto.ETMBranchList.Binary.Address.branches)
  return branches_;
}

// -------------------------------------------------------------------

// ETMBranchList_Binary_KernelBinaryInfo

// uint64 kernel_start_addr = 1;
inline void ETMBranchList_Binary_KernelBinaryInfo::clear_kernel_start_addr() {
  kernel_start_addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ETMBranchList_Binary_KernelBinaryInfo::kernel_start_addr() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo.kernel_start_addr)
  return kernel_start_addr_;
}
inline void ETMBranchList_Binary_KernelBinaryInfo::set_kernel_start_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  kernel_start_addr_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo.kernel_start_addr)
}

// -------------------------------------------------------------------

// ETMBranchList_Binary

// string path = 1;
inline void ETMBranchList_Binary::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ETMBranchList_Binary::path() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.path)
  return path_.GetNoArena();
}
inline void ETMBranchList_Binary::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.path)
}
inline void ETMBranchList_Binary::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleperf.proto.ETMBranchList.Binary.path)
}
inline void ETMBranchList_Binary::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleperf.proto.ETMBranchList.Binary.path)
}
inline void ETMBranchList_Binary::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleperf.proto.ETMBranchList.Binary.path)
}
inline std::string* ETMBranchList_Binary::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ETMBranchList_Binary::release_path() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.ETMBranchList.Binary.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ETMBranchList_Binary::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.ETMBranchList.Binary.path)
}

// string build_id = 2;
inline void ETMBranchList_Binary::clear_build_id() {
  build_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ETMBranchList_Binary::build_id() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.build_id)
  return build_id_.GetNoArena();
}
inline void ETMBranchList_Binary::set_build_id(const std::string& value) {
  
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.build_id)
}
inline void ETMBranchList_Binary::set_build_id(std::string&& value) {
  
  build_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleperf.proto.ETMBranchList.Binary.build_id)
}
inline void ETMBranchList_Binary::set_build_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleperf.proto.ETMBranchList.Binary.build_id)
}
inline void ETMBranchList_Binary::set_build_id(const char* value, size_t size) {
  
  build_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleperf.proto.ETMBranchList.Binary.build_id)
}
inline std::string* ETMBranchList_Binary::mutable_build_id() {
  
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.build_id)
  return build_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ETMBranchList_Binary::release_build_id() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.ETMBranchList.Binary.build_id)
  
  return build_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ETMBranchList_Binary::set_allocated_build_id(std::string* build_id) {
  if (build_id != nullptr) {
    
  } else {
    
  }
  build_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_id);
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.ETMBranchList.Binary.build_id)
}

// repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
inline int ETMBranchList_Binary::addrs_size() const {
  return addrs_.size();
}
inline void ETMBranchList_Binary::clear_addrs() {
  addrs_.Clear();
}
inline ::simpleperf::proto::ETMBranchList_Binary_Address* ETMBranchList_Binary::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.addrs)
  return addrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address >*
ETMBranchList_Binary::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:simpleperf.proto.ETMBranchList.Binary.addrs)
  return &addrs_;
}
inline const ::simpleperf::proto::ETMBranchList_Binary_Address& ETMBranchList_Binary::addrs(int index) const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.addrs)
  return addrs_.Get(index);
}
inline ::simpleperf::proto::ETMBranchList_Binary_Address* ETMBranchList_Binary::add_addrs() {
  // @@protoc_insertion_point(field_add:simpleperf.proto.ETMBranchList.Binary.addrs)
  return addrs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary_Address >&
ETMBranchList_Binary::addrs() const {
  // @@protoc_insertion_point(field_list:simpleperf.proto.ETMBranchList.Binary.addrs)
  return addrs_;
}

// .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
inline void ETMBranchList_Binary::clear_type() {
  type_ = 0;
}
inline ::simpleperf::proto::ETMBranchList_Binary_BinaryType ETMBranchList_Binary::type() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.type)
  return static_cast< ::simpleperf::proto::ETMBranchList_Binary_BinaryType >(type_);
}
inline void ETMBranchList_Binary::set_type(::simpleperf::proto::ETMBranchList_Binary_BinaryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.Binary.type)
}

// .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
inline bool ETMBranchList_Binary::has_kernel_info() const {
  return this != internal_default_instance() && kernel_info_ != nullptr;
}
inline void ETMBranchList_Binary::clear_kernel_info() {
  if (GetArenaNoVirtual() == nullptr && kernel_info_ != nullptr) {
    delete kernel_info_;
  }
  kernel_info_ = nullptr;
}
inline const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo& ETMBranchList_Binary::kernel_info() const {
  const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* p = kernel_info_;
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.Binary.kernel_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo*>(
      &::simpleperf::proto::_ETMBranchList_Binary_KernelBinaryInfo_default_instance_);
}
inline ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* ETMBranchList_Binary::release_kernel_info() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.ETMBranchList.Binary.kernel_info)
  
  ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* temp = kernel_info_;
  kernel_info_ = nullptr;
  return temp;
}
inline ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* ETMBranchList_Binary::mutable_kernel_info() {
  
  if (kernel_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo>(GetArenaNoVirtual());
    kernel_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.Binary.kernel_info)
  return kernel_info_;
}
inline void ETMBranchList_Binary::set_allocated_kernel_info(::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* kernel_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kernel_info_;
  }
  if (kernel_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kernel_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel_info, submessage_arena);
    }
    
  } else {
    
  }
  kernel_info_ = kernel_info;
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.ETMBranchList.Binary.kernel_info)
}

// -------------------------------------------------------------------

// ETMBranchList

// string magic = 1;
inline void ETMBranchList::clear_magic() {
  magic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ETMBranchList::magic() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.magic)
  return magic_.GetNoArena();
}
inline void ETMBranchList::set_magic(const std::string& value) {
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleperf.proto.ETMBranchList.magic)
}
inline void ETMBranchList::set_magic(std::string&& value) {
  
  magic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleperf.proto.ETMBranchList.magic)
}
inline void ETMBranchList::set_magic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleperf.proto.ETMBranchList.magic)
}
inline void ETMBranchList::set_magic(const char* value, size_t size) {
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleperf.proto.ETMBranchList.magic)
}
inline std::string* ETMBranchList::mutable_magic() {
  
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.magic)
  return magic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ETMBranchList::release_magic() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.ETMBranchList.magic)
  
  return magic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ETMBranchList::set_allocated_magic(std::string* magic) {
  if (magic != nullptr) {
    
  } else {
    
  }
  magic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magic);
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.ETMBranchList.magic)
}

// repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
inline int ETMBranchList::binaries_size() const {
  return binaries_.size();
}
inline void ETMBranchList::clear_binaries() {
  binaries_.Clear();
}
inline ::simpleperf::proto::ETMBranchList_Binary* ETMBranchList::mutable_binaries(int index) {
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.ETMBranchList.binaries)
  return binaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary >*
ETMBranchList::mutable_binaries() {
  // @@protoc_insertion_point(field_mutable_list:simpleperf.proto.ETMBranchList.binaries)
  return &binaries_;
}
inline const ::simpleperf::proto::ETMBranchList_Binary& ETMBranchList::binaries(int index) const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.ETMBranchList.binaries)
  return binaries_.Get(index);
}
inline ::simpleperf::proto::ETMBranchList_Binary* ETMBranchList::add_binaries() {
  // @@protoc_insertion_point(field_add:simpleperf.proto.ETMBranchList.binaries)
  return binaries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::ETMBranchList_Binary >&
ETMBranchList::binaries() const {
  // @@protoc_insertion_point(field_list:simpleperf.proto.ETMBranchList.binaries)
  return binaries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace simpleperf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::simpleperf::proto::ETMBranchList_Binary_BinaryType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto
