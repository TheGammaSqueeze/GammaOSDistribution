// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/extras/simpleperf/cmd_report_sample.proto

#include "system/extras/simpleperf/cmd_report_sample.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto;
namespace simpleperf_report_proto {
class Sample_CallChainEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample_CallChainEntry> _instance;
} _Sample_CallChainEntry_default_instance_;
class Sample_UnwindingResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample_UnwindingResult> _instance;
} _Sample_UnwindingResult_default_instance_;
class SampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sample> _instance;
} _Sample_default_instance_;
class LostSituationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LostSituation> _instance;
} _LostSituation_default_instance_;
class FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<File> _instance;
} _File_default_instance_;
class ThreadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Thread> _instance;
} _Thread_default_instance_;
class MetaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaInfo> _instance;
} _MetaInfo_default_instance_;
class RecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Record> _instance;
  const ::simpleperf_report_proto::Sample* sample_;
  const ::simpleperf_report_proto::LostSituation* lost_;
  const ::simpleperf_report_proto::File* file_;
  const ::simpleperf_report_proto::Thread* thread_;
  const ::simpleperf_report_proto::MetaInfo* meta_info_;
} _Record_default_instance_;
}  // namespace simpleperf_report_proto
static void InitDefaultsscc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_File_default_instance_;
    new (ptr) ::simpleperf_report_proto::File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

static void InitDefaultsscc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_LostSituation_default_instance_;
    new (ptr) ::simpleperf_report_proto::LostSituation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::LostSituation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

static void InitDefaultsscc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_MetaInfo_default_instance_;
    new (ptr) ::simpleperf_report_proto::MetaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::MetaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

static void InitDefaultsscc_info_Record_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_Record_default_instance_;
    new (ptr) ::simpleperf_report_proto::Record();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::Record::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Record_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Record_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {
      &scc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,
      &scc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,
      &scc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,
      &scc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,
      &scc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,}};

static void InitDefaultsscc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_Sample_default_instance_;
    new (ptr) ::simpleperf_report_proto::Sample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::Sample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {
      &scc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,
      &scc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base,}};

static void InitDefaultsscc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_Sample_CallChainEntry_default_instance_;
    new (ptr) ::simpleperf_report_proto::Sample_CallChainEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::Sample_CallChainEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

static void InitDefaultsscc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_Sample_UnwindingResult_default_instance_;
    new (ptr) ::simpleperf_report_proto::Sample_UnwindingResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::Sample_UnwindingResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

static void InitDefaultsscc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf_report_proto::_Thread_default_instance_;
    new (ptr) ::simpleperf_report_proto::Thread();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf_report_proto::Thread::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto}, {}};

namespace simpleperf_report_proto {
bool Sample_CallChainEntry_ExecutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Sample_CallChainEntry_ExecutionType_strings[4] = {};

static const char Sample_CallChainEntry_ExecutionType_names[] =
  "ART_METHOD"
  "INTERPRETED_JVM_METHOD"
  "JIT_JVM_METHOD"
  "NATIVE_METHOD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Sample_CallChainEntry_ExecutionType_entries[] = {
  { {Sample_CallChainEntry_ExecutionType_names + 0, 10}, 3 },
  { {Sample_CallChainEntry_ExecutionType_names + 10, 22}, 1 },
  { {Sample_CallChainEntry_ExecutionType_names + 32, 14}, 2 },
  { {Sample_CallChainEntry_ExecutionType_names + 46, 13}, 0 },
};

static const int Sample_CallChainEntry_ExecutionType_entries_by_number[] = {
  3, // 0 -> NATIVE_METHOD
  1, // 1 -> INTERPRETED_JVM_METHOD
  2, // 2 -> JIT_JVM_METHOD
  0, // 3 -> ART_METHOD
};

const std::string& Sample_CallChainEntry_ExecutionType_Name(
    Sample_CallChainEntry_ExecutionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Sample_CallChainEntry_ExecutionType_entries,
          Sample_CallChainEntry_ExecutionType_entries_by_number,
          4, Sample_CallChainEntry_ExecutionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Sample_CallChainEntry_ExecutionType_entries,
      Sample_CallChainEntry_ExecutionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Sample_CallChainEntry_ExecutionType_strings[idx].get();
}
bool Sample_CallChainEntry_ExecutionType_Parse(
    const std::string& name, Sample_CallChainEntry_ExecutionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Sample_CallChainEntry_ExecutionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Sample_CallChainEntry_ExecutionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::NATIVE_METHOD;
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::INTERPRETED_JVM_METHOD;
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::JIT_JVM_METHOD;
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::ART_METHOD;
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::ExecutionType_MIN;
constexpr Sample_CallChainEntry_ExecutionType Sample_CallChainEntry::ExecutionType_MAX;
constexpr int Sample_CallChainEntry::ExecutionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Sample_UnwindingResult_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Sample_UnwindingResult_ErrorCode_strings[9] = {};

static const char Sample_UnwindingResult_ErrorCode_names[] =
  "ERROR_INVALID_ELF"
  "ERROR_INVALID_MAP"
  "ERROR_MAX_FRAME_EXCEEDED"
  "ERROR_MEMORY_INVALID"
  "ERROR_NONE"
  "ERROR_NOT_ENOUGH_STACK"
  "ERROR_REPEATED_FRAME"
  "ERROR_UNKNOWN"
  "ERROR_UNWIND_INFO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Sample_UnwindingResult_ErrorCode_entries[] = {
  { {Sample_UnwindingResult_ErrorCode_names + 0, 17}, 8 },
  { {Sample_UnwindingResult_ErrorCode_names + 17, 17}, 5 },
  { {Sample_UnwindingResult_ErrorCode_names + 34, 24}, 6 },
  { {Sample_UnwindingResult_ErrorCode_names + 58, 20}, 3 },
  { {Sample_UnwindingResult_ErrorCode_names + 78, 10}, 0 },
  { {Sample_UnwindingResult_ErrorCode_names + 88, 22}, 2 },
  { {Sample_UnwindingResult_ErrorCode_names + 110, 20}, 7 },
  { {Sample_UnwindingResult_ErrorCode_names + 130, 13}, 1 },
  { {Sample_UnwindingResult_ErrorCode_names + 143, 17}, 4 },
};

static const int Sample_UnwindingResult_ErrorCode_entries_by_number[] = {
  4, // 0 -> ERROR_NONE
  7, // 1 -> ERROR_UNKNOWN
  5, // 2 -> ERROR_NOT_ENOUGH_STACK
  3, // 3 -> ERROR_MEMORY_INVALID
  8, // 4 -> ERROR_UNWIND_INFO
  1, // 5 -> ERROR_INVALID_MAP
  2, // 6 -> ERROR_MAX_FRAME_EXCEEDED
  6, // 7 -> ERROR_REPEATED_FRAME
  0, // 8 -> ERROR_INVALID_ELF
};

const std::string& Sample_UnwindingResult_ErrorCode_Name(
    Sample_UnwindingResult_ErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Sample_UnwindingResult_ErrorCode_entries,
          Sample_UnwindingResult_ErrorCode_entries_by_number,
          9, Sample_UnwindingResult_ErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Sample_UnwindingResult_ErrorCode_entries,
      Sample_UnwindingResult_ErrorCode_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Sample_UnwindingResult_ErrorCode_strings[idx].get();
}
bool Sample_UnwindingResult_ErrorCode_Parse(
    const std::string& name, Sample_UnwindingResult_ErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Sample_UnwindingResult_ErrorCode_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<Sample_UnwindingResult_ErrorCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_NONE;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_UNKNOWN;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_NOT_ENOUGH_STACK;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_MEMORY_INVALID;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_UNWIND_INFO;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_INVALID_MAP;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_MAX_FRAME_EXCEEDED;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_REPEATED_FRAME;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ERROR_INVALID_ELF;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ErrorCode_MIN;
constexpr Sample_UnwindingResult_ErrorCode Sample_UnwindingResult::ErrorCode_MAX;
constexpr int Sample_UnwindingResult::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Sample_CallChainEntry::InitAsDefaultInstance() {
}
class Sample_CallChainEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample_CallChainEntry>()._has_bits_);
  static void set_has_vaddr_in_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symbol_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_execution_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Sample_CallChainEntry::Sample_CallChainEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.Sample.CallChainEntry)
}
Sample_CallChainEntry::Sample_CallChainEntry(const Sample_CallChainEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vaddr_in_file_, &from.vaddr_in_file_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_type_) -
    reinterpret_cast<char*>(&vaddr_in_file_)) + sizeof(execution_type_));
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.Sample.CallChainEntry)
}

void Sample_CallChainEntry::SharedCtor() {
  ::memset(&vaddr_in_file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_type_) -
      reinterpret_cast<char*>(&vaddr_in_file_)) + sizeof(execution_type_));
}

Sample_CallChainEntry::~Sample_CallChainEntry() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.Sample.CallChainEntry)
  SharedDtor();
}

void Sample_CallChainEntry::SharedDtor() {
}

void Sample_CallChainEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample_CallChainEntry& Sample_CallChainEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_CallChainEntry_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void Sample_CallChainEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.Sample.CallChainEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&vaddr_in_file_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_type_) -
        reinterpret_cast<char*>(&vaddr_in_file_)) + sizeof(execution_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample_CallChainEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 vaddr_in_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vaddr_in_file(&has_bits);
          vaddr_in_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_id(&has_bits);
          file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 symbol_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_symbol_id(&has_bits);
          symbol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.Sample.CallChainEntry.ExecutionType execution_type = 4 [default = NATIVE_METHOD];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::simpleperf_report_proto::Sample_CallChainEntry_ExecutionType_IsValid(val))) {
            set_execution_type(static_cast<::simpleperf_report_proto::Sample_CallChainEntry_ExecutionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample_CallChainEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.Sample.CallChainEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 vaddr_in_file = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_vaddr_in_file(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vaddr_in_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_file_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 symbol_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_symbol_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbol_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.Sample.CallChainEntry.ExecutionType execution_type = 4 [default = NATIVE_METHOD];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simpleperf_report_proto::Sample_CallChainEntry_ExecutionType_IsValid(value)) {
            set_execution_type(static_cast< ::simpleperf_report_proto::Sample_CallChainEntry_ExecutionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.Sample.CallChainEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.Sample.CallChainEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample_CallChainEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.Sample.CallChainEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 vaddr_in_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->vaddr_in_file(), output);
  }

  // optional uint32 file_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->file_id(), output);
  }

  // optional int32 symbol_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->symbol_id(), output);
  }

  // optional .simpleperf_report_proto.Sample.CallChainEntry.ExecutionType execution_type = 4 [default = NATIVE_METHOD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->execution_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.Sample.CallChainEntry)
}

size_t Sample_CallChainEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.Sample.CallChainEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 vaddr_in_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->vaddr_in_file());
    }

    // optional uint32 file_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->file_id());
    }

    // optional int32 symbol_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->symbol_id());
    }

    // optional .simpleperf_report_proto.Sample.CallChainEntry.ExecutionType execution_type = 4 [default = NATIVE_METHOD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->execution_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_CallChainEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Sample_CallChainEntry*>(
      &from));
}

void Sample_CallChainEntry::MergeFrom(const Sample_CallChainEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.Sample.CallChainEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      vaddr_in_file_ = from.vaddr_in_file_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_id_ = from.file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_id_ = from.symbol_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      execution_type_ = from.execution_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample_CallChainEntry::CopyFrom(const Sample_CallChainEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.Sample.CallChainEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_CallChainEntry::IsInitialized() const {
  return true;
}

void Sample_CallChainEntry::InternalSwap(Sample_CallChainEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vaddr_in_file_, other->vaddr_in_file_);
  swap(file_id_, other->file_id_);
  swap(symbol_id_, other->symbol_id_);
  swap(execution_type_, other->execution_type_);
}

std::string Sample_CallChainEntry::GetTypeName() const {
  return "simpleperf_report_proto.Sample.CallChainEntry";
}


// ===================================================================

void Sample_UnwindingResult::InitAsDefaultInstance() {
}
class Sample_UnwindingResult::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample_UnwindingResult>()._has_bits_);
  static void set_has_raw_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Sample_UnwindingResult::Sample_UnwindingResult()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.Sample.UnwindingResult)
}
Sample_UnwindingResult::Sample_UnwindingResult(const Sample_UnwindingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_addr_, &from.error_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&error_addr_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.Sample.UnwindingResult)
}

void Sample_UnwindingResult::SharedCtor() {
  ::memset(&error_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&error_addr_)) + sizeof(error_code_));
}

Sample_UnwindingResult::~Sample_UnwindingResult() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.Sample.UnwindingResult)
  SharedDtor();
}

void Sample_UnwindingResult::SharedDtor() {
}

void Sample_UnwindingResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample_UnwindingResult& Sample_UnwindingResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_UnwindingResult_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void Sample_UnwindingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.Sample.UnwindingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&error_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&error_addr_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample_UnwindingResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 raw_error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_raw_error_code(&has_bits);
          raw_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 error_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_addr(&has_bits);
          error_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.Sample.UnwindingResult.ErrorCode error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::simpleperf_report_proto::Sample_UnwindingResult_ErrorCode_IsValid(val))) {
            set_error_code(static_cast<::simpleperf_report_proto::Sample_UnwindingResult_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample_UnwindingResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.Sample.UnwindingResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 raw_error_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_raw_error_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 error_addr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_error_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &error_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.Sample.UnwindingResult.ErrorCode error_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simpleperf_report_proto::Sample_UnwindingResult_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::simpleperf_report_proto::Sample_UnwindingResult_ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.Sample.UnwindingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.Sample.UnwindingResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample_UnwindingResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.Sample.UnwindingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 raw_error_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->raw_error_code(), output);
  }

  // optional uint64 error_addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->error_addr(), output);
  }

  // optional .simpleperf_report_proto.Sample.UnwindingResult.ErrorCode error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.Sample.UnwindingResult)
}

size_t Sample_UnwindingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.Sample.UnwindingResult)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 error_addr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->error_addr());
    }

    // optional uint32 raw_error_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->raw_error_code());
    }

    // optional .simpleperf_report_proto.Sample.UnwindingResult.ErrorCode error_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample_UnwindingResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Sample_UnwindingResult*>(
      &from));
}

void Sample_UnwindingResult::MergeFrom(const Sample_UnwindingResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.Sample.UnwindingResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      error_addr_ = from.error_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      raw_error_code_ = from.raw_error_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample_UnwindingResult::CopyFrom(const Sample_UnwindingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.Sample.UnwindingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample_UnwindingResult::IsInitialized() const {
  return true;
}

void Sample_UnwindingResult::InternalSwap(Sample_UnwindingResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(error_addr_, other->error_addr_);
  swap(raw_error_code_, other->raw_error_code_);
  swap(error_code_, other->error_code_);
}

std::string Sample_UnwindingResult::GetTypeName() const {
  return "simpleperf_report_proto.Sample.UnwindingResult";
}


// ===================================================================

void Sample::InitAsDefaultInstance() {
  ::simpleperf_report_proto::_Sample_default_instance_._instance.get_mutable()->unwinding_result_ = const_cast< ::simpleperf_report_proto::Sample_UnwindingResult*>(
      ::simpleperf_report_proto::Sample_UnwindingResult::internal_default_instance());
}
class Sample::_Internal {
 public:
  using HasBits = decltype(std::declval<Sample>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::simpleperf_report_proto::Sample_UnwindingResult& unwinding_result(const Sample* msg);
  static void set_has_unwinding_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::simpleperf_report_proto::Sample_UnwindingResult&
Sample::_Internal::unwinding_result(const Sample* msg) {
  return *msg->unwinding_result_;
}
Sample::Sample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.Sample)
}
Sample::Sample(const Sample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      callchain_(from.callchain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unwinding_result()) {
    unwinding_result_ = new ::simpleperf_report_proto::Sample_UnwindingResult(*from.unwinding_result_);
  } else {
    unwinding_result_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_count_) -
    reinterpret_cast<char*>(&time_)) + sizeof(event_count_));
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.Sample)
}

void Sample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  ::memset(&unwinding_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_count_) -
      reinterpret_cast<char*>(&unwinding_result_)) + sizeof(event_count_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != internal_default_instance()) delete unwinding_result_;
}

void Sample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sample& Sample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sample_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void Sample::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callchain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unwinding_result_ != nullptr);
    unwinding_result_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_count_) -
        reinterpret_cast<char*>(&time_)) + sizeof(event_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 thread_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_thread_id(&has_bits);
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .simpleperf_report_proto.Sample.CallChainEntry callchain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_callchain(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional uint64 event_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_count(&has_bits);
          event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_type_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_type_id(&has_bits);
          event_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.Sample.UnwindingResult unwinding_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_unwinding_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.Sample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 thread_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_thread_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .simpleperf_report_proto.Sample.CallChainEntry callchain = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_callchain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 event_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_event_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_type_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_event_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.Sample.UnwindingResult unwinding_result = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unwinding_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.Sample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.Sample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional int32 thread_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->thread_id(), output);
  }

  // repeated .simpleperf_report_proto.Sample.CallChainEntry callchain = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->callchain_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->callchain(static_cast<int>(i)),
      output);
  }

  // optional uint64 event_count = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->event_count(), output);
  }

  // optional uint32 event_type_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->event_type_id(), output);
  }

  // optional .simpleperf_report_proto.Sample.UnwindingResult unwinding_result = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::unwinding_result(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.Sample)
}

size_t Sample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.Sample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .simpleperf_report_proto.Sample.CallChainEntry callchain = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->callchain_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->callchain(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .simpleperf_report_proto.Sample.UnwindingResult unwinding_result = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unwinding_result_);
    }

    // optional uint64 time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 thread_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // optional uint32 event_type_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->event_type_id());
    }

    // optional uint64 event_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->event_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Sample*>(
      &from));
}

void Sample::MergeFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.Sample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callchain_.MergeFrom(from.callchain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unwinding_result()->::simpleperf_report_proto::Sample_UnwindingResult::MergeFrom(from.unwinding_result());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_id_ = from.event_type_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_count_ = from.event_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sample::CopyFrom(const Sample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.Sample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  return true;
}

void Sample::InternalSwap(Sample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&callchain_)->InternalSwap(CastToBase(&other->callchain_));
  swap(unwinding_result_, other->unwinding_result_);
  swap(time_, other->time_);
  swap(thread_id_, other->thread_id_);
  swap(event_type_id_, other->event_type_id_);
  swap(event_count_, other->event_count_);
}

std::string Sample::GetTypeName() const {
  return "simpleperf_report_proto.Sample";
}


// ===================================================================

void LostSituation::InitAsDefaultInstance() {
}
class LostSituation::_Internal {
 public:
  using HasBits = decltype(std::declval<LostSituation>()._has_bits_);
  static void set_has_sample_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lost_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LostSituation::LostSituation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.LostSituation)
}
LostSituation::LostSituation(const LostSituation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_count_, &from.sample_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&lost_count_) -
    reinterpret_cast<char*>(&sample_count_)) + sizeof(lost_count_));
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.LostSituation)
}

void LostSituation::SharedCtor() {
  ::memset(&sample_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lost_count_) -
      reinterpret_cast<char*>(&sample_count_)) + sizeof(lost_count_));
}

LostSituation::~LostSituation() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.LostSituation)
  SharedDtor();
}

void LostSituation::SharedDtor() {
}

void LostSituation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LostSituation& LostSituation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LostSituation_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void LostSituation::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.LostSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sample_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lost_count_) -
        reinterpret_cast<char*>(&sample_count_)) + sizeof(lost_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LostSituation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sample_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_count(&has_bits);
          sample_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lost_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lost_count(&has_bits);
          lost_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LostSituation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.LostSituation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sample_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sample_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sample_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lost_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_lost_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lost_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.LostSituation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.LostSituation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LostSituation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.LostSituation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sample_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sample_count(), output);
  }

  // optional uint64 lost_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->lost_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.LostSituation)
}

size_t LostSituation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.LostSituation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 sample_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sample_count());
    }

    // optional uint64 lost_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->lost_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LostSituation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LostSituation*>(
      &from));
}

void LostSituation::MergeFrom(const LostSituation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.LostSituation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sample_count_ = from.sample_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      lost_count_ = from.lost_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LostSituation::CopyFrom(const LostSituation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.LostSituation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostSituation::IsInitialized() const {
  return true;
}

void LostSituation::InternalSwap(LostSituation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sample_count_, other->sample_count_);
  swap(lost_count_, other->lost_count_);
}

std::string LostSituation::GetTypeName() const {
  return "simpleperf_report_proto.LostSituation";
}


// ===================================================================

void File::InitAsDefaultInstance() {
}
class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

File::File()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      symbol_(from.symbol_),
      mangled_symbol_(from.mangled_symbol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.File)
}

void File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

File::~File() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.File)
  SharedDtor();
}

void File::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const File& File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_File_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void File::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.Clear();
  mangled_symbol_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_symbol(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string mangled_symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_mangled_symbol(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool File::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.File)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string symbol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mangled_symbol = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_mangled_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.File)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void File::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // repeated string symbol = 3;
  for (int i = 0, n = this->symbol_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->symbol(i), output);
  }

  // repeated string mangled_symbol = 4;
  for (int i = 0, n = this->mangled_symbol_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->mangled_symbol(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.File)
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.File)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string symbol = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->symbol_size());
  for (int i = 0, n = this->symbol_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->symbol(i));
  }

  // repeated string mangled_symbol = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->mangled_symbol_size());
  for (int i = 0, n = this->mangled_symbol_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->mangled_symbol(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const File*>(
      &from));
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbol_.MergeFrom(from.symbol_);
  mangled_symbol_.MergeFrom(from.mangled_symbol_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.InternalSwap(CastToBase(&other->symbol_));
  mangled_symbol_.InternalSwap(CastToBase(&other->mangled_symbol_));
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

std::string File::GetTypeName() const {
  return "simpleperf_report_proto.File";
}


// ===================================================================

void Thread::InitAsDefaultInstance() {
}
class Thread::_Internal {
 public:
  using HasBits = decltype(std::declval<Thread>()._has_bits_);
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thread_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Thread::Thread()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.Thread)
}
Thread::Thread(const Thread& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_thread_name()) {
    thread_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
  }
  ::memcpy(&thread_id_, &from.thread_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_id_) -
    reinterpret_cast<char*>(&thread_id_)) + sizeof(process_id_));
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.Thread)
}

void Thread::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  thread_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&thread_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_id_) -
      reinterpret_cast<char*>(&thread_id_)) + sizeof(process_id_));
}

Thread::~Thread() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.Thread)
  SharedDtor();
}

void Thread::SharedDtor() {
  thread_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Thread::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Thread& Thread::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Thread_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void Thread::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.Thread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thread_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&thread_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&process_id_) -
        reinterpret_cast<char*>(&thread_id_)) + sizeof(process_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Thread::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 thread_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thread_id(&has_bits);
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 process_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thread_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_thread_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Thread::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.Thread)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 thread_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_thread_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 process_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_process_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thread_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.Thread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.Thread)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Thread::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.Thread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 thread_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  // optional uint32 process_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->process_id(), output);
  }

  // optional string thread_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->thread_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.Thread)
}

size_t Thread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.Thread)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thread_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->thread_name());
    }

    // optional uint32 thread_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->thread_id());
    }

    // optional uint32 process_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Thread::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Thread*>(
      &from));
}

void Thread::MergeFrom(const Thread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.Thread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thread_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      process_id_ = from.process_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Thread::CopyFrom(const Thread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.Thread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thread::IsInitialized() const {
  return true;
}

void Thread::InternalSwap(Thread* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thread_name_.Swap(&other->thread_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thread_id_, other->thread_id_);
  swap(process_id_, other->process_id_);
}

std::string Thread::GetTypeName() const {
  return "simpleperf_report_proto.Thread";
}


// ===================================================================

void MetaInfo::InitAsDefaultInstance() {
}
class MetaInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaInfo>()._has_bits_);
  static void set_has_app_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetaInfo::MetaInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.MetaInfo)
}
MetaInfo::MetaInfo(const MetaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_type_(from.event_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_package_name()) {
    app_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_package_name_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.MetaInfo)
}

void MetaInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  app_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MetaInfo::~MetaInfo() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.MetaInfo)
  SharedDtor();
}

void MetaInfo::SharedDtor() {
  app_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaInfo& MetaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaInfo_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void MetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.MetaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_package_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_event_type(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string app_package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_app_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetaInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.MetaInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string event_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_event_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.MetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.MetaInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetaInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.MetaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string event_type = 1;
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->event_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_package_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.MetaInfo)
}

size_t MetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.MetaInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_type = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->event_type_size());
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->event_type(i));
  }

  // optional string app_package_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->app_package_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetaInfo*>(
      &from));
}

void MetaInfo::MergeFrom(const MetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.MetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  if (from.has_app_package_name()) {
    _has_bits_[0] |= 0x00000001u;
    app_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_package_name_);
  }
}

void MetaInfo::CopyFrom(const MetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.MetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaInfo::IsInitialized() const {
  return true;
}

void MetaInfo::InternalSwap(MetaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_type_.InternalSwap(CastToBase(&other->event_type_));
  app_package_name_.Swap(&other->app_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string MetaInfo::GetTypeName() const {
  return "simpleperf_report_proto.MetaInfo";
}


// ===================================================================

void Record::InitAsDefaultInstance() {
}
class Record::_Internal {
 public:
  using HasBits = decltype(std::declval<Record>()._has_bits_);
  static const ::simpleperf_report_proto::Sample& sample(const Record* msg);
  static const ::simpleperf_report_proto::LostSituation& lost(const Record* msg);
  static const ::simpleperf_report_proto::File& file(const Record* msg);
  static const ::simpleperf_report_proto::Thread& thread(const Record* msg);
  static const ::simpleperf_report_proto::MetaInfo& meta_info(const Record* msg);
};

const ::simpleperf_report_proto::Sample&
Record::_Internal::sample(const Record* msg) {
  return *msg->record_data_.sample_;
}
const ::simpleperf_report_proto::LostSituation&
Record::_Internal::lost(const Record* msg) {
  return *msg->record_data_.lost_;
}
const ::simpleperf_report_proto::File&
Record::_Internal::file(const Record* msg) {
  return *msg->record_data_.file_;
}
const ::simpleperf_report_proto::Thread&
Record::_Internal::thread(const Record* msg) {
  return *msg->record_data_.thread_;
}
const ::simpleperf_report_proto::MetaInfo&
Record::_Internal::meta_info(const Record* msg) {
  return *msg->record_data_.meta_info_;
}
void Record::set_allocated_sample(::simpleperf_report_proto::Sample* sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_record_data();
  if (sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    set_has_sample();
    record_data_.sample_ = sample;
  }
  // @@protoc_insertion_point(field_set_allocated:simpleperf_report_proto.Record.sample)
}
void Record::set_allocated_lost(::simpleperf_report_proto::LostSituation* lost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_record_data();
  if (lost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lost, submessage_arena);
    }
    set_has_lost();
    record_data_.lost_ = lost;
  }
  // @@protoc_insertion_point(field_set_allocated:simpleperf_report_proto.Record.lost)
}
void Record::set_allocated_file(::simpleperf_report_proto::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_record_data();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    record_data_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:simpleperf_report_proto.Record.file)
}
void Record::set_allocated_thread(::simpleperf_report_proto::Thread* thread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_record_data();
  if (thread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread, submessage_arena);
    }
    set_has_thread();
    record_data_.thread_ = thread;
  }
  // @@protoc_insertion_point(field_set_allocated:simpleperf_report_proto.Record.thread)
}
void Record::set_allocated_meta_info(::simpleperf_report_proto::MetaInfo* meta_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_record_data();
  if (meta_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta_info, submessage_arena);
    }
    set_has_meta_info();
    record_data_.meta_info_ = meta_info;
  }
  // @@protoc_insertion_point(field_set_allocated:simpleperf_report_proto.Record.meta_info)
}
Record::Record()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf_report_proto.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_record_data();
  switch (from.record_data_case()) {
    case kSample: {
      mutable_sample()->::simpleperf_report_proto::Sample::MergeFrom(from.sample());
      break;
    }
    case kLost: {
      mutable_lost()->::simpleperf_report_proto::LostSituation::MergeFrom(from.lost());
      break;
    }
    case kFile: {
      mutable_file()->::simpleperf_report_proto::File::MergeFrom(from.file());
      break;
    }
    case kThread: {
      mutable_thread()->::simpleperf_report_proto::Thread::MergeFrom(from.thread());
      break;
    }
    case kMetaInfo: {
      mutable_meta_info()->::simpleperf_report_proto::MetaInfo::MergeFrom(from.meta_info());
      break;
    }
    case RECORD_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:simpleperf_report_proto.Record)
}

void Record::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Record_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  clear_has_record_data();
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:simpleperf_report_proto.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (has_record_data()) {
    clear_record_data();
  }
}

void Record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Record& Record::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Record_system_2fextras_2fsimpleperf_2fcmd_5freport_5fsample_2eproto.base);
  return *internal_default_instance();
}


void Record::clear_record_data() {
// @@protoc_insertion_point(one_of_clear_start:simpleperf_report_proto.Record)
  switch (record_data_case()) {
    case kSample: {
      delete record_data_.sample_;
      break;
    }
    case kLost: {
      delete record_data_.lost_;
      break;
    }
    case kFile: {
      delete record_data_.file_;
      break;
    }
    case kThread: {
      delete record_data_.thread_;
      break;
    }
    case kMetaInfo: {
      delete record_data_.meta_info_;
      break;
    }
    case RECORD_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_DATA_NOT_SET;
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf_report_proto.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_record_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .simpleperf_report_proto.Sample sample = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sample(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.LostSituation lost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.File file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.Thread thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_thread(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .simpleperf_report_proto.MetaInfo meta_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_meta_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Record::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf_report_proto.Record)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .simpleperf_report_proto.Sample sample = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.LostSituation lost = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.File file = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.Thread thread = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .simpleperf_report_proto.MetaInfo meta_info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf_report_proto.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf_report_proto.Record)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Record::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf_report_proto.Record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (record_data_case()) {
    case kSample:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        1, _Internal::sample(this), output);
      break;
    case kLost:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::lost(this), output);
      break;
    case kFile:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::file(this), output);
      break;
    case kThread:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::thread(this), output);
      break;
    case kMetaInfo:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::meta_info(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf_report_proto.Record)
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf_report_proto.Record)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (record_data_case()) {
    // optional .simpleperf_report_proto.Sample sample = 1;
    case kSample: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_data_.sample_);
      break;
    }
    // optional .simpleperf_report_proto.LostSituation lost = 2;
    case kLost: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_data_.lost_);
      break;
    }
    // optional .simpleperf_report_proto.File file = 3;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_data_.file_);
      break;
    }
    // optional .simpleperf_report_proto.Thread thread = 4;
    case kThread: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_data_.thread_);
      break;
    }
    // optional .simpleperf_report_proto.MetaInfo meta_info = 5;
    case kMetaInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_data_.meta_info_);
      break;
    }
    case RECORD_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Record::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Record*>(
      &from));
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf_report_proto.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.record_data_case()) {
    case kSample: {
      mutable_sample()->::simpleperf_report_proto::Sample::MergeFrom(from.sample());
      break;
    }
    case kLost: {
      mutable_lost()->::simpleperf_report_proto::LostSituation::MergeFrom(from.lost());
      break;
    }
    case kFile: {
      mutable_file()->::simpleperf_report_proto::File::MergeFrom(from.file());
      break;
    }
    case kThread: {
      mutable_thread()->::simpleperf_report_proto::Thread::MergeFrom(from.thread());
      break;
    }
    case kMetaInfo: {
      mutable_meta_info()->::simpleperf_report_proto::MetaInfo::MergeFrom(from.meta_info());
      break;
    }
    case RECORD_DATA_NOT_SET: {
      break;
    }
  }
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf_report_proto.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(record_data_, other->record_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Record::GetTypeName() const {
  return "simpleperf_report_proto.Record";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace simpleperf_report_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::Sample_CallChainEntry* Arena::CreateMaybeMessage< ::simpleperf_report_proto::Sample_CallChainEntry >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::Sample_CallChainEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::Sample_UnwindingResult* Arena::CreateMaybeMessage< ::simpleperf_report_proto::Sample_UnwindingResult >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::Sample_UnwindingResult >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::Sample* Arena::CreateMaybeMessage< ::simpleperf_report_proto::Sample >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::Sample >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::LostSituation* Arena::CreateMaybeMessage< ::simpleperf_report_proto::LostSituation >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::LostSituation >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::File* Arena::CreateMaybeMessage< ::simpleperf_report_proto::File >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::File >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::Thread* Arena::CreateMaybeMessage< ::simpleperf_report_proto::Thread >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::Thread >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::MetaInfo* Arena::CreateMaybeMessage< ::simpleperf_report_proto::MetaInfo >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::MetaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf_report_proto::Record* Arena::CreateMaybeMessage< ::simpleperf_report_proto::Record >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf_report_proto::Record >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
