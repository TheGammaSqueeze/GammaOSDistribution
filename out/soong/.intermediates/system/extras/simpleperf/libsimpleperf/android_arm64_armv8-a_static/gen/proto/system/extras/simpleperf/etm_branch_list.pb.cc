// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/extras/simpleperf/etm_branch_list.proto

#include "system/extras/simpleperf/etm_branch_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto;
namespace simpleperf {
namespace proto {
class ETMBranchList_Binary_Address_BranchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ETMBranchList_Binary_Address_Branch> _instance;
} _ETMBranchList_Binary_Address_Branch_default_instance_;
class ETMBranchList_Binary_AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ETMBranchList_Binary_Address> _instance;
} _ETMBranchList_Binary_Address_default_instance_;
class ETMBranchList_Binary_KernelBinaryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ETMBranchList_Binary_KernelBinaryInfo> _instance;
} _ETMBranchList_Binary_KernelBinaryInfo_default_instance_;
class ETMBranchList_BinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ETMBranchList_Binary> _instance;
} _ETMBranchList_Binary_default_instance_;
class ETMBranchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ETMBranchList> _instance;
} _ETMBranchList_default_instance_;
}  // namespace proto
}  // namespace simpleperf
static void InitDefaultsscc_info_ETMBranchList_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_ETMBranchList_default_instance_;
    new (ptr) ::simpleperf::proto::ETMBranchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::ETMBranchList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ETMBranchList_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ETMBranchList_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto}, {
      &scc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base,}};

static void InitDefaultsscc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_ETMBranchList_Binary_default_instance_;
    new (ptr) ::simpleperf::proto::ETMBranchList_Binary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::ETMBranchList_Binary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto}, {
      &scc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base,
      &scc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base,}};

static void InitDefaultsscc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_ETMBranchList_Binary_Address_default_instance_;
    new (ptr) ::simpleperf::proto::ETMBranchList_Binary_Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::ETMBranchList_Binary_Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto}, {
      &scc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base,}};

static void InitDefaultsscc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_ETMBranchList_Binary_Address_Branch_default_instance_;
    new (ptr) ::simpleperf::proto::ETMBranchList_Binary_Address_Branch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::ETMBranchList_Binary_Address_Branch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto}, {}};

static void InitDefaultsscc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_ETMBranchList_Binary_KernelBinaryInfo_default_instance_;
    new (ptr) ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto}, {}};

namespace simpleperf {
namespace proto {
bool ETMBranchList_Binary_BinaryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ETMBranchList_Binary_BinaryType_strings[3] = {};

static const char ETMBranchList_Binary_BinaryType_names[] =
  "ELF_FILE"
  "KERNEL"
  "KERNEL_MODULE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ETMBranchList_Binary_BinaryType_entries[] = {
  { {ETMBranchList_Binary_BinaryType_names + 0, 8}, 0 },
  { {ETMBranchList_Binary_BinaryType_names + 8, 6}, 1 },
  { {ETMBranchList_Binary_BinaryType_names + 14, 13}, 2 },
};

static const int ETMBranchList_Binary_BinaryType_entries_by_number[] = {
  0, // 0 -> ELF_FILE
  1, // 1 -> KERNEL
  2, // 2 -> KERNEL_MODULE
};

const std::string& ETMBranchList_Binary_BinaryType_Name(
    ETMBranchList_Binary_BinaryType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ETMBranchList_Binary_BinaryType_entries,
          ETMBranchList_Binary_BinaryType_entries_by_number,
          3, ETMBranchList_Binary_BinaryType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ETMBranchList_Binary_BinaryType_entries,
      ETMBranchList_Binary_BinaryType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ETMBranchList_Binary_BinaryType_strings[idx].get();
}
bool ETMBranchList_Binary_BinaryType_Parse(
    const std::string& name, ETMBranchList_Binary_BinaryType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ETMBranchList_Binary_BinaryType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ETMBranchList_Binary_BinaryType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary::ELF_FILE;
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary::KERNEL;
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary::KERNEL_MODULE;
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary::BinaryType_MIN;
constexpr ETMBranchList_Binary_BinaryType ETMBranchList_Binary::BinaryType_MAX;
constexpr int ETMBranchList_Binary::BinaryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ETMBranchList_Binary_Address_Branch::InitAsDefaultInstance() {
}
class ETMBranchList_Binary_Address_Branch::_Internal {
 public:
};

ETMBranchList_Binary_Address_Branch::ETMBranchList_Binary_Address_Branch()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
}
ETMBranchList_Binary_Address_Branch::ETMBranchList_Binary_Address_Branch(const ETMBranchList_Binary_Address_Branch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.branch().empty()) {
    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&branch_size_) -
    reinterpret_cast<char*>(&count_)) + sizeof(branch_size_));
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
}

void ETMBranchList_Binary_Address_Branch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_size_) -
      reinterpret_cast<char*>(&count_)) + sizeof(branch_size_));
}

ETMBranchList_Binary_Address_Branch::~ETMBranchList_Binary_Address_Branch() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  SharedDtor();
}

void ETMBranchList_Binary_Address_Branch::SharedDtor() {
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ETMBranchList_Binary_Address_Branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ETMBranchList_Binary_Address_Branch& ETMBranchList_Binary_Address_Branch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ETMBranchList_Binary_Address_Branch_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  return *internal_default_instance();
}


void ETMBranchList_Binary_Address_Branch::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  branch_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_size_) -
      reinterpret_cast<char*>(&count_)) + sizeof(branch_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ETMBranchList_Binary_Address_Branch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes branch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_branch(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 branch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          branch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ETMBranchList_Binary_Address_Branch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes branch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_branch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 branch_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ETMBranchList_Binary_Address_Branch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes branch = 1;
  if (this->branch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->branch(), output);
  }

  // uint32 branch_size = 2;
  if (this->branch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->branch_size(), output);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
}

size_t ETMBranchList_Binary_Address_Branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes branch = 1;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->branch());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // uint32 branch_size = 2;
  if (this->branch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->branch_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETMBranchList_Binary_Address_Branch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ETMBranchList_Binary_Address_Branch*>(
      &from));
}

void ETMBranchList_Binary_Address_Branch::MergeFrom(const ETMBranchList_Binary_Address_Branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.branch_size() != 0) {
    set_branch_size(from.branch_size());
  }
}

void ETMBranchList_Binary_Address_Branch::CopyFrom(const ETMBranchList_Binary_Address_Branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.ETMBranchList.Binary.Address.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETMBranchList_Binary_Address_Branch::IsInitialized() const {
  return true;
}

void ETMBranchList_Binary_Address_Branch::InternalSwap(ETMBranchList_Binary_Address_Branch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  branch_.Swap(&other->branch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(branch_size_, other->branch_size_);
}

std::string ETMBranchList_Binary_Address_Branch::GetTypeName() const {
  return "simpleperf.proto.ETMBranchList.Binary.Address.Branch";
}


// ===================================================================

void ETMBranchList_Binary_Address::InitAsDefaultInstance() {
}
class ETMBranchList_Binary_Address::_Internal {
 public:
};

ETMBranchList_Binary_Address::ETMBranchList_Binary_Address()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.ETMBranchList.Binary.Address)
}
ETMBranchList_Binary_Address::ETMBranchList_Binary_Address(const ETMBranchList_Binary_Address& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      branches_(from.branches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.ETMBranchList.Binary.Address)
}

void ETMBranchList_Binary_Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  addr_ = PROTOBUF_ULONGLONG(0);
}

ETMBranchList_Binary_Address::~ETMBranchList_Binary_Address() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.ETMBranchList.Binary.Address)
  SharedDtor();
}

void ETMBranchList_Binary_Address::SharedDtor() {
}

void ETMBranchList_Binary_Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ETMBranchList_Binary_Address& ETMBranchList_Binary_Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ETMBranchList_Binary_Address_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  return *internal_default_instance();
}


void ETMBranchList_Binary_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.ETMBranchList.Binary.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  branches_.Clear();
  addr_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ETMBranchList_Binary_Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_branches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ETMBranchList_Binary_Address::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.ETMBranchList.Binary.Address)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_branches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.ETMBranchList.Binary.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.ETMBranchList.Binary.Address)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ETMBranchList_Binary_Address::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.ETMBranchList.Binary.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->branches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->branches(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.ETMBranchList.Binary.Address)
}

size_t ETMBranchList_Binary_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.ETMBranchList.Binary.Address)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .simpleperf.proto.ETMBranchList.Binary.Address.Branch branches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->branches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->branches(static_cast<int>(i)));
    }
  }

  // uint64 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETMBranchList_Binary_Address::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ETMBranchList_Binary_Address*>(
      &from));
}

void ETMBranchList_Binary_Address::MergeFrom(const ETMBranchList_Binary_Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.ETMBranchList.Binary.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  branches_.MergeFrom(from.branches_);
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void ETMBranchList_Binary_Address::CopyFrom(const ETMBranchList_Binary_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.ETMBranchList.Binary.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETMBranchList_Binary_Address::IsInitialized() const {
  return true;
}

void ETMBranchList_Binary_Address::InternalSwap(ETMBranchList_Binary_Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&branches_)->InternalSwap(CastToBase(&other->branches_));
  swap(addr_, other->addr_);
}

std::string ETMBranchList_Binary_Address::GetTypeName() const {
  return "simpleperf.proto.ETMBranchList.Binary.Address";
}


// ===================================================================

void ETMBranchList_Binary_KernelBinaryInfo::InitAsDefaultInstance() {
}
class ETMBranchList_Binary_KernelBinaryInfo::_Internal {
 public:
};

ETMBranchList_Binary_KernelBinaryInfo::ETMBranchList_Binary_KernelBinaryInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
}
ETMBranchList_Binary_KernelBinaryInfo::ETMBranchList_Binary_KernelBinaryInfo(const ETMBranchList_Binary_KernelBinaryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernel_start_addr_ = from.kernel_start_addr_;
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
}

void ETMBranchList_Binary_KernelBinaryInfo::SharedCtor() {
  kernel_start_addr_ = PROTOBUF_ULONGLONG(0);
}

ETMBranchList_Binary_KernelBinaryInfo::~ETMBranchList_Binary_KernelBinaryInfo() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  SharedDtor();
}

void ETMBranchList_Binary_KernelBinaryInfo::SharedDtor() {
}

void ETMBranchList_Binary_KernelBinaryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ETMBranchList_Binary_KernelBinaryInfo& ETMBranchList_Binary_KernelBinaryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ETMBranchList_Binary_KernelBinaryInfo_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  return *internal_default_instance();
}


void ETMBranchList_Binary_KernelBinaryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernel_start_addr_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ETMBranchList_Binary_KernelBinaryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 kernel_start_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          kernel_start_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ETMBranchList_Binary_KernelBinaryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 kernel_start_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kernel_start_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ETMBranchList_Binary_KernelBinaryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 kernel_start_addr = 1;
  if (this->kernel_start_addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->kernel_start_addr(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
}

size_t ETMBranchList_Binary_KernelBinaryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 kernel_start_addr = 1;
  if (this->kernel_start_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->kernel_start_addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETMBranchList_Binary_KernelBinaryInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ETMBranchList_Binary_KernelBinaryInfo*>(
      &from));
}

void ETMBranchList_Binary_KernelBinaryInfo::MergeFrom(const ETMBranchList_Binary_KernelBinaryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kernel_start_addr() != 0) {
    set_kernel_start_addr(from.kernel_start_addr());
  }
}

void ETMBranchList_Binary_KernelBinaryInfo::CopyFrom(const ETMBranchList_Binary_KernelBinaryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETMBranchList_Binary_KernelBinaryInfo::IsInitialized() const {
  return true;
}

void ETMBranchList_Binary_KernelBinaryInfo::InternalSwap(ETMBranchList_Binary_KernelBinaryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kernel_start_addr_, other->kernel_start_addr_);
}

std::string ETMBranchList_Binary_KernelBinaryInfo::GetTypeName() const {
  return "simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo";
}


// ===================================================================

void ETMBranchList_Binary::InitAsDefaultInstance() {
  ::simpleperf::proto::_ETMBranchList_Binary_default_instance_._instance.get_mutable()->kernel_info_ = const_cast< ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo*>(
      ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo::internal_default_instance());
}
class ETMBranchList_Binary::_Internal {
 public:
  static const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo& kernel_info(const ETMBranchList_Binary* msg);
};

const ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo&
ETMBranchList_Binary::_Internal::kernel_info(const ETMBranchList_Binary* msg) {
  return *msg->kernel_info_;
}
ETMBranchList_Binary::ETMBranchList_Binary()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.ETMBranchList.Binary)
}
ETMBranchList_Binary::ETMBranchList_Binary(const ETMBranchList_Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.build_id().empty()) {
    build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  if (from.has_kernel_info()) {
    kernel_info_ = new ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo(*from.kernel_info_);
  } else {
    kernel_info_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.ETMBranchList.Binary)
}

void ETMBranchList_Binary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kernel_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&kernel_info_)) + sizeof(type_));
}

ETMBranchList_Binary::~ETMBranchList_Binary() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.ETMBranchList.Binary)
  SharedDtor();
}

void ETMBranchList_Binary::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kernel_info_;
}

void ETMBranchList_Binary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ETMBranchList_Binary& ETMBranchList_Binary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ETMBranchList_Binary_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  return *internal_default_instance();
}


void ETMBranchList_Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.ETMBranchList.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && kernel_info_ != nullptr) {
    delete kernel_info_;
  }
  kernel_info_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ETMBranchList_Binary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_build_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::simpleperf::proto::ETMBranchList_Binary_BinaryType>(val));
        } else goto handle_unusual;
        continue;
      // .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_kernel_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ETMBranchList_Binary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.ETMBranchList.Binary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "simpleperf.proto.ETMBranchList.Binary.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string build_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_build_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->build_id().data(), static_cast<int>(this->build_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "simpleperf.proto.ETMBranchList.Binary.build_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::simpleperf::proto::ETMBranchList_Binary_BinaryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_kernel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.ETMBranchList.Binary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.ETMBranchList.Binary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ETMBranchList_Binary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.ETMBranchList.Binary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simpleperf.proto.ETMBranchList.Binary.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string build_id = 2;
  if (this->build_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->build_id().data(), static_cast<int>(this->build_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simpleperf.proto.ETMBranchList.Binary.build_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->build_id(), output);
  }

  // repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->addrs(static_cast<int>(i)),
      output);
  }

  // .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
  if (this->has_kernel_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::kernel_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.ETMBranchList.Binary)
}

size_t ETMBranchList_Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.ETMBranchList.Binary)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .simpleperf.proto.ETMBranchList.Binary.Address addrs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->addrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addrs(static_cast<int>(i)));
    }
  }

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string build_id = 2;
  if (this->build_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->build_id());
  }

  // .simpleperf.proto.ETMBranchList.Binary.KernelBinaryInfo kernel_info = 5;
  if (this->has_kernel_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kernel_info_);
  }

  // .simpleperf.proto.ETMBranchList.Binary.BinaryType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETMBranchList_Binary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ETMBranchList_Binary*>(
      &from));
}

void ETMBranchList_Binary::MergeFrom(const ETMBranchList_Binary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.ETMBranchList.Binary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.build_id().size() > 0) {

    build_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.build_id_);
  }
  if (from.has_kernel_info()) {
    mutable_kernel_info()->::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo::MergeFrom(from.kernel_info());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ETMBranchList_Binary::CopyFrom(const ETMBranchList_Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.ETMBranchList.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETMBranchList_Binary::IsInitialized() const {
  return true;
}

void ETMBranchList_Binary::InternalSwap(ETMBranchList_Binary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&addrs_)->InternalSwap(CastToBase(&other->addrs_));
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  build_id_.Swap(&other->build_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kernel_info_, other->kernel_info_);
  swap(type_, other->type_);
}

std::string ETMBranchList_Binary::GetTypeName() const {
  return "simpleperf.proto.ETMBranchList.Binary";
}


// ===================================================================

void ETMBranchList::InitAsDefaultInstance() {
}
class ETMBranchList::_Internal {
 public:
};

ETMBranchList::ETMBranchList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.ETMBranchList)
}
ETMBranchList::ETMBranchList(const ETMBranchList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      binaries_(from.binaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.magic().empty()) {
    magic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.magic_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.ETMBranchList)
}

void ETMBranchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ETMBranchList_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  magic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ETMBranchList::~ETMBranchList() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.ETMBranchList)
  SharedDtor();
}

void ETMBranchList::SharedDtor() {
  magic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ETMBranchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ETMBranchList& ETMBranchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ETMBranchList_system_2fextras_2fsimpleperf_2fetm_5fbranch_5flist_2eproto.base);
  return *internal_default_instance();
}


void ETMBranchList::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.ETMBranchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binaries_.Clear();
  magic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ETMBranchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_magic(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_binaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ETMBranchList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.ETMBranchList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string magic = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_magic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->magic().data(), static_cast<int>(this->magic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "simpleperf.proto.ETMBranchList.magic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_binaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.ETMBranchList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.ETMBranchList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ETMBranchList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.ETMBranchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string magic = 1;
  if (this->magic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->magic().data(), static_cast<int>(this->magic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simpleperf.proto.ETMBranchList.magic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->magic(), output);
  }

  // repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binaries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->binaries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.ETMBranchList)
}

size_t ETMBranchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.ETMBranchList)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .simpleperf.proto.ETMBranchList.Binary binaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->binaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->binaries(static_cast<int>(i)));
    }
  }

  // string magic = 1;
  if (this->magic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->magic());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ETMBranchList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ETMBranchList*>(
      &from));
}

void ETMBranchList::MergeFrom(const ETMBranchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.ETMBranchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  binaries_.MergeFrom(from.binaries_);
  if (from.magic().size() > 0) {

    magic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.magic_);
  }
}

void ETMBranchList::CopyFrom(const ETMBranchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.ETMBranchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETMBranchList::IsInitialized() const {
  return true;
}

void ETMBranchList::InternalSwap(ETMBranchList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&binaries_)->InternalSwap(CastToBase(&other->binaries_));
  magic_.Swap(&other->magic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ETMBranchList::GetTypeName() const {
  return "simpleperf.proto.ETMBranchList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace simpleperf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simpleperf::proto::ETMBranchList_Binary_Address_Branch* Arena::CreateMaybeMessage< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::ETMBranchList_Binary_Address_Branch >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf::proto::ETMBranchList_Binary_Address* Arena::CreateMaybeMessage< ::simpleperf::proto::ETMBranchList_Binary_Address >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::ETMBranchList_Binary_Address >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo* Arena::CreateMaybeMessage< ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::ETMBranchList_Binary_KernelBinaryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf::proto::ETMBranchList_Binary* Arena::CreateMaybeMessage< ::simpleperf::proto::ETMBranchList_Binary >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::ETMBranchList_Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf::proto::ETMBranchList* Arena::CreateMaybeMessage< ::simpleperf::proto::ETMBranchList >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::ETMBranchList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
