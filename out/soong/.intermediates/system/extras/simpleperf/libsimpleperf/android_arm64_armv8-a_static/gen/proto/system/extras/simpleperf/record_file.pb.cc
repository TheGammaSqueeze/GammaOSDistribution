// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/extras/simpleperf/record_file.proto

#include "system/extras/simpleperf/record_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto;
namespace simpleperf {
namespace proto {
class DebugUnwindFeature_FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugUnwindFeature_File> _instance;
} _DebugUnwindFeature_File_default_instance_;
class DebugUnwindFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugUnwindFeature> _instance;
} _DebugUnwindFeature_default_instance_;
}  // namespace proto
}  // namespace simpleperf
static void InitDefaultsscc_info_DebugUnwindFeature_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_DebugUnwindFeature_default_instance_;
    new (ptr) ::simpleperf::proto::DebugUnwindFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::DebugUnwindFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugUnwindFeature_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DebugUnwindFeature_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto}, {
      &scc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto.base,}};

static void InitDefaultsscc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::simpleperf::proto::_DebugUnwindFeature_File_default_instance_;
    new (ptr) ::simpleperf::proto::DebugUnwindFeature_File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::simpleperf::proto::DebugUnwindFeature_File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto}, {}};

namespace simpleperf {
namespace proto {

// ===================================================================

void DebugUnwindFeature_File::InitAsDefaultInstance() {
}
class DebugUnwindFeature_File::_Internal {
 public:
};

DebugUnwindFeature_File::DebugUnwindFeature_File()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.DebugUnwindFeature.File)
}
DebugUnwindFeature_File::DebugUnwindFeature_File(const DebugUnwindFeature_File& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.DebugUnwindFeature.File)
}

void DebugUnwindFeature_File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
}

DebugUnwindFeature_File::~DebugUnwindFeature_File() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.DebugUnwindFeature.File)
  SharedDtor();
}

void DebugUnwindFeature_File::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugUnwindFeature_File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugUnwindFeature_File& DebugUnwindFeature_File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugUnwindFeature_File_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto.base);
  return *internal_default_instance();
}


void DebugUnwindFeature_File::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.DebugUnwindFeature.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugUnwindFeature_File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugUnwindFeature_File::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.DebugUnwindFeature.File)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "simpleperf.proto.DebugUnwindFeature.File.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.DebugUnwindFeature.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.DebugUnwindFeature.File)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugUnwindFeature_File::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.DebugUnwindFeature.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "simpleperf.proto.DebugUnwindFeature.File.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.DebugUnwindFeature.File)
}

size_t DebugUnwindFeature_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.DebugUnwindFeature.File)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugUnwindFeature_File::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DebugUnwindFeature_File*>(
      &from));
}

void DebugUnwindFeature_File::MergeFrom(const DebugUnwindFeature_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.DebugUnwindFeature.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void DebugUnwindFeature_File::CopyFrom(const DebugUnwindFeature_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.DebugUnwindFeature.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugUnwindFeature_File::IsInitialized() const {
  return true;
}

void DebugUnwindFeature_File::InternalSwap(DebugUnwindFeature_File* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

std::string DebugUnwindFeature_File::GetTypeName() const {
  return "simpleperf.proto.DebugUnwindFeature.File";
}


// ===================================================================

void DebugUnwindFeature::InitAsDefaultInstance() {
}
class DebugUnwindFeature::_Internal {
 public:
};

DebugUnwindFeature::DebugUnwindFeature()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simpleperf.proto.DebugUnwindFeature)
}
DebugUnwindFeature::DebugUnwindFeature(const DebugUnwindFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      file_(from.file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:simpleperf.proto.DebugUnwindFeature)
}

void DebugUnwindFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugUnwindFeature_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto.base);
}

DebugUnwindFeature::~DebugUnwindFeature() {
  // @@protoc_insertion_point(destructor:simpleperf.proto.DebugUnwindFeature)
  SharedDtor();
}

void DebugUnwindFeature::SharedDtor() {
}

void DebugUnwindFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugUnwindFeature& DebugUnwindFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugUnwindFeature_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto.base);
  return *internal_default_instance();
}


void DebugUnwindFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleperf.proto.DebugUnwindFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DebugUnwindFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DebugUnwindFeature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:simpleperf.proto.DebugUnwindFeature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simpleperf.proto.DebugUnwindFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simpleperf.proto.DebugUnwindFeature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DebugUnwindFeature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simpleperf.proto.DebugUnwindFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->file(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:simpleperf.proto.DebugUnwindFeature)
}

size_t DebugUnwindFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleperf.proto.DebugUnwindFeature)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->file_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->file(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugUnwindFeature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DebugUnwindFeature*>(
      &from));
}

void DebugUnwindFeature::MergeFrom(const DebugUnwindFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simpleperf.proto.DebugUnwindFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_.MergeFrom(from.file_);
}

void DebugUnwindFeature::CopyFrom(const DebugUnwindFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleperf.proto.DebugUnwindFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugUnwindFeature::IsInitialized() const {
  return true;
}

void DebugUnwindFeature::InternalSwap(DebugUnwindFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&file_)->InternalSwap(CastToBase(&other->file_));
}

std::string DebugUnwindFeature::GetTypeName() const {
  return "simpleperf.proto.DebugUnwindFeature";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace simpleperf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simpleperf::proto::DebugUnwindFeature_File* Arena::CreateMaybeMessage< ::simpleperf::proto::DebugUnwindFeature_File >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::DebugUnwindFeature_File >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleperf::proto::DebugUnwindFeature* Arena::CreateMaybeMessage< ::simpleperf::proto::DebugUnwindFeature >(Arena* arena) {
  return Arena::CreateInternal< ::simpleperf::proto::DebugUnwindFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
