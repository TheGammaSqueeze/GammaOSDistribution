// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/extras/simpleperf/record_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace simpleperf {
namespace proto {
class DebugUnwindFeature;
class DebugUnwindFeatureDefaultTypeInternal;
extern DebugUnwindFeatureDefaultTypeInternal _DebugUnwindFeature_default_instance_;
class DebugUnwindFeature_File;
class DebugUnwindFeature_FileDefaultTypeInternal;
extern DebugUnwindFeature_FileDefaultTypeInternal _DebugUnwindFeature_File_default_instance_;
}  // namespace proto
}  // namespace simpleperf
PROTOBUF_NAMESPACE_OPEN
template<> ::simpleperf::proto::DebugUnwindFeature* Arena::CreateMaybeMessage<::simpleperf::proto::DebugUnwindFeature>(Arena*);
template<> ::simpleperf::proto::DebugUnwindFeature_File* Arena::CreateMaybeMessage<::simpleperf::proto::DebugUnwindFeature_File>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace simpleperf {
namespace proto {

// ===================================================================

class DebugUnwindFeature_File :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.DebugUnwindFeature.File) */ {
 public:
  DebugUnwindFeature_File();
  virtual ~DebugUnwindFeature_File();

  DebugUnwindFeature_File(const DebugUnwindFeature_File& from);
  DebugUnwindFeature_File(DebugUnwindFeature_File&& from) noexcept
    : DebugUnwindFeature_File() {
    *this = ::std::move(from);
  }

  inline DebugUnwindFeature_File& operator=(const DebugUnwindFeature_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugUnwindFeature_File& operator=(DebugUnwindFeature_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DebugUnwindFeature_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugUnwindFeature_File* internal_default_instance() {
    return reinterpret_cast<const DebugUnwindFeature_File*>(
               &_DebugUnwindFeature_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DebugUnwindFeature_File& a, DebugUnwindFeature_File& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugUnwindFeature_File* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugUnwindFeature_File* New() const final {
    return CreateMaybeMessage<DebugUnwindFeature_File>(nullptr);
  }

  DebugUnwindFeature_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugUnwindFeature_File>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DebugUnwindFeature_File& from);
  void MergeFrom(const DebugUnwindFeature_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugUnwindFeature_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.DebugUnwindFeature.File";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:simpleperf.proto.DebugUnwindFeature.File)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto;
};
// -------------------------------------------------------------------

class DebugUnwindFeature :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:simpleperf.proto.DebugUnwindFeature) */ {
 public:
  DebugUnwindFeature();
  virtual ~DebugUnwindFeature();

  DebugUnwindFeature(const DebugUnwindFeature& from);
  DebugUnwindFeature(DebugUnwindFeature&& from) noexcept
    : DebugUnwindFeature() {
    *this = ::std::move(from);
  }

  inline DebugUnwindFeature& operator=(const DebugUnwindFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugUnwindFeature& operator=(DebugUnwindFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DebugUnwindFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugUnwindFeature* internal_default_instance() {
    return reinterpret_cast<const DebugUnwindFeature*>(
               &_DebugUnwindFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DebugUnwindFeature& a, DebugUnwindFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugUnwindFeature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugUnwindFeature* New() const final {
    return CreateMaybeMessage<DebugUnwindFeature>(nullptr);
  }

  DebugUnwindFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugUnwindFeature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DebugUnwindFeature& from);
  void MergeFrom(const DebugUnwindFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DebugUnwindFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "simpleperf.proto.DebugUnwindFeature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DebugUnwindFeature_File File;

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
  int file_size() const;
  void clear_file();
  ::simpleperf::proto::DebugUnwindFeature_File* mutable_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::DebugUnwindFeature_File >*
      mutable_file();
  const ::simpleperf::proto::DebugUnwindFeature_File& file(int index) const;
  ::simpleperf::proto::DebugUnwindFeature_File* add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::DebugUnwindFeature_File >&
      file() const;

  // @@protoc_insertion_point(class_scope:simpleperf.proto.DebugUnwindFeature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::DebugUnwindFeature_File > file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DebugUnwindFeature_File

// string path = 1;
inline void DebugUnwindFeature_File::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DebugUnwindFeature_File::path() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.DebugUnwindFeature.File.path)
  return path_.GetNoArena();
}
inline void DebugUnwindFeature_File::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleperf.proto.DebugUnwindFeature.File.path)
}
inline void DebugUnwindFeature_File::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleperf.proto.DebugUnwindFeature.File.path)
}
inline void DebugUnwindFeature_File::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleperf.proto.DebugUnwindFeature.File.path)
}
inline void DebugUnwindFeature_File::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleperf.proto.DebugUnwindFeature.File.path)
}
inline std::string* DebugUnwindFeature_File::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.DebugUnwindFeature.File.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugUnwindFeature_File::release_path() {
  // @@protoc_insertion_point(field_release:simpleperf.proto.DebugUnwindFeature.File.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugUnwindFeature_File::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:simpleperf.proto.DebugUnwindFeature.File.path)
}

// uint64 size = 2;
inline void DebugUnwindFeature_File::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DebugUnwindFeature_File::size() const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.DebugUnwindFeature.File.size)
  return size_;
}
inline void DebugUnwindFeature_File::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:simpleperf.proto.DebugUnwindFeature.File.size)
}

// -------------------------------------------------------------------

// DebugUnwindFeature

// repeated .simpleperf.proto.DebugUnwindFeature.File file = 1;
inline int DebugUnwindFeature::file_size() const {
  return file_.size();
}
inline void DebugUnwindFeature::clear_file() {
  file_.Clear();
}
inline ::simpleperf::proto::DebugUnwindFeature_File* DebugUnwindFeature::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:simpleperf.proto.DebugUnwindFeature.file)
  return file_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::DebugUnwindFeature_File >*
DebugUnwindFeature::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:simpleperf.proto.DebugUnwindFeature.file)
  return &file_;
}
inline const ::simpleperf::proto::DebugUnwindFeature_File& DebugUnwindFeature::file(int index) const {
  // @@protoc_insertion_point(field_get:simpleperf.proto.DebugUnwindFeature.file)
  return file_.Get(index);
}
inline ::simpleperf::proto::DebugUnwindFeature_File* DebugUnwindFeature::add_file() {
  // @@protoc_insertion_point(field_add:simpleperf.proto.DebugUnwindFeature.file)
  return file_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::simpleperf::proto::DebugUnwindFeature_File >&
DebugUnwindFeature::file() const {
  // @@protoc_insertion_point(field_list:simpleperf.proto.DebugUnwindFeature.file)
  return file_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace simpleperf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fextras_2fsimpleperf_2frecord_5ffile_2eproto
