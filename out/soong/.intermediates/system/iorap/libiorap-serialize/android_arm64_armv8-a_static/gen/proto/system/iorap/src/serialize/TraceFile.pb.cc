// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/iorap/src/serialize/TraceFile.proto

#include "system/iorap/src/serialize/TraceFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
namespace iorap {
namespace serialize {
namespace proto {
class TraceFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceFile> _instance;
} _TraceFile_default_instance_;
class TraceFileIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceFileIndex> _instance;
} _TraceFileIndex_default_instance_;
class TraceFileIndexEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceFileIndexEntry> _instance;
} _TraceFileIndexEntry_default_instance_;
class TraceFileListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceFileList> _instance;
} _TraceFileList_default_instance_;
class TraceFileEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceFileEntry> _instance;
} _TraceFileEntry_default_instance_;
}  // namespace proto
}  // namespace serialize
}  // namespace iorap
static void InitDefaultsscc_info_TraceFile_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::iorap::serialize::proto::_TraceFile_default_instance_;
    new (ptr) ::iorap::serialize::proto::TraceFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iorap::serialize::proto::TraceFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TraceFile_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TraceFile_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto}, {
      &scc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base,
      &scc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base,}};

static void InitDefaultsscc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::iorap::serialize::proto::_TraceFileEntry_default_instance_;
    new (ptr) ::iorap::serialize::proto::TraceFileEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iorap::serialize::proto::TraceFileEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto}, {}};

static void InitDefaultsscc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::iorap::serialize::proto::_TraceFileIndex_default_instance_;
    new (ptr) ::iorap::serialize::proto::TraceFileIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iorap::serialize::proto::TraceFileIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto}, {
      &scc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base,}};

static void InitDefaultsscc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::iorap::serialize::proto::_TraceFileIndexEntry_default_instance_;
    new (ptr) ::iorap::serialize::proto::TraceFileIndexEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iorap::serialize::proto::TraceFileIndexEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto}, {}};

static void InitDefaultsscc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::iorap::serialize::proto::_TraceFileList_default_instance_;
    new (ptr) ::iorap::serialize::proto::TraceFileList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iorap::serialize::proto::TraceFileList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto}, {
      &scc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base,}};

namespace iorap {
namespace serialize {
namespace proto {

// ===================================================================

void TraceFile::InitAsDefaultInstance() {
  ::iorap::serialize::proto::_TraceFile_default_instance_._instance.get_mutable()->index_ = const_cast< ::iorap::serialize::proto::TraceFileIndex*>(
      ::iorap::serialize::proto::TraceFileIndex::internal_default_instance());
  ::iorap::serialize::proto::_TraceFile_default_instance_._instance.get_mutable()->list_ = const_cast< ::iorap::serialize::proto::TraceFileList*>(
      ::iorap::serialize::proto::TraceFileList::internal_default_instance());
}
class TraceFile::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceFile>()._has_bits_);
  static const ::iorap::serialize::proto::TraceFileIndex& index(const TraceFile* msg);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::iorap::serialize::proto::TraceFileList& list(const TraceFile* msg);
  static void set_has_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::iorap::serialize::proto::TraceFileIndex&
TraceFile::_Internal::index(const TraceFile* msg) {
  return *msg->index_;
}
const ::iorap::serialize::proto::TraceFileList&
TraceFile::_Internal::list(const TraceFile* msg) {
  return *msg->list_;
}
TraceFile::TraceFile()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iorap.serialize.proto.TraceFile)
}
TraceFile::TraceFile(const TraceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    index_ = new ::iorap::serialize::proto::TraceFileIndex(*from.index_);
  } else {
    index_ = nullptr;
  }
  if (from.has_list()) {
    list_ = new ::iorap::serialize::proto::TraceFileList(*from.list_);
  } else {
    list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:iorap.serialize.proto.TraceFile)
}

void TraceFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceFile_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&list_) -
      reinterpret_cast<char*>(&index_)) + sizeof(list_));
}

TraceFile::~TraceFile() {
  // @@protoc_insertion_point(destructor:iorap.serialize.proto.TraceFile)
  SharedDtor();
}

void TraceFile::SharedDtor() {
  if (this != internal_default_instance()) delete index_;
  if (this != internal_default_instance()) delete list_;
}

void TraceFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceFile& TraceFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceFile_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  return *internal_default_instance();
}


void TraceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:iorap.serialize.proto.TraceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(index_ != nullptr);
      index_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(list_ != nullptr);
      list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .iorap.serialize.proto.TraceFileIndex index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .iorap.serialize.proto.TraceFileList list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceFile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:iorap.serialize.proto.TraceFile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .iorap.serialize.proto.TraceFileIndex index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .iorap.serialize.proto.TraceFileList list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iorap.serialize.proto.TraceFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iorap.serialize.proto.TraceFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceFile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iorap.serialize.proto.TraceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .iorap.serialize.proto.TraceFileIndex index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::index(this), output);
  }

  // required .iorap.serialize.proto.TraceFileList list = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::list(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:iorap.serialize.proto.TraceFile)
}

size_t TraceFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:iorap.serialize.proto.TraceFile)
  size_t total_size = 0;

  if (has_index()) {
    // required .iorap.serialize.proto.TraceFileIndex index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  if (has_list()) {
    // required .iorap.serialize.proto.TraceFileList list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_);
  }

  return total_size;
}
size_t TraceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iorap.serialize.proto.TraceFile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .iorap.serialize.proto.TraceFileIndex index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);

    // required .iorap.serialize.proto.TraceFileList list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceFile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceFile*>(
      &from));
}

void TraceFile::MergeFrom(const TraceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iorap.serialize.proto.TraceFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_index()->::iorap::serialize::proto::TraceFileIndex::MergeFrom(from.index());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_list()->::iorap::serialize::proto::TraceFileList::MergeFrom(from.list());
    }
  }
}

void TraceFile::CopyFrom(const TraceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iorap.serialize.proto.TraceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_index()) {
    if (!this->index_->IsInitialized()) return false;
  }
  if (has_list()) {
    if (!this->list_->IsInitialized()) return false;
  }
  return true;
}

void TraceFile::InternalSwap(TraceFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
  swap(list_, other->list_);
}

std::string TraceFile::GetTypeName() const {
  return "iorap.serialize.proto.TraceFile";
}


// ===================================================================

void TraceFileIndex::InitAsDefaultInstance() {
}
class TraceFileIndex::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceFileIndex>()._has_bits_);
};

TraceFileIndex::TraceFileIndex()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iorap.serialize.proto.TraceFileIndex)
}
TraceFileIndex::TraceFileIndex(const TraceFileIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iorap.serialize.proto.TraceFileIndex)
}

void TraceFileIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
}

TraceFileIndex::~TraceFileIndex() {
  // @@protoc_insertion_point(destructor:iorap.serialize.proto.TraceFileIndex)
  SharedDtor();
}

void TraceFileIndex::SharedDtor() {
}

void TraceFileIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceFileIndex& TraceFileIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceFileIndex_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  return *internal_default_instance();
}


void TraceFileIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:iorap.serialize.proto.TraceFileIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceFileIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceFileIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:iorap.serialize.proto.TraceFileIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iorap.serialize.proto.TraceFileIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iorap.serialize.proto.TraceFileIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceFileIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iorap.serialize.proto.TraceFileIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:iorap.serialize.proto.TraceFileIndex)
}

size_t TraceFileIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iorap.serialize.proto.TraceFileIndex)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceFileIndex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceFileIndex*>(
      &from));
}

void TraceFileIndex::MergeFrom(const TraceFileIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iorap.serialize.proto.TraceFileIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void TraceFileIndex::CopyFrom(const TraceFileIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iorap.serialize.proto.TraceFileIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFileIndex::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void TraceFileIndex::InternalSwap(TraceFileIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

std::string TraceFileIndex::GetTypeName() const {
  return "iorap.serialize.proto.TraceFileIndex";
}


// ===================================================================

void TraceFileIndexEntry::InitAsDefaultInstance() {
}
class TraceFileIndexEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceFileIndexEntry>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceFileIndexEntry::TraceFileIndexEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iorap.serialize.proto.TraceFileIndexEntry)
}
TraceFileIndexEntry::TraceFileIndexEntry(const TraceFileIndexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:iorap.serialize.proto.TraceFileIndexEntry)
}

void TraceFileIndexEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

TraceFileIndexEntry::~TraceFileIndexEntry() {
  // @@protoc_insertion_point(destructor:iorap.serialize.proto.TraceFileIndexEntry)
  SharedDtor();
}

void TraceFileIndexEntry::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceFileIndexEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceFileIndexEntry& TraceFileIndexEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceFileIndexEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  return *internal_default_instance();
}


void TraceFileIndexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:iorap.serialize.proto.TraceFileIndexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceFileIndexEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_file_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceFileIndexEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:iorap.serialize.proto.TraceFileIndexEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string file_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iorap.serialize.proto.TraceFileIndexEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iorap.serialize.proto.TraceFileIndexEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceFileIndexEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iorap.serialize.proto.TraceFileIndexEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:iorap.serialize.proto.TraceFileIndexEntry)
}

size_t TraceFileIndexEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:iorap.serialize.proto.TraceFileIndexEntry)
  size_t total_size = 0;

  if (has_file_name()) {
    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  return total_size;
}
size_t TraceFileIndexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iorap.serialize.proto.TraceFileIndexEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());

    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceFileIndexEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceFileIndexEntry*>(
      &from));
}

void TraceFileIndexEntry::MergeFrom(const TraceFileIndexEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iorap.serialize.proto.TraceFileIndexEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceFileIndexEntry::CopyFrom(const TraceFileIndexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iorap.serialize.proto.TraceFileIndexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFileIndexEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TraceFileIndexEntry::InternalSwap(TraceFileIndexEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

std::string TraceFileIndexEntry::GetTypeName() const {
  return "iorap.serialize.proto.TraceFileIndexEntry";
}


// ===================================================================

void TraceFileList::InitAsDefaultInstance() {
}
class TraceFileList::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceFileList>()._has_bits_);
};

TraceFileList::TraceFileList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iorap.serialize.proto.TraceFileList)
}
TraceFileList::TraceFileList(const TraceFileList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iorap.serialize.proto.TraceFileList)
}

void TraceFileList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
}

TraceFileList::~TraceFileList() {
  // @@protoc_insertion_point(destructor:iorap.serialize.proto.TraceFileList)
  SharedDtor();
}

void TraceFileList::SharedDtor() {
}

void TraceFileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceFileList& TraceFileList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceFileList_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  return *internal_default_instance();
}


void TraceFileList::Clear() {
// @@protoc_insertion_point(message_clear_start:iorap.serialize.proto.TraceFileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceFileList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceFileList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:iorap.serialize.proto.TraceFileList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iorap.serialize.proto.TraceFileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iorap.serialize.proto.TraceFileList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceFileList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iorap.serialize.proto.TraceFileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:iorap.serialize.proto.TraceFileList)
}

size_t TraceFileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iorap.serialize.proto.TraceFileList)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceFileList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceFileList*>(
      &from));
}

void TraceFileList::MergeFrom(const TraceFileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iorap.serialize.proto.TraceFileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void TraceFileList::CopyFrom(const TraceFileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iorap.serialize.proto.TraceFileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFileList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void TraceFileList::InternalSwap(TraceFileList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

std::string TraceFileList::GetTypeName() const {
  return "iorap.serialize.proto.TraceFileList";
}


// ===================================================================

void TraceFileEntry::InitAsDefaultInstance() {
}
class TraceFileEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceFileEntry>()._has_bits_);
  static void set_has_index_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TraceFileEntry::TraceFileEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:iorap.serialize.proto.TraceFileEntry)
}
TraceFileEntry::TraceFileEntry(const TraceFileEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_id_, &from.index_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_length_) -
    reinterpret_cast<char*>(&index_id_)) + sizeof(file_length_));
  // @@protoc_insertion_point(copy_constructor:iorap.serialize.proto.TraceFileEntry)
}

void TraceFileEntry::SharedCtor() {
  ::memset(&index_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_length_) -
      reinterpret_cast<char*>(&index_id_)) + sizeof(file_length_));
}

TraceFileEntry::~TraceFileEntry() {
  // @@protoc_insertion_point(destructor:iorap.serialize.proto.TraceFileEntry)
  SharedDtor();
}

void TraceFileEntry::SharedDtor() {
}

void TraceFileEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceFileEntry& TraceFileEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceFileEntry_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto.base);
  return *internal_default_instance();
}


void TraceFileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:iorap.serialize.proto.TraceFileEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&index_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_length_) -
        reinterpret_cast<char*>(&index_id_)) + sizeof(file_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TraceFileEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 index_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index_id(&has_bits);
          index_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 file_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_offset(&has_bits);
          file_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 file_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_length(&has_bits);
          file_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TraceFileEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:iorap.serialize.proto.TraceFileEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 index_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_index_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 file_offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_file_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 file_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_file_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iorap.serialize.proto.TraceFileEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iorap.serialize.proto.TraceFileEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TraceFileEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iorap.serialize.proto.TraceFileEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 index_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->index_id(), output);
  }

  // required int64 file_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->file_offset(), output);
  }

  // required int64 file_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->file_length(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:iorap.serialize.proto.TraceFileEntry)
}

size_t TraceFileEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:iorap.serialize.proto.TraceFileEntry)
  size_t total_size = 0;

  if (has_index_id()) {
    // required int64 index_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->index_id());
  }

  if (has_file_offset()) {
    // required int64 file_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->file_offset());
  }

  if (has_file_length()) {
    // required int64 file_length = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->file_length());
  }

  return total_size;
}
size_t TraceFileEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iorap.serialize.proto.TraceFileEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 index_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->index_id());

    // required int64 file_offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->file_offset());

    // required int64 file_length = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->file_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceFileEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TraceFileEntry*>(
      &from));
}

void TraceFileEntry::MergeFrom(const TraceFileEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iorap.serialize.proto.TraceFileEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      index_id_ = from.index_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_offset_ = from.file_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_length_ = from.file_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TraceFileEntry::CopyFrom(const TraceFileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iorap.serialize.proto.TraceFileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceFileEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TraceFileEntry::InternalSwap(TraceFileEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_id_, other->index_id_);
  swap(file_offset_, other->file_offset_);
  swap(file_length_, other->file_length_);
}

std::string TraceFileEntry::GetTypeName() const {
  return "iorap.serialize.proto.TraceFileEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace serialize
}  // namespace iorap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::iorap::serialize::proto::TraceFile* Arena::CreateMaybeMessage< ::iorap::serialize::proto::TraceFile >(Arena* arena) {
  return Arena::CreateInternal< ::iorap::serialize::proto::TraceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::iorap::serialize::proto::TraceFileIndex* Arena::CreateMaybeMessage< ::iorap::serialize::proto::TraceFileIndex >(Arena* arena) {
  return Arena::CreateInternal< ::iorap::serialize::proto::TraceFileIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::iorap::serialize::proto::TraceFileIndexEntry* Arena::CreateMaybeMessage< ::iorap::serialize::proto::TraceFileIndexEntry >(Arena* arena) {
  return Arena::CreateInternal< ::iorap::serialize::proto::TraceFileIndexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::iorap::serialize::proto::TraceFileList* Arena::CreateMaybeMessage< ::iorap::serialize::proto::TraceFileList >(Arena* arena) {
  return Arena::CreateInternal< ::iorap::serialize::proto::TraceFileList >(arena);
}
template<> PROTOBUF_NOINLINE ::iorap::serialize::proto::TraceFileEntry* Arena::CreateMaybeMessage< ::iorap::serialize::proto::TraceFileEntry >(Arena* arena) {
  return Arena::CreateInternal< ::iorap::serialize::proto::TraceFileEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
