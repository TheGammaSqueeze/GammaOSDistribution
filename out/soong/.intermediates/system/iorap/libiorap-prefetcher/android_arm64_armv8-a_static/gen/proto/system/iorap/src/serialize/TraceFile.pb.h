// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/iorap/src/serialize/TraceFile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace iorap {
namespace serialize {
namespace proto {
class TraceFile;
class TraceFileDefaultTypeInternal;
extern TraceFileDefaultTypeInternal _TraceFile_default_instance_;
class TraceFileEntry;
class TraceFileEntryDefaultTypeInternal;
extern TraceFileEntryDefaultTypeInternal _TraceFileEntry_default_instance_;
class TraceFileIndex;
class TraceFileIndexDefaultTypeInternal;
extern TraceFileIndexDefaultTypeInternal _TraceFileIndex_default_instance_;
class TraceFileIndexEntry;
class TraceFileIndexEntryDefaultTypeInternal;
extern TraceFileIndexEntryDefaultTypeInternal _TraceFileIndexEntry_default_instance_;
class TraceFileList;
class TraceFileListDefaultTypeInternal;
extern TraceFileListDefaultTypeInternal _TraceFileList_default_instance_;
}  // namespace proto
}  // namespace serialize
}  // namespace iorap
PROTOBUF_NAMESPACE_OPEN
template<> ::iorap::serialize::proto::TraceFile* Arena::CreateMaybeMessage<::iorap::serialize::proto::TraceFile>(Arena*);
template<> ::iorap::serialize::proto::TraceFileEntry* Arena::CreateMaybeMessage<::iorap::serialize::proto::TraceFileEntry>(Arena*);
template<> ::iorap::serialize::proto::TraceFileIndex* Arena::CreateMaybeMessage<::iorap::serialize::proto::TraceFileIndex>(Arena*);
template<> ::iorap::serialize::proto::TraceFileIndexEntry* Arena::CreateMaybeMessage<::iorap::serialize::proto::TraceFileIndexEntry>(Arena*);
template<> ::iorap::serialize::proto::TraceFileList* Arena::CreateMaybeMessage<::iorap::serialize::proto::TraceFileList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iorap {
namespace serialize {
namespace proto {

// ===================================================================

class TraceFile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:iorap.serialize.proto.TraceFile) */ {
 public:
  TraceFile();
  virtual ~TraceFile();

  TraceFile(const TraceFile& from);
  TraceFile(TraceFile&& from) noexcept
    : TraceFile() {
    *this = ::std::move(from);
  }

  inline TraceFile& operator=(const TraceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceFile& operator=(TraceFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceFile* internal_default_instance() {
    return reinterpret_cast<const TraceFile*>(
               &_TraceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceFile& a, TraceFile& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceFile* New() const final {
    return CreateMaybeMessage<TraceFile>(nullptr);
  }

  TraceFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceFile& from);
  void MergeFrom(const TraceFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iorap.serialize.proto.TraceFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kListFieldNumber = 2,
  };
  // required .iorap.serialize.proto.TraceFileIndex index = 1;
  bool has_index() const;
  void clear_index();
  const ::iorap::serialize::proto::TraceFileIndex& index() const;
  ::iorap::serialize::proto::TraceFileIndex* release_index();
  ::iorap::serialize::proto::TraceFileIndex* mutable_index();
  void set_allocated_index(::iorap::serialize::proto::TraceFileIndex* index);

  // required .iorap.serialize.proto.TraceFileList list = 2;
  bool has_list() const;
  void clear_list();
  const ::iorap::serialize::proto::TraceFileList& list() const;
  ::iorap::serialize::proto::TraceFileList* release_list();
  ::iorap::serialize::proto::TraceFileList* mutable_list();
  void set_allocated_list(::iorap::serialize::proto::TraceFileList* list);

  // @@protoc_insertion_point(class_scope:iorap.serialize.proto.TraceFile)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::iorap::serialize::proto::TraceFileIndex* index_;
  ::iorap::serialize::proto::TraceFileList* list_;
  friend struct ::TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
};
// -------------------------------------------------------------------

class TraceFileIndex :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:iorap.serialize.proto.TraceFileIndex) */ {
 public:
  TraceFileIndex();
  virtual ~TraceFileIndex();

  TraceFileIndex(const TraceFileIndex& from);
  TraceFileIndex(TraceFileIndex&& from) noexcept
    : TraceFileIndex() {
    *this = ::std::move(from);
  }

  inline TraceFileIndex& operator=(const TraceFileIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceFileIndex& operator=(TraceFileIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceFileIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceFileIndex* internal_default_instance() {
    return reinterpret_cast<const TraceFileIndex*>(
               &_TraceFileIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceFileIndex& a, TraceFileIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceFileIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceFileIndex* New() const final {
    return CreateMaybeMessage<TraceFileIndex>(nullptr);
  }

  TraceFileIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceFileIndex>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceFileIndex& from);
  void MergeFrom(const TraceFileIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceFileIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iorap.serialize.proto.TraceFileIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  ::iorap::serialize::proto::TraceFileIndexEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileIndexEntry >*
      mutable_entries();
  const ::iorap::serialize::proto::TraceFileIndexEntry& entries(int index) const;
  ::iorap::serialize::proto::TraceFileIndexEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileIndexEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:iorap.serialize.proto.TraceFileIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileIndexEntry > entries_;
  friend struct ::TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
};
// -------------------------------------------------------------------

class TraceFileIndexEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:iorap.serialize.proto.TraceFileIndexEntry) */ {
 public:
  TraceFileIndexEntry();
  virtual ~TraceFileIndexEntry();

  TraceFileIndexEntry(const TraceFileIndexEntry& from);
  TraceFileIndexEntry(TraceFileIndexEntry&& from) noexcept
    : TraceFileIndexEntry() {
    *this = ::std::move(from);
  }

  inline TraceFileIndexEntry& operator=(const TraceFileIndexEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceFileIndexEntry& operator=(TraceFileIndexEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceFileIndexEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceFileIndexEntry* internal_default_instance() {
    return reinterpret_cast<const TraceFileIndexEntry*>(
               &_TraceFileIndexEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TraceFileIndexEntry& a, TraceFileIndexEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceFileIndexEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceFileIndexEntry* New() const final {
    return CreateMaybeMessage<TraceFileIndexEntry>(nullptr);
  }

  TraceFileIndexEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceFileIndexEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceFileIndexEntry& from);
  void MergeFrom(const TraceFileIndexEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceFileIndexEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iorap.serialize.proto.TraceFileIndexEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string file_name = 2;
  bool has_file_name() const;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:iorap.serialize.proto.TraceFileIndexEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
};
// -------------------------------------------------------------------

class TraceFileList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:iorap.serialize.proto.TraceFileList) */ {
 public:
  TraceFileList();
  virtual ~TraceFileList();

  TraceFileList(const TraceFileList& from);
  TraceFileList(TraceFileList&& from) noexcept
    : TraceFileList() {
    *this = ::std::move(from);
  }

  inline TraceFileList& operator=(const TraceFileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceFileList& operator=(TraceFileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceFileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceFileList* internal_default_instance() {
    return reinterpret_cast<const TraceFileList*>(
               &_TraceFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TraceFileList& a, TraceFileList& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceFileList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceFileList* New() const final {
    return CreateMaybeMessage<TraceFileList>(nullptr);
  }

  TraceFileList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceFileList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceFileList& from);
  void MergeFrom(const TraceFileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceFileList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iorap.serialize.proto.TraceFileList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
  int entries_size() const;
  void clear_entries();
  ::iorap::serialize::proto::TraceFileEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileEntry >*
      mutable_entries();
  const ::iorap::serialize::proto::TraceFileEntry& entries(int index) const;
  ::iorap::serialize::proto::TraceFileEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:iorap.serialize.proto.TraceFileList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileEntry > entries_;
  friend struct ::TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
};
// -------------------------------------------------------------------

class TraceFileEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:iorap.serialize.proto.TraceFileEntry) */ {
 public:
  TraceFileEntry();
  virtual ~TraceFileEntry();

  TraceFileEntry(const TraceFileEntry& from);
  TraceFileEntry(TraceFileEntry&& from) noexcept
    : TraceFileEntry() {
    *this = ::std::move(from);
  }

  inline TraceFileEntry& operator=(const TraceFileEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceFileEntry& operator=(TraceFileEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TraceFileEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceFileEntry* internal_default_instance() {
    return reinterpret_cast<const TraceFileEntry*>(
               &_TraceFileEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TraceFileEntry& a, TraceFileEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceFileEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceFileEntry* New() const final {
    return CreateMaybeMessage<TraceFileEntry>(nullptr);
  }

  TraceFileEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceFileEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TraceFileEntry& from);
  void MergeFrom(const TraceFileEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceFileEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iorap.serialize.proto.TraceFileEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexIdFieldNumber = 1,
    kFileOffsetFieldNumber = 2,
    kFileLengthFieldNumber = 3,
  };
  // required int64 index_id = 1;
  bool has_index_id() const;
  void clear_index_id();
  ::PROTOBUF_NAMESPACE_ID::int64 index_id() const;
  void set_index_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 file_offset = 2;
  bool has_file_offset() const;
  void clear_file_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 file_offset() const;
  void set_file_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 file_length = 3;
  bool has_file_length() const;
  void clear_file_length();
  ::PROTOBUF_NAMESPACE_ID::int64 file_length() const;
  void set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:iorap.serialize.proto.TraceFileEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_length_;
  friend struct ::TableStruct_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceFile

// required .iorap.serialize.proto.TraceFileIndex index = 1;
inline bool TraceFile::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceFile::clear_index() {
  if (index_ != nullptr) index_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::iorap::serialize::proto::TraceFileIndex& TraceFile::index() const {
  const ::iorap::serialize::proto::TraceFileIndex* p = index_;
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFile.index)
  return p != nullptr ? *p : *reinterpret_cast<const ::iorap::serialize::proto::TraceFileIndex*>(
      &::iorap::serialize::proto::_TraceFileIndex_default_instance_);
}
inline ::iorap::serialize::proto::TraceFileIndex* TraceFile::release_index() {
  // @@protoc_insertion_point(field_release:iorap.serialize.proto.TraceFile.index)
  _has_bits_[0] &= ~0x00000001u;
  ::iorap::serialize::proto::TraceFileIndex* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::iorap::serialize::proto::TraceFileIndex* TraceFile::mutable_index() {
  _has_bits_[0] |= 0x00000001u;
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::iorap::serialize::proto::TraceFileIndex>(GetArenaNoVirtual());
    index_ = p;
  }
  // @@protoc_insertion_point(field_mutable:iorap.serialize.proto.TraceFile.index)
  return index_;
}
inline void TraceFile::set_allocated_index(::iorap::serialize::proto::TraceFileIndex* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:iorap.serialize.proto.TraceFile.index)
}

// required .iorap.serialize.proto.TraceFileList list = 2;
inline bool TraceFile::has_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceFile::clear_list() {
  if (list_ != nullptr) list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::iorap::serialize::proto::TraceFileList& TraceFile::list() const {
  const ::iorap::serialize::proto::TraceFileList* p = list_;
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFile.list)
  return p != nullptr ? *p : *reinterpret_cast<const ::iorap::serialize::proto::TraceFileList*>(
      &::iorap::serialize::proto::_TraceFileList_default_instance_);
}
inline ::iorap::serialize::proto::TraceFileList* TraceFile::release_list() {
  // @@protoc_insertion_point(field_release:iorap.serialize.proto.TraceFile.list)
  _has_bits_[0] &= ~0x00000002u;
  ::iorap::serialize::proto::TraceFileList* temp = list_;
  list_ = nullptr;
  return temp;
}
inline ::iorap::serialize::proto::TraceFileList* TraceFile::mutable_list() {
  _has_bits_[0] |= 0x00000002u;
  if (list_ == nullptr) {
    auto* p = CreateMaybeMessage<::iorap::serialize::proto::TraceFileList>(GetArenaNoVirtual());
    list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:iorap.serialize.proto.TraceFile.list)
  return list_;
}
inline void TraceFile::set_allocated_list(::iorap::serialize::proto::TraceFileList* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete list_;
  }
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  list_ = list;
  // @@protoc_insertion_point(field_set_allocated:iorap.serialize.proto.TraceFile.list)
}

// -------------------------------------------------------------------

// TraceFileIndex

// repeated .iorap.serialize.proto.TraceFileIndexEntry entries = 1;
inline int TraceFileIndex::entries_size() const {
  return entries_.size();
}
inline void TraceFileIndex::clear_entries() {
  entries_.Clear();
}
inline ::iorap::serialize::proto::TraceFileIndexEntry* TraceFileIndex::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:iorap.serialize.proto.TraceFileIndex.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileIndexEntry >*
TraceFileIndex::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:iorap.serialize.proto.TraceFileIndex.entries)
  return &entries_;
}
inline const ::iorap::serialize::proto::TraceFileIndexEntry& TraceFileIndex::entries(int index) const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileIndex.entries)
  return entries_.Get(index);
}
inline ::iorap::serialize::proto::TraceFileIndexEntry* TraceFileIndex::add_entries() {
  // @@protoc_insertion_point(field_add:iorap.serialize.proto.TraceFileIndex.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileIndexEntry >&
TraceFileIndex::entries() const {
  // @@protoc_insertion_point(field_list:iorap.serialize.proto.TraceFileIndex.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TraceFileIndexEntry

// required int64 id = 1;
inline bool TraceFileIndexEntry::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceFileIndexEntry::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceFileIndexEntry::id() const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileIndexEntry.id)
  return id_;
}
inline void TraceFileIndexEntry::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:iorap.serialize.proto.TraceFileIndexEntry.id)
}

// required string file_name = 2;
inline bool TraceFileIndexEntry::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceFileIndexEntry::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TraceFileIndexEntry::file_name() const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileIndexEntry.file_name)
  return file_name_.GetNoArena();
}
inline void TraceFileIndexEntry::set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iorap.serialize.proto.TraceFileIndexEntry.file_name)
}
inline void TraceFileIndexEntry::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iorap.serialize.proto.TraceFileIndexEntry.file_name)
}
inline void TraceFileIndexEntry::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iorap.serialize.proto.TraceFileIndexEntry.file_name)
}
inline void TraceFileIndexEntry::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iorap.serialize.proto.TraceFileIndexEntry.file_name)
}
inline std::string* TraceFileIndexEntry::mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:iorap.serialize.proto.TraceFileIndexEntry.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceFileIndexEntry::release_file_name() {
  // @@protoc_insertion_point(field_release:iorap.serialize.proto.TraceFileIndexEntry.file_name)
  if (!has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceFileIndexEntry::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:iorap.serialize.proto.TraceFileIndexEntry.file_name)
}

// -------------------------------------------------------------------

// TraceFileList

// repeated .iorap.serialize.proto.TraceFileEntry entries = 1;
inline int TraceFileList::entries_size() const {
  return entries_.size();
}
inline void TraceFileList::clear_entries() {
  entries_.Clear();
}
inline ::iorap::serialize::proto::TraceFileEntry* TraceFileList::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:iorap.serialize.proto.TraceFileList.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileEntry >*
TraceFileList::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:iorap.serialize.proto.TraceFileList.entries)
  return &entries_;
}
inline const ::iorap::serialize::proto::TraceFileEntry& TraceFileList::entries(int index) const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileList.entries)
  return entries_.Get(index);
}
inline ::iorap::serialize::proto::TraceFileEntry* TraceFileList::add_entries() {
  // @@protoc_insertion_point(field_add:iorap.serialize.proto.TraceFileList.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::iorap::serialize::proto::TraceFileEntry >&
TraceFileList::entries() const {
  // @@protoc_insertion_point(field_list:iorap.serialize.proto.TraceFileList.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TraceFileEntry

// required int64 index_id = 1;
inline bool TraceFileEntry::has_index_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceFileEntry::clear_index_id() {
  index_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceFileEntry::index_id() const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileEntry.index_id)
  return index_id_;
}
inline void TraceFileEntry::set_index_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  index_id_ = value;
  // @@protoc_insertion_point(field_set:iorap.serialize.proto.TraceFileEntry.index_id)
}

// required int64 file_offset = 2;
inline bool TraceFileEntry::has_file_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceFileEntry::clear_file_offset() {
  file_offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceFileEntry::file_offset() const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileEntry.file_offset)
  return file_offset_;
}
inline void TraceFileEntry::set_file_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  file_offset_ = value;
  // @@protoc_insertion_point(field_set:iorap.serialize.proto.TraceFileEntry.file_offset)
}

// required int64 file_length = 3;
inline bool TraceFileEntry::has_file_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceFileEntry::clear_file_length() {
  file_length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TraceFileEntry::file_length() const {
  // @@protoc_insertion_point(field_get:iorap.serialize.proto.TraceFileEntry.file_length)
  return file_length_;
}
inline void TraceFileEntry::set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  file_length_ = value;
  // @@protoc_insertion_point(field_set:iorap.serialize.proto.TraceFileEntry.file_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace serialize
}  // namespace iorap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fiorap_2fsrc_2fserialize_2fTraceFile_2eproto
