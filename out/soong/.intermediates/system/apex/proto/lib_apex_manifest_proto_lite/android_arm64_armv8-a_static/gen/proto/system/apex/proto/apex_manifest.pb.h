// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/apex/proto/apex_manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fapex_5fmanifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fapex_5fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fapex_2fproto_2fapex_5fmanifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fapex_2fproto_2fapex_5fmanifest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace apex {
namespace proto {
class ApexManifest;
class ApexManifestDefaultTypeInternal;
extern ApexManifestDefaultTypeInternal _ApexManifest_default_instance_;
class ApexManifest_CompressedApexMetadata;
class ApexManifest_CompressedApexMetadataDefaultTypeInternal;
extern ApexManifest_CompressedApexMetadataDefaultTypeInternal _ApexManifest_CompressedApexMetadata_default_instance_;
}  // namespace proto
}  // namespace apex
PROTOBUF_NAMESPACE_OPEN
template<> ::apex::proto::ApexManifest* Arena::CreateMaybeMessage<::apex::proto::ApexManifest>(Arena*);
template<> ::apex::proto::ApexManifest_CompressedApexMetadata* Arena::CreateMaybeMessage<::apex::proto::ApexManifest_CompressedApexMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apex {
namespace proto {

// ===================================================================

class ApexManifest_CompressedApexMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:apex.proto.ApexManifest.CompressedApexMetadata) */ {
 public:
  ApexManifest_CompressedApexMetadata();
  virtual ~ApexManifest_CompressedApexMetadata();

  ApexManifest_CompressedApexMetadata(const ApexManifest_CompressedApexMetadata& from);
  ApexManifest_CompressedApexMetadata(ApexManifest_CompressedApexMetadata&& from) noexcept
    : ApexManifest_CompressedApexMetadata() {
    *this = ::std::move(from);
  }

  inline ApexManifest_CompressedApexMetadata& operator=(const ApexManifest_CompressedApexMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApexManifest_CompressedApexMetadata& operator=(ApexManifest_CompressedApexMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ApexManifest_CompressedApexMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApexManifest_CompressedApexMetadata* internal_default_instance() {
    return reinterpret_cast<const ApexManifest_CompressedApexMetadata*>(
               &_ApexManifest_CompressedApexMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApexManifest_CompressedApexMetadata& a, ApexManifest_CompressedApexMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ApexManifest_CompressedApexMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApexManifest_CompressedApexMetadata* New() const final {
    return CreateMaybeMessage<ApexManifest_CompressedApexMetadata>(nullptr);
  }

  ApexManifest_CompressedApexMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApexManifest_CompressedApexMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApexManifest_CompressedApexMetadata& from);
  void MergeFrom(const ApexManifest_CompressedApexMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApexManifest_CompressedApexMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apex.proto.ApexManifest.CompressedApexMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalApexDigestFieldNumber = 1,
  };
  // string originalApexDigest = 1;
  void clear_originalapexdigest();
  const std::string& originalapexdigest() const;
  void set_originalapexdigest(const std::string& value);
  void set_originalapexdigest(std::string&& value);
  void set_originalapexdigest(const char* value);
  void set_originalapexdigest(const char* value, size_t size);
  std::string* mutable_originalapexdigest();
  std::string* release_originalapexdigest();
  void set_allocated_originalapexdigest(std::string* originalapexdigest);

  // @@protoc_insertion_point(class_scope:apex.proto.ApexManifest.CompressedApexMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originalapexdigest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fapex_2fproto_2fapex_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ApexManifest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:apex.proto.ApexManifest) */ {
 public:
  ApexManifest();
  virtual ~ApexManifest();

  ApexManifest(const ApexManifest& from);
  ApexManifest(ApexManifest&& from) noexcept
    : ApexManifest() {
    *this = ::std::move(from);
  }

  inline ApexManifest& operator=(const ApexManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApexManifest& operator=(ApexManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ApexManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApexManifest* internal_default_instance() {
    return reinterpret_cast<const ApexManifest*>(
               &_ApexManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApexManifest& a, ApexManifest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApexManifest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApexManifest* New() const final {
    return CreateMaybeMessage<ApexManifest>(nullptr);
  }

  ApexManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApexManifest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApexManifest& from);
  void MergeFrom(const ApexManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApexManifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apex.proto.ApexManifest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ApexManifest_CompressedApexMetadata CompressedApexMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kProvideNativeLibsFieldNumber = 7,
    kRequireNativeLibsFieldNumber = 8,
    kJniLibsFieldNumber = 9,
    kRequireSharedApexLibsFieldNumber = 10,
    kNameFieldNumber = 1,
    kPreInstallHookFieldNumber = 3,
    kPostInstallHookFieldNumber = 4,
    kVersionNameFieldNumber = 5,
    kCapexMetadataFieldNumber = 12,
    kVersionFieldNumber = 2,
    kNoCodeFieldNumber = 6,
    kProvideSharedApexLibsFieldNumber = 11,
    kSupportsRebootlessUpdateFieldNumber = 13,
  };
  // repeated string provideNativeLibs = 7;
  int providenativelibs_size() const;
  void clear_providenativelibs();
  const std::string& providenativelibs(int index) const;
  std::string* mutable_providenativelibs(int index);
  void set_providenativelibs(int index, const std::string& value);
  void set_providenativelibs(int index, std::string&& value);
  void set_providenativelibs(int index, const char* value);
  void set_providenativelibs(int index, const char* value, size_t size);
  std::string* add_providenativelibs();
  void add_providenativelibs(const std::string& value);
  void add_providenativelibs(std::string&& value);
  void add_providenativelibs(const char* value);
  void add_providenativelibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& providenativelibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_providenativelibs();

  // repeated string requireNativeLibs = 8;
  int requirenativelibs_size() const;
  void clear_requirenativelibs();
  const std::string& requirenativelibs(int index) const;
  std::string* mutable_requirenativelibs(int index);
  void set_requirenativelibs(int index, const std::string& value);
  void set_requirenativelibs(int index, std::string&& value);
  void set_requirenativelibs(int index, const char* value);
  void set_requirenativelibs(int index, const char* value, size_t size);
  std::string* add_requirenativelibs();
  void add_requirenativelibs(const std::string& value);
  void add_requirenativelibs(std::string&& value);
  void add_requirenativelibs(const char* value);
  void add_requirenativelibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requirenativelibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requirenativelibs();

  // repeated string jniLibs = 9;
  int jnilibs_size() const;
  void clear_jnilibs();
  const std::string& jnilibs(int index) const;
  std::string* mutable_jnilibs(int index);
  void set_jnilibs(int index, const std::string& value);
  void set_jnilibs(int index, std::string&& value);
  void set_jnilibs(int index, const char* value);
  void set_jnilibs(int index, const char* value, size_t size);
  std::string* add_jnilibs();
  void add_jnilibs(const std::string& value);
  void add_jnilibs(std::string&& value);
  void add_jnilibs(const char* value);
  void add_jnilibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& jnilibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_jnilibs();

  // repeated string requireSharedApexLibs = 10;
  int requiresharedapexlibs_size() const;
  void clear_requiresharedapexlibs();
  const std::string& requiresharedapexlibs(int index) const;
  std::string* mutable_requiresharedapexlibs(int index);
  void set_requiresharedapexlibs(int index, const std::string& value);
  void set_requiresharedapexlibs(int index, std::string&& value);
  void set_requiresharedapexlibs(int index, const char* value);
  void set_requiresharedapexlibs(int index, const char* value, size_t size);
  std::string* add_requiresharedapexlibs();
  void add_requiresharedapexlibs(const std::string& value);
  void add_requiresharedapexlibs(std::string&& value);
  void add_requiresharedapexlibs(const char* value);
  void add_requiresharedapexlibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requiresharedapexlibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requiresharedapexlibs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string preInstallHook = 3;
  void clear_preinstallhook();
  const std::string& preinstallhook() const;
  void set_preinstallhook(const std::string& value);
  void set_preinstallhook(std::string&& value);
  void set_preinstallhook(const char* value);
  void set_preinstallhook(const char* value, size_t size);
  std::string* mutable_preinstallhook();
  std::string* release_preinstallhook();
  void set_allocated_preinstallhook(std::string* preinstallhook);

  // string postInstallHook = 4;
  void clear_postinstallhook();
  const std::string& postinstallhook() const;
  void set_postinstallhook(const std::string& value);
  void set_postinstallhook(std::string&& value);
  void set_postinstallhook(const char* value);
  void set_postinstallhook(const char* value, size_t size);
  std::string* mutable_postinstallhook();
  std::string* release_postinstallhook();
  void set_allocated_postinstallhook(std::string* postinstallhook);

  // string versionName = 5;
  void clear_versionname();
  const std::string& versionname() const;
  void set_versionname(const std::string& value);
  void set_versionname(std::string&& value);
  void set_versionname(const char* value);
  void set_versionname(const char* value, size_t size);
  std::string* mutable_versionname();
  std::string* release_versionname();
  void set_allocated_versionname(std::string* versionname);

  // .apex.proto.ApexManifest.CompressedApexMetadata capexMetadata = 12;
  bool has_capexmetadata() const;
  void clear_capexmetadata();
  const ::apex::proto::ApexManifest_CompressedApexMetadata& capexmetadata() const;
  ::apex::proto::ApexManifest_CompressedApexMetadata* release_capexmetadata();
  ::apex::proto::ApexManifest_CompressedApexMetadata* mutable_capexmetadata();
  void set_allocated_capexmetadata(::apex::proto::ApexManifest_CompressedApexMetadata* capexmetadata);

  // int64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool noCode = 6;
  void clear_nocode();
  bool nocode() const;
  void set_nocode(bool value);

  // bool provideSharedApexLibs = 11;
  void clear_providesharedapexlibs();
  bool providesharedapexlibs() const;
  void set_providesharedapexlibs(bool value);

  // bool supportsRebootlessUpdate = 13;
  void clear_supportsrebootlessupdate();
  bool supportsrebootlessupdate() const;
  void set_supportsrebootlessupdate(bool value);

  // @@protoc_insertion_point(class_scope:apex.proto.ApexManifest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> providenativelibs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requirenativelibs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> jnilibs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requiresharedapexlibs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preinstallhook_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postinstallhook_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr versionname_;
  ::apex::proto::ApexManifest_CompressedApexMetadata* capexmetadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  bool nocode_;
  bool providesharedapexlibs_;
  bool supportsrebootlessupdate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fapex_2fproto_2fapex_5fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApexManifest_CompressedApexMetadata

// string originalApexDigest = 1;
inline void ApexManifest_CompressedApexMetadata::clear_originalapexdigest() {
  originalapexdigest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApexManifest_CompressedApexMetadata::originalapexdigest() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
  return originalapexdigest_.GetNoArena();
}
inline void ApexManifest_CompressedApexMetadata::set_originalapexdigest(const std::string& value) {
  
  originalapexdigest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
}
inline void ApexManifest_CompressedApexMetadata::set_originalapexdigest(std::string&& value) {
  
  originalapexdigest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
}
inline void ApexManifest_CompressedApexMetadata::set_originalapexdigest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originalapexdigest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
}
inline void ApexManifest_CompressedApexMetadata::set_originalapexdigest(const char* value, size_t size) {
  
  originalapexdigest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
}
inline std::string* ApexManifest_CompressedApexMetadata::mutable_originalapexdigest() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
  return originalapexdigest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApexManifest_CompressedApexMetadata::release_originalapexdigest() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
  
  return originalapexdigest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApexManifest_CompressedApexMetadata::set_allocated_originalapexdigest(std::string* originalapexdigest) {
  if (originalapexdigest != nullptr) {
    
  } else {
    
  }
  originalapexdigest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originalapexdigest);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.CompressedApexMetadata.originalApexDigest)
}

// -------------------------------------------------------------------

// ApexManifest

// string name = 1;
inline void ApexManifest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApexManifest::name() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.name)
  return name_.GetNoArena();
}
inline void ApexManifest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.name)
}
inline void ApexManifest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.ApexManifest.name)
}
inline void ApexManifest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.name)
}
inline void ApexManifest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.name)
}
inline std::string* ApexManifest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApexManifest::release_name() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApexManifest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.name)
}

// int64 version = 2;
inline void ApexManifest::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApexManifest::version() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.version)
  return version_;
}
inline void ApexManifest::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.version)
}

// string preInstallHook = 3;
inline void ApexManifest::clear_preinstallhook() {
  preinstallhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApexManifest::preinstallhook() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.preInstallHook)
  return preinstallhook_.GetNoArena();
}
inline void ApexManifest::set_preinstallhook(const std::string& value) {
  
  preinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.preInstallHook)
}
inline void ApexManifest::set_preinstallhook(std::string&& value) {
  
  preinstallhook_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.ApexManifest.preInstallHook)
}
inline void ApexManifest::set_preinstallhook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.preInstallHook)
}
inline void ApexManifest::set_preinstallhook(const char* value, size_t size) {
  
  preinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.preInstallHook)
}
inline std::string* ApexManifest::mutable_preinstallhook() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.preInstallHook)
  return preinstallhook_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApexManifest::release_preinstallhook() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.preInstallHook)
  
  return preinstallhook_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApexManifest::set_allocated_preinstallhook(std::string* preinstallhook) {
  if (preinstallhook != nullptr) {
    
  } else {
    
  }
  preinstallhook_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preinstallhook);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.preInstallHook)
}

// string postInstallHook = 4;
inline void ApexManifest::clear_postinstallhook() {
  postinstallhook_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApexManifest::postinstallhook() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.postInstallHook)
  return postinstallhook_.GetNoArena();
}
inline void ApexManifest::set_postinstallhook(const std::string& value) {
  
  postinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.postInstallHook)
}
inline void ApexManifest::set_postinstallhook(std::string&& value) {
  
  postinstallhook_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.ApexManifest.postInstallHook)
}
inline void ApexManifest::set_postinstallhook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.postInstallHook)
}
inline void ApexManifest::set_postinstallhook(const char* value, size_t size) {
  
  postinstallhook_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.postInstallHook)
}
inline std::string* ApexManifest::mutable_postinstallhook() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.postInstallHook)
  return postinstallhook_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApexManifest::release_postinstallhook() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.postInstallHook)
  
  return postinstallhook_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApexManifest::set_allocated_postinstallhook(std::string* postinstallhook) {
  if (postinstallhook != nullptr) {
    
  } else {
    
  }
  postinstallhook_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postinstallhook);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.postInstallHook)
}

// string versionName = 5;
inline void ApexManifest::clear_versionname() {
  versionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ApexManifest::versionname() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.versionName)
  return versionname_.GetNoArena();
}
inline void ApexManifest::set_versionname(const std::string& value) {
  
  versionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.versionName)
}
inline void ApexManifest::set_versionname(std::string&& value) {
  
  versionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.ApexManifest.versionName)
}
inline void ApexManifest::set_versionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  versionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.versionName)
}
inline void ApexManifest::set_versionname(const char* value, size_t size) {
  
  versionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.versionName)
}
inline std::string* ApexManifest::mutable_versionname() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.versionName)
  return versionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApexManifest::release_versionname() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.versionName)
  
  return versionname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApexManifest::set_allocated_versionname(std::string* versionname) {
  if (versionname != nullptr) {
    
  } else {
    
  }
  versionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), versionname);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.versionName)
}

// bool noCode = 6;
inline void ApexManifest::clear_nocode() {
  nocode_ = false;
}
inline bool ApexManifest::nocode() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.noCode)
  return nocode_;
}
inline void ApexManifest::set_nocode(bool value) {
  
  nocode_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.noCode)
}

// repeated string provideNativeLibs = 7;
inline int ApexManifest::providenativelibs_size() const {
  return providenativelibs_.size();
}
inline void ApexManifest::clear_providenativelibs() {
  providenativelibs_.Clear();
}
inline const std::string& ApexManifest::providenativelibs(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.provideNativeLibs)
  return providenativelibs_.Get(index);
}
inline std::string* ApexManifest::mutable_providenativelibs(int index) {
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.provideNativeLibs)
  return providenativelibs_.Mutable(index);
}
inline void ApexManifest::set_providenativelibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.provideNativeLibs)
  providenativelibs_.Mutable(index)->assign(value);
}
inline void ApexManifest::set_providenativelibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.provideNativeLibs)
  providenativelibs_.Mutable(index)->assign(std::move(value));
}
inline void ApexManifest::set_providenativelibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providenativelibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.provideNativeLibs)
}
inline void ApexManifest::set_providenativelibs(int index, const char* value, size_t size) {
  providenativelibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.provideNativeLibs)
}
inline std::string* ApexManifest::add_providenativelibs() {
  // @@protoc_insertion_point(field_add_mutable:apex.proto.ApexManifest.provideNativeLibs)
  return providenativelibs_.Add();
}
inline void ApexManifest::add_providenativelibs(const std::string& value) {
  providenativelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.provideNativeLibs)
}
inline void ApexManifest::add_providenativelibs(std::string&& value) {
  providenativelibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.provideNativeLibs)
}
inline void ApexManifest::add_providenativelibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providenativelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apex.proto.ApexManifest.provideNativeLibs)
}
inline void ApexManifest::add_providenativelibs(const char* value, size_t size) {
  providenativelibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apex.proto.ApexManifest.provideNativeLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApexManifest::providenativelibs() const {
  // @@protoc_insertion_point(field_list:apex.proto.ApexManifest.provideNativeLibs)
  return providenativelibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApexManifest::mutable_providenativelibs() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.ApexManifest.provideNativeLibs)
  return &providenativelibs_;
}

// repeated string requireNativeLibs = 8;
inline int ApexManifest::requirenativelibs_size() const {
  return requirenativelibs_.size();
}
inline void ApexManifest::clear_requirenativelibs() {
  requirenativelibs_.Clear();
}
inline const std::string& ApexManifest::requirenativelibs(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.requireNativeLibs)
  return requirenativelibs_.Get(index);
}
inline std::string* ApexManifest::mutable_requirenativelibs(int index) {
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.requireNativeLibs)
  return requirenativelibs_.Mutable(index);
}
inline void ApexManifest::set_requirenativelibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.requireNativeLibs)
  requirenativelibs_.Mutable(index)->assign(value);
}
inline void ApexManifest::set_requirenativelibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.requireNativeLibs)
  requirenativelibs_.Mutable(index)->assign(std::move(value));
}
inline void ApexManifest::set_requirenativelibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirenativelibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.requireNativeLibs)
}
inline void ApexManifest::set_requirenativelibs(int index, const char* value, size_t size) {
  requirenativelibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.requireNativeLibs)
}
inline std::string* ApexManifest::add_requirenativelibs() {
  // @@protoc_insertion_point(field_add_mutable:apex.proto.ApexManifest.requireNativeLibs)
  return requirenativelibs_.Add();
}
inline void ApexManifest::add_requirenativelibs(const std::string& value) {
  requirenativelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.requireNativeLibs)
}
inline void ApexManifest::add_requirenativelibs(std::string&& value) {
  requirenativelibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.requireNativeLibs)
}
inline void ApexManifest::add_requirenativelibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirenativelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apex.proto.ApexManifest.requireNativeLibs)
}
inline void ApexManifest::add_requirenativelibs(const char* value, size_t size) {
  requirenativelibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apex.proto.ApexManifest.requireNativeLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApexManifest::requirenativelibs() const {
  // @@protoc_insertion_point(field_list:apex.proto.ApexManifest.requireNativeLibs)
  return requirenativelibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApexManifest::mutable_requirenativelibs() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.ApexManifest.requireNativeLibs)
  return &requirenativelibs_;
}

// repeated string jniLibs = 9;
inline int ApexManifest::jnilibs_size() const {
  return jnilibs_.size();
}
inline void ApexManifest::clear_jnilibs() {
  jnilibs_.Clear();
}
inline const std::string& ApexManifest::jnilibs(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.jniLibs)
  return jnilibs_.Get(index);
}
inline std::string* ApexManifest::mutable_jnilibs(int index) {
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.jniLibs)
  return jnilibs_.Mutable(index);
}
inline void ApexManifest::set_jnilibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.jniLibs)
  jnilibs_.Mutable(index)->assign(value);
}
inline void ApexManifest::set_jnilibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.jniLibs)
  jnilibs_.Mutable(index)->assign(std::move(value));
}
inline void ApexManifest::set_jnilibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jnilibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.jniLibs)
}
inline void ApexManifest::set_jnilibs(int index, const char* value, size_t size) {
  jnilibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.jniLibs)
}
inline std::string* ApexManifest::add_jnilibs() {
  // @@protoc_insertion_point(field_add_mutable:apex.proto.ApexManifest.jniLibs)
  return jnilibs_.Add();
}
inline void ApexManifest::add_jnilibs(const std::string& value) {
  jnilibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.jniLibs)
}
inline void ApexManifest::add_jnilibs(std::string&& value) {
  jnilibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.jniLibs)
}
inline void ApexManifest::add_jnilibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  jnilibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apex.proto.ApexManifest.jniLibs)
}
inline void ApexManifest::add_jnilibs(const char* value, size_t size) {
  jnilibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apex.proto.ApexManifest.jniLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApexManifest::jnilibs() const {
  // @@protoc_insertion_point(field_list:apex.proto.ApexManifest.jniLibs)
  return jnilibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApexManifest::mutable_jnilibs() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.ApexManifest.jniLibs)
  return &jnilibs_;
}

// repeated string requireSharedApexLibs = 10;
inline int ApexManifest::requiresharedapexlibs_size() const {
  return requiresharedapexlibs_.size();
}
inline void ApexManifest::clear_requiresharedapexlibs() {
  requiresharedapexlibs_.Clear();
}
inline const std::string& ApexManifest::requiresharedapexlibs(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.requireSharedApexLibs)
  return requiresharedapexlibs_.Get(index);
}
inline std::string* ApexManifest::mutable_requiresharedapexlibs(int index) {
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.requireSharedApexLibs)
  return requiresharedapexlibs_.Mutable(index);
}
inline void ApexManifest::set_requiresharedapexlibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.requireSharedApexLibs)
  requiresharedapexlibs_.Mutable(index)->assign(value);
}
inline void ApexManifest::set_requiresharedapexlibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.requireSharedApexLibs)
  requiresharedapexlibs_.Mutable(index)->assign(std::move(value));
}
inline void ApexManifest::set_requiresharedapexlibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiresharedapexlibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline void ApexManifest::set_requiresharedapexlibs(int index, const char* value, size_t size) {
  requiresharedapexlibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline std::string* ApexManifest::add_requiresharedapexlibs() {
  // @@protoc_insertion_point(field_add_mutable:apex.proto.ApexManifest.requireSharedApexLibs)
  return requiresharedapexlibs_.Add();
}
inline void ApexManifest::add_requiresharedapexlibs(const std::string& value) {
  requiresharedapexlibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline void ApexManifest::add_requiresharedapexlibs(std::string&& value) {
  requiresharedapexlibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline void ApexManifest::add_requiresharedapexlibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiresharedapexlibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline void ApexManifest::add_requiresharedapexlibs(const char* value, size_t size) {
  requiresharedapexlibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apex.proto.ApexManifest.requireSharedApexLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApexManifest::requiresharedapexlibs() const {
  // @@protoc_insertion_point(field_list:apex.proto.ApexManifest.requireSharedApexLibs)
  return requiresharedapexlibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApexManifest::mutable_requiresharedapexlibs() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.ApexManifest.requireSharedApexLibs)
  return &requiresharedapexlibs_;
}

// bool provideSharedApexLibs = 11;
inline void ApexManifest::clear_providesharedapexlibs() {
  providesharedapexlibs_ = false;
}
inline bool ApexManifest::providesharedapexlibs() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.provideSharedApexLibs)
  return providesharedapexlibs_;
}
inline void ApexManifest::set_providesharedapexlibs(bool value) {
  
  providesharedapexlibs_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.provideSharedApexLibs)
}

// .apex.proto.ApexManifest.CompressedApexMetadata capexMetadata = 12;
inline bool ApexManifest::has_capexmetadata() const {
  return this != internal_default_instance() && capexmetadata_ != nullptr;
}
inline void ApexManifest::clear_capexmetadata() {
  if (GetArenaNoVirtual() == nullptr && capexmetadata_ != nullptr) {
    delete capexmetadata_;
  }
  capexmetadata_ = nullptr;
}
inline const ::apex::proto::ApexManifest_CompressedApexMetadata& ApexManifest::capexmetadata() const {
  const ::apex::proto::ApexManifest_CompressedApexMetadata* p = capexmetadata_;
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.capexMetadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::apex::proto::ApexManifest_CompressedApexMetadata*>(
      &::apex::proto::_ApexManifest_CompressedApexMetadata_default_instance_);
}
inline ::apex::proto::ApexManifest_CompressedApexMetadata* ApexManifest::release_capexmetadata() {
  // @@protoc_insertion_point(field_release:apex.proto.ApexManifest.capexMetadata)
  
  ::apex::proto::ApexManifest_CompressedApexMetadata* temp = capexmetadata_;
  capexmetadata_ = nullptr;
  return temp;
}
inline ::apex::proto::ApexManifest_CompressedApexMetadata* ApexManifest::mutable_capexmetadata() {
  
  if (capexmetadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::apex::proto::ApexManifest_CompressedApexMetadata>(GetArenaNoVirtual());
    capexmetadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apex.proto.ApexManifest.capexMetadata)
  return capexmetadata_;
}
inline void ApexManifest::set_allocated_capexmetadata(::apex::proto::ApexManifest_CompressedApexMetadata* capexmetadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capexmetadata_;
  }
  if (capexmetadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capexmetadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capexmetadata, submessage_arena);
    }
    
  } else {
    
  }
  capexmetadata_ = capexmetadata;
  // @@protoc_insertion_point(field_set_allocated:apex.proto.ApexManifest.capexMetadata)
}

// bool supportsRebootlessUpdate = 13;
inline void ApexManifest::clear_supportsrebootlessupdate() {
  supportsrebootlessupdate_ = false;
}
inline bool ApexManifest::supportsrebootlessupdate() const {
  // @@protoc_insertion_point(field_get:apex.proto.ApexManifest.supportsRebootlessUpdate)
  return supportsrebootlessupdate_;
}
inline void ApexManifest::set_supportsrebootlessupdate(bool value) {
  
  supportsrebootlessupdate_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.ApexManifest.supportsRebootlessUpdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace apex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fapex_5fmanifest_2eproto
