// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/apex/proto/session_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fsession_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fsession_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fapex_2fproto_2fsession_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fapex_2fproto_2fsession_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_2fapex_2fproto_2fsession_5fstate_2eproto;
namespace apex {
namespace proto {
class SessionState;
class SessionStateDefaultTypeInternal;
extern SessionStateDefaultTypeInternal _SessionState_default_instance_;
}  // namespace proto
}  // namespace apex
PROTOBUF_NAMESPACE_OPEN
template<> ::apex::proto::SessionState* Arena::CreateMaybeMessage<::apex::proto::SessionState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apex {
namespace proto {

enum SessionState_State : int {
  SessionState_State_UNKNOWN = 0,
  SessionState_State_VERIFIED = 1,
  SessionState_State_STAGED = 2,
  SessionState_State_ACTIVATED = 3,
  SessionState_State_ACTIVATION_FAILED = 4,
  SessionState_State_SUCCESS = 5,
  SessionState_State_REVERT_IN_PROGRESS = 6,
  SessionState_State_REVERTED = 7,
  SessionState_State_REVERT_FAILED = 8,
  SessionState_State_SessionState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionState_State_SessionState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionState_State_IsValid(int value);
constexpr SessionState_State SessionState_State_State_MIN = SessionState_State_UNKNOWN;
constexpr SessionState_State SessionState_State_State_MAX = SessionState_State_REVERT_FAILED;
constexpr int SessionState_State_State_ARRAYSIZE = SessionState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionState_State_descriptor();
template<typename T>
inline const std::string& SessionState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionState_State_descriptor(), enum_t_value);
}
inline bool SessionState_State_Parse(
    const std::string& name, SessionState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionState_State>(
    SessionState_State_descriptor(), name, value);
}
// ===================================================================

class SessionState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apex.proto.SessionState) */ {
 public:
  SessionState();
  virtual ~SessionState();

  SessionState(const SessionState& from);
  SessionState(SessionState&& from) noexcept
    : SessionState() {
    *this = ::std::move(from);
  }

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionState& operator=(SessionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionState* internal_default_instance() {
    return reinterpret_cast<const SessionState*>(
               &_SessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionState& a, SessionState& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionState* New() const final {
    return CreateMaybeMessage<SessionState>(nullptr);
  }

  SessionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apex.proto.SessionState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2fapex_2fproto_2fsession_5fstate_2eproto);
    return ::descriptor_table_system_2fapex_2fproto_2fsession_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SessionState_State State;
  static constexpr State UNKNOWN =
    SessionState_State_UNKNOWN;
  static constexpr State VERIFIED =
    SessionState_State_VERIFIED;
  static constexpr State STAGED =
    SessionState_State_STAGED;
  static constexpr State ACTIVATED =
    SessionState_State_ACTIVATED;
  static constexpr State ACTIVATION_FAILED =
    SessionState_State_ACTIVATION_FAILED;
  static constexpr State SUCCESS =
    SessionState_State_SUCCESS;
  static constexpr State REVERT_IN_PROGRESS =
    SessionState_State_REVERT_IN_PROGRESS;
  static constexpr State REVERTED =
    SessionState_State_REVERTED;
  static constexpr State REVERT_FAILED =
    SessionState_State_REVERT_FAILED;
  static inline bool State_IsValid(int value) {
    return SessionState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    SessionState_State_State_MIN;
  static constexpr State State_MAX =
    SessionState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    SessionState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return SessionState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return SessionState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return SessionState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChildSessionIdsFieldNumber = 3,
    kApexNamesFieldNumber = 9,
    kExpectedBuildFingerprintFieldNumber = 4,
    kCrashingNativeProcessFieldNumber = 8,
    kErrorMessageFieldNumber = 10,
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kRollbackEnabledFieldNumber = 5,
    kIsRollbackFieldNumber = 6,
    kRollbackIdFieldNumber = 7,
  };
  // repeated int32 child_session_ids = 3;
  int child_session_ids_size() const;
  void clear_child_session_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 child_session_ids(int index) const;
  void set_child_session_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_child_session_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      child_session_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_child_session_ids();

  // repeated string apex_names = 9;
  int apex_names_size() const;
  void clear_apex_names();
  const std::string& apex_names(int index) const;
  std::string* mutable_apex_names(int index);
  void set_apex_names(int index, const std::string& value);
  void set_apex_names(int index, std::string&& value);
  void set_apex_names(int index, const char* value);
  void set_apex_names(int index, const char* value, size_t size);
  std::string* add_apex_names();
  void add_apex_names(const std::string& value);
  void add_apex_names(std::string&& value);
  void add_apex_names(const char* value);
  void add_apex_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& apex_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_apex_names();

  // string expected_build_fingerprint = 4;
  void clear_expected_build_fingerprint();
  const std::string& expected_build_fingerprint() const;
  void set_expected_build_fingerprint(const std::string& value);
  void set_expected_build_fingerprint(std::string&& value);
  void set_expected_build_fingerprint(const char* value);
  void set_expected_build_fingerprint(const char* value, size_t size);
  std::string* mutable_expected_build_fingerprint();
  std::string* release_expected_build_fingerprint();
  void set_allocated_expected_build_fingerprint(std::string* expected_build_fingerprint);

  // string crashing_native_process = 8;
  void clear_crashing_native_process();
  const std::string& crashing_native_process() const;
  void set_crashing_native_process(const std::string& value);
  void set_crashing_native_process(std::string&& value);
  void set_crashing_native_process(const char* value);
  void set_crashing_native_process(const char* value, size_t size);
  std::string* mutable_crashing_native_process();
  std::string* release_crashing_native_process();
  void set_allocated_crashing_native_process(std::string* crashing_native_process);

  // string error_message = 10;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .apex.proto.SessionState.State state = 2;
  void clear_state();
  ::apex::proto::SessionState_State state() const;
  void set_state(::apex::proto::SessionState_State value);

  // bool rollback_enabled = 5;
  void clear_rollback_enabled();
  bool rollback_enabled() const;
  void set_rollback_enabled(bool value);

  // bool is_rollback = 6;
  void clear_is_rollback();
  bool is_rollback() const;
  void set_is_rollback(bool value);

  // int32 rollback_id = 7;
  void clear_rollback_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rollback_id() const;
  void set_rollback_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:apex.proto.SessionState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > child_session_ids_;
  mutable std::atomic<int> _child_session_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> apex_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expected_build_fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crashing_native_process_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  bool rollback_enabled_;
  bool is_rollback_;
  ::PROTOBUF_NAMESPACE_ID::int32 rollback_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2fapex_2fproto_2fsession_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionState

// int32 id = 1;
inline void SessionState::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionState::id() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.id)
  return id_;
}
inline void SessionState::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.id)
}

// .apex.proto.SessionState.State state = 2;
inline void SessionState::clear_state() {
  state_ = 0;
}
inline ::apex::proto::SessionState_State SessionState::state() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.state)
  return static_cast< ::apex::proto::SessionState_State >(state_);
}
inline void SessionState::set_state(::apex::proto::SessionState_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.state)
}

// repeated int32 child_session_ids = 3;
inline int SessionState::child_session_ids_size() const {
  return child_session_ids_.size();
}
inline void SessionState::clear_child_session_ids() {
  child_session_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionState::child_session_ids(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.child_session_ids)
  return child_session_ids_.Get(index);
}
inline void SessionState::set_child_session_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  child_session_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.child_session_ids)
}
inline void SessionState::add_child_session_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  child_session_ids_.Add(value);
  // @@protoc_insertion_point(field_add:apex.proto.SessionState.child_session_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SessionState::child_session_ids() const {
  // @@protoc_insertion_point(field_list:apex.proto.SessionState.child_session_ids)
  return child_session_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SessionState::mutable_child_session_ids() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.SessionState.child_session_ids)
  return &child_session_ids_;
}

// string expected_build_fingerprint = 4;
inline void SessionState::clear_expected_build_fingerprint() {
  expected_build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionState::expected_build_fingerprint() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.expected_build_fingerprint)
  return expected_build_fingerprint_.GetNoArena();
}
inline void SessionState::set_expected_build_fingerprint(const std::string& value) {
  
  expected_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.expected_build_fingerprint)
}
inline void SessionState::set_expected_build_fingerprint(std::string&& value) {
  
  expected_build_fingerprint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.SessionState.expected_build_fingerprint)
}
inline void SessionState::set_expected_build_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expected_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.SessionState.expected_build_fingerprint)
}
inline void SessionState::set_expected_build_fingerprint(const char* value, size_t size) {
  
  expected_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.SessionState.expected_build_fingerprint)
}
inline std::string* SessionState::mutable_expected_build_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.SessionState.expected_build_fingerprint)
  return expected_build_fingerprint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionState::release_expected_build_fingerprint() {
  // @@protoc_insertion_point(field_release:apex.proto.SessionState.expected_build_fingerprint)
  
  return expected_build_fingerprint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_allocated_expected_build_fingerprint(std::string* expected_build_fingerprint) {
  if (expected_build_fingerprint != nullptr) {
    
  } else {
    
  }
  expected_build_fingerprint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expected_build_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.SessionState.expected_build_fingerprint)
}

// bool rollback_enabled = 5;
inline void SessionState::clear_rollback_enabled() {
  rollback_enabled_ = false;
}
inline bool SessionState::rollback_enabled() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.rollback_enabled)
  return rollback_enabled_;
}
inline void SessionState::set_rollback_enabled(bool value) {
  
  rollback_enabled_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.rollback_enabled)
}

// bool is_rollback = 6;
inline void SessionState::clear_is_rollback() {
  is_rollback_ = false;
}
inline bool SessionState::is_rollback() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.is_rollback)
  return is_rollback_;
}
inline void SessionState::set_is_rollback(bool value) {
  
  is_rollback_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.is_rollback)
}

// int32 rollback_id = 7;
inline void SessionState::clear_rollback_id() {
  rollback_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SessionState::rollback_id() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.rollback_id)
  return rollback_id_;
}
inline void SessionState::set_rollback_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rollback_id_ = value;
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.rollback_id)
}

// string crashing_native_process = 8;
inline void SessionState::clear_crashing_native_process() {
  crashing_native_process_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionState::crashing_native_process() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.crashing_native_process)
  return crashing_native_process_.GetNoArena();
}
inline void SessionState::set_crashing_native_process(const std::string& value) {
  
  crashing_native_process_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.crashing_native_process)
}
inline void SessionState::set_crashing_native_process(std::string&& value) {
  
  crashing_native_process_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.SessionState.crashing_native_process)
}
inline void SessionState::set_crashing_native_process(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crashing_native_process_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.SessionState.crashing_native_process)
}
inline void SessionState::set_crashing_native_process(const char* value, size_t size) {
  
  crashing_native_process_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.SessionState.crashing_native_process)
}
inline std::string* SessionState::mutable_crashing_native_process() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.SessionState.crashing_native_process)
  return crashing_native_process_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionState::release_crashing_native_process() {
  // @@protoc_insertion_point(field_release:apex.proto.SessionState.crashing_native_process)
  
  return crashing_native_process_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_allocated_crashing_native_process(std::string* crashing_native_process) {
  if (crashing_native_process != nullptr) {
    
  } else {
    
  }
  crashing_native_process_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crashing_native_process);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.SessionState.crashing_native_process)
}

// repeated string apex_names = 9;
inline int SessionState::apex_names_size() const {
  return apex_names_.size();
}
inline void SessionState::clear_apex_names() {
  apex_names_.Clear();
}
inline const std::string& SessionState::apex_names(int index) const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.apex_names)
  return apex_names_.Get(index);
}
inline std::string* SessionState::mutable_apex_names(int index) {
  // @@protoc_insertion_point(field_mutable:apex.proto.SessionState.apex_names)
  return apex_names_.Mutable(index);
}
inline void SessionState::set_apex_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.apex_names)
  apex_names_.Mutable(index)->assign(value);
}
inline void SessionState::set_apex_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.apex_names)
  apex_names_.Mutable(index)->assign(std::move(value));
}
inline void SessionState::set_apex_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  apex_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apex.proto.SessionState.apex_names)
}
inline void SessionState::set_apex_names(int index, const char* value, size_t size) {
  apex_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apex.proto.SessionState.apex_names)
}
inline std::string* SessionState::add_apex_names() {
  // @@protoc_insertion_point(field_add_mutable:apex.proto.SessionState.apex_names)
  return apex_names_.Add();
}
inline void SessionState::add_apex_names(const std::string& value) {
  apex_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apex.proto.SessionState.apex_names)
}
inline void SessionState::add_apex_names(std::string&& value) {
  apex_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apex.proto.SessionState.apex_names)
}
inline void SessionState::add_apex_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  apex_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apex.proto.SessionState.apex_names)
}
inline void SessionState::add_apex_names(const char* value, size_t size) {
  apex_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apex.proto.SessionState.apex_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionState::apex_names() const {
  // @@protoc_insertion_point(field_list:apex.proto.SessionState.apex_names)
  return apex_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionState::mutable_apex_names() {
  // @@protoc_insertion_point(field_mutable_list:apex.proto.SessionState.apex_names)
  return &apex_names_;
}

// string error_message = 10;
inline void SessionState::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionState::error_message() const {
  // @@protoc_insertion_point(field_get:apex.proto.SessionState.error_message)
  return error_message_.GetNoArena();
}
inline void SessionState::set_error_message(const std::string& value) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apex.proto.SessionState.error_message)
}
inline void SessionState::set_error_message(std::string&& value) {
  
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apex.proto.SessionState.error_message)
}
inline void SessionState::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apex.proto.SessionState.error_message)
}
inline void SessionState::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apex.proto.SessionState.error_message)
}
inline std::string* SessionState::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:apex.proto.SessionState.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionState::release_error_message() {
  // @@protoc_insertion_point(field_release:apex.proto.SessionState.error_message)
  
  return error_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionState::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:apex.proto.SessionState.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace apex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apex::proto::SessionState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apex::proto::SessionState_State>() {
  return ::apex::proto::SessionState_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fapex_2fproto_2fsession_5fstate_2eproto
