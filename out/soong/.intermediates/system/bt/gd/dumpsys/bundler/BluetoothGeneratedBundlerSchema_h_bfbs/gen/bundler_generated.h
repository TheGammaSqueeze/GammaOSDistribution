// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BUNDLER_BLUETOOTH_DUMPSYS_H_
#define FLATBUFFERS_GENERATED_BUNDLER_BLUETOOTH_DUMPSYS_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace dumpsys {

struct BundledSchemaMap;
struct BundledSchemaMapBuilder;

struct BundledSchema;
struct BundledSchemaBuilder;

struct BundledSchemaMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BundledSchemaMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DATA = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct BundledSchemaMapBuilder {
  typedef BundledSchemaMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(BundledSchemaMap::VT_NAME, name);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(BundledSchemaMap::VT_DATA, data);
  }
  explicit BundledSchemaMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BundledSchemaMapBuilder &operator=(const BundledSchemaMapBuilder &);
  flatbuffers::Offset<BundledSchemaMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BundledSchemaMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<BundledSchemaMap> CreateBundledSchemaMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  BundledSchemaMapBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<BundledSchemaMap> CreateBundledSchemaMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return bluetooth::dumpsys::CreateBundledSchemaMap(
      _fbb,
      name__,
      data__);
}

struct BundledSchema FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BundledSchemaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_ROOT_NAME = 6,
    VT_MAP = 8
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *root_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ROOT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>> *map() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>> *>(VT_MAP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_ROOT_NAME) &&
           verifier.VerifyString(root_name()) &&
           VerifyOffset(verifier, VT_MAP) &&
           verifier.VerifyVector(map()) &&
           verifier.VerifyVectorOfTables(map()) &&
           verifier.EndTable();
  }
};

struct BundledSchemaBuilder {
  typedef BundledSchema Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(BundledSchema::VT_TITLE, title);
  }
  void add_root_name(flatbuffers::Offset<flatbuffers::String> root_name) {
    fbb_.AddOffset(BundledSchema::VT_ROOT_NAME, root_name);
  }
  void add_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>>> map) {
    fbb_.AddOffset(BundledSchema::VT_MAP, map);
  }
  explicit BundledSchemaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BundledSchemaBuilder &operator=(const BundledSchemaBuilder &);
  flatbuffers::Offset<BundledSchema> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BundledSchema>(end);
    return o;
  }
};

inline flatbuffers::Offset<BundledSchema> CreateBundledSchema(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> root_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>>> map = 0) {
  BundledSchemaBuilder builder_(_fbb);
  builder_.add_map(map);
  builder_.add_root_name(root_name);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<BundledSchema> CreateBundledSchemaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *root_name = nullptr,
    const std::vector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>> *map = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto root_name__ = root_name ? _fbb.CreateString(root_name) : 0;
  auto map__ = map ? _fbb.CreateVector<flatbuffers::Offset<bluetooth::dumpsys::BundledSchemaMap>>(*map) : 0;
  return bluetooth::dumpsys::CreateBundledSchema(
      _fbb,
      title__,
      root_name__,
      map__);
}

inline const bluetooth::dumpsys::BundledSchema *GetBundledSchema(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::dumpsys::BundledSchema>(buf);
}

inline const bluetooth::dumpsys::BundledSchema *GetSizePrefixedBundledSchema(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::dumpsys::BundledSchema>(buf);
}

inline bool VerifyBundledSchemaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::dumpsys::BundledSchema>(nullptr);
}

inline bool VerifySizePrefixedBundledSchemaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::dumpsys::BundledSchema>(nullptr);
}

inline const char *BundledSchemaExtension() {
  return "bfbs";
}

inline void FinishBundledSchemaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::dumpsys::BundledSchema> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBundledSchemaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::dumpsys::BundledSchema> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace dumpsys
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_BUNDLER_BLUETOOTH_DUMPSYS_H_
