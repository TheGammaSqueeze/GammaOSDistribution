// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_
#define FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace hci {

struct AclManagerData;
struct AclManagerDataBuilder;

struct AclManagerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AclManagerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           verifier.EndTable();
  }
};

struct AclManagerDataBuilder {
  typedef AclManagerData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(AclManagerData::VT_TITLE, title);
  }
  explicit AclManagerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AclManagerDataBuilder &operator=(const AclManagerDataBuilder &);
  flatbuffers::Offset<AclManagerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AclManagerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<AclManagerData> CreateAclManagerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0) {
  AclManagerDataBuilder builder_(_fbb);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<AclManagerData> CreateAclManagerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return bluetooth::hci::CreateAclManagerData(
      _fbb,
      title__);
}

inline const bluetooth::hci::AclManagerData *GetAclManagerData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::hci::AclManagerData>(buf);
}

inline const bluetooth::hci::AclManagerData *GetSizePrefixedAclManagerData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::hci::AclManagerData>(buf);
}

inline bool VerifyAclManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::hci::AclManagerData>(nullptr);
}

inline bool VerifySizePrefixedAclManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::hci::AclManagerData>(nullptr);
}

inline void FinishAclManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAclManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace hci
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_HCIACLMANAGER_BLUETOOTH_HCI_H_
