// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WAKELOCKMANAGER_BLUETOOTH_OS_H_
#define FLATBUFFERS_GENERATED_WAKELOCKMANAGER_BLUETOOTH_OS_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace os {

struct WakelockManagerData;
struct WakelockManagerDataBuilder;

struct WakelockManagerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WakelockManagerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_IS_ACQUIRED = 6,
    VT_IS_NATIVE = 8,
    VT_ACQUIRED_COUNT = 10,
    VT_RELEASED_COUNT = 12,
    VT_ACQUIRED_ERROR_COUNT = 14,
    VT_RELEASED_ERROR_COUNT = 16,
    VT_LAST_ACQUIRE_ERROR_CODE = 18,
    VT_LAST_RELEASE_ERROR_CODE = 20,
    VT_LAST_ACQUIRED_TIMESTAMP_MILLIS = 22,
    VT_LAST_RELEASED_TIMESTAMP_MILLIS = 24,
    VT_LAST_INTERVAL_MILLIS = 26,
    VT_MAX_INTERVAL_MILLIS = 28,
    VT_MIN_INTERVAL_MILLIS = 30,
    VT_AVG_INTERVAL_MILLIS = 32,
    VT_TOTAL_INTERVAL_MILLIS = 34,
    VT_TOTAL_TIME_SINCE_RESET_MILLIS = 36
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  bool is_acquired() const {
    return GetField<uint8_t>(VT_IS_ACQUIRED, 0) != 0;
  }
  bool is_native() const {
    return GetField<uint8_t>(VT_IS_NATIVE, 0) != 0;
  }
  int32_t acquired_count() const {
    return GetField<int32_t>(VT_ACQUIRED_COUNT, 0);
  }
  int32_t released_count() const {
    return GetField<int32_t>(VT_RELEASED_COUNT, 0);
  }
  int32_t acquired_error_count() const {
    return GetField<int32_t>(VT_ACQUIRED_ERROR_COUNT, 0);
  }
  int32_t released_error_count() const {
    return GetField<int32_t>(VT_RELEASED_ERROR_COUNT, 0);
  }
  int32_t last_acquire_error_code() const {
    return GetField<int32_t>(VT_LAST_ACQUIRE_ERROR_CODE, 0);
  }
  int32_t last_release_error_code() const {
    return GetField<int32_t>(VT_LAST_RELEASE_ERROR_CODE, 0);
  }
  int64_t last_acquired_timestamp_millis() const {
    return GetField<int64_t>(VT_LAST_ACQUIRED_TIMESTAMP_MILLIS, 0);
  }
  int64_t last_released_timestamp_millis() const {
    return GetField<int64_t>(VT_LAST_RELEASED_TIMESTAMP_MILLIS, 0);
  }
  int64_t last_interval_millis() const {
    return GetField<int64_t>(VT_LAST_INTERVAL_MILLIS, 0);
  }
  int64_t max_interval_millis() const {
    return GetField<int64_t>(VT_MAX_INTERVAL_MILLIS, 0);
  }
  int64_t min_interval_millis() const {
    return GetField<int64_t>(VT_MIN_INTERVAL_MILLIS, 0);
  }
  int64_t avg_interval_millis() const {
    return GetField<int64_t>(VT_AVG_INTERVAL_MILLIS, 0);
  }
  int64_t total_interval_millis() const {
    return GetField<int64_t>(VT_TOTAL_INTERVAL_MILLIS, 0);
  }
  int64_t total_time_since_reset_millis() const {
    return GetField<int64_t>(VT_TOTAL_TIME_SINCE_RESET_MILLIS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<uint8_t>(verifier, VT_IS_ACQUIRED) &&
           VerifyField<uint8_t>(verifier, VT_IS_NATIVE) &&
           VerifyField<int32_t>(verifier, VT_ACQUIRED_COUNT) &&
           VerifyField<int32_t>(verifier, VT_RELEASED_COUNT) &&
           VerifyField<int32_t>(verifier, VT_ACQUIRED_ERROR_COUNT) &&
           VerifyField<int32_t>(verifier, VT_RELEASED_ERROR_COUNT) &&
           VerifyField<int32_t>(verifier, VT_LAST_ACQUIRE_ERROR_CODE) &&
           VerifyField<int32_t>(verifier, VT_LAST_RELEASE_ERROR_CODE) &&
           VerifyField<int64_t>(verifier, VT_LAST_ACQUIRED_TIMESTAMP_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_LAST_RELEASED_TIMESTAMP_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_LAST_INTERVAL_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_MAX_INTERVAL_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_MIN_INTERVAL_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_AVG_INTERVAL_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_TOTAL_INTERVAL_MILLIS) &&
           VerifyField<int64_t>(verifier, VT_TOTAL_TIME_SINCE_RESET_MILLIS) &&
           verifier.EndTable();
  }
};

struct WakelockManagerDataBuilder {
  typedef WakelockManagerData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(WakelockManagerData::VT_TITLE, title);
  }
  void add_is_acquired(bool is_acquired) {
    fbb_.AddElement<uint8_t>(WakelockManagerData::VT_IS_ACQUIRED, static_cast<uint8_t>(is_acquired), 0);
  }
  void add_is_native(bool is_native) {
    fbb_.AddElement<uint8_t>(WakelockManagerData::VT_IS_NATIVE, static_cast<uint8_t>(is_native), 0);
  }
  void add_acquired_count(int32_t acquired_count) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_ACQUIRED_COUNT, acquired_count, 0);
  }
  void add_released_count(int32_t released_count) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_RELEASED_COUNT, released_count, 0);
  }
  void add_acquired_error_count(int32_t acquired_error_count) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_ACQUIRED_ERROR_COUNT, acquired_error_count, 0);
  }
  void add_released_error_count(int32_t released_error_count) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_RELEASED_ERROR_COUNT, released_error_count, 0);
  }
  void add_last_acquire_error_code(int32_t last_acquire_error_code) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_LAST_ACQUIRE_ERROR_CODE, last_acquire_error_code, 0);
  }
  void add_last_release_error_code(int32_t last_release_error_code) {
    fbb_.AddElement<int32_t>(WakelockManagerData::VT_LAST_RELEASE_ERROR_CODE, last_release_error_code, 0);
  }
  void add_last_acquired_timestamp_millis(int64_t last_acquired_timestamp_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_LAST_ACQUIRED_TIMESTAMP_MILLIS, last_acquired_timestamp_millis, 0);
  }
  void add_last_released_timestamp_millis(int64_t last_released_timestamp_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_LAST_RELEASED_TIMESTAMP_MILLIS, last_released_timestamp_millis, 0);
  }
  void add_last_interval_millis(int64_t last_interval_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_LAST_INTERVAL_MILLIS, last_interval_millis, 0);
  }
  void add_max_interval_millis(int64_t max_interval_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_MAX_INTERVAL_MILLIS, max_interval_millis, 0);
  }
  void add_min_interval_millis(int64_t min_interval_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_MIN_INTERVAL_MILLIS, min_interval_millis, 0);
  }
  void add_avg_interval_millis(int64_t avg_interval_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_AVG_INTERVAL_MILLIS, avg_interval_millis, 0);
  }
  void add_total_interval_millis(int64_t total_interval_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_TOTAL_INTERVAL_MILLIS, total_interval_millis, 0);
  }
  void add_total_time_since_reset_millis(int64_t total_time_since_reset_millis) {
    fbb_.AddElement<int64_t>(WakelockManagerData::VT_TOTAL_TIME_SINCE_RESET_MILLIS, total_time_since_reset_millis, 0);
  }
  explicit WakelockManagerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WakelockManagerDataBuilder &operator=(const WakelockManagerDataBuilder &);
  flatbuffers::Offset<WakelockManagerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WakelockManagerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<WakelockManagerData> CreateWakelockManagerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    bool is_acquired = false,
    bool is_native = false,
    int32_t acquired_count = 0,
    int32_t released_count = 0,
    int32_t acquired_error_count = 0,
    int32_t released_error_count = 0,
    int32_t last_acquire_error_code = 0,
    int32_t last_release_error_code = 0,
    int64_t last_acquired_timestamp_millis = 0,
    int64_t last_released_timestamp_millis = 0,
    int64_t last_interval_millis = 0,
    int64_t max_interval_millis = 0,
    int64_t min_interval_millis = 0,
    int64_t avg_interval_millis = 0,
    int64_t total_interval_millis = 0,
    int64_t total_time_since_reset_millis = 0) {
  WakelockManagerDataBuilder builder_(_fbb);
  builder_.add_total_time_since_reset_millis(total_time_since_reset_millis);
  builder_.add_total_interval_millis(total_interval_millis);
  builder_.add_avg_interval_millis(avg_interval_millis);
  builder_.add_min_interval_millis(min_interval_millis);
  builder_.add_max_interval_millis(max_interval_millis);
  builder_.add_last_interval_millis(last_interval_millis);
  builder_.add_last_released_timestamp_millis(last_released_timestamp_millis);
  builder_.add_last_acquired_timestamp_millis(last_acquired_timestamp_millis);
  builder_.add_last_release_error_code(last_release_error_code);
  builder_.add_last_acquire_error_code(last_acquire_error_code);
  builder_.add_released_error_count(released_error_count);
  builder_.add_acquired_error_count(acquired_error_count);
  builder_.add_released_count(released_count);
  builder_.add_acquired_count(acquired_count);
  builder_.add_title(title);
  builder_.add_is_native(is_native);
  builder_.add_is_acquired(is_acquired);
  return builder_.Finish();
}

inline flatbuffers::Offset<WakelockManagerData> CreateWakelockManagerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    bool is_acquired = false,
    bool is_native = false,
    int32_t acquired_count = 0,
    int32_t released_count = 0,
    int32_t acquired_error_count = 0,
    int32_t released_error_count = 0,
    int32_t last_acquire_error_code = 0,
    int32_t last_release_error_code = 0,
    int64_t last_acquired_timestamp_millis = 0,
    int64_t last_released_timestamp_millis = 0,
    int64_t last_interval_millis = 0,
    int64_t max_interval_millis = 0,
    int64_t min_interval_millis = 0,
    int64_t avg_interval_millis = 0,
    int64_t total_interval_millis = 0,
    int64_t total_time_since_reset_millis = 0) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return bluetooth::os::CreateWakelockManagerData(
      _fbb,
      title__,
      is_acquired,
      is_native,
      acquired_count,
      released_count,
      acquired_error_count,
      released_error_count,
      last_acquire_error_code,
      last_release_error_code,
      last_acquired_timestamp_millis,
      last_released_timestamp_millis,
      last_interval_millis,
      max_interval_millis,
      min_interval_millis,
      avg_interval_millis,
      total_interval_millis,
      total_time_since_reset_millis);
}

inline const bluetooth::os::WakelockManagerData *GetWakelockManagerData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::os::WakelockManagerData>(buf);
}

inline const bluetooth::os::WakelockManagerData *GetSizePrefixedWakelockManagerData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::os::WakelockManagerData>(buf);
}

inline bool VerifyWakelockManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::os::WakelockManagerData>(nullptr);
}

inline bool VerifySizePrefixedWakelockManagerDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::os::WakelockManagerData>(nullptr);
}

inline void FinishWakelockManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::os::WakelockManagerData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWakelockManagerDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::os::WakelockManagerData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace os
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_WAKELOCKMANAGER_BLUETOOTH_OS_H_
