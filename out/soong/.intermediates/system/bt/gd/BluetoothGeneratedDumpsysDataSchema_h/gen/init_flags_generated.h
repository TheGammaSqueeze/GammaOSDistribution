// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_
#define FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace common {

struct InitFlagsData;
struct InitFlagsDataBuilder;

struct InitFlagsData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InitFlagsDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_GD_ADVERTISING_ENABLED = 6,
    VT_GD_SCANNING_ENABLED = 8,
    VT_GD_SECURITY_ENABLED = 10,
    VT_GD_ACL_ENABLED = 12,
    VT_GD_HCI_ENABLED = 14,
    VT_GD_CONTROLLER_ENABLED = 16,
    VT_GD_CORE_ENABLED = 18,
    VT_BTAA_HCI_LOG_ENABLED = 20
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  bool gd_advertising_enabled() const {
    return GetField<uint8_t>(VT_GD_ADVERTISING_ENABLED, 0) != 0;
  }
  bool gd_scanning_enabled() const {
    return GetField<uint8_t>(VT_GD_SCANNING_ENABLED, 0) != 0;
  }
  bool gd_security_enabled() const {
    return GetField<uint8_t>(VT_GD_SECURITY_ENABLED, 0) != 0;
  }
  bool gd_acl_enabled() const {
    return GetField<uint8_t>(VT_GD_ACL_ENABLED, 0) != 0;
  }
  bool gd_hci_enabled() const {
    return GetField<uint8_t>(VT_GD_HCI_ENABLED, 0) != 0;
  }
  bool gd_controller_enabled() const {
    return GetField<uint8_t>(VT_GD_CONTROLLER_ENABLED, 0) != 0;
  }
  bool gd_core_enabled() const {
    return GetField<uint8_t>(VT_GD_CORE_ENABLED, 0) != 0;
  }
  bool btaa_hci_log_enabled() const {
    return GetField<uint8_t>(VT_BTAA_HCI_LOG_ENABLED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<uint8_t>(verifier, VT_GD_ADVERTISING_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_SCANNING_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_SECURITY_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_ACL_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_HCI_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_CONTROLLER_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_GD_CORE_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_BTAA_HCI_LOG_ENABLED) &&
           verifier.EndTable();
  }
};

struct InitFlagsDataBuilder {
  typedef InitFlagsData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(InitFlagsData::VT_TITLE, title);
  }
  void add_gd_advertising_enabled(bool gd_advertising_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_ADVERTISING_ENABLED, static_cast<uint8_t>(gd_advertising_enabled), 0);
  }
  void add_gd_scanning_enabled(bool gd_scanning_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_SCANNING_ENABLED, static_cast<uint8_t>(gd_scanning_enabled), 0);
  }
  void add_gd_security_enabled(bool gd_security_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_SECURITY_ENABLED, static_cast<uint8_t>(gd_security_enabled), 0);
  }
  void add_gd_acl_enabled(bool gd_acl_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_ACL_ENABLED, static_cast<uint8_t>(gd_acl_enabled), 0);
  }
  void add_gd_hci_enabled(bool gd_hci_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_HCI_ENABLED, static_cast<uint8_t>(gd_hci_enabled), 0);
  }
  void add_gd_controller_enabled(bool gd_controller_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_CONTROLLER_ENABLED, static_cast<uint8_t>(gd_controller_enabled), 0);
  }
  void add_gd_core_enabled(bool gd_core_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_GD_CORE_ENABLED, static_cast<uint8_t>(gd_core_enabled), 0);
  }
  void add_btaa_hci_log_enabled(bool btaa_hci_log_enabled) {
    fbb_.AddElement<uint8_t>(InitFlagsData::VT_BTAA_HCI_LOG_ENABLED, static_cast<uint8_t>(btaa_hci_log_enabled), 0);
  }
  explicit InitFlagsDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InitFlagsDataBuilder &operator=(const InitFlagsDataBuilder &);
  flatbuffers::Offset<InitFlagsData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InitFlagsData>(end);
    return o;
  }
};

inline flatbuffers::Offset<InitFlagsData> CreateInitFlagsData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    bool gd_advertising_enabled = false,
    bool gd_scanning_enabled = false,
    bool gd_security_enabled = false,
    bool gd_acl_enabled = false,
    bool gd_hci_enabled = false,
    bool gd_controller_enabled = false,
    bool gd_core_enabled = false,
    bool btaa_hci_log_enabled = false) {
  InitFlagsDataBuilder builder_(_fbb);
  builder_.add_title(title);
  builder_.add_btaa_hci_log_enabled(btaa_hci_log_enabled);
  builder_.add_gd_core_enabled(gd_core_enabled);
  builder_.add_gd_controller_enabled(gd_controller_enabled);
  builder_.add_gd_hci_enabled(gd_hci_enabled);
  builder_.add_gd_acl_enabled(gd_acl_enabled);
  builder_.add_gd_security_enabled(gd_security_enabled);
  builder_.add_gd_scanning_enabled(gd_scanning_enabled);
  builder_.add_gd_advertising_enabled(gd_advertising_enabled);
  return builder_.Finish();
}

inline flatbuffers::Offset<InitFlagsData> CreateInitFlagsDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    bool gd_advertising_enabled = false,
    bool gd_scanning_enabled = false,
    bool gd_security_enabled = false,
    bool gd_acl_enabled = false,
    bool gd_hci_enabled = false,
    bool gd_controller_enabled = false,
    bool gd_core_enabled = false,
    bool btaa_hci_log_enabled = false) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return bluetooth::common::CreateInitFlagsData(
      _fbb,
      title__,
      gd_advertising_enabled,
      gd_scanning_enabled,
      gd_security_enabled,
      gd_acl_enabled,
      gd_hci_enabled,
      gd_controller_enabled,
      gd_core_enabled,
      btaa_hci_log_enabled);
}

inline const bluetooth::common::InitFlagsData *GetInitFlagsData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::common::InitFlagsData>(buf);
}

inline const bluetooth::common::InitFlagsData *GetSizePrefixedInitFlagsData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::common::InitFlagsData>(buf);
}

inline bool VerifyInitFlagsDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::common::InitFlagsData>(nullptr);
}

inline bool VerifySizePrefixedInitFlagsDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::common::InitFlagsData>(nullptr);
}

inline void FinishInitFlagsDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInitFlagsDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace common
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_INITFLAGS_BLUETOOTH_COMMON_H_
