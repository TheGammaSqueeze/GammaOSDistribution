// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DUMPSYSDATA_BLUETOOTH_H_
#define FLATBUFFERS_GENERATED_DUMPSYSDATA_BLUETOOTH_H_

#include "flatbuffers/flatbuffers.h"

#include "activity_attribution_generated.h"
#include "init_flags_generated.h"
#include "hci_acl_manager_generated.h"
#include "l2cap_classic_module_generated.h"
#include "module_unittest_generated.h"
#include "wakelock_manager_generated.h"
#include "dumpsys_generated.h"

namespace bluetooth {

struct DumpsysData;
struct DumpsysDataBuilder;

struct DumpsysData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpsysDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_INIT_FLAGS = 6,
    VT_WAKELOCK_MANAGER_DATA = 8,
    VT_SHIM_DUMPSYS_DATA = 10,
    VT_L2CAP_CLASSIC_DUMPSYS_DATA = 12,
    VT_HCI_ACL_MANAGER_DUMPSYS_DATA = 14,
    VT_MODULE_UNITTEST_DATA = 16,
    VT_ACTIVITY_ATTRIBUTION_DUMPSYS_DATA = 18
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const bluetooth::common::InitFlagsData *init_flags() const {
    return GetPointer<const bluetooth::common::InitFlagsData *>(VT_INIT_FLAGS);
  }
  const bluetooth::os::WakelockManagerData *wakelock_manager_data() const {
    return GetPointer<const bluetooth::os::WakelockManagerData *>(VT_WAKELOCK_MANAGER_DATA);
  }
  const bluetooth::shim::DumpsysModuleData *shim_dumpsys_data() const {
    return GetPointer<const bluetooth::shim::DumpsysModuleData *>(VT_SHIM_DUMPSYS_DATA);
  }
  const bluetooth::l2cap::classic::L2capClassicModuleData *l2cap_classic_dumpsys_data() const {
    return GetPointer<const bluetooth::l2cap::classic::L2capClassicModuleData *>(VT_L2CAP_CLASSIC_DUMPSYS_DATA);
  }
  const bluetooth::hci::AclManagerData *hci_acl_manager_dumpsys_data() const {
    return GetPointer<const bluetooth::hci::AclManagerData *>(VT_HCI_ACL_MANAGER_DUMPSYS_DATA);
  }
  const bluetooth::ModuleUnitTestData *module_unittest_data() const {
    return GetPointer<const bluetooth::ModuleUnitTestData *>(VT_MODULE_UNITTEST_DATA);
  }
  const bluetooth::activity_attribution::ActivityAttributionData *activity_attribution_dumpsys_data() const {
    return GetPointer<const bluetooth::activity_attribution::ActivityAttributionData *>(VT_ACTIVITY_ATTRIBUTION_DUMPSYS_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_INIT_FLAGS) &&
           verifier.VerifyTable(init_flags()) &&
           VerifyOffset(verifier, VT_WAKELOCK_MANAGER_DATA) &&
           verifier.VerifyTable(wakelock_manager_data()) &&
           VerifyOffset(verifier, VT_SHIM_DUMPSYS_DATA) &&
           verifier.VerifyTable(shim_dumpsys_data()) &&
           VerifyOffset(verifier, VT_L2CAP_CLASSIC_DUMPSYS_DATA) &&
           verifier.VerifyTable(l2cap_classic_dumpsys_data()) &&
           VerifyOffset(verifier, VT_HCI_ACL_MANAGER_DUMPSYS_DATA) &&
           verifier.VerifyTable(hci_acl_manager_dumpsys_data()) &&
           VerifyOffset(verifier, VT_MODULE_UNITTEST_DATA) &&
           verifier.VerifyTable(module_unittest_data()) &&
           VerifyOffset(verifier, VT_ACTIVITY_ATTRIBUTION_DUMPSYS_DATA) &&
           verifier.VerifyTable(activity_attribution_dumpsys_data()) &&
           verifier.EndTable();
  }
};

struct DumpsysDataBuilder {
  typedef DumpsysData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(DumpsysData::VT_TITLE, title);
  }
  void add_init_flags(flatbuffers::Offset<bluetooth::common::InitFlagsData> init_flags) {
    fbb_.AddOffset(DumpsysData::VT_INIT_FLAGS, init_flags);
  }
  void add_wakelock_manager_data(flatbuffers::Offset<bluetooth::os::WakelockManagerData> wakelock_manager_data) {
    fbb_.AddOffset(DumpsysData::VT_WAKELOCK_MANAGER_DATA, wakelock_manager_data);
  }
  void add_shim_dumpsys_data(flatbuffers::Offset<bluetooth::shim::DumpsysModuleData> shim_dumpsys_data) {
    fbb_.AddOffset(DumpsysData::VT_SHIM_DUMPSYS_DATA, shim_dumpsys_data);
  }
  void add_l2cap_classic_dumpsys_data(flatbuffers::Offset<bluetooth::l2cap::classic::L2capClassicModuleData> l2cap_classic_dumpsys_data) {
    fbb_.AddOffset(DumpsysData::VT_L2CAP_CLASSIC_DUMPSYS_DATA, l2cap_classic_dumpsys_data);
  }
  void add_hci_acl_manager_dumpsys_data(flatbuffers::Offset<bluetooth::hci::AclManagerData> hci_acl_manager_dumpsys_data) {
    fbb_.AddOffset(DumpsysData::VT_HCI_ACL_MANAGER_DUMPSYS_DATA, hci_acl_manager_dumpsys_data);
  }
  void add_module_unittest_data(flatbuffers::Offset<bluetooth::ModuleUnitTestData> module_unittest_data) {
    fbb_.AddOffset(DumpsysData::VT_MODULE_UNITTEST_DATA, module_unittest_data);
  }
  void add_activity_attribution_dumpsys_data(flatbuffers::Offset<bluetooth::activity_attribution::ActivityAttributionData> activity_attribution_dumpsys_data) {
    fbb_.AddOffset(DumpsysData::VT_ACTIVITY_ATTRIBUTION_DUMPSYS_DATA, activity_attribution_dumpsys_data);
  }
  explicit DumpsysDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DumpsysDataBuilder &operator=(const DumpsysDataBuilder &);
  flatbuffers::Offset<DumpsysData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpsysData>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpsysData> CreateDumpsysData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> init_flags = 0,
    flatbuffers::Offset<bluetooth::os::WakelockManagerData> wakelock_manager_data = 0,
    flatbuffers::Offset<bluetooth::shim::DumpsysModuleData> shim_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::l2cap::classic::L2capClassicModuleData> l2cap_classic_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> hci_acl_manager_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::ModuleUnitTestData> module_unittest_data = 0,
    flatbuffers::Offset<bluetooth::activity_attribution::ActivityAttributionData> activity_attribution_dumpsys_data = 0) {
  DumpsysDataBuilder builder_(_fbb);
  builder_.add_activity_attribution_dumpsys_data(activity_attribution_dumpsys_data);
  builder_.add_module_unittest_data(module_unittest_data);
  builder_.add_hci_acl_manager_dumpsys_data(hci_acl_manager_dumpsys_data);
  builder_.add_l2cap_classic_dumpsys_data(l2cap_classic_dumpsys_data);
  builder_.add_shim_dumpsys_data(shim_dumpsys_data);
  builder_.add_wakelock_manager_data(wakelock_manager_data);
  builder_.add_init_flags(init_flags);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpsysData> CreateDumpsysDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    flatbuffers::Offset<bluetooth::common::InitFlagsData> init_flags = 0,
    flatbuffers::Offset<bluetooth::os::WakelockManagerData> wakelock_manager_data = 0,
    flatbuffers::Offset<bluetooth::shim::DumpsysModuleData> shim_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::l2cap::classic::L2capClassicModuleData> l2cap_classic_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::hci::AclManagerData> hci_acl_manager_dumpsys_data = 0,
    flatbuffers::Offset<bluetooth::ModuleUnitTestData> module_unittest_data = 0,
    flatbuffers::Offset<bluetooth::activity_attribution::ActivityAttributionData> activity_attribution_dumpsys_data = 0) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return bluetooth::CreateDumpsysData(
      _fbb,
      title__,
      init_flags,
      wakelock_manager_data,
      shim_dumpsys_data,
      l2cap_classic_dumpsys_data,
      hci_acl_manager_dumpsys_data,
      module_unittest_data,
      activity_attribution_dumpsys_data);
}

inline const bluetooth::DumpsysData *GetDumpsysData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::DumpsysData>(buf);
}

inline const bluetooth::DumpsysData *GetSizePrefixedDumpsysData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::DumpsysData>(buf);
}

inline bool VerifyDumpsysDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::DumpsysData>(nullptr);
}

inline bool VerifySizePrefixedDumpsysDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::DumpsysData>(nullptr);
}

inline void FinishDumpsysDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::DumpsysData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpsysDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::DumpsysData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_DUMPSYSDATA_BLUETOOTH_H_
