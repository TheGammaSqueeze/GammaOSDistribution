// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DUMPSYS_BLUETOOTH_SHIM_H_
#define FLATBUFFERS_GENERATED_DUMPSYS_BLUETOOTH_SHIM_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace shim {

struct ExamplePiecemealTable;
struct ExamplePiecemealTableBuilder;

struct ExampleInstantTable;
struct ExampleInstantTableBuilder;

struct DumpsysModuleData;
struct DumpsysModuleDataBuilder;

struct ExamplePiecemealTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExamplePiecemealTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXAMPLE_STRING = 4,
    VT_EXAMPLE_INT = 6,
    VT_EXAMPLE_FLOAT = 8
  };
  const flatbuffers::String *example_string() const {
    return GetPointer<const flatbuffers::String *>(VT_EXAMPLE_STRING);
  }
  int32_t example_int() const {
    return GetField<int32_t>(VT_EXAMPLE_INT, 0);
  }
  float example_float() const {
    return GetField<float>(VT_EXAMPLE_FLOAT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EXAMPLE_STRING) &&
           verifier.VerifyString(example_string()) &&
           VerifyField<int32_t>(verifier, VT_EXAMPLE_INT) &&
           VerifyField<float>(verifier, VT_EXAMPLE_FLOAT) &&
           verifier.EndTable();
  }
};

struct ExamplePiecemealTableBuilder {
  typedef ExamplePiecemealTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_example_string(flatbuffers::Offset<flatbuffers::String> example_string) {
    fbb_.AddOffset(ExamplePiecemealTable::VT_EXAMPLE_STRING, example_string);
  }
  void add_example_int(int32_t example_int) {
    fbb_.AddElement<int32_t>(ExamplePiecemealTable::VT_EXAMPLE_INT, example_int, 0);
  }
  void add_example_float(float example_float) {
    fbb_.AddElement<float>(ExamplePiecemealTable::VT_EXAMPLE_FLOAT, example_float, 0.0f);
  }
  explicit ExamplePiecemealTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ExamplePiecemealTableBuilder &operator=(const ExamplePiecemealTableBuilder &);
  flatbuffers::Offset<ExamplePiecemealTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExamplePiecemealTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExamplePiecemealTable> CreateExamplePiecemealTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> example_string = 0,
    int32_t example_int = 0,
    float example_float = 0.0f) {
  ExamplePiecemealTableBuilder builder_(_fbb);
  builder_.add_example_float(example_float);
  builder_.add_example_int(example_int);
  builder_.add_example_string(example_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<ExamplePiecemealTable> CreateExamplePiecemealTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *example_string = nullptr,
    int32_t example_int = 0,
    float example_float = 0.0f) {
  auto example_string__ = example_string ? _fbb.CreateString(example_string) : 0;
  return bluetooth::shim::CreateExamplePiecemealTable(
      _fbb,
      example_string__,
      example_int,
      example_float);
}

struct ExampleInstantTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExampleInstantTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXAMPLE_STRING = 4,
    VT_EXAMPLE_INT = 6,
    VT_EXAMPLE_FLOAT = 8
  };
  const flatbuffers::String *example_string() const {
    return GetPointer<const flatbuffers::String *>(VT_EXAMPLE_STRING);
  }
  int32_t example_int() const {
    return GetField<int32_t>(VT_EXAMPLE_INT, 0);
  }
  float example_float() const {
    return GetField<float>(VT_EXAMPLE_FLOAT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EXAMPLE_STRING) &&
           verifier.VerifyString(example_string()) &&
           VerifyField<int32_t>(verifier, VT_EXAMPLE_INT) &&
           VerifyField<float>(verifier, VT_EXAMPLE_FLOAT) &&
           verifier.EndTable();
  }
};

struct ExampleInstantTableBuilder {
  typedef ExampleInstantTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_example_string(flatbuffers::Offset<flatbuffers::String> example_string) {
    fbb_.AddOffset(ExampleInstantTable::VT_EXAMPLE_STRING, example_string);
  }
  void add_example_int(int32_t example_int) {
    fbb_.AddElement<int32_t>(ExampleInstantTable::VT_EXAMPLE_INT, example_int, 0);
  }
  void add_example_float(float example_float) {
    fbb_.AddElement<float>(ExampleInstantTable::VT_EXAMPLE_FLOAT, example_float, 0.0f);
  }
  explicit ExampleInstantTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ExampleInstantTableBuilder &operator=(const ExampleInstantTableBuilder &);
  flatbuffers::Offset<ExampleInstantTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExampleInstantTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExampleInstantTable> CreateExampleInstantTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> example_string = 0,
    int32_t example_int = 0,
    float example_float = 0.0f) {
  ExampleInstantTableBuilder builder_(_fbb);
  builder_.add_example_float(example_float);
  builder_.add_example_int(example_int);
  builder_.add_example_string(example_string);
  return builder_.Finish();
}

inline flatbuffers::Offset<ExampleInstantTable> CreateExampleInstantTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *example_string = nullptr,
    int32_t example_int = 0,
    float example_float = 0.0f) {
  auto example_string__ = example_string ? _fbb.CreateString(example_string) : 0;
  return bluetooth::shim::CreateExampleInstantTable(
      _fbb,
      example_string__,
      example_int,
      example_float);
}

struct DumpsysModuleData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DumpsysModuleDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_NUMBER_OF_BUNDLED_SCHEMAS = 6,
    VT_EXAMPLE_PIECEMEAL_TABLE = 8,
    VT_EXAMPLE_INSTANT_TABLE = 10
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  int32_t number_of_bundled_schemas() const {
    return GetField<int32_t>(VT_NUMBER_OF_BUNDLED_SCHEMAS, 0);
  }
  const bluetooth::shim::ExamplePiecemealTable *example_piecemeal_table() const {
    return GetPointer<const bluetooth::shim::ExamplePiecemealTable *>(VT_EXAMPLE_PIECEMEAL_TABLE);
  }
  const bluetooth::shim::ExampleInstantTable *example_instant_table() const {
    return GetPointer<const bluetooth::shim::ExampleInstantTable *>(VT_EXAMPLE_INSTANT_TABLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyField<int32_t>(verifier, VT_NUMBER_OF_BUNDLED_SCHEMAS) &&
           VerifyOffset(verifier, VT_EXAMPLE_PIECEMEAL_TABLE) &&
           verifier.VerifyTable(example_piecemeal_table()) &&
           VerifyOffset(verifier, VT_EXAMPLE_INSTANT_TABLE) &&
           verifier.VerifyTable(example_instant_table()) &&
           verifier.EndTable();
  }
};

struct DumpsysModuleDataBuilder {
  typedef DumpsysModuleData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(DumpsysModuleData::VT_TITLE, title);
  }
  void add_number_of_bundled_schemas(int32_t number_of_bundled_schemas) {
    fbb_.AddElement<int32_t>(DumpsysModuleData::VT_NUMBER_OF_BUNDLED_SCHEMAS, number_of_bundled_schemas, 0);
  }
  void add_example_piecemeal_table(flatbuffers::Offset<bluetooth::shim::ExamplePiecemealTable> example_piecemeal_table) {
    fbb_.AddOffset(DumpsysModuleData::VT_EXAMPLE_PIECEMEAL_TABLE, example_piecemeal_table);
  }
  void add_example_instant_table(flatbuffers::Offset<bluetooth::shim::ExampleInstantTable> example_instant_table) {
    fbb_.AddOffset(DumpsysModuleData::VT_EXAMPLE_INSTANT_TABLE, example_instant_table);
  }
  explicit DumpsysModuleDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DumpsysModuleDataBuilder &operator=(const DumpsysModuleDataBuilder &);
  flatbuffers::Offset<DumpsysModuleData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DumpsysModuleData>(end);
    return o;
  }
};

inline flatbuffers::Offset<DumpsysModuleData> CreateDumpsysModuleData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    int32_t number_of_bundled_schemas = 0,
    flatbuffers::Offset<bluetooth::shim::ExamplePiecemealTable> example_piecemeal_table = 0,
    flatbuffers::Offset<bluetooth::shim::ExampleInstantTable> example_instant_table = 0) {
  DumpsysModuleDataBuilder builder_(_fbb);
  builder_.add_example_instant_table(example_instant_table);
  builder_.add_example_piecemeal_table(example_piecemeal_table);
  builder_.add_number_of_bundled_schemas(number_of_bundled_schemas);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<DumpsysModuleData> CreateDumpsysModuleDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    int32_t number_of_bundled_schemas = 0,
    flatbuffers::Offset<bluetooth::shim::ExamplePiecemealTable> example_piecemeal_table = 0,
    flatbuffers::Offset<bluetooth::shim::ExampleInstantTable> example_instant_table = 0) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  return bluetooth::shim::CreateDumpsysModuleData(
      _fbb,
      title__,
      number_of_bundled_schemas,
      example_piecemeal_table,
      example_instant_table);
}

inline const bluetooth::shim::DumpsysModuleData *GetDumpsysModuleData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::shim::DumpsysModuleData>(buf);
}

inline const bluetooth::shim::DumpsysModuleData *GetSizePrefixedDumpsysModuleData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::shim::DumpsysModuleData>(buf);
}

inline bool VerifyDumpsysModuleDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::shim::DumpsysModuleData>(nullptr);
}

inline bool VerifySizePrefixedDumpsysModuleDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::shim::DumpsysModuleData>(nullptr);
}

inline void FinishDumpsysModuleDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::shim::DumpsysModuleData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpsysModuleDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::shim::DumpsysModuleData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace shim
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_DUMPSYS_BLUETOOTH_SHIM_H_
