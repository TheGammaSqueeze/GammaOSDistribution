// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIVITYATTRIBUTION_BLUETOOTH_ACTIVITY_ATTRIBUTION_H_
#define FLATBUFFERS_GENERATED_ACTIVITYATTRIBUTION_BLUETOOTH_ACTIVITY_ATTRIBUTION_H_

#include "flatbuffers/flatbuffers.h"

namespace bluetooth {
namespace activity_attribution {

struct WakeupEntry;
struct WakeupEntryBuilder;

struct DeviceActivityAggregationEntry;
struct DeviceActivityAggregationEntryBuilder;

struct ActivityAttributionData;
struct ActivityAttributionDataBuilder;

struct WakeupEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WakeupEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WAKEUP_TIME = 4,
    VT_ACTIVITY = 6,
    VT_ADDRESS = 8
  };
  const flatbuffers::String *wakeup_time() const {
    return GetPointer<const flatbuffers::String *>(VT_WAKEUP_TIME);
  }
  const flatbuffers::String *activity() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVITY);
  }
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WAKEUP_TIME) &&
           verifier.VerifyString(wakeup_time()) &&
           VerifyOffset(verifier, VT_ACTIVITY) &&
           verifier.VerifyString(activity()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           verifier.EndTable();
  }
};

struct WakeupEntryBuilder {
  typedef WakeupEntry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wakeup_time(flatbuffers::Offset<flatbuffers::String> wakeup_time) {
    fbb_.AddOffset(WakeupEntry::VT_WAKEUP_TIME, wakeup_time);
  }
  void add_activity(flatbuffers::Offset<flatbuffers::String> activity) {
    fbb_.AddOffset(WakeupEntry::VT_ACTIVITY, activity);
  }
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(WakeupEntry::VT_ADDRESS, address);
  }
  explicit WakeupEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WakeupEntryBuilder &operator=(const WakeupEntryBuilder &);
  flatbuffers::Offset<WakeupEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WakeupEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<WakeupEntry> CreateWakeupEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> wakeup_time = 0,
    flatbuffers::Offset<flatbuffers::String> activity = 0,
    flatbuffers::Offset<flatbuffers::String> address = 0) {
  WakeupEntryBuilder builder_(_fbb);
  builder_.add_address(address);
  builder_.add_activity(activity);
  builder_.add_wakeup_time(wakeup_time);
  return builder_.Finish();
}

inline flatbuffers::Offset<WakeupEntry> CreateWakeupEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *wakeup_time = nullptr,
    const char *activity = nullptr,
    const char *address = nullptr) {
  auto wakeup_time__ = wakeup_time ? _fbb.CreateString(wakeup_time) : 0;
  auto activity__ = activity ? _fbb.CreateString(activity) : 0;
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return bluetooth::activity_attribution::CreateWakeupEntry(
      _fbb,
      wakeup_time__,
      activity__,
      address__);
}

struct DeviceActivityAggregationEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeviceActivityAggregationEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_ACTIVITY = 6,
    VT_WAKEUP_COUNT = 8,
    VT_BYTE_COUNT = 10,
    VT_WAKELOCK_DURATION_MS = 12,
    VT_CREATION_TIME = 14
  };
  const flatbuffers::String *address() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDRESS);
  }
  const flatbuffers::String *activity() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVITY);
  }
  int32_t wakeup_count() const {
    return GetField<int32_t>(VT_WAKEUP_COUNT, 0);
  }
  int32_t byte_count() const {
    return GetField<int32_t>(VT_BYTE_COUNT, 0);
  }
  int32_t wakelock_duration_ms() const {
    return GetField<int32_t>(VT_WAKELOCK_DURATION_MS, 0);
  }
  const flatbuffers::String *creation_time() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATION_TIME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_ACTIVITY) &&
           verifier.VerifyString(activity()) &&
           VerifyField<int32_t>(verifier, VT_WAKEUP_COUNT) &&
           VerifyField<int32_t>(verifier, VT_BYTE_COUNT) &&
           VerifyField<int32_t>(verifier, VT_WAKELOCK_DURATION_MS) &&
           VerifyOffset(verifier, VT_CREATION_TIME) &&
           verifier.VerifyString(creation_time()) &&
           verifier.EndTable();
  }
};

struct DeviceActivityAggregationEntryBuilder {
  typedef DeviceActivityAggregationEntry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) {
    fbb_.AddOffset(DeviceActivityAggregationEntry::VT_ADDRESS, address);
  }
  void add_activity(flatbuffers::Offset<flatbuffers::String> activity) {
    fbb_.AddOffset(DeviceActivityAggregationEntry::VT_ACTIVITY, activity);
  }
  void add_wakeup_count(int32_t wakeup_count) {
    fbb_.AddElement<int32_t>(DeviceActivityAggregationEntry::VT_WAKEUP_COUNT, wakeup_count, 0);
  }
  void add_byte_count(int32_t byte_count) {
    fbb_.AddElement<int32_t>(DeviceActivityAggregationEntry::VT_BYTE_COUNT, byte_count, 0);
  }
  void add_wakelock_duration_ms(int32_t wakelock_duration_ms) {
    fbb_.AddElement<int32_t>(DeviceActivityAggregationEntry::VT_WAKELOCK_DURATION_MS, wakelock_duration_ms, 0);
  }
  void add_creation_time(flatbuffers::Offset<flatbuffers::String> creation_time) {
    fbb_.AddOffset(DeviceActivityAggregationEntry::VT_CREATION_TIME, creation_time);
  }
  explicit DeviceActivityAggregationEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DeviceActivityAggregationEntryBuilder &operator=(const DeviceActivityAggregationEntryBuilder &);
  flatbuffers::Offset<DeviceActivityAggregationEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DeviceActivityAggregationEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<DeviceActivityAggregationEntry> CreateDeviceActivityAggregationEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> address = 0,
    flatbuffers::Offset<flatbuffers::String> activity = 0,
    int32_t wakeup_count = 0,
    int32_t byte_count = 0,
    int32_t wakelock_duration_ms = 0,
    flatbuffers::Offset<flatbuffers::String> creation_time = 0) {
  DeviceActivityAggregationEntryBuilder builder_(_fbb);
  builder_.add_creation_time(creation_time);
  builder_.add_wakelock_duration_ms(wakelock_duration_ms);
  builder_.add_byte_count(byte_count);
  builder_.add_wakeup_count(wakeup_count);
  builder_.add_activity(activity);
  builder_.add_address(address);
  return builder_.Finish();
}

inline flatbuffers::Offset<DeviceActivityAggregationEntry> CreateDeviceActivityAggregationEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    const char *activity = nullptr,
    int32_t wakeup_count = 0,
    int32_t byte_count = 0,
    int32_t wakelock_duration_ms = 0,
    const char *creation_time = nullptr) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto activity__ = activity ? _fbb.CreateString(activity) : 0;
  auto creation_time__ = creation_time ? _fbb.CreateString(creation_time) : 0;
  return bluetooth::activity_attribution::CreateDeviceActivityAggregationEntry(
      _fbb,
      address__,
      activity__,
      wakeup_count,
      byte_count,
      wakelock_duration_ms,
      creation_time__);
}

struct ActivityAttributionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ActivityAttributionDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE_WAKEUP = 4,
    VT_NUM_WAKEUP = 6,
    VT_WAKEUP_ATTRIBUTION = 8,
    VT_TITLE_ACTIVITY = 10,
    VT_NUM_DEVICE_ACTIVITY = 12,
    VT_DEVICE_ACTIVITY_AGGREGATION = 14
  };
  const flatbuffers::String *title_wakeup() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE_WAKEUP);
  }
  int32_t num_wakeup() const {
    return GetField<int32_t>(VT_NUM_WAKEUP, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>> *wakeup_attribution() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>> *>(VT_WAKEUP_ATTRIBUTION);
  }
  const flatbuffers::String *title_activity() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE_ACTIVITY);
  }
  int32_t num_device_activity() const {
    return GetField<int32_t>(VT_NUM_DEVICE_ACTIVITY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>> *device_activity_aggregation() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>> *>(VT_DEVICE_ACTIVITY_AGGREGATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE_WAKEUP) &&
           verifier.VerifyString(title_wakeup()) &&
           VerifyField<int32_t>(verifier, VT_NUM_WAKEUP) &&
           VerifyOffset(verifier, VT_WAKEUP_ATTRIBUTION) &&
           verifier.VerifyVector(wakeup_attribution()) &&
           verifier.VerifyVectorOfTables(wakeup_attribution()) &&
           VerifyOffset(verifier, VT_TITLE_ACTIVITY) &&
           verifier.VerifyString(title_activity()) &&
           VerifyField<int32_t>(verifier, VT_NUM_DEVICE_ACTIVITY) &&
           VerifyOffset(verifier, VT_DEVICE_ACTIVITY_AGGREGATION) &&
           verifier.VerifyVector(device_activity_aggregation()) &&
           verifier.VerifyVectorOfTables(device_activity_aggregation()) &&
           verifier.EndTable();
  }
};

struct ActivityAttributionDataBuilder {
  typedef ActivityAttributionData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title_wakeup(flatbuffers::Offset<flatbuffers::String> title_wakeup) {
    fbb_.AddOffset(ActivityAttributionData::VT_TITLE_WAKEUP, title_wakeup);
  }
  void add_num_wakeup(int32_t num_wakeup) {
    fbb_.AddElement<int32_t>(ActivityAttributionData::VT_NUM_WAKEUP, num_wakeup, 0);
  }
  void add_wakeup_attribution(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>>> wakeup_attribution) {
    fbb_.AddOffset(ActivityAttributionData::VT_WAKEUP_ATTRIBUTION, wakeup_attribution);
  }
  void add_title_activity(flatbuffers::Offset<flatbuffers::String> title_activity) {
    fbb_.AddOffset(ActivityAttributionData::VT_TITLE_ACTIVITY, title_activity);
  }
  void add_num_device_activity(int32_t num_device_activity) {
    fbb_.AddElement<int32_t>(ActivityAttributionData::VT_NUM_DEVICE_ACTIVITY, num_device_activity, 0);
  }
  void add_device_activity_aggregation(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>>> device_activity_aggregation) {
    fbb_.AddOffset(ActivityAttributionData::VT_DEVICE_ACTIVITY_AGGREGATION, device_activity_aggregation);
  }
  explicit ActivityAttributionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ActivityAttributionDataBuilder &operator=(const ActivityAttributionDataBuilder &);
  flatbuffers::Offset<ActivityAttributionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ActivityAttributionData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ActivityAttributionData> CreateActivityAttributionData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title_wakeup = 0,
    int32_t num_wakeup = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>>> wakeup_attribution = 0,
    flatbuffers::Offset<flatbuffers::String> title_activity = 0,
    int32_t num_device_activity = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>>> device_activity_aggregation = 0) {
  ActivityAttributionDataBuilder builder_(_fbb);
  builder_.add_device_activity_aggregation(device_activity_aggregation);
  builder_.add_num_device_activity(num_device_activity);
  builder_.add_title_activity(title_activity);
  builder_.add_wakeup_attribution(wakeup_attribution);
  builder_.add_num_wakeup(num_wakeup);
  builder_.add_title_wakeup(title_wakeup);
  return builder_.Finish();
}

inline flatbuffers::Offset<ActivityAttributionData> CreateActivityAttributionDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title_wakeup = nullptr,
    int32_t num_wakeup = 0,
    const std::vector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>> *wakeup_attribution = nullptr,
    const char *title_activity = nullptr,
    int32_t num_device_activity = 0,
    const std::vector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>> *device_activity_aggregation = nullptr) {
  auto title_wakeup__ = title_wakeup ? _fbb.CreateString(title_wakeup) : 0;
  auto wakeup_attribution__ = wakeup_attribution ? _fbb.CreateVector<flatbuffers::Offset<bluetooth::activity_attribution::WakeupEntry>>(*wakeup_attribution) : 0;
  auto title_activity__ = title_activity ? _fbb.CreateString(title_activity) : 0;
  auto device_activity_aggregation__ = device_activity_aggregation ? _fbb.CreateVector<flatbuffers::Offset<bluetooth::activity_attribution::DeviceActivityAggregationEntry>>(*device_activity_aggregation) : 0;
  return bluetooth::activity_attribution::CreateActivityAttributionData(
      _fbb,
      title_wakeup__,
      num_wakeup,
      wakeup_attribution__,
      title_activity__,
      num_device_activity,
      device_activity_aggregation__);
}

inline const bluetooth::activity_attribution::ActivityAttributionData *GetActivityAttributionData(const void *buf) {
  return flatbuffers::GetRoot<bluetooth::activity_attribution::ActivityAttributionData>(buf);
}

inline const bluetooth::activity_attribution::ActivityAttributionData *GetSizePrefixedActivityAttributionData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<bluetooth::activity_attribution::ActivityAttributionData>(buf);
}

inline bool VerifyActivityAttributionDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<bluetooth::activity_attribution::ActivityAttributionData>(nullptr);
}

inline bool VerifySizePrefixedActivityAttributionDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<bluetooth::activity_attribution::ActivityAttributionData>(nullptr);
}

inline void FinishActivityAttributionDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::activity_attribution::ActivityAttributionData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActivityAttributionDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<bluetooth::activity_attribution::ActivityAttributionData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace activity_attribution
}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_ACTIVITYATTRIBUTION_BLUETOOTH_ACTIVITY_ATTRIBUTION_H_
