// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `facade/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct Data {
    // message fields
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // bytes payload = 1;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Data| { &m.payload },
                |m: &mut Data| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Data>(
                "Data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Data {
        static instance: ::protobuf::rt::LazyV2<Data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Data::new)
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BluetoothAddress {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BluetoothAddress {
    fn default() -> &'a BluetoothAddress {
        <BluetoothAddress as ::protobuf::Message>::default_instance()
    }
}

impl BluetoothAddress {
    pub fn new() -> BluetoothAddress {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BluetoothAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BluetoothAddress {
        BluetoothAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &BluetoothAddress| { &m.address },
                |m: &mut BluetoothAddress| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BluetoothAddress>(
                "BluetoothAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BluetoothAddress {
        static instance: ::protobuf::rt::LazyV2<BluetoothAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BluetoothAddress::new)
    }
}

impl ::protobuf::Clear for BluetoothAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BluetoothAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BluetoothAddressWithType {
    // message fields
    pub address: ::protobuf::SingularPtrField<BluetoothAddress>,
    pub field_type: BluetoothAddressTypeEnum,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BluetoothAddressWithType {
    fn default() -> &'a BluetoothAddressWithType {
        <BluetoothAddressWithType as ::protobuf::Message>::default_instance()
    }
}

impl BluetoothAddressWithType {
    pub fn new() -> BluetoothAddressWithType {
        ::std::default::Default::default()
    }

    // .bluetooth.facade.BluetoothAddress address = 1;


    pub fn get_address(&self) -> &BluetoothAddress {
        self.address.as_ref().unwrap_or_else(|| <BluetoothAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: BluetoothAddress) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut BluetoothAddress {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> BluetoothAddress {
        self.address.take().unwrap_or_else(|| BluetoothAddress::new())
    }

    // .bluetooth.facade.BluetoothAddressTypeEnum type = 2;


    pub fn get_field_type(&self) -> BluetoothAddressTypeEnum {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: BluetoothAddressTypeEnum) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for BluetoothAddressWithType {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.field_type != BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.field_type != BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BluetoothAddressWithType {
        BluetoothAddressWithType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BluetoothAddress>>(
                "address",
                |m: &BluetoothAddressWithType| { &m.address },
                |m: &mut BluetoothAddressWithType| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BluetoothAddressTypeEnum>>(
                "type",
                |m: &BluetoothAddressWithType| { &m.field_type },
                |m: &mut BluetoothAddressWithType| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BluetoothAddressWithType>(
                "BluetoothAddressWithType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BluetoothAddressWithType {
        static instance: ::protobuf::rt::LazyV2<BluetoothAddressWithType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BluetoothAddressWithType::new)
    }
}

impl ::protobuf::Clear for BluetoothAddressWithType {
    fn clear(&mut self) {
        self.address.clear();
        self.field_type = BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BluetoothAddressWithType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothAddressWithType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BluetoothAddressTypeEnum {
    PUBLIC_DEVICE_ADDRESS = 0,
    RANDOM_DEVICE_ADDRESS = 1,
    PUBLIC_IDENTITY_ADDRESS = 2,
    RANDOM_IDENTITY_ADDRESS = 3,
}

impl ::protobuf::ProtobufEnum for BluetoothAddressTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BluetoothAddressTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS),
            1 => ::std::option::Option::Some(BluetoothAddressTypeEnum::RANDOM_DEVICE_ADDRESS),
            2 => ::std::option::Option::Some(BluetoothAddressTypeEnum::PUBLIC_IDENTITY_ADDRESS),
            3 => ::std::option::Option::Some(BluetoothAddressTypeEnum::RANDOM_IDENTITY_ADDRESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BluetoothAddressTypeEnum] = &[
            BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS,
            BluetoothAddressTypeEnum::RANDOM_DEVICE_ADDRESS,
            BluetoothAddressTypeEnum::PUBLIC_IDENTITY_ADDRESS,
            BluetoothAddressTypeEnum::RANDOM_IDENTITY_ADDRESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BluetoothAddressTypeEnum>("BluetoothAddressTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BluetoothAddressTypeEnum {
}

impl ::std::default::Default for BluetoothAddressTypeEnum {
    fn default() -> Self {
        BluetoothAddressTypeEnum::PUBLIC_DEVICE_ADDRESS
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothAddressTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BluetoothOwnAddressTypeEnum {
    USE_PUBLIC_DEVICE_ADDRESS = 0,
    USE_RANDOM_DEVICE_ADDRESS = 1,
    RESOLVABLE_OR_PUBLIC_ADDRESS = 2,
    RESOLVABLE_OR_RANDOM_ADDRESS = 3,
}

impl ::protobuf::ProtobufEnum for BluetoothOwnAddressTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BluetoothOwnAddressTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(BluetoothOwnAddressTypeEnum::USE_PUBLIC_DEVICE_ADDRESS),
            1 => ::std::option::Option::Some(BluetoothOwnAddressTypeEnum::USE_RANDOM_DEVICE_ADDRESS),
            2 => ::std::option::Option::Some(BluetoothOwnAddressTypeEnum::RESOLVABLE_OR_PUBLIC_ADDRESS),
            3 => ::std::option::Option::Some(BluetoothOwnAddressTypeEnum::RESOLVABLE_OR_RANDOM_ADDRESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BluetoothOwnAddressTypeEnum] = &[
            BluetoothOwnAddressTypeEnum::USE_PUBLIC_DEVICE_ADDRESS,
            BluetoothOwnAddressTypeEnum::USE_RANDOM_DEVICE_ADDRESS,
            BluetoothOwnAddressTypeEnum::RESOLVABLE_OR_PUBLIC_ADDRESS,
            BluetoothOwnAddressTypeEnum::RESOLVABLE_OR_RANDOM_ADDRESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BluetoothOwnAddressTypeEnum>("BluetoothOwnAddressTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BluetoothOwnAddressTypeEnum {
}

impl ::std::default::Default for BluetoothOwnAddressTypeEnum {
    fn default() -> Self {
        BluetoothOwnAddressTypeEnum::USE_PUBLIC_DEVICE_ADDRESS
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothOwnAddressTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BluetoothPeerAddressTypeEnum {
    PUBLIC_DEVICE_OR_IDENTITY_ADDRESS = 0,
    RANDOM_DEVICE_OR_IDENTITY_ADDRESS = 1,
}

impl ::protobuf::ProtobufEnum for BluetoothPeerAddressTypeEnum {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BluetoothPeerAddressTypeEnum> {
        match value {
            0 => ::std::option::Option::Some(BluetoothPeerAddressTypeEnum::PUBLIC_DEVICE_OR_IDENTITY_ADDRESS),
            1 => ::std::option::Option::Some(BluetoothPeerAddressTypeEnum::RANDOM_DEVICE_OR_IDENTITY_ADDRESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BluetoothPeerAddressTypeEnum] = &[
            BluetoothPeerAddressTypeEnum::PUBLIC_DEVICE_OR_IDENTITY_ADDRESS,
            BluetoothPeerAddressTypeEnum::RANDOM_DEVICE_OR_IDENTITY_ADDRESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BluetoothPeerAddressTypeEnum>("BluetoothPeerAddressTypeEnum", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BluetoothPeerAddressTypeEnum {
}

impl ::std::default::Default for BluetoothPeerAddressTypeEnum {
    fn default() -> Self {
        BluetoothPeerAddressTypeEnum::PUBLIC_DEVICE_OR_IDENTITY_ADDRESS
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothPeerAddressTypeEnum {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13facade/common.proto\x12\x10bluetooth.facade\"\x20\n\x04Data\x12\
    \x18\n\x07payload\x18\x01\x20\x01(\x0cR\x07payload\",\n\x10BluetoothAddr\
    ess\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07address\"\x98\x01\n\
    \x18BluetoothAddressWithType\x12<\n\x07address\x18\x01\x20\x01(\x0b2\".b\
    luetooth.facade.BluetoothAddressR\x07address\x12>\n\x04type\x18\x02\x20\
    \x01(\x0e2*.bluetooth.facade.BluetoothAddressTypeEnumR\x04type*\x8a\x01\
    \n\x18BluetoothAddressTypeEnum\x12\x19\n\x15PUBLIC_DEVICE_ADDRESS\x10\0\
    \x12\x19\n\x15RANDOM_DEVICE_ADDRESS\x10\x01\x12\x1b\n\x17PUBLIC_IDENTITY\
    _ADDRESS\x10\x02\x12\x1b\n\x17RANDOM_IDENTITY_ADDRESS\x10\x03*\x9f\x01\n\
    \x1bBluetoothOwnAddressTypeEnum\x12\x1d\n\x19USE_PUBLIC_DEVICE_ADDRESS\
    \x10\0\x12\x1d\n\x19USE_RANDOM_DEVICE_ADDRESS\x10\x01\x12\x20\n\x1cRESOL\
    VABLE_OR_PUBLIC_ADDRESS\x10\x02\x12\x20\n\x1cRESOLVABLE_OR_RANDOM_ADDRES\
    S\x10\x03*l\n\x1cBluetoothPeerAddressTypeEnum\x12%\n!PUBLIC_DEVICE_OR_ID\
    ENTITY_ADDRESS\x10\0\x12%\n!RANDOM_DEVICE_OR_IDENTITY_ADDRESS\x10\x01J\
    \xde\x06\n\x06\x12\x04\0\0\"\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x19\n\n\n\x02\x04\0\x12\x04\x04\0\x06\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x04\x08\x0c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\
    \x02\x14\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x05\x02\x04\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x05\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x05\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x12\x13\n\n\n\x02\
    \x04\x01\x12\x04\x08\0\n\x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\x18\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\t\x02\x14\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04\t\x02\x08\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\t\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\x08\x0f\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\t\x12\x13\n\n\n\x02\x05\0\x12\x04\x0c\0\x11\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x0c\x05\x1d\n\x0b\n\x04\x05\0\x02\0\x12\x03\r\x02\x1e\
    \n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\r\x02\x17\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\r\x1a\x1d\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0e\x02\x1e\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0e\x02\x17\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x0e\x1a\x1d\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0f\x02\
    \x20\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0f\x02\x19\n\x0c\n\x05\x05\0\
    \x02\x02\x02\x12\x03\x0f\x1c\x1f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x10\
    \x02\x20\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x10\x02\x19\n\x0c\n\x05\
    \x05\0\x02\x03\x02\x12\x03\x10\x1c\x1f\n\n\n\x02\x05\x01\x12\x04\x13\0\
    \x18\x01\n\n\n\x03\x05\x01\x01\x12\x03\x13\x05\x20\n\x0b\n\x04\x05\x01\
    \x02\0\x12\x03\x14\x02\"\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x14\x02\
    \x1b\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x14\x1e!\n\x0b\n\x04\x05\x01\
    \x02\x01\x12\x03\x15\x02\"\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x15\
    \x02\x1b\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x15\x1e!\n\x0b\n\x04\
    \x05\x01\x02\x02\x12\x03\x16\x02%\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x03\x16\x02\x1e\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x16!$\n\x0b\n\
    \x04\x05\x01\x02\x03\x12\x03\x17\x02%\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x03\x17\x02\x1e\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x17!$\n\n\n\
    \x02\x04\x02\x12\x04\x1a\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1a\x08\
    \x20\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1b\x02\x1f\n\r\n\x05\x04\x02\x02\
    \0\x04\x12\x04\x1b\x02\x1a\"\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1b\
    \x02\x12\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1b\x13\x1a\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1b\x1d\x1e\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x1c\x02$\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1c\x02\x1b\x1f\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1c\x02\x1a\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x1c\x1b\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x1c\"#\n\n\n\x02\x05\x02\x12\x04\x1f\0\"\x01\n\n\n\x03\x05\x02\x01\x12\
    \x03\x1f\x05!\n\x0b\n\x04\x05\x02\x02\0\x12\x03\x20\x02*\n\x0c\n\x05\x05\
    \x02\x02\0\x01\x12\x03\x20\x02#\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\
    \x20&)\n\x0b\n\x04\x05\x02\x02\x01\x12\x03!\x02*\n\x0c\n\x05\x05\x02\x02\
    \x01\x01\x12\x03!\x02#\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03!&)b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
