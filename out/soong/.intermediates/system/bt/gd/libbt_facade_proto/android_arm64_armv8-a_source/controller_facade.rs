// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hci/facade/controller_facade.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct AddressMsg {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressMsg {
    fn default() -> &'a AddressMsg {
        <AddressMsg as ::protobuf::Message>::default_instance()
    }
}

impl AddressMsg {
    pub fn new() -> AddressMsg {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AddressMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressMsg {
        AddressMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &AddressMsg| { &m.address },
                |m: &mut AddressMsg| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressMsg>(
                "AddressMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddressMsg {
        static instance: ::protobuf::rt::LazyV2<AddressMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddressMsg::new)
    }
}

impl ::protobuf::Clear for AddressMsg {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NameMsg {
    // message fields
    pub name: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NameMsg {
    fn default() -> &'a NameMsg {
        <NameMsg as ::protobuf::Message>::default_instance()
    }
}

impl NameMsg {
    pub fn new() -> NameMsg {
        ::std::default::Default::default()
    }

    // bytes name = 1;


    pub fn get_name(&self) -> &[u8] {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.name, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NameMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_bytes(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NameMsg {
        NameMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "name",
                |m: &NameMsg| { &m.name },
                |m: &mut NameMsg| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NameMsg>(
                "NameMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NameMsg {
        static instance: ::protobuf::rt::LazyV2<NameMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NameMsg::new)
    }
}

impl ::protobuf::Clear for NameMsg {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NameMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NameMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"hci/facade/controller_facade.proto\x12\rbluetooth.hci\x1a\x1bgoogle/\
    protobuf/empty.proto\"&\n\nAddressMsg\x12\x18\n\x07address\x18\x01\x20\
    \x01(\x0cR\x07address\"\x1d\n\x07NameMsg\x12\x12\n\x04name\x18\x01\x20\
    \x01(\x0cR\x04name2\xde\x01\n\x10ControllerFacade\x12D\n\rGetMacAddress\
    \x12\x16.google.protobuf.Empty\x1a\x19.bluetooth.hci.AddressMsg\"\0\x12B\
    \n\x0eWriteLocalName\x12\x16.bluetooth.hci.NameMsg\x1a\x16.google.protob\
    uf.Empty\"\0\x12@\n\x0cGetLocalName\x12\x16.google.protobuf.Empty\x1a\
    \x16.bluetooth.hci.NameMsg\"\0J\xa0\x03\n\x06\x12\x04\0\0\x12\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x16\n\t\n\x02\
    \x03\0\x12\x03\x04\0%\n\n\n\x02\x06\0\x12\x04\x06\0\n\x01\n\n\n\x03\x06\
    \0\x01\x12\x03\x06\x08\x18\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x02B\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x06\x13\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x07\x14)\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x074>\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x08\x02@\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x08\x06\x14\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x15\x1c\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03\x08'<\n\x0b\n\x04\x06\0\x02\x02\x12\x03\
    \t\x02>\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x06\x12\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03\t\x13(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t3:\
    \n\n\n\x02\x04\0\x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\
    \x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x02\x14\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\r\x02\x0c\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x02\x07\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x08\x0f\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\r\x12\x13\n\n\n\x02\x04\x01\x12\x04\x10\0\x12\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x10\x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x11\
    \x02\x11\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x11\x02\x10\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x11\x08\x0c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11\x0f\x10b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
