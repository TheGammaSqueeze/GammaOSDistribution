// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hal/hal_facade.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14hal/hal_facade.proto\x12\rbluetooth.hal\x1a\x1bgoogle/protobuf/emp\
    ty.proto\x1a\x13facade/common.proto2\x8d\x04\n\x0cHciHalFacade\x12?\n\
    \x0bSendCommand\x12\x16.bluetooth.facade.Data\x1a\x16.google.protobuf.Em\
    pty\"\0\x12B\n\x0cStreamEvents\x12\x16.google.protobuf.Empty\x1a\x16.blu\
    etooth.facade.Data\"\00\x01\x12;\n\x07SendAcl\x12\x16.bluetooth.facade.D\
    ata\x1a\x16.google.protobuf.Empty\"\0\x12?\n\tStreamAcl\x12\x16.google.p\
    rotobuf.Empty\x1a\x16.bluetooth.facade.Data\"\00\x01\x12;\n\x07SendSco\
    \x12\x16.bluetooth.facade.Data\x1a\x16.google.protobuf.Empty\"\0\x12?\n\
    \tStreamSco\x12\x16.google.protobuf.Empty\x1a\x16.bluetooth.facade.Data\
    \"\00\x01\x12;\n\x07SendIso\x12\x16.bluetooth.facade.Data\x1a\x16.google\
    .protobuf.Empty\"\0\x12?\n\tStreamIso\x12\x16.google.protobuf.Empty\x1a\
    \x16.bluetooth.facade.Data\"\00\x01J\xba\x04\n\x06\x12\x04\0\0\x13\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x16\n\t\n\
    \x02\x03\0\x12\x03\x04\0%\n\t\n\x02\x03\x01\x12\x03\x05\0\x1d\n\n\n\x02\
    \x06\0\x12\x04\x07\0\x13\x01\n\n\n\x03\x06\0\x01\x12\x03\x07\x08\x14\n\
    \x0b\n\x04\x06\0\x02\0\x12\x03\x08\x02A\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x08\x06\x11\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x08\x12\x1d\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x08(=\n\x0b\n\x04\x06\0\x02\x01\x12\x03\t\
    \x02I\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\t\x06\x12\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\t\x13(\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\t39\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t:E\n\x0b\n\x04\x06\0\x02\x02\x12\
    \x03\x0b\x02=\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0b\x06\r\n\x0c\n\
    \x05\x06\0\x02\x02\x02\x12\x03\x0b\x0e\x19\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x0b$9\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x0c\x02F\n\x0c\n\x05\
    \x06\0\x02\x03\x01\x12\x03\x0c\x06\x0f\n\x0c\n\x05\x06\0\x02\x03\x02\x12\
    \x03\x0c\x10%\n\x0c\n\x05\x06\0\x02\x03\x06\x12\x03\x0c06\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\x0c7B\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0e\
    \x02=\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0e\x06\r\n\x0c\n\x05\x06\0\
    \x02\x04\x02\x12\x03\x0e\x0e\x19\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\
    \x0e$9\n\x0b\n\x04\x06\0\x02\x05\x12\x03\x0f\x02F\n\x0c\n\x05\x06\0\x02\
    \x05\x01\x12\x03\x0f\x06\x0f\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x0f\
    \x10%\n\x0c\n\x05\x06\0\x02\x05\x06\x12\x03\x0f06\n\x0c\n\x05\x06\0\x02\
    \x05\x03\x12\x03\x0f7B\n\x0b\n\x04\x06\0\x02\x06\x12\x03\x11\x02=\n\x0c\
    \n\x05\x06\0\x02\x06\x01\x12\x03\x11\x06\r\n\x0c\n\x05\x06\0\x02\x06\x02\
    \x12\x03\x11\x0e\x19\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x11$9\n\x0b\n\
    \x04\x06\0\x02\x07\x12\x03\x12\x02F\n\x0c\n\x05\x06\0\x02\x07\x01\x12\
    \x03\x12\x06\x0f\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x12\x10%\n\x0c\n\
    \x05\x06\0\x02\x07\x06\x12\x03\x1206\n\x0c\n\x05\x06\0\x02\x07\x03\x12\
    \x03\x127Bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
