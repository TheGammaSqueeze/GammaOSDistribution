// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `facade/rootservice.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct StartStackRequest {
    // message fields
    pub module_under_test: BluetoothModule,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartStackRequest {
    fn default() -> &'a StartStackRequest {
        <StartStackRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartStackRequest {
    pub fn new() -> StartStackRequest {
        ::std::default::Default::default()
    }

    // .bluetooth.facade.BluetoothModule module_under_test = 1;


    pub fn get_module_under_test(&self) -> BluetoothModule {
        self.module_under_test
    }
    pub fn clear_module_under_test(&mut self) {
        self.module_under_test = BluetoothModule::HAL;
    }

    // Param is passed by value, moved
    pub fn set_module_under_test(&mut self, v: BluetoothModule) {
        self.module_under_test = v;
    }
}

impl ::protobuf::Message for StartStackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.module_under_test, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.module_under_test != BluetoothModule::HAL {
            my_size += ::protobuf::rt::enum_size(1, self.module_under_test);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.module_under_test != BluetoothModule::HAL {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.module_under_test))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartStackRequest {
        StartStackRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BluetoothModule>>(
                "module_under_test",
                |m: &StartStackRequest| { &m.module_under_test },
                |m: &mut StartStackRequest| { &mut m.module_under_test },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartStackRequest>(
                "StartStackRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartStackRequest {
        static instance: ::protobuf::rt::LazyV2<StartStackRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartStackRequest::new)
    }
}

impl ::protobuf::Clear for StartStackRequest {
    fn clear(&mut self) {
        self.module_under_test = BluetoothModule::HAL;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartStackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartStackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartStackResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartStackResponse {
    fn default() -> &'a StartStackResponse {
        <StartStackResponse as ::protobuf::Message>::default_instance()
    }
}

impl StartStackResponse {
    pub fn new() -> StartStackResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StartStackResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartStackResponse {
        StartStackResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartStackResponse>(
                "StartStackResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartStackResponse {
        static instance: ::protobuf::rt::LazyV2<StartStackResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartStackResponse::new)
    }
}

impl ::protobuf::Clear for StartStackResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartStackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartStackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopStackRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopStackRequest {
    fn default() -> &'a StopStackRequest {
        <StopStackRequest as ::protobuf::Message>::default_instance()
    }
}

impl StopStackRequest {
    pub fn new() -> StopStackRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StopStackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopStackRequest {
        StopStackRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopStackRequest>(
                "StopStackRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopStackRequest {
        static instance: ::protobuf::rt::LazyV2<StopStackRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopStackRequest::new)
    }
}

impl ::protobuf::Clear for StopStackRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopStackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopStackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopStackResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopStackResponse {
    fn default() -> &'a StopStackResponse {
        <StopStackResponse as ::protobuf::Message>::default_instance()
    }
}

impl StopStackResponse {
    pub fn new() -> StopStackResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StopStackResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopStackResponse {
        StopStackResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopStackResponse>(
                "StopStackResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopStackResponse {
        static instance: ::protobuf::rt::LazyV2<StopStackResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopStackResponse::new)
    }
}

impl ::protobuf::Clear for StopStackResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopStackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopStackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BluetoothModule {
    HAL = 0,
    HCI = 1,
    HCI_INTERFACES = 2,
    L2CAP = 3,
    SECURITY = 4,
    SHIM = 5,
}

impl ::protobuf::ProtobufEnum for BluetoothModule {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BluetoothModule> {
        match value {
            0 => ::std::option::Option::Some(BluetoothModule::HAL),
            1 => ::std::option::Option::Some(BluetoothModule::HCI),
            2 => ::std::option::Option::Some(BluetoothModule::HCI_INTERFACES),
            3 => ::std::option::Option::Some(BluetoothModule::L2CAP),
            4 => ::std::option::Option::Some(BluetoothModule::SECURITY),
            5 => ::std::option::Option::Some(BluetoothModule::SHIM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BluetoothModule] = &[
            BluetoothModule::HAL,
            BluetoothModule::HCI,
            BluetoothModule::HCI_INTERFACES,
            BluetoothModule::L2CAP,
            BluetoothModule::SECURITY,
            BluetoothModule::SHIM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BluetoothModule>("BluetoothModule", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BluetoothModule {
}

impl ::std::default::Default for BluetoothModule {
    fn default() -> Self {
        BluetoothModule::HAL
    }
}

impl ::protobuf::reflect::ProtobufValue for BluetoothModule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18facade/rootservice.proto\x12\x10bluetooth.facade\x1a\x1bgoogle/pro\
    tobuf/empty.proto\x1a\x13facade/common.proto\"b\n\x11StartStackRequest\
    \x12M\n\x11module_under_test\x18\x01\x20\x01(\x0e2!.bluetooth.facade.Blu\
    etoothModuleR\x0fmoduleUnderTest\"\x14\n\x12StartStackResponse\"\x12\n\
    \x10StopStackRequest\"\x13\n\x11StopStackResponse*Z\n\x0fBluetoothModule\
    \x12\x07\n\x03HAL\x10\0\x12\x07\n\x03HCI\x10\x01\x12\x12\n\x0eHCI_INTERF\
    ACES\x10\x02\x12\t\n\x05L2CAP\x10\x03\x12\x0c\n\x08SECURITY\x10\x04\x12\
    \x08\n\x04SHIM\x10\x052\xbf\x01\n\nRootFacade\x12Y\n\nStartStack\x12#.bl\
    uetooth.facade.StartStackRequest\x1a$.bluetooth.facade.StartStackRespons\
    e\"\0\x12V\n\tStopStack\x12\".bluetooth.facade.StopStackRequest\x1a#.blu\
    etooth.facade.StopStackResponse\"\02d\n\x10ReadOnlyProperty\x12P\n\x10Re\
    adLocalAddress\x12\x16.google.protobuf.Empty\x1a\".bluetooth.facade.Blue\
    toothAddress\"\0J\xb8\x05\n\x06\x12\x04\0\0!\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\t\n\x02\x03\0\x12\x03\x04\0\
    %\n\t\n\x02\x03\x01\x12\x03\x05\0\x1d\n\n\n\x02\x06\0\x12\x04\x07\0\n\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x07\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x08\x02C\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x06\x10\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x08\x11\"\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x08-?\n\x0b\n\x04\x06\0\x02\x01\x12\x03\t\x02@\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\t\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\
    \x10\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t+<\n\n\n\x02\x05\0\x12\
    \x04\x0c\0\x13\x01\n\n\n\x03\x05\0\x01\x12\x03\x0c\x05\x14\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\r\x02\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\r\x02\
    \x05\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\r\x08\t\n\x0b\n\x04\x05\0\x02\
    \x01\x12\x03\x0e\x02\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0e\x02\x05\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0e\x08\t\n\x0b\n\x04\x05\0\x02\
    \x02\x12\x03\x0f\x02\x15\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0f\x02\
    \x10\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0f\x13\x14\n\x0b\n\x04\x05\0\
    \x02\x03\x12\x03\x10\x02\x0c\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x10\
    \x02\x07\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x10\n\x0b\n\x0b\n\x04\x05\
    \0\x02\x04\x12\x03\x11\x02\x0f\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x11\
    \x02\n\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x11\r\x0e\n\x0b\n\x04\x05\0\
    \x02\x05\x12\x03\x12\x02\x0b\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x12\
    \x02\x06\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x12\t\n\n\n\n\x02\x04\0\
    \x12\x04\x15\0\x17\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x19\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x16\x02(\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x16\
    \x02\x15\x1b\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x16\x02\x11\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x16\x12#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x16&'\n\t\n\x02\x04\x01\x12\x03\x19\0\x1d\n\n\n\x03\x04\x01\x01\x12\x03\
    \x19\x08\x1a\n\t\n\x02\x04\x02\x12\x03\x1b\0\x1b\n\n\n\x03\x04\x02\x01\
    \x12\x03\x1b\x08\x18\n\t\n\x02\x04\x03\x12\x03\x1d\0\x1c\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1d\x08\x19\n\n\n\x02\x06\x01\x12\x04\x1f\0!\x01\n\n\n\
    \x03\x06\x01\x01\x12\x03\x1f\x08\x18\n\x0b\n\x04\x06\x01\x02\0\x12\x03\
    \x20\x02R\n\x0c\n\x05\x06\x01\x02\0\x01\x12\x03\x20\x06\x16\n\x0c\n\x05\
    \x06\x01\x02\0\x02\x12\x03\x20\x17,\n\x0c\n\x05\x06\x01\x02\0\x03\x12\
    \x03\x207Nb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
