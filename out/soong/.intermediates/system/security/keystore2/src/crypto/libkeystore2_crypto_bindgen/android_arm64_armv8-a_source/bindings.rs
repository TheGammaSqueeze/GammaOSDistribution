/* automatically generated by rust-bindgen 0.58.1 */

pub const EVP_MAX_MD_SIZE: u32 = 64;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint64_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn randomBytes(out: *mut u8, len: usize) -> bool;
}
extern "C" {
    pub fn AES_gcm_encrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const u8,
        key_size: usize,
        iv: *const u8,
        tag: *mut u8,
    ) -> bool;
}
extern "C" {
    pub fn AES_gcm_decrypt(
        in_: *const u8,
        out: *mut u8,
        len: usize,
        key: *const u8,
        key_size: usize,
        iv: *const u8,
        tag: *const u8,
    ) -> bool;
}
pub type km_id_t = u64;
extern "C" {
    pub fn CreateKeyId(key_blob: *const u8, len: usize, out_id: *mut km_id_t) -> bool;
}
extern "C" {
    pub fn generateKeyFromPassword(
        key: *mut u8,
        key_len: usize,
        pw: *const ::std::os::raw::c_char,
        pw_len: usize,
        salt: *const u8,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_key_st {
    _unused: [u8; 0],
}
pub type EC_KEY = ec_key_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_point_st {
    _unused: [u8; 0],
}
pub type EC_POINT = ec_point_st;
extern "C" {
    pub fn EC_POINT_free(point: *mut EC_POINT);
}
extern "C" {
    pub fn EC_KEY_free(key: *mut EC_KEY);
}
extern "C" {
    pub fn EC_KEY_get0_public_key(key: *const EC_KEY) -> *const EC_POINT;
}
extern "C" {
    pub fn HKDFExtract(
        out_key: *mut u8,
        out_len: *mut usize,
        secret: *const u8,
        secret_len: usize,
        salt: *const u8,
        salt_len: usize,
    ) -> bool;
}
extern "C" {
    pub fn HKDFExpand(
        out_key: *mut u8,
        out_len: usize,
        prk: *const u8,
        prk_len: usize,
        info: *const u8,
        info_len: usize,
    ) -> bool;
}
pub const EC_MAX_BYTES: usize = 32;
extern "C" {
    pub fn ECDHComputeKey(
        out: *mut ::std::os::raw::c_void,
        pub_key: *const EC_POINT,
        priv_key: *const EC_KEY,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ECKEYGenerateKey() -> *mut EC_KEY;
}
extern "C" {
    pub fn ECKEYMarshalPrivateKey(priv_key: *const EC_KEY, buf: *mut u8, len: usize) -> usize;
}
extern "C" {
    pub fn ECKEYParsePrivateKey(buf: *const u8, len: usize) -> *mut EC_KEY;
}
extern "C" {
    pub fn ECPOINTPoint2Oct(point: *const EC_POINT, buf: *mut u8, len: usize) -> usize;
}
extern "C" {
    pub fn ECPOINTOct2Point(buf: *const u8, len: usize) -> *mut EC_POINT;
}
extern "C" {
    #[link_name = "\u{1}_Z29extractSubjectFromCertificatePKhmPhm"]
    pub fn extractSubjectFromCertificate(
        cert_buf: *const u8,
        cert_len: usize,
        subject_buf: *mut u8,
        subject_buf_len: usize,
    ) -> ::std::os::raw::c_int;
}
