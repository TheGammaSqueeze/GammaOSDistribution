// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/tools/sysprop/sysprop.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2ftools_2fsysprop_2fsysprop_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2ftools_2fsysprop_2fsysprop_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2ftools_2fsysprop_2fsysprop_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2ftools_2fsysprop_2fsysprop_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto;
namespace sysprop {
class Properties;
class PropertiesDefaultTypeInternal;
extern PropertiesDefaultTypeInternal _Properties_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class SyspropLibraryApis;
class SyspropLibraryApisDefaultTypeInternal;
extern SyspropLibraryApisDefaultTypeInternal _SyspropLibraryApis_default_instance_;
}  // namespace sysprop
PROTOBUF_NAMESPACE_OPEN
template<> ::sysprop::Properties* Arena::CreateMaybeMessage<::sysprop::Properties>(Arena*);
template<> ::sysprop::Property* Arena::CreateMaybeMessage<::sysprop::Property>(Arena*);
template<> ::sysprop::SyspropLibraryApis* Arena::CreateMaybeMessage<::sysprop::SyspropLibraryApis>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sysprop {

enum Access : int {
  Readonly = 0,
  Writeonce = 1,
  ReadWrite = 2,
  Access_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Access_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Access_IsValid(int value);
constexpr Access Access_MIN = Readonly;
constexpr Access Access_MAX = ReadWrite;
constexpr int Access_ARRAYSIZE = Access_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Access_descriptor();
template<typename T>
inline const std::string& Access_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Access>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Access_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Access_descriptor(), enum_t_value);
}
inline bool Access_Parse(
    const std::string& name, Access* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Access>(
    Access_descriptor(), name, value);
}
enum Owner : int {
  Platform = 0,
  Vendor = 1,
  Odm = 2,
  Owner_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Owner_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Owner_IsValid(int value);
constexpr Owner Owner_MIN = Platform;
constexpr Owner Owner_MAX = Odm;
constexpr int Owner_ARRAYSIZE = Owner_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Owner_descriptor();
template<typename T>
inline const std::string& Owner_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Owner>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Owner_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Owner_descriptor(), enum_t_value);
}
inline bool Owner_Parse(
    const std::string& name, Owner* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Owner>(
    Owner_descriptor(), name, value);
}
enum Scope : int {
  Public = 0,
  System PROTOBUF_DEPRECATED = 1,
  Internal = 2,
  Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Scope_IsValid(int value);
constexpr Scope Scope_MIN = Public;
constexpr Scope Scope_MAX = Internal;
constexpr int Scope_ARRAYSIZE = Scope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scope_descriptor();
template<typename T>
inline const std::string& Scope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scope_descriptor(), enum_t_value);
}
inline bool Scope_Parse(
    const std::string& name, Scope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scope>(
    Scope_descriptor(), name, value);
}
enum Type : int {
  Boolean = 0,
  Integer = 1,
  Long = 2,
  Double = 3,
  String = 4,
  Enum = 5,
  UInt = 6,
  ULong = 7,
  BooleanList = 20,
  IntegerList = 21,
  LongList = 22,
  DoubleList = 23,
  StringList = 24,
  EnumList = 25,
  UIntList = 26,
  ULongList = 27,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = Boolean;
constexpr Type Type_MAX = ULongList;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    const std::string& name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Property :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sysprop.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sysprop.Property";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto);
    return ::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiNameFieldNumber = 1,
    kPropNameFieldNumber = 5,
    kEnumValuesFieldNumber = 6,
    kLegacyPropNameFieldNumber = 9,
    kTypeFieldNumber = 2,
    kAccessFieldNumber = 3,
    kScopeFieldNumber = 4,
    kIntegerAsBoolFieldNumber = 7,
    kDeprecatedFieldNumber = 8,
  };
  // string api_name = 1;
  void clear_api_name();
  const std::string& api_name() const;
  void set_api_name(const std::string& value);
  void set_api_name(std::string&& value);
  void set_api_name(const char* value);
  void set_api_name(const char* value, size_t size);
  std::string* mutable_api_name();
  std::string* release_api_name();
  void set_allocated_api_name(std::string* api_name);

  // string prop_name = 5;
  void clear_prop_name();
  const std::string& prop_name() const;
  void set_prop_name(const std::string& value);
  void set_prop_name(std::string&& value);
  void set_prop_name(const char* value);
  void set_prop_name(const char* value, size_t size);
  std::string* mutable_prop_name();
  std::string* release_prop_name();
  void set_allocated_prop_name(std::string* prop_name);

  // string enum_values = 6;
  void clear_enum_values();
  const std::string& enum_values() const;
  void set_enum_values(const std::string& value);
  void set_enum_values(std::string&& value);
  void set_enum_values(const char* value);
  void set_enum_values(const char* value, size_t size);
  std::string* mutable_enum_values();
  std::string* release_enum_values();
  void set_allocated_enum_values(std::string* enum_values);

  // string legacy_prop_name = 9;
  void clear_legacy_prop_name();
  const std::string& legacy_prop_name() const;
  void set_legacy_prop_name(const std::string& value);
  void set_legacy_prop_name(std::string&& value);
  void set_legacy_prop_name(const char* value);
  void set_legacy_prop_name(const char* value, size_t size);
  std::string* mutable_legacy_prop_name();
  std::string* release_legacy_prop_name();
  void set_allocated_legacy_prop_name(std::string* legacy_prop_name);

  // .sysprop.Type type = 2;
  void clear_type();
  ::sysprop::Type type() const;
  void set_type(::sysprop::Type value);

  // .sysprop.Access access = 3;
  void clear_access();
  ::sysprop::Access access() const;
  void set_access(::sysprop::Access value);

  // .sysprop.Scope scope = 4;
  void clear_scope();
  ::sysprop::Scope scope() const;
  void set_scope(::sysprop::Scope value);

  // bool integer_as_bool = 7;
  void clear_integer_as_bool();
  bool integer_as_bool() const;
  void set_integer_as_bool(bool value);

  // bool deprecated = 8;
  void clear_deprecated();
  bool deprecated() const;
  void set_deprecated(bool value);

  // @@protoc_insertion_point(class_scope:sysprop.Property)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prop_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_prop_name_;
  int type_;
  int access_;
  int scope_;
  bool integer_as_bool_;
  bool deprecated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2ftools_2fsysprop_2fsysprop_2eproto;
};
// -------------------------------------------------------------------

class Properties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sysprop.Properties) */ {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);
  Properties(Properties&& from) noexcept
    : Properties() {
    *this = ::std::move(from);
  }

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }
  inline Properties& operator=(Properties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Properties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Properties* internal_default_instance() {
    return reinterpret_cast<const Properties*>(
               &_Properties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Properties& a, Properties& b) {
    a.Swap(&b);
  }
  inline void Swap(Properties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Properties* New() const final {
    return CreateMaybeMessage<Properties>(nullptr);
  }

  Properties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Properties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Properties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sysprop.Properties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto);
    return ::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropFieldNumber = 3,
    kModuleFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // repeated .sysprop.Property prop = 3;
  int prop_size() const;
  void clear_prop();
  ::sysprop::Property* mutable_prop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Property >*
      mutable_prop();
  const ::sysprop::Property& prop(int index) const;
  ::sysprop::Property* add_prop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Property >&
      prop() const;

  // string module = 2;
  void clear_module();
  const std::string& module() const;
  void set_module(const std::string& value);
  void set_module(std::string&& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  std::string* mutable_module();
  std::string* release_module();
  void set_allocated_module(std::string* module);

  // .sysprop.Owner owner = 1;
  void clear_owner();
  ::sysprop::Owner owner() const;
  void set_owner(::sysprop::Owner value);

  // @@protoc_insertion_point(class_scope:sysprop.Properties)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Property > prop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  int owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2ftools_2fsysprop_2fsysprop_2eproto;
};
// -------------------------------------------------------------------

class SyspropLibraryApis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sysprop.SyspropLibraryApis) */ {
 public:
  SyspropLibraryApis();
  virtual ~SyspropLibraryApis();

  SyspropLibraryApis(const SyspropLibraryApis& from);
  SyspropLibraryApis(SyspropLibraryApis&& from) noexcept
    : SyspropLibraryApis() {
    *this = ::std::move(from);
  }

  inline SyspropLibraryApis& operator=(const SyspropLibraryApis& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyspropLibraryApis& operator=(SyspropLibraryApis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyspropLibraryApis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyspropLibraryApis* internal_default_instance() {
    return reinterpret_cast<const SyspropLibraryApis*>(
               &_SyspropLibraryApis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyspropLibraryApis& a, SyspropLibraryApis& b) {
    a.Swap(&b);
  }
  inline void Swap(SyspropLibraryApis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyspropLibraryApis* New() const final {
    return CreateMaybeMessage<SyspropLibraryApis>(nullptr);
  }

  SyspropLibraryApis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyspropLibraryApis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyspropLibraryApis& from);
  void MergeFrom(const SyspropLibraryApis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyspropLibraryApis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sysprop.SyspropLibraryApis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto);
    return ::descriptor_table_system_2ftools_2fsysprop_2fsysprop_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 1,
  };
  // repeated .sysprop.Properties props = 1;
  int props_size() const;
  void clear_props();
  ::sysprop::Properties* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Properties >*
      mutable_props();
  const ::sysprop::Properties& props(int index) const;
  ::sysprop::Properties* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Properties >&
      props() const;

  // @@protoc_insertion_point(class_scope:sysprop.SyspropLibraryApis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Properties > props_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2ftools_2fsysprop_2fsysprop_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Property

// string api_name = 1;
inline void Property::clear_api_name() {
  api_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::api_name() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.api_name)
  return api_name_.GetNoArena();
}
inline void Property::set_api_name(const std::string& value) {
  
  api_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysprop.Property.api_name)
}
inline void Property::set_api_name(std::string&& value) {
  
  api_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysprop.Property.api_name)
}
inline void Property::set_api_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysprop.Property.api_name)
}
inline void Property::set_api_name(const char* value, size_t size) {
  
  api_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysprop.Property.api_name)
}
inline std::string* Property::mutable_api_name() {
  
  // @@protoc_insertion_point(field_mutable:sysprop.Property.api_name)
  return api_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_api_name() {
  // @@protoc_insertion_point(field_release:sysprop.Property.api_name)
  
  return api_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_api_name(std::string* api_name) {
  if (api_name != nullptr) {
    
  } else {
    
  }
  api_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_name);
  // @@protoc_insertion_point(field_set_allocated:sysprop.Property.api_name)
}

// .sysprop.Type type = 2;
inline void Property::clear_type() {
  type_ = 0;
}
inline ::sysprop::Type Property::type() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.type)
  return static_cast< ::sysprop::Type >(type_);
}
inline void Property::set_type(::sysprop::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Property.type)
}

// .sysprop.Access access = 3;
inline void Property::clear_access() {
  access_ = 0;
}
inline ::sysprop::Access Property::access() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.access)
  return static_cast< ::sysprop::Access >(access_);
}
inline void Property::set_access(::sysprop::Access value) {
  
  access_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Property.access)
}

// .sysprop.Scope scope = 4;
inline void Property::clear_scope() {
  scope_ = 0;
}
inline ::sysprop::Scope Property::scope() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.scope)
  return static_cast< ::sysprop::Scope >(scope_);
}
inline void Property::set_scope(::sysprop::Scope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Property.scope)
}

// string prop_name = 5;
inline void Property::clear_prop_name() {
  prop_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::prop_name() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.prop_name)
  return prop_name_.GetNoArena();
}
inline void Property::set_prop_name(const std::string& value) {
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysprop.Property.prop_name)
}
inline void Property::set_prop_name(std::string&& value) {
  
  prop_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysprop.Property.prop_name)
}
inline void Property::set_prop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysprop.Property.prop_name)
}
inline void Property::set_prop_name(const char* value, size_t size) {
  
  prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysprop.Property.prop_name)
}
inline std::string* Property::mutable_prop_name() {
  
  // @@protoc_insertion_point(field_mutable:sysprop.Property.prop_name)
  return prop_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_prop_name() {
  // @@protoc_insertion_point(field_release:sysprop.Property.prop_name)
  
  return prop_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_prop_name(std::string* prop_name) {
  if (prop_name != nullptr) {
    
  } else {
    
  }
  prop_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prop_name);
  // @@protoc_insertion_point(field_set_allocated:sysprop.Property.prop_name)
}

// string enum_values = 6;
inline void Property::clear_enum_values() {
  enum_values_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::enum_values() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.enum_values)
  return enum_values_.GetNoArena();
}
inline void Property::set_enum_values(const std::string& value) {
  
  enum_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysprop.Property.enum_values)
}
inline void Property::set_enum_values(std::string&& value) {
  
  enum_values_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysprop.Property.enum_values)
}
inline void Property::set_enum_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enum_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysprop.Property.enum_values)
}
inline void Property::set_enum_values(const char* value, size_t size) {
  
  enum_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysprop.Property.enum_values)
}
inline std::string* Property::mutable_enum_values() {
  
  // @@protoc_insertion_point(field_mutable:sysprop.Property.enum_values)
  return enum_values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_enum_values() {
  // @@protoc_insertion_point(field_release:sysprop.Property.enum_values)
  
  return enum_values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_enum_values(std::string* enum_values) {
  if (enum_values != nullptr) {
    
  } else {
    
  }
  enum_values_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enum_values);
  // @@protoc_insertion_point(field_set_allocated:sysprop.Property.enum_values)
}

// bool integer_as_bool = 7;
inline void Property::clear_integer_as_bool() {
  integer_as_bool_ = false;
}
inline bool Property::integer_as_bool() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.integer_as_bool)
  return integer_as_bool_;
}
inline void Property::set_integer_as_bool(bool value) {
  
  integer_as_bool_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Property.integer_as_bool)
}

// bool deprecated = 8;
inline void Property::clear_deprecated() {
  deprecated_ = false;
}
inline bool Property::deprecated() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.deprecated)
  return deprecated_;
}
inline void Property::set_deprecated(bool value) {
  
  deprecated_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Property.deprecated)
}

// string legacy_prop_name = 9;
inline void Property::clear_legacy_prop_name() {
  legacy_prop_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Property::legacy_prop_name() const {
  // @@protoc_insertion_point(field_get:sysprop.Property.legacy_prop_name)
  return legacy_prop_name_.GetNoArena();
}
inline void Property::set_legacy_prop_name(const std::string& value) {
  
  legacy_prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysprop.Property.legacy_prop_name)
}
inline void Property::set_legacy_prop_name(std::string&& value) {
  
  legacy_prop_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysprop.Property.legacy_prop_name)
}
inline void Property::set_legacy_prop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  legacy_prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysprop.Property.legacy_prop_name)
}
inline void Property::set_legacy_prop_name(const char* value, size_t size) {
  
  legacy_prop_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysprop.Property.legacy_prop_name)
}
inline std::string* Property::mutable_legacy_prop_name() {
  
  // @@protoc_insertion_point(field_mutable:sysprop.Property.legacy_prop_name)
  return legacy_prop_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_legacy_prop_name() {
  // @@protoc_insertion_point(field_release:sysprop.Property.legacy_prop_name)
  
  return legacy_prop_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_legacy_prop_name(std::string* legacy_prop_name) {
  if (legacy_prop_name != nullptr) {
    
  } else {
    
  }
  legacy_prop_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_prop_name);
  // @@protoc_insertion_point(field_set_allocated:sysprop.Property.legacy_prop_name)
}

// -------------------------------------------------------------------

// Properties

// .sysprop.Owner owner = 1;
inline void Properties::clear_owner() {
  owner_ = 0;
}
inline ::sysprop::Owner Properties::owner() const {
  // @@protoc_insertion_point(field_get:sysprop.Properties.owner)
  return static_cast< ::sysprop::Owner >(owner_);
}
inline void Properties::set_owner(::sysprop::Owner value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:sysprop.Properties.owner)
}

// string module = 2;
inline void Properties::clear_module() {
  module_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Properties::module() const {
  // @@protoc_insertion_point(field_get:sysprop.Properties.module)
  return module_.GetNoArena();
}
inline void Properties::set_module(const std::string& value) {
  
  module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysprop.Properties.module)
}
inline void Properties::set_module(std::string&& value) {
  
  module_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysprop.Properties.module)
}
inline void Properties::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysprop.Properties.module)
}
inline void Properties::set_module(const char* value, size_t size) {
  
  module_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysprop.Properties.module)
}
inline std::string* Properties::mutable_module() {
  
  // @@protoc_insertion_point(field_mutable:sysprop.Properties.module)
  return module_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Properties::release_module() {
  // @@protoc_insertion_point(field_release:sysprop.Properties.module)
  
  return module_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:sysprop.Properties.module)
}

// repeated .sysprop.Property prop = 3;
inline int Properties::prop_size() const {
  return prop_.size();
}
inline void Properties::clear_prop() {
  prop_.Clear();
}
inline ::sysprop::Property* Properties::mutable_prop(int index) {
  // @@protoc_insertion_point(field_mutable:sysprop.Properties.prop)
  return prop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Property >*
Properties::mutable_prop() {
  // @@protoc_insertion_point(field_mutable_list:sysprop.Properties.prop)
  return &prop_;
}
inline const ::sysprop::Property& Properties::prop(int index) const {
  // @@protoc_insertion_point(field_get:sysprop.Properties.prop)
  return prop_.Get(index);
}
inline ::sysprop::Property* Properties::add_prop() {
  // @@protoc_insertion_point(field_add:sysprop.Properties.prop)
  return prop_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Property >&
Properties::prop() const {
  // @@protoc_insertion_point(field_list:sysprop.Properties.prop)
  return prop_;
}

// -------------------------------------------------------------------

// SyspropLibraryApis

// repeated .sysprop.Properties props = 1;
inline int SyspropLibraryApis::props_size() const {
  return props_.size();
}
inline void SyspropLibraryApis::clear_props() {
  props_.Clear();
}
inline ::sysprop::Properties* SyspropLibraryApis::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:sysprop.SyspropLibraryApis.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Properties >*
SyspropLibraryApis::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:sysprop.SyspropLibraryApis.props)
  return &props_;
}
inline const ::sysprop::Properties& SyspropLibraryApis::props(int index) const {
  // @@protoc_insertion_point(field_get:sysprop.SyspropLibraryApis.props)
  return props_.Get(index);
}
inline ::sysprop::Properties* SyspropLibraryApis::add_props() {
  // @@protoc_insertion_point(field_add:sysprop.SyspropLibraryApis.props)
  return props_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sysprop::Properties >&
SyspropLibraryApis::props() const {
  // @@protoc_insertion_point(field_list:sysprop.SyspropLibraryApis.props)
  return props_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sysprop

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sysprop::Access> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sysprop::Access>() {
  return ::sysprop::Access_descriptor();
}
template <> struct is_proto_enum< ::sysprop::Owner> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sysprop::Owner>() {
  return ::sysprop::Owner_descriptor();
}
template <> struct is_proto_enum< ::sysprop::Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sysprop::Scope>() {
  return ::sysprop::Scope_descriptor();
}
template <> struct is_proto_enum< ::sysprop::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sysprop::Type>() {
  return ::sysprop::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2ftools_2fsysprop_2fsysprop_2eproto
