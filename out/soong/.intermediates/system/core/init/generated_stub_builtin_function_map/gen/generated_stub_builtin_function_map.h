const BuiltinFunctionMap& GetBuiltinFunctionMap() {
    constexpr std::size_t kMax = std::numeric_limits<std::size_t>::max();
    // clang-format off
    static const BuiltinFunctionMap builtin_functions = {
        {"bootchart",               {1,     1,    {false,  check_stub}}},
        {"chmod",                   {2,     2,    {true,   check_stub}}},
        {"chown",                   {2,     3,    {true,   check_chown}}},
        {"class_reset",             {1,     1,    {false,  check_stub}}},
        {"class_reset_post_data",   {1,     1,    {false,  check_stub}}},
        {"class_restart",           {1,     1,    {false,  check_stub}}},
        {"class_start",             {1,     1,    {false,  check_stub}}},
        {"class_start_post_data",   {1,     1,    {false,  check_stub}}},
        {"class_stop",              {1,     1,    {false,  check_stub}}},
        {"copy",                    {2,     2,    {true,   check_stub}}},
        {"copy_per_line",           {2,     2,    {true,   check_stub}}},
        {"domainname",              {1,     1,    {true,   check_stub}}},
        {"enable",                  {1,     1,    {false,  check_stub}}},
        {"exec",                    {1,     kMax, {false,  check_exec}}},
        {"exec_background",         {1,     kMax, {false,  check_exec_background}}},
        {"exec_start",              {1,     1,    {false,  check_stub}}},
        {"export",                  {2,     2,    {false,  check_stub}}},
        {"hostname",                {1,     1,    {true,   check_stub}}},
        {"ifup",                    {1,     1,    {true,   check_stub}}},
        {"init_user0",              {0,     0,    {false,  check_stub}}},
        {"insmod",                  {1,     kMax, {true,   check_stub}}},
        {"installkey",              {1,     1,    {false,  check_stub}}},
        {"interface_restart",       {1,     1,    {false,  check_interface_restart}}},
        {"interface_start",         {1,     1,    {false,  check_interface_start}}},
        {"interface_stop",          {1,     1,    {false,  check_interface_stop}}},
        {"load_exports",            {1,     1,    {false,  check_stub}}},
        {"load_persist_props",      {0,     0,    {false,  check_stub}}},
        {"load_system_props",       {0,     0,    {false,  check_load_system_props}}},
        {"loglevel",                {1,     1,    {false,  check_loglevel}}},
        {"mark_post_data",          {0,     0,    {false,  check_stub}}},
        {"mkdir",                   {1,     6,    {true,   check_mkdir}}},
        // TODO: Do mount operations in vendor_init.
        // mount_all is currently too complex to run in vendor_init as it queues action triggers,
        // imports rc scripts, etc.  It should be simplified and run in vendor_init context.
        // mount and umount are run in the same context as mount_all for symmetry.
        {"mount_all",               {0,     kMax, {false,  check_mount_all}}},
        {"mount",                   {3,     kMax, {false,  check_stub}}},
        {"perform_apex_config",     {0,     0,    {false,  check_stub}}},
        {"umount",                  {1,     1,    {false,  check_stub}}},
        {"umount_all",              {0,     1,    {false,  check_umount_all}}},
        {"update_linker_config",    {0,     0,    {false,  check_stub}}},
        {"readahead",               {1,     2,    {true,   check_stub}}},
        {"remount_userdata",        {0,     0,    {false,  check_stub}}},
        {"restart",                 {1,     1,    {false,  check_stub}}},
        {"restorecon",              {1,     kMax, {true,   check_restorecon}}},
        {"restorecon_recursive",    {1,     kMax, {true,   check_restorecon_recursive}}},
        {"rm",                      {1,     1,    {true,   check_stub}}},
        {"rmdir",                   {1,     1,    {true,   check_stub}}},
        {"setprop",                 {2,     2,    {true,   check_setprop}}},
        {"setrlimit",               {3,     3,    {false,  check_setrlimit}}},
        {"start",                   {1,     1,    {false,  check_stub}}},
        {"stop",                    {1,     1,    {false,  check_stub}}},
        {"swapon_all",              {0,     1,    {false,  check_swapon_all}}},
        {"enter_default_mount_ns",  {0,     0,    {false,  check_stub}}},
        {"symlink",                 {2,     2,    {true,   check_stub}}},
        {"sysclktz",                {1,     1,    {false,  check_sysclktz}}},
        {"trigger",                 {1,     1,    {false,  check_stub}}},
        {"verity_update_state",     {0,     0,    {false,  check_stub}}},
        {"wait",                    {1,     2,    {true,   check_wait}}},
        {"wait_for_prop",           {2,     2,    {false,  check_wait_for_prop}}},
        {"write",                   {2,     2,    {true,   check_stub}}},
    };
    // clang-format on
    return builtin_functions;
}
