// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/core/init/property_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fproperty_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fproperty_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fproperty_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fcore_2finit_2fproperty_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class InitMessage;
class InitMessageDefaultTypeInternal;
extern InitMessageDefaultTypeInternal _InitMessage_default_instance_;
class PropertyMessage;
class PropertyMessageDefaultTypeInternal;
extern PropertyMessageDefaultTypeInternal _PropertyMessage_default_instance_;
class PropertyMessage_ChangedMessage;
class PropertyMessage_ChangedMessageDefaultTypeInternal;
extern PropertyMessage_ChangedMessageDefaultTypeInternal _PropertyMessage_ChangedMessage_default_instance_;
class PropertyMessage_ControlMessage;
class PropertyMessage_ControlMessageDefaultTypeInternal;
extern PropertyMessage_ControlMessageDefaultTypeInternal _PropertyMessage_ControlMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InitMessage* Arena::CreateMaybeMessage<::InitMessage>(Arena*);
template<> ::PropertyMessage* Arena::CreateMaybeMessage<::PropertyMessage>(Arena*);
template<> ::PropertyMessage_ChangedMessage* Arena::CreateMaybeMessage<::PropertyMessage_ChangedMessage>(Arena*);
template<> ::PropertyMessage_ControlMessage* Arena::CreateMaybeMessage<::PropertyMessage_ControlMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PropertyMessage_ControlMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PropertyMessage.ControlMessage) */ {
 public:
  PropertyMessage_ControlMessage();
  virtual ~PropertyMessage_ControlMessage();

  PropertyMessage_ControlMessage(const PropertyMessage_ControlMessage& from);
  PropertyMessage_ControlMessage(PropertyMessage_ControlMessage&& from) noexcept
    : PropertyMessage_ControlMessage() {
    *this = ::std::move(from);
  }

  inline PropertyMessage_ControlMessage& operator=(const PropertyMessage_ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMessage_ControlMessage& operator=(PropertyMessage_ControlMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PropertyMessage_ControlMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyMessage_ControlMessage* internal_default_instance() {
    return reinterpret_cast<const PropertyMessage_ControlMessage*>(
               &_PropertyMessage_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropertyMessage_ControlMessage& a, PropertyMessage_ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMessage_ControlMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyMessage_ControlMessage* New() const final {
    return CreateMaybeMessage<PropertyMessage_ControlMessage>(nullptr);
  }

  PropertyMessage_ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyMessage_ControlMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PropertyMessage_ControlMessage& from);
  void MergeFrom(const PropertyMessage_ControlMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyMessage_ControlMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PropertyMessage.ControlMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kNameFieldNumber = 2,
    kPidFieldNumber = 3,
    kFdFieldNumber = 4,
  };
  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 fd = 4;
  bool has_fd() const;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:PropertyMessage.ControlMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  friend struct ::TableStruct_system_2fcore_2finit_2fproperty_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PropertyMessage_ChangedMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PropertyMessage.ChangedMessage) */ {
 public:
  PropertyMessage_ChangedMessage();
  virtual ~PropertyMessage_ChangedMessage();

  PropertyMessage_ChangedMessage(const PropertyMessage_ChangedMessage& from);
  PropertyMessage_ChangedMessage(PropertyMessage_ChangedMessage&& from) noexcept
    : PropertyMessage_ChangedMessage() {
    *this = ::std::move(from);
  }

  inline PropertyMessage_ChangedMessage& operator=(const PropertyMessage_ChangedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMessage_ChangedMessage& operator=(PropertyMessage_ChangedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PropertyMessage_ChangedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyMessage_ChangedMessage* internal_default_instance() {
    return reinterpret_cast<const PropertyMessage_ChangedMessage*>(
               &_PropertyMessage_ChangedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PropertyMessage_ChangedMessage& a, PropertyMessage_ChangedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMessage_ChangedMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyMessage_ChangedMessage* New() const final {
    return CreateMaybeMessage<PropertyMessage_ChangedMessage>(nullptr);
  }

  PropertyMessage_ChangedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyMessage_ChangedMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PropertyMessage_ChangedMessage& from);
  void MergeFrom(const PropertyMessage_ChangedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyMessage_ChangedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PropertyMessage.ChangedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:PropertyMessage.ChangedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_system_2fcore_2finit_2fproperty_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PropertyMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PropertyMessage) */ {
 public:
  PropertyMessage();
  virtual ~PropertyMessage();

  PropertyMessage(const PropertyMessage& from);
  PropertyMessage(PropertyMessage&& from) noexcept
    : PropertyMessage() {
    *this = ::std::move(from);
  }

  inline PropertyMessage& operator=(const PropertyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyMessage& operator=(PropertyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PropertyMessage& default_instance();

  enum MsgCase {
    kControlMessage = 1,
    kChangedMessage = 2,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyMessage* internal_default_instance() {
    return reinterpret_cast<const PropertyMessage*>(
               &_PropertyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PropertyMessage& a, PropertyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyMessage* New() const final {
    return CreateMaybeMessage<PropertyMessage>(nullptr);
  }

  PropertyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PropertyMessage& from);
  void MergeFrom(const PropertyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropertyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PropertyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PropertyMessage_ControlMessage ControlMessage;
  typedef PropertyMessage_ChangedMessage ChangedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kControlMessageFieldNumber = 1,
    kChangedMessageFieldNumber = 2,
  };
  // optional .PropertyMessage.ControlMessage control_message = 1;
  bool has_control_message() const;
  void clear_control_message();
  const ::PropertyMessage_ControlMessage& control_message() const;
  ::PropertyMessage_ControlMessage* release_control_message();
  ::PropertyMessage_ControlMessage* mutable_control_message();
  void set_allocated_control_message(::PropertyMessage_ControlMessage* control_message);

  // optional .PropertyMessage.ChangedMessage changed_message = 2;
  bool has_changed_message() const;
  void clear_changed_message();
  const ::PropertyMessage_ChangedMessage& changed_message() const;
  ::PropertyMessage_ChangedMessage* release_changed_message();
  ::PropertyMessage_ChangedMessage* mutable_changed_message();
  void set_allocated_changed_message(::PropertyMessage_ChangedMessage* changed_message);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:PropertyMessage)
 private:
  class _Internal;
  void set_has_control_message();
  void set_has_changed_message();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    ::PropertyMessage_ControlMessage* control_message_;
    ::PropertyMessage_ChangedMessage* changed_message_;
  } msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_system_2fcore_2finit_2fproperty_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InitMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:InitMessage) */ {
 public:
  InitMessage();
  virtual ~InitMessage();

  InitMessage(const InitMessage& from);
  InitMessage(InitMessage&& from) noexcept
    : InitMessage() {
    *this = ::std::move(from);
  }

  inline InitMessage& operator=(const InitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitMessage& operator=(InitMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InitMessage& default_instance();

  enum MsgCase {
    kLoadPersistentProperties = 1,
    kStopSendingMessages = 2,
    kStartSendingMessages = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitMessage* internal_default_instance() {
    return reinterpret_cast<const InitMessage*>(
               &_InitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitMessage& a, InitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitMessage* New() const final {
    return CreateMaybeMessage<InitMessage>(nullptr);
  }

  InitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InitMessage& from);
  void MergeFrom(const InitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadPersistentPropertiesFieldNumber = 1,
    kStopSendingMessagesFieldNumber = 2,
    kStartSendingMessagesFieldNumber = 3,
  };
  // optional bool load_persistent_properties = 1;
  bool has_load_persistent_properties() const;
  void clear_load_persistent_properties();
  bool load_persistent_properties() const;
  void set_load_persistent_properties(bool value);

  // optional bool stop_sending_messages = 2;
  bool has_stop_sending_messages() const;
  void clear_stop_sending_messages();
  bool stop_sending_messages() const;
  void set_stop_sending_messages(bool value);

  // optional bool start_sending_messages = 3;
  bool has_start_sending_messages() const;
  void clear_start_sending_messages();
  bool start_sending_messages() const;
  void set_start_sending_messages(bool value);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:InitMessage)
 private:
  class _Internal;
  void set_has_load_persistent_properties();
  void set_has_stop_sending_messages();
  void set_has_start_sending_messages();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MsgUnion {
    MsgUnion() {}
    bool load_persistent_properties_;
    bool stop_sending_messages_;
    bool start_sending_messages_;
  } msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_system_2fcore_2finit_2fproperty_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropertyMessage_ControlMessage

// optional string msg = 1;
inline bool PropertyMessage_ControlMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyMessage_ControlMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PropertyMessage_ControlMessage::msg() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ControlMessage.msg)
  return msg_.GetNoArena();
}
inline void PropertyMessage_ControlMessage::set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PropertyMessage.ControlMessage.msg)
}
inline void PropertyMessage_ControlMessage::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PropertyMessage.ControlMessage.msg)
}
inline void PropertyMessage_ControlMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PropertyMessage.ControlMessage.msg)
}
inline void PropertyMessage_ControlMessage::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PropertyMessage.ControlMessage.msg)
}
inline std::string* PropertyMessage_ControlMessage::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:PropertyMessage.ControlMessage.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyMessage_ControlMessage::release_msg() {
  // @@protoc_insertion_point(field_release:PropertyMessage.ControlMessage.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyMessage_ControlMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:PropertyMessage.ControlMessage.msg)
}

// optional string name = 2;
inline bool PropertyMessage_ControlMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyMessage_ControlMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PropertyMessage_ControlMessage::name() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ControlMessage.name)
  return name_.GetNoArena();
}
inline void PropertyMessage_ControlMessage::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PropertyMessage.ControlMessage.name)
}
inline void PropertyMessage_ControlMessage::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PropertyMessage.ControlMessage.name)
}
inline void PropertyMessage_ControlMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PropertyMessage.ControlMessage.name)
}
inline void PropertyMessage_ControlMessage::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PropertyMessage.ControlMessage.name)
}
inline std::string* PropertyMessage_ControlMessage::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:PropertyMessage.ControlMessage.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyMessage_ControlMessage::release_name() {
  // @@protoc_insertion_point(field_release:PropertyMessage.ControlMessage.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyMessage_ControlMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PropertyMessage.ControlMessage.name)
}

// optional int32 pid = 3;
inline bool PropertyMessage_ControlMessage::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyMessage_ControlMessage::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropertyMessage_ControlMessage::pid() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ControlMessage.pid)
  return pid_;
}
inline void PropertyMessage_ControlMessage::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:PropertyMessage.ControlMessage.pid)
}

// optional int32 fd = 4;
inline bool PropertyMessage_ControlMessage::has_fd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyMessage_ControlMessage::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PropertyMessage_ControlMessage::fd() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ControlMessage.fd)
  return fd_;
}
inline void PropertyMessage_ControlMessage::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  fd_ = value;
  // @@protoc_insertion_point(field_set:PropertyMessage.ControlMessage.fd)
}

// -------------------------------------------------------------------

// PropertyMessage_ChangedMessage

// optional string name = 1;
inline bool PropertyMessage_ChangedMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyMessage_ChangedMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PropertyMessage_ChangedMessage::name() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ChangedMessage.name)
  return name_.GetNoArena();
}
inline void PropertyMessage_ChangedMessage::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PropertyMessage.ChangedMessage.name)
}
inline void PropertyMessage_ChangedMessage::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PropertyMessage.ChangedMessage.name)
}
inline void PropertyMessage_ChangedMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PropertyMessage.ChangedMessage.name)
}
inline void PropertyMessage_ChangedMessage::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PropertyMessage.ChangedMessage.name)
}
inline std::string* PropertyMessage_ChangedMessage::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:PropertyMessage.ChangedMessage.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyMessage_ChangedMessage::release_name() {
  // @@protoc_insertion_point(field_release:PropertyMessage.ChangedMessage.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyMessage_ChangedMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PropertyMessage.ChangedMessage.name)
}

// optional string value = 2;
inline bool PropertyMessage_ChangedMessage::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyMessage_ChangedMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PropertyMessage_ChangedMessage::value() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.ChangedMessage.value)
  return value_.GetNoArena();
}
inline void PropertyMessage_ChangedMessage::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PropertyMessage.ChangedMessage.value)
}
inline void PropertyMessage_ChangedMessage::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PropertyMessage.ChangedMessage.value)
}
inline void PropertyMessage_ChangedMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PropertyMessage.ChangedMessage.value)
}
inline void PropertyMessage_ChangedMessage::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PropertyMessage.ChangedMessage.value)
}
inline std::string* PropertyMessage_ChangedMessage::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:PropertyMessage.ChangedMessage.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PropertyMessage_ChangedMessage::release_value() {
  // @@protoc_insertion_point(field_release:PropertyMessage.ChangedMessage.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyMessage_ChangedMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:PropertyMessage.ChangedMessage.value)
}

// -------------------------------------------------------------------

// PropertyMessage

// optional .PropertyMessage.ControlMessage control_message = 1;
inline bool PropertyMessage::has_control_message() const {
  return msg_case() == kControlMessage;
}
inline void PropertyMessage::set_has_control_message() {
  _oneof_case_[0] = kControlMessage;
}
inline void PropertyMessage::clear_control_message() {
  if (has_control_message()) {
    delete msg_.control_message_;
    clear_has_msg();
  }
}
inline ::PropertyMessage_ControlMessage* PropertyMessage::release_control_message() {
  // @@protoc_insertion_point(field_release:PropertyMessage.control_message)
  if (has_control_message()) {
    clear_has_msg();
      ::PropertyMessage_ControlMessage* temp = msg_.control_message_;
    msg_.control_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PropertyMessage_ControlMessage& PropertyMessage::control_message() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.control_message)
  return has_control_message()
      ? *msg_.control_message_
      : *reinterpret_cast< ::PropertyMessage_ControlMessage*>(&::_PropertyMessage_ControlMessage_default_instance_);
}
inline ::PropertyMessage_ControlMessage* PropertyMessage::mutable_control_message() {
  if (!has_control_message()) {
    clear_msg();
    set_has_control_message();
    msg_.control_message_ = CreateMaybeMessage< ::PropertyMessage_ControlMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:PropertyMessage.control_message)
  return msg_.control_message_;
}

// optional .PropertyMessage.ChangedMessage changed_message = 2;
inline bool PropertyMessage::has_changed_message() const {
  return msg_case() == kChangedMessage;
}
inline void PropertyMessage::set_has_changed_message() {
  _oneof_case_[0] = kChangedMessage;
}
inline void PropertyMessage::clear_changed_message() {
  if (has_changed_message()) {
    delete msg_.changed_message_;
    clear_has_msg();
  }
}
inline ::PropertyMessage_ChangedMessage* PropertyMessage::release_changed_message() {
  // @@protoc_insertion_point(field_release:PropertyMessage.changed_message)
  if (has_changed_message()) {
    clear_has_msg();
      ::PropertyMessage_ChangedMessage* temp = msg_.changed_message_;
    msg_.changed_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PropertyMessage_ChangedMessage& PropertyMessage::changed_message() const {
  // @@protoc_insertion_point(field_get:PropertyMessage.changed_message)
  return has_changed_message()
      ? *msg_.changed_message_
      : *reinterpret_cast< ::PropertyMessage_ChangedMessage*>(&::_PropertyMessage_ChangedMessage_default_instance_);
}
inline ::PropertyMessage_ChangedMessage* PropertyMessage::mutable_changed_message() {
  if (!has_changed_message()) {
    clear_msg();
    set_has_changed_message();
    msg_.changed_message_ = CreateMaybeMessage< ::PropertyMessage_ChangedMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:PropertyMessage.changed_message)
  return msg_.changed_message_;
}

inline bool PropertyMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void PropertyMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline PropertyMessage::MsgCase PropertyMessage::msg_case() const {
  return PropertyMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitMessage

// optional bool load_persistent_properties = 1;
inline bool InitMessage::has_load_persistent_properties() const {
  return msg_case() == kLoadPersistentProperties;
}
inline void InitMessage::set_has_load_persistent_properties() {
  _oneof_case_[0] = kLoadPersistentProperties;
}
inline void InitMessage::clear_load_persistent_properties() {
  if (has_load_persistent_properties()) {
    msg_.load_persistent_properties_ = false;
    clear_has_msg();
  }
}
inline bool InitMessage::load_persistent_properties() const {
  // @@protoc_insertion_point(field_get:InitMessage.load_persistent_properties)
  if (has_load_persistent_properties()) {
    return msg_.load_persistent_properties_;
  }
  return false;
}
inline void InitMessage::set_load_persistent_properties(bool value) {
  if (!has_load_persistent_properties()) {
    clear_msg();
    set_has_load_persistent_properties();
  }
  msg_.load_persistent_properties_ = value;
  // @@protoc_insertion_point(field_set:InitMessage.load_persistent_properties)
}

// optional bool stop_sending_messages = 2;
inline bool InitMessage::has_stop_sending_messages() const {
  return msg_case() == kStopSendingMessages;
}
inline void InitMessage::set_has_stop_sending_messages() {
  _oneof_case_[0] = kStopSendingMessages;
}
inline void InitMessage::clear_stop_sending_messages() {
  if (has_stop_sending_messages()) {
    msg_.stop_sending_messages_ = false;
    clear_has_msg();
  }
}
inline bool InitMessage::stop_sending_messages() const {
  // @@protoc_insertion_point(field_get:InitMessage.stop_sending_messages)
  if (has_stop_sending_messages()) {
    return msg_.stop_sending_messages_;
  }
  return false;
}
inline void InitMessage::set_stop_sending_messages(bool value) {
  if (!has_stop_sending_messages()) {
    clear_msg();
    set_has_stop_sending_messages();
  }
  msg_.stop_sending_messages_ = value;
  // @@protoc_insertion_point(field_set:InitMessage.stop_sending_messages)
}

// optional bool start_sending_messages = 3;
inline bool InitMessage::has_start_sending_messages() const {
  return msg_case() == kStartSendingMessages;
}
inline void InitMessage::set_has_start_sending_messages() {
  _oneof_case_[0] = kStartSendingMessages;
}
inline void InitMessage::clear_start_sending_messages() {
  if (has_start_sending_messages()) {
    msg_.start_sending_messages_ = false;
    clear_has_msg();
  }
}
inline bool InitMessage::start_sending_messages() const {
  // @@protoc_insertion_point(field_get:InitMessage.start_sending_messages)
  if (has_start_sending_messages()) {
    return msg_.start_sending_messages_;
  }
  return false;
}
inline void InitMessage::set_start_sending_messages(bool value) {
  if (!has_start_sending_messages()) {
    clear_msg();
    set_has_start_sending_messages();
  }
  msg_.start_sending_messages_ = value;
  // @@protoc_insertion_point(field_set:InitMessage.start_sending_messages)
}

inline bool InitMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void InitMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline InitMessage::MsgCase InitMessage::msg_case() const {
  return InitMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fproperty_5fservice_2eproto
