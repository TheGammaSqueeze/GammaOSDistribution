// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/core/init/persistent_properties.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fpersistent_5fproperties_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fpersistent_5fproperties_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fpersistent_5fproperties_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fcore_2finit_2fpersistent_5fproperties_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class PersistentProperties;
class PersistentPropertiesDefaultTypeInternal;
extern PersistentPropertiesDefaultTypeInternal _PersistentProperties_default_instance_;
class PersistentProperties_PersistentPropertyRecord;
class PersistentProperties_PersistentPropertyRecordDefaultTypeInternal;
extern PersistentProperties_PersistentPropertyRecordDefaultTypeInternal _PersistentProperties_PersistentPropertyRecord_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PersistentProperties* Arena::CreateMaybeMessage<::PersistentProperties>(Arena*);
template<> ::PersistentProperties_PersistentPropertyRecord* Arena::CreateMaybeMessage<::PersistentProperties_PersistentPropertyRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PersistentProperties_PersistentPropertyRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PersistentProperties.PersistentPropertyRecord) */ {
 public:
  PersistentProperties_PersistentPropertyRecord();
  virtual ~PersistentProperties_PersistentPropertyRecord();

  PersistentProperties_PersistentPropertyRecord(const PersistentProperties_PersistentPropertyRecord& from);
  PersistentProperties_PersistentPropertyRecord(PersistentProperties_PersistentPropertyRecord&& from) noexcept
    : PersistentProperties_PersistentPropertyRecord() {
    *this = ::std::move(from);
  }

  inline PersistentProperties_PersistentPropertyRecord& operator=(const PersistentProperties_PersistentPropertyRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentProperties_PersistentPropertyRecord& operator=(PersistentProperties_PersistentPropertyRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PersistentProperties_PersistentPropertyRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentProperties_PersistentPropertyRecord* internal_default_instance() {
    return reinterpret_cast<const PersistentProperties_PersistentPropertyRecord*>(
               &_PersistentProperties_PersistentPropertyRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersistentProperties_PersistentPropertyRecord& a, PersistentProperties_PersistentPropertyRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentProperties_PersistentPropertyRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentProperties_PersistentPropertyRecord* New() const final {
    return CreateMaybeMessage<PersistentProperties_PersistentPropertyRecord>(nullptr);
  }

  PersistentProperties_PersistentPropertyRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentProperties_PersistentPropertyRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PersistentProperties_PersistentPropertyRecord& from);
  void MergeFrom(const PersistentProperties_PersistentPropertyRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersistentProperties_PersistentPropertyRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PersistentProperties.PersistentPropertyRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:PersistentProperties.PersistentPropertyRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_system_2fcore_2finit_2fpersistent_5fproperties_2eproto;
};
// -------------------------------------------------------------------

class PersistentProperties :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:PersistentProperties) */ {
 public:
  PersistentProperties();
  virtual ~PersistentProperties();

  PersistentProperties(const PersistentProperties& from);
  PersistentProperties(PersistentProperties&& from) noexcept
    : PersistentProperties() {
    *this = ::std::move(from);
  }

  inline PersistentProperties& operator=(const PersistentProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentProperties& operator=(PersistentProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PersistentProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistentProperties* internal_default_instance() {
    return reinterpret_cast<const PersistentProperties*>(
               &_PersistentProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PersistentProperties& a, PersistentProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentProperties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistentProperties* New() const final {
    return CreateMaybeMessage<PersistentProperties>(nullptr);
  }

  PersistentProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistentProperties>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PersistentProperties& from);
  void MergeFrom(const PersistentProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersistentProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PersistentProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PersistentProperties_PersistentPropertyRecord PersistentPropertyRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .PersistentProperties.PersistentPropertyRecord properties = 1;
  int properties_size() const;
  void clear_properties();
  ::PersistentProperties_PersistentPropertyRecord* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PersistentProperties_PersistentPropertyRecord >*
      mutable_properties();
  const ::PersistentProperties_PersistentPropertyRecord& properties(int index) const;
  ::PersistentProperties_PersistentPropertyRecord* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PersistentProperties_PersistentPropertyRecord >&
      properties() const;

  // @@protoc_insertion_point(class_scope:PersistentProperties)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PersistentProperties_PersistentPropertyRecord > properties_;
  friend struct ::TableStruct_system_2fcore_2finit_2fpersistent_5fproperties_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersistentProperties_PersistentPropertyRecord

// optional string name = 1;
inline bool PersistentProperties_PersistentPropertyRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistentProperties_PersistentPropertyRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistentProperties_PersistentPropertyRecord::name() const {
  // @@protoc_insertion_point(field_get:PersistentProperties.PersistentPropertyRecord.name)
  return name_.GetNoArena();
}
inline void PersistentProperties_PersistentPropertyRecord::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PersistentProperties.PersistentPropertyRecord.name)
}
inline void PersistentProperties_PersistentPropertyRecord::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PersistentProperties.PersistentPropertyRecord.name)
}
inline void PersistentProperties_PersistentPropertyRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PersistentProperties.PersistentPropertyRecord.name)
}
inline void PersistentProperties_PersistentPropertyRecord::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PersistentProperties.PersistentPropertyRecord.name)
}
inline std::string* PersistentProperties_PersistentPropertyRecord::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:PersistentProperties.PersistentPropertyRecord.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentProperties_PersistentPropertyRecord::release_name() {
  // @@protoc_insertion_point(field_release:PersistentProperties.PersistentPropertyRecord.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentProperties_PersistentPropertyRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PersistentProperties.PersistentPropertyRecord.name)
}

// optional string value = 2;
inline bool PersistentProperties_PersistentPropertyRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistentProperties_PersistentPropertyRecord::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PersistentProperties_PersistentPropertyRecord::value() const {
  // @@protoc_insertion_point(field_get:PersistentProperties.PersistentPropertyRecord.value)
  return value_.GetNoArena();
}
inline void PersistentProperties_PersistentPropertyRecord::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PersistentProperties.PersistentPropertyRecord.value)
}
inline void PersistentProperties_PersistentPropertyRecord::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PersistentProperties.PersistentPropertyRecord.value)
}
inline void PersistentProperties_PersistentPropertyRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PersistentProperties.PersistentPropertyRecord.value)
}
inline void PersistentProperties_PersistentPropertyRecord::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PersistentProperties.PersistentPropertyRecord.value)
}
inline std::string* PersistentProperties_PersistentPropertyRecord::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:PersistentProperties.PersistentPropertyRecord.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistentProperties_PersistentPropertyRecord::release_value() {
  // @@protoc_insertion_point(field_release:PersistentProperties.PersistentPropertyRecord.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistentProperties_PersistentPropertyRecord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:PersistentProperties.PersistentPropertyRecord.value)
}

// -------------------------------------------------------------------

// PersistentProperties

// repeated .PersistentProperties.PersistentPropertyRecord properties = 1;
inline int PersistentProperties::properties_size() const {
  return properties_.size();
}
inline void PersistentProperties::clear_properties() {
  properties_.Clear();
}
inline ::PersistentProperties_PersistentPropertyRecord* PersistentProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:PersistentProperties.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PersistentProperties_PersistentPropertyRecord >*
PersistentProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:PersistentProperties.properties)
  return &properties_;
}
inline const ::PersistentProperties_PersistentPropertyRecord& PersistentProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:PersistentProperties.properties)
  return properties_.Get(index);
}
inline ::PersistentProperties_PersistentPropertyRecord* PersistentProperties::add_properties() {
  // @@protoc_insertion_point(field_add:PersistentProperties.properties)
  return properties_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PersistentProperties_PersistentPropertyRecord >&
PersistentProperties::properties() const {
  // @@protoc_insertion_point(field_list:PersistentProperties.properties)
  return properties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2finit_2fpersistent_5fproperties_2eproto
