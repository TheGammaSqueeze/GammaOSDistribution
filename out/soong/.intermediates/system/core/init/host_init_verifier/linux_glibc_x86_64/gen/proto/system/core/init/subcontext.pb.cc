// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/core/init/subcontext.proto

#include "system/core/init/subcontext.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fsubcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fsubcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fsubcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2finit_2fsubcontext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto;
class SubcontextCommand_ExecuteCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextCommand_ExecuteCommand> _instance;
} _SubcontextCommand_ExecuteCommand_default_instance_;
class SubcontextCommand_ExpandArgsCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextCommand_ExpandArgsCommand> _instance;
} _SubcontextCommand_ExpandArgsCommand_default_instance_;
class SubcontextCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextCommand> _instance;
  const ::SubcontextCommand_ExecuteCommand* execute_command_;
  const ::SubcontextCommand_ExpandArgsCommand* expand_args_command_;
} _SubcontextCommand_default_instance_;
class SubcontextReply_FailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextReply_Failure> _instance;
} _SubcontextReply_Failure_default_instance_;
class SubcontextReply_ExpandArgsReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextReply_ExpandArgsReply> _instance;
} _SubcontextReply_ExpandArgsReply_default_instance_;
class SubcontextReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubcontextReply> _instance;
  bool success_;
  const ::SubcontextReply_Failure* failure_;
  const ::SubcontextReply_ExpandArgsReply* expand_args_reply_;
} _SubcontextReply_default_instance_;
static void InitDefaultsscc_info_SubcontextCommand_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextCommand_default_instance_;
    new (ptr) ::SubcontextCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubcontextCommand_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SubcontextCommand_system_2fcore_2finit_2fsubcontext_2eproto}, {
      &scc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto.base,
      &scc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto.base,}};

static void InitDefaultsscc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextCommand_ExecuteCommand_default_instance_;
    new (ptr) ::SubcontextCommand_ExecuteCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextCommand_ExecuteCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto}, {}};

static void InitDefaultsscc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextCommand_ExpandArgsCommand_default_instance_;
    new (ptr) ::SubcontextCommand_ExpandArgsCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextCommand_ExpandArgsCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto}, {}};

static void InitDefaultsscc_info_SubcontextReply_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextReply_default_instance_;
    new (ptr) ::SubcontextReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubcontextReply_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SubcontextReply_system_2fcore_2finit_2fsubcontext_2eproto}, {
      &scc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto.base,
      &scc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto.base,}};

static void InitDefaultsscc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextReply_ExpandArgsReply_default_instance_;
    new (ptr) ::SubcontextReply_ExpandArgsReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextReply_ExpandArgsReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto}, {}};

static void InitDefaultsscc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubcontextReply_Failure_default_instance_;
    new (ptr) ::SubcontextReply_Failure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubcontextReply_Failure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto}, {}};


// ===================================================================

void SubcontextCommand_ExecuteCommand::InitAsDefaultInstance() {
}
class SubcontextCommand_ExecuteCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextCommand_ExecuteCommand>()._has_bits_);
};

SubcontextCommand_ExecuteCommand::SubcontextCommand_ExecuteCommand()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextCommand.ExecuteCommand)
}
SubcontextCommand_ExecuteCommand::SubcontextCommand_ExecuteCommand(const SubcontextCommand_ExecuteCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubcontextCommand.ExecuteCommand)
}

void SubcontextCommand_ExecuteCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
}

SubcontextCommand_ExecuteCommand::~SubcontextCommand_ExecuteCommand() {
  // @@protoc_insertion_point(destructor:SubcontextCommand.ExecuteCommand)
  SharedDtor();
}

void SubcontextCommand_ExecuteCommand::SharedDtor() {
}

void SubcontextCommand_ExecuteCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextCommand_ExecuteCommand& SubcontextCommand_ExecuteCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextCommand_ExecuteCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextCommand_ExecuteCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextCommand.ExecuteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextCommand_ExecuteCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_args(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextCommand_ExecuteCommand::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextCommand.ExecuteCommand)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string args = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextCommand.ExecuteCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextCommand.ExecuteCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextCommand_ExecuteCommand::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextCommand.ExecuteCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string args = 1;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->args(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextCommand.ExecuteCommand)
}

size_t SubcontextCommand_ExecuteCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextCommand.ExecuteCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextCommand_ExecuteCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextCommand_ExecuteCommand*>(
      &from));
}

void SubcontextCommand_ExecuteCommand::MergeFrom(const SubcontextCommand_ExecuteCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextCommand.ExecuteCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
}

void SubcontextCommand_ExecuteCommand::CopyFrom(const SubcontextCommand_ExecuteCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextCommand.ExecuteCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextCommand_ExecuteCommand::IsInitialized() const {
  return true;
}

void SubcontextCommand_ExecuteCommand::InternalSwap(SubcontextCommand_ExecuteCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(CastToBase(&other->args_));
}

std::string SubcontextCommand_ExecuteCommand::GetTypeName() const {
  return "SubcontextCommand.ExecuteCommand";
}


// ===================================================================

void SubcontextCommand_ExpandArgsCommand::InitAsDefaultInstance() {
}
class SubcontextCommand_ExpandArgsCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextCommand_ExpandArgsCommand>()._has_bits_);
};

SubcontextCommand_ExpandArgsCommand::SubcontextCommand_ExpandArgsCommand()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextCommand.ExpandArgsCommand)
}
SubcontextCommand_ExpandArgsCommand::SubcontextCommand_ExpandArgsCommand(const SubcontextCommand_ExpandArgsCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubcontextCommand.ExpandArgsCommand)
}

void SubcontextCommand_ExpandArgsCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
}

SubcontextCommand_ExpandArgsCommand::~SubcontextCommand_ExpandArgsCommand() {
  // @@protoc_insertion_point(destructor:SubcontextCommand.ExpandArgsCommand)
  SharedDtor();
}

void SubcontextCommand_ExpandArgsCommand::SharedDtor() {
}

void SubcontextCommand_ExpandArgsCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextCommand_ExpandArgsCommand& SubcontextCommand_ExpandArgsCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextCommand_ExpandArgsCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextCommand_ExpandArgsCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextCommand.ExpandArgsCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextCommand_ExpandArgsCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_args(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextCommand_ExpandArgsCommand::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextCommand.ExpandArgsCommand)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string args = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextCommand.ExpandArgsCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextCommand.ExpandArgsCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextCommand_ExpandArgsCommand::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextCommand.ExpandArgsCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string args = 1;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->args(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextCommand.ExpandArgsCommand)
}

size_t SubcontextCommand_ExpandArgsCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextCommand.ExpandArgsCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextCommand_ExpandArgsCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextCommand_ExpandArgsCommand*>(
      &from));
}

void SubcontextCommand_ExpandArgsCommand::MergeFrom(const SubcontextCommand_ExpandArgsCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextCommand.ExpandArgsCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
}

void SubcontextCommand_ExpandArgsCommand::CopyFrom(const SubcontextCommand_ExpandArgsCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextCommand.ExpandArgsCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextCommand_ExpandArgsCommand::IsInitialized() const {
  return true;
}

void SubcontextCommand_ExpandArgsCommand::InternalSwap(SubcontextCommand_ExpandArgsCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(CastToBase(&other->args_));
}

std::string SubcontextCommand_ExpandArgsCommand::GetTypeName() const {
  return "SubcontextCommand.ExpandArgsCommand";
}


// ===================================================================

void SubcontextCommand::InitAsDefaultInstance() {
}
class SubcontextCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextCommand>()._has_bits_);
  static const ::SubcontextCommand_ExecuteCommand& execute_command(const SubcontextCommand* msg);
  static const ::SubcontextCommand_ExpandArgsCommand& expand_args_command(const SubcontextCommand* msg);
};

const ::SubcontextCommand_ExecuteCommand&
SubcontextCommand::_Internal::execute_command(const SubcontextCommand* msg) {
  return *msg->command_.execute_command_;
}
const ::SubcontextCommand_ExpandArgsCommand&
SubcontextCommand::_Internal::expand_args_command(const SubcontextCommand* msg) {
  return *msg->command_.expand_args_command_;
}
void SubcontextCommand::set_allocated_execute_command(::SubcontextCommand_ExecuteCommand* execute_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (execute_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execute_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execute_command, submessage_arena);
    }
    set_has_execute_command();
    command_.execute_command_ = execute_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SubcontextCommand.execute_command)
}
void SubcontextCommand::set_allocated_expand_args_command(::SubcontextCommand_ExpandArgsCommand* expand_args_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (expand_args_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expand_args_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expand_args_command, submessage_arena);
    }
    set_has_expand_args_command();
    command_.expand_args_command_ = expand_args_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SubcontextCommand.expand_args_command)
}
SubcontextCommand::SubcontextCommand()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextCommand)
}
SubcontextCommand::SubcontextCommand(const SubcontextCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kExecuteCommand: {
      mutable_execute_command()->::SubcontextCommand_ExecuteCommand::MergeFrom(from.execute_command());
      break;
    }
    case kExpandArgsCommand: {
      mutable_expand_args_command()->::SubcontextCommand_ExpandArgsCommand::MergeFrom(from.expand_args_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubcontextCommand)
}

void SubcontextCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
  clear_has_command();
}

SubcontextCommand::~SubcontextCommand() {
  // @@protoc_insertion_point(destructor:SubcontextCommand)
  SharedDtor();
}

void SubcontextCommand::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void SubcontextCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextCommand& SubcontextCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextCommand_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:SubcontextCommand)
  switch (command_case()) {
    case kExecuteCommand: {
      delete command_.execute_command_;
      break;
    }
    case kExpandArgsCommand: {
      delete command_.expand_args_command_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void SubcontextCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .SubcontextCommand.ExecuteCommand execute_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_execute_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubcontextCommand.ExpandArgsCommand expand_args_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_expand_args_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextCommand::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextCommand)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SubcontextCommand.ExecuteCommand execute_command = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_execute_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubcontextCommand.ExpandArgsCommand expand_args_command = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expand_args_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextCommand::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kExecuteCommand:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        1, _Internal::execute_command(this), output);
      break;
    case kExpandArgsCommand:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::expand_args_command(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextCommand)
}

size_t SubcontextCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextCommand)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // optional .SubcontextCommand.ExecuteCommand execute_command = 1;
    case kExecuteCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.execute_command_);
      break;
    }
    // optional .SubcontextCommand.ExpandArgsCommand expand_args_command = 2;
    case kExpandArgsCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.expand_args_command_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextCommand::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextCommand*>(
      &from));
}

void SubcontextCommand::MergeFrom(const SubcontextCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kExecuteCommand: {
      mutable_execute_command()->::SubcontextCommand_ExecuteCommand::MergeFrom(from.execute_command());
      break;
    }
    case kExpandArgsCommand: {
      mutable_expand_args_command()->::SubcontextCommand_ExpandArgsCommand::MergeFrom(from.expand_args_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void SubcontextCommand::CopyFrom(const SubcontextCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextCommand::IsInitialized() const {
  return true;
}

void SubcontextCommand::InternalSwap(SubcontextCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SubcontextCommand::GetTypeName() const {
  return "SubcontextCommand";
}


// ===================================================================

void SubcontextReply_Failure::InitAsDefaultInstance() {
}
class SubcontextReply_Failure::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextReply_Failure>()._has_bits_);
  static void set_has_error_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_errno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SubcontextReply_Failure::SubcontextReply_Failure()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextReply.Failure)
}
SubcontextReply_Failure::SubcontextReply_Failure(const SubcontextReply_Failure& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_string()) {
    error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
  }
  error_errno_ = from.error_errno_;
  // @@protoc_insertion_point(copy_constructor:SubcontextReply.Failure)
}

void SubcontextReply_Failure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto.base);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_errno_ = 0;
}

SubcontextReply_Failure::~SubcontextReply_Failure() {
  // @@protoc_insertion_point(destructor:SubcontextReply.Failure)
  SharedDtor();
}

void SubcontextReply_Failure::SharedDtor() {
  error_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubcontextReply_Failure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextReply_Failure& SubcontextReply_Failure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextReply_Failure_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextReply_Failure::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextReply.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_string_.ClearNonDefaultToEmptyNoArena();
  }
  error_errno_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextReply_Failure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string error_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 error_errno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_errno(&has_bits);
          error_errno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextReply_Failure::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextReply.Failure)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_string = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_errno = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_error_errno(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_errno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextReply.Failure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextReply.Failure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextReply_Failure::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextReply.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_string(), output);
  }

  // optional int32 error_errno = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->error_errno(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextReply.Failure)
}

size_t SubcontextReply_Failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextReply.Failure)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_string());
    }

    // optional int32 error_errno = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_errno());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextReply_Failure::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextReply_Failure*>(
      &from));
}

void SubcontextReply_Failure::MergeFrom(const SubcontextReply_Failure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextReply.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_errno_ = from.error_errno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubcontextReply_Failure::CopyFrom(const SubcontextReply_Failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextReply.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextReply_Failure::IsInitialized() const {
  return true;
}

void SubcontextReply_Failure::InternalSwap(SubcontextReply_Failure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_string_.Swap(&other->error_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_errno_, other->error_errno_);
}

std::string SubcontextReply_Failure::GetTypeName() const {
  return "SubcontextReply.Failure";
}


// ===================================================================

void SubcontextReply_ExpandArgsReply::InitAsDefaultInstance() {
}
class SubcontextReply_ExpandArgsReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextReply_ExpandArgsReply>()._has_bits_);
};

SubcontextReply_ExpandArgsReply::SubcontextReply_ExpandArgsReply()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextReply.ExpandArgsReply)
}
SubcontextReply_ExpandArgsReply::SubcontextReply_ExpandArgsReply(const SubcontextReply_ExpandArgsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      expanded_args_(from.expanded_args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SubcontextReply.ExpandArgsReply)
}

void SubcontextReply_ExpandArgsReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto.base);
}

SubcontextReply_ExpandArgsReply::~SubcontextReply_ExpandArgsReply() {
  // @@protoc_insertion_point(destructor:SubcontextReply.ExpandArgsReply)
  SharedDtor();
}

void SubcontextReply_ExpandArgsReply::SharedDtor() {
}

void SubcontextReply_ExpandArgsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextReply_ExpandArgsReply& SubcontextReply_ExpandArgsReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextReply_ExpandArgsReply_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextReply_ExpandArgsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextReply.ExpandArgsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expanded_args_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextReply_ExpandArgsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string expanded_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_expanded_args(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextReply_ExpandArgsReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextReply.ExpandArgsReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string expanded_args = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_expanded_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextReply.ExpandArgsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextReply.ExpandArgsReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextReply_ExpandArgsReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextReply.ExpandArgsReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string expanded_args = 1;
  for (int i = 0, n = this->expanded_args_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->expanded_args(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextReply.ExpandArgsReply)
}

size_t SubcontextReply_ExpandArgsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextReply.ExpandArgsReply)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string expanded_args = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->expanded_args_size());
  for (int i = 0, n = this->expanded_args_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->expanded_args(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextReply_ExpandArgsReply::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextReply_ExpandArgsReply*>(
      &from));
}

void SubcontextReply_ExpandArgsReply::MergeFrom(const SubcontextReply_ExpandArgsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextReply.ExpandArgsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expanded_args_.MergeFrom(from.expanded_args_);
}

void SubcontextReply_ExpandArgsReply::CopyFrom(const SubcontextReply_ExpandArgsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextReply.ExpandArgsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextReply_ExpandArgsReply::IsInitialized() const {
  return true;
}

void SubcontextReply_ExpandArgsReply::InternalSwap(SubcontextReply_ExpandArgsReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  expanded_args_.InternalSwap(CastToBase(&other->expanded_args_));
}

std::string SubcontextReply_ExpandArgsReply::GetTypeName() const {
  return "SubcontextReply.ExpandArgsReply";
}


// ===================================================================

void SubcontextReply::InitAsDefaultInstance() {
}
class SubcontextReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SubcontextReply>()._has_bits_);
  static const ::SubcontextReply_Failure& failure(const SubcontextReply* msg);
  static const ::SubcontextReply_ExpandArgsReply& expand_args_reply(const SubcontextReply* msg);
  static void set_has_trigger_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::SubcontextReply_Failure&
SubcontextReply::_Internal::failure(const SubcontextReply* msg) {
  return *msg->reply_.failure_;
}
const ::SubcontextReply_ExpandArgsReply&
SubcontextReply::_Internal::expand_args_reply(const SubcontextReply* msg) {
  return *msg->reply_.expand_args_reply_;
}
void SubcontextReply::set_allocated_failure(::SubcontextReply_Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_reply();
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    set_has_failure();
    reply_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_set_allocated:SubcontextReply.failure)
}
void SubcontextReply::set_allocated_expand_args_reply(::SubcontextReply_ExpandArgsReply* expand_args_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_reply();
  if (expand_args_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expand_args_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expand_args_reply, submessage_arena);
    }
    set_has_expand_args_reply();
    reply_.expand_args_reply_ = expand_args_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:SubcontextReply.expand_args_reply)
}
SubcontextReply::SubcontextReply()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubcontextReply)
}
SubcontextReply::SubcontextReply(const SubcontextReply& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_shutdown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trigger_shutdown()) {
    trigger_shutdown_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_shutdown_);
  }
  clear_has_reply();
  switch (from.reply_case()) {
    case kSuccess: {
      set_success(from.success());
      break;
    }
    case kFailure: {
      mutable_failure()->::SubcontextReply_Failure::MergeFrom(from.failure());
      break;
    }
    case kExpandArgsReply: {
      mutable_expand_args_reply()->::SubcontextReply_ExpandArgsReply::MergeFrom(from.expand_args_reply());
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SubcontextReply)
}

void SubcontextReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubcontextReply_system_2fcore_2finit_2fsubcontext_2eproto.base);
  trigger_shutdown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_reply();
}

SubcontextReply::~SubcontextReply() {
  // @@protoc_insertion_point(destructor:SubcontextReply)
  SharedDtor();
}

void SubcontextReply::SharedDtor() {
  trigger_shutdown_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_reply()) {
    clear_reply();
  }
}

void SubcontextReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubcontextReply& SubcontextReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubcontextReply_system_2fcore_2finit_2fsubcontext_2eproto.base);
  return *internal_default_instance();
}


void SubcontextReply::clear_reply() {
// @@protoc_insertion_point(one_of_clear_start:SubcontextReply)
  switch (reply_case()) {
    case kSuccess: {
      // No need to clear
      break;
    }
    case kFailure: {
      delete reply_.failure_;
      break;
    }
    case kExpandArgsReply: {
      delete reply_.expand_args_reply_;
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLY_NOT_SET;
}


void SubcontextReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SubcontextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trigger_shutdown_.ClearNonDefaultToEmptyNoArena();
  }
  clear_reply();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubcontextReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_success(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubcontextReply.Failure failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SubcontextReply.ExpandArgsReply expand_args_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_expand_args_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trigger_shutdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_trigger_shutdown(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubcontextReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubcontextReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_reply();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_.success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubcontextReply.Failure failure = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_failure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubcontextReply.ExpandArgsReply expand_args_reply = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expand_args_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trigger_shutdown = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_shutdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubcontextReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubcontextReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubcontextReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubcontextReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (reply_case()) {
    case kSuccess:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
      break;
    case kFailure:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::failure(this), output);
      break;
    case kExpandArgsReply:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::expand_args_reply(this), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional string trigger_shutdown = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->trigger_shutdown(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubcontextReply)
}

size_t SubcontextReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubcontextReply)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string trigger_shutdown = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trigger_shutdown());
  }

  switch (reply_case()) {
    // optional bool success = 1;
    case kSuccess: {
      total_size += 1 + 1;
      break;
    }
    // optional .SubcontextReply.Failure failure = 2;
    case kFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reply_.failure_);
      break;
    }
    // optional .SubcontextReply.ExpandArgsReply expand_args_reply = 3;
    case kExpandArgsReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reply_.expand_args_reply_);
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubcontextReply::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SubcontextReply*>(
      &from));
}

void SubcontextReply::MergeFrom(const SubcontextReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubcontextReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger_shutdown()) {
    _has_bits_[0] |= 0x00000001u;
    trigger_shutdown_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_shutdown_);
  }
  switch (from.reply_case()) {
    case kSuccess: {
      set_success(from.success());
      break;
    }
    case kFailure: {
      mutable_failure()->::SubcontextReply_Failure::MergeFrom(from.failure());
      break;
    }
    case kExpandArgsReply: {
      mutable_expand_args_reply()->::SubcontextReply_ExpandArgsReply::MergeFrom(from.expand_args_reply());
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
}

void SubcontextReply::CopyFrom(const SubcontextReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubcontextReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubcontextReply::IsInitialized() const {
  return true;
}

void SubcontextReply::InternalSwap(SubcontextReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trigger_shutdown_.Swap(&other->trigger_shutdown_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reply_, other->reply_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SubcontextReply::GetTypeName() const {
  return "SubcontextReply";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SubcontextCommand_ExecuteCommand* Arena::CreateMaybeMessage< ::SubcontextCommand_ExecuteCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextCommand_ExecuteCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SubcontextCommand_ExpandArgsCommand* Arena::CreateMaybeMessage< ::SubcontextCommand_ExpandArgsCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextCommand_ExpandArgsCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SubcontextCommand* Arena::CreateMaybeMessage< ::SubcontextCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::SubcontextReply_Failure* Arena::CreateMaybeMessage< ::SubcontextReply_Failure >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextReply_Failure >(arena);
}
template<> PROTOBUF_NOINLINE ::SubcontextReply_ExpandArgsReply* Arena::CreateMaybeMessage< ::SubcontextReply_ExpandArgsReply >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextReply_ExpandArgsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::SubcontextReply* Arena::CreateMaybeMessage< ::SubcontextReply >(Arena* arena) {
  return Arena::CreateInternal< ::SubcontextReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
