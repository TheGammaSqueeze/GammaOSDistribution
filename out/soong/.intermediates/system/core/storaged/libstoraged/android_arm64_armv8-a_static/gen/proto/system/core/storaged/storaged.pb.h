// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/core/storaged/storaged.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2fstoraged_2fstoraged_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2fstoraged_2fstoraged_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace storaged_proto {
class IOPerfHistory;
class IOPerfHistoryDefaultTypeInternal;
extern IOPerfHistoryDefaultTypeInternal _IOPerfHistory_default_instance_;
class IOUsage;
class IOUsageDefaultTypeInternal;
extern IOUsageDefaultTypeInternal _IOUsage_default_instance_;
class StoragedProto;
class StoragedProtoDefaultTypeInternal;
extern StoragedProtoDefaultTypeInternal _StoragedProto_default_instance_;
class TaskIOUsage;
class TaskIOUsageDefaultTypeInternal;
extern TaskIOUsageDefaultTypeInternal _TaskIOUsage_default_instance_;
class UidIOItem;
class UidIOItemDefaultTypeInternal;
extern UidIOItemDefaultTypeInternal _UidIOItem_default_instance_;
class UidIORecords;
class UidIORecordsDefaultTypeInternal;
extern UidIORecordsDefaultTypeInternal _UidIORecords_default_instance_;
class UidIOUsage;
class UidIOUsageDefaultTypeInternal;
extern UidIOUsageDefaultTypeInternal _UidIOUsage_default_instance_;
class UidRecord;
class UidRecordDefaultTypeInternal;
extern UidRecordDefaultTypeInternal _UidRecord_default_instance_;
}  // namespace storaged_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::storaged_proto::IOPerfHistory* Arena::CreateMaybeMessage<::storaged_proto::IOPerfHistory>(Arena*);
template<> ::storaged_proto::IOUsage* Arena::CreateMaybeMessage<::storaged_proto::IOUsage>(Arena*);
template<> ::storaged_proto::StoragedProto* Arena::CreateMaybeMessage<::storaged_proto::StoragedProto>(Arena*);
template<> ::storaged_proto::TaskIOUsage* Arena::CreateMaybeMessage<::storaged_proto::TaskIOUsage>(Arena*);
template<> ::storaged_proto::UidIOItem* Arena::CreateMaybeMessage<::storaged_proto::UidIOItem>(Arena*);
template<> ::storaged_proto::UidIORecords* Arena::CreateMaybeMessage<::storaged_proto::UidIORecords>(Arena*);
template<> ::storaged_proto::UidIOUsage* Arena::CreateMaybeMessage<::storaged_proto::UidIOUsage>(Arena*);
template<> ::storaged_proto::UidRecord* Arena::CreateMaybeMessage<::storaged_proto::UidRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storaged_proto {

// ===================================================================

class IOUsage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.IOUsage) */ {
 public:
  IOUsage();
  virtual ~IOUsage();

  IOUsage(const IOUsage& from);
  IOUsage(IOUsage&& from) noexcept
    : IOUsage() {
    *this = ::std::move(from);
  }

  inline IOUsage& operator=(const IOUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOUsage& operator=(IOUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IOUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOUsage* internal_default_instance() {
    return reinterpret_cast<const IOUsage*>(
               &_IOUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IOUsage& a, IOUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(IOUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOUsage* New() const final {
    return CreateMaybeMessage<IOUsage>(nullptr);
  }

  IOUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IOUsage& from);
  void MergeFrom(const IOUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IOUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.IOUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFgChgOnFieldNumber = 1,
    kRdFgChgOffFieldNumber = 2,
    kRdBgChgOnFieldNumber = 3,
    kRdBgChgOffFieldNumber = 4,
    kWrFgChgOnFieldNumber = 5,
    kWrFgChgOffFieldNumber = 6,
    kWrBgChgOnFieldNumber = 7,
    kWrBgChgOffFieldNumber = 8,
  };
  // optional uint64 rd_fg_chg_on = 1;
  bool has_rd_fg_chg_on() const;
  void clear_rd_fg_chg_on();
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_fg_chg_on() const;
  void set_rd_fg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rd_fg_chg_off = 2;
  bool has_rd_fg_chg_off() const;
  void clear_rd_fg_chg_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_fg_chg_off() const;
  void set_rd_fg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rd_bg_chg_on = 3;
  bool has_rd_bg_chg_on() const;
  void clear_rd_bg_chg_on();
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_bg_chg_on() const;
  void set_rd_bg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 rd_bg_chg_off = 4;
  bool has_rd_bg_chg_off() const;
  void clear_rd_bg_chg_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_bg_chg_off() const;
  void set_rd_bg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 wr_fg_chg_on = 5;
  bool has_wr_fg_chg_on() const;
  void clear_wr_fg_chg_on();
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_fg_chg_on() const;
  void set_wr_fg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 wr_fg_chg_off = 6;
  bool has_wr_fg_chg_off() const;
  void clear_wr_fg_chg_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_fg_chg_off() const;
  void set_wr_fg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 wr_bg_chg_on = 7;
  bool has_wr_bg_chg_on() const;
  void clear_wr_bg_chg_on();
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_bg_chg_on() const;
  void set_wr_bg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 wr_bg_chg_off = 8;
  bool has_wr_bg_chg_off() const;
  void clear_wr_bg_chg_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_bg_chg_off() const;
  void set_wr_bg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.IOUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_fg_chg_on_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_fg_chg_off_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_bg_chg_on_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rd_bg_chg_off_;
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_fg_chg_on_;
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_fg_chg_off_;
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_bg_chg_on_;
  ::PROTOBUF_NAMESPACE_ID::uint64 wr_bg_chg_off_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class TaskIOUsage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.TaskIOUsage) */ {
 public:
  TaskIOUsage();
  virtual ~TaskIOUsage();

  TaskIOUsage(const TaskIOUsage& from);
  TaskIOUsage(TaskIOUsage&& from) noexcept
    : TaskIOUsage() {
    *this = ::std::move(from);
  }

  inline TaskIOUsage& operator=(const TaskIOUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskIOUsage& operator=(TaskIOUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TaskIOUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskIOUsage* internal_default_instance() {
    return reinterpret_cast<const TaskIOUsage*>(
               &_TaskIOUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskIOUsage& a, TaskIOUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskIOUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskIOUsage* New() const final {
    return CreateMaybeMessage<TaskIOUsage>(nullptr);
  }

  TaskIOUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskIOUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskIOUsage& from);
  void MergeFrom(const TaskIOUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskIOUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.TaskIOUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kIosFieldNumber = 2,
  };
  // optional string task_name = 1;
  bool has_task_name() const;
  void clear_task_name();
  const std::string& task_name() const;
  void set_task_name(const std::string& value);
  void set_task_name(std::string&& value);
  void set_task_name(const char* value);
  void set_task_name(const char* value, size_t size);
  std::string* mutable_task_name();
  std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);

  // optional .storaged_proto.IOUsage ios = 2;
  bool has_ios() const;
  void clear_ios();
  const ::storaged_proto::IOUsage& ios() const;
  ::storaged_proto::IOUsage* release_ios();
  ::storaged_proto::IOUsage* mutable_ios();
  void set_allocated_ios(::storaged_proto::IOUsage* ios);

  // @@protoc_insertion_point(class_scope:storaged_proto.TaskIOUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::storaged_proto::IOUsage* ios_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class UidRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.UidRecord) */ {
 public:
  UidRecord();
  virtual ~UidRecord();

  UidRecord(const UidRecord& from);
  UidRecord(UidRecord&& from) noexcept
    : UidRecord() {
    *this = ::std::move(from);
  }

  inline UidRecord& operator=(const UidRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidRecord& operator=(UidRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidRecord* internal_default_instance() {
    return reinterpret_cast<const UidRecord*>(
               &_UidRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UidRecord& a, UidRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(UidRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidRecord* New() const final {
    return CreateMaybeMessage<UidRecord>(nullptr);
  }

  UidRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidRecord& from);
  void MergeFrom(const UidRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.UidRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIoFieldNumber = 4,
    kUidNameFieldNumber = 1,
    kUidIoFieldNumber = 3,
    kUserIdFieldNumber = 2,
  };
  // repeated .storaged_proto.TaskIOUsage task_io = 4;
  int task_io_size() const;
  void clear_task_io();
  ::storaged_proto::TaskIOUsage* mutable_task_io(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::TaskIOUsage >*
      mutable_task_io();
  const ::storaged_proto::TaskIOUsage& task_io(int index) const;
  ::storaged_proto::TaskIOUsage* add_task_io();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::TaskIOUsage >&
      task_io() const;

  // optional string uid_name = 1;
  bool has_uid_name() const;
  void clear_uid_name();
  const std::string& uid_name() const;
  void set_uid_name(const std::string& value);
  void set_uid_name(std::string&& value);
  void set_uid_name(const char* value);
  void set_uid_name(const char* value, size_t size);
  std::string* mutable_uid_name();
  std::string* release_uid_name();
  void set_allocated_uid_name(std::string* uid_name);

  // optional .storaged_proto.IOUsage uid_io = 3;
  bool has_uid_io() const;
  void clear_uid_io();
  const ::storaged_proto::IOUsage& uid_io() const;
  ::storaged_proto::IOUsage* release_uid_io();
  ::storaged_proto::IOUsage* mutable_uid_io();
  void set_allocated_uid_io(::storaged_proto::IOUsage* uid_io);

  // optional uint32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.UidRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::TaskIOUsage > task_io_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_name_;
  ::storaged_proto::IOUsage* uid_io_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class UidIORecords :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.UidIORecords) */ {
 public:
  UidIORecords();
  virtual ~UidIORecords();

  UidIORecords(const UidIORecords& from);
  UidIORecords(UidIORecords&& from) noexcept
    : UidIORecords() {
    *this = ::std::move(from);
  }

  inline UidIORecords& operator=(const UidIORecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidIORecords& operator=(UidIORecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidIORecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidIORecords* internal_default_instance() {
    return reinterpret_cast<const UidIORecords*>(
               &_UidIORecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UidIORecords& a, UidIORecords& b) {
    a.Swap(&b);
  }
  inline void Swap(UidIORecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidIORecords* New() const final {
    return CreateMaybeMessage<UidIORecords>(nullptr);
  }

  UidIORecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidIORecords>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidIORecords& from);
  void MergeFrom(const UidIORecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidIORecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.UidIORecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kStartTsFieldNumber = 1,
  };
  // repeated .storaged_proto.UidRecord entries = 2;
  int entries_size() const;
  void clear_entries();
  ::storaged_proto::UidRecord* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidRecord >*
      mutable_entries();
  const ::storaged_proto::UidRecord& entries(int index) const;
  ::storaged_proto::UidRecord* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidRecord >&
      entries() const;

  // optional uint64 start_ts = 1;
  bool has_start_ts() const;
  void clear_start_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts() const;
  void set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.UidIORecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidRecord > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class UidIOItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.UidIOItem) */ {
 public:
  UidIOItem();
  virtual ~UidIOItem();

  UidIOItem(const UidIOItem& from);
  UidIOItem(UidIOItem&& from) noexcept
    : UidIOItem() {
    *this = ::std::move(from);
  }

  inline UidIOItem& operator=(const UidIOItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidIOItem& operator=(UidIOItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidIOItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidIOItem* internal_default_instance() {
    return reinterpret_cast<const UidIOItem*>(
               &_UidIOItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UidIOItem& a, UidIOItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UidIOItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidIOItem* New() const final {
    return CreateMaybeMessage<UidIOItem>(nullptr);
  }

  UidIOItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidIOItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidIOItem& from);
  void MergeFrom(const UidIOItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidIOItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.UidIOItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 2,
    kEndTsFieldNumber = 1,
  };
  // optional .storaged_proto.UidIORecords records = 2;
  bool has_records() const;
  void clear_records();
  const ::storaged_proto::UidIORecords& records() const;
  ::storaged_proto::UidIORecords* release_records();
  ::storaged_proto::UidIORecords* mutable_records();
  void set_allocated_records(::storaged_proto::UidIORecords* records);

  // optional uint64 end_ts = 1;
  bool has_end_ts() const;
  void clear_end_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_ts() const;
  void set_end_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.UidIOItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::storaged_proto::UidIORecords* records_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_ts_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class UidIOUsage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.UidIOUsage) */ {
 public:
  UidIOUsage();
  virtual ~UidIOUsage();

  UidIOUsage(const UidIOUsage& from);
  UidIOUsage(UidIOUsage&& from) noexcept
    : UidIOUsage() {
    *this = ::std::move(from);
  }

  inline UidIOUsage& operator=(const UidIOUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidIOUsage& operator=(UidIOUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidIOUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidIOUsage* internal_default_instance() {
    return reinterpret_cast<const UidIOUsage*>(
               &_UidIOUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UidIOUsage& a, UidIOUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(UidIOUsage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidIOUsage* New() const final {
    return CreateMaybeMessage<UidIOUsage>(nullptr);
  }

  UidIOUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidIOUsage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidIOUsage& from);
  void MergeFrom(const UidIOUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidIOUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.UidIOUsage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidIoItemsFieldNumber = 2,
  };
  // repeated .storaged_proto.UidIOItem uid_io_items = 2;
  int uid_io_items_size() const;
  void clear_uid_io_items();
  ::storaged_proto::UidIOItem* mutable_uid_io_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidIOItem >*
      mutable_uid_io_items();
  const ::storaged_proto::UidIOItem& uid_io_items(int index) const;
  ::storaged_proto::UidIOItem* add_uid_io_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidIOItem >&
      uid_io_items() const;

  // @@protoc_insertion_point(class_scope:storaged_proto.UidIOUsage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidIOItem > uid_io_items_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class IOPerfHistory :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.IOPerfHistory) */ {
 public:
  IOPerfHistory();
  virtual ~IOPerfHistory();

  IOPerfHistory(const IOPerfHistory& from);
  IOPerfHistory(IOPerfHistory&& from) noexcept
    : IOPerfHistory() {
    *this = ::std::move(from);
  }

  inline IOPerfHistory& operator=(const IOPerfHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOPerfHistory& operator=(IOPerfHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IOPerfHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOPerfHistory* internal_default_instance() {
    return reinterpret_cast<const IOPerfHistory*>(
               &_IOPerfHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IOPerfHistory& a, IOPerfHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(IOPerfHistory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOPerfHistory* New() const final {
    return CreateMaybeMessage<IOPerfHistory>(nullptr);
  }

  IOPerfHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOPerfHistory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IOPerfHistory& from);
  void MergeFrom(const IOPerfHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IOPerfHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.IOPerfHistory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentPerfFieldNumber = 2,
    kDailyPerfFieldNumber = 4,
    kWeeklyPerfFieldNumber = 6,
    kDayStartSecFieldNumber = 1,
    kNrSamplesFieldNumber = 3,
    kNrDaysFieldNumber = 5,
    kNrWeeksFieldNumber = 7,
  };
  // repeated uint32 recent_perf = 2;
  int recent_perf_size() const;
  void clear_recent_perf();
  ::PROTOBUF_NAMESPACE_ID::uint32 recent_perf(int index) const;
  void set_recent_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_recent_perf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      recent_perf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_recent_perf();

  // repeated uint32 daily_perf = 4;
  int daily_perf_size() const;
  void clear_daily_perf();
  ::PROTOBUF_NAMESPACE_ID::uint32 daily_perf(int index) const;
  void set_daily_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_daily_perf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      daily_perf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_daily_perf();

  // repeated uint32 weekly_perf = 6;
  int weekly_perf_size() const;
  void clear_weekly_perf();
  ::PROTOBUF_NAMESPACE_ID::uint32 weekly_perf(int index) const;
  void set_weekly_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_weekly_perf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      weekly_perf() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_weekly_perf();

  // optional uint64 day_start_sec = 1;
  bool has_day_start_sec() const;
  void clear_day_start_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 day_start_sec() const;
  void set_day_start_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nr_samples = 3;
  bool has_nr_samples() const;
  void clear_nr_samples();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_samples() const;
  void set_nr_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nr_days = 5;
  bool has_nr_days() const;
  void clear_nr_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_days() const;
  void set_nr_days(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 nr_weeks = 7;
  bool has_nr_weeks() const;
  void clear_nr_weeks();
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_weeks() const;
  void set_nr_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.IOPerfHistory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > recent_perf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > daily_perf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > weekly_perf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 day_start_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_samples_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_days_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nr_weeks_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// -------------------------------------------------------------------

class StoragedProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:storaged_proto.StoragedProto) */ {
 public:
  StoragedProto();
  virtual ~StoragedProto();

  StoragedProto(const StoragedProto& from);
  StoragedProto(StoragedProto&& from) noexcept
    : StoragedProto() {
    *this = ::std::move(from);
  }

  inline StoragedProto& operator=(const StoragedProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoragedProto& operator=(StoragedProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StoragedProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoragedProto* internal_default_instance() {
    return reinterpret_cast<const StoragedProto*>(
               &_StoragedProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StoragedProto& a, StoragedProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StoragedProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoragedProto* New() const final {
    return CreateMaybeMessage<StoragedProto>(nullptr);
  }

  StoragedProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoragedProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StoragedProto& from);
  void MergeFrom(const StoragedProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoragedProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storaged_proto.StoragedProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 5,
    kUidIoUsageFieldNumber = 3,
    kPerfHistoryFieldNumber = 4,
    kCrcFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional bytes padding = 5;
  bool has_padding() const;
  void clear_padding();
  const std::string& padding() const;
  void set_padding(const std::string& value);
  void set_padding(std::string&& value);
  void set_padding(const char* value);
  void set_padding(const void* value, size_t size);
  std::string* mutable_padding();
  std::string* release_padding();
  void set_allocated_padding(std::string* padding);

  // optional .storaged_proto.UidIOUsage uid_io_usage = 3;
  bool has_uid_io_usage() const;
  void clear_uid_io_usage();
  const ::storaged_proto::UidIOUsage& uid_io_usage() const;
  ::storaged_proto::UidIOUsage* release_uid_io_usage();
  ::storaged_proto::UidIOUsage* mutable_uid_io_usage();
  void set_allocated_uid_io_usage(::storaged_proto::UidIOUsage* uid_io_usage);

  // optional .storaged_proto.IOPerfHistory perf_history = 4;
  bool has_perf_history() const;
  void clear_perf_history();
  const ::storaged_proto::IOPerfHistory& perf_history() const;
  ::storaged_proto::IOPerfHistory* release_perf_history();
  ::storaged_proto::IOPerfHistory* mutable_perf_history();
  void set_allocated_perf_history(::storaged_proto::IOPerfHistory* perf_history);

  // optional uint32 crc = 1;
  bool has_crc() const;
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:storaged_proto.StoragedProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_;
  ::storaged_proto::UidIOUsage* uid_io_usage_;
  ::storaged_proto::IOPerfHistory* perf_history_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  friend struct ::TableStruct_system_2fcore_2fstoraged_2fstoraged_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IOUsage

// optional uint64 rd_fg_chg_on = 1;
inline bool IOUsage::has_rd_fg_chg_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IOUsage::clear_rd_fg_chg_on() {
  rd_fg_chg_on_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::rd_fg_chg_on() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.rd_fg_chg_on)
  return rd_fg_chg_on_;
}
inline void IOUsage::set_rd_fg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  rd_fg_chg_on_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.rd_fg_chg_on)
}

// optional uint64 rd_fg_chg_off = 2;
inline bool IOUsage::has_rd_fg_chg_off() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IOUsage::clear_rd_fg_chg_off() {
  rd_fg_chg_off_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::rd_fg_chg_off() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.rd_fg_chg_off)
  return rd_fg_chg_off_;
}
inline void IOUsage::set_rd_fg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  rd_fg_chg_off_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.rd_fg_chg_off)
}

// optional uint64 rd_bg_chg_on = 3;
inline bool IOUsage::has_rd_bg_chg_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IOUsage::clear_rd_bg_chg_on() {
  rd_bg_chg_on_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::rd_bg_chg_on() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.rd_bg_chg_on)
  return rd_bg_chg_on_;
}
inline void IOUsage::set_rd_bg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  rd_bg_chg_on_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.rd_bg_chg_on)
}

// optional uint64 rd_bg_chg_off = 4;
inline bool IOUsage::has_rd_bg_chg_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IOUsage::clear_rd_bg_chg_off() {
  rd_bg_chg_off_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::rd_bg_chg_off() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.rd_bg_chg_off)
  return rd_bg_chg_off_;
}
inline void IOUsage::set_rd_bg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  rd_bg_chg_off_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.rd_bg_chg_off)
}

// optional uint64 wr_fg_chg_on = 5;
inline bool IOUsage::has_wr_fg_chg_on() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IOUsage::clear_wr_fg_chg_on() {
  wr_fg_chg_on_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::wr_fg_chg_on() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.wr_fg_chg_on)
  return wr_fg_chg_on_;
}
inline void IOUsage::set_wr_fg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  wr_fg_chg_on_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.wr_fg_chg_on)
}

// optional uint64 wr_fg_chg_off = 6;
inline bool IOUsage::has_wr_fg_chg_off() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IOUsage::clear_wr_fg_chg_off() {
  wr_fg_chg_off_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::wr_fg_chg_off() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.wr_fg_chg_off)
  return wr_fg_chg_off_;
}
inline void IOUsage::set_wr_fg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  wr_fg_chg_off_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.wr_fg_chg_off)
}

// optional uint64 wr_bg_chg_on = 7;
inline bool IOUsage::has_wr_bg_chg_on() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IOUsage::clear_wr_bg_chg_on() {
  wr_bg_chg_on_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::wr_bg_chg_on() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.wr_bg_chg_on)
  return wr_bg_chg_on_;
}
inline void IOUsage::set_wr_bg_chg_on(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  wr_bg_chg_on_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.wr_bg_chg_on)
}

// optional uint64 wr_bg_chg_off = 8;
inline bool IOUsage::has_wr_bg_chg_off() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IOUsage::clear_wr_bg_chg_off() {
  wr_bg_chg_off_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOUsage::wr_bg_chg_off() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOUsage.wr_bg_chg_off)
  return wr_bg_chg_off_;
}
inline void IOUsage::set_wr_bg_chg_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  wr_bg_chg_off_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOUsage.wr_bg_chg_off)
}

// -------------------------------------------------------------------

// TaskIOUsage

// optional string task_name = 1;
inline bool TaskIOUsage::has_task_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskIOUsage::clear_task_name() {
  task_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskIOUsage::task_name() const {
  // @@protoc_insertion_point(field_get:storaged_proto.TaskIOUsage.task_name)
  return task_name_.GetNoArena();
}
inline void TaskIOUsage::set_task_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storaged_proto.TaskIOUsage.task_name)
}
inline void TaskIOUsage::set_task_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storaged_proto.TaskIOUsage.task_name)
}
inline void TaskIOUsage::set_task_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  task_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storaged_proto.TaskIOUsage.task_name)
}
inline void TaskIOUsage::set_task_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  task_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storaged_proto.TaskIOUsage.task_name)
}
inline std::string* TaskIOUsage::mutable_task_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:storaged_proto.TaskIOUsage.task_name)
  return task_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskIOUsage::release_task_name() {
  // @@protoc_insertion_point(field_release:storaged_proto.TaskIOUsage.task_name)
  if (!has_task_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return task_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskIOUsage::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name);
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.TaskIOUsage.task_name)
}

// optional .storaged_proto.IOUsage ios = 2;
inline bool TaskIOUsage::has_ios() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskIOUsage::clear_ios() {
  if (ios_ != nullptr) ios_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::storaged_proto::IOUsage& TaskIOUsage::ios() const {
  const ::storaged_proto::IOUsage* p = ios_;
  // @@protoc_insertion_point(field_get:storaged_proto.TaskIOUsage.ios)
  return p != nullptr ? *p : *reinterpret_cast<const ::storaged_proto::IOUsage*>(
      &::storaged_proto::_IOUsage_default_instance_);
}
inline ::storaged_proto::IOUsage* TaskIOUsage::release_ios() {
  // @@protoc_insertion_point(field_release:storaged_proto.TaskIOUsage.ios)
  _has_bits_[0] &= ~0x00000002u;
  ::storaged_proto::IOUsage* temp = ios_;
  ios_ = nullptr;
  return temp;
}
inline ::storaged_proto::IOUsage* TaskIOUsage::mutable_ios() {
  _has_bits_[0] |= 0x00000002u;
  if (ios_ == nullptr) {
    auto* p = CreateMaybeMessage<::storaged_proto::IOUsage>(GetArenaNoVirtual());
    ios_ = p;
  }
  // @@protoc_insertion_point(field_mutable:storaged_proto.TaskIOUsage.ios)
  return ios_;
}
inline void TaskIOUsage::set_allocated_ios(::storaged_proto::IOUsage* ios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ios_;
  }
  if (ios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ios, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ios_ = ios;
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.TaskIOUsage.ios)
}

// -------------------------------------------------------------------

// UidRecord

// optional string uid_name = 1;
inline bool UidRecord::has_uid_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidRecord::clear_uid_name() {
  uid_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidRecord::uid_name() const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidRecord.uid_name)
  return uid_name_.GetNoArena();
}
inline void UidRecord::set_uid_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storaged_proto.UidRecord.uid_name)
}
inline void UidRecord::set_uid_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storaged_proto.UidRecord.uid_name)
}
inline void UidRecord::set_uid_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storaged_proto.UidRecord.uid_name)
}
inline void UidRecord::set_uid_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storaged_proto.UidRecord.uid_name)
}
inline std::string* UidRecord::mutable_uid_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidRecord.uid_name)
  return uid_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidRecord::release_uid_name() {
  // @@protoc_insertion_point(field_release:storaged_proto.UidRecord.uid_name)
  if (!has_uid_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidRecord::set_allocated_uid_name(std::string* uid_name) {
  if (uid_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid_name);
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.UidRecord.uid_name)
}

// optional uint32 user_id = 2;
inline bool UidRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidRecord::clear_user_id() {
  user_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UidRecord::user_id() const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidRecord.user_id)
  return user_id_;
}
inline void UidRecord::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.UidRecord.user_id)
}

// optional .storaged_proto.IOUsage uid_io = 3;
inline bool UidRecord::has_uid_io() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidRecord::clear_uid_io() {
  if (uid_io_ != nullptr) uid_io_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::storaged_proto::IOUsage& UidRecord::uid_io() const {
  const ::storaged_proto::IOUsage* p = uid_io_;
  // @@protoc_insertion_point(field_get:storaged_proto.UidRecord.uid_io)
  return p != nullptr ? *p : *reinterpret_cast<const ::storaged_proto::IOUsage*>(
      &::storaged_proto::_IOUsage_default_instance_);
}
inline ::storaged_proto::IOUsage* UidRecord::release_uid_io() {
  // @@protoc_insertion_point(field_release:storaged_proto.UidRecord.uid_io)
  _has_bits_[0] &= ~0x00000002u;
  ::storaged_proto::IOUsage* temp = uid_io_;
  uid_io_ = nullptr;
  return temp;
}
inline ::storaged_proto::IOUsage* UidRecord::mutable_uid_io() {
  _has_bits_[0] |= 0x00000002u;
  if (uid_io_ == nullptr) {
    auto* p = CreateMaybeMessage<::storaged_proto::IOUsage>(GetArenaNoVirtual());
    uid_io_ = p;
  }
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidRecord.uid_io)
  return uid_io_;
}
inline void UidRecord::set_allocated_uid_io(::storaged_proto::IOUsage* uid_io) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uid_io_;
  }
  if (uid_io) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_io = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_io, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uid_io_ = uid_io;
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.UidRecord.uid_io)
}

// repeated .storaged_proto.TaskIOUsage task_io = 4;
inline int UidRecord::task_io_size() const {
  return task_io_.size();
}
inline void UidRecord::clear_task_io() {
  task_io_.Clear();
}
inline ::storaged_proto::TaskIOUsage* UidRecord::mutable_task_io(int index) {
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidRecord.task_io)
  return task_io_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::TaskIOUsage >*
UidRecord::mutable_task_io() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.UidRecord.task_io)
  return &task_io_;
}
inline const ::storaged_proto::TaskIOUsage& UidRecord::task_io(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidRecord.task_io)
  return task_io_.Get(index);
}
inline ::storaged_proto::TaskIOUsage* UidRecord::add_task_io() {
  // @@protoc_insertion_point(field_add:storaged_proto.UidRecord.task_io)
  return task_io_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::TaskIOUsage >&
UidRecord::task_io() const {
  // @@protoc_insertion_point(field_list:storaged_proto.UidRecord.task_io)
  return task_io_;
}

// -------------------------------------------------------------------

// UidIORecords

// optional uint64 start_ts = 1;
inline bool UidIORecords::has_start_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidIORecords::clear_start_ts() {
  start_ts_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UidIORecords::start_ts() const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidIORecords.start_ts)
  return start_ts_;
}
inline void UidIORecords::set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.UidIORecords.start_ts)
}

// repeated .storaged_proto.UidRecord entries = 2;
inline int UidIORecords::entries_size() const {
  return entries_.size();
}
inline void UidIORecords::clear_entries() {
  entries_.Clear();
}
inline ::storaged_proto::UidRecord* UidIORecords::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidIORecords.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidRecord >*
UidIORecords::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.UidIORecords.entries)
  return &entries_;
}
inline const ::storaged_proto::UidRecord& UidIORecords::entries(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidIORecords.entries)
  return entries_.Get(index);
}
inline ::storaged_proto::UidRecord* UidIORecords::add_entries() {
  // @@protoc_insertion_point(field_add:storaged_proto.UidIORecords.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidRecord >&
UidIORecords::entries() const {
  // @@protoc_insertion_point(field_list:storaged_proto.UidIORecords.entries)
  return entries_;
}

// -------------------------------------------------------------------

// UidIOItem

// optional uint64 end_ts = 1;
inline bool UidIOItem::has_end_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidIOItem::clear_end_ts() {
  end_ts_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UidIOItem::end_ts() const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidIOItem.end_ts)
  return end_ts_;
}
inline void UidIOItem::set_end_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ts_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.UidIOItem.end_ts)
}

// optional .storaged_proto.UidIORecords records = 2;
inline bool UidIOItem::has_records() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidIOItem::clear_records() {
  if (records_ != nullptr) records_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::storaged_proto::UidIORecords& UidIOItem::records() const {
  const ::storaged_proto::UidIORecords* p = records_;
  // @@protoc_insertion_point(field_get:storaged_proto.UidIOItem.records)
  return p != nullptr ? *p : *reinterpret_cast<const ::storaged_proto::UidIORecords*>(
      &::storaged_proto::_UidIORecords_default_instance_);
}
inline ::storaged_proto::UidIORecords* UidIOItem::release_records() {
  // @@protoc_insertion_point(field_release:storaged_proto.UidIOItem.records)
  _has_bits_[0] &= ~0x00000001u;
  ::storaged_proto::UidIORecords* temp = records_;
  records_ = nullptr;
  return temp;
}
inline ::storaged_proto::UidIORecords* UidIOItem::mutable_records() {
  _has_bits_[0] |= 0x00000001u;
  if (records_ == nullptr) {
    auto* p = CreateMaybeMessage<::storaged_proto::UidIORecords>(GetArenaNoVirtual());
    records_ = p;
  }
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidIOItem.records)
  return records_;
}
inline void UidIOItem::set_allocated_records(::storaged_proto::UidIORecords* records) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete records_;
  }
  if (records) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, records, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  records_ = records;
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.UidIOItem.records)
}

// -------------------------------------------------------------------

// UidIOUsage

// repeated .storaged_proto.UidIOItem uid_io_items = 2;
inline int UidIOUsage::uid_io_items_size() const {
  return uid_io_items_.size();
}
inline void UidIOUsage::clear_uid_io_items() {
  uid_io_items_.Clear();
}
inline ::storaged_proto::UidIOItem* UidIOUsage::mutable_uid_io_items(int index) {
  // @@protoc_insertion_point(field_mutable:storaged_proto.UidIOUsage.uid_io_items)
  return uid_io_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidIOItem >*
UidIOUsage::mutable_uid_io_items() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.UidIOUsage.uid_io_items)
  return &uid_io_items_;
}
inline const ::storaged_proto::UidIOItem& UidIOUsage::uid_io_items(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.UidIOUsage.uid_io_items)
  return uid_io_items_.Get(index);
}
inline ::storaged_proto::UidIOItem* UidIOUsage::add_uid_io_items() {
  // @@protoc_insertion_point(field_add:storaged_proto.UidIOUsage.uid_io_items)
  return uid_io_items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storaged_proto::UidIOItem >&
UidIOUsage::uid_io_items() const {
  // @@protoc_insertion_point(field_list:storaged_proto.UidIOUsage.uid_io_items)
  return uid_io_items_;
}

// -------------------------------------------------------------------

// IOPerfHistory

// optional uint64 day_start_sec = 1;
inline bool IOPerfHistory::has_day_start_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IOPerfHistory::clear_day_start_sec() {
  day_start_sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IOPerfHistory::day_start_sec() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.day_start_sec)
  return day_start_sec_;
}
inline void IOPerfHistory::set_day_start_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  day_start_sec_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.day_start_sec)
}

// repeated uint32 recent_perf = 2;
inline int IOPerfHistory::recent_perf_size() const {
  return recent_perf_.size();
}
inline void IOPerfHistory::clear_recent_perf() {
  recent_perf_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::recent_perf(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.recent_perf)
  return recent_perf_.Get(index);
}
inline void IOPerfHistory::set_recent_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  recent_perf_.Set(index, value);
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.recent_perf)
}
inline void IOPerfHistory::add_recent_perf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  recent_perf_.Add(value);
  // @@protoc_insertion_point(field_add:storaged_proto.IOPerfHistory.recent_perf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IOPerfHistory::recent_perf() const {
  // @@protoc_insertion_point(field_list:storaged_proto.IOPerfHistory.recent_perf)
  return recent_perf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IOPerfHistory::mutable_recent_perf() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.IOPerfHistory.recent_perf)
  return &recent_perf_;
}

// optional uint32 nr_samples = 3;
inline bool IOPerfHistory::has_nr_samples() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IOPerfHistory::clear_nr_samples() {
  nr_samples_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::nr_samples() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.nr_samples)
  return nr_samples_;
}
inline void IOPerfHistory::set_nr_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nr_samples_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.nr_samples)
}

// repeated uint32 daily_perf = 4;
inline int IOPerfHistory::daily_perf_size() const {
  return daily_perf_.size();
}
inline void IOPerfHistory::clear_daily_perf() {
  daily_perf_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::daily_perf(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.daily_perf)
  return daily_perf_.Get(index);
}
inline void IOPerfHistory::set_daily_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  daily_perf_.Set(index, value);
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.daily_perf)
}
inline void IOPerfHistory::add_daily_perf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  daily_perf_.Add(value);
  // @@protoc_insertion_point(field_add:storaged_proto.IOPerfHistory.daily_perf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IOPerfHistory::daily_perf() const {
  // @@protoc_insertion_point(field_list:storaged_proto.IOPerfHistory.daily_perf)
  return daily_perf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IOPerfHistory::mutable_daily_perf() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.IOPerfHistory.daily_perf)
  return &daily_perf_;
}

// optional uint32 nr_days = 5;
inline bool IOPerfHistory::has_nr_days() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IOPerfHistory::clear_nr_days() {
  nr_days_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::nr_days() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.nr_days)
  return nr_days_;
}
inline void IOPerfHistory::set_nr_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nr_days_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.nr_days)
}

// repeated uint32 weekly_perf = 6;
inline int IOPerfHistory::weekly_perf_size() const {
  return weekly_perf_.size();
}
inline void IOPerfHistory::clear_weekly_perf() {
  weekly_perf_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::weekly_perf(int index) const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.weekly_perf)
  return weekly_perf_.Get(index);
}
inline void IOPerfHistory::set_weekly_perf(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weekly_perf_.Set(index, value);
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.weekly_perf)
}
inline void IOPerfHistory::add_weekly_perf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weekly_perf_.Add(value);
  // @@protoc_insertion_point(field_add:storaged_proto.IOPerfHistory.weekly_perf)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IOPerfHistory::weekly_perf() const {
  // @@protoc_insertion_point(field_list:storaged_proto.IOPerfHistory.weekly_perf)
  return weekly_perf_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IOPerfHistory::mutable_weekly_perf() {
  // @@protoc_insertion_point(field_mutable_list:storaged_proto.IOPerfHistory.weekly_perf)
  return &weekly_perf_;
}

// optional uint32 nr_weeks = 7;
inline bool IOPerfHistory::has_nr_weeks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IOPerfHistory::clear_nr_weeks() {
  nr_weeks_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IOPerfHistory::nr_weeks() const {
  // @@protoc_insertion_point(field_get:storaged_proto.IOPerfHistory.nr_weeks)
  return nr_weeks_;
}
inline void IOPerfHistory::set_nr_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  nr_weeks_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.IOPerfHistory.nr_weeks)
}

// -------------------------------------------------------------------

// StoragedProto

// optional uint32 crc = 1;
inline bool StoragedProto::has_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoragedProto::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoragedProto::crc() const {
  // @@protoc_insertion_point(field_get:storaged_proto.StoragedProto.crc)
  return crc_;
}
inline void StoragedProto::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crc_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.StoragedProto.crc)
}

// optional uint32 version = 2;
inline bool StoragedProto::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StoragedProto::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StoragedProto::version() const {
  // @@protoc_insertion_point(field_get:storaged_proto.StoragedProto.version)
  return version_;
}
inline void StoragedProto::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  version_ = value;
  // @@protoc_insertion_point(field_set:storaged_proto.StoragedProto.version)
}

// optional .storaged_proto.UidIOUsage uid_io_usage = 3;
inline bool StoragedProto::has_uid_io_usage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoragedProto::clear_uid_io_usage() {
  if (uid_io_usage_ != nullptr) uid_io_usage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::storaged_proto::UidIOUsage& StoragedProto::uid_io_usage() const {
  const ::storaged_proto::UidIOUsage* p = uid_io_usage_;
  // @@protoc_insertion_point(field_get:storaged_proto.StoragedProto.uid_io_usage)
  return p != nullptr ? *p : *reinterpret_cast<const ::storaged_proto::UidIOUsage*>(
      &::storaged_proto::_UidIOUsage_default_instance_);
}
inline ::storaged_proto::UidIOUsage* StoragedProto::release_uid_io_usage() {
  // @@protoc_insertion_point(field_release:storaged_proto.StoragedProto.uid_io_usage)
  _has_bits_[0] &= ~0x00000002u;
  ::storaged_proto::UidIOUsage* temp = uid_io_usage_;
  uid_io_usage_ = nullptr;
  return temp;
}
inline ::storaged_proto::UidIOUsage* StoragedProto::mutable_uid_io_usage() {
  _has_bits_[0] |= 0x00000002u;
  if (uid_io_usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::storaged_proto::UidIOUsage>(GetArenaNoVirtual());
    uid_io_usage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:storaged_proto.StoragedProto.uid_io_usage)
  return uid_io_usage_;
}
inline void StoragedProto::set_allocated_uid_io_usage(::storaged_proto::UidIOUsage* uid_io_usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uid_io_usage_;
  }
  if (uid_io_usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_io_usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_io_usage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uid_io_usage_ = uid_io_usage;
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.StoragedProto.uid_io_usage)
}

// optional .storaged_proto.IOPerfHistory perf_history = 4;
inline bool StoragedProto::has_perf_history() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoragedProto::clear_perf_history() {
  if (perf_history_ != nullptr) perf_history_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::storaged_proto::IOPerfHistory& StoragedProto::perf_history() const {
  const ::storaged_proto::IOPerfHistory* p = perf_history_;
  // @@protoc_insertion_point(field_get:storaged_proto.StoragedProto.perf_history)
  return p != nullptr ? *p : *reinterpret_cast<const ::storaged_proto::IOPerfHistory*>(
      &::storaged_proto::_IOPerfHistory_default_instance_);
}
inline ::storaged_proto::IOPerfHistory* StoragedProto::release_perf_history() {
  // @@protoc_insertion_point(field_release:storaged_proto.StoragedProto.perf_history)
  _has_bits_[0] &= ~0x00000004u;
  ::storaged_proto::IOPerfHistory* temp = perf_history_;
  perf_history_ = nullptr;
  return temp;
}
inline ::storaged_proto::IOPerfHistory* StoragedProto::mutable_perf_history() {
  _has_bits_[0] |= 0x00000004u;
  if (perf_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::storaged_proto::IOPerfHistory>(GetArenaNoVirtual());
    perf_history_ = p;
  }
  // @@protoc_insertion_point(field_mutable:storaged_proto.StoragedProto.perf_history)
  return perf_history_;
}
inline void StoragedProto::set_allocated_perf_history(::storaged_proto::IOPerfHistory* perf_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete perf_history_;
  }
  if (perf_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perf_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perf_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  perf_history_ = perf_history;
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.StoragedProto.perf_history)
}

// optional bytes padding = 5;
inline bool StoragedProto::has_padding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoragedProto::clear_padding() {
  padding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoragedProto::padding() const {
  // @@protoc_insertion_point(field_get:storaged_proto.StoragedProto.padding)
  return padding_.GetNoArena();
}
inline void StoragedProto::set_padding(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storaged_proto.StoragedProto.padding)
}
inline void StoragedProto::set_padding(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  padding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storaged_proto.StoragedProto.padding)
}
inline void StoragedProto::set_padding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storaged_proto.StoragedProto.padding)
}
inline void StoragedProto::set_padding(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  padding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storaged_proto.StoragedProto.padding)
}
inline std::string* StoragedProto::mutable_padding() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:storaged_proto.StoragedProto.padding)
  return padding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoragedProto::release_padding() {
  // @@protoc_insertion_point(field_release:storaged_proto.StoragedProto.padding)
  if (!has_padding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return padding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoragedProto::set_allocated_padding(std::string* padding) {
  if (padding != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  padding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), padding);
  // @@protoc_insertion_point(field_set_allocated:storaged_proto.StoragedProto.padding)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storaged_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2fcore_2fstoraged_2fstoraged_2eproto
