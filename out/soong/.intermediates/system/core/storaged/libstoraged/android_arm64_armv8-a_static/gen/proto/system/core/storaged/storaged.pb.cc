// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/core/storaged/storaged.proto

#include "system/core/storaged/storaged.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_system_2fcore_2fstoraged_2fstoraged_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto;
namespace storaged_proto {
class IOUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOUsage> _instance;
} _IOUsage_default_instance_;
class TaskIOUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskIOUsage> _instance;
} _TaskIOUsage_default_instance_;
class UidRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidRecord> _instance;
} _UidRecord_default_instance_;
class UidIORecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidIORecords> _instance;
} _UidIORecords_default_instance_;
class UidIOItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidIOItem> _instance;
} _UidIOItem_default_instance_;
class UidIOUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidIOUsage> _instance;
} _UidIOUsage_default_instance_;
class IOPerfHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOPerfHistory> _instance;
} _IOPerfHistory_default_instance_;
class StoragedProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoragedProto> _instance;
} _StoragedProto_default_instance_;
}  // namespace storaged_proto
static void InitDefaultsscc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_IOPerfHistory_default_instance_;
    new (ptr) ::storaged_proto::IOPerfHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::IOPerfHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto}, {}};

static void InitDefaultsscc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_IOUsage_default_instance_;
    new (ptr) ::storaged_proto::IOUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::IOUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto}, {}};

static void InitDefaultsscc_info_StoragedProto_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_StoragedProto_default_instance_;
    new (ptr) ::storaged_proto::StoragedProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::StoragedProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoragedProto_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StoragedProto_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base,
      &scc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

static void InitDefaultsscc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_TaskIOUsage_default_instance_;
    new (ptr) ::storaged_proto::TaskIOUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::TaskIOUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

static void InitDefaultsscc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_UidIOItem_default_instance_;
    new (ptr) ::storaged_proto::UidIOItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::UidIOItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

static void InitDefaultsscc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_UidIORecords_default_instance_;
    new (ptr) ::storaged_proto::UidIORecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::UidIORecords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

static void InitDefaultsscc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_UidIOUsage_default_instance_;
    new (ptr) ::storaged_proto::UidIOUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::UidIOUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

static void InitDefaultsscc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storaged_proto::_UidRecord_default_instance_;
    new (ptr) ::storaged_proto::UidRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storaged_proto::UidRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto}, {
      &scc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base,
      &scc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base,}};

namespace storaged_proto {

// ===================================================================

void IOUsage::InitAsDefaultInstance() {
}
class IOUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<IOUsage>()._has_bits_);
  static void set_has_rd_fg_chg_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rd_fg_chg_off(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rd_bg_chg_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rd_bg_chg_off(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wr_fg_chg_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wr_fg_chg_off(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wr_bg_chg_on(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wr_bg_chg_off(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

IOUsage::IOUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.IOUsage)
}
IOUsage::IOUsage(const IOUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rd_fg_chg_on_, &from.rd_fg_chg_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&wr_bg_chg_off_) -
    reinterpret_cast<char*>(&rd_fg_chg_on_)) + sizeof(wr_bg_chg_off_));
  // @@protoc_insertion_point(copy_constructor:storaged_proto.IOUsage)
}

void IOUsage::SharedCtor() {
  ::memset(&rd_fg_chg_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wr_bg_chg_off_) -
      reinterpret_cast<char*>(&rd_fg_chg_on_)) + sizeof(wr_bg_chg_off_));
}

IOUsage::~IOUsage() {
  // @@protoc_insertion_point(destructor:storaged_proto.IOUsage)
  SharedDtor();
}

void IOUsage::SharedDtor() {
}

void IOUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOUsage& IOUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void IOUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.IOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rd_fg_chg_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wr_bg_chg_off_) -
        reinterpret_cast<char*>(&rd_fg_chg_on_)) + sizeof(wr_bg_chg_off_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 rd_fg_chg_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rd_fg_chg_on(&has_bits);
          rd_fg_chg_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rd_fg_chg_off = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rd_fg_chg_off(&has_bits);
          rd_fg_chg_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rd_bg_chg_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rd_bg_chg_on(&has_bits);
          rd_bg_chg_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rd_bg_chg_off = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rd_bg_chg_off(&has_bits);
          rd_bg_chg_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wr_fg_chg_on = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wr_fg_chg_on(&has_bits);
          wr_fg_chg_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wr_fg_chg_off = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_wr_fg_chg_off(&has_bits);
          wr_fg_chg_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wr_bg_chg_on = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_wr_bg_chg_on(&has_bits);
          wr_bg_chg_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 wr_bg_chg_off = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_wr_bg_chg_off(&has_bits);
          wr_bg_chg_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.IOUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rd_fg_chg_on = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_rd_fg_chg_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rd_fg_chg_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rd_fg_chg_off = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rd_fg_chg_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rd_fg_chg_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rd_bg_chg_on = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rd_bg_chg_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rd_bg_chg_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rd_bg_chg_off = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_rd_bg_chg_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rd_bg_chg_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wr_fg_chg_on = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_wr_fg_chg_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wr_fg_chg_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wr_fg_chg_off = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_wr_fg_chg_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wr_fg_chg_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wr_bg_chg_on = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_wr_bg_chg_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wr_bg_chg_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 wr_bg_chg_off = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_wr_bg_chg_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wr_bg_chg_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.IOUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.IOUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.IOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 rd_fg_chg_on = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->rd_fg_chg_on(), output);
  }

  // optional uint64 rd_fg_chg_off = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->rd_fg_chg_off(), output);
  }

  // optional uint64 rd_bg_chg_on = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->rd_bg_chg_on(), output);
  }

  // optional uint64 rd_bg_chg_off = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->rd_bg_chg_off(), output);
  }

  // optional uint64 wr_fg_chg_on = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->wr_fg_chg_on(), output);
  }

  // optional uint64 wr_fg_chg_off = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->wr_fg_chg_off(), output);
  }

  // optional uint64 wr_bg_chg_on = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->wr_bg_chg_on(), output);
  }

  // optional uint64 wr_bg_chg_off = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->wr_bg_chg_off(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.IOUsage)
}

size_t IOUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.IOUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 rd_fg_chg_on = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->rd_fg_chg_on());
    }

    // optional uint64 rd_fg_chg_off = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->rd_fg_chg_off());
    }

    // optional uint64 rd_bg_chg_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->rd_bg_chg_on());
    }

    // optional uint64 rd_bg_chg_off = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->rd_bg_chg_off());
    }

    // optional uint64 wr_fg_chg_on = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->wr_fg_chg_on());
    }

    // optional uint64 wr_fg_chg_off = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->wr_fg_chg_off());
    }

    // optional uint64 wr_bg_chg_on = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->wr_bg_chg_on());
    }

    // optional uint64 wr_bg_chg_off = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->wr_bg_chg_off());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IOUsage*>(
      &from));
}

void IOUsage::MergeFrom(const IOUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.IOUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rd_fg_chg_on_ = from.rd_fg_chg_on_;
    }
    if (cached_has_bits & 0x00000002u) {
      rd_fg_chg_off_ = from.rd_fg_chg_off_;
    }
    if (cached_has_bits & 0x00000004u) {
      rd_bg_chg_on_ = from.rd_bg_chg_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      rd_bg_chg_off_ = from.rd_bg_chg_off_;
    }
    if (cached_has_bits & 0x00000010u) {
      wr_fg_chg_on_ = from.wr_fg_chg_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      wr_fg_chg_off_ = from.wr_fg_chg_off_;
    }
    if (cached_has_bits & 0x00000040u) {
      wr_bg_chg_on_ = from.wr_bg_chg_on_;
    }
    if (cached_has_bits & 0x00000080u) {
      wr_bg_chg_off_ = from.wr_bg_chg_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IOUsage::CopyFrom(const IOUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.IOUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOUsage::IsInitialized() const {
  return true;
}

void IOUsage::InternalSwap(IOUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rd_fg_chg_on_, other->rd_fg_chg_on_);
  swap(rd_fg_chg_off_, other->rd_fg_chg_off_);
  swap(rd_bg_chg_on_, other->rd_bg_chg_on_);
  swap(rd_bg_chg_off_, other->rd_bg_chg_off_);
  swap(wr_fg_chg_on_, other->wr_fg_chg_on_);
  swap(wr_fg_chg_off_, other->wr_fg_chg_off_);
  swap(wr_bg_chg_on_, other->wr_bg_chg_on_);
  swap(wr_bg_chg_off_, other->wr_bg_chg_off_);
}

std::string IOUsage::GetTypeName() const {
  return "storaged_proto.IOUsage";
}


// ===================================================================

void TaskIOUsage::InitAsDefaultInstance() {
  ::storaged_proto::_TaskIOUsage_default_instance_._instance.get_mutable()->ios_ = const_cast< ::storaged_proto::IOUsage*>(
      ::storaged_proto::IOUsage::internal_default_instance());
}
class TaskIOUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskIOUsage>()._has_bits_);
  static void set_has_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::storaged_proto::IOUsage& ios(const TaskIOUsage* msg);
  static void set_has_ios(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::storaged_proto::IOUsage&
TaskIOUsage::_Internal::ios(const TaskIOUsage* msg) {
  return *msg->ios_;
}
TaskIOUsage::TaskIOUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.TaskIOUsage)
}
TaskIOUsage::TaskIOUsage(const TaskIOUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_name()) {
    task_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_name_);
  }
  if (from.has_ios()) {
    ios_ = new ::storaged_proto::IOUsage(*from.ios_);
  } else {
    ios_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:storaged_proto.TaskIOUsage)
}

void TaskIOUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  task_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ios_ = nullptr;
}

TaskIOUsage::~TaskIOUsage() {
  // @@protoc_insertion_point(destructor:storaged_proto.TaskIOUsage)
  SharedDtor();
}

void TaskIOUsage::SharedDtor() {
  task_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ios_;
}

void TaskIOUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskIOUsage& TaskIOUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void TaskIOUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.TaskIOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      task_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ios_ != nullptr);
      ios_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskIOUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string task_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_task_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .storaged_proto.IOUsage ios = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ios(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskIOUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.TaskIOUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string task_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .storaged_proto.IOUsage ios = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.TaskIOUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.TaskIOUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskIOUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.TaskIOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string task_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_name(), output);
  }

  // optional .storaged_proto.IOUsage ios = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::ios(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.TaskIOUsage)
}

size_t TaskIOUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.TaskIOUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string task_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional .storaged_proto.IOUsage ios = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ios_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskIOUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaskIOUsage*>(
      &from));
}

void TaskIOUsage::MergeFrom(const TaskIOUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.TaskIOUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      task_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ios()->::storaged_proto::IOUsage::MergeFrom(from.ios());
    }
  }
}

void TaskIOUsage::CopyFrom(const TaskIOUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.TaskIOUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskIOUsage::IsInitialized() const {
  return true;
}

void TaskIOUsage::InternalSwap(TaskIOUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_name_.Swap(&other->task_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ios_, other->ios_);
}

std::string TaskIOUsage::GetTypeName() const {
  return "storaged_proto.TaskIOUsage";
}


// ===================================================================

void UidRecord::InitAsDefaultInstance() {
  ::storaged_proto::_UidRecord_default_instance_._instance.get_mutable()->uid_io_ = const_cast< ::storaged_proto::IOUsage*>(
      ::storaged_proto::IOUsage::internal_default_instance());
}
class UidRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<UidRecord>()._has_bits_);
  static void set_has_uid_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::storaged_proto::IOUsage& uid_io(const UidRecord* msg);
  static void set_has_uid_io(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::storaged_proto::IOUsage&
UidRecord::_Internal::uid_io(const UidRecord* msg) {
  return *msg->uid_io_;
}
UidRecord::UidRecord()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.UidRecord)
}
UidRecord::UidRecord(const UidRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      task_io_(from.task_io_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uid_name()) {
    uid_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_name_);
  }
  if (from.has_uid_io()) {
    uid_io_ = new ::storaged_proto::IOUsage(*from.uid_io_);
  } else {
    uid_io_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:storaged_proto.UidRecord)
}

void UidRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  uid_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_io_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&uid_io_)) + sizeof(user_id_));
}

UidRecord::~UidRecord() {
  // @@protoc_insertion_point(destructor:storaged_proto.UidRecord)
  SharedDtor();
}

void UidRecord::SharedDtor() {
  uid_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uid_io_;
}

void UidRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidRecord& UidRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidRecord_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void UidRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.UidRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_io_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uid_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uid_io_ != nullptr);
      uid_io_->Clear();
    }
  }
  user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string uid_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_uid_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .storaged_proto.IOUsage uid_io = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_uid_io(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .storaged_proto.TaskIOUsage task_io = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_task_io(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.UidRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uid_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .storaged_proto.IOUsage uid_io = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_io()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .storaged_proto.TaskIOUsage task_io = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_task_io()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.UidRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.UidRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.UidRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uid_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid_name(), output);
  }

  // optional uint32 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional .storaged_proto.IOUsage uid_io = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::uid_io(this), output);
  }

  // repeated .storaged_proto.TaskIOUsage task_io = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_io_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->task_io(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.UidRecord)
}

size_t UidRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.UidRecord)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storaged_proto.TaskIOUsage task_io = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->task_io_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->task_io(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uid_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uid_name());
    }

    // optional .storaged_proto.IOUsage uid_io = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_io_);
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidRecord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidRecord*>(
      &from));
}

void UidRecord::MergeFrom(const UidRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.UidRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_io_.MergeFrom(from.task_io_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uid_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_uid_io()->::storaged_proto::IOUsage::MergeFrom(from.uid_io());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidRecord::CopyFrom(const UidRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.UidRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidRecord::IsInitialized() const {
  return true;
}

void UidRecord::InternalSwap(UidRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&task_io_)->InternalSwap(CastToBase(&other->task_io_));
  uid_name_.Swap(&other->uid_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_io_, other->uid_io_);
  swap(user_id_, other->user_id_);
}

std::string UidRecord::GetTypeName() const {
  return "storaged_proto.UidRecord";
}


// ===================================================================

void UidIORecords::InitAsDefaultInstance() {
}
class UidIORecords::_Internal {
 public:
  using HasBits = decltype(std::declval<UidIORecords>()._has_bits_);
  static void set_has_start_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidIORecords::UidIORecords()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.UidIORecords)
}
UidIORecords::UidIORecords(const UidIORecords& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_ts_ = from.start_ts_;
  // @@protoc_insertion_point(copy_constructor:storaged_proto.UidIORecords)
}

void UidIORecords::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  start_ts_ = PROTOBUF_ULONGLONG(0);
}

UidIORecords::~UidIORecords() {
  // @@protoc_insertion_point(destructor:storaged_proto.UidIORecords)
  SharedDtor();
}

void UidIORecords::SharedDtor() {
}

void UidIORecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidIORecords& UidIORecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidIORecords_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void UidIORecords::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.UidIORecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  start_ts_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidIORecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 start_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_ts(&has_bits);
          start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .storaged_proto.UidRecord entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidIORecords::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.UidIORecords)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ts = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .storaged_proto.UidRecord entries = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.UidIORecords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.UidIORecords)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidIORecords::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.UidIORecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_ts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // repeated .storaged_proto.UidRecord entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.UidIORecords)
}

size_t UidIORecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.UidIORecords)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storaged_proto.UidRecord entries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // optional uint64 start_ts = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidIORecords::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidIORecords*>(
      &from));
}

void UidIORecords::MergeFrom(const UidIORecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.UidIORecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_start_ts()) {
    set_start_ts(from.start_ts());
  }
}

void UidIORecords::CopyFrom(const UidIORecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.UidIORecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidIORecords::IsInitialized() const {
  return true;
}

void UidIORecords::InternalSwap(UidIORecords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(start_ts_, other->start_ts_);
}

std::string UidIORecords::GetTypeName() const {
  return "storaged_proto.UidIORecords";
}


// ===================================================================

void UidIOItem::InitAsDefaultInstance() {
  ::storaged_proto::_UidIOItem_default_instance_._instance.get_mutable()->records_ = const_cast< ::storaged_proto::UidIORecords*>(
      ::storaged_proto::UidIORecords::internal_default_instance());
}
class UidIOItem::_Internal {
 public:
  using HasBits = decltype(std::declval<UidIOItem>()._has_bits_);
  static void set_has_end_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::storaged_proto::UidIORecords& records(const UidIOItem* msg);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::storaged_proto::UidIORecords&
UidIOItem::_Internal::records(const UidIOItem* msg) {
  return *msg->records_;
}
UidIOItem::UidIOItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.UidIOItem)
}
UidIOItem::UidIOItem(const UidIOItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_records()) {
    records_ = new ::storaged_proto::UidIORecords(*from.records_);
  } else {
    records_ = nullptr;
  }
  end_ts_ = from.end_ts_;
  // @@protoc_insertion_point(copy_constructor:storaged_proto.UidIOItem)
}

void UidIOItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  ::memset(&records_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_ts_) -
      reinterpret_cast<char*>(&records_)) + sizeof(end_ts_));
}

UidIOItem::~UidIOItem() {
  // @@protoc_insertion_point(destructor:storaged_proto.UidIOItem)
  SharedDtor();
}

void UidIOItem::SharedDtor() {
  if (this != internal_default_instance()) delete records_;
}

void UidIOItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidIOItem& UidIOItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidIOItem_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void UidIOItem::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.UidIOItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(records_ != nullptr);
    records_->Clear();
  }
  end_ts_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidIOItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 end_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_end_ts(&has_bits);
          end_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .storaged_proto.UidIORecords records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidIOItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.UidIOItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 end_ts = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_end_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .storaged_proto.UidIORecords records = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.UidIOItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.UidIOItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidIOItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.UidIOItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 end_ts = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->end_ts(), output);
  }

  // optional .storaged_proto.UidIORecords records = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::records(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.UidIOItem)
}

size_t UidIOItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.UidIOItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .storaged_proto.UidIORecords records = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *records_);
    }

    // optional uint64 end_ts = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->end_ts());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidIOItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidIOItem*>(
      &from));
}

void UidIOItem::MergeFrom(const UidIOItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.UidIOItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_records()->::storaged_proto::UidIORecords::MergeFrom(from.records());
    }
    if (cached_has_bits & 0x00000002u) {
      end_ts_ = from.end_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidIOItem::CopyFrom(const UidIOItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.UidIOItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidIOItem::IsInitialized() const {
  return true;
}

void UidIOItem::InternalSwap(UidIOItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(records_, other->records_);
  swap(end_ts_, other->end_ts_);
}

std::string UidIOItem::GetTypeName() const {
  return "storaged_proto.UidIOItem";
}


// ===================================================================

void UidIOUsage::InitAsDefaultInstance() {
}
class UidIOUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<UidIOUsage>()._has_bits_);
};

UidIOUsage::UidIOUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.UidIOUsage)
}
UidIOUsage::UidIOUsage(const UidIOUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      uid_io_items_(from.uid_io_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storaged_proto.UidIOUsage)
}

void UidIOUsage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
}

UidIOUsage::~UidIOUsage() {
  // @@protoc_insertion_point(destructor:storaged_proto.UidIOUsage)
  SharedDtor();
}

void UidIOUsage::SharedDtor() {
}

void UidIOUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidIOUsage& UidIOUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidIOUsage_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void UidIOUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.UidIOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_io_items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidIOUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .storaged_proto.UidIOItem uid_io_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_uid_io_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidIOUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.UidIOUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storaged_proto.UidIOItem uid_io_items = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uid_io_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.UidIOUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.UidIOUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidIOUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.UidIOUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storaged_proto.UidIOItem uid_io_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uid_io_items_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->uid_io_items(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.UidIOUsage)
}

size_t UidIOUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.UidIOUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storaged_proto.UidIOItem uid_io_items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->uid_io_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uid_io_items(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidIOUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidIOUsage*>(
      &from));
}

void UidIOUsage::MergeFrom(const UidIOUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.UidIOUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_io_items_.MergeFrom(from.uid_io_items_);
}

void UidIOUsage::CopyFrom(const UidIOUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.UidIOUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidIOUsage::IsInitialized() const {
  return true;
}

void UidIOUsage::InternalSwap(UidIOUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&uid_io_items_)->InternalSwap(CastToBase(&other->uid_io_items_));
}

std::string UidIOUsage::GetTypeName() const {
  return "storaged_proto.UidIOUsage";
}


// ===================================================================

void IOPerfHistory::InitAsDefaultInstance() {
}
class IOPerfHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<IOPerfHistory>()._has_bits_);
  static void set_has_day_start_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nr_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nr_days(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

IOPerfHistory::IOPerfHistory()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.IOPerfHistory)
}
IOPerfHistory::IOPerfHistory(const IOPerfHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      recent_perf_(from.recent_perf_),
      daily_perf_(from.daily_perf_),
      weekly_perf_(from.weekly_perf_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_start_sec_, &from.day_start_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&nr_weeks_) -
    reinterpret_cast<char*>(&day_start_sec_)) + sizeof(nr_weeks_));
  // @@protoc_insertion_point(copy_constructor:storaged_proto.IOPerfHistory)
}

void IOPerfHistory::SharedCtor() {
  ::memset(&day_start_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nr_weeks_) -
      reinterpret_cast<char*>(&day_start_sec_)) + sizeof(nr_weeks_));
}

IOPerfHistory::~IOPerfHistory() {
  // @@protoc_insertion_point(destructor:storaged_proto.IOPerfHistory)
  SharedDtor();
}

void IOPerfHistory::SharedDtor() {
}

void IOPerfHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOPerfHistory& IOPerfHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOPerfHistory_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void IOPerfHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.IOPerfHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recent_perf_.Clear();
  daily_perf_.Clear();
  weekly_perf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&day_start_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nr_weeks_) -
        reinterpret_cast<char*>(&day_start_sec_)) + sizeof(nr_weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOPerfHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 day_start_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_day_start_sec(&has_bits);
          day_start_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 recent_perf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_recent_perf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_recent_perf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nr_samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nr_samples(&has_bits);
          nr_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 daily_perf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_daily_perf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_daily_perf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nr_days = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nr_days(&has_bits);
          nr_days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 weekly_perf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_weekly_perf(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_weekly_perf(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nr_weeks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nr_weeks(&has_bits);
          nr_weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOPerfHistory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.IOPerfHistory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 day_start_sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_day_start_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_start_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 recent_perf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_recent_perf())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recent_perf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nr_samples = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nr_samples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 daily_perf = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_daily_perf())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daily_perf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nr_days = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_nr_days(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 weekly_perf = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_weekly_perf())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weekly_perf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nr_weeks = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_nr_weeks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nr_weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.IOPerfHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.IOPerfHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOPerfHistory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.IOPerfHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 day_start_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->day_start_sec(), output);
  }

  // repeated uint32 recent_perf = 2;
  for (int i = 0, n = this->recent_perf_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->recent_perf(i), output);
  }

  // optional uint32 nr_samples = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->nr_samples(), output);
  }

  // repeated uint32 daily_perf = 4;
  for (int i = 0, n = this->daily_perf_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      4, this->daily_perf(i), output);
  }

  // optional uint32 nr_days = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->nr_days(), output);
  }

  // repeated uint32 weekly_perf = 6;
  for (int i = 0, n = this->weekly_perf_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      6, this->weekly_perf(i), output);
  }

  // optional uint32 nr_weeks = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->nr_weeks(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.IOPerfHistory)
}

size_t IOPerfHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.IOPerfHistory)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 recent_perf = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->recent_perf_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->recent_perf_size());
    total_size += data_size;
  }

  // repeated uint32 daily_perf = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->daily_perf_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->daily_perf_size());
    total_size += data_size;
  }

  // repeated uint32 weekly_perf = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->weekly_perf_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->weekly_perf_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 day_start_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->day_start_sec());
    }

    // optional uint32 nr_samples = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->nr_samples());
    }

    // optional uint32 nr_days = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->nr_days());
    }

    // optional uint32 nr_weeks = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->nr_weeks());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOPerfHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IOPerfHistory*>(
      &from));
}

void IOPerfHistory::MergeFrom(const IOPerfHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.IOPerfHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recent_perf_.MergeFrom(from.recent_perf_);
  daily_perf_.MergeFrom(from.daily_perf_);
  weekly_perf_.MergeFrom(from.weekly_perf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      day_start_sec_ = from.day_start_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      nr_samples_ = from.nr_samples_;
    }
    if (cached_has_bits & 0x00000004u) {
      nr_days_ = from.nr_days_;
    }
    if (cached_has_bits & 0x00000008u) {
      nr_weeks_ = from.nr_weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IOPerfHistory::CopyFrom(const IOPerfHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.IOPerfHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOPerfHistory::IsInitialized() const {
  return true;
}

void IOPerfHistory::InternalSwap(IOPerfHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recent_perf_.InternalSwap(&other->recent_perf_);
  daily_perf_.InternalSwap(&other->daily_perf_);
  weekly_perf_.InternalSwap(&other->weekly_perf_);
  swap(day_start_sec_, other->day_start_sec_);
  swap(nr_samples_, other->nr_samples_);
  swap(nr_days_, other->nr_days_);
  swap(nr_weeks_, other->nr_weeks_);
}

std::string IOPerfHistory::GetTypeName() const {
  return "storaged_proto.IOPerfHistory";
}


// ===================================================================

void StoragedProto::InitAsDefaultInstance() {
  ::storaged_proto::_StoragedProto_default_instance_._instance.get_mutable()->uid_io_usage_ = const_cast< ::storaged_proto::UidIOUsage*>(
      ::storaged_proto::UidIOUsage::internal_default_instance());
  ::storaged_proto::_StoragedProto_default_instance_._instance.get_mutable()->perf_history_ = const_cast< ::storaged_proto::IOPerfHistory*>(
      ::storaged_proto::IOPerfHistory::internal_default_instance());
}
class StoragedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StoragedProto>()._has_bits_);
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::storaged_proto::UidIOUsage& uid_io_usage(const StoragedProto* msg);
  static void set_has_uid_io_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::storaged_proto::IOPerfHistory& perf_history(const StoragedProto* msg);
  static void set_has_perf_history(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::storaged_proto::UidIOUsage&
StoragedProto::_Internal::uid_io_usage(const StoragedProto* msg) {
  return *msg->uid_io_usage_;
}
const ::storaged_proto::IOPerfHistory&
StoragedProto::_Internal::perf_history(const StoragedProto* msg) {
  return *msg->perf_history_;
}
StoragedProto::StoragedProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storaged_proto.StoragedProto)
}
StoragedProto::StoragedProto(const StoragedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_padding()) {
    padding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_);
  }
  if (from.has_uid_io_usage()) {
    uid_io_usage_ = new ::storaged_proto::UidIOUsage(*from.uid_io_usage_);
  } else {
    uid_io_usage_ = nullptr;
  }
  if (from.has_perf_history()) {
    perf_history_ = new ::storaged_proto::IOPerfHistory(*from.perf_history_);
  } else {
    perf_history_ = nullptr;
  }
  ::memcpy(&crc_, &from.crc_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&crc_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:storaged_proto.StoragedProto)
}

void StoragedProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoragedProto_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  padding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_io_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&uid_io_usage_)) + sizeof(version_));
}

StoragedProto::~StoragedProto() {
  // @@protoc_insertion_point(destructor:storaged_proto.StoragedProto)
  SharedDtor();
}

void StoragedProto::SharedDtor() {
  padding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete uid_io_usage_;
  if (this != internal_default_instance()) delete perf_history_;
}

void StoragedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoragedProto& StoragedProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoragedProto_system_2fcore_2fstoraged_2fstoraged_2eproto.base);
  return *internal_default_instance();
}


void StoragedProto::Clear() {
// @@protoc_insertion_point(message_clear_start:storaged_proto.StoragedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      padding_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(uid_io_usage_ != nullptr);
      uid_io_usage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(perf_history_ != nullptr);
      perf_history_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&crc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&crc_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoragedProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 crc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .storaged_proto.UidIOUsage uid_io_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_uid_io_usage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .storaged_proto.IOPerfHistory perf_history = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_perf_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes padding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_padding(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoragedProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:storaged_proto.StoragedProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 crc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_crc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .storaged_proto.UidIOUsage uid_io_usage = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_io_usage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .storaged_proto.IOPerfHistory perf_history = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perf_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes padding = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_padding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storaged_proto.StoragedProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storaged_proto.StoragedProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoragedProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storaged_proto.StoragedProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 crc = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->crc(), output);
  }

  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional .storaged_proto.UidIOUsage uid_io_usage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::uid_io_usage(this), output);
  }

  // optional .storaged_proto.IOPerfHistory perf_history = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::perf_history(this), output);
  }

  // optional bytes padding = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->padding(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:storaged_proto.StoragedProto)
}

size_t StoragedProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storaged_proto.StoragedProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes padding = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->padding());
    }

    // optional .storaged_proto.UidIOUsage uid_io_usage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_io_usage_);
    }

    // optional .storaged_proto.IOPerfHistory perf_history = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perf_history_);
    }

    // optional uint32 crc = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoragedProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StoragedProto*>(
      &from));
}

void StoragedProto::MergeFrom(const StoragedProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storaged_proto.StoragedProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      padding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.padding_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_uid_io_usage()->::storaged_proto::UidIOUsage::MergeFrom(from.uid_io_usage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_perf_history()->::storaged_proto::IOPerfHistory::MergeFrom(from.perf_history());
    }
    if (cached_has_bits & 0x00000008u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoragedProto::CopyFrom(const StoragedProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storaged_proto.StoragedProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragedProto::IsInitialized() const {
  return true;
}

void StoragedProto::InternalSwap(StoragedProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  padding_.Swap(&other->padding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_io_usage_, other->uid_io_usage_);
  swap(perf_history_, other->perf_history_);
  swap(crc_, other->crc_);
  swap(version_, other->version_);
}

std::string StoragedProto::GetTypeName() const {
  return "storaged_proto.StoragedProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace storaged_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::storaged_proto::IOUsage* Arena::CreateMaybeMessage< ::storaged_proto::IOUsage >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::IOUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::TaskIOUsage* Arena::CreateMaybeMessage< ::storaged_proto::TaskIOUsage >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::TaskIOUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::UidRecord* Arena::CreateMaybeMessage< ::storaged_proto::UidRecord >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::UidRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::UidIORecords* Arena::CreateMaybeMessage< ::storaged_proto::UidIORecords >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::UidIORecords >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::UidIOItem* Arena::CreateMaybeMessage< ::storaged_proto::UidIOItem >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::UidIOItem >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::UidIOUsage* Arena::CreateMaybeMessage< ::storaged_proto::UidIOUsage >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::UidIOUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::IOPerfHistory* Arena::CreateMaybeMessage< ::storaged_proto::IOPerfHistory >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::IOPerfHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::storaged_proto::StoragedProto* Arena::CreateMaybeMessage< ::storaged_proto::StoragedProto >(Arena* arena) {
  return Arena::CreateInternal< ::storaged_proto::StoragedProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
