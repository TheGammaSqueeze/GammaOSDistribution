// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android/snapshot/snapshot.proto

#include "android/snapshot/snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace snapshot {
class SnapshotStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotStatus> _instance;
} _SnapshotStatus_default_instance_;
class SnapshotUpdateStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotUpdateStatus> _instance;
} _SnapshotUpdateStatus_default_instance_;
class SnapshotMergeReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotMergeReport> _instance;
} _SnapshotMergeReport_default_instance_;
}  // namespace snapshot
}  // namespace android
static void InitDefaultsscc_info_SnapshotMergeReport_android_2fsnapshot_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::snapshot::_SnapshotMergeReport_default_instance_;
    new (ptr) ::android::snapshot::SnapshotMergeReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::snapshot::SnapshotMergeReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotMergeReport_android_2fsnapshot_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotMergeReport_android_2fsnapshot_2fsnapshot_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotStatus_android_2fsnapshot_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::snapshot::_SnapshotStatus_default_instance_;
    new (ptr) ::android::snapshot::SnapshotStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::snapshot::SnapshotStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotStatus_android_2fsnapshot_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotStatus_android_2fsnapshot_2fsnapshot_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotUpdateStatus_android_2fsnapshot_2fsnapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::snapshot::_SnapshotUpdateStatus_default_instance_;
    new (ptr) ::android::snapshot::SnapshotUpdateStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::snapshot::SnapshotUpdateStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotUpdateStatus_android_2fsnapshot_2fsnapshot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapshotUpdateStatus_android_2fsnapshot_2fsnapshot_2eproto}, {}};

namespace android {
namespace snapshot {
bool SnapshotState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SnapshotState_strings[4] = {};

static const char SnapshotState_names[] =
  "CREATED"
  "MERGE_COMPLETED"
  "MERGING"
  "NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SnapshotState_entries[] = {
  { {SnapshotState_names + 0, 7}, 1 },
  { {SnapshotState_names + 7, 15}, 3 },
  { {SnapshotState_names + 22, 7}, 2 },
  { {SnapshotState_names + 29, 4}, 0 },
};

static const int SnapshotState_entries_by_number[] = {
  3, // 0 -> NONE
  0, // 1 -> CREATED
  2, // 2 -> MERGING
  1, // 3 -> MERGE_COMPLETED
};

const std::string& SnapshotState_Name(
    SnapshotState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SnapshotState_entries,
          SnapshotState_entries_by_number,
          4, SnapshotState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SnapshotState_entries,
      SnapshotState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SnapshotState_strings[idx].get();
}
bool SnapshotState_Parse(
    const std::string& name, SnapshotState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SnapshotState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SnapshotState>(int_value);
  }
  return success;
}
bool MergePhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MergePhase_strings[3] = {};

static const char MergePhase_names[] =
  "FIRST_PHASE"
  "NO_MERGE"
  "SECOND_PHASE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MergePhase_entries[] = {
  { {MergePhase_names + 0, 11}, 1 },
  { {MergePhase_names + 11, 8}, 0 },
  { {MergePhase_names + 19, 12}, 2 },
};

static const int MergePhase_entries_by_number[] = {
  1, // 0 -> NO_MERGE
  0, // 1 -> FIRST_PHASE
  2, // 2 -> SECOND_PHASE
};

const std::string& MergePhase_Name(
    MergePhase value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MergePhase_entries,
          MergePhase_entries_by_number,
          3, MergePhase_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MergePhase_entries,
      MergePhase_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MergePhase_strings[idx].get();
}
bool MergePhase_Parse(
    const std::string& name, MergePhase* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MergePhase_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MergePhase>(int_value);
  }
  return success;
}
bool UpdateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UpdateState_strings[8] = {};

static const char UpdateState_names[] =
  "Cancelled"
  "Initiated"
  "MergeCompleted"
  "MergeFailed"
  "MergeNeedsReboot"
  "Merging"
  "None"
  "Unverified";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UpdateState_entries[] = {
  { {UpdateState_names + 0, 9}, 7 },
  { {UpdateState_names + 9, 9}, 1 },
  { {UpdateState_names + 18, 14}, 5 },
  { {UpdateState_names + 32, 11}, 6 },
  { {UpdateState_names + 43, 16}, 4 },
  { {UpdateState_names + 59, 7}, 3 },
  { {UpdateState_names + 66, 4}, 0 },
  { {UpdateState_names + 70, 10}, 2 },
};

static const int UpdateState_entries_by_number[] = {
  6, // 0 -> None
  1, // 1 -> Initiated
  7, // 2 -> Unverified
  5, // 3 -> Merging
  4, // 4 -> MergeNeedsReboot
  2, // 5 -> MergeCompleted
  3, // 6 -> MergeFailed
  0, // 7 -> Cancelled
};

const std::string& UpdateState_Name(
    UpdateState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UpdateState_entries,
          UpdateState_entries_by_number,
          8, UpdateState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UpdateState_entries,
      UpdateState_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UpdateState_strings[idx].get();
}
bool UpdateState_Parse(
    const std::string& name, UpdateState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UpdateState_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<UpdateState>(int_value);
  }
  return success;
}
bool MergeFailureCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MergeFailureCode_strings[21] = {};

static const char MergeFailureCode_names[] =
  "AcquireLock"
  "ActivateNewTable"
  "DirectReadConsistencyCheck"
  "ExpectedMergeTarget"
  "GetCowPathConsistencyCheck"
  "GetTableInfo"
  "GetTableParams"
  "ListSnapshots"
  "MemAlignConsistencyCheck"
  "Ok"
  "OpenCowConsistencyCheck"
  "OpenCowDirectConsistencyCheck"
  "ParseCowConsistencyCheck"
  "QuerySnapshotStatus"
  "ReadStatus"
  "UnexpectedMergeState"
  "UnknownTable"
  "UnknownTargetType"
  "UnmergedSectorsAfterCompletion"
  "WriteStatus"
  "WrongMergeCountConsistencyCheck";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MergeFailureCode_entries[] = {
  { {MergeFailureCode_names + 0, 11}, 6 },
  { {MergeFailureCode_names + 11, 16}, 5 },
  { {MergeFailureCode_names + 27, 26}, 19 },
  { {MergeFailureCode_names + 53, 19}, 11 },
  { {MergeFailureCode_names + 72, 26}, 14 },
  { {MergeFailureCode_names + 98, 12}, 2 },
  { {MergeFailureCode_names + 110, 14}, 4 },
  { {MergeFailureCode_names + 124, 13}, 7 },
  { {MergeFailureCode_names + 137, 24}, 18 },
  { {MergeFailureCode_names + 161, 2}, 0 },
  { {MergeFailureCode_names + 163, 23}, 15 },
  { {MergeFailureCode_names + 186, 29}, 17 },
  { {MergeFailureCode_names + 215, 24}, 16 },
  { {MergeFailureCode_names + 239, 19}, 10 },
  { {MergeFailureCode_names + 258, 10}, 1 },
  { {MergeFailureCode_names + 268, 20}, 13 },
  { {MergeFailureCode_names + 288, 12}, 3 },
  { {MergeFailureCode_names + 300, 17}, 9 },
  { {MergeFailureCode_names + 317, 30}, 12 },
  { {MergeFailureCode_names + 347, 11}, 8 },
  { {MergeFailureCode_names + 358, 31}, 20 },
};

static const int MergeFailureCode_entries_by_number[] = {
  9, // 0 -> Ok
  14, // 1 -> ReadStatus
  5, // 2 -> GetTableInfo
  16, // 3 -> UnknownTable
  6, // 4 -> GetTableParams
  1, // 5 -> ActivateNewTable
  0, // 6 -> AcquireLock
  7, // 7 -> ListSnapshots
  19, // 8 -> WriteStatus
  17, // 9 -> UnknownTargetType
  13, // 10 -> QuerySnapshotStatus
  3, // 11 -> ExpectedMergeTarget
  18, // 12 -> UnmergedSectorsAfterCompletion
  15, // 13 -> UnexpectedMergeState
  4, // 14 -> GetCowPathConsistencyCheck
  10, // 15 -> OpenCowConsistencyCheck
  12, // 16 -> ParseCowConsistencyCheck
  11, // 17 -> OpenCowDirectConsistencyCheck
  8, // 18 -> MemAlignConsistencyCheck
  2, // 19 -> DirectReadConsistencyCheck
  20, // 20 -> WrongMergeCountConsistencyCheck
};

const std::string& MergeFailureCode_Name(
    MergeFailureCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MergeFailureCode_entries,
          MergeFailureCode_entries_by_number,
          21, MergeFailureCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MergeFailureCode_entries,
      MergeFailureCode_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MergeFailureCode_strings[idx].get();
}
bool MergeFailureCode_Parse(
    const std::string& name, MergeFailureCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MergeFailureCode_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<MergeFailureCode>(int_value);
  }
  return success;
}

// ===================================================================

void SnapshotStatus::InitAsDefaultInstance() {
}
class SnapshotStatus::_Internal {
 public:
};

SnapshotStatus::SnapshotStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.snapshot.SnapshotStatus)
}
SnapshotStatus::SnapshotStatus(const SnapshotStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  compression_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.compression_algorithm().empty()) {
    compression_algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compression_algorithm_);
  }
  ::memcpy(&device_size_, &from.device_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_cow_size_) -
    reinterpret_cast<char*>(&device_size_)) + sizeof(estimated_cow_size_));
  // @@protoc_insertion_point(copy_constructor:android.snapshot.SnapshotStatus)
}

void SnapshotStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotStatus_android_2fsnapshot_2fsnapshot_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compression_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimated_cow_size_) -
      reinterpret_cast<char*>(&device_size_)) + sizeof(estimated_cow_size_));
}

SnapshotStatus::~SnapshotStatus() {
  // @@protoc_insertion_point(destructor:android.snapshot.SnapshotStatus)
  SharedDtor();
}

void SnapshotStatus::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compression_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotStatus& SnapshotStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotStatus_android_2fsnapshot_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:android.snapshot.SnapshotStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compression_algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimated_cow_size_) -
      reinterpret_cast<char*>(&device_size_)) + sizeof(estimated_cow_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.snapshot.SnapshotState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::android::snapshot::SnapshotState>(val));
        } else goto handle_unusual;
        continue;
      // uint64 device_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          device_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 snapshot_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          snapshot_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cow_partition_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cow_partition_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cow_file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cow_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sectors_allocated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sectors_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 metadata_sectors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          metadata_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compression_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          compression_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 old_partition_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          old_partition_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string compression_algorithm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_compression_algorithm(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 estimated_cow_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          estimated_cow_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.snapshot.SnapshotStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.snapshot.SnapshotStatus.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.snapshot.SnapshotState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::android::snapshot::SnapshotState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 snapshot_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &snapshot_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cow_partition_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cow_partition_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cow_file_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cow_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sectors_allocated = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sectors_allocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 metadata_sectors = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &metadata_sectors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compression_enabled = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 old_partition_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_partition_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string compression_algorithm = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_compression_algorithm()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->compression_algorithm().data(), static_cast<int>(this->compression_algorithm().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.snapshot.SnapshotStatus.compression_algorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 estimated_cow_size = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &estimated_cow_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.snapshot.SnapshotStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.snapshot.SnapshotStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.snapshot.SnapshotStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.snapshot.SnapshotStatus.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .android.snapshot.SnapshotState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // uint64 device_size = 3;
  if (this->device_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->device_size(), output);
  }

  // uint64 snapshot_size = 4;
  if (this->snapshot_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->snapshot_size(), output);
  }

  // uint64 cow_partition_size = 5;
  if (this->cow_partition_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->cow_partition_size(), output);
  }

  // uint64 cow_file_size = 6;
  if (this->cow_file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->cow_file_size(), output);
  }

  // uint64 sectors_allocated = 7;
  if (this->sectors_allocated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->sectors_allocated(), output);
  }

  // uint64 metadata_sectors = 8;
  if (this->metadata_sectors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->metadata_sectors(), output);
  }

  // bool compression_enabled = 9;
  if (this->compression_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->compression_enabled(), output);
  }

  // uint64 old_partition_size = 10;
  if (this->old_partition_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->old_partition_size(), output);
  }

  // string compression_algorithm = 11;
  if (this->compression_algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->compression_algorithm().data(), static_cast<int>(this->compression_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.snapshot.SnapshotStatus.compression_algorithm");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->compression_algorithm(), output);
  }

  // uint64 estimated_cow_size = 12;
  if (this->estimated_cow_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(12, this->estimated_cow_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.snapshot.SnapshotStatus)
}

size_t SnapshotStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.snapshot.SnapshotStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string compression_algorithm = 11;
  if (this->compression_algorithm().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->compression_algorithm());
  }

  // uint64 device_size = 3;
  if (this->device_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->device_size());
  }

  // uint64 snapshot_size = 4;
  if (this->snapshot_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->snapshot_size());
  }

  // uint64 cow_partition_size = 5;
  if (this->cow_partition_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cow_partition_size());
  }

  // .android.snapshot.SnapshotState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // bool compression_enabled = 9;
  if (this->compression_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint64 cow_file_size = 6;
  if (this->cow_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cow_file_size());
  }

  // uint64 sectors_allocated = 7;
  if (this->sectors_allocated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sectors_allocated());
  }

  // uint64 metadata_sectors = 8;
  if (this->metadata_sectors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->metadata_sectors());
  }

  // uint64 old_partition_size = 10;
  if (this->old_partition_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->old_partition_size());
  }

  // uint64 estimated_cow_size = 12;
  if (this->estimated_cow_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->estimated_cow_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnapshotStatus*>(
      &from));
}

void SnapshotStatus::MergeFrom(const SnapshotStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.snapshot.SnapshotStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.compression_algorithm().size() > 0) {

    compression_algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.compression_algorithm_);
  }
  if (from.device_size() != 0) {
    set_device_size(from.device_size());
  }
  if (from.snapshot_size() != 0) {
    set_snapshot_size(from.snapshot_size());
  }
  if (from.cow_partition_size() != 0) {
    set_cow_partition_size(from.cow_partition_size());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.compression_enabled() != 0) {
    set_compression_enabled(from.compression_enabled());
  }
  if (from.cow_file_size() != 0) {
    set_cow_file_size(from.cow_file_size());
  }
  if (from.sectors_allocated() != 0) {
    set_sectors_allocated(from.sectors_allocated());
  }
  if (from.metadata_sectors() != 0) {
    set_metadata_sectors(from.metadata_sectors());
  }
  if (from.old_partition_size() != 0) {
    set_old_partition_size(from.old_partition_size());
  }
  if (from.estimated_cow_size() != 0) {
    set_estimated_cow_size(from.estimated_cow_size());
  }
}

void SnapshotStatus::CopyFrom(const SnapshotStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.snapshot.SnapshotStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotStatus::IsInitialized() const {
  return true;
}

void SnapshotStatus::InternalSwap(SnapshotStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  compression_algorithm_.Swap(&other->compression_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_size_, other->device_size_);
  swap(snapshot_size_, other->snapshot_size_);
  swap(cow_partition_size_, other->cow_partition_size_);
  swap(state_, other->state_);
  swap(compression_enabled_, other->compression_enabled_);
  swap(cow_file_size_, other->cow_file_size_);
  swap(sectors_allocated_, other->sectors_allocated_);
  swap(metadata_sectors_, other->metadata_sectors_);
  swap(old_partition_size_, other->old_partition_size_);
  swap(estimated_cow_size_, other->estimated_cow_size_);
}

std::string SnapshotStatus::GetTypeName() const {
  return "android.snapshot.SnapshotStatus";
}


// ===================================================================

void SnapshotUpdateStatus::InitAsDefaultInstance() {
}
class SnapshotUpdateStatus::_Internal {
 public:
};

SnapshotUpdateStatus::SnapshotUpdateStatus()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.snapshot.SnapshotUpdateStatus)
}
SnapshotUpdateStatus::SnapshotUpdateStatus(const SnapshotUpdateStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_build_fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.source_build_fingerprint().empty()) {
    source_build_fingerprint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_build_fingerprint_);
  }
  ::memcpy(&sectors_allocated_, &from.sectors_allocated_,
    static_cast<size_t>(reinterpret_cast<char*>(&merge_failure_code_) -
    reinterpret_cast<char*>(&sectors_allocated_)) + sizeof(merge_failure_code_));
  // @@protoc_insertion_point(copy_constructor:android.snapshot.SnapshotUpdateStatus)
}

void SnapshotUpdateStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotUpdateStatus_android_2fsnapshot_2fsnapshot_2eproto.base);
  source_build_fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sectors_allocated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merge_failure_code_) -
      reinterpret_cast<char*>(&sectors_allocated_)) + sizeof(merge_failure_code_));
}

SnapshotUpdateStatus::~SnapshotUpdateStatus() {
  // @@protoc_insertion_point(destructor:android.snapshot.SnapshotUpdateStatus)
  SharedDtor();
}

void SnapshotUpdateStatus::SharedDtor() {
  source_build_fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotUpdateStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotUpdateStatus& SnapshotUpdateStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotUpdateStatus_android_2fsnapshot_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotUpdateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:android.snapshot.SnapshotUpdateStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sectors_allocated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merge_failure_code_) -
      reinterpret_cast<char*>(&sectors_allocated_)) + sizeof(merge_failure_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotUpdateStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.snapshot.UpdateState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::android::snapshot::UpdateState>(val));
        } else goto handle_unusual;
        continue;
      // uint64 sectors_allocated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sectors_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_sectors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 metadata_sectors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          metadata_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compression_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compression_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.snapshot.MergePhase merge_phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_merge_phase(static_cast<::android::snapshot::MergePhase>(val));
        } else goto handle_unusual;
        continue;
      // .android.snapshot.MergeFailureCode merge_failure_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_merge_failure_code(static_cast<::android::snapshot::MergeFailureCode>(val));
        } else goto handle_unusual;
        continue;
      // string source_build_fingerprint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_build_fingerprint(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotUpdateStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.snapshot.SnapshotUpdateStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .android.snapshot.UpdateState state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::android::snapshot::UpdateState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sectors_allocated = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sectors_allocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_sectors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_sectors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 metadata_sectors = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &metadata_sectors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compression_enabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.snapshot.MergePhase merge_phase = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_merge_phase(static_cast< ::android::snapshot::MergePhase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.snapshot.MergeFailureCode merge_failure_code = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_merge_failure_code(static_cast< ::android::snapshot::MergeFailureCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_build_fingerprint = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_build_fingerprint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_build_fingerprint().data(), static_cast<int>(this->source_build_fingerprint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.snapshot.SnapshotUpdateStatus.source_build_fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.snapshot.SnapshotUpdateStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.snapshot.SnapshotUpdateStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotUpdateStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.snapshot.SnapshotUpdateStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.snapshot.UpdateState state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint64 sectors_allocated = 2;
  if (this->sectors_allocated() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->sectors_allocated(), output);
  }

  // uint64 total_sectors = 3;
  if (this->total_sectors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->total_sectors(), output);
  }

  // uint64 metadata_sectors = 4;
  if (this->metadata_sectors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->metadata_sectors(), output);
  }

  // bool compression_enabled = 5;
  if (this->compression_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->compression_enabled(), output);
  }

  // .android.snapshot.MergePhase merge_phase = 6;
  if (this->merge_phase() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->merge_phase(), output);
  }

  // .android.snapshot.MergeFailureCode merge_failure_code = 7;
  if (this->merge_failure_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->merge_failure_code(), output);
  }

  // string source_build_fingerprint = 8;
  if (this->source_build_fingerprint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_build_fingerprint().data(), static_cast<int>(this->source_build_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.snapshot.SnapshotUpdateStatus.source_build_fingerprint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->source_build_fingerprint(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.snapshot.SnapshotUpdateStatus)
}

size_t SnapshotUpdateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.snapshot.SnapshotUpdateStatus)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_build_fingerprint = 8;
  if (this->source_build_fingerprint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_build_fingerprint());
  }

  // uint64 sectors_allocated = 2;
  if (this->sectors_allocated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sectors_allocated());
  }

  // uint64 total_sectors = 3;
  if (this->total_sectors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_sectors());
  }

  // .android.snapshot.UpdateState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // bool compression_enabled = 5;
  if (this->compression_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint64 metadata_sectors = 4;
  if (this->metadata_sectors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->metadata_sectors());
  }

  // .android.snapshot.MergePhase merge_phase = 6;
  if (this->merge_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->merge_phase());
  }

  // .android.snapshot.MergeFailureCode merge_failure_code = 7;
  if (this->merge_failure_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->merge_failure_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotUpdateStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnapshotUpdateStatus*>(
      &from));
}

void SnapshotUpdateStatus::MergeFrom(const SnapshotUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.snapshot.SnapshotUpdateStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_build_fingerprint().size() > 0) {

    source_build_fingerprint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_build_fingerprint_);
  }
  if (from.sectors_allocated() != 0) {
    set_sectors_allocated(from.sectors_allocated());
  }
  if (from.total_sectors() != 0) {
    set_total_sectors(from.total_sectors());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.compression_enabled() != 0) {
    set_compression_enabled(from.compression_enabled());
  }
  if (from.metadata_sectors() != 0) {
    set_metadata_sectors(from.metadata_sectors());
  }
  if (from.merge_phase() != 0) {
    set_merge_phase(from.merge_phase());
  }
  if (from.merge_failure_code() != 0) {
    set_merge_failure_code(from.merge_failure_code());
  }
}

void SnapshotUpdateStatus::CopyFrom(const SnapshotUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.snapshot.SnapshotUpdateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotUpdateStatus::IsInitialized() const {
  return true;
}

void SnapshotUpdateStatus::InternalSwap(SnapshotUpdateStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_build_fingerprint_.Swap(&other->source_build_fingerprint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sectors_allocated_, other->sectors_allocated_);
  swap(total_sectors_, other->total_sectors_);
  swap(state_, other->state_);
  swap(compression_enabled_, other->compression_enabled_);
  swap(metadata_sectors_, other->metadata_sectors_);
  swap(merge_phase_, other->merge_phase_);
  swap(merge_failure_code_, other->merge_failure_code_);
}

std::string SnapshotUpdateStatus::GetTypeName() const {
  return "android.snapshot.SnapshotUpdateStatus";
}


// ===================================================================

void SnapshotMergeReport::InitAsDefaultInstance() {
}
class SnapshotMergeReport::_Internal {
 public:
};

SnapshotMergeReport::SnapshotMergeReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.snapshot.SnapshotMergeReport)
}
SnapshotMergeReport::SnapshotMergeReport(const SnapshotMergeReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_build_fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.source_build_fingerprint().empty()) {
    source_build_fingerprint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_build_fingerprint_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&merge_failure_code_) -
    reinterpret_cast<char*>(&state_)) + sizeof(merge_failure_code_));
  // @@protoc_insertion_point(copy_constructor:android.snapshot.SnapshotMergeReport)
}

void SnapshotMergeReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotMergeReport_android_2fsnapshot_2fsnapshot_2eproto.base);
  source_build_fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merge_failure_code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(merge_failure_code_));
}

SnapshotMergeReport::~SnapshotMergeReport() {
  // @@protoc_insertion_point(destructor:android.snapshot.SnapshotMergeReport)
  SharedDtor();
}

void SnapshotMergeReport::SharedDtor() {
  source_build_fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotMergeReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotMergeReport& SnapshotMergeReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotMergeReport_android_2fsnapshot_2fsnapshot_2eproto.base);
  return *internal_default_instance();
}


void SnapshotMergeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:android.snapshot.SnapshotMergeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merge_failure_code_) -
      reinterpret_cast<char*>(&state_)) + sizeof(merge_failure_code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapshotMergeReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .android.snapshot.UpdateState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::android::snapshot::UpdateState>(val));
        } else goto handle_unusual;
        continue;
      // int32 resume_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          resume_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cow_file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cow_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compression_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          compression_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_cow_size_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_cow_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 estimated_cow_size_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          estimated_cow_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 boot_complete_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          boot_complete_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 boot_complete_to_merge_start_time_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          boot_complete_to_merge_start_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.snapshot.MergeFailureCode merge_failure_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_merge_failure_code(static_cast<::android::snapshot::MergeFailureCode>(val));
        } else goto handle_unusual;
        continue;
      // string source_build_fingerprint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_build_fingerprint(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapshotMergeReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.snapshot.SnapshotMergeReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .android.snapshot.UpdateState state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::android::snapshot::UpdateState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 resume_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &resume_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cow_file_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cow_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compression_enabled = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_cow_size_bytes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_cow_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 estimated_cow_size_bytes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &estimated_cow_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boot_complete_time_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boot_complete_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boot_complete_to_merge_start_time_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boot_complete_to_merge_start_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.snapshot.MergeFailureCode merge_failure_code = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_merge_failure_code(static_cast< ::android::snapshot::MergeFailureCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_build_fingerprint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_build_fingerprint()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_build_fingerprint().data(), static_cast<int>(this->source_build_fingerprint().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.snapshot.SnapshotMergeReport.source_build_fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.snapshot.SnapshotMergeReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.snapshot.SnapshotMergeReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapshotMergeReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.snapshot.SnapshotMergeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .android.snapshot.UpdateState state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // int32 resume_count = 2;
  if (this->resume_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->resume_count(), output);
  }

  // uint64 cow_file_size = 3;
  if (this->cow_file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->cow_file_size(), output);
  }

  // bool compression_enabled = 4;
  if (this->compression_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->compression_enabled(), output);
  }

  // uint64 total_cow_size_bytes = 5;
  if (this->total_cow_size_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->total_cow_size_bytes(), output);
  }

  // uint64 estimated_cow_size_bytes = 6;
  if (this->estimated_cow_size_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->estimated_cow_size_bytes(), output);
  }

  // uint32 boot_complete_time_ms = 7;
  if (this->boot_complete_time_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->boot_complete_time_ms(), output);
  }

  // uint32 boot_complete_to_merge_start_time_ms = 8;
  if (this->boot_complete_to_merge_start_time_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->boot_complete_to_merge_start_time_ms(), output);
  }

  // .android.snapshot.MergeFailureCode merge_failure_code = 9;
  if (this->merge_failure_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->merge_failure_code(), output);
  }

  // string source_build_fingerprint = 10;
  if (this->source_build_fingerprint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_build_fingerprint().data(), static_cast<int>(this->source_build_fingerprint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.snapshot.SnapshotMergeReport.source_build_fingerprint");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->source_build_fingerprint(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.snapshot.SnapshotMergeReport)
}

size_t SnapshotMergeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.snapshot.SnapshotMergeReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_build_fingerprint = 10;
  if (this->source_build_fingerprint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_build_fingerprint());
  }

  // .android.snapshot.UpdateState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // int32 resume_count = 2;
  if (this->resume_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->resume_count());
  }

  // uint64 cow_file_size = 3;
  if (this->cow_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cow_file_size());
  }

  // uint64 total_cow_size_bytes = 5;
  if (this->total_cow_size_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_cow_size_bytes());
  }

  // bool compression_enabled = 4;
  if (this->compression_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 boot_complete_time_ms = 7;
  if (this->boot_complete_time_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->boot_complete_time_ms());
  }

  // uint64 estimated_cow_size_bytes = 6;
  if (this->estimated_cow_size_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->estimated_cow_size_bytes());
  }

  // uint32 boot_complete_to_merge_start_time_ms = 8;
  if (this->boot_complete_to_merge_start_time_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->boot_complete_to_merge_start_time_ms());
  }

  // .android.snapshot.MergeFailureCode merge_failure_code = 9;
  if (this->merge_failure_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->merge_failure_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotMergeReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnapshotMergeReport*>(
      &from));
}

void SnapshotMergeReport::MergeFrom(const SnapshotMergeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.snapshot.SnapshotMergeReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_build_fingerprint().size() > 0) {

    source_build_fingerprint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_build_fingerprint_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.resume_count() != 0) {
    set_resume_count(from.resume_count());
  }
  if (from.cow_file_size() != 0) {
    set_cow_file_size(from.cow_file_size());
  }
  if (from.total_cow_size_bytes() != 0) {
    set_total_cow_size_bytes(from.total_cow_size_bytes());
  }
  if (from.compression_enabled() != 0) {
    set_compression_enabled(from.compression_enabled());
  }
  if (from.boot_complete_time_ms() != 0) {
    set_boot_complete_time_ms(from.boot_complete_time_ms());
  }
  if (from.estimated_cow_size_bytes() != 0) {
    set_estimated_cow_size_bytes(from.estimated_cow_size_bytes());
  }
  if (from.boot_complete_to_merge_start_time_ms() != 0) {
    set_boot_complete_to_merge_start_time_ms(from.boot_complete_to_merge_start_time_ms());
  }
  if (from.merge_failure_code() != 0) {
    set_merge_failure_code(from.merge_failure_code());
  }
}

void SnapshotMergeReport::CopyFrom(const SnapshotMergeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.snapshot.SnapshotMergeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMergeReport::IsInitialized() const {
  return true;
}

void SnapshotMergeReport::InternalSwap(SnapshotMergeReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_build_fingerprint_.Swap(&other->source_build_fingerprint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(resume_count_, other->resume_count_);
  swap(cow_file_size_, other->cow_file_size_);
  swap(total_cow_size_bytes_, other->total_cow_size_bytes_);
  swap(compression_enabled_, other->compression_enabled_);
  swap(boot_complete_time_ms_, other->boot_complete_time_ms_);
  swap(estimated_cow_size_bytes_, other->estimated_cow_size_bytes_);
  swap(boot_complete_to_merge_start_time_ms_, other->boot_complete_to_merge_start_time_ms_);
  swap(merge_failure_code_, other->merge_failure_code_);
}

std::string SnapshotMergeReport::GetTypeName() const {
  return "android.snapshot.SnapshotMergeReport";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace snapshot
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::snapshot::SnapshotStatus* Arena::CreateMaybeMessage< ::android::snapshot::SnapshotStatus >(Arena* arena) {
  return Arena::CreateInternal< ::android::snapshot::SnapshotStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::android::snapshot::SnapshotUpdateStatus* Arena::CreateMaybeMessage< ::android::snapshot::SnapshotUpdateStatus >(Arena* arena) {
  return Arena::CreateInternal< ::android::snapshot::SnapshotUpdateStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::android::snapshot::SnapshotMergeReport* Arena::CreateMaybeMessage< ::android::snapshot::SnapshotMergeReport >(Arena* arena) {
  return Arena::CreateInternal< ::android::snapshot::SnapshotMergeReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
