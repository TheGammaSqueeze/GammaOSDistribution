// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android/snapshot/snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_android_2fsnapshot_2fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_android_2fsnapshot_2fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_android_2fsnapshot_2fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_android_2fsnapshot_2fsnapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace snapshot {
class SnapshotMergeReport;
class SnapshotMergeReportDefaultTypeInternal;
extern SnapshotMergeReportDefaultTypeInternal _SnapshotMergeReport_default_instance_;
class SnapshotStatus;
class SnapshotStatusDefaultTypeInternal;
extern SnapshotStatusDefaultTypeInternal _SnapshotStatus_default_instance_;
class SnapshotUpdateStatus;
class SnapshotUpdateStatusDefaultTypeInternal;
extern SnapshotUpdateStatusDefaultTypeInternal _SnapshotUpdateStatus_default_instance_;
}  // namespace snapshot
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::snapshot::SnapshotMergeReport* Arena::CreateMaybeMessage<::android::snapshot::SnapshotMergeReport>(Arena*);
template<> ::android::snapshot::SnapshotStatus* Arena::CreateMaybeMessage<::android::snapshot::SnapshotStatus>(Arena*);
template<> ::android::snapshot::SnapshotUpdateStatus* Arena::CreateMaybeMessage<::android::snapshot::SnapshotUpdateStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace snapshot {

enum SnapshotState : int {
  NONE = 0,
  CREATED = 1,
  MERGING = 2,
  MERGE_COMPLETED = 3,
  SnapshotState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SnapshotState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SnapshotState_IsValid(int value);
constexpr SnapshotState SnapshotState_MIN = NONE;
constexpr SnapshotState SnapshotState_MAX = MERGE_COMPLETED;
constexpr int SnapshotState_ARRAYSIZE = SnapshotState_MAX + 1;

const std::string& SnapshotState_Name(SnapshotState value);
template<typename T>
inline const std::string& SnapshotState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnapshotState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnapshotState_Name.");
  return SnapshotState_Name(static_cast<SnapshotState>(enum_t_value));
}
bool SnapshotState_Parse(
    const std::string& name, SnapshotState* value);
enum MergePhase : int {
  NO_MERGE = 0,
  FIRST_PHASE = 1,
  SECOND_PHASE = 2,
  MergePhase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MergePhase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MergePhase_IsValid(int value);
constexpr MergePhase MergePhase_MIN = NO_MERGE;
constexpr MergePhase MergePhase_MAX = SECOND_PHASE;
constexpr int MergePhase_ARRAYSIZE = MergePhase_MAX + 1;

const std::string& MergePhase_Name(MergePhase value);
template<typename T>
inline const std::string& MergePhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergePhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergePhase_Name.");
  return MergePhase_Name(static_cast<MergePhase>(enum_t_value));
}
bool MergePhase_Parse(
    const std::string& name, MergePhase* value);
enum UpdateState : int {
  None = 0,
  Initiated = 1,
  Unverified = 2,
  Merging = 3,
  MergeNeedsReboot = 4,
  MergeCompleted = 5,
  MergeFailed = 6,
  Cancelled = 7,
  UpdateState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateState_IsValid(int value);
constexpr UpdateState UpdateState_MIN = None;
constexpr UpdateState UpdateState_MAX = Cancelled;
constexpr int UpdateState_ARRAYSIZE = UpdateState_MAX + 1;

const std::string& UpdateState_Name(UpdateState value);
template<typename T>
inline const std::string& UpdateState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateState_Name.");
  return UpdateState_Name(static_cast<UpdateState>(enum_t_value));
}
bool UpdateState_Parse(
    const std::string& name, UpdateState* value);
enum MergeFailureCode : int {
  Ok = 0,
  ReadStatus = 1,
  GetTableInfo = 2,
  UnknownTable = 3,
  GetTableParams = 4,
  ActivateNewTable = 5,
  AcquireLock = 6,
  ListSnapshots = 7,
  WriteStatus = 8,
  UnknownTargetType = 9,
  QuerySnapshotStatus = 10,
  ExpectedMergeTarget = 11,
  UnmergedSectorsAfterCompletion = 12,
  UnexpectedMergeState = 13,
  GetCowPathConsistencyCheck = 14,
  OpenCowConsistencyCheck = 15,
  ParseCowConsistencyCheck = 16,
  OpenCowDirectConsistencyCheck = 17,
  MemAlignConsistencyCheck = 18,
  DirectReadConsistencyCheck = 19,
  WrongMergeCountConsistencyCheck = 20,
  MergeFailureCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MergeFailureCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MergeFailureCode_IsValid(int value);
constexpr MergeFailureCode MergeFailureCode_MIN = Ok;
constexpr MergeFailureCode MergeFailureCode_MAX = WrongMergeCountConsistencyCheck;
constexpr int MergeFailureCode_ARRAYSIZE = MergeFailureCode_MAX + 1;

const std::string& MergeFailureCode_Name(MergeFailureCode value);
template<typename T>
inline const std::string& MergeFailureCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergeFailureCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergeFailureCode_Name.");
  return MergeFailureCode_Name(static_cast<MergeFailureCode>(enum_t_value));
}
bool MergeFailureCode_Parse(
    const std::string& name, MergeFailureCode* value);
// ===================================================================

class SnapshotStatus :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.snapshot.SnapshotStatus) */ {
 public:
  SnapshotStatus();
  virtual ~SnapshotStatus();

  SnapshotStatus(const SnapshotStatus& from);
  SnapshotStatus(SnapshotStatus&& from) noexcept
    : SnapshotStatus() {
    *this = ::std::move(from);
  }

  inline SnapshotStatus& operator=(const SnapshotStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotStatus& operator=(SnapshotStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SnapshotStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotStatus* internal_default_instance() {
    return reinterpret_cast<const SnapshotStatus*>(
               &_SnapshotStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnapshotStatus& a, SnapshotStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotStatus* New() const final {
    return CreateMaybeMessage<SnapshotStatus>(nullptr);
  }

  SnapshotStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnapshotStatus& from);
  void MergeFrom(const SnapshotStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.snapshot.SnapshotStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCompressionAlgorithmFieldNumber = 11,
    kDeviceSizeFieldNumber = 3,
    kSnapshotSizeFieldNumber = 4,
    kCowPartitionSizeFieldNumber = 5,
    kStateFieldNumber = 2,
    kCompressionEnabledFieldNumber = 9,
    kCowFileSizeFieldNumber = 6,
    kSectorsAllocatedFieldNumber = 7,
    kMetadataSectorsFieldNumber = 8,
    kOldPartitionSizeFieldNumber = 10,
    kEstimatedCowSizeFieldNumber = 12,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string compression_algorithm = 11;
  void clear_compression_algorithm();
  const std::string& compression_algorithm() const;
  void set_compression_algorithm(const std::string& value);
  void set_compression_algorithm(std::string&& value);
  void set_compression_algorithm(const char* value);
  void set_compression_algorithm(const char* value, size_t size);
  std::string* mutable_compression_algorithm();
  std::string* release_compression_algorithm();
  void set_allocated_compression_algorithm(std::string* compression_algorithm);

  // uint64 device_size = 3;
  void clear_device_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 device_size() const;
  void set_device_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 snapshot_size = 4;
  void clear_snapshot_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 snapshot_size() const;
  void set_snapshot_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 cow_partition_size = 5;
  void clear_cow_partition_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_partition_size() const;
  void set_cow_partition_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .android.snapshot.SnapshotState state = 2;
  void clear_state();
  ::android::snapshot::SnapshotState state() const;
  void set_state(::android::snapshot::SnapshotState value);

  // bool compression_enabled = 9;
  void clear_compression_enabled();
  bool compression_enabled() const;
  void set_compression_enabled(bool value);

  // uint64 cow_file_size = 6;
  void clear_cow_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_file_size() const;
  void set_cow_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 sectors_allocated = 7;
  void clear_sectors_allocated();
  ::PROTOBUF_NAMESPACE_ID::uint64 sectors_allocated() const;
  void set_sectors_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 metadata_sectors = 8;
  void clear_metadata_sectors();
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_sectors() const;
  void set_metadata_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 old_partition_size = 10;
  void clear_old_partition_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 old_partition_size() const;
  void set_old_partition_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 estimated_cow_size = 12;
  void clear_estimated_cow_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_cow_size() const;
  void set_estimated_cow_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:android.snapshot.SnapshotStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compression_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 device_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 snapshot_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_partition_size_;
  int state_;
  bool compression_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sectors_allocated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_sectors_;
  ::PROTOBUF_NAMESPACE_ID::uint64 old_partition_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_cow_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_android_2fsnapshot_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotUpdateStatus :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.snapshot.SnapshotUpdateStatus) */ {
 public:
  SnapshotUpdateStatus();
  virtual ~SnapshotUpdateStatus();

  SnapshotUpdateStatus(const SnapshotUpdateStatus& from);
  SnapshotUpdateStatus(SnapshotUpdateStatus&& from) noexcept
    : SnapshotUpdateStatus() {
    *this = ::std::move(from);
  }

  inline SnapshotUpdateStatus& operator=(const SnapshotUpdateStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotUpdateStatus& operator=(SnapshotUpdateStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SnapshotUpdateStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotUpdateStatus* internal_default_instance() {
    return reinterpret_cast<const SnapshotUpdateStatus*>(
               &_SnapshotUpdateStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapshotUpdateStatus& a, SnapshotUpdateStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotUpdateStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotUpdateStatus* New() const final {
    return CreateMaybeMessage<SnapshotUpdateStatus>(nullptr);
  }

  SnapshotUpdateStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotUpdateStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnapshotUpdateStatus& from);
  void MergeFrom(const SnapshotUpdateStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotUpdateStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.snapshot.SnapshotUpdateStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceBuildFingerprintFieldNumber = 8,
    kSectorsAllocatedFieldNumber = 2,
    kTotalSectorsFieldNumber = 3,
    kStateFieldNumber = 1,
    kCompressionEnabledFieldNumber = 5,
    kMetadataSectorsFieldNumber = 4,
    kMergePhaseFieldNumber = 6,
    kMergeFailureCodeFieldNumber = 7,
  };
  // string source_build_fingerprint = 8;
  void clear_source_build_fingerprint();
  const std::string& source_build_fingerprint() const;
  void set_source_build_fingerprint(const std::string& value);
  void set_source_build_fingerprint(std::string&& value);
  void set_source_build_fingerprint(const char* value);
  void set_source_build_fingerprint(const char* value, size_t size);
  std::string* mutable_source_build_fingerprint();
  std::string* release_source_build_fingerprint();
  void set_allocated_source_build_fingerprint(std::string* source_build_fingerprint);

  // uint64 sectors_allocated = 2;
  void clear_sectors_allocated();
  ::PROTOBUF_NAMESPACE_ID::uint64 sectors_allocated() const;
  void set_sectors_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 total_sectors = 3;
  void clear_total_sectors();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_sectors() const;
  void set_total_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .android.snapshot.UpdateState state = 1;
  void clear_state();
  ::android::snapshot::UpdateState state() const;
  void set_state(::android::snapshot::UpdateState value);

  // bool compression_enabled = 5;
  void clear_compression_enabled();
  bool compression_enabled() const;
  void set_compression_enabled(bool value);

  // uint64 metadata_sectors = 4;
  void clear_metadata_sectors();
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_sectors() const;
  void set_metadata_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .android.snapshot.MergePhase merge_phase = 6;
  void clear_merge_phase();
  ::android::snapshot::MergePhase merge_phase() const;
  void set_merge_phase(::android::snapshot::MergePhase value);

  // .android.snapshot.MergeFailureCode merge_failure_code = 7;
  void clear_merge_failure_code();
  ::android::snapshot::MergeFailureCode merge_failure_code() const;
  void set_merge_failure_code(::android::snapshot::MergeFailureCode value);

  // @@protoc_insertion_point(class_scope:android.snapshot.SnapshotUpdateStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_build_fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sectors_allocated_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_sectors_;
  int state_;
  bool compression_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metadata_sectors_;
  int merge_phase_;
  int merge_failure_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_android_2fsnapshot_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMergeReport :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.snapshot.SnapshotMergeReport) */ {
 public:
  SnapshotMergeReport();
  virtual ~SnapshotMergeReport();

  SnapshotMergeReport(const SnapshotMergeReport& from);
  SnapshotMergeReport(SnapshotMergeReport&& from) noexcept
    : SnapshotMergeReport() {
    *this = ::std::move(from);
  }

  inline SnapshotMergeReport& operator=(const SnapshotMergeReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotMergeReport& operator=(SnapshotMergeReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SnapshotMergeReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotMergeReport* internal_default_instance() {
    return reinterpret_cast<const SnapshotMergeReport*>(
               &_SnapshotMergeReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SnapshotMergeReport& a, SnapshotMergeReport& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotMergeReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMergeReport* New() const final {
    return CreateMaybeMessage<SnapshotMergeReport>(nullptr);
  }

  SnapshotMergeReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMergeReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnapshotMergeReport& from);
  void MergeFrom(const SnapshotMergeReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotMergeReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.snapshot.SnapshotMergeReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceBuildFingerprintFieldNumber = 10,
    kStateFieldNumber = 1,
    kResumeCountFieldNumber = 2,
    kCowFileSizeFieldNumber = 3,
    kTotalCowSizeBytesFieldNumber = 5,
    kCompressionEnabledFieldNumber = 4,
    kBootCompleteTimeMsFieldNumber = 7,
    kEstimatedCowSizeBytesFieldNumber = 6,
    kBootCompleteToMergeStartTimeMsFieldNumber = 8,
    kMergeFailureCodeFieldNumber = 9,
  };
  // string source_build_fingerprint = 10;
  void clear_source_build_fingerprint();
  const std::string& source_build_fingerprint() const;
  void set_source_build_fingerprint(const std::string& value);
  void set_source_build_fingerprint(std::string&& value);
  void set_source_build_fingerprint(const char* value);
  void set_source_build_fingerprint(const char* value, size_t size);
  std::string* mutable_source_build_fingerprint();
  std::string* release_source_build_fingerprint();
  void set_allocated_source_build_fingerprint(std::string* source_build_fingerprint);

  // .android.snapshot.UpdateState state = 1;
  void clear_state();
  ::android::snapshot::UpdateState state() const;
  void set_state(::android::snapshot::UpdateState value);

  // int32 resume_count = 2;
  void clear_resume_count();
  ::PROTOBUF_NAMESPACE_ID::int32 resume_count() const;
  void set_resume_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 cow_file_size = 3;
  void clear_cow_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_file_size() const;
  void set_cow_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 total_cow_size_bytes = 5;
  void clear_total_cow_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_cow_size_bytes() const;
  void set_total_cow_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool compression_enabled = 4;
  void clear_compression_enabled();
  bool compression_enabled() const;
  void set_compression_enabled(bool value);

  // uint32 boot_complete_time_ms = 7;
  void clear_boot_complete_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 boot_complete_time_ms() const;
  void set_boot_complete_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint64 estimated_cow_size_bytes = 6;
  void clear_estimated_cow_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_cow_size_bytes() const;
  void set_estimated_cow_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 boot_complete_to_merge_start_time_ms = 8;
  void clear_boot_complete_to_merge_start_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 boot_complete_to_merge_start_time_ms() const;
  void set_boot_complete_to_merge_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .android.snapshot.MergeFailureCode merge_failure_code = 9;
  void clear_merge_failure_code();
  ::android::snapshot::MergeFailureCode merge_failure_code() const;
  void set_merge_failure_code(::android::snapshot::MergeFailureCode value);

  // @@protoc_insertion_point(class_scope:android.snapshot.SnapshotMergeReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_build_fingerprint_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 resume_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cow_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_cow_size_bytes_;
  bool compression_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boot_complete_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_cow_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 boot_complete_to_merge_start_time_ms_;
  int merge_failure_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_android_2fsnapshot_2fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapshotStatus

// string name = 1;
inline void SnapshotStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotStatus::name() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.name)
  return name_.GetNoArena();
}
inline void SnapshotStatus::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.name)
}
inline void SnapshotStatus::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.snapshot.SnapshotStatus.name)
}
inline void SnapshotStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.snapshot.SnapshotStatus.name)
}
inline void SnapshotStatus::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.snapshot.SnapshotStatus.name)
}
inline std::string* SnapshotStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.snapshot.SnapshotStatus.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotStatus::release_name() {
  // @@protoc_insertion_point(field_release:android.snapshot.SnapshotStatus.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.snapshot.SnapshotStatus.name)
}

// .android.snapshot.SnapshotState state = 2;
inline void SnapshotStatus::clear_state() {
  state_ = 0;
}
inline ::android::snapshot::SnapshotState SnapshotStatus::state() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.state)
  return static_cast< ::android::snapshot::SnapshotState >(state_);
}
inline void SnapshotStatus::set_state(::android::snapshot::SnapshotState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.state)
}

// uint64 device_size = 3;
inline void SnapshotStatus::clear_device_size() {
  device_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::device_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.device_size)
  return device_size_;
}
inline void SnapshotStatus::set_device_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  device_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.device_size)
}

// uint64 snapshot_size = 4;
inline void SnapshotStatus::clear_snapshot_size() {
  snapshot_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::snapshot_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.snapshot_size)
  return snapshot_size_;
}
inline void SnapshotStatus::set_snapshot_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  snapshot_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.snapshot_size)
}

// uint64 cow_partition_size = 5;
inline void SnapshotStatus::clear_cow_partition_size() {
  cow_partition_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::cow_partition_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.cow_partition_size)
  return cow_partition_size_;
}
inline void SnapshotStatus::set_cow_partition_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cow_partition_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.cow_partition_size)
}

// uint64 cow_file_size = 6;
inline void SnapshotStatus::clear_cow_file_size() {
  cow_file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::cow_file_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.cow_file_size)
  return cow_file_size_;
}
inline void SnapshotStatus::set_cow_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cow_file_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.cow_file_size)
}

// uint64 sectors_allocated = 7;
inline void SnapshotStatus::clear_sectors_allocated() {
  sectors_allocated_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::sectors_allocated() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.sectors_allocated)
  return sectors_allocated_;
}
inline void SnapshotStatus::set_sectors_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sectors_allocated_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.sectors_allocated)
}

// uint64 metadata_sectors = 8;
inline void SnapshotStatus::clear_metadata_sectors() {
  metadata_sectors_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::metadata_sectors() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.metadata_sectors)
  return metadata_sectors_;
}
inline void SnapshotStatus::set_metadata_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metadata_sectors_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.metadata_sectors)
}

// bool compression_enabled = 9;
inline void SnapshotStatus::clear_compression_enabled() {
  compression_enabled_ = false;
}
inline bool SnapshotStatus::compression_enabled() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.compression_enabled)
  return compression_enabled_;
}
inline void SnapshotStatus::set_compression_enabled(bool value) {
  
  compression_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.compression_enabled)
}

// uint64 old_partition_size = 10;
inline void SnapshotStatus::clear_old_partition_size() {
  old_partition_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::old_partition_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.old_partition_size)
  return old_partition_size_;
}
inline void SnapshotStatus::set_old_partition_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  old_partition_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.old_partition_size)
}

// string compression_algorithm = 11;
inline void SnapshotStatus::clear_compression_algorithm() {
  compression_algorithm_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotStatus::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.compression_algorithm)
  return compression_algorithm_.GetNoArena();
}
inline void SnapshotStatus::set_compression_algorithm(const std::string& value) {
  
  compression_algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.compression_algorithm)
}
inline void SnapshotStatus::set_compression_algorithm(std::string&& value) {
  
  compression_algorithm_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.snapshot.SnapshotStatus.compression_algorithm)
}
inline void SnapshotStatus::set_compression_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compression_algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.snapshot.SnapshotStatus.compression_algorithm)
}
inline void SnapshotStatus::set_compression_algorithm(const char* value, size_t size) {
  
  compression_algorithm_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.snapshot.SnapshotStatus.compression_algorithm)
}
inline std::string* SnapshotStatus::mutable_compression_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:android.snapshot.SnapshotStatus.compression_algorithm)
  return compression_algorithm_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotStatus::release_compression_algorithm() {
  // @@protoc_insertion_point(field_release:android.snapshot.SnapshotStatus.compression_algorithm)
  
  return compression_algorithm_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotStatus::set_allocated_compression_algorithm(std::string* compression_algorithm) {
  if (compression_algorithm != nullptr) {
    
  } else {
    
  }
  compression_algorithm_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compression_algorithm);
  // @@protoc_insertion_point(field_set_allocated:android.snapshot.SnapshotStatus.compression_algorithm)
}

// uint64 estimated_cow_size = 12;
inline void SnapshotStatus::clear_estimated_cow_size() {
  estimated_cow_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotStatus::estimated_cow_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotStatus.estimated_cow_size)
  return estimated_cow_size_;
}
inline void SnapshotStatus::set_estimated_cow_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  estimated_cow_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotStatus.estimated_cow_size)
}

// -------------------------------------------------------------------

// SnapshotUpdateStatus

// .android.snapshot.UpdateState state = 1;
inline void SnapshotUpdateStatus::clear_state() {
  state_ = 0;
}
inline ::android::snapshot::UpdateState SnapshotUpdateStatus::state() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.state)
  return static_cast< ::android::snapshot::UpdateState >(state_);
}
inline void SnapshotUpdateStatus::set_state(::android::snapshot::UpdateState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.state)
}

// uint64 sectors_allocated = 2;
inline void SnapshotUpdateStatus::clear_sectors_allocated() {
  sectors_allocated_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotUpdateStatus::sectors_allocated() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.sectors_allocated)
  return sectors_allocated_;
}
inline void SnapshotUpdateStatus::set_sectors_allocated(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sectors_allocated_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.sectors_allocated)
}

// uint64 total_sectors = 3;
inline void SnapshotUpdateStatus::clear_total_sectors() {
  total_sectors_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotUpdateStatus::total_sectors() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.total_sectors)
  return total_sectors_;
}
inline void SnapshotUpdateStatus::set_total_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_sectors_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.total_sectors)
}

// uint64 metadata_sectors = 4;
inline void SnapshotUpdateStatus::clear_metadata_sectors() {
  metadata_sectors_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotUpdateStatus::metadata_sectors() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.metadata_sectors)
  return metadata_sectors_;
}
inline void SnapshotUpdateStatus::set_metadata_sectors(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metadata_sectors_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.metadata_sectors)
}

// bool compression_enabled = 5;
inline void SnapshotUpdateStatus::clear_compression_enabled() {
  compression_enabled_ = false;
}
inline bool SnapshotUpdateStatus::compression_enabled() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.compression_enabled)
  return compression_enabled_;
}
inline void SnapshotUpdateStatus::set_compression_enabled(bool value) {
  
  compression_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.compression_enabled)
}

// .android.snapshot.MergePhase merge_phase = 6;
inline void SnapshotUpdateStatus::clear_merge_phase() {
  merge_phase_ = 0;
}
inline ::android::snapshot::MergePhase SnapshotUpdateStatus::merge_phase() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.merge_phase)
  return static_cast< ::android::snapshot::MergePhase >(merge_phase_);
}
inline void SnapshotUpdateStatus::set_merge_phase(::android::snapshot::MergePhase value) {
  
  merge_phase_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.merge_phase)
}

// .android.snapshot.MergeFailureCode merge_failure_code = 7;
inline void SnapshotUpdateStatus::clear_merge_failure_code() {
  merge_failure_code_ = 0;
}
inline ::android::snapshot::MergeFailureCode SnapshotUpdateStatus::merge_failure_code() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.merge_failure_code)
  return static_cast< ::android::snapshot::MergeFailureCode >(merge_failure_code_);
}
inline void SnapshotUpdateStatus::set_merge_failure_code(::android::snapshot::MergeFailureCode value) {
  
  merge_failure_code_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.merge_failure_code)
}

// string source_build_fingerprint = 8;
inline void SnapshotUpdateStatus::clear_source_build_fingerprint() {
  source_build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotUpdateStatus::source_build_fingerprint() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
  return source_build_fingerprint_.GetNoArena();
}
inline void SnapshotUpdateStatus::set_source_build_fingerprint(const std::string& value) {
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
}
inline void SnapshotUpdateStatus::set_source_build_fingerprint(std::string&& value) {
  
  source_build_fingerprint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
}
inline void SnapshotUpdateStatus::set_source_build_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
}
inline void SnapshotUpdateStatus::set_source_build_fingerprint(const char* value, size_t size) {
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
}
inline std::string* SnapshotUpdateStatus::mutable_source_build_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
  return source_build_fingerprint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotUpdateStatus::release_source_build_fingerprint() {
  // @@protoc_insertion_point(field_release:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
  
  return source_build_fingerprint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotUpdateStatus::set_allocated_source_build_fingerprint(std::string* source_build_fingerprint) {
  if (source_build_fingerprint != nullptr) {
    
  } else {
    
  }
  source_build_fingerprint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_build_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:android.snapshot.SnapshotUpdateStatus.source_build_fingerprint)
}

// -------------------------------------------------------------------

// SnapshotMergeReport

// .android.snapshot.UpdateState state = 1;
inline void SnapshotMergeReport::clear_state() {
  state_ = 0;
}
inline ::android::snapshot::UpdateState SnapshotMergeReport::state() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.state)
  return static_cast< ::android::snapshot::UpdateState >(state_);
}
inline void SnapshotMergeReport::set_state(::android::snapshot::UpdateState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.state)
}

// int32 resume_count = 2;
inline void SnapshotMergeReport::clear_resume_count() {
  resume_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SnapshotMergeReport::resume_count() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.resume_count)
  return resume_count_;
}
inline void SnapshotMergeReport::set_resume_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resume_count_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.resume_count)
}

// uint64 cow_file_size = 3;
inline void SnapshotMergeReport::clear_cow_file_size() {
  cow_file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMergeReport::cow_file_size() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.cow_file_size)
  return cow_file_size_;
}
inline void SnapshotMergeReport::set_cow_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cow_file_size_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.cow_file_size)
}

// bool compression_enabled = 4;
inline void SnapshotMergeReport::clear_compression_enabled() {
  compression_enabled_ = false;
}
inline bool SnapshotMergeReport::compression_enabled() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.compression_enabled)
  return compression_enabled_;
}
inline void SnapshotMergeReport::set_compression_enabled(bool value) {
  
  compression_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.compression_enabled)
}

// uint64 total_cow_size_bytes = 5;
inline void SnapshotMergeReport::clear_total_cow_size_bytes() {
  total_cow_size_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMergeReport::total_cow_size_bytes() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.total_cow_size_bytes)
  return total_cow_size_bytes_;
}
inline void SnapshotMergeReport::set_total_cow_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_cow_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.total_cow_size_bytes)
}

// uint64 estimated_cow_size_bytes = 6;
inline void SnapshotMergeReport::clear_estimated_cow_size_bytes() {
  estimated_cow_size_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMergeReport::estimated_cow_size_bytes() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.estimated_cow_size_bytes)
  return estimated_cow_size_bytes_;
}
inline void SnapshotMergeReport::set_estimated_cow_size_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  estimated_cow_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.estimated_cow_size_bytes)
}

// uint32 boot_complete_time_ms = 7;
inline void SnapshotMergeReport::clear_boot_complete_time_ms() {
  boot_complete_time_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnapshotMergeReport::boot_complete_time_ms() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.boot_complete_time_ms)
  return boot_complete_time_ms_;
}
inline void SnapshotMergeReport::set_boot_complete_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  boot_complete_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.boot_complete_time_ms)
}

// uint32 boot_complete_to_merge_start_time_ms = 8;
inline void SnapshotMergeReport::clear_boot_complete_to_merge_start_time_ms() {
  boot_complete_to_merge_start_time_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnapshotMergeReport::boot_complete_to_merge_start_time_ms() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.boot_complete_to_merge_start_time_ms)
  return boot_complete_to_merge_start_time_ms_;
}
inline void SnapshotMergeReport::set_boot_complete_to_merge_start_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  boot_complete_to_merge_start_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.boot_complete_to_merge_start_time_ms)
}

// .android.snapshot.MergeFailureCode merge_failure_code = 9;
inline void SnapshotMergeReport::clear_merge_failure_code() {
  merge_failure_code_ = 0;
}
inline ::android::snapshot::MergeFailureCode SnapshotMergeReport::merge_failure_code() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.merge_failure_code)
  return static_cast< ::android::snapshot::MergeFailureCode >(merge_failure_code_);
}
inline void SnapshotMergeReport::set_merge_failure_code(::android::snapshot::MergeFailureCode value) {
  
  merge_failure_code_ = value;
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.merge_failure_code)
}

// string source_build_fingerprint = 10;
inline void SnapshotMergeReport::clear_source_build_fingerprint() {
  source_build_fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotMergeReport::source_build_fingerprint() const {
  // @@protoc_insertion_point(field_get:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
  return source_build_fingerprint_.GetNoArena();
}
inline void SnapshotMergeReport::set_source_build_fingerprint(const std::string& value) {
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
}
inline void SnapshotMergeReport::set_source_build_fingerprint(std::string&& value) {
  
  source_build_fingerprint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
}
inline void SnapshotMergeReport::set_source_build_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
}
inline void SnapshotMergeReport::set_source_build_fingerprint(const char* value, size_t size) {
  
  source_build_fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
}
inline std::string* SnapshotMergeReport::mutable_source_build_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
  return source_build_fingerprint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotMergeReport::release_source_build_fingerprint() {
  // @@protoc_insertion_point(field_release:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
  
  return source_build_fingerprint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotMergeReport::set_allocated_source_build_fingerprint(std::string* source_build_fingerprint) {
  if (source_build_fingerprint != nullptr) {
    
  } else {
    
  }
  source_build_fingerprint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_build_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:android.snapshot.SnapshotMergeReport.source_build_fingerprint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snapshot
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::snapshot::SnapshotState> : ::std::true_type {};
template <> struct is_proto_enum< ::android::snapshot::MergePhase> : ::std::true_type {};
template <> struct is_proto_enum< ::android::snapshot::UpdateState> : ::std::true_type {};
template <> struct is_proto_enum< ::android::snapshot::MergeFailureCode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_android_2fsnapshot_2fsnapshot_2eproto
