// Generated by the sysprop generator. DO NOT EDIT!

#include <android/sysprop/HdmiProperties.sysprop.h>

#include <cctype>
#include <cerrno>
#include <cstdio>
#include <cstring>
#include <limits>
#include <utility>

#include <strings.h>
#ifdef __BIONIC__
#include <sys/system_properties.h>
[[maybe_unused]] static bool SetProp(const char* key, const char* value) {
    return __system_property_set(key, value) == 0;
}
#else
#include <android-base/properties.h>
[[maybe_unused]] static bool SetProp(const char* key, const char* value) {
    android::base::SetProperty(key, value);
    return true;
}
#endif

#include <android-base/parseint.h>
#include <log/log.h>

namespace {

using namespace android::sysprop::HdmiProperties;

template <typename T> T DoParse(const char* str);

constexpr const std::pair<const char*, cec_device_types_values> cec_device_types_list[] = {
    {"tv", cec_device_types_values::TV},
    {"recording_device", cec_device_types_values::RECORDING_DEVICE},
    {"reserved", cec_device_types_values::RESERVED},
    {"tuner", cec_device_types_values::TUNER},
    {"playback_device", cec_device_types_values::PLAYBACK_DEVICE},
    {"audio_system", cec_device_types_values::AUDIO_SYSTEM},
    {"pure_cec_switch", cec_device_types_values::PURE_CEC_SWITCH},
    {"video_processor", cec_device_types_values::VIDEO_PROCESSOR},
};

template <>
std::optional<cec_device_types_values> DoParse(const char* str) {
    for (auto [name, val] : cec_device_types_list) {
        if (strcmp(str, name) == 0) {
            return val;
        }
    }
    return std::nullopt;
}

constexpr const std::pair<const char*, playback_device_action_on_routing_control_values> playback_device_action_on_routing_control_list[] = {
    {"none", playback_device_action_on_routing_control_values::NONE},
    {"wake_up_only", playback_device_action_on_routing_control_values::WAKE_UP_ONLY},
    {"wake_up_and_send_active_source", playback_device_action_on_routing_control_values::WAKE_UP_AND_SEND_ACTIVE_SOURCE},
};

template <>
std::optional<playback_device_action_on_routing_control_values> DoParse(const char* str) {
    for (auto [name, val] : playback_device_action_on_routing_control_list) {
        if (strcmp(str, name) == 0) {
            return val;
        }
    }
    return std::nullopt;
}

template <typename T> constexpr bool is_vector = false;

template <typename T> constexpr bool is_vector<std::vector<T>> = true;

template <> [[maybe_unused]] std::optional<bool> DoParse(const char* str) {
    static constexpr const char* kYes[] = {"1", "true"};
    static constexpr const char* kNo[] = {"0", "false"};

    for (const char* yes : kYes) {
        if (strcasecmp(yes, str) == 0) return std::make_optional(true);
    }

    for (const char* no : kNo) {
        if (strcasecmp(no, str) == 0) return std::make_optional(false);
    }

    return std::nullopt;
}

template <> [[maybe_unused]] std::optional<std::int32_t> DoParse(const char* str) {
    std::int32_t ret;
    return android::base::ParseInt(str, &ret) ? std::make_optional(ret) : std::nullopt;
}

template <> [[maybe_unused]] std::optional<std::uint32_t> DoParse(const char* str) {
    std::uint32_t ret;
    return android::base::ParseUint(str, &ret) ? std::make_optional(ret) : std::nullopt;
}

template <> [[maybe_unused]] std::optional<std::int64_t> DoParse(const char* str) {
    std::int64_t ret;
    return android::base::ParseInt(str, &ret) ? std::make_optional(ret) : std::nullopt;
}

template <> [[maybe_unused]] std::optional<std::uint64_t> DoParse(const char* str) {
    std::uint64_t ret;
    return android::base::ParseUint(str, &ret) ? std::make_optional(ret) : std::nullopt;
}

template <> [[maybe_unused]] std::optional<double> DoParse(const char* str) {
    int old_errno = errno;
    errno = 0;
    char* end;
    double ret = std::strtod(str, &end);
    if (errno != 0) {
        return std::nullopt;
    }
    if (str == end || *end != '\0') {
        errno = EINVAL;
        return std::nullopt;
    }
    errno = old_errno;
    return std::make_optional(ret);
}

template <> [[maybe_unused]] std::optional<std::string> DoParse(const char* str) {
    return *str == '\0' ? std::nullopt : std::make_optional(str);
}

template <typename Vec> [[maybe_unused]] Vec DoParseList(const char* str) {
    Vec ret;
    if (*str == '\0') return ret;
    const char* p = str;
    for (;;) {
        const char* r = p;
        std::string value;
        while (*r != ',') {
            if (*r == '\\') ++r;
            if (*r == '\0') break;
            value += *r++;
        }
        ret.emplace_back(DoParse<typename Vec::value_type>(value.c_str()));
        if (*r == '\0') break;
        p = r + 1;
    }
    return ret;
}

template <typename T> inline T TryParse(const char* str) {
    if constexpr(is_vector<T>) {
        return DoParseList<T>(str);
    } else {
        return DoParse<T>(str);
    }
}

[[maybe_unused]] std::string FormatValue(const std::optional<std::int32_t>& value) {
    return value ? std::to_string(*value) : "";
}

[[maybe_unused]] std::string FormatValue(const std::optional<std::uint32_t>& value) {
    return value ? std::to_string(*value) : "";
}

[[maybe_unused]] std::string FormatValue(const std::optional<std::int64_t>& value) {
    return value ? std::to_string(*value) : "";
}

[[maybe_unused]] std::string FormatValue(const std::optional<std::uint64_t>& value) {
    return value ? std::to_string(*value) : "";
}

[[maybe_unused]] std::string FormatValue(const std::optional<double>& value) {
    if (!value) return "";
    char buf[1024];
    std::sprintf(buf, "%.*g", std::numeric_limits<double>::max_digits10, *value);
    return buf;
}

[[maybe_unused]] std::string FormatValue(const std::optional<bool>& value) {
    return value ? (*value ? "true" : "false") : "";
}

template <typename T>
[[maybe_unused]] std::string FormatValue(const std::vector<T>& value) {
    if (value.empty()) return "";

    std::string ret;
    bool first = true;

    for (auto&& element : value) {
        if (!first) ret += ',';
        else first = false;
        if constexpr(std::is_same_v<T, std::optional<std::string>>) {
            if (element) {
                for (char c : *element) {
                    if (c == '\\' || c == ',') ret += '\\';
                    ret += c;
                }
            }
        } else {
            ret += FormatValue(element);
        }
    }

    return ret;
}

template <typename T>
T GetProp(const char* key, const char* legacy = nullptr) {
    std::string value;
#ifdef __BIONIC__
    auto pi = __system_property_find(key);
    if (pi != nullptr) {
        __system_property_read_callback(pi, [](void* cookie, const char*, const char* value, std::uint32_t) {
            *static_cast<std::string*>(cookie) = value;
        }, &value);
    }
#else
    value = android::base::GetProperty(key, "");
#endif
    if (value.empty() && legacy) {
        ALOGV("prop %s doesn't exist; fallback to legacy prop %s", key, legacy);
        return GetProp<T>(legacy);
    }
    return TryParse<T>(value.c_str());
}

}  // namespace

namespace android::sysprop::HdmiProperties {

std::vector<std::optional<std::int32_t>> device_type() {
    return GetProp<std::vector<std::optional<std::int32_t>>>("ro.hdmi.device_type");
}

std::vector<std::optional<cec_device_types_values>> cec_device_types() {
    return GetProp<std::vector<std::optional<cec_device_types_values>>>("ro.hdmi.cec_device_types");
}

std::optional<bool> set_menu_language_enabled() {
    return GetProp<std::optional<bool>>("ro.hdmi.set_menu_language");
}

std::optional<std::string> arc_port() {
    return GetProp<std::optional<std::string>>("ro.hdmi.property_sytem_audio_device_arc_port");
}

std::optional<bool> forward_volume_keys_when_system_audio_mode_off() {
    return GetProp<std::optional<bool>>("ro.hdmi.cec_audio_device_forward_volume_keys_system_audio_mode_off");
}

std::optional<bool> is_switch() {
    return GetProp<std::optional<bool>>("ro.hdmi.property_is_device_hdmi_cec_switch");
}

std::optional<playback_device_action_on_routing_control_values> playback_device_action_on_routing_control() {
    return GetProp<std::optional<playback_device_action_on_routing_control_values>>("ro.hdmi.cec.source.playback_device_action_on_routing_control");
}

}  // namespace android::sysprop::HdmiProperties
