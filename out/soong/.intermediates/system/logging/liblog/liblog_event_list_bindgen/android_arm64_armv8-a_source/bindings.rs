/* automatically generated by rust-bindgen 0.58.1 */

pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub const log_id_LOG_ID_MIN: log_id = 0;
#[doc = " The main log buffer. This is the only log buffer available to apps."]
pub const log_id_LOG_ID_MAIN: log_id = 0;
#[doc = " The radio log buffer."]
pub const log_id_LOG_ID_RADIO: log_id = 1;
#[doc = " The event log buffer."]
pub const log_id_LOG_ID_EVENTS: log_id = 2;
#[doc = " The system log buffer."]
pub const log_id_LOG_ID_SYSTEM: log_id = 3;
#[doc = " The crash log buffer."]
pub const log_id_LOG_ID_CRASH: log_id = 4;
#[doc = " The statistics log buffer."]
pub const log_id_LOG_ID_STATS: log_id = 5;
#[doc = " The security log buffer."]
pub const log_id_LOG_ID_SECURITY: log_id = 6;
#[doc = " The kernel log buffer."]
pub const log_id_LOG_ID_KERNEL: log_id = 7;
#[doc = " The kernel log buffer."]
pub const log_id_LOG_ID_MAX: log_id = 8;
#[doc = " Let the logging function choose the best log target."]
pub const log_id_LOG_ID_DEFAULT: log_id = 2147483647;
#[doc = " Identifies a specific log buffer for __android_log_buf_write()"]
#[doc = " and __android_log_buf_print()."]
pub type log_id = ::std::os::raw::c_uint;
#[doc = " Identifies a specific log buffer for __android_log_buf_write()"]
#[doc = " and __android_log_buf_print()."]
pub use self::log_id as log_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct android_log_context_internal {
    _unused: [u8; 0],
}
pub type android_log_context = *mut android_log_context_internal;
extern "C" {
    pub fn create_android_logger(tag: u32) -> android_log_context;
}
extern "C" {
    pub fn android_log_write_int32(ctx: android_log_context, value: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn android_log_write_string8_len(
        ctx: android_log_context,
        value: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn android_log_write_list(ctx: android_log_context, id: log_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn android_log_destroy(ctx: *mut android_log_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __android_log_security() -> ::std::os::raw::c_int;
}
