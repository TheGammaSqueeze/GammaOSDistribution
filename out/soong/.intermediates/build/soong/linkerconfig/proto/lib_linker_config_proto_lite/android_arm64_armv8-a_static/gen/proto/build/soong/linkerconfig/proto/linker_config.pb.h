// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/soong/linkerconfig/proto/linker_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace linkerconfig {
namespace proto {
class LinkerConfig;
class LinkerConfigDefaultTypeInternal;
extern LinkerConfigDefaultTypeInternal _LinkerConfig_default_instance_;
}  // namespace proto
}  // namespace linkerconfig
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::linkerconfig::proto::LinkerConfig* Arena::CreateMaybeMessage<::android::linkerconfig::proto::LinkerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace linkerconfig {
namespace proto {

// ===================================================================

class LinkerConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.linkerconfig.proto.LinkerConfig) */ {
 public:
  LinkerConfig();
  virtual ~LinkerConfig();

  LinkerConfig(const LinkerConfig& from);
  LinkerConfig(LinkerConfig&& from) noexcept
    : LinkerConfig() {
    *this = ::std::move(from);
  }

  inline LinkerConfig& operator=(const LinkerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkerConfig& operator=(LinkerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LinkerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkerConfig* internal_default_instance() {
    return reinterpret_cast<const LinkerConfig*>(
               &_LinkerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinkerConfig& a, LinkerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkerConfig* New() const final {
    return CreateMaybeMessage<LinkerConfig>(nullptr);
  }

  LinkerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LinkerConfig& from);
  void MergeFrom(const LinkerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.linkerconfig.proto.LinkerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermittedPathsFieldNumber = 1,
    kProvideLibsFieldNumber = 3,
    kRequireLibsFieldNumber = 4,
    kVisibleFieldNumber = 2,
  };
  // repeated string permittedPaths = 1;
  int permittedpaths_size() const;
  void clear_permittedpaths();
  const std::string& permittedpaths(int index) const;
  std::string* mutable_permittedpaths(int index);
  void set_permittedpaths(int index, const std::string& value);
  void set_permittedpaths(int index, std::string&& value);
  void set_permittedpaths(int index, const char* value);
  void set_permittedpaths(int index, const char* value, size_t size);
  std::string* add_permittedpaths();
  void add_permittedpaths(const std::string& value);
  void add_permittedpaths(std::string&& value);
  void add_permittedpaths(const char* value);
  void add_permittedpaths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& permittedpaths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_permittedpaths();

  // repeated string provideLibs = 3;
  int providelibs_size() const;
  void clear_providelibs();
  const std::string& providelibs(int index) const;
  std::string* mutable_providelibs(int index);
  void set_providelibs(int index, const std::string& value);
  void set_providelibs(int index, std::string&& value);
  void set_providelibs(int index, const char* value);
  void set_providelibs(int index, const char* value, size_t size);
  std::string* add_providelibs();
  void add_providelibs(const std::string& value);
  void add_providelibs(std::string&& value);
  void add_providelibs(const char* value);
  void add_providelibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& providelibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_providelibs();

  // repeated string requireLibs = 4;
  int requirelibs_size() const;
  void clear_requirelibs();
  const std::string& requirelibs(int index) const;
  std::string* mutable_requirelibs(int index);
  void set_requirelibs(int index, const std::string& value);
  void set_requirelibs(int index, std::string&& value);
  void set_requirelibs(int index, const char* value);
  void set_requirelibs(int index, const char* value, size_t size);
  std::string* add_requirelibs();
  void add_requirelibs(const std::string& value);
  void add_requirelibs(std::string&& value);
  void add_requirelibs(const char* value);
  void add_requirelibs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requirelibs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requirelibs();

  // bool visible = 2;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:android.linkerconfig.proto.LinkerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> permittedpaths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> providelibs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requirelibs_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinkerConfig

// repeated string permittedPaths = 1;
inline int LinkerConfig::permittedpaths_size() const {
  return permittedpaths_.size();
}
inline void LinkerConfig::clear_permittedpaths() {
  permittedpaths_.Clear();
}
inline const std::string& LinkerConfig::permittedpaths(int index) const {
  // @@protoc_insertion_point(field_get:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  return permittedpaths_.Get(index);
}
inline std::string* LinkerConfig::mutable_permittedpaths(int index) {
  // @@protoc_insertion_point(field_mutable:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  return permittedpaths_.Mutable(index);
}
inline void LinkerConfig::set_permittedpaths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  permittedpaths_.Mutable(index)->assign(value);
}
inline void LinkerConfig::set_permittedpaths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  permittedpaths_.Mutable(index)->assign(std::move(value));
}
inline void LinkerConfig::set_permittedpaths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permittedpaths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline void LinkerConfig::set_permittedpaths(int index, const char* value, size_t size) {
  permittedpaths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline std::string* LinkerConfig::add_permittedpaths() {
  // @@protoc_insertion_point(field_add_mutable:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  return permittedpaths_.Add();
}
inline void LinkerConfig::add_permittedpaths(const std::string& value) {
  permittedpaths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline void LinkerConfig::add_permittedpaths(std::string&& value) {
  permittedpaths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline void LinkerConfig::add_permittedpaths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  permittedpaths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline void LinkerConfig::add_permittedpaths(const char* value, size_t size) {
  permittedpaths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.linkerconfig.proto.LinkerConfig.permittedPaths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinkerConfig::permittedpaths() const {
  // @@protoc_insertion_point(field_list:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  return permittedpaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinkerConfig::mutable_permittedpaths() {
  // @@protoc_insertion_point(field_mutable_list:android.linkerconfig.proto.LinkerConfig.permittedPaths)
  return &permittedpaths_;
}

// bool visible = 2;
inline void LinkerConfig::clear_visible() {
  visible_ = false;
}
inline bool LinkerConfig::visible() const {
  // @@protoc_insertion_point(field_get:android.linkerconfig.proto.LinkerConfig.visible)
  return visible_;
}
inline void LinkerConfig::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.visible)
}

// repeated string provideLibs = 3;
inline int LinkerConfig::providelibs_size() const {
  return providelibs_.size();
}
inline void LinkerConfig::clear_providelibs() {
  providelibs_.Clear();
}
inline const std::string& LinkerConfig::providelibs(int index) const {
  // @@protoc_insertion_point(field_get:android.linkerconfig.proto.LinkerConfig.provideLibs)
  return providelibs_.Get(index);
}
inline std::string* LinkerConfig::mutable_providelibs(int index) {
  // @@protoc_insertion_point(field_mutable:android.linkerconfig.proto.LinkerConfig.provideLibs)
  return providelibs_.Mutable(index);
}
inline void LinkerConfig::set_providelibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.provideLibs)
  providelibs_.Mutable(index)->assign(value);
}
inline void LinkerConfig::set_providelibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.provideLibs)
  providelibs_.Mutable(index)->assign(std::move(value));
}
inline void LinkerConfig::set_providelibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providelibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline void LinkerConfig::set_providelibs(int index, const char* value, size_t size) {
  providelibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline std::string* LinkerConfig::add_providelibs() {
  // @@protoc_insertion_point(field_add_mutable:android.linkerconfig.proto.LinkerConfig.provideLibs)
  return providelibs_.Add();
}
inline void LinkerConfig::add_providelibs(const std::string& value) {
  providelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline void LinkerConfig::add_providelibs(std::string&& value) {
  providelibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline void LinkerConfig::add_providelibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  providelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline void LinkerConfig::add_providelibs(const char* value, size_t size) {
  providelibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.linkerconfig.proto.LinkerConfig.provideLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinkerConfig::providelibs() const {
  // @@protoc_insertion_point(field_list:android.linkerconfig.proto.LinkerConfig.provideLibs)
  return providelibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinkerConfig::mutable_providelibs() {
  // @@protoc_insertion_point(field_mutable_list:android.linkerconfig.proto.LinkerConfig.provideLibs)
  return &providelibs_;
}

// repeated string requireLibs = 4;
inline int LinkerConfig::requirelibs_size() const {
  return requirelibs_.size();
}
inline void LinkerConfig::clear_requirelibs() {
  requirelibs_.Clear();
}
inline const std::string& LinkerConfig::requirelibs(int index) const {
  // @@protoc_insertion_point(field_get:android.linkerconfig.proto.LinkerConfig.requireLibs)
  return requirelibs_.Get(index);
}
inline std::string* LinkerConfig::mutable_requirelibs(int index) {
  // @@protoc_insertion_point(field_mutable:android.linkerconfig.proto.LinkerConfig.requireLibs)
  return requirelibs_.Mutable(index);
}
inline void LinkerConfig::set_requirelibs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.requireLibs)
  requirelibs_.Mutable(index)->assign(value);
}
inline void LinkerConfig::set_requirelibs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.linkerconfig.proto.LinkerConfig.requireLibs)
  requirelibs_.Mutable(index)->assign(std::move(value));
}
inline void LinkerConfig::set_requirelibs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirelibs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline void LinkerConfig::set_requirelibs(int index, const char* value, size_t size) {
  requirelibs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline std::string* LinkerConfig::add_requirelibs() {
  // @@protoc_insertion_point(field_add_mutable:android.linkerconfig.proto.LinkerConfig.requireLibs)
  return requirelibs_.Add();
}
inline void LinkerConfig::add_requirelibs(const std::string& value) {
  requirelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline void LinkerConfig::add_requirelibs(std::string&& value) {
  requirelibs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline void LinkerConfig::add_requirelibs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirelibs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline void LinkerConfig::add_requirelibs(const char* value, size_t size) {
  requirelibs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.linkerconfig.proto.LinkerConfig.requireLibs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinkerConfig::requirelibs() const {
  // @@protoc_insertion_point(field_list:android.linkerconfig.proto.LinkerConfig.requireLibs)
  return requirelibs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinkerConfig::mutable_requirelibs() {
  // @@protoc_insertion_point(field_mutable_list:android.linkerconfig.proto.LinkerConfig.requireLibs)
  return &requirelibs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace linkerconfig
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_build_2fsoong_2flinkerconfig_2fproto_2flinker_5fconfig_2eproto
