#ifdef GET_AT_DECL
#undef GET_AT_DECL
enum ATValues {
  S1E1R = 17344,
  S1E2R = 25536,
  S1E3R = 29632,
  S1E1W = 17345,
  S1E2W = 25537,
  S1E3W = 29633,
  S1E0R = 17346,
  S1E0W = 17347,
  S12E1R = 25540,
  S12E1W = 25541,
  S12E0R = 25542,
  S12E0W = 25543,
  S1E1RP = 17352,
  S1E1WP = 17353,
};

const AT *lookupATByName(StringRef Name);

const AT *lookupATByEncoding(uint16_t Encoding);

#endif

#ifdef GET_AT_IMPL
#undef GET_AT_IMPL
const AT ATsList[] = {
  { "S1E1R", 0x43C0},
  { "S1E2R", 0x63C0},
  { "S1E3R", 0x73C0},
  { "S1E1W", 0x43C1},
  { "S1E2W", 0x63C1},
  { "S1E3W", 0x73C1},
  { "S1E0R", 0x43C2},
  { "S1E0W", 0x43C3},
  { "S12E1R", 0x63C4},
  { "S12E1W", 0x63C5},
  { "S12E0R", 0x63C6},
  { "S12E0W", 0x63C7},
  { "S1E1RP", 0x43C8},
  { "S1E1WP", 0x43C9},
};

const std::pair<const char *, int> ATsByName[] = {
  { "S12E0R", 10 },
  { "S12E0W", 11 },
  { "S12E1R", 8 },
  { "S12E1W", 9 },
  { "S1E0R", 6 },
  { "S1E0W", 7 },
  { "S1E1R", 0 },
  { "S1E1RP", 12 },
  { "S1E1W", 3 },
  { "S1E1WP", 13 },
  { "S1E2R", 1 },
  { "S1E2W", 4 },
  { "S1E3R", 2 },
  { "S1E3W", 5 },
};

const AT *lookupATByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(ATsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ATsList[Idx->second];
}

const std::pair<uint16_t, int> ATsByEncoding[] = {
  { 0x43C0, 0 },
  { 0x43C1, 3 },
  { 0x43C2, 6 },
  { 0x43C3, 7 },
  { 0x43C8, 12 },
  { 0x43C9, 13 },
  { 0x63C0, 1 },
  { 0x63C1, 4 },
  { 0x63C4, 8 },
  { 0x63C5, 9 },
  { 0x63C6, 10 },
  { 0x63C7, 11 },
  { 0x73C0, 2 },
  { 0x73C1, 5 },
};

const AT *lookupATByEncoding(uint16_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint16_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint16_t, int>> Table(ATsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ATsList[Idx->second];
}

#endif
#ifdef GET_DB_DECL
#undef GET_DB_DECL
enum DBValues {
  oshld = 1,
  oshst = 2,
  osh = 3,
  nshld = 5,
  nshst = 6,
  nsh = 7,
  ishld = 9,
  ishst = 10,
  ish = 11,
  ld = 13,
  st = 14,
  sy = 15,
};

const DB *lookupDBByName(StringRef Name);

const DB *lookupDBByEncoding(uint8_t Encoding);

#endif

#ifdef GET_DB_IMPL
#undef GET_DB_IMPL
const DB DBsList[] = {
  { "oshld", 0x1},
  { "oshst", 0x2},
  { "osh", 0x3},
  { "nshld", 0x5},
  { "nshst", 0x6},
  { "nsh", 0x7},
  { "ishld", 0x9},
  { "ishst", 0xA},
  { "ish", 0xB},
  { "ld", 0xD},
  { "st", 0xE},
  { "sy", 0xF},
};

const std::pair<const char *, int> DBsByName[] = {
  { "ISH", 8 },
  { "ISHLD", 6 },
  { "ISHST", 7 },
  { "LD", 9 },
  { "NSH", 5 },
  { "NSHLD", 3 },
  { "NSHST", 4 },
  { "OSH", 2 },
  { "OSHLD", 0 },
  { "OSHST", 1 },
  { "ST", 10 },
  { "SY", 11 },
};

const DB *lookupDBByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(DBsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &DBsList[Idx->second];
}

const std::pair<uint8_t, int> DBsByEncoding[] = {
  { 0x1, 0 },
  { 0x2, 1 },
  { 0x3, 2 },
  { 0x5, 3 },
  { 0x6, 4 },
  { 0x7, 5 },
  { 0x9, 6 },
  { 0xA, 7 },
  { 0xB, 8 },
  { 0xD, 9 },
  { 0xE, 10 },
  { 0xF, 11 },
};

const DB *lookupDBByEncoding(uint8_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint8_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint8_t, int>> Table(DBsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &DBsList[Idx->second];
}

#endif
#ifdef GET_DC_DECL
#undef GET_DC_DECL
enum DCValues {
  ZVA = 23457,
  IVAC = 17329,
  ISW = 17330,
  CVAC = 23505,
  CSW = 17362,
  CVAU = 23513,
  CIVAC = 23537,
  CISW = 17394,
};

const DC *lookupDCByName(StringRef Name);

const DC *lookupDCByEncoding(uint16_t Encoding);

#endif

#ifdef GET_DC_IMPL
#undef GET_DC_IMPL
const DC DCsList[] = {
  { "ZVA", 0x5BA1},
  { "IVAC", 0x43B1},
  { "ISW", 0x43B2},
  { "CVAC", 0x5BD1},
  { "CSW", 0x43D2},
  { "CVAU", 0x5BD9},
  { "CIVAC", 0x5BF1},
  { "CISW", 0x43F2},
};

const std::pair<const char *, int> DCsByName[] = {
  { "CISW", 7 },
  { "CIVAC", 6 },
  { "CSW", 4 },
  { "CVAC", 3 },
  { "CVAU", 5 },
  { "ISW", 2 },
  { "IVAC", 1 },
  { "ZVA", 0 },
};

const DC *lookupDCByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(DCsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &DCsList[Idx->second];
}

const std::pair<uint16_t, int> DCsByEncoding[] = {
  { 0x43B1, 1 },
  { 0x43B2, 2 },
  { 0x43D2, 4 },
  { 0x43F2, 7 },
  { 0x5BA1, 0 },
  { 0x5BD1, 3 },
  { 0x5BD9, 5 },
  { 0x5BF1, 6 },
};

const DC *lookupDCByEncoding(uint16_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint16_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint16_t, int>> Table(DCsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &DCsList[Idx->second];
}

#endif
#ifdef GET_IC_DECL
#undef GET_IC_DECL
enum ICValues {
  IALLUIS = 904,
  IALLU = 936,
  IVAU = 904,
};

const IC *lookupICByName(StringRef Name);

const IC *lookupICByEncoding(uint16_t Encoding);

#endif

#ifdef GET_IC_IMPL
#undef GET_IC_IMPL
const IC ICsList[] = {
  { "IALLUIS", 0x388, false},
  { "IALLU", 0x3A8, false},
  { "IVAU", 0x388, true},
};

const std::pair<const char *, int> ICsByName[] = {
  { "IALLU", 1 },
  { "IALLUIS", 0 },
  { "IVAU", 2 },
};

const IC *lookupICByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(ICsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ICsList[Idx->second];
}

const std::pair<uint16_t, int> ICsByEncoding[] = {
  { 0x388, 0 },
  { 0x388, 2 },
  { 0x3A8, 1 },
};

const IC *lookupICByEncoding(uint16_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint16_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint16_t, int>> Table(ICsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ICsList[Idx->second];
}

#endif
#ifdef GET_ISB_DECL
#undef GET_ISB_DECL
enum ISBValues {
  sy = 15,
};

const ISB *lookupISBByName(StringRef Name);

const ISB *lookupISBByEncoding(uint8_t Encoding);

#endif

#ifdef GET_ISB_IMPL
#undef GET_ISB_IMPL
const ISB ISBsList[] = {
  { "sy", 0xF},
};

const std::pair<const char *, int> ISBsByName[] = {
  { "SY", 0 },
};

const ISB *lookupISBByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(ISBsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ISBsList[Idx->second];
}

const std::pair<uint8_t, int> ISBsByEncoding[] = {
  { 0xF, 0 },
};

const ISB *lookupISBByEncoding(uint8_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint8_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint8_t, int>> Table(ISBsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &ISBsList[Idx->second];
}

#endif
#ifdef GET_PRFM_DECL
#undef GET_PRFM_DECL
enum PRFMValues {
  pldl1keep = 0,
  pldl1strm = 1,
  pldl2keep = 2,
  pldl2strm = 3,
  pldl3keep = 4,
  pldl3strm = 5,
  plil1keep = 8,
  plil1strm = 9,
  plil2keep = 10,
  plil2strm = 11,
  plil3keep = 12,
  plil3strm = 13,
  pstl1keep = 16,
  pstl1strm = 17,
  pstl2keep = 18,
  pstl2strm = 19,
  pstl3keep = 20,
  pstl3strm = 21,
};

const PRFM *lookupPRFMByName(StringRef Name);

const PRFM *lookupPRFMByEncoding(uint8_t Encoding);

#endif

#ifdef GET_PRFM_IMPL
#undef GET_PRFM_IMPL
const PRFM PRFMsList[] = {
  { "pldl1keep", 0x0},
  { "pldl1strm", 0x1},
  { "pldl2keep", 0x2},
  { "pldl2strm", 0x3},
  { "pldl3keep", 0x4},
  { "pldl3strm", 0x5},
  { "plil1keep", 0x8},
  { "plil1strm", 0x9},
  { "plil2keep", 0xA},
  { "plil2strm", 0xB},
  { "plil3keep", 0xC},
  { "plil3strm", 0xD},
  { "pstl1keep", 0x10},
  { "pstl1strm", 0x11},
  { "pstl2keep", 0x12},
  { "pstl2strm", 0x13},
  { "pstl3keep", 0x14},
  { "pstl3strm", 0x15},
};

const std::pair<const char *, int> PRFMsByName[] = {
  { "PLDL1KEEP", 0 },
  { "PLDL1STRM", 1 },
  { "PLDL2KEEP", 2 },
  { "PLDL2STRM", 3 },
  { "PLDL3KEEP", 4 },
  { "PLDL3STRM", 5 },
  { "PLIL1KEEP", 6 },
  { "PLIL1STRM", 7 },
  { "PLIL2KEEP", 8 },
  { "PLIL2STRM", 9 },
  { "PLIL3KEEP", 10 },
  { "PLIL3STRM", 11 },
  { "PSTL1KEEP", 12 },
  { "PSTL1STRM", 13 },
  { "PSTL2KEEP", 14 },
  { "PSTL2STRM", 15 },
  { "PSTL3KEEP", 16 },
  { "PSTL3STRM", 17 },
};

const PRFM *lookupPRFMByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(PRFMsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PRFMsList[Idx->second];
}

const std::pair<uint8_t, int> PRFMsByEncoding[] = {
  { 0x0, 0 },
  { 0x1, 1 },
  { 0x2, 2 },
  { 0x3, 3 },
  { 0x4, 4 },
  { 0x5, 5 },
  { 0x8, 6 },
  { 0x9, 7 },
  { 0xA, 8 },
  { 0xB, 9 },
  { 0xC, 10 },
  { 0xD, 11 },
  { 0x10, 12 },
  { 0x11, 13 },
  { 0x12, 14 },
  { 0x13, 15 },
  { 0x14, 16 },
  { 0x15, 17 },
};

const PRFM *lookupPRFMByEncoding(uint8_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint8_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint8_t, int>> Table(PRFMsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PRFMsList[Idx->second];
}

#endif
#ifdef GET_PSB_DECL
#undef GET_PSB_DECL
enum PSBValues {
  csync = 17,
};

const PSB *lookupPSBByName(StringRef Name);

const PSB *lookupPSBByEncoding(uint8_t Encoding);

#endif

#ifdef GET_PSB_IMPL
#undef GET_PSB_IMPL
const PSB PSBsList[] = {
  { "csync", 0x11},
};

const std::pair<const char *, int> PSBsByName[] = {
  { "CSYNC", 0 },
};

const PSB *lookupPSBByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(PSBsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PSBsList[Idx->second];
}

const std::pair<uint8_t, int> PSBsByEncoding[] = {
  { 0x11, 0 },
};

const PSB *lookupPSBByEncoding(uint8_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint8_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint8_t, int>> Table(PSBsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PSBsList[Idx->second];
}

#endif
#ifdef GET_PSTATE_DECL
#undef GET_PSTATE_DECL
enum PStateValues {
  SPSel = 5,
  DAIFSet = 30,
  DAIFClr = 31,
  PAN = 4,
  UAO = 3,
};

const PState *lookupPStateByName(StringRef Name);

const PState *lookupPStateByEncoding(uint8_t Encoding);

#endif

#ifdef GET_PSTATE_IMPL
#undef GET_PSTATE_IMPL
const PState PStatesList[] = {
  { "SPSel", 0x5,  {} },
  { "DAIFSet", 0x1E,  {} },
  { "DAIFClr", 0x1F,  {} },
  { "PAN", 0x4,  {AArch64::HasV8_1aOps} },
  { "UAO", 0x3,  {AArch64::HasV8_2aOps} },
};

const std::pair<const char *, int> PStatesByName[] = {
  { "DAIFCLR", 2 },
  { "DAIFSET", 1 },
  { "PAN", 3 },
  { "SPSEL", 0 },
  { "UAO", 4 },
};

const PState *lookupPStateByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(PStatesByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PStatesList[Idx->second];
}

const std::pair<uint8_t, int> PStatesByEncoding[] = {
  { 0x3, 4 },
  { 0x4, 3 },
  { 0x5, 0 },
  { 0x1E, 1 },
  { 0x1F, 2 },
};

const PState *lookupPStateByEncoding(uint8_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint8_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint8_t, int>> Table(PStatesByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &PStatesList[Idx->second];
}

#endif
#ifdef GET_SYSREG_DECL
#undef GET_SYSREG_DECL
enum SysRegValues {
  MDCCSR_EL0 = 38920,
  DBGDTRRX_EL0 = 38952,
  MDRAR_EL1 = 32896,
  OSLSR_EL1 = 32908,
  DBGAUTHSTATUS_EL1 = 33782,
  PMCEID0_EL0 = 56550,
  PMCEID1_EL0 = 56551,
  MIDR_EL1 = 49152,
  CCSIDR_EL1 = 51200,
  CLIDR_EL1 = 51201,
  CTR_EL0 = 55297,
  MPIDR_EL1 = 49157,
  REVIDR_EL1 = 49158,
  AIDR_EL1 = 51207,
  DCZID_EL0 = 55303,
  ID_PFR0_EL1 = 49160,
  ID_PFR1_EL1 = 49161,
  ID_DFR0_EL1 = 49162,
  ID_AFR0_EL1 = 49163,
  ID_MMFR0_EL1 = 49164,
  ID_MMFR1_EL1 = 49165,
  ID_MMFR2_EL1 = 49166,
  ID_MMFR3_EL1 = 49167,
  ID_ISAR0_EL1 = 49168,
  ID_ISAR1_EL1 = 49169,
  ID_ISAR2_EL1 = 49170,
  ID_ISAR3_EL1 = 49171,
  ID_ISAR4_EL1 = 49172,
  ID_ISAR5_EL1 = 49173,
  ID_AA64PFR0_EL1 = 49184,
  ID_AA64PFR1_EL1 = 49185,
  ID_AA64DFR0_EL1 = 49192,
  ID_AA64DFR1_EL1 = 49193,
  ID_AA64AFR0_EL1 = 49196,
  ID_AA64AFR1_EL1 = 49197,
  ID_AA64ISAR0_EL1 = 49200,
  ID_AA64ISAR1_EL1 = 49201,
  ID_AA64MMFR0_EL1 = 49208,
  ID_AA64MMFR1_EL1 = 49209,
  ID_AA64MMFR2_EL1 = 49210,
  MVFR0_EL1 = 49176,
  MVFR1_EL1 = 49177,
  MVFR2_EL1 = 49178,
  RVBAR_EL1 = 50689,
  RVBAR_EL2 = 58881,
  RVBAR_EL3 = 62977,
  ISR_EL1 = 50696,
  CNTPCT_EL0 = 57089,
  CNTVCT_EL0 = 57090,
  ID_MMFR4_EL1 = 49174,
  TRCSTATR = 34840,
  TRCIDR8 = 34822,
  TRCIDR9 = 34830,
  TRCIDR10 = 34838,
  TRCIDR11 = 34846,
  TRCIDR12 = 34854,
  TRCIDR13 = 34862,
  TRCIDR0 = 34887,
  TRCIDR1 = 34895,
  TRCIDR2 = 34903,
  TRCIDR3 = 34911,
  TRCIDR4 = 34919,
  TRCIDR5 = 34927,
  TRCIDR6 = 34935,
  TRCIDR7 = 34943,
  TRCOSLSR = 34956,
  TRCPDSR = 34988,
  TRCDEVAFF0 = 35798,
  TRCDEVAFF1 = 35806,
  TRCLSR = 35822,
  TRCAUTHSTATUS = 35830,
  TRCDEVARCH = 35838,
  TRCDEVID = 35735,
  TRCDEVTYPE = 35743,
  TRCPIDR4 = 35751,
  TRCPIDR5 = 35759,
  TRCPIDR6 = 35767,
  TRCPIDR7 = 35775,
  TRCPIDR0 = 35783,
  TRCPIDR1 = 35791,
  TRCPIDR2 = 35799,
  TRCPIDR3 = 35807,
  TRCCIDR0 = 35815,
  TRCCIDR1 = 35823,
  TRCCIDR2 = 35831,
  TRCCIDR3 = 35839,
  ICC_IAR1_EL1 = 50784,
  ICC_IAR0_EL1 = 50752,
  ICC_HPPIR1_EL1 = 50786,
  ICC_HPPIR0_EL1 = 50754,
  ICC_RPR_EL1 = 50779,
  ICH_VTR_EL2 = 58969,
  ICH_EISR_EL2 = 58971,
  ICH_ELSR_EL2 = 58973,
  LORID_EL1 = 50471,
  ERRIDR_EL1 = 49816,
  ERXFR_EL1 = 49824,
  DBGDTRTX_EL0 = 38952,
  OSLAR_EL1 = 32900,
  PMSWINC_EL0 = 56548,
  TRCOSLAR = 34948,
  TRCLAR = 35814,
  ICC_EOIR1_EL1 = 50785,
  ICC_EOIR0_EL1 = 50753,
  ICC_DIR_EL1 = 50777,
  ICC_SGI1R_EL1 = 50781,
  ICC_ASGI1R_EL1 = 50782,
  ICC_SGI0R_EL1 = 50783,
  OSDTRRX_EL1 = 32770,
  OSDTRTX_EL1 = 32794,
  TEECR32_EL1 = 36864,
  MDCCINT_EL1 = 32784,
  MDSCR_EL1 = 32786,
  DBGDTR_EL0 = 38944,
  OSECCR_EL1 = 32818,
  DBGVCR32_EL2 = 41016,
  DBGBVR0_EL1 = 32772,
  DBGBVR1_EL1 = 32780,
  DBGBVR2_EL1 = 32788,
  DBGBVR3_EL1 = 32796,
  DBGBVR4_EL1 = 32804,
  DBGBVR5_EL1 = 32812,
  DBGBVR6_EL1 = 32820,
  DBGBVR7_EL1 = 32828,
  DBGBVR8_EL1 = 32836,
  DBGBVR9_EL1 = 32844,
  DBGBVR10_EL1 = 32852,
  DBGBVR11_EL1 = 32860,
  DBGBVR12_EL1 = 32868,
  DBGBVR13_EL1 = 32876,
  DBGBVR14_EL1 = 32884,
  DBGBVR15_EL1 = 32892,
  DBGBCR0_EL1 = 32773,
  DBGBCR1_EL1 = 32781,
  DBGBCR2_EL1 = 32789,
  DBGBCR3_EL1 = 32797,
  DBGBCR4_EL1 = 32805,
  DBGBCR5_EL1 = 32813,
  DBGBCR6_EL1 = 32821,
  DBGBCR7_EL1 = 32829,
  DBGBCR8_EL1 = 32837,
  DBGBCR9_EL1 = 32845,
  DBGBCR10_EL1 = 32853,
  DBGBCR11_EL1 = 32861,
  DBGBCR12_EL1 = 32869,
  DBGBCR13_EL1 = 32877,
  DBGBCR14_EL1 = 32885,
  DBGBCR15_EL1 = 32893,
  DBGWVR0_EL1 = 32774,
  DBGWVR1_EL1 = 32782,
  DBGWVR2_EL1 = 32790,
  DBGWVR3_EL1 = 32798,
  DBGWVR4_EL1 = 32806,
  DBGWVR5_EL1 = 32814,
  DBGWVR6_EL1 = 32822,
  DBGWVR7_EL1 = 32830,
  DBGWVR8_EL1 = 32838,
  DBGWVR9_EL1 = 32846,
  DBGWVR10_EL1 = 32854,
  DBGWVR11_EL1 = 32862,
  DBGWVR12_EL1 = 32870,
  DBGWVR13_EL1 = 32878,
  DBGWVR14_EL1 = 32886,
  DBGWVR15_EL1 = 32894,
  DBGWCR0_EL1 = 32775,
  DBGWCR1_EL1 = 32783,
  DBGWCR2_EL1 = 32791,
  DBGWCR3_EL1 = 32799,
  DBGWCR4_EL1 = 32807,
  DBGWCR5_EL1 = 32815,
  DBGWCR6_EL1 = 32823,
  DBGWCR7_EL1 = 32831,
  DBGWCR8_EL1 = 32839,
  DBGWCR9_EL1 = 32847,
  DBGWCR10_EL1 = 32855,
  DBGWCR11_EL1 = 32863,
  DBGWCR12_EL1 = 32871,
  DBGWCR13_EL1 = 32879,
  DBGWCR14_EL1 = 32887,
  DBGWCR15_EL1 = 32895,
  TEEHBR32_EL1 = 36992,
  OSDLR_EL1 = 32924,
  DBGPRCR_EL1 = 32932,
  DBGCLAIMSET_EL1 = 33734,
  DBGCLAIMCLR_EL1 = 33742,
  CSSELR_EL1 = 53248,
  VPIDR_EL2 = 57344,
  VMPIDR_EL2 = 57349,
  CPACR_EL1 = 49282,
  SCTLR_EL1 = 49280,
  SCTLR_EL2 = 57472,
  SCTLR_EL3 = 61568,
  ACTLR_EL1 = 49281,
  ACTLR_EL2 = 57473,
  ACTLR_EL3 = 61569,
  HCR_EL2 = 57480,
  SCR_EL3 = 61576,
  MDCR_EL2 = 57481,
  SDER32_EL3 = 61577,
  CPTR_EL2 = 57482,
  CPTR_EL3 = 61578,
  HSTR_EL2 = 57483,
  HACR_EL2 = 57487,
  MDCR_EL3 = 61593,
  TTBR0_EL1 = 49408,
  TTBR0_EL2 = 57600,
  TTBR0_EL3 = 61696,
  TTBR1_EL1 = 49409,
  TCR_EL1 = 49410,
  TCR_EL2 = 57602,
  TCR_EL3 = 61698,
  VTTBR_EL2 = 57608,
  VTCR_EL2 = 57610,
  DACR32_EL2 = 57728,
  SPSR_EL1 = 49664,
  SPSR_EL2 = 57856,
  SPSR_EL3 = 61952,
  ELR_EL1 = 49665,
  ELR_EL2 = 57857,
  ELR_EL3 = 61953,
  SP_EL0 = 49672,
  SP_EL1 = 57864,
  SP_EL2 = 61960,
  SPSel = 49680,
  NZCV = 55824,
  DAIF = 55825,
  CurrentEL = 49682,
  SPSR_irq = 57880,
  SPSR_abt = 57881,
  SPSR_und = 57882,
  SPSR_fiq = 57883,
  FPCR = 55840,
  FPSR = 55841,
  DSPSR_EL0 = 55848,
  DLR_EL0 = 55849,
  IFSR32_EL2 = 57985,
  AFSR0_EL1 = 49800,
  AFSR0_EL2 = 57992,
  AFSR0_EL3 = 62088,
  AFSR1_EL1 = 49801,
  AFSR1_EL2 = 57993,
  AFSR1_EL3 = 62089,
  ESR_EL1 = 49808,
  ESR_EL2 = 58000,
  ESR_EL3 = 62096,
  FPEXC32_EL2 = 58008,
  FAR_EL1 = 49920,
  FAR_EL2 = 58112,
  FAR_EL3 = 62208,
  HPFAR_EL2 = 58116,
  PAR_EL1 = 50080,
  PMCR_EL0 = 56544,
  PMCNTENSET_EL0 = 56545,
  PMCNTENCLR_EL0 = 56546,
  PMOVSCLR_EL0 = 56547,
  PMSELR_EL0 = 56549,
  PMCCNTR_EL0 = 56552,
  PMXEVTYPER_EL0 = 56553,
  PMXEVCNTR_EL0 = 56554,
  PMUSERENR_EL0 = 56560,
  PMINTENSET_EL1 = 50417,
  PMINTENCLR_EL1 = 50418,
  PMOVSSET_EL0 = 56563,
  MAIR_EL1 = 50448,
  MAIR_EL2 = 58640,
  MAIR_EL3 = 62736,
  AMAIR_EL1 = 50456,
  AMAIR_EL2 = 58648,
  AMAIR_EL3 = 62744,
  VBAR_EL1 = 50688,
  VBAR_EL2 = 58880,
  VBAR_EL3 = 62976,
  RMR_EL1 = 50690,
  RMR_EL2 = 58882,
  RMR_EL3 = 62978,
  CONTEXTIDR_EL1 = 50817,
  TPIDR_EL0 = 56962,
  TPIDR_EL2 = 59010,
  TPIDR_EL3 = 63106,
  TPIDRRO_EL0 = 56963,
  TPIDR_EL1 = 50820,
  CNTFRQ_EL0 = 57088,
  CNTVOFF_EL2 = 59139,
  CNTKCTL_EL1 = 50952,
  CNTHCTL_EL2 = 59144,
  CNTP_TVAL_EL0 = 57104,
  CNTHP_TVAL_EL2 = 59152,
  CNTPS_TVAL_EL1 = 65296,
  CNTP_CTL_EL0 = 57105,
  CNTHP_CTL_EL2 = 59153,
  CNTPS_CTL_EL1 = 65297,
  CNTP_CVAL_EL0 = 57106,
  CNTHP_CVAL_EL2 = 59154,
  CNTPS_CVAL_EL1 = 65298,
  CNTV_TVAL_EL0 = 57112,
  CNTV_CTL_EL0 = 57113,
  CNTV_CVAL_EL0 = 57114,
  PMEVCNTR0_EL0 = 57152,
  PMEVCNTR1_EL0 = 57153,
  PMEVCNTR2_EL0 = 57154,
  PMEVCNTR3_EL0 = 57155,
  PMEVCNTR4_EL0 = 57156,
  PMEVCNTR5_EL0 = 57157,
  PMEVCNTR6_EL0 = 57158,
  PMEVCNTR7_EL0 = 57159,
  PMEVCNTR8_EL0 = 57160,
  PMEVCNTR9_EL0 = 57161,
  PMEVCNTR10_EL0 = 57162,
  PMEVCNTR11_EL0 = 57163,
  PMEVCNTR12_EL0 = 57164,
  PMEVCNTR13_EL0 = 57165,
  PMEVCNTR14_EL0 = 57166,
  PMEVCNTR15_EL0 = 57167,
  PMEVCNTR16_EL0 = 57168,
  PMEVCNTR17_EL0 = 57169,
  PMEVCNTR18_EL0 = 57170,
  PMEVCNTR19_EL0 = 57171,
  PMEVCNTR20_EL0 = 57172,
  PMEVCNTR21_EL0 = 57173,
  PMEVCNTR22_EL0 = 57174,
  PMEVCNTR23_EL0 = 57175,
  PMEVCNTR24_EL0 = 57176,
  PMEVCNTR25_EL0 = 57177,
  PMEVCNTR26_EL0 = 57178,
  PMEVCNTR27_EL0 = 57179,
  PMEVCNTR28_EL0 = 57180,
  PMEVCNTR29_EL0 = 57181,
  PMEVCNTR30_EL0 = 57182,
  PMCCFILTR_EL0 = 57215,
  PMEVTYPER0_EL0 = 57184,
  PMEVTYPER1_EL0 = 57185,
  PMEVTYPER2_EL0 = 57186,
  PMEVTYPER3_EL0 = 57187,
  PMEVTYPER4_EL0 = 57188,
  PMEVTYPER5_EL0 = 57189,
  PMEVTYPER6_EL0 = 57190,
  PMEVTYPER7_EL0 = 57191,
  PMEVTYPER8_EL0 = 57192,
  PMEVTYPER9_EL0 = 57193,
  PMEVTYPER10_EL0 = 57194,
  PMEVTYPER11_EL0 = 57195,
  PMEVTYPER12_EL0 = 57196,
  PMEVTYPER13_EL0 = 57197,
  PMEVTYPER14_EL0 = 57198,
  PMEVTYPER15_EL0 = 57199,
  PMEVTYPER16_EL0 = 57200,
  PMEVTYPER17_EL0 = 57201,
  PMEVTYPER18_EL0 = 57202,
  PMEVTYPER19_EL0 = 57203,
  PMEVTYPER20_EL0 = 57204,
  PMEVTYPER21_EL0 = 57205,
  PMEVTYPER22_EL0 = 57206,
  PMEVTYPER23_EL0 = 57207,
  PMEVTYPER24_EL0 = 57208,
  PMEVTYPER25_EL0 = 57209,
  PMEVTYPER26_EL0 = 57210,
  PMEVTYPER27_EL0 = 57211,
  PMEVTYPER28_EL0 = 57212,
  PMEVTYPER29_EL0 = 57213,
  PMEVTYPER30_EL0 = 57214,
  TRCPRGCTLR = 34824,
  TRCPROCSELR = 34832,
  TRCCONFIGR = 34848,
  TRCAUXCTLR = 34864,
  TRCEVENTCTL0R = 34880,
  TRCEVENTCTL1R = 34888,
  TRCSTALLCTLR = 34904,
  TRCTSCTLR = 34912,
  TRCSYNCPR = 34920,
  TRCCCCTLR = 34928,
  TRCBBCTLR = 34936,
  TRCTRACEIDR = 34817,
  TRCQCTLR = 34825,
  TRCVICTLR = 34818,
  TRCVIIECTLR = 34826,
  TRCVISSCTLR = 34834,
  TRCVIPCSSCTLR = 34842,
  TRCVDCTLR = 34882,
  TRCVDSACCTLR = 34890,
  TRCVDARCCTLR = 34898,
  TRCSEQEVR0 = 34820,
  TRCSEQEVR1 = 34828,
  TRCSEQEVR2 = 34836,
  TRCSEQRSTEVR = 34868,
  TRCSEQSTR = 34876,
  TRCEXTINSELR = 34884,
  TRCCNTRLDVR0 = 34821,
  TRCCNTRLDVR1 = 34829,
  TRCCNTRLDVR2 = 34837,
  TRCCNTRLDVR3 = 34845,
  TRCCNTCTLR0 = 34853,
  TRCCNTCTLR1 = 34861,
  TRCCNTCTLR2 = 34869,
  TRCCNTCTLR3 = 34877,
  TRCCNTVR0 = 34885,
  TRCCNTVR1 = 34893,
  TRCCNTVR2 = 34901,
  TRCCNTVR3 = 34909,
  TRCIMSPEC0 = 34823,
  TRCIMSPEC1 = 34831,
  TRCIMSPEC2 = 34839,
  TRCIMSPEC3 = 34847,
  TRCIMSPEC4 = 34855,
  TRCIMSPEC5 = 34863,
  TRCIMSPEC6 = 34871,
  TRCIMSPEC7 = 34879,
  TRCRSCTLR2 = 34960,
  TRCRSCTLR3 = 34968,
  TRCRSCTLR4 = 34976,
  TRCRSCTLR5 = 34984,
  TRCRSCTLR6 = 34992,
  TRCRSCTLR7 = 35000,
  TRCRSCTLR8 = 35008,
  TRCRSCTLR9 = 35016,
  TRCRSCTLR10 = 35024,
  TRCRSCTLR11 = 35032,
  TRCRSCTLR12 = 35040,
  TRCRSCTLR13 = 35048,
  TRCRSCTLR14 = 35056,
  TRCRSCTLR15 = 35064,
  TRCRSCTLR16 = 34945,
  TRCRSCTLR17 = 34953,
  TRCRSCTLR18 = 34961,
  TRCRSCTLR19 = 34969,
  TRCRSCTLR20 = 34977,
  TRCRSCTLR21 = 34985,
  TRCRSCTLR22 = 34993,
  TRCRSCTLR23 = 35001,
  TRCRSCTLR24 = 35009,
  TRCRSCTLR25 = 35017,
  TRCRSCTLR26 = 35025,
  TRCRSCTLR27 = 35033,
  TRCRSCTLR28 = 35041,
  TRCRSCTLR29 = 35049,
  TRCRSCTLR30 = 35057,
  TRCRSCTLR31 = 35065,
  TRCSSCCR0 = 34946,
  TRCSSCCR1 = 34954,
  TRCSSCCR2 = 34962,
  TRCSSCCR3 = 34970,
  TRCSSCCR4 = 34978,
  TRCSSCCR5 = 34986,
  TRCSSCCR6 = 34994,
  TRCSSCCR7 = 35002,
  TRCSSCSR0 = 35010,
  TRCSSCSR1 = 35018,
  TRCSSCSR2 = 35026,
  TRCSSCSR3 = 35034,
  TRCSSCSR4 = 35042,
  TRCSSCSR5 = 35050,
  TRCSSCSR6 = 35058,
  TRCSSCSR7 = 35066,
  TRCSSPCICR0 = 34947,
  TRCSSPCICR1 = 34955,
  TRCSSPCICR2 = 34963,
  TRCSSPCICR3 = 34971,
  TRCSSPCICR4 = 34979,
  TRCSSPCICR5 = 34987,
  TRCSSPCICR6 = 34995,
  TRCSSPCICR7 = 35003,
  TRCPDCR = 34980,
  TRCACVR0 = 35072,
  TRCACVR1 = 35088,
  TRCACVR2 = 35104,
  TRCACVR3 = 35120,
  TRCACVR4 = 35136,
  TRCACVR5 = 35152,
  TRCACVR6 = 35168,
  TRCACVR7 = 35184,
  TRCACVR8 = 35073,
  TRCACVR9 = 35089,
  TRCACVR10 = 35105,
  TRCACVR11 = 35121,
  TRCACVR12 = 35137,
  TRCACVR13 = 35153,
  TRCACVR14 = 35169,
  TRCACVR15 = 35185,
  TRCACATR0 = 35074,
  TRCACATR1 = 35090,
  TRCACATR2 = 35106,
  TRCACATR3 = 35122,
  TRCACATR4 = 35138,
  TRCACATR5 = 35154,
  TRCACATR6 = 35170,
  TRCACATR7 = 35186,
  TRCACATR8 = 35075,
  TRCACATR9 = 35091,
  TRCACATR10 = 35107,
  TRCACATR11 = 35123,
  TRCACATR12 = 35139,
  TRCACATR13 = 35155,
  TRCACATR14 = 35171,
  TRCACATR15 = 35187,
  TRCDVCVR0 = 35076,
  TRCDVCVR1 = 35108,
  TRCDVCVR2 = 35140,
  TRCDVCVR3 = 35172,
  TRCDVCVR4 = 35077,
  TRCDVCVR5 = 35109,
  TRCDVCVR6 = 35141,
  TRCDVCVR7 = 35173,
  TRCDVCMR0 = 35078,
  TRCDVCMR1 = 35110,
  TRCDVCMR2 = 35142,
  TRCDVCMR3 = 35174,
  TRCDVCMR4 = 35079,
  TRCDVCMR5 = 35111,
  TRCDVCMR6 = 35143,
  TRCDVCMR7 = 35175,
  TRCCIDCVR0 = 35200,
  TRCCIDCVR1 = 35216,
  TRCCIDCVR2 = 35232,
  TRCCIDCVR3 = 35248,
  TRCCIDCVR4 = 35264,
  TRCCIDCVR5 = 35280,
  TRCCIDCVR6 = 35296,
  TRCCIDCVR7 = 35312,
  TRCVMIDCVR0 = 35201,
  TRCVMIDCVR1 = 35217,
  TRCVMIDCVR2 = 35233,
  TRCVMIDCVR3 = 35249,
  TRCVMIDCVR4 = 35265,
  TRCVMIDCVR5 = 35281,
  TRCVMIDCVR6 = 35297,
  TRCVMIDCVR7 = 35313,
  TRCCIDCCTLR0 = 35202,
  TRCCIDCCTLR1 = 35210,
  TRCVMIDCCTLR0 = 35218,
  TRCVMIDCCTLR1 = 35226,
  TRCITCTRL = 35716,
  TRCCLAIMSET = 35782,
  TRCCLAIMCLR = 35790,
  ICC_BPR1_EL1 = 50787,
  ICC_BPR0_EL1 = 50755,
  ICC_PMR_EL1 = 49712,
  ICC_CTLR_EL1 = 50788,
  ICC_CTLR_EL3 = 63076,
  ICC_SRE_EL1 = 50789,
  ICC_SRE_EL2 = 58957,
  ICC_SRE_EL3 = 63077,
  ICC_IGRPEN0_EL1 = 50790,
  ICC_IGRPEN1_EL1 = 50791,
  ICC_IGRPEN1_EL3 = 63079,
  ICC_SEIEN_EL1 = 50792,
  ICC_AP0R0_EL1 = 50756,
  ICC_AP0R1_EL1 = 50757,
  ICC_AP0R2_EL1 = 50758,
  ICC_AP0R3_EL1 = 50759,
  ICC_AP1R0_EL1 = 50760,
  ICC_AP1R1_EL1 = 50761,
  ICC_AP1R2_EL1 = 50762,
  ICC_AP1R3_EL1 = 50763,
  ICH_AP0R0_EL2 = 58944,
  ICH_AP0R1_EL2 = 58945,
  ICH_AP0R2_EL2 = 58946,
  ICH_AP0R3_EL2 = 58947,
  ICH_AP1R0_EL2 = 58952,
  ICH_AP1R1_EL2 = 58953,
  ICH_AP1R2_EL2 = 58954,
  ICH_AP1R3_EL2 = 58955,
  ICH_HCR_EL2 = 58968,
  ICH_MISR_EL2 = 58970,
  ICH_VMCR_EL2 = 58975,
  ICH_VSEIR_EL2 = 58956,
  ICH_LR0_EL2 = 58976,
  ICH_LR1_EL2 = 58977,
  ICH_LR2_EL2 = 58978,
  ICH_LR3_EL2 = 58979,
  ICH_LR4_EL2 = 58980,
  ICH_LR5_EL2 = 58981,
  ICH_LR6_EL2 = 58982,
  ICH_LR7_EL2 = 58983,
  ICH_LR8_EL2 = 58984,
  ICH_LR9_EL2 = 58985,
  ICH_LR10_EL2 = 58986,
  ICH_LR11_EL2 = 58987,
  ICH_LR12_EL2 = 58988,
  ICH_LR13_EL2 = 58989,
  ICH_LR14_EL2 = 58990,
  ICH_LR15_EL2 = 58991,
  PAN = 49683,
  LORSA_EL1 = 50464,
  LOREA_EL1 = 50465,
  LORN_EL1 = 50466,
  LORC_EL1 = 50467,
  TTBR1_EL2 = 57601,
  CONTEXTIDR_EL2 = 59009,
  CNTHV_TVAL_EL2 = 59160,
  CNTHV_CVAL_EL2 = 59162,
  CNTHV_CTL_EL2 = 59161,
  SCTLR_EL12 = 59520,
  CPACR_EL12 = 59522,
  TTBR0_EL12 = 59648,
  TTBR1_EL12 = 59649,
  TCR_EL12 = 59650,
  AFSR0_EL12 = 60040,
  AFSR1_EL12 = 60041,
  ESR_EL12 = 60048,
  FAR_EL12 = 60160,
  MAIR_EL12 = 60688,
  AMAIR_EL12 = 60696,
  VBAR_EL12 = 60928,
  CONTEXTIDR_EL12 = 61057,
  CNTKCTL_EL12 = 61192,
  CNTP_TVAL_EL02 = 61200,
  CNTP_CTL_EL02 = 61201,
  CNTP_CVAL_EL02 = 61202,
  CNTV_TVAL_EL02 = 61208,
  CNTV_CTL_EL02 = 61209,
  CNTV_CVAL_EL02 = 61210,
  SPSR_EL12 = 59904,
  ELR_EL12 = 59905,
  UAO = 49684,
  PMBLIMITR_EL1 = 50384,
  PMBPTR_EL1 = 50385,
  PMBSR_EL1 = 50387,
  PMBIDR_EL1 = 50391,
  PMSCR_EL2 = 58568,
  PMSCR_EL12 = 60616,
  PMSCR_EL1 = 50376,
  PMSICR_EL1 = 50378,
  PMSIRR_EL1 = 50379,
  PMSFCR_EL1 = 50380,
  PMSEVFR_EL1 = 50381,
  PMSLATFR_EL1 = 50382,
  PMSIDR_EL1 = 50383,
  ERRSELR_EL1 = 49817,
  ERXCTLR_EL1 = 49825,
  ERXSTATUS_EL1 = 49826,
  ERXADDR_EL1 = 49827,
  ERXMISC0_EL1 = 49832,
  ERXMISC1_EL1 = 49833,
  DISR_EL1 = 50697,
  VDISR_EL2 = 58889,
  VSESR_EL2 = 58003,
  CPM_IOACC_CTL_EL3 = 65424,
};

const SysReg *lookupSysRegByName(StringRef Name);

const SysReg *lookupSysRegByEncoding(uint16_t Encoding);

#endif

#ifdef GET_SYSREG_IMPL
#undef GET_SYSREG_IMPL
const SysReg SysRegsList[] = {
  { "MDCCSR_EL0", 0x9808, true, false,  {} },
  { "DBGDTRRX_EL0", 0x9828, true, false,  {} },
  { "MDRAR_EL1", 0x8080, true, false,  {} },
  { "OSLSR_EL1", 0x808C, true, false,  {} },
  { "DBGAUTHSTATUS_EL1", 0x83F6, true, false,  {} },
  { "PMCEID0_EL0", 0xDCE6, true, false,  {} },
  { "PMCEID1_EL0", 0xDCE7, true, false,  {} },
  { "MIDR_EL1", 0xC000, true, false,  {} },
  { "CCSIDR_EL1", 0xC800, true, false,  {} },
  { "CLIDR_EL1", 0xC801, true, false,  {} },
  { "CTR_EL0", 0xD801, true, false,  {} },
  { "MPIDR_EL1", 0xC005, true, false,  {} },
  { "REVIDR_EL1", 0xC006, true, false,  {} },
  { "AIDR_EL1", 0xC807, true, false,  {} },
  { "DCZID_EL0", 0xD807, true, false,  {} },
  { "ID_PFR0_EL1", 0xC008, true, false,  {} },
  { "ID_PFR1_EL1", 0xC009, true, false,  {} },
  { "ID_DFR0_EL1", 0xC00A, true, false,  {} },
  { "ID_AFR0_EL1", 0xC00B, true, false,  {} },
  { "ID_MMFR0_EL1", 0xC00C, true, false,  {} },
  { "ID_MMFR1_EL1", 0xC00D, true, false,  {} },
  { "ID_MMFR2_EL1", 0xC00E, true, false,  {} },
  { "ID_MMFR3_EL1", 0xC00F, true, false,  {} },
  { "ID_ISAR0_EL1", 0xC010, true, false,  {} },
  { "ID_ISAR1_EL1", 0xC011, true, false,  {} },
  { "ID_ISAR2_EL1", 0xC012, true, false,  {} },
  { "ID_ISAR3_EL1", 0xC013, true, false,  {} },
  { "ID_ISAR4_EL1", 0xC014, true, false,  {} },
  { "ID_ISAR5_EL1", 0xC015, true, false,  {} },
  { "ID_AA64PFR0_EL1", 0xC020, true, false,  {} },
  { "ID_AA64PFR1_EL1", 0xC021, true, false,  {} },
  { "ID_AA64DFR0_EL1", 0xC028, true, false,  {} },
  { "ID_AA64DFR1_EL1", 0xC029, true, false,  {} },
  { "ID_AA64AFR0_EL1", 0xC02C, true, false,  {} },
  { "ID_AA64AFR1_EL1", 0xC02D, true, false,  {} },
  { "ID_AA64ISAR0_EL1", 0xC030, true, false,  {} },
  { "ID_AA64ISAR1_EL1", 0xC031, true, false,  {} },
  { "ID_AA64MMFR0_EL1", 0xC038, true, false,  {} },
  { "ID_AA64MMFR1_EL1", 0xC039, true, false,  {} },
  { "ID_AA64MMFR2_EL1", 0xC03A, true, false,  {AArch64::HasV8_2aOps} },
  { "MVFR0_EL1", 0xC018, true, false,  {} },
  { "MVFR1_EL1", 0xC019, true, false,  {} },
  { "MVFR2_EL1", 0xC01A, true, false,  {} },
  { "RVBAR_EL1", 0xC601, true, false,  {} },
  { "RVBAR_EL2", 0xE601, true, false,  {} },
  { "RVBAR_EL3", 0xF601, true, false,  {} },
  { "ISR_EL1", 0xC608, true, false,  {} },
  { "CNTPCT_EL0", 0xDF01, true, false,  {} },
  { "CNTVCT_EL0", 0xDF02, true, false,  {} },
  { "ID_MMFR4_EL1", 0xC016, true, false,  {} },
  { "TRCSTATR", 0x8818, true, false,  {} },
  { "TRCIDR8", 0x8806, true, false,  {} },
  { "TRCIDR9", 0x880E, true, false,  {} },
  { "TRCIDR10", 0x8816, true, false,  {} },
  { "TRCIDR11", 0x881E, true, false,  {} },
  { "TRCIDR12", 0x8826, true, false,  {} },
  { "TRCIDR13", 0x882E, true, false,  {} },
  { "TRCIDR0", 0x8847, true, false,  {} },
  { "TRCIDR1", 0x884F, true, false,  {} },
  { "TRCIDR2", 0x8857, true, false,  {} },
  { "TRCIDR3", 0x885F, true, false,  {} },
  { "TRCIDR4", 0x8867, true, false,  {} },
  { "TRCIDR5", 0x886F, true, false,  {} },
  { "TRCIDR6", 0x8877, true, false,  {} },
  { "TRCIDR7", 0x887F, true, false,  {} },
  { "TRCOSLSR", 0x888C, true, false,  {} },
  { "TRCPDSR", 0x88AC, true, false,  {} },
  { "TRCDEVAFF0", 0x8BD6, true, false,  {} },
  { "TRCDEVAFF1", 0x8BDE, true, false,  {} },
  { "TRCLSR", 0x8BEE, true, false,  {} },
  { "TRCAUTHSTATUS", 0x8BF6, true, false,  {} },
  { "TRCDEVARCH", 0x8BFE, true, false,  {} },
  { "TRCDEVID", 0x8B97, true, false,  {} },
  { "TRCDEVTYPE", 0x8B9F, true, false,  {} },
  { "TRCPIDR4", 0x8BA7, true, false,  {} },
  { "TRCPIDR5", 0x8BAF, true, false,  {} },
  { "TRCPIDR6", 0x8BB7, true, false,  {} },
  { "TRCPIDR7", 0x8BBF, true, false,  {} },
  { "TRCPIDR0", 0x8BC7, true, false,  {} },
  { "TRCPIDR1", 0x8BCF, true, false,  {} },
  { "TRCPIDR2", 0x8BD7, true, false,  {} },
  { "TRCPIDR3", 0x8BDF, true, false,  {} },
  { "TRCCIDR0", 0x8BE7, true, false,  {} },
  { "TRCCIDR1", 0x8BEF, true, false,  {} },
  { "TRCCIDR2", 0x8BF7, true, false,  {} },
  { "TRCCIDR3", 0x8BFF, true, false,  {} },
  { "ICC_IAR1_EL1", 0xC660, true, false,  {} },
  { "ICC_IAR0_EL1", 0xC640, true, false,  {} },
  { "ICC_HPPIR1_EL1", 0xC662, true, false,  {} },
  { "ICC_HPPIR0_EL1", 0xC642, true, false,  {} },
  { "ICC_RPR_EL1", 0xC65B, true, false,  {} },
  { "ICH_VTR_EL2", 0xE659, true, false,  {} },
  { "ICH_EISR_EL2", 0xE65B, true, false,  {} },
  { "ICH_ELSR_EL2", 0xE65D, true, false,  {} },
  { "LORID_EL1", 0xC527, true, false,  {AArch64::HasV8_1aOps} },
  { "ERRIDR_EL1", 0xC298, true, false,  {AArch64::FeatureRAS} },
  { "ERXFR_EL1", 0xC2A0, true, false,  {AArch64::FeatureRAS} },
  { "DBGDTRTX_EL0", 0x9828, false, true,  {} },
  { "OSLAR_EL1", 0x8084, false, true,  {} },
  { "PMSWINC_EL0", 0xDCE4, false, true,  {} },
  { "TRCOSLAR", 0x8884, false, true,  {} },
  { "TRCLAR", 0x8BE6, false, true,  {} },
  { "ICC_EOIR1_EL1", 0xC661, false, true,  {} },
  { "ICC_EOIR0_EL1", 0xC641, false, true,  {} },
  { "ICC_DIR_EL1", 0xC659, false, true,  {} },
  { "ICC_SGI1R_EL1", 0xC65D, false, true,  {} },
  { "ICC_ASGI1R_EL1", 0xC65E, false, true,  {} },
  { "ICC_SGI0R_EL1", 0xC65F, false, true,  {} },
  { "OSDTRRX_EL1", 0x8002, true, true,  {} },
  { "OSDTRTX_EL1", 0x801A, true, true,  {} },
  { "TEECR32_EL1", 0x9000, true, true,  {} },
  { "MDCCINT_EL1", 0x8010, true, true,  {} },
  { "MDSCR_EL1", 0x8012, true, true,  {} },
  { "DBGDTR_EL0", 0x9820, true, true,  {} },
  { "OSECCR_EL1", 0x8032, true, true,  {} },
  { "DBGVCR32_EL2", 0xA038, true, true,  {} },
  { "DBGBVR0_EL1", 0x8004, true, true,  {} },
  { "DBGBVR1_EL1", 0x800C, true, true,  {} },
  { "DBGBVR2_EL1", 0x8014, true, true,  {} },
  { "DBGBVR3_EL1", 0x801C, true, true,  {} },
  { "DBGBVR4_EL1", 0x8024, true, true,  {} },
  { "DBGBVR5_EL1", 0x802C, true, true,  {} },
  { "DBGBVR6_EL1", 0x8034, true, true,  {} },
  { "DBGBVR7_EL1", 0x803C, true, true,  {} },
  { "DBGBVR8_EL1", 0x8044, true, true,  {} },
  { "DBGBVR9_EL1", 0x804C, true, true,  {} },
  { "DBGBVR10_EL1", 0x8054, true, true,  {} },
  { "DBGBVR11_EL1", 0x805C, true, true,  {} },
  { "DBGBVR12_EL1", 0x8064, true, true,  {} },
  { "DBGBVR13_EL1", 0x806C, true, true,  {} },
  { "DBGBVR14_EL1", 0x8074, true, true,  {} },
  { "DBGBVR15_EL1", 0x807C, true, true,  {} },
  { "DBGBCR0_EL1", 0x8005, true, true,  {} },
  { "DBGBCR1_EL1", 0x800D, true, true,  {} },
  { "DBGBCR2_EL1", 0x8015, true, true,  {} },
  { "DBGBCR3_EL1", 0x801D, true, true,  {} },
  { "DBGBCR4_EL1", 0x8025, true, true,  {} },
  { "DBGBCR5_EL1", 0x802D, true, true,  {} },
  { "DBGBCR6_EL1", 0x8035, true, true,  {} },
  { "DBGBCR7_EL1", 0x803D, true, true,  {} },
  { "DBGBCR8_EL1", 0x8045, true, true,  {} },
  { "DBGBCR9_EL1", 0x804D, true, true,  {} },
  { "DBGBCR10_EL1", 0x8055, true, true,  {} },
  { "DBGBCR11_EL1", 0x805D, true, true,  {} },
  { "DBGBCR12_EL1", 0x8065, true, true,  {} },
  { "DBGBCR13_EL1", 0x806D, true, true,  {} },
  { "DBGBCR14_EL1", 0x8075, true, true,  {} },
  { "DBGBCR15_EL1", 0x807D, true, true,  {} },
  { "DBGWVR0_EL1", 0x8006, true, true,  {} },
  { "DBGWVR1_EL1", 0x800E, true, true,  {} },
  { "DBGWVR2_EL1", 0x8016, true, true,  {} },
  { "DBGWVR3_EL1", 0x801E, true, true,  {} },
  { "DBGWVR4_EL1", 0x8026, true, true,  {} },
  { "DBGWVR5_EL1", 0x802E, true, true,  {} },
  { "DBGWVR6_EL1", 0x8036, true, true,  {} },
  { "DBGWVR7_EL1", 0x803E, true, true,  {} },
  { "DBGWVR8_EL1", 0x8046, true, true,  {} },
  { "DBGWVR9_EL1", 0x804E, true, true,  {} },
  { "DBGWVR10_EL1", 0x8056, true, true,  {} },
  { "DBGWVR11_EL1", 0x805E, true, true,  {} },
  { "DBGWVR12_EL1", 0x8066, true, true,  {} },
  { "DBGWVR13_EL1", 0x806E, true, true,  {} },
  { "DBGWVR14_EL1", 0x8076, true, true,  {} },
  { "DBGWVR15_EL1", 0x807E, true, true,  {} },
  { "DBGWCR0_EL1", 0x8007, true, true,  {} },
  { "DBGWCR1_EL1", 0x800F, true, true,  {} },
  { "DBGWCR2_EL1", 0x8017, true, true,  {} },
  { "DBGWCR3_EL1", 0x801F, true, true,  {} },
  { "DBGWCR4_EL1", 0x8027, true, true,  {} },
  { "DBGWCR5_EL1", 0x802F, true, true,  {} },
  { "DBGWCR6_EL1", 0x8037, true, true,  {} },
  { "DBGWCR7_EL1", 0x803F, true, true,  {} },
  { "DBGWCR8_EL1", 0x8047, true, true,  {} },
  { "DBGWCR9_EL1", 0x804F, true, true,  {} },
  { "DBGWCR10_EL1", 0x8057, true, true,  {} },
  { "DBGWCR11_EL1", 0x805F, true, true,  {} },
  { "DBGWCR12_EL1", 0x8067, true, true,  {} },
  { "DBGWCR13_EL1", 0x806F, true, true,  {} },
  { "DBGWCR14_EL1", 0x8077, true, true,  {} },
  { "DBGWCR15_EL1", 0x807F, true, true,  {} },
  { "TEEHBR32_EL1", 0x9080, true, true,  {} },
  { "OSDLR_EL1", 0x809C, true, true,  {} },
  { "DBGPRCR_EL1", 0x80A4, true, true,  {} },
  { "DBGCLAIMSET_EL1", 0x83C6, true, true,  {} },
  { "DBGCLAIMCLR_EL1", 0x83CE, true, true,  {} },
  { "CSSELR_EL1", 0xD000, true, true,  {} },
  { "VPIDR_EL2", 0xE000, true, true,  {} },
  { "VMPIDR_EL2", 0xE005, true, true,  {} },
  { "CPACR_EL1", 0xC082, true, true,  {} },
  { "SCTLR_EL1", 0xC080, true, true,  {} },
  { "SCTLR_EL2", 0xE080, true, true,  {} },
  { "SCTLR_EL3", 0xF080, true, true,  {} },
  { "ACTLR_EL1", 0xC081, true, true,  {} },
  { "ACTLR_EL2", 0xE081, true, true,  {} },
  { "ACTLR_EL3", 0xF081, true, true,  {} },
  { "HCR_EL2", 0xE088, true, true,  {} },
  { "SCR_EL3", 0xF088, true, true,  {} },
  { "MDCR_EL2", 0xE089, true, true,  {} },
  { "SDER32_EL3", 0xF089, true, true,  {} },
  { "CPTR_EL2", 0xE08A, true, true,  {} },
  { "CPTR_EL3", 0xF08A, true, true,  {} },
  { "HSTR_EL2", 0xE08B, true, true,  {} },
  { "HACR_EL2", 0xE08F, true, true,  {} },
  { "MDCR_EL3", 0xF099, true, true,  {} },
  { "TTBR0_EL1", 0xC100, true, true,  {} },
  { "TTBR0_EL2", 0xE100, true, true,  {} },
  { "TTBR0_EL3", 0xF100, true, true,  {} },
  { "TTBR1_EL1", 0xC101, true, true,  {} },
  { "TCR_EL1", 0xC102, true, true,  {} },
  { "TCR_EL2", 0xE102, true, true,  {} },
  { "TCR_EL3", 0xF102, true, true,  {} },
  { "VTTBR_EL2", 0xE108, true, true,  {} },
  { "VTCR_EL2", 0xE10A, true, true,  {} },
  { "DACR32_EL2", 0xE180, true, true,  {} },
  { "SPSR_EL1", 0xC200, true, true,  {} },
  { "SPSR_EL2", 0xE200, true, true,  {} },
  { "SPSR_EL3", 0xF200, true, true,  {} },
  { "ELR_EL1", 0xC201, true, true,  {} },
  { "ELR_EL2", 0xE201, true, true,  {} },
  { "ELR_EL3", 0xF201, true, true,  {} },
  { "SP_EL0", 0xC208, true, true,  {} },
  { "SP_EL1", 0xE208, true, true,  {} },
  { "SP_EL2", 0xF208, true, true,  {} },
  { "SPSel", 0xC210, true, true,  {} },
  { "NZCV", 0xDA10, true, true,  {} },
  { "DAIF", 0xDA11, true, true,  {} },
  { "CurrentEL", 0xC212, true, true,  {} },
  { "SPSR_irq", 0xE218, true, true,  {} },
  { "SPSR_abt", 0xE219, true, true,  {} },
  { "SPSR_und", 0xE21A, true, true,  {} },
  { "SPSR_fiq", 0xE21B, true, true,  {} },
  { "FPCR", 0xDA20, true, true,  {} },
  { "FPSR", 0xDA21, true, true,  {} },
  { "DSPSR_EL0", 0xDA28, true, true,  {} },
  { "DLR_EL0", 0xDA29, true, true,  {} },
  { "IFSR32_EL2", 0xE281, true, true,  {} },
  { "AFSR0_EL1", 0xC288, true, true,  {} },
  { "AFSR0_EL2", 0xE288, true, true,  {} },
  { "AFSR0_EL3", 0xF288, true, true,  {} },
  { "AFSR1_EL1", 0xC289, true, true,  {} },
  { "AFSR1_EL2", 0xE289, true, true,  {} },
  { "AFSR1_EL3", 0xF289, true, true,  {} },
  { "ESR_EL1", 0xC290, true, true,  {} },
  { "ESR_EL2", 0xE290, true, true,  {} },
  { "ESR_EL3", 0xF290, true, true,  {} },
  { "FPEXC32_EL2", 0xE298, true, true,  {} },
  { "FAR_EL1", 0xC300, true, true,  {} },
  { "FAR_EL2", 0xE300, true, true,  {} },
  { "FAR_EL3", 0xF300, true, true,  {} },
  { "HPFAR_EL2", 0xE304, true, true,  {} },
  { "PAR_EL1", 0xC3A0, true, true,  {} },
  { "PMCR_EL0", 0xDCE0, true, true,  {} },
  { "PMCNTENSET_EL0", 0xDCE1, true, true,  {} },
  { "PMCNTENCLR_EL0", 0xDCE2, true, true,  {} },
  { "PMOVSCLR_EL0", 0xDCE3, true, true,  {} },
  { "PMSELR_EL0", 0xDCE5, true, true,  {} },
  { "PMCCNTR_EL0", 0xDCE8, true, true,  {} },
  { "PMXEVTYPER_EL0", 0xDCE9, true, true,  {} },
  { "PMXEVCNTR_EL0", 0xDCEA, true, true,  {} },
  { "PMUSERENR_EL0", 0xDCF0, true, true,  {} },
  { "PMINTENSET_EL1", 0xC4F1, true, true,  {} },
  { "PMINTENCLR_EL1", 0xC4F2, true, true,  {} },
  { "PMOVSSET_EL0", 0xDCF3, true, true,  {} },
  { "MAIR_EL1", 0xC510, true, true,  {} },
  { "MAIR_EL2", 0xE510, true, true,  {} },
  { "MAIR_EL3", 0xF510, true, true,  {} },
  { "AMAIR_EL1", 0xC518, true, true,  {} },
  { "AMAIR_EL2", 0xE518, true, true,  {} },
  { "AMAIR_EL3", 0xF518, true, true,  {} },
  { "VBAR_EL1", 0xC600, true, true,  {} },
  { "VBAR_EL2", 0xE600, true, true,  {} },
  { "VBAR_EL3", 0xF600, true, true,  {} },
  { "RMR_EL1", 0xC602, true, true,  {} },
  { "RMR_EL2", 0xE602, true, true,  {} },
  { "RMR_EL3", 0xF602, true, true,  {} },
  { "CONTEXTIDR_EL1", 0xC681, true, true,  {} },
  { "TPIDR_EL0", 0xDE82, true, true,  {} },
  { "TPIDR_EL2", 0xE682, true, true,  {} },
  { "TPIDR_EL3", 0xF682, true, true,  {} },
  { "TPIDRRO_EL0", 0xDE83, true, true,  {} },
  { "TPIDR_EL1", 0xC684, true, true,  {} },
  { "CNTFRQ_EL0", 0xDF00, true, true,  {} },
  { "CNTVOFF_EL2", 0xE703, true, true,  {} },
  { "CNTKCTL_EL1", 0xC708, true, true,  {} },
  { "CNTHCTL_EL2", 0xE708, true, true,  {} },
  { "CNTP_TVAL_EL0", 0xDF10, true, true,  {} },
  { "CNTHP_TVAL_EL2", 0xE710, true, true,  {} },
  { "CNTPS_TVAL_EL1", 0xFF10, true, true,  {} },
  { "CNTP_CTL_EL0", 0xDF11, true, true,  {} },
  { "CNTHP_CTL_EL2", 0xE711, true, true,  {} },
  { "CNTPS_CTL_EL1", 0xFF11, true, true,  {} },
  { "CNTP_CVAL_EL0", 0xDF12, true, true,  {} },
  { "CNTHP_CVAL_EL2", 0xE712, true, true,  {} },
  { "CNTPS_CVAL_EL1", 0xFF12, true, true,  {} },
  { "CNTV_TVAL_EL0", 0xDF18, true, true,  {} },
  { "CNTV_CTL_EL0", 0xDF19, true, true,  {} },
  { "CNTV_CVAL_EL0", 0xDF1A, true, true,  {} },
  { "PMEVCNTR0_EL0", 0xDF40, true, true,  {} },
  { "PMEVCNTR1_EL0", 0xDF41, true, true,  {} },
  { "PMEVCNTR2_EL0", 0xDF42, true, true,  {} },
  { "PMEVCNTR3_EL0", 0xDF43, true, true,  {} },
  { "PMEVCNTR4_EL0", 0xDF44, true, true,  {} },
  { "PMEVCNTR5_EL0", 0xDF45, true, true,  {} },
  { "PMEVCNTR6_EL0", 0xDF46, true, true,  {} },
  { "PMEVCNTR7_EL0", 0xDF47, true, true,  {} },
  { "PMEVCNTR8_EL0", 0xDF48, true, true,  {} },
  { "PMEVCNTR9_EL0", 0xDF49, true, true,  {} },
  { "PMEVCNTR10_EL0", 0xDF4A, true, true,  {} },
  { "PMEVCNTR11_EL0", 0xDF4B, true, true,  {} },
  { "PMEVCNTR12_EL0", 0xDF4C, true, true,  {} },
  { "PMEVCNTR13_EL0", 0xDF4D, true, true,  {} },
  { "PMEVCNTR14_EL0", 0xDF4E, true, true,  {} },
  { "PMEVCNTR15_EL0", 0xDF4F, true, true,  {} },
  { "PMEVCNTR16_EL0", 0xDF50, true, true,  {} },
  { "PMEVCNTR17_EL0", 0xDF51, true, true,  {} },
  { "PMEVCNTR18_EL0", 0xDF52, true, true,  {} },
  { "PMEVCNTR19_EL0", 0xDF53, true, true,  {} },
  { "PMEVCNTR20_EL0", 0xDF54, true, true,  {} },
  { "PMEVCNTR21_EL0", 0xDF55, true, true,  {} },
  { "PMEVCNTR22_EL0", 0xDF56, true, true,  {} },
  { "PMEVCNTR23_EL0", 0xDF57, true, true,  {} },
  { "PMEVCNTR24_EL0", 0xDF58, true, true,  {} },
  { "PMEVCNTR25_EL0", 0xDF59, true, true,  {} },
  { "PMEVCNTR26_EL0", 0xDF5A, true, true,  {} },
  { "PMEVCNTR27_EL0", 0xDF5B, true, true,  {} },
  { "PMEVCNTR28_EL0", 0xDF5C, true, true,  {} },
  { "PMEVCNTR29_EL0", 0xDF5D, true, true,  {} },
  { "PMEVCNTR30_EL0", 0xDF5E, true, true,  {} },
  { "PMCCFILTR_EL0", 0xDF7F, true, true,  {} },
  { "PMEVTYPER0_EL0", 0xDF60, true, true,  {} },
  { "PMEVTYPER1_EL0", 0xDF61, true, true,  {} },
  { "PMEVTYPER2_EL0", 0xDF62, true, true,  {} },
  { "PMEVTYPER3_EL0", 0xDF63, true, true,  {} },
  { "PMEVTYPER4_EL0", 0xDF64, true, true,  {} },
  { "PMEVTYPER5_EL0", 0xDF65, true, true,  {} },
  { "PMEVTYPER6_EL0", 0xDF66, true, true,  {} },
  { "PMEVTYPER7_EL0", 0xDF67, true, true,  {} },
  { "PMEVTYPER8_EL0", 0xDF68, true, true,  {} },
  { "PMEVTYPER9_EL0", 0xDF69, true, true,  {} },
  { "PMEVTYPER10_EL0", 0xDF6A, true, true,  {} },
  { "PMEVTYPER11_EL0", 0xDF6B, true, true,  {} },
  { "PMEVTYPER12_EL0", 0xDF6C, true, true,  {} },
  { "PMEVTYPER13_EL0", 0xDF6D, true, true,  {} },
  { "PMEVTYPER14_EL0", 0xDF6E, true, true,  {} },
  { "PMEVTYPER15_EL0", 0xDF6F, true, true,  {} },
  { "PMEVTYPER16_EL0", 0xDF70, true, true,  {} },
  { "PMEVTYPER17_EL0", 0xDF71, true, true,  {} },
  { "PMEVTYPER18_EL0", 0xDF72, true, true,  {} },
  { "PMEVTYPER19_EL0", 0xDF73, true, true,  {} },
  { "PMEVTYPER20_EL0", 0xDF74, true, true,  {} },
  { "PMEVTYPER21_EL0", 0xDF75, true, true,  {} },
  { "PMEVTYPER22_EL0", 0xDF76, true, true,  {} },
  { "PMEVTYPER23_EL0", 0xDF77, true, true,  {} },
  { "PMEVTYPER24_EL0", 0xDF78, true, true,  {} },
  { "PMEVTYPER25_EL0", 0xDF79, true, true,  {} },
  { "PMEVTYPER26_EL0", 0xDF7A, true, true,  {} },
  { "PMEVTYPER27_EL0", 0xDF7B, true, true,  {} },
  { "PMEVTYPER28_EL0", 0xDF7C, true, true,  {} },
  { "PMEVTYPER29_EL0", 0xDF7D, true, true,  {} },
  { "PMEVTYPER30_EL0", 0xDF7E, true, true,  {} },
  { "TRCPRGCTLR", 0x8808, true, true,  {} },
  { "TRCPROCSELR", 0x8810, true, true,  {} },
  { "TRCCONFIGR", 0x8820, true, true,  {} },
  { "TRCAUXCTLR", 0x8830, true, true,  {} },
  { "TRCEVENTCTL0R", 0x8840, true, true,  {} },
  { "TRCEVENTCTL1R", 0x8848, true, true,  {} },
  { "TRCSTALLCTLR", 0x8858, true, true,  {} },
  { "TRCTSCTLR", 0x8860, true, true,  {} },
  { "TRCSYNCPR", 0x8868, true, true,  {} },
  { "TRCCCCTLR", 0x8870, true, true,  {} },
  { "TRCBBCTLR", 0x8878, true, true,  {} },
  { "TRCTRACEIDR", 0x8801, true, true,  {} },
  { "TRCQCTLR", 0x8809, true, true,  {} },
  { "TRCVICTLR", 0x8802, true, true,  {} },
  { "TRCVIIECTLR", 0x880A, true, true,  {} },
  { "TRCVISSCTLR", 0x8812, true, true,  {} },
  { "TRCVIPCSSCTLR", 0x881A, true, true,  {} },
  { "TRCVDCTLR", 0x8842, true, true,  {} },
  { "TRCVDSACCTLR", 0x884A, true, true,  {} },
  { "TRCVDARCCTLR", 0x8852, true, true,  {} },
  { "TRCSEQEVR0", 0x8804, true, true,  {} },
  { "TRCSEQEVR1", 0x880C, true, true,  {} },
  { "TRCSEQEVR2", 0x8814, true, true,  {} },
  { "TRCSEQRSTEVR", 0x8834, true, true,  {} },
  { "TRCSEQSTR", 0x883C, true, true,  {} },
  { "TRCEXTINSELR", 0x8844, true, true,  {} },
  { "TRCCNTRLDVR0", 0x8805, true, true,  {} },
  { "TRCCNTRLDVR1", 0x880D, true, true,  {} },
  { "TRCCNTRLDVR2", 0x8815, true, true,  {} },
  { "TRCCNTRLDVR3", 0x881D, true, true,  {} },
  { "TRCCNTCTLR0", 0x8825, true, true,  {} },
  { "TRCCNTCTLR1", 0x882D, true, true,  {} },
  { "TRCCNTCTLR2", 0x8835, true, true,  {} },
  { "TRCCNTCTLR3", 0x883D, true, true,  {} },
  { "TRCCNTVR0", 0x8845, true, true,  {} },
  { "TRCCNTVR1", 0x884D, true, true,  {} },
  { "TRCCNTVR2", 0x8855, true, true,  {} },
  { "TRCCNTVR3", 0x885D, true, true,  {} },
  { "TRCIMSPEC0", 0x8807, true, true,  {} },
  { "TRCIMSPEC1", 0x880F, true, true,  {} },
  { "TRCIMSPEC2", 0x8817, true, true,  {} },
  { "TRCIMSPEC3", 0x881F, true, true,  {} },
  { "TRCIMSPEC4", 0x8827, true, true,  {} },
  { "TRCIMSPEC5", 0x882F, true, true,  {} },
  { "TRCIMSPEC6", 0x8837, true, true,  {} },
  { "TRCIMSPEC7", 0x883F, true, true,  {} },
  { "TRCRSCTLR2", 0x8890, true, true,  {} },
  { "TRCRSCTLR3", 0x8898, true, true,  {} },
  { "TRCRSCTLR4", 0x88A0, true, true,  {} },
  { "TRCRSCTLR5", 0x88A8, true, true,  {} },
  { "TRCRSCTLR6", 0x88B0, true, true,  {} },
  { "TRCRSCTLR7", 0x88B8, true, true,  {} },
  { "TRCRSCTLR8", 0x88C0, true, true,  {} },
  { "TRCRSCTLR9", 0x88C8, true, true,  {} },
  { "TRCRSCTLR10", 0x88D0, true, true,  {} },
  { "TRCRSCTLR11", 0x88D8, true, true,  {} },
  { "TRCRSCTLR12", 0x88E0, true, true,  {} },
  { "TRCRSCTLR13", 0x88E8, true, true,  {} },
  { "TRCRSCTLR14", 0x88F0, true, true,  {} },
  { "TRCRSCTLR15", 0x88F8, true, true,  {} },
  { "TRCRSCTLR16", 0x8881, true, true,  {} },
  { "TRCRSCTLR17", 0x8889, true, true,  {} },
  { "TRCRSCTLR18", 0x8891, true, true,  {} },
  { "TRCRSCTLR19", 0x8899, true, true,  {} },
  { "TRCRSCTLR20", 0x88A1, true, true,  {} },
  { "TRCRSCTLR21", 0x88A9, true, true,  {} },
  { "TRCRSCTLR22", 0x88B1, true, true,  {} },
  { "TRCRSCTLR23", 0x88B9, true, true,  {} },
  { "TRCRSCTLR24", 0x88C1, true, true,  {} },
  { "TRCRSCTLR25", 0x88C9, true, true,  {} },
  { "TRCRSCTLR26", 0x88D1, true, true,  {} },
  { "TRCRSCTLR27", 0x88D9, true, true,  {} },
  { "TRCRSCTLR28", 0x88E1, true, true,  {} },
  { "TRCRSCTLR29", 0x88E9, true, true,  {} },
  { "TRCRSCTLR30", 0x88F1, true, true,  {} },
  { "TRCRSCTLR31", 0x88F9, true, true,  {} },
  { "TRCSSCCR0", 0x8882, true, true,  {} },
  { "TRCSSCCR1", 0x888A, true, true,  {} },
  { "TRCSSCCR2", 0x8892, true, true,  {} },
  { "TRCSSCCR3", 0x889A, true, true,  {} },
  { "TRCSSCCR4", 0x88A2, true, true,  {} },
  { "TRCSSCCR5", 0x88AA, true, true,  {} },
  { "TRCSSCCR6", 0x88B2, true, true,  {} },
  { "TRCSSCCR7", 0x88BA, true, true,  {} },
  { "TRCSSCSR0", 0x88C2, true, true,  {} },
  { "TRCSSCSR1", 0x88CA, true, true,  {} },
  { "TRCSSCSR2", 0x88D2, true, true,  {} },
  { "TRCSSCSR3", 0x88DA, true, true,  {} },
  { "TRCSSCSR4", 0x88E2, true, true,  {} },
  { "TRCSSCSR5", 0x88EA, true, true,  {} },
  { "TRCSSCSR6", 0x88F2, true, true,  {} },
  { "TRCSSCSR7", 0x88FA, true, true,  {} },
  { "TRCSSPCICR0", 0x8883, true, true,  {} },
  { "TRCSSPCICR1", 0x888B, true, true,  {} },
  { "TRCSSPCICR2", 0x8893, true, true,  {} },
  { "TRCSSPCICR3", 0x889B, true, true,  {} },
  { "TRCSSPCICR4", 0x88A3, true, true,  {} },
  { "TRCSSPCICR5", 0x88AB, true, true,  {} },
  { "TRCSSPCICR6", 0x88B3, true, true,  {} },
  { "TRCSSPCICR7", 0x88BB, true, true,  {} },
  { "TRCPDCR", 0x88A4, true, true,  {} },
  { "TRCACVR0", 0x8900, true, true,  {} },
  { "TRCACVR1", 0x8910, true, true,  {} },
  { "TRCACVR2", 0x8920, true, true,  {} },
  { "TRCACVR3", 0x8930, true, true,  {} },
  { "TRCACVR4", 0x8940, true, true,  {} },
  { "TRCACVR5", 0x8950, true, true,  {} },
  { "TRCACVR6", 0x8960, true, true,  {} },
  { "TRCACVR7", 0x8970, true, true,  {} },
  { "TRCACVR8", 0x8901, true, true,  {} },
  { "TRCACVR9", 0x8911, true, true,  {} },
  { "TRCACVR10", 0x8921, true, true,  {} },
  { "TRCACVR11", 0x8931, true, true,  {} },
  { "TRCACVR12", 0x8941, true, true,  {} },
  { "TRCACVR13", 0x8951, true, true,  {} },
  { "TRCACVR14", 0x8961, true, true,  {} },
  { "TRCACVR15", 0x8971, true, true,  {} },
  { "TRCACATR0", 0x8902, true, true,  {} },
  { "TRCACATR1", 0x8912, true, true,  {} },
  { "TRCACATR2", 0x8922, true, true,  {} },
  { "TRCACATR3", 0x8932, true, true,  {} },
  { "TRCACATR4", 0x8942, true, true,  {} },
  { "TRCACATR5", 0x8952, true, true,  {} },
  { "TRCACATR6", 0x8962, true, true,  {} },
  { "TRCACATR7", 0x8972, true, true,  {} },
  { "TRCACATR8", 0x8903, true, true,  {} },
  { "TRCACATR9", 0x8913, true, true,  {} },
  { "TRCACATR10", 0x8923, true, true,  {} },
  { "TRCACATR11", 0x8933, true, true,  {} },
  { "TRCACATR12", 0x8943, true, true,  {} },
  { "TRCACATR13", 0x8953, true, true,  {} },
  { "TRCACATR14", 0x8963, true, true,  {} },
  { "TRCACATR15", 0x8973, true, true,  {} },
  { "TRCDVCVR0", 0x8904, true, true,  {} },
  { "TRCDVCVR1", 0x8924, true, true,  {} },
  { "TRCDVCVR2", 0x8944, true, true,  {} },
  { "TRCDVCVR3", 0x8964, true, true,  {} },
  { "TRCDVCVR4", 0x8905, true, true,  {} },
  { "TRCDVCVR5", 0x8925, true, true,  {} },
  { "TRCDVCVR6", 0x8945, true, true,  {} },
  { "TRCDVCVR7", 0x8965, true, true,  {} },
  { "TRCDVCMR0", 0x8906, true, true,  {} },
  { "TRCDVCMR1", 0x8926, true, true,  {} },
  { "TRCDVCMR2", 0x8946, true, true,  {} },
  { "TRCDVCMR3", 0x8966, true, true,  {} },
  { "TRCDVCMR4", 0x8907, true, true,  {} },
  { "TRCDVCMR5", 0x8927, true, true,  {} },
  { "TRCDVCMR6", 0x8947, true, true,  {} },
  { "TRCDVCMR7", 0x8967, true, true,  {} },
  { "TRCCIDCVR0", 0x8980, true, true,  {} },
  { "TRCCIDCVR1", 0x8990, true, true,  {} },
  { "TRCCIDCVR2", 0x89A0, true, true,  {} },
  { "TRCCIDCVR3", 0x89B0, true, true,  {} },
  { "TRCCIDCVR4", 0x89C0, true, true,  {} },
  { "TRCCIDCVR5", 0x89D0, true, true,  {} },
  { "TRCCIDCVR6", 0x89E0, true, true,  {} },
  { "TRCCIDCVR7", 0x89F0, true, true,  {} },
  { "TRCVMIDCVR0", 0x8981, true, true,  {} },
  { "TRCVMIDCVR1", 0x8991, true, true,  {} },
  { "TRCVMIDCVR2", 0x89A1, true, true,  {} },
  { "TRCVMIDCVR3", 0x89B1, true, true,  {} },
  { "TRCVMIDCVR4", 0x89C1, true, true,  {} },
  { "TRCVMIDCVR5", 0x89D1, true, true,  {} },
  { "TRCVMIDCVR6", 0x89E1, true, true,  {} },
  { "TRCVMIDCVR7", 0x89F1, true, true,  {} },
  { "TRCCIDCCTLR0", 0x8982, true, true,  {} },
  { "TRCCIDCCTLR1", 0x898A, true, true,  {} },
  { "TRCVMIDCCTLR0", 0x8992, true, true,  {} },
  { "TRCVMIDCCTLR1", 0x899A, true, true,  {} },
  { "TRCITCTRL", 0x8B84, true, true,  {} },
  { "TRCCLAIMSET", 0x8BC6, true, true,  {} },
  { "TRCCLAIMCLR", 0x8BCE, true, true,  {} },
  { "ICC_BPR1_EL1", 0xC663, true, true,  {} },
  { "ICC_BPR0_EL1", 0xC643, true, true,  {} },
  { "ICC_PMR_EL1", 0xC230, true, true,  {} },
  { "ICC_CTLR_EL1", 0xC664, true, true,  {} },
  { "ICC_CTLR_EL3", 0xF664, true, true,  {} },
  { "ICC_SRE_EL1", 0xC665, true, true,  {} },
  { "ICC_SRE_EL2", 0xE64D, true, true,  {} },
  { "ICC_SRE_EL3", 0xF665, true, true,  {} },
  { "ICC_IGRPEN0_EL1", 0xC666, true, true,  {} },
  { "ICC_IGRPEN1_EL1", 0xC667, true, true,  {} },
  { "ICC_IGRPEN1_EL3", 0xF667, true, true,  {} },
  { "ICC_SEIEN_EL1", 0xC668, true, true,  {} },
  { "ICC_AP0R0_EL1", 0xC644, true, true,  {} },
  { "ICC_AP0R1_EL1", 0xC645, true, true,  {} },
  { "ICC_AP0R2_EL1", 0xC646, true, true,  {} },
  { "ICC_AP0R3_EL1", 0xC647, true, true,  {} },
  { "ICC_AP1R0_EL1", 0xC648, true, true,  {} },
  { "ICC_AP1R1_EL1", 0xC649, true, true,  {} },
  { "ICC_AP1R2_EL1", 0xC64A, true, true,  {} },
  { "ICC_AP1R3_EL1", 0xC64B, true, true,  {} },
  { "ICH_AP0R0_EL2", 0xE640, true, true,  {} },
  { "ICH_AP0R1_EL2", 0xE641, true, true,  {} },
  { "ICH_AP0R2_EL2", 0xE642, true, true,  {} },
  { "ICH_AP0R3_EL2", 0xE643, true, true,  {} },
  { "ICH_AP1R0_EL2", 0xE648, true, true,  {} },
  { "ICH_AP1R1_EL2", 0xE649, true, true,  {} },
  { "ICH_AP1R2_EL2", 0xE64A, true, true,  {} },
  { "ICH_AP1R3_EL2", 0xE64B, true, true,  {} },
  { "ICH_HCR_EL2", 0xE658, true, true,  {} },
  { "ICH_MISR_EL2", 0xE65A, true, true,  {} },
  { "ICH_VMCR_EL2", 0xE65F, true, true,  {} },
  { "ICH_VSEIR_EL2", 0xE64C, true, true,  {} },
  { "ICH_LR0_EL2", 0xE660, true, true,  {} },
  { "ICH_LR1_EL2", 0xE661, true, true,  {} },
  { "ICH_LR2_EL2", 0xE662, true, true,  {} },
  { "ICH_LR3_EL2", 0xE663, true, true,  {} },
  { "ICH_LR4_EL2", 0xE664, true, true,  {} },
  { "ICH_LR5_EL2", 0xE665, true, true,  {} },
  { "ICH_LR6_EL2", 0xE666, true, true,  {} },
  { "ICH_LR7_EL2", 0xE667, true, true,  {} },
  { "ICH_LR8_EL2", 0xE668, true, true,  {} },
  { "ICH_LR9_EL2", 0xE669, true, true,  {} },
  { "ICH_LR10_EL2", 0xE66A, true, true,  {} },
  { "ICH_LR11_EL2", 0xE66B, true, true,  {} },
  { "ICH_LR12_EL2", 0xE66C, true, true,  {} },
  { "ICH_LR13_EL2", 0xE66D, true, true,  {} },
  { "ICH_LR14_EL2", 0xE66E, true, true,  {} },
  { "ICH_LR15_EL2", 0xE66F, true, true,  {} },
  { "PAN", 0xC213, true, true,  {AArch64::HasV8_1aOps} },
  { "LORSA_EL1", 0xC520, true, true,  {AArch64::HasV8_1aOps} },
  { "LOREA_EL1", 0xC521, true, true,  {AArch64::HasV8_1aOps} },
  { "LORN_EL1", 0xC522, true, true,  {AArch64::HasV8_1aOps} },
  { "LORC_EL1", 0xC523, true, true,  {AArch64::HasV8_1aOps} },
  { "TTBR1_EL2", 0xE101, true, true,  {AArch64::HasV8_1aOps} },
  { "CONTEXTIDR_EL2", 0xE681, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTHV_TVAL_EL2", 0xE718, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTHV_CVAL_EL2", 0xE71A, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTHV_CTL_EL2", 0xE719, true, true,  {AArch64::HasV8_1aOps} },
  { "SCTLR_EL12", 0xE880, true, true,  {AArch64::HasV8_1aOps} },
  { "CPACR_EL12", 0xE882, true, true,  {AArch64::HasV8_1aOps} },
  { "TTBR0_EL12", 0xE900, true, true,  {AArch64::HasV8_1aOps} },
  { "TTBR1_EL12", 0xE901, true, true,  {AArch64::HasV8_1aOps} },
  { "TCR_EL12", 0xE902, true, true,  {AArch64::HasV8_1aOps} },
  { "AFSR0_EL12", 0xEA88, true, true,  {AArch64::HasV8_1aOps} },
  { "AFSR1_EL12", 0xEA89, true, true,  {AArch64::HasV8_1aOps} },
  { "ESR_EL12", 0xEA90, true, true,  {AArch64::HasV8_1aOps} },
  { "FAR_EL12", 0xEB00, true, true,  {AArch64::HasV8_1aOps} },
  { "MAIR_EL12", 0xED10, true, true,  {AArch64::HasV8_1aOps} },
  { "AMAIR_EL12", 0xED18, true, true,  {AArch64::HasV8_1aOps} },
  { "VBAR_EL12", 0xEE00, true, true,  {AArch64::HasV8_1aOps} },
  { "CONTEXTIDR_EL12", 0xEE81, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTKCTL_EL12", 0xEF08, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTP_TVAL_EL02", 0xEF10, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTP_CTL_EL02", 0xEF11, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTP_CVAL_EL02", 0xEF12, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTV_TVAL_EL02", 0xEF18, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTV_CTL_EL02", 0xEF19, true, true,  {AArch64::HasV8_1aOps} },
  { "CNTV_CVAL_EL02", 0xEF1A, true, true,  {AArch64::HasV8_1aOps} },
  { "SPSR_EL12", 0xEA00, true, true,  {AArch64::HasV8_1aOps} },
  { "ELR_EL12", 0xEA01, true, true,  {AArch64::HasV8_1aOps} },
  { "UAO", 0xC214, true, true,  {AArch64::HasV8_2aOps} },
  { "PMBLIMITR_EL1", 0xC4D0, true, true,  {AArch64::FeatureSPE} },
  { "PMBPTR_EL1", 0xC4D1, true, true,  {AArch64::FeatureSPE} },
  { "PMBSR_EL1", 0xC4D3, true, true,  {AArch64::FeatureSPE} },
  { "PMBIDR_EL1", 0xC4D7, true, true,  {AArch64::FeatureSPE} },
  { "PMSCR_EL2", 0xE4C8, true, true,  {AArch64::FeatureSPE} },
  { "PMSCR_EL12", 0xECC8, true, true,  {AArch64::FeatureSPE} },
  { "PMSCR_EL1", 0xC4C8, true, true,  {AArch64::FeatureSPE} },
  { "PMSICR_EL1", 0xC4CA, true, true,  {AArch64::FeatureSPE} },
  { "PMSIRR_EL1", 0xC4CB, true, true,  {AArch64::FeatureSPE} },
  { "PMSFCR_EL1", 0xC4CC, true, true,  {AArch64::FeatureSPE} },
  { "PMSEVFR_EL1", 0xC4CD, true, true,  {AArch64::FeatureSPE} },
  { "PMSLATFR_EL1", 0xC4CE, true, true,  {AArch64::FeatureSPE} },
  { "PMSIDR_EL1", 0xC4CF, true, true,  {AArch64::FeatureSPE} },
  { "ERRSELR_EL1", 0xC299, true, true,  {AArch64::FeatureRAS} },
  { "ERXCTLR_EL1", 0xC2A1, true, true,  {AArch64::FeatureRAS} },
  { "ERXSTATUS_EL1", 0xC2A2, true, true,  {AArch64::FeatureRAS} },
  { "ERXADDR_EL1", 0xC2A3, true, true,  {AArch64::FeatureRAS} },
  { "ERXMISC0_EL1", 0xC2A8, true, true,  {AArch64::FeatureRAS} },
  { "ERXMISC1_EL1", 0xC2A9, true, true,  {AArch64::FeatureRAS} },
  { "DISR_EL1", 0xC609, true, true,  {AArch64::FeatureRAS} },
  { "VDISR_EL2", 0xE609, true, true,  {AArch64::FeatureRAS} },
  { "VSESR_EL2", 0xE293, true, true,  {AArch64::FeatureRAS} },
  { "CPM_IOACC_CTL_EL3", 0xFF90, true, true,  {AArch64::ProcCyclone} },
};

const std::pair<const char *, int> SysRegsByName[] = {
  { "ACTLR_EL1", 192 },
  { "ACTLR_EL2", 193 },
  { "ACTLR_EL3", 194 },
  { "AFSR0_EL1", 236 },
  { "AFSR0_EL12", 595 },
  { "AFSR0_EL2", 237 },
  { "AFSR0_EL3", 238 },
  { "AFSR1_EL1", 239 },
  { "AFSR1_EL12", 596 },
  { "AFSR1_EL2", 240 },
  { "AFSR1_EL3", 241 },
  { "AIDR_EL1", 13 },
  { "AMAIR_EL1", 266 },
  { "AMAIR_EL12", 600 },
  { "AMAIR_EL2", 267 },
  { "AMAIR_EL3", 268 },
  { "CCSIDR_EL1", 8 },
  { "CLIDR_EL1", 9 },
  { "CNTFRQ_EL0", 281 },
  { "CNTHCTL_EL2", 284 },
  { "CNTHP_CTL_EL2", 289 },
  { "CNTHP_CVAL_EL2", 292 },
  { "CNTHP_TVAL_EL2", 286 },
  { "CNTHV_CTL_EL2", 589 },
  { "CNTHV_CVAL_EL2", 588 },
  { "CNTHV_TVAL_EL2", 587 },
  { "CNTKCTL_EL1", 283 },
  { "CNTKCTL_EL12", 603 },
  { "CNTPCT_EL0", 47 },
  { "CNTPS_CTL_EL1", 290 },
  { "CNTPS_CVAL_EL1", 293 },
  { "CNTPS_TVAL_EL1", 287 },
  { "CNTP_CTL_EL0", 288 },
  { "CNTP_CTL_EL02", 605 },
  { "CNTP_CVAL_EL0", 291 },
  { "CNTP_CVAL_EL02", 606 },
  { "CNTP_TVAL_EL0", 285 },
  { "CNTP_TVAL_EL02", 604 },
  { "CNTVCT_EL0", 48 },
  { "CNTVOFF_EL2", 282 },
  { "CNTV_CTL_EL0", 295 },
  { "CNTV_CTL_EL02", 608 },
  { "CNTV_CVAL_EL0", 296 },
  { "CNTV_CVAL_EL02", 609 },
  { "CNTV_TVAL_EL0", 294 },
  { "CNTV_TVAL_EL02", 607 },
  { "CONTEXTIDR_EL1", 275 },
  { "CONTEXTIDR_EL12", 602 },
  { "CONTEXTIDR_EL2", 586 },
  { "CPACR_EL1", 188 },
  { "CPACR_EL12", 591 },
  { "CPM_IOACC_CTL_EL3", 635 },
  { "CPTR_EL2", 199 },
  { "CPTR_EL3", 200 },
  { "CSSELR_EL1", 185 },
  { "CTR_EL0", 10 },
  { "CURRENTEL", 226 },
  { "DACR32_EL2", 213 },
  { "DAIF", 225 },
  { "DBGAUTHSTATUS_EL1", 4 },
  { "DBGBCR0_EL1", 132 },
  { "DBGBCR10_EL1", 142 },
  { "DBGBCR11_EL1", 143 },
  { "DBGBCR12_EL1", 144 },
  { "DBGBCR13_EL1", 145 },
  { "DBGBCR14_EL1", 146 },
  { "DBGBCR15_EL1", 147 },
  { "DBGBCR1_EL1", 133 },
  { "DBGBCR2_EL1", 134 },
  { "DBGBCR3_EL1", 135 },
  { "DBGBCR4_EL1", 136 },
  { "DBGBCR5_EL1", 137 },
  { "DBGBCR6_EL1", 138 },
  { "DBGBCR7_EL1", 139 },
  { "DBGBCR8_EL1", 140 },
  { "DBGBCR9_EL1", 141 },
  { "DBGBVR0_EL1", 116 },
  { "DBGBVR10_EL1", 126 },
  { "DBGBVR11_EL1", 127 },
  { "DBGBVR12_EL1", 128 },
  { "DBGBVR13_EL1", 129 },
  { "DBGBVR14_EL1", 130 },
  { "DBGBVR15_EL1", 131 },
  { "DBGBVR1_EL1", 117 },
  { "DBGBVR2_EL1", 118 },
  { "DBGBVR3_EL1", 119 },
  { "DBGBVR4_EL1", 120 },
  { "DBGBVR5_EL1", 121 },
  { "DBGBVR6_EL1", 122 },
  { "DBGBVR7_EL1", 123 },
  { "DBGBVR8_EL1", 124 },
  { "DBGBVR9_EL1", 125 },
  { "DBGCLAIMCLR_EL1", 184 },
  { "DBGCLAIMSET_EL1", 183 },
  { "DBGDTRRX_EL0", 1 },
  { "DBGDTRTX_EL0", 97 },
  { "DBGDTR_EL0", 113 },
  { "DBGPRCR_EL1", 182 },
  { "DBGVCR32_EL2", 115 },
  { "DBGWCR0_EL1", 164 },
  { "DBGWCR10_EL1", 174 },
  { "DBGWCR11_EL1", 175 },
  { "DBGWCR12_EL1", 176 },
  { "DBGWCR13_EL1", 177 },
  { "DBGWCR14_EL1", 178 },
  { "DBGWCR15_EL1", 179 },
  { "DBGWCR1_EL1", 165 },
  { "DBGWCR2_EL1", 166 },
  { "DBGWCR3_EL1", 167 },
  { "DBGWCR4_EL1", 168 },
  { "DBGWCR5_EL1", 169 },
  { "DBGWCR6_EL1", 170 },
  { "DBGWCR7_EL1", 171 },
  { "DBGWCR8_EL1", 172 },
  { "DBGWCR9_EL1", 173 },
  { "DBGWVR0_EL1", 148 },
  { "DBGWVR10_EL1", 158 },
  { "DBGWVR11_EL1", 159 },
  { "DBGWVR12_EL1", 160 },
  { "DBGWVR13_EL1", 161 },
  { "DBGWVR14_EL1", 162 },
  { "DBGWVR15_EL1", 163 },
  { "DBGWVR1_EL1", 149 },
  { "DBGWVR2_EL1", 150 },
  { "DBGWVR3_EL1", 151 },
  { "DBGWVR4_EL1", 152 },
  { "DBGWVR5_EL1", 153 },
  { "DBGWVR6_EL1", 154 },
  { "DBGWVR7_EL1", 155 },
  { "DBGWVR8_EL1", 156 },
  { "DBGWVR9_EL1", 157 },
  { "DCZID_EL0", 14 },
  { "DISR_EL1", 632 },
  { "DLR_EL0", 234 },
  { "DSPSR_EL0", 233 },
  { "ELR_EL1", 217 },
  { "ELR_EL12", 611 },
  { "ELR_EL2", 218 },
  { "ELR_EL3", 219 },
  { "ERRIDR_EL1", 95 },
  { "ERRSELR_EL1", 626 },
  { "ERXADDR_EL1", 629 },
  { "ERXCTLR_EL1", 627 },
  { "ERXFR_EL1", 96 },
  { "ERXMISC0_EL1", 630 },
  { "ERXMISC1_EL1", 631 },
  { "ERXSTATUS_EL1", 628 },
  { "ESR_EL1", 242 },
  { "ESR_EL12", 597 },
  { "ESR_EL2", 243 },
  { "ESR_EL3", 244 },
  { "FAR_EL1", 246 },
  { "FAR_EL12", 598 },
  { "FAR_EL2", 247 },
  { "FAR_EL3", 248 },
  { "FPCR", 231 },
  { "FPEXC32_EL2", 245 },
  { "FPSR", 232 },
  { "HACR_EL2", 202 },
  { "HCR_EL2", 195 },
  { "HPFAR_EL2", 249 },
  { "HSTR_EL2", 201 },
  { "ICC_AP0R0_EL1", 544 },
  { "ICC_AP0R1_EL1", 545 },
  { "ICC_AP0R2_EL1", 546 },
  { "ICC_AP0R3_EL1", 547 },
  { "ICC_AP1R0_EL1", 548 },
  { "ICC_AP1R1_EL1", 549 },
  { "ICC_AP1R2_EL1", 550 },
  { "ICC_AP1R3_EL1", 551 },
  { "ICC_ASGI1R_EL1", 106 },
  { "ICC_BPR0_EL1", 533 },
  { "ICC_BPR1_EL1", 532 },
  { "ICC_CTLR_EL1", 535 },
  { "ICC_CTLR_EL3", 536 },
  { "ICC_DIR_EL1", 104 },
  { "ICC_EOIR0_EL1", 103 },
  { "ICC_EOIR1_EL1", 102 },
  { "ICC_HPPIR0_EL1", 89 },
  { "ICC_HPPIR1_EL1", 88 },
  { "ICC_IAR0_EL1", 87 },
  { "ICC_IAR1_EL1", 86 },
  { "ICC_IGRPEN0_EL1", 540 },
  { "ICC_IGRPEN1_EL1", 541 },
  { "ICC_IGRPEN1_EL3", 542 },
  { "ICC_PMR_EL1", 534 },
  { "ICC_RPR_EL1", 90 },
  { "ICC_SEIEN_EL1", 543 },
  { "ICC_SGI0R_EL1", 107 },
  { "ICC_SGI1R_EL1", 105 },
  { "ICC_SRE_EL1", 537 },
  { "ICC_SRE_EL2", 538 },
  { "ICC_SRE_EL3", 539 },
  { "ICH_AP0R0_EL2", 552 },
  { "ICH_AP0R1_EL2", 553 },
  { "ICH_AP0R2_EL2", 554 },
  { "ICH_AP0R3_EL2", 555 },
  { "ICH_AP1R0_EL2", 556 },
  { "ICH_AP1R1_EL2", 557 },
  { "ICH_AP1R2_EL2", 558 },
  { "ICH_AP1R3_EL2", 559 },
  { "ICH_EISR_EL2", 92 },
  { "ICH_ELSR_EL2", 93 },
  { "ICH_HCR_EL2", 560 },
  { "ICH_LR0_EL2", 564 },
  { "ICH_LR10_EL2", 574 },
  { "ICH_LR11_EL2", 575 },
  { "ICH_LR12_EL2", 576 },
  { "ICH_LR13_EL2", 577 },
  { "ICH_LR14_EL2", 578 },
  { "ICH_LR15_EL2", 579 },
  { "ICH_LR1_EL2", 565 },
  { "ICH_LR2_EL2", 566 },
  { "ICH_LR3_EL2", 567 },
  { "ICH_LR4_EL2", 568 },
  { "ICH_LR5_EL2", 569 },
  { "ICH_LR6_EL2", 570 },
  { "ICH_LR7_EL2", 571 },
  { "ICH_LR8_EL2", 572 },
  { "ICH_LR9_EL2", 573 },
  { "ICH_MISR_EL2", 561 },
  { "ICH_VMCR_EL2", 562 },
  { "ICH_VSEIR_EL2", 563 },
  { "ICH_VTR_EL2", 91 },
  { "ID_AA64AFR0_EL1", 33 },
  { "ID_AA64AFR1_EL1", 34 },
  { "ID_AA64DFR0_EL1", 31 },
  { "ID_AA64DFR1_EL1", 32 },
  { "ID_AA64ISAR0_EL1", 35 },
  { "ID_AA64ISAR1_EL1", 36 },
  { "ID_AA64MMFR0_EL1", 37 },
  { "ID_AA64MMFR1_EL1", 38 },
  { "ID_AA64MMFR2_EL1", 39 },
  { "ID_AA64PFR0_EL1", 29 },
  { "ID_AA64PFR1_EL1", 30 },
  { "ID_AFR0_EL1", 18 },
  { "ID_DFR0_EL1", 17 },
  { "ID_ISAR0_EL1", 23 },
  { "ID_ISAR1_EL1", 24 },
  { "ID_ISAR2_EL1", 25 },
  { "ID_ISAR3_EL1", 26 },
  { "ID_ISAR4_EL1", 27 },
  { "ID_ISAR5_EL1", 28 },
  { "ID_MMFR0_EL1", 19 },
  { "ID_MMFR1_EL1", 20 },
  { "ID_MMFR2_EL1", 21 },
  { "ID_MMFR3_EL1", 22 },
  { "ID_MMFR4_EL1", 49 },
  { "ID_PFR0_EL1", 15 },
  { "ID_PFR1_EL1", 16 },
  { "IFSR32_EL2", 235 },
  { "ISR_EL1", 46 },
  { "LORC_EL1", 584 },
  { "LOREA_EL1", 582 },
  { "LORID_EL1", 94 },
  { "LORN_EL1", 583 },
  { "LORSA_EL1", 581 },
  { "MAIR_EL1", 263 },
  { "MAIR_EL12", 599 },
  { "MAIR_EL2", 264 },
  { "MAIR_EL3", 265 },
  { "MDCCINT_EL1", 111 },
  { "MDCCSR_EL0", 0 },
  { "MDCR_EL2", 197 },
  { "MDCR_EL3", 203 },
  { "MDRAR_EL1", 2 },
  { "MDSCR_EL1", 112 },
  { "MIDR_EL1", 7 },
  { "MPIDR_EL1", 11 },
  { "MVFR0_EL1", 40 },
  { "MVFR1_EL1", 41 },
  { "MVFR2_EL1", 42 },
  { "NZCV", 224 },
  { "OSDLR_EL1", 181 },
  { "OSDTRRX_EL1", 108 },
  { "OSDTRTX_EL1", 109 },
  { "OSECCR_EL1", 114 },
  { "OSLAR_EL1", 98 },
  { "OSLSR_EL1", 3 },
  { "PAN", 580 },
  { "PAR_EL1", 250 },
  { "PMBIDR_EL1", 616 },
  { "PMBLIMITR_EL1", 613 },
  { "PMBPTR_EL1", 614 },
  { "PMBSR_EL1", 615 },
  { "PMCCFILTR_EL0", 328 },
  { "PMCCNTR_EL0", 256 },
  { "PMCEID0_EL0", 5 },
  { "PMCEID1_EL0", 6 },
  { "PMCNTENCLR_EL0", 253 },
  { "PMCNTENSET_EL0", 252 },
  { "PMCR_EL0", 251 },
  { "PMEVCNTR0_EL0", 297 },
  { "PMEVCNTR10_EL0", 307 },
  { "PMEVCNTR11_EL0", 308 },
  { "PMEVCNTR12_EL0", 309 },
  { "PMEVCNTR13_EL0", 310 },
  { "PMEVCNTR14_EL0", 311 },
  { "PMEVCNTR15_EL0", 312 },
  { "PMEVCNTR16_EL0", 313 },
  { "PMEVCNTR17_EL0", 314 },
  { "PMEVCNTR18_EL0", 315 },
  { "PMEVCNTR19_EL0", 316 },
  { "PMEVCNTR1_EL0", 298 },
  { "PMEVCNTR20_EL0", 317 },
  { "PMEVCNTR21_EL0", 318 },
  { "PMEVCNTR22_EL0", 319 },
  { "PMEVCNTR23_EL0", 320 },
  { "PMEVCNTR24_EL0", 321 },
  { "PMEVCNTR25_EL0", 322 },
  { "PMEVCNTR26_EL0", 323 },
  { "PMEVCNTR27_EL0", 324 },
  { "PMEVCNTR28_EL0", 325 },
  { "PMEVCNTR29_EL0", 326 },
  { "PMEVCNTR2_EL0", 299 },
  { "PMEVCNTR30_EL0", 327 },
  { "PMEVCNTR3_EL0", 300 },
  { "PMEVCNTR4_EL0", 301 },
  { "PMEVCNTR5_EL0", 302 },
  { "PMEVCNTR6_EL0", 303 },
  { "PMEVCNTR7_EL0", 304 },
  { "PMEVCNTR8_EL0", 305 },
  { "PMEVCNTR9_EL0", 306 },
  { "PMEVTYPER0_EL0", 329 },
  { "PMEVTYPER10_EL0", 339 },
  { "PMEVTYPER11_EL0", 340 },
  { "PMEVTYPER12_EL0", 341 },
  { "PMEVTYPER13_EL0", 342 },
  { "PMEVTYPER14_EL0", 343 },
  { "PMEVTYPER15_EL0", 344 },
  { "PMEVTYPER16_EL0", 345 },
  { "PMEVTYPER17_EL0", 346 },
  { "PMEVTYPER18_EL0", 347 },
  { "PMEVTYPER19_EL0", 348 },
  { "PMEVTYPER1_EL0", 330 },
  { "PMEVTYPER20_EL0", 349 },
  { "PMEVTYPER21_EL0", 350 },
  { "PMEVTYPER22_EL0", 351 },
  { "PMEVTYPER23_EL0", 352 },
  { "PMEVTYPER24_EL0", 353 },
  { "PMEVTYPER25_EL0", 354 },
  { "PMEVTYPER26_EL0", 355 },
  { "PMEVTYPER27_EL0", 356 },
  { "PMEVTYPER28_EL0", 357 },
  { "PMEVTYPER29_EL0", 358 },
  { "PMEVTYPER2_EL0", 331 },
  { "PMEVTYPER30_EL0", 359 },
  { "PMEVTYPER3_EL0", 332 },
  { "PMEVTYPER4_EL0", 333 },
  { "PMEVTYPER5_EL0", 334 },
  { "PMEVTYPER6_EL0", 335 },
  { "PMEVTYPER7_EL0", 336 },
  { "PMEVTYPER8_EL0", 337 },
  { "PMEVTYPER9_EL0", 338 },
  { "PMINTENCLR_EL1", 261 },
  { "PMINTENSET_EL1", 260 },
  { "PMOVSCLR_EL0", 254 },
  { "PMOVSSET_EL0", 262 },
  { "PMSCR_EL1", 619 },
  { "PMSCR_EL12", 618 },
  { "PMSCR_EL2", 617 },
  { "PMSELR_EL0", 255 },
  { "PMSEVFR_EL1", 623 },
  { "PMSFCR_EL1", 622 },
  { "PMSICR_EL1", 620 },
  { "PMSIDR_EL1", 625 },
  { "PMSIRR_EL1", 621 },
  { "PMSLATFR_EL1", 624 },
  { "PMSWINC_EL0", 99 },
  { "PMUSERENR_EL0", 259 },
  { "PMXEVCNTR_EL0", 258 },
  { "PMXEVTYPER_EL0", 257 },
  { "REVIDR_EL1", 12 },
  { "RMR_EL1", 272 },
  { "RMR_EL2", 273 },
  { "RMR_EL3", 274 },
  { "RVBAR_EL1", 43 },
  { "RVBAR_EL2", 44 },
  { "RVBAR_EL3", 45 },
  { "SCR_EL3", 196 },
  { "SCTLR_EL1", 189 },
  { "SCTLR_EL12", 590 },
  { "SCTLR_EL2", 190 },
  { "SCTLR_EL3", 191 },
  { "SDER32_EL3", 198 },
  { "SPSEL", 223 },
  { "SPSR_ABT", 228 },
  { "SPSR_EL1", 214 },
  { "SPSR_EL12", 610 },
  { "SPSR_EL2", 215 },
  { "SPSR_EL3", 216 },
  { "SPSR_FIQ", 230 },
  { "SPSR_IRQ", 227 },
  { "SPSR_UND", 229 },
  { "SP_EL0", 220 },
  { "SP_EL1", 221 },
  { "SP_EL2", 222 },
  { "TCR_EL1", 208 },
  { "TCR_EL12", 594 },
  { "TCR_EL2", 209 },
  { "TCR_EL3", 210 },
  { "TEECR32_EL1", 110 },
  { "TEEHBR32_EL1", 180 },
  { "TPIDRRO_EL0", 279 },
  { "TPIDR_EL0", 276 },
  { "TPIDR_EL1", 280 },
  { "TPIDR_EL2", 277 },
  { "TPIDR_EL3", 278 },
  { "TRCACATR0", 477 },
  { "TRCACATR1", 478 },
  { "TRCACATR10", 487 },
  { "TRCACATR11", 488 },
  { "TRCACATR12", 489 },
  { "TRCACATR13", 490 },
  { "TRCACATR14", 491 },
  { "TRCACATR15", 492 },
  { "TRCACATR2", 479 },
  { "TRCACATR3", 480 },
  { "TRCACATR4", 481 },
  { "TRCACATR5", 482 },
  { "TRCACATR6", 483 },
  { "TRCACATR7", 484 },
  { "TRCACATR8", 485 },
  { "TRCACATR9", 486 },
  { "TRCACVR0", 461 },
  { "TRCACVR1", 462 },
  { "TRCACVR10", 471 },
  { "TRCACVR11", 472 },
  { "TRCACVR12", 473 },
  { "TRCACVR13", 474 },
  { "TRCACVR14", 475 },
  { "TRCACVR15", 476 },
  { "TRCACVR2", 463 },
  { "TRCACVR3", 464 },
  { "TRCACVR4", 465 },
  { "TRCACVR5", 466 },
  { "TRCACVR6", 467 },
  { "TRCACVR7", 468 },
  { "TRCACVR8", 469 },
  { "TRCACVR9", 470 },
  { "TRCAUTHSTATUS", 70 },
  { "TRCAUXCTLR", 363 },
  { "TRCBBCTLR", 370 },
  { "TRCCCCTLR", 369 },
  { "TRCCIDCCTLR0", 525 },
  { "TRCCIDCCTLR1", 526 },
  { "TRCCIDCVR0", 509 },
  { "TRCCIDCVR1", 510 },
  { "TRCCIDCVR2", 511 },
  { "TRCCIDCVR3", 512 },
  { "TRCCIDCVR4", 513 },
  { "TRCCIDCVR5", 514 },
  { "TRCCIDCVR6", 515 },
  { "TRCCIDCVR7", 516 },
  { "TRCCIDR0", 82 },
  { "TRCCIDR1", 83 },
  { "TRCCIDR2", 84 },
  { "TRCCIDR3", 85 },
  { "TRCCLAIMCLR", 531 },
  { "TRCCLAIMSET", 530 },
  { "TRCCNTCTLR0", 390 },
  { "TRCCNTCTLR1", 391 },
  { "TRCCNTCTLR2", 392 },
  { "TRCCNTCTLR3", 393 },
  { "TRCCNTRLDVR0", 386 },
  { "TRCCNTRLDVR1", 387 },
  { "TRCCNTRLDVR2", 388 },
  { "TRCCNTRLDVR3", 389 },
  { "TRCCNTVR0", 394 },
  { "TRCCNTVR1", 395 },
  { "TRCCNTVR2", 396 },
  { "TRCCNTVR3", 397 },
  { "TRCCONFIGR", 362 },
  { "TRCDEVAFF0", 67 },
  { "TRCDEVAFF1", 68 },
  { "TRCDEVARCH", 71 },
  { "TRCDEVID", 72 },
  { "TRCDEVTYPE", 73 },
  { "TRCDVCMR0", 501 },
  { "TRCDVCMR1", 502 },
  { "TRCDVCMR2", 503 },
  { "TRCDVCMR3", 504 },
  { "TRCDVCMR4", 505 },
  { "TRCDVCMR5", 506 },
  { "TRCDVCMR6", 507 },
  { "TRCDVCMR7", 508 },
  { "TRCDVCVR0", 493 },
  { "TRCDVCVR1", 494 },
  { "TRCDVCVR2", 495 },
  { "TRCDVCVR3", 496 },
  { "TRCDVCVR4", 497 },
  { "TRCDVCVR5", 498 },
  { "TRCDVCVR6", 499 },
  { "TRCDVCVR7", 500 },
  { "TRCEVENTCTL0R", 364 },
  { "TRCEVENTCTL1R", 365 },
  { "TRCEXTINSELR", 385 },
  { "TRCIDR0", 57 },
  { "TRCIDR1", 58 },
  { "TRCIDR10", 53 },
  { "TRCIDR11", 54 },
  { "TRCIDR12", 55 },
  { "TRCIDR13", 56 },
  { "TRCIDR2", 59 },
  { "TRCIDR3", 60 },
  { "TRCIDR4", 61 },
  { "TRCIDR5", 62 },
  { "TRCIDR6", 63 },
  { "TRCIDR7", 64 },
  { "TRCIDR8", 51 },
  { "TRCIDR9", 52 },
  { "TRCIMSPEC0", 398 },
  { "TRCIMSPEC1", 399 },
  { "TRCIMSPEC2", 400 },
  { "TRCIMSPEC3", 401 },
  { "TRCIMSPEC4", 402 },
  { "TRCIMSPEC5", 403 },
  { "TRCIMSPEC6", 404 },
  { "TRCIMSPEC7", 405 },
  { "TRCITCTRL", 529 },
  { "TRCLAR", 101 },
  { "TRCLSR", 69 },
  { "TRCOSLAR", 100 },
  { "TRCOSLSR", 65 },
  { "TRCPDCR", 460 },
  { "TRCPDSR", 66 },
  { "TRCPIDR0", 78 },
  { "TRCPIDR1", 79 },
  { "TRCPIDR2", 80 },
  { "TRCPIDR3", 81 },
  { "TRCPIDR4", 74 },
  { "TRCPIDR5", 75 },
  { "TRCPIDR6", 76 },
  { "TRCPIDR7", 77 },
  { "TRCPRGCTLR", 360 },
  { "TRCPROCSELR", 361 },
  { "TRCQCTLR", 372 },
  { "TRCRSCTLR10", 414 },
  { "TRCRSCTLR11", 415 },
  { "TRCRSCTLR12", 416 },
  { "TRCRSCTLR13", 417 },
  { "TRCRSCTLR14", 418 },
  { "TRCRSCTLR15", 419 },
  { "TRCRSCTLR16", 420 },
  { "TRCRSCTLR17", 421 },
  { "TRCRSCTLR18", 422 },
  { "TRCRSCTLR19", 423 },
  { "TRCRSCTLR2", 406 },
  { "TRCRSCTLR20", 424 },
  { "TRCRSCTLR21", 425 },
  { "TRCRSCTLR22", 426 },
  { "TRCRSCTLR23", 427 },
  { "TRCRSCTLR24", 428 },
  { "TRCRSCTLR25", 429 },
  { "TRCRSCTLR26", 430 },
  { "TRCRSCTLR27", 431 },
  { "TRCRSCTLR28", 432 },
  { "TRCRSCTLR29", 433 },
  { "TRCRSCTLR3", 407 },
  { "TRCRSCTLR30", 434 },
  { "TRCRSCTLR31", 435 },
  { "TRCRSCTLR4", 408 },
  { "TRCRSCTLR5", 409 },
  { "TRCRSCTLR6", 410 },
  { "TRCRSCTLR7", 411 },
  { "TRCRSCTLR8", 412 },
  { "TRCRSCTLR9", 413 },
  { "TRCSEQEVR0", 380 },
  { "TRCSEQEVR1", 381 },
  { "TRCSEQEVR2", 382 },
  { "TRCSEQRSTEVR", 383 },
  { "TRCSEQSTR", 384 },
  { "TRCSSCCR0", 436 },
  { "TRCSSCCR1", 437 },
  { "TRCSSCCR2", 438 },
  { "TRCSSCCR3", 439 },
  { "TRCSSCCR4", 440 },
  { "TRCSSCCR5", 441 },
  { "TRCSSCCR6", 442 },
  { "TRCSSCCR7", 443 },
  { "TRCSSCSR0", 444 },
  { "TRCSSCSR1", 445 },
  { "TRCSSCSR2", 446 },
  { "TRCSSCSR3", 447 },
  { "TRCSSCSR4", 448 },
  { "TRCSSCSR5", 449 },
  { "TRCSSCSR6", 450 },
  { "TRCSSCSR7", 451 },
  { "TRCSSPCICR0", 452 },
  { "TRCSSPCICR1", 453 },
  { "TRCSSPCICR2", 454 },
  { "TRCSSPCICR3", 455 },
  { "TRCSSPCICR4", 456 },
  { "TRCSSPCICR5", 457 },
  { "TRCSSPCICR6", 458 },
  { "TRCSSPCICR7", 459 },
  { "TRCSTALLCTLR", 366 },
  { "TRCSTATR", 50 },
  { "TRCSYNCPR", 368 },
  { "TRCTRACEIDR", 371 },
  { "TRCTSCTLR", 367 },
  { "TRCVDARCCTLR", 379 },
  { "TRCVDCTLR", 377 },
  { "TRCVDSACCTLR", 378 },
  { "TRCVICTLR", 373 },
  { "TRCVIIECTLR", 374 },
  { "TRCVIPCSSCTLR", 376 },
  { "TRCVISSCTLR", 375 },
  { "TRCVMIDCCTLR0", 527 },
  { "TRCVMIDCCTLR1", 528 },
  { "TRCVMIDCVR0", 517 },
  { "TRCVMIDCVR1", 518 },
  { "TRCVMIDCVR2", 519 },
  { "TRCVMIDCVR3", 520 },
  { "TRCVMIDCVR4", 521 },
  { "TRCVMIDCVR5", 522 },
  { "TRCVMIDCVR6", 523 },
  { "TRCVMIDCVR7", 524 },
  { "TTBR0_EL1", 204 },
  { "TTBR0_EL12", 592 },
  { "TTBR0_EL2", 205 },
  { "TTBR0_EL3", 206 },
  { "TTBR1_EL1", 207 },
  { "TTBR1_EL12", 593 },
  { "TTBR1_EL2", 585 },
  { "UAO", 612 },
  { "VBAR_EL1", 269 },
  { "VBAR_EL12", 601 },
  { "VBAR_EL2", 270 },
  { "VBAR_EL3", 271 },
  { "VDISR_EL2", 633 },
  { "VMPIDR_EL2", 187 },
  { "VPIDR_EL2", 186 },
  { "VSESR_EL2", 634 },
  { "VTCR_EL2", 212 },
  { "VTTBR_EL2", 211 },
};

const SysReg *lookupSysRegByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(SysRegsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &SysRegsList[Idx->second];
}

const std::pair<uint16_t, int> SysRegsByEncoding[] = {
  { 0x8002, 108 },
  { 0x8004, 116 },
  { 0x8005, 132 },
  { 0x8006, 148 },
  { 0x8007, 164 },
  { 0x800C, 117 },
  { 0x800D, 133 },
  { 0x800E, 149 },
  { 0x800F, 165 },
  { 0x8010, 111 },
  { 0x8012, 112 },
  { 0x8014, 118 },
  { 0x8015, 134 },
  { 0x8016, 150 },
  { 0x8017, 166 },
  { 0x801A, 109 },
  { 0x801C, 119 },
  { 0x801D, 135 },
  { 0x801E, 151 },
  { 0x801F, 167 },
  { 0x8024, 120 },
  { 0x8025, 136 },
  { 0x8026, 152 },
  { 0x8027, 168 },
  { 0x802C, 121 },
  { 0x802D, 137 },
  { 0x802E, 153 },
  { 0x802F, 169 },
  { 0x8032, 114 },
  { 0x8034, 122 },
  { 0x8035, 138 },
  { 0x8036, 154 },
  { 0x8037, 170 },
  { 0x803C, 123 },
  { 0x803D, 139 },
  { 0x803E, 155 },
  { 0x803F, 171 },
  { 0x8044, 124 },
  { 0x8045, 140 },
  { 0x8046, 156 },
  { 0x8047, 172 },
  { 0x804C, 125 },
  { 0x804D, 141 },
  { 0x804E, 157 },
  { 0x804F, 173 },
  { 0x8054, 126 },
  { 0x8055, 142 },
  { 0x8056, 158 },
  { 0x8057, 174 },
  { 0x805C, 127 },
  { 0x805D, 143 },
  { 0x805E, 159 },
  { 0x805F, 175 },
  { 0x8064, 128 },
  { 0x8065, 144 },
  { 0x8066, 160 },
  { 0x8067, 176 },
  { 0x806C, 129 },
  { 0x806D, 145 },
  { 0x806E, 161 },
  { 0x806F, 177 },
  { 0x8074, 130 },
  { 0x8075, 146 },
  { 0x8076, 162 },
  { 0x8077, 178 },
  { 0x807C, 131 },
  { 0x807D, 147 },
  { 0x807E, 163 },
  { 0x807F, 179 },
  { 0x8080, 2 },
  { 0x8084, 98 },
  { 0x808C, 3 },
  { 0x809C, 181 },
  { 0x80A4, 182 },
  { 0x83C6, 183 },
  { 0x83CE, 184 },
  { 0x83F6, 4 },
  { 0x8801, 371 },
  { 0x8802, 373 },
  { 0x8804, 380 },
  { 0x8805, 386 },
  { 0x8806, 51 },
  { 0x8807, 398 },
  { 0x8808, 360 },
  { 0x8809, 372 },
  { 0x880A, 374 },
  { 0x880C, 381 },
  { 0x880D, 387 },
  { 0x880E, 52 },
  { 0x880F, 399 },
  { 0x8810, 361 },
  { 0x8812, 375 },
  { 0x8814, 382 },
  { 0x8815, 388 },
  { 0x8816, 53 },
  { 0x8817, 400 },
  { 0x8818, 50 },
  { 0x881A, 376 },
  { 0x881D, 389 },
  { 0x881E, 54 },
  { 0x881F, 401 },
  { 0x8820, 362 },
  { 0x8825, 390 },
  { 0x8826, 55 },
  { 0x8827, 402 },
  { 0x882D, 391 },
  { 0x882E, 56 },
  { 0x882F, 403 },
  { 0x8830, 363 },
  { 0x8834, 383 },
  { 0x8835, 392 },
  { 0x8837, 404 },
  { 0x883C, 384 },
  { 0x883D, 393 },
  { 0x883F, 405 },
  { 0x8840, 364 },
  { 0x8842, 377 },
  { 0x8844, 385 },
  { 0x8845, 394 },
  { 0x8847, 57 },
  { 0x8848, 365 },
  { 0x884A, 378 },
  { 0x884D, 395 },
  { 0x884F, 58 },
  { 0x8852, 379 },
  { 0x8855, 396 },
  { 0x8857, 59 },
  { 0x8858, 366 },
  { 0x885D, 397 },
  { 0x885F, 60 },
  { 0x8860, 367 },
  { 0x8867, 61 },
  { 0x8868, 368 },
  { 0x886F, 62 },
  { 0x8870, 369 },
  { 0x8877, 63 },
  { 0x8878, 370 },
  { 0x887F, 64 },
  { 0x8881, 420 },
  { 0x8882, 436 },
  { 0x8883, 452 },
  { 0x8884, 100 },
  { 0x8889, 421 },
  { 0x888A, 437 },
  { 0x888B, 453 },
  { 0x888C, 65 },
  { 0x8890, 406 },
  { 0x8891, 422 },
  { 0x8892, 438 },
  { 0x8893, 454 },
  { 0x8898, 407 },
  { 0x8899, 423 },
  { 0x889A, 439 },
  { 0x889B, 455 },
  { 0x88A0, 408 },
  { 0x88A1, 424 },
  { 0x88A2, 440 },
  { 0x88A3, 456 },
  { 0x88A4, 460 },
  { 0x88A8, 409 },
  { 0x88A9, 425 },
  { 0x88AA, 441 },
  { 0x88AB, 457 },
  { 0x88AC, 66 },
  { 0x88B0, 410 },
  { 0x88B1, 426 },
  { 0x88B2, 442 },
  { 0x88B3, 458 },
  { 0x88B8, 411 },
  { 0x88B9, 427 },
  { 0x88BA, 443 },
  { 0x88BB, 459 },
  { 0x88C0, 412 },
  { 0x88C1, 428 },
  { 0x88C2, 444 },
  { 0x88C8, 413 },
  { 0x88C9, 429 },
  { 0x88CA, 445 },
  { 0x88D0, 414 },
  { 0x88D1, 430 },
  { 0x88D2, 446 },
  { 0x88D8, 415 },
  { 0x88D9, 431 },
  { 0x88DA, 447 },
  { 0x88E0, 416 },
  { 0x88E1, 432 },
  { 0x88E2, 448 },
  { 0x88E8, 417 },
  { 0x88E9, 433 },
  { 0x88EA, 449 },
  { 0x88F0, 418 },
  { 0x88F1, 434 },
  { 0x88F2, 450 },
  { 0x88F8, 419 },
  { 0x88F9, 435 },
  { 0x88FA, 451 },
  { 0x8900, 461 },
  { 0x8901, 469 },
  { 0x8902, 477 },
  { 0x8903, 485 },
  { 0x8904, 493 },
  { 0x8905, 497 },
  { 0x8906, 501 },
  { 0x8907, 505 },
  { 0x8910, 462 },
  { 0x8911, 470 },
  { 0x8912, 478 },
  { 0x8913, 486 },
  { 0x8920, 463 },
  { 0x8921, 471 },
  { 0x8922, 479 },
  { 0x8923, 487 },
  { 0x8924, 494 },
  { 0x8925, 498 },
  { 0x8926, 502 },
  { 0x8927, 506 },
  { 0x8930, 464 },
  { 0x8931, 472 },
  { 0x8932, 480 },
  { 0x8933, 488 },
  { 0x8940, 465 },
  { 0x8941, 473 },
  { 0x8942, 481 },
  { 0x8943, 489 },
  { 0x8944, 495 },
  { 0x8945, 499 },
  { 0x8946, 503 },
  { 0x8947, 507 },
  { 0x8950, 466 },
  { 0x8951, 474 },
  { 0x8952, 482 },
  { 0x8953, 490 },
  { 0x8960, 467 },
  { 0x8961, 475 },
  { 0x8962, 483 },
  { 0x8963, 491 },
  { 0x8964, 496 },
  { 0x8965, 500 },
  { 0x8966, 504 },
  { 0x8967, 508 },
  { 0x8970, 468 },
  { 0x8971, 476 },
  { 0x8972, 484 },
  { 0x8973, 492 },
  { 0x8980, 509 },
  { 0x8981, 517 },
  { 0x8982, 525 },
  { 0x898A, 526 },
  { 0x8990, 510 },
  { 0x8991, 518 },
  { 0x8992, 527 },
  { 0x899A, 528 },
  { 0x89A0, 511 },
  { 0x89A1, 519 },
  { 0x89B0, 512 },
  { 0x89B1, 520 },
  { 0x89C0, 513 },
  { 0x89C1, 521 },
  { 0x89D0, 514 },
  { 0x89D1, 522 },
  { 0x89E0, 515 },
  { 0x89E1, 523 },
  { 0x89F0, 516 },
  { 0x89F1, 524 },
  { 0x8B84, 529 },
  { 0x8B97, 72 },
  { 0x8B9F, 73 },
  { 0x8BA7, 74 },
  { 0x8BAF, 75 },
  { 0x8BB7, 76 },
  { 0x8BBF, 77 },
  { 0x8BC6, 530 },
  { 0x8BC7, 78 },
  { 0x8BCE, 531 },
  { 0x8BCF, 79 },
  { 0x8BD6, 67 },
  { 0x8BD7, 80 },
  { 0x8BDE, 68 },
  { 0x8BDF, 81 },
  { 0x8BE6, 101 },
  { 0x8BE7, 82 },
  { 0x8BEE, 69 },
  { 0x8BEF, 83 },
  { 0x8BF6, 70 },
  { 0x8BF7, 84 },
  { 0x8BFE, 71 },
  { 0x8BFF, 85 },
  { 0x9000, 110 },
  { 0x9080, 180 },
  { 0x9808, 0 },
  { 0x9820, 113 },
  { 0x9828, 1 },
  { 0x9828, 97 },
  { 0xA038, 115 },
  { 0xC000, 7 },
  { 0xC005, 11 },
  { 0xC006, 12 },
  { 0xC008, 15 },
  { 0xC009, 16 },
  { 0xC00A, 17 },
  { 0xC00B, 18 },
  { 0xC00C, 19 },
  { 0xC00D, 20 },
  { 0xC00E, 21 },
  { 0xC00F, 22 },
  { 0xC010, 23 },
  { 0xC011, 24 },
  { 0xC012, 25 },
  { 0xC013, 26 },
  { 0xC014, 27 },
  { 0xC015, 28 },
  { 0xC016, 49 },
  { 0xC018, 40 },
  { 0xC019, 41 },
  { 0xC01A, 42 },
  { 0xC020, 29 },
  { 0xC021, 30 },
  { 0xC028, 31 },
  { 0xC029, 32 },
  { 0xC02C, 33 },
  { 0xC02D, 34 },
  { 0xC030, 35 },
  { 0xC031, 36 },
  { 0xC038, 37 },
  { 0xC039, 38 },
  { 0xC03A, 39 },
  { 0xC080, 189 },
  { 0xC081, 192 },
  { 0xC082, 188 },
  { 0xC100, 204 },
  { 0xC101, 207 },
  { 0xC102, 208 },
  { 0xC200, 214 },
  { 0xC201, 217 },
  { 0xC208, 220 },
  { 0xC210, 223 },
  { 0xC212, 226 },
  { 0xC213, 580 },
  { 0xC214, 612 },
  { 0xC230, 534 },
  { 0xC288, 236 },
  { 0xC289, 239 },
  { 0xC290, 242 },
  { 0xC298, 95 },
  { 0xC299, 626 },
  { 0xC2A0, 96 },
  { 0xC2A1, 627 },
  { 0xC2A2, 628 },
  { 0xC2A3, 629 },
  { 0xC2A8, 630 },
  { 0xC2A9, 631 },
  { 0xC300, 246 },
  { 0xC3A0, 250 },
  { 0xC4C8, 619 },
  { 0xC4CA, 620 },
  { 0xC4CB, 621 },
  { 0xC4CC, 622 },
  { 0xC4CD, 623 },
  { 0xC4CE, 624 },
  { 0xC4CF, 625 },
  { 0xC4D0, 613 },
  { 0xC4D1, 614 },
  { 0xC4D3, 615 },
  { 0xC4D7, 616 },
  { 0xC4F1, 260 },
  { 0xC4F2, 261 },
  { 0xC510, 263 },
  { 0xC518, 266 },
  { 0xC520, 581 },
  { 0xC521, 582 },
  { 0xC522, 583 },
  { 0xC523, 584 },
  { 0xC527, 94 },
  { 0xC600, 269 },
  { 0xC601, 43 },
  { 0xC602, 272 },
  { 0xC608, 46 },
  { 0xC609, 632 },
  { 0xC640, 87 },
  { 0xC641, 103 },
  { 0xC642, 89 },
  { 0xC643, 533 },
  { 0xC644, 544 },
  { 0xC645, 545 },
  { 0xC646, 546 },
  { 0xC647, 547 },
  { 0xC648, 548 },
  { 0xC649, 549 },
  { 0xC64A, 550 },
  { 0xC64B, 551 },
  { 0xC659, 104 },
  { 0xC65B, 90 },
  { 0xC65D, 105 },
  { 0xC65E, 106 },
  { 0xC65F, 107 },
  { 0xC660, 86 },
  { 0xC661, 102 },
  { 0xC662, 88 },
  { 0xC663, 532 },
  { 0xC664, 535 },
  { 0xC665, 537 },
  { 0xC666, 540 },
  { 0xC667, 541 },
  { 0xC668, 543 },
  { 0xC681, 275 },
  { 0xC684, 280 },
  { 0xC708, 283 },
  { 0xC800, 8 },
  { 0xC801, 9 },
  { 0xC807, 13 },
  { 0xD000, 185 },
  { 0xD801, 10 },
  { 0xD807, 14 },
  { 0xDA10, 224 },
  { 0xDA11, 225 },
  { 0xDA20, 231 },
  { 0xDA21, 232 },
  { 0xDA28, 233 },
  { 0xDA29, 234 },
  { 0xDCE0, 251 },
  { 0xDCE1, 252 },
  { 0xDCE2, 253 },
  { 0xDCE3, 254 },
  { 0xDCE4, 99 },
  { 0xDCE5, 255 },
  { 0xDCE6, 5 },
  { 0xDCE7, 6 },
  { 0xDCE8, 256 },
  { 0xDCE9, 257 },
  { 0xDCEA, 258 },
  { 0xDCF0, 259 },
  { 0xDCF3, 262 },
  { 0xDE82, 276 },
  { 0xDE83, 279 },
  { 0xDF00, 281 },
  { 0xDF01, 47 },
  { 0xDF02, 48 },
  { 0xDF10, 285 },
  { 0xDF11, 288 },
  { 0xDF12, 291 },
  { 0xDF18, 294 },
  { 0xDF19, 295 },
  { 0xDF1A, 296 },
  { 0xDF40, 297 },
  { 0xDF41, 298 },
  { 0xDF42, 299 },
  { 0xDF43, 300 },
  { 0xDF44, 301 },
  { 0xDF45, 302 },
  { 0xDF46, 303 },
  { 0xDF47, 304 },
  { 0xDF48, 305 },
  { 0xDF49, 306 },
  { 0xDF4A, 307 },
  { 0xDF4B, 308 },
  { 0xDF4C, 309 },
  { 0xDF4D, 310 },
  { 0xDF4E, 311 },
  { 0xDF4F, 312 },
  { 0xDF50, 313 },
  { 0xDF51, 314 },
  { 0xDF52, 315 },
  { 0xDF53, 316 },
  { 0xDF54, 317 },
  { 0xDF55, 318 },
  { 0xDF56, 319 },
  { 0xDF57, 320 },
  { 0xDF58, 321 },
  { 0xDF59, 322 },
  { 0xDF5A, 323 },
  { 0xDF5B, 324 },
  { 0xDF5C, 325 },
  { 0xDF5D, 326 },
  { 0xDF5E, 327 },
  { 0xDF60, 329 },
  { 0xDF61, 330 },
  { 0xDF62, 331 },
  { 0xDF63, 332 },
  { 0xDF64, 333 },
  { 0xDF65, 334 },
  { 0xDF66, 335 },
  { 0xDF67, 336 },
  { 0xDF68, 337 },
  { 0xDF69, 338 },
  { 0xDF6A, 339 },
  { 0xDF6B, 340 },
  { 0xDF6C, 341 },
  { 0xDF6D, 342 },
  { 0xDF6E, 343 },
  { 0xDF6F, 344 },
  { 0xDF70, 345 },
  { 0xDF71, 346 },
  { 0xDF72, 347 },
  { 0xDF73, 348 },
  { 0xDF74, 349 },
  { 0xDF75, 350 },
  { 0xDF76, 351 },
  { 0xDF77, 352 },
  { 0xDF78, 353 },
  { 0xDF79, 354 },
  { 0xDF7A, 355 },
  { 0xDF7B, 356 },
  { 0xDF7C, 357 },
  { 0xDF7D, 358 },
  { 0xDF7E, 359 },
  { 0xDF7F, 328 },
  { 0xE000, 186 },
  { 0xE005, 187 },
  { 0xE080, 190 },
  { 0xE081, 193 },
  { 0xE088, 195 },
  { 0xE089, 197 },
  { 0xE08A, 199 },
  { 0xE08B, 201 },
  { 0xE08F, 202 },
  { 0xE100, 205 },
  { 0xE101, 585 },
  { 0xE102, 209 },
  { 0xE108, 211 },
  { 0xE10A, 212 },
  { 0xE180, 213 },
  { 0xE200, 215 },
  { 0xE201, 218 },
  { 0xE208, 221 },
  { 0xE218, 227 },
  { 0xE219, 228 },
  { 0xE21A, 229 },
  { 0xE21B, 230 },
  { 0xE281, 235 },
  { 0xE288, 237 },
  { 0xE289, 240 },
  { 0xE290, 243 },
  { 0xE293, 634 },
  { 0xE298, 245 },
  { 0xE300, 247 },
  { 0xE304, 249 },
  { 0xE4C8, 617 },
  { 0xE510, 264 },
  { 0xE518, 267 },
  { 0xE600, 270 },
  { 0xE601, 44 },
  { 0xE602, 273 },
  { 0xE609, 633 },
  { 0xE640, 552 },
  { 0xE641, 553 },
  { 0xE642, 554 },
  { 0xE643, 555 },
  { 0xE648, 556 },
  { 0xE649, 557 },
  { 0xE64A, 558 },
  { 0xE64B, 559 },
  { 0xE64C, 563 },
  { 0xE64D, 538 },
  { 0xE658, 560 },
  { 0xE659, 91 },
  { 0xE65A, 561 },
  { 0xE65B, 92 },
  { 0xE65D, 93 },
  { 0xE65F, 562 },
  { 0xE660, 564 },
  { 0xE661, 565 },
  { 0xE662, 566 },
  { 0xE663, 567 },
  { 0xE664, 568 },
  { 0xE665, 569 },
  { 0xE666, 570 },
  { 0xE667, 571 },
  { 0xE668, 572 },
  { 0xE669, 573 },
  { 0xE66A, 574 },
  { 0xE66B, 575 },
  { 0xE66C, 576 },
  { 0xE66D, 577 },
  { 0xE66E, 578 },
  { 0xE66F, 579 },
  { 0xE681, 586 },
  { 0xE682, 277 },
  { 0xE703, 282 },
  { 0xE708, 284 },
  { 0xE710, 286 },
  { 0xE711, 289 },
  { 0xE712, 292 },
  { 0xE718, 587 },
  { 0xE719, 589 },
  { 0xE71A, 588 },
  { 0xE880, 590 },
  { 0xE882, 591 },
  { 0xE900, 592 },
  { 0xE901, 593 },
  { 0xE902, 594 },
  { 0xEA00, 610 },
  { 0xEA01, 611 },
  { 0xEA88, 595 },
  { 0xEA89, 596 },
  { 0xEA90, 597 },
  { 0xEB00, 598 },
  { 0xECC8, 618 },
  { 0xED10, 599 },
  { 0xED18, 600 },
  { 0xEE00, 601 },
  { 0xEE81, 602 },
  { 0xEF08, 603 },
  { 0xEF10, 604 },
  { 0xEF11, 605 },
  { 0xEF12, 606 },
  { 0xEF18, 607 },
  { 0xEF19, 608 },
  { 0xEF1A, 609 },
  { 0xF080, 191 },
  { 0xF081, 194 },
  { 0xF088, 196 },
  { 0xF089, 198 },
  { 0xF08A, 200 },
  { 0xF099, 203 },
  { 0xF100, 206 },
  { 0xF102, 210 },
  { 0xF200, 216 },
  { 0xF201, 219 },
  { 0xF208, 222 },
  { 0xF288, 238 },
  { 0xF289, 241 },
  { 0xF290, 244 },
  { 0xF300, 248 },
  { 0xF510, 265 },
  { 0xF518, 268 },
  { 0xF600, 271 },
  { 0xF601, 45 },
  { 0xF602, 274 },
  { 0xF664, 536 },
  { 0xF665, 539 },
  { 0xF667, 542 },
  { 0xF682, 278 },
  { 0xFF10, 287 },
  { 0xFF11, 290 },
  { 0xFF12, 293 },
  { 0xFF90, 635 },
};

const SysReg *lookupSysRegByEncoding(uint16_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint16_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint16_t, int>> Table(SysRegsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &SysRegsList[Idx->second];
}

#endif
#ifdef GET_TLBI_DECL
#undef GET_TLBI_DECL
enum TLBIValues {
  IPAS2E1IS = 25601,
  IPAS2LE1IS = 25605,
  VMALLE1IS = 17432,
  ALLE2IS = 25624,
  ALLE3IS = 29720,
  VAE1IS = 17433,
  VAE2IS = 25625,
  VAE3IS = 29721,
  ASIDE1IS = 17434,
  VAAE1IS = 17435,
  ALLE1IS = 25628,
  VALE1IS = 17437,
  VALE2IS = 25629,
  VALE3IS = 29725,
  VMALLS12E1IS = 25630,
  VAALE1IS = 17439,
  IPAS2E1 = 25633,
  IPAS2LE1 = 25637,
  VMALLE1 = 17464,
  ALLE2 = 25656,
  ALLE3 = 29752,
  VAE1 = 17465,
  VAE2 = 25657,
  VAE3 = 29753,
  ASIDE1 = 17466,
  VAAE1 = 17467,
  ALLE1 = 25660,
  VALE1 = 17469,
  VALE2 = 25661,
  VALE3 = 29757,
  VMALLS12E1 = 25662,
  VAALE1 = 17471,
};

const TLBI *lookupTLBIByName(StringRef Name);

const TLBI *lookupTLBIByEncoding(uint16_t Encoding);

#endif

#ifdef GET_TLBI_IMPL
#undef GET_TLBI_IMPL
const TLBI TLBIsList[] = {
  { "IPAS2E1IS", 0x6401, true},
  { "IPAS2LE1IS", 0x6405, true},
  { "VMALLE1IS", 0x4418, false},
  { "ALLE2IS", 0x6418, false},
  { "ALLE3IS", 0x7418, false},
  { "VAE1IS", 0x4419, true},
  { "VAE2IS", 0x6419, true},
  { "VAE3IS", 0x7419, true},
  { "ASIDE1IS", 0x441A, true},
  { "VAAE1IS", 0x441B, true},
  { "ALLE1IS", 0x641C, false},
  { "VALE1IS", 0x441D, true},
  { "VALE2IS", 0x641D, true},
  { "VALE3IS", 0x741D, true},
  { "VMALLS12E1IS", 0x641E, false},
  { "VAALE1IS", 0x441F, true},
  { "IPAS2E1", 0x6421, true},
  { "IPAS2LE1", 0x6425, true},
  { "VMALLE1", 0x4438, false},
  { "ALLE2", 0x6438, false},
  { "ALLE3", 0x7438, false},
  { "VAE1", 0x4439, true},
  { "VAE2", 0x6439, true},
  { "VAE3", 0x7439, true},
  { "ASIDE1", 0x443A, true},
  { "VAAE1", 0x443B, true},
  { "ALLE1", 0x643C, false},
  { "VALE1", 0x443D, true},
  { "VALE2", 0x643D, true},
  { "VALE3", 0x743D, true},
  { "VMALLS12E1", 0x643E, false},
  { "VAALE1", 0x443F, true},
};

const std::pair<const char *, int> TLBIsByName[] = {
  { "ALLE1", 26 },
  { "ALLE1IS", 10 },
  { "ALLE2", 19 },
  { "ALLE2IS", 3 },
  { "ALLE3", 20 },
  { "ALLE3IS", 4 },
  { "ASIDE1", 24 },
  { "ASIDE1IS", 8 },
  { "IPAS2E1", 16 },
  { "IPAS2E1IS", 0 },
  { "IPAS2LE1", 17 },
  { "IPAS2LE1IS", 1 },
  { "VAAE1", 25 },
  { "VAAE1IS", 9 },
  { "VAALE1", 31 },
  { "VAALE1IS", 15 },
  { "VAE1", 21 },
  { "VAE1IS", 5 },
  { "VAE2", 22 },
  { "VAE2IS", 6 },
  { "VAE3", 23 },
  { "VAE3IS", 7 },
  { "VALE1", 27 },
  { "VALE1IS", 11 },
  { "VALE2", 28 },
  { "VALE2IS", 12 },
  { "VALE3", 29 },
  { "VALE3IS", 13 },
  { "VMALLE1", 18 },
  { "VMALLE1IS", 2 },
  { "VMALLS12E1", 30 },
  { "VMALLS12E1IS", 14 },
};

const TLBI *lookupTLBIByName(StringRef Name) {
  std::string CanonicalVal = Name.upper();
  std::pair<const char *, int> Val = {CanonicalVal.data(), 0};
  ArrayRef<std::pair<const char *, int>> Table(TLBIsByName);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val,
                              [](const std::pair<const char *, int> &LHS, const std::pair<const char *, int> &RHS) {
    return StringRef(LHS.first) < StringRef(RHS.first);
  });

  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &TLBIsList[Idx->second];
}

const std::pair<uint16_t, int> TLBIsByEncoding[] = {
  { 0x4418, 2 },
  { 0x4419, 5 },
  { 0x441A, 8 },
  { 0x441B, 9 },
  { 0x441D, 11 },
  { 0x441F, 15 },
  { 0x4438, 18 },
  { 0x4439, 21 },
  { 0x443A, 24 },
  { 0x443B, 25 },
  { 0x443D, 27 },
  { 0x443F, 31 },
  { 0x6401, 0 },
  { 0x6405, 1 },
  { 0x6418, 3 },
  { 0x6419, 6 },
  { 0x641C, 10 },
  { 0x641D, 12 },
  { 0x641E, 14 },
  { 0x6421, 16 },
  { 0x6425, 17 },
  { 0x6438, 19 },
  { 0x6439, 22 },
  { 0x643C, 26 },
  { 0x643D, 28 },
  { 0x643E, 30 },
  { 0x7418, 4 },
  { 0x7419, 7 },
  { 0x741D, 13 },
  { 0x7438, 20 },
  { 0x7439, 23 },
  { 0x743D, 29 },
};

const TLBI *lookupTLBIByEncoding(uint16_t Encoding) {
  auto CanonicalVal = Encoding;
 std::pair<uint16_t, int> Val = {CanonicalVal, 0};
  ArrayRef<std::pair<uint16_t, int>> Table(TLBIsByEncoding);
  auto Idx = std::lower_bound(Table.begin(), Table.end(), Val);
  if (Idx == Table.end() || CanonicalVal != Idx->first)
    return nullptr;
  return &TLBIsList[Idx->second];
}

#endif
