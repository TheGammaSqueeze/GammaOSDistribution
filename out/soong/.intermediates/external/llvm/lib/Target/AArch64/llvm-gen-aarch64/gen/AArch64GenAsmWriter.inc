/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', 9, 0,
  /* 9 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', 9, 0,
  /* 20 */ 'l', 'd', '1', 9, 0,
  /* 25 */ 't', 'r', 'n', '1', 9, 0,
  /* 31 */ 'z', 'i', 'p', '1', 9, 0,
  /* 37 */ 'u', 'z', 'p', '1', 9, 0,
  /* 43 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 50 */ 's', 't', '1', 9, 0,
  /* 55 */ 's', 'h', 'a', '1', 's', 'u', '1', 9, 0,
  /* 64 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', 9, 0,
  /* 75 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 82 */ 'l', 'd', '2', 9, 0,
  /* 87 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', 9, 0,
  /* 97 */ 's', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 105 */ 'u', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 113 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 123 */ 's', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 131 */ 'u', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 139 */ 's', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 147 */ 'u', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 155 */ 's', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 163 */ 'u', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 171 */ 's', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 179 */ 'u', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 187 */ 's', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 195 */ 'u', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 203 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 213 */ 'p', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 221 */ 's', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 229 */ 'u', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 237 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 247 */ 's', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 255 */ 'u', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 263 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 271 */ 'r', 's', 'u', 'b', 'h', 'n', '2', 9, 0,
  /* 280 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', 9, 0,
  /* 289 */ 's', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 298 */ 'u', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 307 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 317 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 327 */ 't', 'r', 'n', '2', 9, 0,
  /* 333 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 341 */ 's', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 349 */ 'u', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 357 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 367 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 378 */ 's', 'q', 'x', 't', 'u', 'n', '2', 9, 0,
  /* 387 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 396 */ 'z', 'i', 'p', '2', 9, 0,
  /* 402 */ 'u', 'z', 'p', '2', 9, 0,
  /* 408 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 415 */ 's', 't', '2', 9, 0,
  /* 420 */ 's', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 428 */ 'u', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 436 */ 's', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 444 */ 'u', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 452 */ 'l', 'd', '3', 9, 0,
  /* 457 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 464 */ 's', 't', '3', 9, 0,
  /* 469 */ 'r', 'e', 'v', '6', '4', 9, 0,
  /* 476 */ 'l', 'd', '4', 9, 0,
  /* 481 */ 's', 't', '4', 9, 0,
  /* 486 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 493 */ 's', 'a', 'b', 'a', 9, 0,
  /* 499 */ 'u', 'a', 'b', 'a', 9, 0,
  /* 505 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 513 */ 'f', 'm', 'l', 'a', 9, 0,
  /* 519 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 528 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 537 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 544 */ 's', 'w', 'p', 'a', 9, 0,
  /* 550 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 558 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 566 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 573 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 580 */ 's', 's', 'r', 'a', 9, 0,
  /* 586 */ 'u', 's', 'r', 'a', 9, 0,
  /* 592 */ 'c', 'a', 's', 'a', 9, 0,
  /* 598 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 606 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 614 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 623 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 632 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 640 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 649 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 659 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 669 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 676 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 685 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 694 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 701 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 710 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 720 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 730 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 739 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 747 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 757 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 768 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 779 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 787 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 797 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 807 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 815 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 825 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 836 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 847 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 856 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 866 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 876 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 883 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 892 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 901 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 908 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 917 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 927 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 937 */ 'd', 'm', 'b', 9, 0,
  /* 942 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 951 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 960 */ 's', 'w', 'p', 'b', 9, 0,
  /* 966 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 973 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 981 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 987 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 995 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 1003 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 1010 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 1018 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 1025 */ 's', 't', 'r', 'b', 9, 0,
  /* 1031 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 1038 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 1045 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 1052 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 1060 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 1067 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 1075 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 1082 */ 'c', 'a', 's', 'b', 9, 0,
  /* 1088 */ 'd', 's', 'b', 9, 0,
  /* 1093 */ 'i', 's', 'b', 9, 0,
  /* 1098 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 1105 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 1113 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 1121 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 1129 */ 'f', 's', 'u', 'b', 9, 0,
  /* 1135 */ 's', 'h', 's', 'u', 'b', 9, 0,
  /* 1142 */ 'u', 'h', 's', 'u', 'b', 9, 0,
  /* 1149 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 1156 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 1164 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 1171 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 1178 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 1187 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 1196 */ 's', 'h', 'a', '1', 'c', 9, 0,
  /* 1203 */ 's', 'b', 'c', 9, 0,
  /* 1208 */ 'a', 'd', 'c', 9, 0,
  /* 1213 */ 'b', 'i', 'c', 9, 0,
  /* 1218 */ 'a', 'e', 's', 'i', 'm', 'c', 9, 0,
  /* 1226 */ 'a', 'e', 's', 'm', 'c', 9, 0,
  /* 1233 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 1240 */ 'h', 'v', 'c', 9, 0,
  /* 1245 */ 's', 'v', 'c', 9, 0,
  /* 1250 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 1256 */ 's', 'a', 'b', 'd', 9, 0,
  /* 1262 */ 'u', 'a', 'b', 'd', 9, 0,
  /* 1268 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 1275 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 1281 */ 's', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1289 */ 'u', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1297 */ 's', 'h', 'a', 'd', 'd', 9, 0,
  /* 1304 */ 'u', 'h', 'a', 'd', 'd', 9, 0,
  /* 1311 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 1318 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 1326 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 1334 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 1342 */ 'a', 'n', 'd', 9, 0,
  /* 1347 */ 'a', 'e', 's', 'd', 9, 0,
  /* 1353 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 1360 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 1367 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 1374 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1382 */ 'u', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1390 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 1398 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 1405 */ 'a', 'e', 's', 'e', 9, 0,
  /* 1411 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1420 */ 'u', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1429 */ 'b', 'i', 'f', 9, 0,
  /* 1434 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 1441 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 1448 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 1454 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 1461 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 1468 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 1475 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 1483 */ 's', 'h', 'a', '2', '5', '6', 'h', 9, 0,
  /* 1492 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 1501 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 1511 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 1521 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 1531 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 1538 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 1547 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 1556 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 1563 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 1572 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 1582 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 1592 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 1601 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 1609 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 1619 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 1630 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 1641 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 1649 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 1659 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 1669 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 1677 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 1687 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 1698 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 1709 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 1718 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 1728 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 1738 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 1745 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 1754 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 1763 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 1770 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 1779 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 1788 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 1798 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 1805 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 1812 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 1822 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 1832 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 1841 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 1850 */ 's', 'w', 'p', 'h', 9, 0,
  /* 1856 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 1863 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 1871 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 1877 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 1885 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 1893 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 1900 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 1908 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 1915 */ 's', 't', 'r', 'h', 9, 0,
  /* 1921 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 1928 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 1935 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 1942 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 1950 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 1957 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 1965 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 1972 */ 'c', 'a', 's', 'h', 9, 0,
  /* 1978 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 1988 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 1995 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 2003 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 2011 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 2019 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 2028 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 2037 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 2043 */ 's', 'l', 'i', 9, 0,
  /* 2048 */ 'm', 'v', 'n', 'i', 9, 0,
  /* 2054 */ 's', 'r', 'i', 9, 0,
  /* 2059 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 2067 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 2073 */ 'b', 'r', 'k', 9, 0,
  /* 2078 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 2084 */ 's', 'a', 'b', 'a', 'l', 9, 0,
  /* 2091 */ 'u', 'a', 'b', 'a', 'l', 9, 0,
  /* 2098 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 2107 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 2116 */ 's', 'm', 'l', 'a', 'l', 9, 0,
  /* 2123 */ 'u', 'm', 'l', 'a', 'l', 9, 0,
  /* 2130 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2140 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2150 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 2158 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 2165 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 2174 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 2183 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 2190 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 2199 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2209 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2219 */ 't', 'b', 'l', 9, 0,
  /* 2224 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2232 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2240 */ 's', 's', 'u', 'b', 'l', 9, 0,
  /* 2247 */ 'u', 's', 'u', 'b', 'l', 9, 0,
  /* 2254 */ 's', 'a', 'b', 'd', 'l', 9, 0,
  /* 2261 */ 'u', 'a', 'b', 'd', 'l', 9, 0,
  /* 2268 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 2276 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2284 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2292 */ 's', 'a', 'd', 'd', 'l', 9, 0,
  /* 2299 */ 'u', 'a', 'd', 'd', 'l', 9, 0,
  /* 2306 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 2313 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 2320 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 2327 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2335 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2343 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 2350 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 2357 */ 's', 's', 'h', 'l', 9, 0,
  /* 2363 */ 'u', 's', 'h', 'l', 9, 0,
  /* 2369 */ 's', 's', 'h', 'l', 'l', 9, 0,
  /* 2376 */ 'u', 's', 'h', 'l', 'l', 9, 0,
  /* 2383 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 2392 */ 'p', 'm', 'u', 'l', 'l', 9, 0,
  /* 2399 */ 's', 'm', 'u', 'l', 'l', 9, 0,
  /* 2406 */ 'u', 'm', 'u', 'l', 'l', 9, 0,
  /* 2413 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 2422 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 2431 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 2438 */ 's', 'w', 'p', 'l', 9, 0,
  /* 2444 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 2452 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 2460 */ 'c', 'a', 's', 'l', 9, 0,
  /* 2466 */ 'b', 's', 'l', 9, 0,
  /* 2471 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 2480 */ 's', 'm', 'l', 's', 'l', 9, 0,
  /* 2487 */ 'u', 'm', 'l', 's', 'l', 9, 0,
  /* 2494 */ 's', 'y', 's', 'l', 9, 0,
  /* 2500 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 2508 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 2515 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 2521 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 2528 */ 'p', 'm', 'u', 'l', 9, 0,
  /* 2534 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 2543 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 2552 */ 's', 'h', 'a', '1', 'm', 9, 0,
  /* 2559 */ 's', 'b', 'f', 'm', 9, 0,
  /* 2565 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 2571 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 2577 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 2585 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 2593 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 2601 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 2608 */ 'r', 's', 'u', 'b', 'h', 'n', 9, 0,
  /* 2616 */ 'r', 'a', 'd', 'd', 'h', 'n', 9, 0,
  /* 2624 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 2630 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 2638 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 2646 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 2652 */ 'e', 'o', 'n', 9, 0,
  /* 2657 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 2665 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 2673 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 2682 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 2691 */ 'o', 'r', 'n', 9, 0,
  /* 2696 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 2704 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 2711 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 2718 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 2725 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 2734 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 2744 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 2752 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 2758 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 2766 */ 's', 'h', 'a', '1', 'p', 9, 0,
  /* 2773 */ 'f', 'a', 'd', 'd', 'p', 9, 0,
  /* 2780 */ 'l', 'd', 'p', 9, 0,
  /* 2785 */ 's', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 2793 */ 'u', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 2801 */ 's', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 2809 */ 'u', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 2817 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 2824 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 2830 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', 9, 0,
  /* 2839 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', 9, 0,
  /* 2848 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 2854 */ 'f', 'm', 'i', 'n', 'p', 9, 0,
  /* 2861 */ 's', 'm', 'i', 'n', 'p', 9, 0,
  /* 2868 */ 'u', 'm', 'i', 'n', 'p', 9, 0,
  /* 2875 */ 's', 't', 'n', 'p', 9, 0,
  /* 2881 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 2887 */ 'c', 'a', 's', 'p', 9, 0,
  /* 2893 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 2901 */ 's', 't', 'p', 9, 0,
  /* 2906 */ 'd', 'u', 'p', 9, 0,
  /* 2911 */ 's', 'w', 'p', 9, 0,
  /* 2916 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 2923 */ 'f', 'm', 'a', 'x', 'p', 9, 0,
  /* 2930 */ 's', 'm', 'a', 'x', 'p', 9, 0,
  /* 2937 */ 'u', 'm', 'a', 'x', 'p', 9, 0,
  /* 2944 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 2950 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 2957 */ 's', 't', 'x', 'p', 9, 0,
  /* 2963 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 2970 */ 'l', 'd', '1', 'r', 9, 0,
  /* 2976 */ 'l', 'd', '2', 'r', 9, 0,
  /* 2982 */ 'l', 'd', '3', 'r', 9, 0,
  /* 2988 */ 'l', 'd', '4', 'r', 9, 0,
  /* 2994 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 3000 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 3007 */ 'b', 'r', 9, 0,
  /* 3011 */ 'a', 'd', 'r', 9, 0,
  /* 3016 */ 'l', 'd', 'r', 9, 0,
  /* 3021 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 3028 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 3035 */ 's', 's', 'h', 'r', 9, 0,
  /* 3041 */ 'u', 's', 'h', 'r', 9, 0,
  /* 3047 */ 'b', 'l', 'r', 9, 0,
  /* 3052 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 3059 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 3066 */ 's', 't', 'l', 'r', 9, 0,
  /* 3072 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 3079 */ 'r', 'o', 'r', 9, 0,
  /* 3084 */ 'o', 'r', 'r', 9, 0,
  /* 3089 */ 'a', 's', 'r', 9, 0,
  /* 3094 */ 'l', 's', 'r', 9, 0,
  /* 3099 */ 'm', 's', 'r', 9, 0,
  /* 3104 */ 'l', 'd', 't', 'r', 9, 0,
  /* 3110 */ 's', 't', 'r', 9, 0,
  /* 3115 */ 's', 't', 't', 'r', 9, 0,
  /* 3121 */ 'e', 'x', 't', 'r', 9, 0,
  /* 3127 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 3133 */ 's', 't', 'u', 'r', 9, 0,
  /* 3139 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 3146 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 3152 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 3159 */ 's', 't', 'x', 'r', 9, 0,
  /* 3165 */ 'c', 'a', 's', 9, 0,
  /* 3170 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 3178 */ 'f', 'a', 'b', 's', 9, 0,
  /* 3184 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 3191 */ 's', 'u', 'b', 's', 9, 0,
  /* 3197 */ 's', 'b', 'c', 's', 9, 0,
  /* 3203 */ 'a', 'd', 'c', 's', 9, 0,
  /* 3209 */ 'b', 'i', 'c', 's', 9, 0,
  /* 3215 */ 'a', 'd', 'd', 's', 9, 0,
  /* 3221 */ 'a', 'n', 'd', 's', 9, 0,
  /* 3227 */ 'c', 'm', 'h', 's', 9, 0,
  /* 3233 */ 'c', 'l', 's', 9, 0,
  /* 3238 */ 'f', 'm', 'l', 's', 9, 0,
  /* 3244 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 3252 */ 'i', 'n', 's', 9, 0,
  /* 3257 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 3265 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 3273 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 3281 */ 'm', 'r', 's', 9, 0,
  /* 3286 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 3295 */ 's', 'y', 's', 9, 0,
  /* 3300 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 3308 */ 'r', 'e', 't', 9, 0,
  /* 3313 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 3320 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 3327 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 3334 */ 'r', 'b', 'i', 't', 9, 0,
  /* 3340 */ 'h', 'l', 't', 9, 0,
  /* 3345 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 3352 */ 'c', 'n', 't', 9, 0,
  /* 3357 */ 'h', 'i', 'n', 't', 9, 0,
  /* 3363 */ 'n', 'o', 't', 9, 0,
  /* 3368 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 3375 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 3382 */ 'f', 'c', 'v', 't', 9, 0,
  /* 3388 */ 'e', 'x', 't', 9, 0,
  /* 3393 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 3401 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 3409 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 3417 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 3425 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 3433 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 3441 */ 'a', 'd', 'd', 'v', 9, 0,
  /* 3447 */ 'r', 'e', 'v', 9, 0,
  /* 3452 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 3458 */ 's', 'd', 'i', 'v', 9, 0,
  /* 3464 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 3470 */ 's', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 3478 */ 'u', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 3486 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', 9, 0,
  /* 3495 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', 9, 0,
  /* 3504 */ 'f', 'm', 'i', 'n', 'v', 9, 0,
  /* 3511 */ 's', 'm', 'i', 'n', 'v', 9, 0,
  /* 3518 */ 'u', 'm', 'i', 'n', 'v', 9, 0,
  /* 3525 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 3532 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 3538 */ 's', 'm', 'o', 'v', 9, 0,
  /* 3544 */ 'u', 'm', 'o', 'v', 9, 0,
  /* 3550 */ 'f', 'm', 'a', 'x', 'v', 9, 0,
  /* 3557 */ 's', 'm', 'a', 'x', 'v', 9, 0,
  /* 3564 */ 'u', 'm', 'a', 'x', 'v', 9, 0,
  /* 3571 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 3579 */ 's', 's', 'u', 'b', 'w', 9, 0,
  /* 3586 */ 'u', 's', 'u', 'b', 'w', 9, 0,
  /* 3593 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 3602 */ 's', 'a', 'd', 'd', 'w', 9, 0,
  /* 3609 */ 'u', 'a', 'd', 'd', 'w', 9, 0,
  /* 3616 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 3623 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 3630 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 3638 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 3646 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 3654 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 3660 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 3668 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 3676 */ 't', 'b', 'x', 9, 0,
  /* 3681 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 3690 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 3697 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 3704 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 3712 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 3720 */ 'c', 'b', 'z', 9, 0,
  /* 3725 */ 't', 'b', 'z', 9, 0,
  /* 3730 */ 'c', 'l', 'z', 9, 0,
  /* 3735 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 3741 */ 't', 'b', 'n', 'z', 9, 0,
  /* 3747 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 3755 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 3761 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 3775 */ 'b', '.', 0,
  /* 3778 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 3801 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 3823 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3836 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3843 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3853 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3868 */ 'd', 'r', 'p', 's', 0,
  /* 3873 */ 'e', 'r', 'e', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3844U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3837U,	// BUNDLE
    3854U,	// LIFETIME_START
    3824U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    3779U,	// PATCHABLE_FUNCTION_ENTER
    3802U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    7276U,	// ABSv16i8
    553921644U,	// ABSv1i64
    1074273388U,	// ABSv2i32
    1611406444U,	// ABSv2i64
    2148539500U,	// ABSv4i16
    2685672556U,	// ABSv4i32
    3222805612U,	// ABSv8i16
    3759938668U,	// ABSv8i8
    17050756U,	// ADCSWr
    17050756U,	// ADCSXr
    17048761U,	// ADCWr
    17048761U,	// ADCXr
    537401914U,	// ADDHNv2i64_v2i32
    571748634U,	// ADDHNv2i64_v4i32
    1074797114U,	// ADDHNv4i32_v4i16
    1108881690U,	// ADDHNv4i32_v8i16
    1644179738U,	// ADDHNv8i16_v16i8
    1612454458U,	// ADDHNv8i16_v8i8
    2147490519U,	// ADDPv16i8
    2684885719U,	// ADDPv2i32
    537664215U,	// ADDPv2i64
    1610885847U,	// ADDPv2i64p
    3222280919U,	// ADDPv4i16
    1075059415U,	// ADDPv4i32
    1612192471U,	// ADDPv8i16
    3759938263U,	// ADDPv8i8
    17050768U,	// ADDSWri
    0U,	// ADDSWrr
    17050768U,	// ADDSWrs
    17050768U,	// ADDSWrx
    17050768U,	// ADDSXri
    0U,	// ADDSXrr
    17050768U,	// ADDSXrs
    17050768U,	// ADDSXrx
    17050768U,	// ADDSXrx64
    273778U,	// ADDVv16i8v
    2147757426U,	// ADDVv4i16v
    2684628338U,	// ADDVv4i32v
    3221499250U,	// ADDVv8i16v
    3758370162U,	// ADDVv8i8v
    17048823U,	// ADDWri
    0U,	// ADDWrr
    17048823U,	// ADDWrs
    17048823U,	// ADDWrx
    17048823U,	// ADDXri
    0U,	// ADDXrr
    17048823U,	// ADDXrs
    17048823U,	// ADDXrx
    17048823U,	// ADDXrx64
    2147489015U,	// ADDv16i8
    17048823U,	// ADDv1i64
    2684884215U,	// ADDv2i32
    537662711U,	// ADDv2i64
    3222279415U,	// ADDv4i16
    1075057911U,	// ADDv4i32
    1612190967U,	// ADDv8i16
    3759936759U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    553921476U,	// ADR
    50604866U,	// ADRP
    33568068U,	// AESDrr
    33568126U,	// AESErr
    5315U,	// AESIMCrr
    5323U,	// AESMCrr
    17050774U,	// ANDSWri
    0U,	// ANDSWrr
    17050774U,	// ANDSWrs
    17050774U,	// ANDSXri
    0U,	// ANDSXrr
    17050774U,	// ANDSXrs
    17048895U,	// ANDWri
    0U,	// ANDWrr
    17048895U,	// ANDWrs
    17048895U,	// ANDXri
    0U,	// ANDXrr
    17048895U,	// ANDXrs
    2147489087U,	// ANDv16i8
    3759936831U,	// ANDv8i8
    17050642U,	// ASRVWr
    17050642U,	// ASRVXr
    17022U,	// B
    67381761U,	// BFMWri
    67381761U,	// BFMXri
    0U,	// BICSWrr
    17050762U,	// BICSWrs
    0U,	// BICSXrr
    17050762U,	// BICSXrs
    0U,	// BICWrr
    17048766U,	// BICWrs
    0U,	// BICXrr
    17048766U,	// BICXrs
    2147488958U,	// BICv16i8
    84423870U,	// BICv2i32
    84948158U,	// BICv4i16
    85210302U,	// BICv4i32
    85472446U,	// BICv8i16
    3759936702U,	// BICv8i8
    2147489174U,	// BIFv16i8
    3759936918U,	// BIFv8i8
    2181053704U,	// BITv16i8
    3793501448U,	// BITv8i8
    18605U,	// BL
    2108392U,	// BLR
    2108352U,	// BR
    22554U,	// BRK
    2181052835U,	// BSLv16i8
    3793500579U,	// BSLv8i8
    28352U,	// Bcc
    67400488U,	// CASALb
    67401864U,	// CASALd
    67401350U,	// CASALh
    67401864U,	// CASALs
    67400375U,	// CASAb
    67400273U,	// CASAd
    67401237U,	// CASAh
    67400273U,	// CASAs
    67400582U,	// CASLb
    67402141U,	// CASLd
    67401444U,	// CASLh
    67402141U,	// CASLs
    34919U,	// CASPALd
    39015U,	// CASPALs
    33306U,	// CASPAd
    37402U,	// CASPAs
    35200U,	// CASPLd
    39296U,	// CASPLs
    35656U,	// CASPd
    39752U,	// CASPs
    67400763U,	// CASb
    67402846U,	// CASd
    67401653U,	// CASh
    67402846U,	// CASs
    100937368U,	// CBNZW
    100937368U,	// CBNZX
    100937353U,	// CBZW
    100937353U,	// CBZX
    17050199U,	// CCMNWi
    17050199U,	// CCMNWr
    17050199U,	// CCMNXi
    17050199U,	// CCMNXr
    17050371U,	// CCMPWi
    17050371U,	// CCMPWr
    17050371U,	// CCMPXi
    17050371U,	// CCMPXr
    2109035U,	// CLREX
    553921698U,	// CLSWr
    553921698U,	// CLSXr
    7330U,	// CLSv16i8
    1074273442U,	// CLSv2i32
    2148539554U,	// CLSv4i16
    2685672610U,	// CLSv4i32
    3222805666U,	// CLSv8i16
    3759938722U,	// CLSv8i8
    553922195U,	// CLZWr
    553922195U,	// CLZXr
    7827U,	// CLZv16i8
    1074273939U,	// CLZv2i32
    2148540051U,	// CLZv4i16
    2685673107U,	// CLZv4i32
    3222806163U,	// CLZv8i16
    3759939219U,	// CLZv8i8
    2147490709U,	// CMEQv16i8
    536877973U,	// CMEQv16i8rz
    17050517U,	// CMEQv1i64
    1090792341U,	// CMEQv1i64rz
    2684885909U,	// CMEQv2i32
    1611144085U,	// CMEQv2i32rz
    537664405U,	// CMEQv2i64
    2148277141U,	// CMEQv2i64rz
    3222281109U,	// CMEQv4i16
    2685410197U,	// CMEQv4i16rz
    1075059605U,	// CMEQv4i32
    3222543253U,	// CMEQv4i32rz
    1612192661U,	// CMEQv8i16
    3759676309U,	// CMEQv8i16rz
    3759938453U,	// CMEQv8i8
    1842069U,	// CMEQv8i8rz
    2147489106U,	// CMGEv16i8
    536876370U,	// CMGEv16i8rz
    17048914U,	// CMGEv1i64
    1090790738U,	// CMGEv1i64rz
    2684884306U,	// CMGEv2i32
    1611142482U,	// CMGEv2i32rz
    537662802U,	// CMGEv2i64
    2148275538U,	// CMGEv2i64rz
    3222279506U,	// CMGEv4i16
    2685408594U,	// CMGEv4i16rz
    1075058002U,	// CMGEv4i32
    3222541650U,	// CMGEv4i32rz
    1612191058U,	// CMGEv8i16
    3759674706U,	// CMGEv8i16rz
    3759936850U,	// CMGEv8i8
    1840466U,	// CMGEv8i8rz
    2147491073U,	// CMGTv16i8
    536878337U,	// CMGTv16i8rz
    17050881U,	// CMGTv1i64
    1090792705U,	// CMGTv1i64rz
    2684886273U,	// CMGTv2i32
    1611144449U,	// CMGTv2i32rz
    537664769U,	// CMGTv2i64
    2148277505U,	// CMGTv2i64rz
    3222281473U,	// CMGTv4i16
    2685410561U,	// CMGTv4i16rz
    1075059969U,	// CMGTv4i32
    3222543617U,	// CMGTv4i32rz
    1612193025U,	// CMGTv8i16
    3759676673U,	// CMGTv8i16rz
    3759938817U,	// CMGTv8i8
    1842433U,	// CMGTv8i8rz
    2147489782U,	// CMHIv16i8
    17049590U,	// CMHIv1i64
    2684884982U,	// CMHIv2i32
    537663478U,	// CMHIv2i64
    3222280182U,	// CMHIv4i16
    1075058678U,	// CMHIv4i32
    1612191734U,	// CMHIv8i16
    3759937526U,	// CMHIv8i8
    2147490972U,	// CMHSv16i8
    17050780U,	// CMHSv1i64
    2684886172U,	// CMHSv2i32
    537664668U,	// CMHSv2i64
    3222281372U,	// CMHSv4i16
    1075059868U,	// CMHSv4i32
    1612192924U,	// CMHSv8i16
    3759938716U,	// CMHSv8i8
    536876377U,	// CMLEv16i8rz
    1090790745U,	// CMLEv1i64rz
    1611142489U,	// CMLEv2i32rz
    2148275545U,	// CMLEv2i64rz
    2685408601U,	// CMLEv4i16rz
    3222541657U,	// CMLEv4i32rz
    3759674713U,	// CMLEv8i16rz
    1840473U,	// CMLEv8i8rz
    536878355U,	// CMLTv16i8rz
    1090792723U,	// CMLTv1i64rz
    1611144467U,	// CMLTv2i32rz
    2148277523U,	// CMLTv2i64rz
    2685410579U,	// CMLTv4i16rz
    3222543635U,	// CMLTv4i32rz
    3759676691U,	// CMLTv8i16rz
    1842451U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    2147491120U,	// CMTSTv16i8
    17050928U,	// CMTSTv1i64
    2684886320U,	// CMTSTv2i32
    537664816U,	// CMTSTv2i64
    3222281520U,	// CMTSTv4i16
    1075060016U,	// CMTSTv4i32
    1612193072U,	// CMTSTv8i16
    3759938864U,	// CMTSTv8i8
    7449U,	// CNTv16i8
    3759938841U,	// CNTv8i8
    537144782U,	// CPYi16
    1074015694U,	// CPYi32
    1610886606U,	// CPYi64
    2147757518U,	// CPYi8
    17048185U,	// CRC32Brr
    17048283U,	// CRC32CBrr
    17049145U,	// CRC32CHrr
    17051146U,	// CRC32CWrr
    17051234U,	// CRC32CXrr
    17049028U,	// CRC32Hrr
    17051124U,	// CRC32Wrr
    17051199U,	// CRC32Xrr
    17049860U,	// CSELWr
    17049860U,	// CSELXr
    17048786U,	// CSINCWr
    17048786U,	// CSINCXr
    17051078U,	// CSINVWr
    17051078U,	// CSINVXr
    17049014U,	// CSNEGWr
    17049014U,	// CSNEGXr
    20524U,	// DCPS1
    20889U,	// DCPS2
    20938U,	// DCPS3
    41898U,	// DMB
    3869U,	// DRPS
    42049U,	// DSB
    553655131U,	// DUPv16i8gpr
    2147490651U,	// DUPv16i8lane
    554179419U,	// DUPv2i32gpr
    1074273115U,	// DUPv2i32lane
    554441563U,	// DUPv2i64gpr
    1611406171U,	// DUPv2i64lane
    554703707U,	// DUPv4i16gpr
    537926491U,	// DUPv4i16lane
    554965851U,	// DUPv4i32gpr
    1075059547U,	// DUPv4i32lane
    555227995U,	// DUPv8i16gpr
    538450779U,	// DUPv8i16lane
    555490139U,	// DUPv8i8gpr
    2149325659U,	// DUPv8i8lane
    0U,	// EONWrr
    17050205U,	// EONWrs
    0U,	// EONXrr
    17050205U,	// EONXrs
    17050627U,	// EORWri
    0U,	// EORWrr
    17050627U,	// EORWrs
    17050627U,	// EORXri
    0U,	// EORXrr
    17050627U,	// EORXrs
    2147490819U,	// EORv16i8
    3759938563U,	// EORv8i8
    3874U,	// ERET
    17050674U,	// EXTRWrri
    17050674U,	// EXTRXrri
    2147491133U,	// EXTv16i8
    3759938877U,	// EXTv8i8
    0U,	// F128CSEL
    17048803U,	// FABD16
    17048803U,	// FABD32
    17048803U,	// FABD64
    2684884195U,	// FABDv2f32
    537662691U,	// FABDv2f64
    3222279395U,	// FABDv4f16
    1075057891U,	// FABDv4f32
    1612190947U,	// FABDv8f16
    553921643U,	// FABSDr
    553921643U,	// FABSHr
    553921643U,	// FABSSr
    1074273387U,	// FABSv2f32
    1611406443U,	// FABSv2f64
    2148539499U,	// FABSv4f16
    2685672555U,	// FABSv4f32
    3222805611U,	// FABSv8f16
    17048906U,	// FACGE16
    17048906U,	// FACGE32
    17048906U,	// FACGE64
    2684884298U,	// FACGEv2f32
    537662794U,	// FACGEv2f64
    3222279498U,	// FACGEv4f16
    1075057994U,	// FACGEv4f32
    1612191050U,	// FACGEv8f16
    17050873U,	// FACGT16
    17050873U,	// FACGT32
    17050873U,	// FACGT64
    2684886265U,	// FACGTv2f32
    537664761U,	// FACGTv2f64
    3222281465U,	// FACGTv4f16
    1075059961U,	// FACGTv4f32
    1612193017U,	// FACGTv8f16
    17048828U,	// FADDDrr
    17048828U,	// FADDHrr
    2684885718U,	// FADDPv2f32
    537664214U,	// FADDPv2f64
    2684627670U,	// FADDPv2i16p
    1074014934U,	// FADDPv2i32p
    1610885846U,	// FADDPv2i64p
    3222280918U,	// FADDPv4f16
    1075059414U,	// FADDPv4f32
    1612192470U,	// FADDPv8f16
    17048828U,	// FADDSrr
    2684884220U,	// FADDv2f32
    537662716U,	// FADDv2f64
    3222279420U,	// FADDv4f16
    1075057916U,	// FADDv4f32
    1612190972U,	// FADDv8f16
    17050370U,	// FCCMPDrr
    17048943U,	// FCCMPEDrr
    17048943U,	// FCCMPEHrr
    17048943U,	// FCCMPESrr
    17050370U,	// FCCMPHrr
    17050370U,	// FCCMPSrr
    17050516U,	// FCMEQ16
    17050516U,	// FCMEQ32
    17050516U,	// FCMEQ64
    3238275988U,	// FCMEQv1i16rz
    3238275988U,	// FCMEQv1i32rz
    3238275988U,	// FCMEQv1i64rz
    2684885908U,	// FCMEQv2f32
    537664404U,	// FCMEQv2f64
    3758627732U,	// FCMEQv2i32rz
    793492U,	// FCMEQv2i64rz
    3222281108U,	// FCMEQv4f16
    1075059604U,	// FCMEQv4f32
    537926548U,	// FCMEQv4i16rz
    1075059604U,	// FCMEQv4i32rz
    1612192660U,	// FCMEQv8f16
    1612192660U,	// FCMEQv8i16rz
    17048913U,	// FCMGE16
    17048913U,	// FCMGE32
    17048913U,	// FCMGE64
    3238274385U,	// FCMGEv1i16rz
    3238274385U,	// FCMGEv1i32rz
    3238274385U,	// FCMGEv1i64rz
    2684884305U,	// FCMGEv2f32
    537662801U,	// FCMGEv2f64
    3758626129U,	// FCMGEv2i32rz
    791889U,	// FCMGEv2i64rz
    3222279505U,	// FCMGEv4f16
    1075058001U,	// FCMGEv4f32
    537924945U,	// FCMGEv4i16rz
    1075058001U,	// FCMGEv4i32rz
    1612191057U,	// FCMGEv8f16
    1612191057U,	// FCMGEv8i16rz
    17050880U,	// FCMGT16
    17050880U,	// FCMGT32
    17050880U,	// FCMGT64
    3238276352U,	// FCMGTv1i16rz
    3238276352U,	// FCMGTv1i32rz
    3238276352U,	// FCMGTv1i64rz
    2684886272U,	// FCMGTv2f32
    537664768U,	// FCMGTv2f64
    3758628096U,	// FCMGTv2i32rz
    793856U,	// FCMGTv2i64rz
    3222281472U,	// FCMGTv4f16
    1075059968U,	// FCMGTv4f32
    537926912U,	// FCMGTv4i16rz
    1075059968U,	// FCMGTv4i32rz
    1612193024U,	// FCMGTv8f16
    1612193024U,	// FCMGTv8i16rz
    3238274392U,	// FCMLEv1i16rz
    3238274392U,	// FCMLEv1i32rz
    3238274392U,	// FCMLEv1i64rz
    3758626136U,	// FCMLEv2i32rz
    791896U,	// FCMLEv2i64rz
    537924952U,	// FCMLEv4i16rz
    1075058008U,	// FCMLEv4i32rz
    1612191064U,	// FCMLEv8i16rz
    3238276370U,	// FCMLTv1i16rz
    3238276370U,	// FCMLTv1i32rz
    3238276370U,	// FCMLTv1i64rz
    3758628114U,	// FCMLTv2i32rz
    793874U,	// FCMLTv2i64rz
    537926930U,	// FCMLTv4i16rz
    1075059986U,	// FCMLTv4i32rz
    1612193042U,	// FCMLTv8i16rz
    2370313U,	// FCMPDri
    553921289U,	// FCMPDrr
    2368887U,	// FCMPEDri
    553919863U,	// FCMPEDrr
    2368887U,	// FCMPEHri
    553919863U,	// FCMPEHrr
    2368887U,	// FCMPESri
    553919863U,	// FCMPESrr
    2370313U,	// FCMPHri
    553921289U,	// FCMPHrr
    2370313U,	// FCMPSri
    553921289U,	// FCMPSrr
    17049859U,	// FCSELDrrr
    17049859U,	// FCSELHrrr
    17049859U,	// FCSELSrrr
    553921635U,	// FCVTASUWDr
    553921635U,	// FCVTASUWHr
    553921635U,	// FCVTASUWSr
    553921635U,	// FCVTASUXDr
    553921635U,	// FCVTASUXHr
    553921635U,	// FCVTASUXSr
    553921635U,	// FCVTASv1f16
    553921635U,	// FCVTASv1i32
    553921635U,	// FCVTASv1i64
    1074273379U,	// FCVTASv2f32
    1611406435U,	// FCVTASv2f64
    2148539491U,	// FCVTASv4f16
    2685672547U,	// FCVTASv4f32
    3222805603U,	// FCVTASv8f16
    553921858U,	// FCVTAUUWDr
    553921858U,	// FCVTAUUWHr
    553921858U,	// FCVTAUUWSr
    553921858U,	// FCVTAUUXDr
    553921858U,	// FCVTAUUXHr
    553921858U,	// FCVTAUUXSr
    553921858U,	// FCVTAUv1f16
    553921858U,	// FCVTAUv1i32
    553921858U,	// FCVTAUv1i64
    1074273602U,	// FCVTAUv2f32
    1611406658U,	// FCVTAUv2f64
    2148539714U,	// FCVTAUv4f16
    2685672770U,	// FCVTAUv4f32
    3222805826U,	// FCVTAUv8f16
    553921847U,	// FCVTDHr
    553921847U,	// FCVTDSr
    553921847U,	// FCVTHDr
    553921847U,	// FCVTHSr
    1074534861U,	// FCVTLv2i32
    2148800973U,	// FCVTLv4i16
    2685145352U,	// FCVTLv4i32
    3222540552U,	// FCVTLv8i16
    553921709U,	// FCVTMSUWDr
    553921709U,	// FCVTMSUWHr
    553921709U,	// FCVTMSUWSr
    553921709U,	// FCVTMSUXDr
    553921709U,	// FCVTMSUXHr
    553921709U,	// FCVTMSUXSr
    553921709U,	// FCVTMSv1f16
    553921709U,	// FCVTMSv1i32
    553921709U,	// FCVTMSv1i64
    1074273453U,	// FCVTMSv2f32
    1611406509U,	// FCVTMSv2f64
    2148539565U,	// FCVTMSv4f16
    2685672621U,	// FCVTMSv4f32
    3222805677U,	// FCVTMSv8f16
    553921874U,	// FCVTMUUWDr
    553921874U,	// FCVTMUUWHr
    553921874U,	// FCVTMUUWSr
    553921874U,	// FCVTMUUXDr
    553921874U,	// FCVTMUUXHr
    553921874U,	// FCVTMUUXSr
    553921874U,	// FCVTMUv1f16
    553921874U,	// FCVTMUv1i32
    553921874U,	// FCVTMUv1i64
    1074273618U,	// FCVTMUv2f32
    1611406674U,	// FCVTMUv2f64
    2148539730U,	// FCVTMUv4f16
    2685672786U,	// FCVTMUv4f32
    3222805842U,	// FCVTMUv8f16
    553921722U,	// FCVTNSUWDr
    553921722U,	// FCVTNSUWHr
    553921722U,	// FCVTNSUWSr
    553921722U,	// FCVTNSUXDr
    553921722U,	// FCVTNSUXHr
    553921722U,	// FCVTNSUXSr
    553921722U,	// FCVTNSv1f16
    553921722U,	// FCVTNSv1i32
    553921722U,	// FCVTNSv1i64
    1074273466U,	// FCVTNSv2f32
    1611406522U,	// FCVTNSv2f64
    2148539578U,	// FCVTNSv4f16
    2685672634U,	// FCVTNSv4f32
    3222805690U,	// FCVTNSv8f16
    553921882U,	// FCVTNUUWDr
    553921882U,	// FCVTNUUWHr
    553921882U,	// FCVTNUUWSr
    553921882U,	// FCVTNUUXDr
    553921882U,	// FCVTNUUXHr
    553921882U,	// FCVTNUUXSr
    553921882U,	// FCVTNUv1f16
    553921882U,	// FCVTNUv1i32
    553921882U,	// FCVTNUv1i64
    1074273626U,	// FCVTNUv2f32
    1611406682U,	// FCVTNUv2f64
    2148539738U,	// FCVTNUv4f16
    2685672794U,	// FCVTNUv4f32
    3222805850U,	// FCVTNUv8f16
    1611143825U,	// FCVTNv2i32
    2685409937U,	// FCVTNv4i16
    1645490510U,	// FCVTNv4i32
    2719494478U,	// FCVTNv8i16
    553921738U,	// FCVTPSUWDr
    553921738U,	// FCVTPSUWHr
    553921738U,	// FCVTPSUWSr
    553921738U,	// FCVTPSUXDr
    553921738U,	// FCVTPSUXHr
    553921738U,	// FCVTPSUXSr
    553921738U,	// FCVTPSv1f16
    553921738U,	// FCVTPSv1i32
    553921738U,	// FCVTPSv1i64
    1074273482U,	// FCVTPSv2f32
    1611406538U,	// FCVTPSv2f64
    2148539594U,	// FCVTPSv4f16
    2685672650U,	// FCVTPSv4f32
    3222805706U,	// FCVTPSv8f16
    553921890U,	// FCVTPUUWDr
    553921890U,	// FCVTPUUWHr
    553921890U,	// FCVTPUUWSr
    553921890U,	// FCVTPUUXDr
    553921890U,	// FCVTPUUXHr
    553921890U,	// FCVTPUUXSr
    553921890U,	// FCVTPUv1f16
    553921890U,	// FCVTPUv1i32
    553921890U,	// FCVTPUv1i64
    1074273634U,	// FCVTPUv2f32
    1611406690U,	// FCVTPUv2f64
    2148539746U,	// FCVTPUv4f16
    2685672802U,	// FCVTPUv4f32
    3222805858U,	// FCVTPUv8f16
    553921847U,	// FCVTSDr
    553921847U,	// FCVTSHr
    553921223U,	// FCVTXNv1i64
    1611143879U,	// FCVTXNv2f32
    1645490564U,	// FCVTXNv4f32
    17050853U,	// FCVTZSSWDri
    17050853U,	// FCVTZSSWHri
    17050853U,	// FCVTZSSWSri
    17050853U,	// FCVTZSSXDri
    17050853U,	// FCVTZSSXHri
    17050853U,	// FCVTZSSXSri
    553921765U,	// FCVTZSUWDr
    553921765U,	// FCVTZSUWHr
    553921765U,	// FCVTZSUWSr
    553921765U,	// FCVTZSUXDr
    553921765U,	// FCVTZSUXHr
    553921765U,	// FCVTZSUXSr
    17050853U,	// FCVTZSd
    17050853U,	// FCVTZSh
    17050853U,	// FCVTZSs
    553921765U,	// FCVTZSv1f16
    553921765U,	// FCVTZSv1i32
    553921765U,	// FCVTZSv1i64
    1074273509U,	// FCVTZSv2f32
    1611406565U,	// FCVTZSv2f64
    2684886245U,	// FCVTZSv2i32_shift
    537664741U,	// FCVTZSv2i64_shift
    2148539621U,	// FCVTZSv4f16
    2685672677U,	// FCVTZSv4f32
    3222281445U,	// FCVTZSv4i16_shift
    1075059941U,	// FCVTZSv4i32_shift
    3222805733U,	// FCVTZSv8f16
    1612192997U,	// FCVTZSv8i16_shift
    17050986U,	// FCVTZUSWDri
    17050986U,	// FCVTZUSWHri
    17050986U,	// FCVTZUSWSri
    17050986U,	// FCVTZUSXDri
    17050986U,	// FCVTZUSXHri
    17050986U,	// FCVTZUSXSri
    553921898U,	// FCVTZUUWDr
    553921898U,	// FCVTZUUWHr
    553921898U,	// FCVTZUUWSr
    553921898U,	// FCVTZUUXDr
    553921898U,	// FCVTZUUXHr
    553921898U,	// FCVTZUUXSr
    17050986U,	// FCVTZUd
    17050986U,	// FCVTZUh
    17050986U,	// FCVTZUs
    553921898U,	// FCVTZUv1f16
    553921898U,	// FCVTZUv1i32
    553921898U,	// FCVTZUv1i64
    1074273642U,	// FCVTZUv2f32
    1611406698U,	// FCVTZUv2f64
    2684886378U,	// FCVTZUv2i32_shift
    537664874U,	// FCVTZUv2i64_shift
    2148539754U,	// FCVTZUv4f16
    2685672810U,	// FCVTZUv4f32
    3222281578U,	// FCVTZUv4i16_shift
    1075060074U,	// FCVTZUv4i32_shift
    3222805866U,	// FCVTZUv8f16
    1612193130U,	// FCVTZUv8i16_shift
    17051005U,	// FDIVDrr
    17051005U,	// FDIVHrr
    17051005U,	// FDIVSrr
    2684886397U,	// FDIVv2f32
    537664893U,	// FDIVv2f64
    3222281597U,	// FDIVv4f16
    1075060093U,	// FDIVv4f32
    1612193149U,	// FDIVv8f16
    17048864U,	// FMADDDrrr
    17048864U,	// FMADDHrrr
    17048864U,	// FMADDSrrr
    17051207U,	// FMAXDrr
    17051207U,	// FMAXHrr
    17050138U,	// FMAXNMDrr
    17050138U,	// FMAXNMHrr
    2684885784U,	// FMAXNMPv2f32
    537664280U,	// FMAXNMPv2f64
    2684627736U,	// FMAXNMPv2i16p
    1074015000U,	// FMAXNMPv2i32p
    1610885912U,	// FMAXNMPv2i64p
    3222280984U,	// FMAXNMPv4f16
    1075059480U,	// FMAXNMPv4f32
    1612192536U,	// FMAXNMPv8f16
    17050138U,	// FMAXNMSrr
    2147757480U,	// FMAXNMVv4i16v
    2684628392U,	// FMAXNMVv4i32v
    3221499304U,	// FMAXNMVv8i16v
    2684885530U,	// FMAXNMv2f32
    537664026U,	// FMAXNMv2f64
    3222280730U,	// FMAXNMv4f16
    1075059226U,	// FMAXNMv4f32
    1612192282U,	// FMAXNMv8f16
    2684885868U,	// FMAXPv2f32
    537664364U,	// FMAXPv2f64
    2684627820U,	// FMAXPv2i16p
    1074015084U,	// FMAXPv2i32p
    1610885996U,	// FMAXPv2i64p
    3222281068U,	// FMAXPv4f16
    1075059564U,	// FMAXPv4f32
    1612192620U,	// FMAXPv8f16
    17051207U,	// FMAXSrr
    2147757535U,	// FMAXVv4i16v
    2684628447U,	// FMAXVv4i32v
    3221499359U,	// FMAXVv8i16v
    2684886599U,	// FMAXv2f32
    537665095U,	// FMAXv2f64
    3222281799U,	// FMAXv4f16
    1075060295U,	// FMAXv4f32
    1612193351U,	// FMAXv8f16
    17050177U,	// FMINDrr
    17050177U,	// FMINHrr
    17050130U,	// FMINNMDrr
    17050130U,	// FMINNMHrr
    2684885775U,	// FMINNMPv2f32
    537664271U,	// FMINNMPv2f64
    2684627727U,	// FMINNMPv2i16p
    1074014991U,	// FMINNMPv2i32p
    1610885903U,	// FMINNMPv2i64p
    3222280975U,	// FMINNMPv4f16
    1075059471U,	// FMINNMPv4f32
    1612192527U,	// FMINNMPv8f16
    17050130U,	// FMINNMSrr
    2147757471U,	// FMINNMVv4i16v
    2684628383U,	// FMINNMVv4i32v
    3221499295U,	// FMINNMVv8i16v
    2684885522U,	// FMINNMv2f32
    537664018U,	// FMINNMv2f64
    3222280722U,	// FMINNMv4f16
    1075059218U,	// FMINNMv4f32
    1612192274U,	// FMINNMv8f16
    2684885799U,	// FMINPv2f32
    537664295U,	// FMINPv2f64
    2684627751U,	// FMINPv2i16p
    1074015015U,	// FMINPv2i32p
    1610885927U,	// FMINPv2i64p
    3222280999U,	// FMINPv4f16
    1075059495U,	// FMINPv4f32
    1612192551U,	// FMINPv8f16
    17050177U,	// FMINSrr
    2147757489U,	// FMINVv4i16v
    2684628401U,	// FMINVv4i32v
    3221499313U,	// FMINVv8i16v
    2684885569U,	// FMINv2f32
    537664065U,	// FMINv2f64
    3222280769U,	// FMINv4f16
    1075059265U,	// FMINv4f32
    1612192321U,	// FMINv8f16
    67400194U,	// FMLAv1i16_indexed
    67400194U,	// FMLAv1i32_indexed
    67400194U,	// FMLAv1i64_indexed
    2718446082U,	// FMLAv2f32
    571224578U,	// FMLAv2f64
    2718446082U,	// FMLAv2i32_indexed
    571224578U,	// FMLAv2i64_indexed
    3255841282U,	// FMLAv4f16
    1108619778U,	// FMLAv4f32
    3255841282U,	// FMLAv4i16_indexed
    1108619778U,	// FMLAv4i32_indexed
    1645752834U,	// FMLAv8f16
    1645752834U,	// FMLAv8i16_indexed
    67402919U,	// FMLSv1i16_indexed
    67402919U,	// FMLSv1i32_indexed
    67402919U,	// FMLSv1i64_indexed
    2718448807U,	// FMLSv2f32
    571227303U,	// FMLSv2f64
    2718448807U,	// FMLSv2i32_indexed
    571227303U,	// FMLSv2i64_indexed
    3255844007U,	// FMLSv4f16
    1108622503U,	// FMLSv4f32
    3255844007U,	// FMLSv4i16_indexed
    1108622503U,	// FMLSv4i32_indexed
    1645755559U,	// FMLSv8f16
    1645755559U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    1610886605U,	// FMOVDXHighr
    553921997U,	// FMOVDXr
    117714381U,	// FMOVDi
    553921997U,	// FMOVDr
    553921997U,	// FMOVHWr
    553921997U,	// FMOVHXr
    117714381U,	// FMOVHi
    553921997U,	// FMOVHr
    0U,	// FMOVS0
    553921997U,	// FMOVSWr
    117714381U,	// FMOVSi
    553921997U,	// FMOVSr
    553921997U,	// FMOVWHr
    553921997U,	// FMOVWSr
    556277197U,	// FMOVXDHighr
    553921997U,	// FMOVXDr
    553921997U,	// FMOVXHr
    117972429U,	// FMOVv2f32_ns
    118234573U,	// FMOVv2f64_ns
    118496717U,	// FMOVv4f16_ns
    118758861U,	// FMOVv4f32_ns
    119021005U,	// FMOVv8f16_ns
    17048702U,	// FMSUBDrrr
    17048702U,	// FMSUBHrrr
    17048702U,	// FMSUBSrrr
    17050068U,	// FMULDrr
    17050068U,	// FMULHrr
    17050068U,	// FMULSrr
    17051250U,	// FMULX16
    17051250U,	// FMULX32
    17051250U,	// FMULX64
    17051250U,	// FMULXv1i16_indexed
    17051250U,	// FMULXv1i32_indexed
    17051250U,	// FMULXv1i64_indexed
    2684886642U,	// FMULXv2f32
    537665138U,	// FMULXv2f64
    2684886642U,	// FMULXv2i32_indexed
    537665138U,	// FMULXv2i64_indexed
    3222281842U,	// FMULXv4f16
    1075060338U,	// FMULXv4f32
    3222281842U,	// FMULXv4i16_indexed
    1075060338U,	// FMULXv4i32_indexed
    1612193394U,	// FMULXv8f16
    1612193394U,	// FMULXv8i16_indexed
    17050068U,	// FMULv1i16_indexed
    17050068U,	// FMULv1i32_indexed
    17050068U,	// FMULv1i64_indexed
    2684885460U,	// FMULv2f32
    537663956U,	// FMULv2f64
    2684885460U,	// FMULv2i32_indexed
    537663956U,	// FMULv2i64_indexed
    3222280660U,	// FMULv4f16
    1075059156U,	// FMULv4f32
    3222280660U,	// FMULv4i16_indexed
    1075059156U,	// FMULv4i32_indexed
    1612192212U,	// FMULv8f16
    1612192212U,	// FMULv8i16_indexed
    553919913U,	// FNEGDr
    553919913U,	// FNEGHr
    553919913U,	// FNEGSr
    1074271657U,	// FNEGv2f32
    1611404713U,	// FNEGv2f64
    2148537769U,	// FNEGv4f16
    2685670825U,	// FNEGv4f32
    3222803881U,	// FNEGv8f16
    17048871U,	// FNMADDDrrr
    17048871U,	// FNMADDHrrr
    17048871U,	// FNMADDSrrr
    17048709U,	// FNMSUBDrrr
    17048709U,	// FNMSUBHrrr
    17048709U,	// FNMSUBSrrr
    17050074U,	// FNMULDrr
    17050074U,	// FNMULHrr
    17050074U,	// FNMULSrr
    553919839U,	// FRECPEv1f16
    553919839U,	// FRECPEv1i32
    553919839U,	// FRECPEv1i64
    1074271583U,	// FRECPEv2f32
    1611404639U,	// FRECPEv2f64
    2148537695U,	// FRECPEv4f16
    2685670751U,	// FRECPEv4f32
    3222803807U,	// FRECPEv8f16
    17050818U,	// FRECPS16
    17050818U,	// FRECPS32
    17050818U,	// FRECPS64
    2684886210U,	// FRECPSv2f32
    537664706U,	// FRECPSv2f64
    3222281410U,	// FRECPSv4f16
    1075059906U,	// FRECPSv4f32
    1612192962U,	// FRECPSv8f16
    553922169U,	// FRECPXv1f16
    553922169U,	// FRECPXv1i32
    553922169U,	// FRECPXv1i64
    553919071U,	// FRINTADr
    553919071U,	// FRINTAHr
    553919071U,	// FRINTASr
    1074270815U,	// FRINTAv2f32
    1611403871U,	// FRINTAv2f64
    2148536927U,	// FRINTAv4f16
    2685669983U,	// FRINTAv4f32
    3222803039U,	// FRINTAv8f16
    553920524U,	// FRINTIDr
    553920524U,	// FRINTIHr
    553920524U,	// FRINTISr
    1074272268U,	// FRINTIv2f32
    1611405324U,	// FRINTIv2f64
    2148538380U,	// FRINTIv4f16
    2685671436U,	// FRINTIv4f32
    3222804492U,	// FRINTIv8f16
    553921058U,	// FRINTMDr
    553921058U,	// FRINTMHr
    553921058U,	// FRINTMSr
    1074272802U,	// FRINTMv2f32
    1611405858U,	// FRINTMv2f64
    2148538914U,	// FRINTMv4f16
    2685671970U,	// FRINTMv4f32
    3222805026U,	// FRINTMv8f16
    553921161U,	// FRINTNDr
    553921161U,	// FRINTNHr
    553921161U,	// FRINTNSr
    1074272905U,	// FRINTNv2f32
    1611405961U,	// FRINTNv2f64
    2148539017U,	// FRINTNv4f16
    2685672073U,	// FRINTNv4f32
    3222805129U,	// FRINTNv8f16
    553921358U,	// FRINTPDr
    553921358U,	// FRINTPHr
    553921358U,	// FRINTPSr
    1074273102U,	// FRINTPv2f32
    1611406158U,	// FRINTPv2f64
    2148539214U,	// FRINTPv4f16
    2685672270U,	// FRINTPv4f32
    3222805326U,	// FRINTPv8f16
    553922177U,	// FRINTXDr
    553922177U,	// FRINTXHr
    553922177U,	// FRINTXSr
    1074273921U,	// FRINTXv2f32
    1611406977U,	// FRINTXv2f64
    2148540033U,	// FRINTXv4f16
    2685673089U,	// FRINTXv4f32
    3222806145U,	// FRINTXv8f16
    553922212U,	// FRINTZDr
    553922212U,	// FRINTZHr
    553922212U,	// FRINTZSr
    1074273956U,	// FRINTZv2f32
    1611407012U,	// FRINTZv2f64
    2148540068U,	// FRINTZv4f16
    2685673124U,	// FRINTZv4f32
    3222806180U,	// FRINTZv8f16
    553919876U,	// FRSQRTEv1f16
    553919876U,	// FRSQRTEv1i32
    553919876U,	// FRSQRTEv1i64
    1074271620U,	// FRSQRTEv2f32
    1611404676U,	// FRSQRTEv2f64
    2148537732U,	// FRSQRTEv4f16
    2685670788U,	// FRSQRTEv4f32
    3222803844U,	// FRSQRTEv8f16
    17050839U,	// FRSQRTS16
    17050839U,	// FRSQRTS32
    17050839U,	// FRSQRTS64
    2684886231U,	// FRSQRTSv2f32
    537664727U,	// FRSQRTSv2f64
    3222281431U,	// FRSQRTSv4f16
    1075059927U,	// FRSQRTSv4f32
    1612192983U,	// FRSQRTSv8f16
    553921833U,	// FSQRTDr
    553921833U,	// FSQRTHr
    553921833U,	// FSQRTSr
    1074273577U,	// FSQRTv2f32
    1611406633U,	// FSQRTv2f64
    2148539689U,	// FSQRTv4f16
    2685672745U,	// FSQRTv4f32
    3222805801U,	// FSQRTv8f16
    17048682U,	// FSUBDrr
    17048682U,	// FSUBHrr
    17048682U,	// FSUBSrr
    2684884074U,	// FSUBv2f32
    537662570U,	// FSUBv2f64
    3222279274U,	// FSUBv4f16
    1075057770U,	// FSUBv4f32
    1612190826U,	// FSUBv8f16
    48414U,	// HINT
    23821U,	// HLT
    21721U,	// HVC
    137116853U,	// INSvi16gpr
    690764981U,	// INSvi16lane
    137378997U,	// INSvi32gpr
    1227898037U,	// INSvi32lane
    136854709U,	// INSvi64gpr
    1764244661U,	// INSvi64lane
    137641141U,	// INSvi8gpr
    2301902005U,	// INSvi8lane
    42054U,	// ISB
    49173U,	// LD1Fourv16b
    3723285U,	// LD1Fourv16b_POST
    57365U,	// LD1Fourv1d
    3993621U,	// LD1Fourv1d_POST
    65557U,	// LD1Fourv2d
    3739669U,	// LD1Fourv2d_POST
    73749U,	// LD1Fourv2s
    4010005U,	// LD1Fourv2s_POST
    81941U,	// LD1Fourv4h
    4018197U,	// LD1Fourv4h_POST
    90133U,	// LD1Fourv4s
    3764245U,	// LD1Fourv4s_POST
    98325U,	// LD1Fourv8b
    4034581U,	// LD1Fourv8b_POST
    106517U,	// LD1Fourv8h
    3780629U,	// LD1Fourv8h_POST
    49173U,	// LD1Onev16b
    4247573U,	// LD1Onev16b_POST
    57365U,	// LD1Onev1d
    4517909U,	// LD1Onev1d_POST
    65557U,	// LD1Onev2d
    4263957U,	// LD1Onev2d_POST
    73749U,	// LD1Onev2s
    4534293U,	// LD1Onev2s_POST
    81941U,	// LD1Onev4h
    4542485U,	// LD1Onev4h_POST
    90133U,	// LD1Onev4s
    4288533U,	// LD1Onev4s_POST
    98325U,	// LD1Onev8b
    4558869U,	// LD1Onev8b_POST
    106517U,	// LD1Onev8h
    4304917U,	// LD1Onev8h_POST
    52123U,	// LD1Rv16b
    4774811U,	// LD1Rv16b_POST
    60315U,	// LD1Rv1d
    4520859U,	// LD1Rv1d_POST
    68507U,	// LD1Rv2d
    4529051U,	// LD1Rv2d_POST
    76699U,	// LD1Rv2s
    5061531U,	// LD1Rv2s_POST
    84891U,	// LD1Rv4h
    5331867U,	// LD1Rv4h_POST
    93083U,	// LD1Rv4s
    5077915U,	// LD1Rv4s_POST
    101275U,	// LD1Rv8b
    4823963U,	// LD1Rv8b_POST
    109467U,	// LD1Rv8h
    5356443U,	// LD1Rv8h_POST
    49173U,	// LD1Threev16b
    5558293U,	// LD1Threev16b_POST
    57365U,	// LD1Threev1d
    5828629U,	// LD1Threev1d_POST
    65557U,	// LD1Threev2d
    5574677U,	// LD1Threev2d_POST
    73749U,	// LD1Threev2s
    5845013U,	// LD1Threev2s_POST
    81941U,	// LD1Threev4h
    5853205U,	// LD1Threev4h_POST
    90133U,	// LD1Threev4s
    5599253U,	// LD1Threev4s_POST
    98325U,	// LD1Threev8b
    5869589U,	// LD1Threev8b_POST
    106517U,	// LD1Threev8h
    5615637U,	// LD1Threev8h_POST
    49173U,	// LD1Twov16b
    3985429U,	// LD1Twov16b_POST
    57365U,	// LD1Twov1d
    4255765U,	// LD1Twov1d_POST
    65557U,	// LD1Twov2d
    4001813U,	// LD1Twov2d_POST
    73749U,	// LD1Twov2s
    4272149U,	// LD1Twov2s_POST
    81941U,	// LD1Twov4h
    4280341U,	// LD1Twov4h_POST
    90133U,	// LD1Twov4s
    4026389U,	// LD1Twov4s_POST
    98325U,	// LD1Twov8b
    4296725U,	// LD1Twov8b_POST
    106517U,	// LD1Twov8h
    4042773U,	// LD1Twov8h_POST
    6144021U,	// LD1i16
    6410261U,	// LD1i16_POST
    6152213U,	// LD1i32
    6680597U,	// LD1i32_POST
    6160405U,	// LD1i64
    6950933U,	// LD1i64_POST
    6168597U,	// LD1i8
    7221269U,	// LD1i8_POST
    52129U,	// LD2Rv16b
    5299105U,	// LD2Rv16b_POST
    60321U,	// LD2Rv1d
    4258721U,	// LD2Rv1d_POST
    68513U,	// LD2Rv2d
    4266913U,	// LD2Rv2d_POST
    76705U,	// LD2Rv2s
    4537249U,	// LD2Rv2s_POST
    84897U,	// LD2Rv4h
    5069729U,	// LD2Rv4h_POST
    93089U,	// LD2Rv4s
    4553633U,	// LD2Rv4s_POST
    101281U,	// LD2Rv8b
    5348257U,	// LD2Rv8b_POST
    109473U,	// LD2Rv8h
    5094305U,	// LD2Rv8h_POST
    49235U,	// LD2Twov16b
    3985491U,	// LD2Twov16b_POST
    65619U,	// LD2Twov2d
    4001875U,	// LD2Twov2d_POST
    73811U,	// LD2Twov2s
    4272211U,	// LD2Twov2s_POST
    82003U,	// LD2Twov4h
    4280403U,	// LD2Twov4h_POST
    90195U,	// LD2Twov4s
    4026451U,	// LD2Twov4s_POST
    98387U,	// LD2Twov8b
    4296787U,	// LD2Twov8b_POST
    106579U,	// LD2Twov8h
    4042835U,	// LD2Twov8h_POST
    6144083U,	// LD2i16
    6672467U,	// LD2i16_POST
    6152275U,	// LD2i32
    6942803U,	// LD2i32_POST
    6160467U,	// LD2i64
    7475283U,	// LD2i64_POST
    6168659U,	// LD2i8
    6434899U,	// LD2i8_POST
    52135U,	// LD3Rv16b
    7658407U,	// LD3Rv16b_POST
    60327U,	// LD3Rv1d
    5831591U,	// LD3Rv1d_POST
    68519U,	// LD3Rv2d
    5839783U,	// LD3Rv2d_POST
    76711U,	// LD3Rv2s
    7945127U,	// LD3Rv2s_POST
    84903U,	// LD3Rv4h
    8215463U,	// LD3Rv4h_POST
    93095U,	// LD3Rv4s
    7961511U,	// LD3Rv4s_POST
    101287U,	// LD3Rv8b
    7707559U,	// LD3Rv8b_POST
    109479U,	// LD3Rv8h
    8240039U,	// LD3Rv8h_POST
    49605U,	// LD3Threev16b
    5558725U,	// LD3Threev16b_POST
    65989U,	// LD3Threev2d
    5575109U,	// LD3Threev2d_POST
    74181U,	// LD3Threev2s
    5845445U,	// LD3Threev2s_POST
    82373U,	// LD3Threev4h
    5853637U,	// LD3Threev4h_POST
    90565U,	// LD3Threev4s
    5599685U,	// LD3Threev4s_POST
    98757U,	// LD3Threev8b
    5870021U,	// LD3Threev8b_POST
    106949U,	// LD3Threev8h
    5616069U,	// LD3Threev8h_POST
    6144453U,	// LD3i16
    8507845U,	// LD3i16_POST
    6152645U,	// LD3i32
    8778181U,	// LD3i32_POST
    6160837U,	// LD3i64
    9048517U,	// LD3i64_POST
    6169029U,	// LD3i8
    9318853U,	// LD3i8_POST
    49629U,	// LD4Fourv16b
    3723741U,	// LD4Fourv16b_POST
    66013U,	// LD4Fourv2d
    3740125U,	// LD4Fourv2d_POST
    74205U,	// LD4Fourv2s
    4010461U,	// LD4Fourv2s_POST
    82397U,	// LD4Fourv4h
    4018653U,	// LD4Fourv4h_POST
    90589U,	// LD4Fourv4s
    3764701U,	// LD4Fourv4s_POST
    98781U,	// LD4Fourv8b
    4035037U,	// LD4Fourv8b_POST
    106973U,	// LD4Fourv8h
    3781085U,	// LD4Fourv8h_POST
    52141U,	// LD4Rv16b
    5036973U,	// LD4Rv16b_POST
    60333U,	// LD4Rv1d
    3996589U,	// LD4Rv1d_POST
    68525U,	// LD4Rv2d
    4004781U,	// LD4Rv2d_POST
    76717U,	// LD4Rv2s
    4275117U,	// LD4Rv2s_POST
    84909U,	// LD4Rv4h
    4545453U,	// LD4Rv4h_POST
    93101U,	// LD4Rv4s
    4291501U,	// LD4Rv4s_POST
    101293U,	// LD4Rv8b
    5086125U,	// LD4Rv8b_POST
    109485U,	// LD4Rv8h
    4570029U,	// LD4Rv8h_POST
    6144477U,	// LD4i16
    6935005U,	// LD4i16_POST
    6152669U,	// LD4i32
    7467485U,	// LD4i32_POST
    6160861U,	// LD4i64
    9572829U,	// LD4i64_POST
    6169053U,	// LD4i8
    6697437U,	// LD4i8_POST
    168063724U,	// LDADDALb
    168065075U,	// LDADDALd
    168064586U,	// LDADDALh
    168065075U,	// LDADDALs
    168063617U,	// LDADDAb
    168063482U,	// LDADDAd
    168064469U,	// LDADDAh
    168063482U,	// LDADDAs
    168063824U,	// LDADDLb
    168065245U,	// LDADDLd
    168064686U,	// LDADDLh
    168065245U,	// LDADDLs
    168063716U,	// LDADDb
    168064245U,	// LDADDd
    168064578U,	// LDADDh
    168064245U,	// LDADDs
    2173969351U,	// LDARB
    2173970241U,	// LDARH
    2173971379U,	// LDARW
    2173971379U,	// LDARX
    17050469U,	// LDAXPW
    17050469U,	// LDAXPX
    2173969437U,	// LDAXRB
    2173970327U,	// LDAXRH
    2173971524U,	// LDAXRW
    2173971524U,	// LDAXRX
    168063764U,	// LDCLRALb
    168065142U,	// LDCLRALd
    168064626U,	// LDCLRALh
    168065142U,	// LDCLRALs
    168063653U,	// LDCLRAb
    168063527U,	// LDCLRAd
    168064515U,	// LDCLRAh
    168063527U,	// LDCLRAs
    168063860U,	// LDCLRLb
    168065421U,	// LDCLRLd
    168064722U,	// LDCLRLh
    168065421U,	// LDCLRLs
    168063964U,	// LDCLRb
    168066029U,	// LDCLRd
    168064854U,	// LDCLRh
    168066029U,	// LDCLRs
    168063774U,	// LDEORALb
    168065151U,	// LDEORALd
    168064636U,	// LDEORALh
    168065151U,	// LDEORALs
    168063662U,	// LDEORAb
    168063535U,	// LDEORAd
    168064524U,	// LDEORAh
    168063535U,	// LDEORAs
    168063869U,	// LDEORLb
    168065429U,	// LDEORLd
    168064731U,	// LDEORLh
    168065429U,	// LDEORLs
    168063987U,	// LDEORb
    168066049U,	// LDEORd
    168064877U,	// LDEORh
    168066049U,	// LDEORs
    2173969358U,	// LDLARB
    2173970248U,	// LDLARH
    2173971385U,	// LDLARW
    2173971385U,	// LDLARX
    17050401U,	// LDNPDi
    17050401U,	// LDNPQi
    17050401U,	// LDNPSi
    17050401U,	// LDNPWi
    17050401U,	// LDNPXi
    17050333U,	// LDPDi
    67402461U,	// LDPDpost
    67402461U,	// LDPDpre
    17050333U,	// LDPQi
    67402461U,	// LDPQpost
    67402461U,	// LDPQpre
    17051169U,	// LDPSWi
    67403297U,	// LDPSWpost
    67403297U,	// LDPSWpre
    17050333U,	// LDPSi
    67402461U,	// LDPSpost
    67402461U,	// LDPSpre
    17050333U,	// LDPWi
    67402461U,	// LDPWpost
    67402461U,	// LDPWpre
    17050333U,	// LDPXi
    67402461U,	// LDPXpost
    67402461U,	// LDPXpre
    2761192406U,	// LDRBBpost
    76837846U,	// LDRBBpre
    26485718U,	// LDRBBroW
    26485718U,	// LDRBBroX
    26485718U,	// LDRBBui
    2761194441U,	// LDRBpost
    76839881U,	// LDRBpre
    26487753U,	// LDRBroW
    26487753U,	// LDRBroX
    26487753U,	// LDRBui
    100936649U,	// LDRDl
    2761194441U,	// LDRDpost
    76839881U,	// LDRDpre
    26487753U,	// LDRDroW
    26487753U,	// LDRDroX
    26487753U,	// LDRDui
    2761193296U,	// LDRHHpost
    76838736U,	// LDRHHpre
    26486608U,	// LDRHHroW
    26486608U,	// LDRHHroX
    26486608U,	// LDRHHui
    2761194441U,	// LDRHpost
    76839881U,	// LDRHpre
    26487753U,	// LDRHroW
    26487753U,	// LDRHroX
    26487753U,	// LDRHui
    100936649U,	// LDRQl
    2761194441U,	// LDRQpost
    76839881U,	// LDRQpre
    26487753U,	// LDRQroW
    26487753U,	// LDRQroX
    26487753U,	// LDRQui
    2761192523U,	// LDRSBWpost
    76837963U,	// LDRSBWpre
    26485835U,	// LDRSBWroW
    26485835U,	// LDRSBWroX
    26485835U,	// LDRSBWui
    2761192523U,	// LDRSBXpost
    76837963U,	// LDRSBXpre
    26485835U,	// LDRSBXroW
    26485835U,	// LDRSBXroX
    26485835U,	// LDRSBXui
    2761193413U,	// LDRSHWpost
    76838853U,	// LDRSHWpre
    26486725U,	// LDRSHWroW
    26486725U,	// LDRSHWroX
    26486725U,	// LDRSHWui
    2761193413U,	// LDRSHXpost
    76838853U,	// LDRSHXpre
    26486725U,	// LDRSHXroW
    26486725U,	// LDRSHXroX
    26486725U,	// LDRSHXui
    100937256U,	// LDRSWl
    2761195048U,	// LDRSWpost
    76840488U,	// LDRSWpre
    26488360U,	// LDRSWroW
    26488360U,	// LDRSWroX
    26488360U,	// LDRSWui
    100936649U,	// LDRSl
    2761194441U,	// LDRSpost
    76839881U,	// LDRSpre
    26487753U,	// LDRSroW
    26487753U,	// LDRSroX
    26487753U,	// LDRSui
    100936649U,	// LDRWl
    2761194441U,	// LDRWpost
    76839881U,	// LDRWpre
    26487753U,	// LDRWroW
    26487753U,	// LDRWroX
    26487753U,	// LDRWui
    100936649U,	// LDRXl
    2761194441U,	// LDRXpost
    76839881U,	// LDRXpre
    26487753U,	// LDRXroW
    26487753U,	// LDRXroX
    26487753U,	// LDRXui
    168063792U,	// LDSETALb
    168065167U,	// LDSETALd
    168064654U,	// LDSETALh
    168065167U,	// LDSETALs
    168063678U,	// LDSETAb
    168063575U,	// LDSETAd
    168064540U,	// LDSETAh
    168063575U,	// LDSETAs
    168063885U,	// LDSETLb
    168065477U,	// LDSETLd
    168064747U,	// LDSETLh
    168065477U,	// LDSETLs
    168064098U,	// LDSETb
    168066290U,	// LDSETd
    168064988U,	// LDSETh
    168066290U,	// LDSETs
    168063802U,	// LDSMAXALb
    168065176U,	// LDSMAXALd
    168064664U,	// LDSMAXALh
    168065176U,	// LDSMAXALs
    168063687U,	// LDSMAXAb
    168063591U,	// LDSMAXAd
    168064549U,	// LDSMAXAh
    168063591U,	// LDSMAXAs
    168063894U,	// LDSMAXLb
    168065511U,	// LDSMAXLd
    168064789U,	// LDSMAXLh
    168065511U,	// LDSMAXLs
    168064155U,	// LDSMAXb
    168066637U,	// LDSMAXd
    168064996U,	// LDSMAXh
    168066637U,	// LDSMAXs
    168063734U,	// LDSMINALb
    168065107U,	// LDSMINALd
    168064596U,	// LDSMINALh
    168065107U,	// LDSMINALs
    168063626U,	// LDSMINAb
    168063496U,	// LDSMINAd
    168064488U,	// LDSMINAh
    168063496U,	// LDSMINAs
    168063833U,	// LDSMINLb
    168065390U,	// LDSMINLd
    168064695U,	// LDSMINLh
    168065390U,	// LDSMINLs
    168063919U,	// LDSMINb
    168065607U,	// LDSMINd
    168064809U,	// LDSMINh
    168065607U,	// LDSMINs
    26485755U,	// LDTRBi
    26486645U,	// LDTRHi
    26485842U,	// LDTRSBWi
    26485842U,	// LDTRSBXi
    26486732U,	// LDTRSHWi
    26486732U,	// LDTRSHXi
    26488367U,	// LDTRSWi
    26487841U,	// LDTRWi
    26487841U,	// LDTRXi
    168063813U,	// LDUMAXALb
    168065186U,	// LDUMAXALd
    168064675U,	// LDUMAXALh
    168065186U,	// LDUMAXALs
    168063697U,	// LDUMAXAb
    168063600U,	// LDUMAXAd
    168064559U,	// LDUMAXAh
    168063600U,	// LDUMAXAs
    168063904U,	// LDUMAXLb
    168065520U,	// LDUMAXLd
    168064799U,	// LDUMAXLh
    168065520U,	// LDUMAXLs
    168064164U,	// LDUMAXb
    168066645U,	// LDUMAXd
    168065005U,	// LDUMAXh
    168066645U,	// LDUMAXs
    168063745U,	// LDUMINALb
    168065117U,	// LDUMINALd
    168064607U,	// LDUMINALh
    168065117U,	// LDUMINALs
    168063636U,	// LDUMINAb
    168063505U,	// LDUMINAd
    168064498U,	// LDUMINAh
    168063505U,	// LDUMINAs
    168063843U,	// LDUMINLb
    168065399U,	// LDUMINLd
    168064705U,	// LDUMINLh
    168065399U,	// LDUMINLs
    168063928U,	// LDUMINb
    168065615U,	// LDUMINd
    168064818U,	// LDUMINh
    168065615U,	// LDUMINs
    26485775U,	// LDURBBi
    26487864U,	// LDURBi
    26487864U,	// LDURDi
    26486665U,	// LDURHHi
    26487864U,	// LDURHi
    26487864U,	// LDURQi
    26485850U,	// LDURSBWi
    26485850U,	// LDURSBXi
    26486740U,	// LDURSHWi
    26486740U,	// LDURSHXi
    26488375U,	// LDURSWi
    26487864U,	// LDURSi
    26487864U,	// LDURWi
    26487864U,	// LDURXi
    17050497U,	// LDXPW
    17050497U,	// LDXPX
    2173969445U,	// LDXRB
    2173970335U,	// LDXRH
    2173971531U,	// LDXRW
    2173971531U,	// LDXRX
    0U,	// LOADgot
    17050028U,	// LSLVWr
    17050028U,	// LSLVXr
    17050647U,	// LSRVWr
    17050647U,	// LSRVXr
    17048865U,	// MADDWrrr
    17048865U,	// MADDXrrr
    2181050883U,	// MLAv16i8
    2718446083U,	// MLAv2i32
    2718446083U,	// MLAv2i32_indexed
    3255841283U,	// MLAv4i16
    3255841283U,	// MLAv4i16_indexed
    1108619779U,	// MLAv4i32
    1108619779U,	// MLAv4i32_indexed
    1645752835U,	// MLAv8i16
    1645752835U,	// MLAv8i16_indexed
    3793498627U,	// MLAv8i8
    2181053608U,	// MLSv16i8
    2718448808U,	// MLSv2i32
    2718448808U,	// MLSv2i32_indexed
    3255844008U,	// MLSv4i16
    3255844008U,	// MLSv4i16_indexed
    1108622504U,	// MLSv4i32
    1108622504U,	// MLSv4i32_indexed
    1645755560U,	// MLSv8i16
    1645755560U,	// MLSv8i16_indexed
    3793501352U,	// MLSv8i8
    184821780U,	// MOVID
    738203668U,	// MOVIv16b_ns
    185341972U,	// MOVIv2d_ns
    3423082516U,	// MOVIv2i32
    3423082516U,	// MOVIv2s_msl
    3423606804U,	// MOVIv4i16
    3423868948U,	// MOVIv4i32
    3423868948U,	// MOVIv4s_msl
    740038676U,	// MOVIv8b_ns
    3424131092U,	// MOVIv8i16
    84158495U,	// MOVKWi
    84158495U,	// MOVKXi
    3422825153U,	// MOVNWi
    3422825153U,	// MOVNXi
    3422826156U,	// MOVZWi
    3422826156U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    218377426U,	// MRS
    150556U,	// MSR
    154652U,	// MSRpstateImm1
    154652U,	// MSRpstateImm4
    17048703U,	// MSUBWrrr
    17048703U,	// MSUBXrrr
    2147490261U,	// MULv16i8
    2684885461U,	// MULv2i32
    2684885461U,	// MULv2i32_indexed
    3222280661U,	// MULv4i16
    3222280661U,	// MULv4i16_indexed
    1075059157U,	// MULv4i32
    1075059157U,	// MULv4i32_indexed
    1612192213U,	// MULv8i16
    1612192213U,	// MULv8i16_indexed
    3759938005U,	// MULv8i8
    3423082497U,	// MVNIv2i32
    3423082497U,	// MVNIv2s_msl
    3423606785U,	// MVNIv4i16
    3423868929U,	// MVNIv4i32
    3423868929U,	// MVNIv4s_msl
    3424131073U,	// MVNIv8i16
    5546U,	// NEGv16i8
    553919914U,	// NEGv1i64
    1074271658U,	// NEGv2i32
    1611404714U,	// NEGv2i64
    2148537770U,	// NEGv4i16
    2685670826U,	// NEGv4i32
    3222803882U,	// NEGv8i16
    3759936938U,	// NEGv8i8
    7460U,	// NOTv16i8
    3759938852U,	// NOTv8i8
    0U,	// ORNWrr
    17050244U,	// ORNWrs
    0U,	// ORNXrr
    17050244U,	// ORNXrs
    2147490436U,	// ORNv16i8
    3759938180U,	// ORNv8i8
    17050637U,	// ORRWri
    0U,	// ORRWrr
    17050637U,	// ORRWrs
    17050637U,	// ORRXri
    0U,	// ORRXrr
    17050637U,	// ORRXrs
    2147490829U,	// ORRv16i8
    84425741U,	// ORRv2i32
    84950029U,	// ORRv4i16
    85212173U,	// ORRv4i32
    85474317U,	// ORRv8i16
    3759938573U,	// ORRv8i8
    2149060822U,	// PMULLv16i8
    244848985U,	// PMULLv1i64
    261624022U,	// PMULLv2i64
    3759675737U,	// PMULLv8i8
    2147490273U,	// PMULv16i8
    3759938017U,	// PMULv8i8
    101083660U,	// PRFMl
    26634764U,	// PRFMroW
    26634764U,	// PRFMroX
    26634764U,	// PRFMui
    26634794U,	// PRFUMi
    537401913U,	// RADDHNv2i64_v2i32
    571748633U,	// RADDHNv2i64_v4i32
    1074797113U,	// RADDHNv4i32_v4i16
    1108881689U,	// RADDHNv4i32_v8i16
    1644179737U,	// RADDHNv8i16_v16i8
    1612454457U,	// RADDHNv8i16_v8i8
    553921799U,	// RBITWr
    553921799U,	// RBITXr
    7431U,	// RBITv16i8
    3759938823U,	// RBITv8i8
    2108653U,	// RET
    0U,	// RET_ReallyLR
    553918951U,	// REV16Wr
    553918951U,	// REV16Xr
    4583U,	// REV16v16i8
    3759935975U,	// REV16v8i8
    553918540U,	// REV32Xr
    4172U,	// REV32v16i8
    2148536396U,	// REV32v4i16
    3222802508U,	// REV32v8i16
    3759935564U,	// REV32v8i8
    4566U,	// REV64v16i8
    1074270678U,	// REV64v2i32
    2148536790U,	// REV64v4i16
    2685669846U,	// REV64v4i32
    3222802902U,	// REV64v8i16
    3759935958U,	// REV64v8i8
    553921912U,	// REVWr
    553921912U,	// REVXr
    17050632U,	// RORVWr
    17050632U,	// RORVXr
    1644179766U,	// RSHRNv16i8_shift
    537401972U,	// RSHRNv2i32_shift
    1074797172U,	// RSHRNv4i16_shift
    571748662U,	// RSHRNv4i32_shift
    1108881718U,	// RSHRNv8i16_shift
    1612454516U,	// RSHRNv8i8_shift
    537401905U,	// RSUBHNv2i64_v2i32
    571748624U,	// RSUBHNv2i64_v4i32
    1074797105U,	// RSUBHNv4i32_v4i16
    1108881680U,	// RSUBHNv4i32_v8i16
    1644179728U,	// RSUBHNv8i16_v16i8
    1612454449U,	// RSUBHNv8i16_v8i8
    2182623330U,	// SABALv16i8_v8i16
    2718709797U,	// SABALv2i32_v2i64
    3256104997U,	// SABALv4i16_v4i32
    1108095074U,	// SABALv4i32_v2i64
    1645490274U,	// SABALv8i16_v4i32
    3793238053U,	// SABALv8i8_v8i16
    2181050862U,	// SABAv16i8
    2718446062U,	// SABAv2i32
    3255841262U,	// SABAv4i16
    1108619758U,	// SABAv4i32
    1645752814U,	// SABAv8i16
    3793498606U,	// SABAv8i8
    2149060764U,	// SABDLv16i8_v8i16
    2685147343U,	// SABDLv2i32_v2i64
    3222542543U,	// SABDLv4i16_v4i32
    1074532508U,	// SABDLv4i32_v2i64
    1611927708U,	// SABDLv8i16_v4i32
    3759675599U,	// SABDLv8i8_v8i16
    2147489001U,	// SABDv16i8
    2684884201U,	// SABDv2i32
    3222279401U,	// SABDv4i16
    1075057897U,	// SABDv4i32
    1612190953U,	// SABDv8i16
    3759936745U,	// SABDv8i8
    35142370U,	// SADALPv16i8_v8i16
    1117534946U,	// SADALPv2i32_v1i64
    2181577442U,	// SADALPv4i16_v2i32
    2718710498U,	// SADALPv4i32_v2i64
    3256105698U,	// SADALPv8i16_v4i32
    3792714466U,	// SADALPv8i8_v4i16
    1579762U,	// SADDLPv16i8_v8i16
    1083972338U,	// SADDLPv2i32_v1i64
    2148014834U,	// SADDLPv4i16_v2i32
    2685147890U,	// SADDLPv4i32_v2i64
    3222543090U,	// SADDLPv8i16_v4i32
    3759151858U,	// SADDLPv8i8_v4i16
    273807U,	// SADDLVv16i8v
    2147757455U,	// SADDLVv4i16v
    2684628367U,	// SADDLVv4i32v
    3221499279U,	// SADDLVv8i16v
    3758370191U,	// SADDLVv8i8v
    2149060780U,	// SADDLv16i8_v8i16
    2685147381U,	// SADDLv2i32_v2i64
    3222542581U,	// SADDLv4i16_v4i32
    1074532524U,	// SADDLv4i32_v2i64
    1611927724U,	// SADDLv8i16_v4i32
    3759675637U,	// SADDLv8i8_v8i16
    1612190133U,	// SADDWv16i8_v8i16
    537665043U,	// SADDWv2i32_v2i64
    1075060243U,	// SADDWv4i16_v4i32
    537661877U,	// SADDWv4i32_v2i64
    1075057077U,	// SADDWv8i16_v4i32
    1612193299U,	// SADDWv8i8_v8i16
    17050750U,	// SBCSWr
    17050750U,	// SBCSXr
    17048756U,	// SBCWr
    17048756U,	// SBCXr
    17050112U,	// SBFMWri
    17050112U,	// SBFMXri
    17048987U,	// SCVTFSWDri
    17048987U,	// SCVTFSWHri
    17048987U,	// SCVTFSWSri
    17048987U,	// SCVTFSXDri
    17048987U,	// SCVTFSXHri
    17048987U,	// SCVTFSXSri
    553919899U,	// SCVTFUWDri
    553919899U,	// SCVTFUWHri
    553919899U,	// SCVTFUWSri
    553919899U,	// SCVTFUXDri
    553919899U,	// SCVTFUXHri
    553919899U,	// SCVTFUXSri
    17048987U,	// SCVTFd
    17048987U,	// SCVTFh
    17048987U,	// SCVTFs
    553919899U,	// SCVTFv1i16
    553919899U,	// SCVTFv1i32
    553919899U,	// SCVTFv1i64
    1074271643U,	// SCVTFv2f32
    1611404699U,	// SCVTFv2f64
    2684884379U,	// SCVTFv2i32_shift
    537662875U,	// SCVTFv2i64_shift
    2148537755U,	// SCVTFv4f16
    2685670811U,	// SCVTFv4f32
    3222279579U,	// SCVTFv4i16_shift
    1075058075U,	// SCVTFv4i32_shift
    3222803867U,	// SCVTFv8f16
    1612191131U,	// SCVTFv8i16_shift
    17051011U,	// SDIVWr
    17051011U,	// SDIVXr
    67400877U,	// SHA1Crrr
    553919933U,	// SHA1Hrr
    67402233U,	// SHA1Mrrr
    67402447U,	// SHA1Prrr
    1108619265U,	// SHA1SU0rrr
    2719232056U,	// SHA1SU1rr
    67399768U,	// SHA256H2rrr
    67401164U,	// SHA256Hrrr
    2719232010U,	// SHA256SU0rr
    1108619329U,	// SHA256SU1rrr
    2147489042U,	// SHADDv16i8
    2684884242U,	// SHADDv2i32
    3222279442U,	// SHADDv4i16
    1075057938U,	// SHADDv4i32
    1612190994U,	// SHADDv8i16
    3759936786U,	// SHADDv8i8
    3759673533U,	// SHLLv16i8
    792899U,	// SHLLv2i32
    538188099U,	// SHLLv4i16
    1074532541U,	// SHLLv4i32
    1611927741U,	// SHLLv8i16
    2149062979U,	// SHLLv8i8
    17049868U,	// SHLd
    2147490060U,	// SHLv16i8_shift
    2684885260U,	// SHLv2i32_shift
    537663756U,	// SHLv2i64_shift
    3222280460U,	// SHLv4i16_shift
    1075058956U,	// SHLv4i32_shift
    1612192012U,	// SHLv8i16_shift
    3759937804U,	// SHLv8i8_shift
    1644179748U,	// SHRNv16i8_shift
    537401956U,	// SHRNv2i32_shift
    1074797156U,	// SHRNv4i16_shift
    571748644U,	// SHRNv4i32_shift
    1108881700U,	// SHRNv8i16_shift
    1612454500U,	// SHRNv8i8_shift
    2147488880U,	// SHSUBv16i8
    2684884080U,	// SHSUBv2i32
    3222279280U,	// SHSUBv4i16
    1075057776U,	// SHSUBv4i32
    1612190832U,	// SHSUBv8i16
    3759936624U,	// SHSUBv8i8
    67401724U,	// SLId
    2181052412U,	// SLIv16i8_shift
    2718447612U,	// SLIv2i32_shift
    571226108U,	// SLIv2i64_shift
    3255842812U,	// SLIv4i16_shift
    1108621308U,	// SLIv4i32_shift
    1645754364U,	// SLIv8i16_shift
    3793500156U,	// SLIv8i8_shift
    17049829U,	// SMADDLrrr
    2147490675U,	// SMAXPv16i8
    2684885875U,	// SMAXPv2i32
    3222281075U,	// SMAXPv4i16
    1075059571U,	// SMAXPv4i32
    1612192627U,	// SMAXPv8i16
    3759938419U,	// SMAXPv8i8
    273894U,	// SMAXVv16i8v
    2147757542U,	// SMAXVv4i16v
    2684628454U,	// SMAXVv4i32v
    3221499366U,	// SMAXVv8i16v
    3758370278U,	// SMAXVv8i8v
    2147491407U,	// SMAXv16i8
    2684886607U,	// SMAXv2i32
    3222281807U,	// SMAXv4i16
    1075060303U,	// SMAXv4i32
    1612193359U,	// SMAXv8i16
    3759939151U,	// SMAXv8i8
    21709U,	// SMC
    2147490606U,	// SMINPv16i8
    2684885806U,	// SMINPv2i32
    3222281006U,	// SMINPv4i16
    1075059502U,	// SMINPv4i32
    1612192558U,	// SMINPv8i16
    3759938350U,	// SMINPv8i8
    273848U,	// SMINVv16i8v
    2147757496U,	// SMINVv4i16v
    2684628408U,	// SMINVv4i32v
    3221499320U,	// SMINVv8i16v
    3758370232U,	// SMINVv8i8v
    2147490377U,	// SMINv16i8
    2684885577U,	// SMINv2i32
    3222280777U,	// SMINv4i16
    1075059273U,	// SMINv4i32
    1612192329U,	// SMINv8i16
    3759938121U,	// SMINv8i8
    2182623356U,	// SMLALv16i8_v8i16
    2718709829U,	// SMLALv2i32_indexed
    2718709829U,	// SMLALv2i32_v2i64
    3256105029U,	// SMLALv4i16_indexed
    3256105029U,	// SMLALv4i16_v4i32
    1108095100U,	// SMLALv4i32_indexed
    1108095100U,	// SMLALv4i32_v2i64
    1645490300U,	// SMLALv8i16_indexed
    1645490300U,	// SMLALv8i16_v4i32
    3793238085U,	// SMLALv8i8_v8i16
    2182623480U,	// SMLSLv16i8_v8i16
    2718710193U,	// SMLSLv2i32_indexed
    2718710193U,	// SMLSLv2i32_v2i64
    3256105393U,	// SMLSLv4i16_indexed
    3256105393U,	// SMLSLv4i16_v4i32
    1108095224U,	// SMLSLv4i32_indexed
    1108095224U,	// SMLSLv4i32_v2i64
    1645490424U,	// SMLSLv8i16_indexed
    1645490424U,	// SMLSLv8i16_v4i32
    3793238449U,	// SMLSLv8i8_v8i16
    537144787U,	// SMOVvi16to32
    537144787U,	// SMOVvi16to64
    1074015699U,	// SMOVvi32to64
    2147757523U,	// SMOVvi8to32
    2147757523U,	// SMOVvi8to64
    17049777U,	// SMSUBLrrr
    17049351U,	// SMULHrr
    2149060830U,	// SMULLv16i8_v8i16
    2685147488U,	// SMULLv2i32_indexed
    2685147488U,	// SMULLv2i32_v2i64
    3222542688U,	// SMULLv4i16_indexed
    3222542688U,	// SMULLv4i16_v4i32
    1074532574U,	// SMULLv4i32_indexed
    1074532574U,	// SMULLv4i32_v2i64
    1611927774U,	// SMULLv8i16_indexed
    1611927774U,	// SMULLv8i16_v4i32
    3759675744U,	// SMULLv8i8_v8i16
    7281U,	// SQABSv16i8
    553921649U,	// SQABSv1i16
    553921649U,	// SQABSv1i32
    553921649U,	// SQABSv1i64
    553921649U,	// SQABSv1i8
    1074273393U,	// SQABSv2i32
    1611406449U,	// SQABSv2i64
    2148539505U,	// SQABSv4i16
    2685672561U,	// SQABSv4i32
    3222805617U,	// SQABSv8i16
    3759938673U,	// SQABSv8i8
    2147489072U,	// SQADDv16i8
    17048880U,	// SQADDv1i16
    17048880U,	// SQADDv1i32
    17048880U,	// SQADDv1i64
    17048880U,	// SQADDv1i8
    2684884272U,	// SQADDv2i32
    537662768U,	// SQADDv2i64
    3222279472U,	// SQADDv4i16
    1075057968U,	// SQADDv4i32
    1612191024U,	// SQADDv8i16
    3759936816U,	// SQADDv8i8
    67401788U,	// SQDMLALi16
    67401788U,	// SQDMLALi32
    67401788U,	// SQDMLALv1i32_indexed
    67401788U,	// SQDMLALv1i64_indexed
    2718709820U,	// SQDMLALv2i32_indexed
    2718709820U,	// SQDMLALv2i32_v2i64
    3256105020U,	// SQDMLALv4i16_indexed
    3256105020U,	// SQDMLALv4i16_v4i32
    1108095090U,	// SQDMLALv4i32_indexed
    1108095090U,	// SQDMLALv4i32_v2i64
    1645490290U,	// SQDMLALv8i16_indexed
    1645490290U,	// SQDMLALv8i16_v4i32
    67402152U,	// SQDMLSLi16
    67402152U,	// SQDMLSLi32
    67402152U,	// SQDMLSLv1i32_indexed
    67402152U,	// SQDMLSLv1i64_indexed
    2718710184U,	// SQDMLSLv2i32_indexed
    2718710184U,	// SQDMLSLv2i32_v2i64
    3256105384U,	// SQDMLSLv4i16_indexed
    3256105384U,	// SQDMLSLv4i16_v4i32
    1108095214U,	// SQDMLSLv4i32_indexed
    1108095214U,	// SQDMLSLv4i32_v2i64
    1645490414U,	// SQDMLSLv8i16_indexed
    1645490414U,	// SQDMLSLv8i16_v4i32
    17049332U,	// SQDMULHv1i16
    17049332U,	// SQDMULHv1i16_indexed
    17049332U,	// SQDMULHv1i32
    17049332U,	// SQDMULHv1i32_indexed
    2684884724U,	// SQDMULHv2i32
    2684884724U,	// SQDMULHv2i32_indexed
    3222279924U,	// SQDMULHv4i16
    3222279924U,	// SQDMULHv4i16_indexed
    1075058420U,	// SQDMULHv4i32
    1075058420U,	// SQDMULHv4i32_indexed
    1612191476U,	// SQDMULHv8i16
    1612191476U,	// SQDMULHv8i16_indexed
    17049936U,	// SQDMULLi16
    17049936U,	// SQDMULLi32
    17049936U,	// SQDMULLv1i32_indexed
    17049936U,	// SQDMULLv1i64_indexed
    2685147472U,	// SQDMULLv2i32_indexed
    2685147472U,	// SQDMULLv2i32_v2i64
    3222542672U,	// SQDMULLv4i16_indexed
    3222542672U,	// SQDMULLv4i16_v4i32
    1074532556U,	// SQDMULLv4i32_indexed
    1074532556U,	// SQDMULLv4i32_v2i64
    1611927756U,	// SQDMULLv8i16_indexed
    1611927756U,	// SQDMULLv8i16_v4i32
    5551U,	// SQNEGv16i8
    553919919U,	// SQNEGv1i16
    553919919U,	// SQNEGv1i32
    553919919U,	// SQNEGv1i64
    553919919U,	// SQNEGv1i8
    1074271663U,	// SQNEGv2i32
    1611404719U,	// SQNEGv2i64
    2148537775U,	// SQNEGv4i16
    2685670831U,	// SQNEGv4i32
    3222803887U,	// SQNEGv8i16
    3759936943U,	// SQNEGv8i8
    67401182U,	// SQRDMLAHi16_indexed
    67401182U,	// SQRDMLAHi32_indexed
    67401182U,	// SQRDMLAHv1i16
    67401182U,	// SQRDMLAHv1i32
    2718447070U,	// SQRDMLAHv2i32
    2718447070U,	// SQRDMLAHv2i32_indexed
    3255842270U,	// SQRDMLAHv4i16
    3255842270U,	// SQRDMLAHv4i16_indexed
    1108620766U,	// SQRDMLAHv4i32
    1108620766U,	// SQRDMLAHv4i32_indexed
    1645753822U,	// SQRDMLAHv8i16
    1645753822U,	// SQRDMLAHv8i16_indexed
    67401659U,	// SQRDMLSHi16_indexed
    67401659U,	// SQRDMLSHi32_indexed
    67401659U,	// SQRDMLSHv1i16
    67401659U,	// SQRDMLSHv1i32
    2718447547U,	// SQRDMLSHv2i32
    2718447547U,	// SQRDMLSHv2i32_indexed
    3255842747U,	// SQRDMLSHv4i16
    3255842747U,	// SQRDMLSHv4i16_indexed
    1108621243U,	// SQRDMLSHv4i32
    1108621243U,	// SQRDMLSHv4i32_indexed
    1645754299U,	// SQRDMLSHv8i16
    1645754299U,	// SQRDMLSHv8i16_indexed
    17049341U,	// SQRDMULHv1i16
    17049341U,	// SQRDMULHv1i16_indexed
    17049341U,	// SQRDMULHv1i32
    17049341U,	// SQRDMULHv1i32_indexed
    2684884733U,	// SQRDMULHv2i32
    2684884733U,	// SQRDMULHv2i32_indexed
    3222279933U,	// SQRDMULHv4i16
    3222279933U,	// SQRDMULHv4i16_indexed
    1075058429U,	// SQRDMULHv4i32
    1075058429U,	// SQRDMULHv4i32_indexed
    1612191485U,	// SQRDMULHv8i16
    1612191485U,	// SQRDMULHv8i16_indexed
    2147490072U,	// SQRSHLv16i8
    17049880U,	// SQRSHLv1i16
    17049880U,	// SQRSHLv1i32
    17049880U,	// SQRSHLv1i64
    17049880U,	// SQRSHLv1i8
    2684885272U,	// SQRSHLv2i32
    537663768U,	// SQRSHLv2i64
    3222280472U,	// SQRSHLv4i16
    1075058968U,	// SQRSHLv4i32
    1612192024U,	// SQRSHLv8i16
    3759937816U,	// SQRSHLv8i8
    17050226U,	// SQRSHRNb
    17050226U,	// SQRSHRNh
    17050226U,	// SQRSHRNs
    1644179764U,	// SQRSHRNv16i8_shift
    537401970U,	// SQRSHRNv2i32_shift
    1074797170U,	// SQRSHRNv4i16_shift
    571748660U,	// SQRSHRNv4i32_shift
    1108881716U,	// SQRSHRNv8i16_shift
    1612454514U,	// SQRSHRNv8i8_shift
    17050287U,	// SQRSHRUNb
    17050287U,	// SQRSHRUNh
    17050287U,	// SQRSHRUNs
    1644179824U,	// SQRSHRUNv16i8_shift
    537402031U,	// SQRSHRUNv2i32_shift
    1074797231U,	// SQRSHRUNv4i16_shift
    571748720U,	// SQRSHRUNv4i32_shift
    1108881776U,	// SQRSHRUNv8i16_shift
    1612454575U,	// SQRSHRUNv8i8_shift
    17050954U,	// SQSHLUb
    17050954U,	// SQSHLUd
    17050954U,	// SQSHLUh
    17050954U,	// SQSHLUs
    2147491146U,	// SQSHLUv16i8_shift
    2684886346U,	// SQSHLUv2i32_shift
    537664842U,	// SQSHLUv2i64_shift
    3222281546U,	// SQSHLUv4i16_shift
    1075060042U,	// SQSHLUv4i32_shift
    1612193098U,	// SQSHLUv8i16_shift
    3759938890U,	// SQSHLUv8i8_shift
    17049866U,	// SQSHLb
    17049866U,	// SQSHLd
    17049866U,	// SQSHLh
    17049866U,	// SQSHLs
    2147490058U,	// SQSHLv16i8
    2147490058U,	// SQSHLv16i8_shift
    17049866U,	// SQSHLv1i16
    17049866U,	// SQSHLv1i32
    17049866U,	// SQSHLv1i64
    17049866U,	// SQSHLv1i8
    2684885258U,	// SQSHLv2i32
    2684885258U,	// SQSHLv2i32_shift
    537663754U,	// SQSHLv2i64
    537663754U,	// SQSHLv2i64_shift
    3222280458U,	// SQSHLv4i16
    3222280458U,	// SQSHLv4i16_shift
    1075058954U,	// SQSHLv4i32
    1075058954U,	// SQSHLv4i32_shift
    1612192010U,	// SQSHLv8i16
    1612192010U,	// SQSHLv8i16_shift
    3759937802U,	// SQSHLv8i8
    3759937802U,	// SQSHLv8i8_shift
    17050210U,	// SQSHRNb
    17050210U,	// SQSHRNh
    17050210U,	// SQSHRNs
    1644179746U,	// SQSHRNv16i8_shift
    537401954U,	// SQSHRNv2i32_shift
    1074797154U,	// SQSHRNv4i16_shift
    571748642U,	// SQSHRNv4i32_shift
    1108881698U,	// SQSHRNv8i16_shift
    1612454498U,	// SQSHRNv8i8_shift
    17050278U,	// SQSHRUNb
    17050278U,	// SQSHRUNh
    17050278U,	// SQSHRUNs
    1644179814U,	// SQSHRUNv16i8_shift
    537402022U,	// SQSHRUNv2i32_shift
    1074797222U,	// SQSHRUNv4i16_shift
    571748710U,	// SQSHRUNv4i32_shift
    1108881766U,	// SQSHRUNv8i16_shift
    1612454566U,	// SQSHRUNv8i8_shift
    2147488909U,	// SQSUBv16i8
    17048717U,	// SQSUBv1i16
    17048717U,	// SQSUBv1i32
    17048717U,	// SQSUBv1i64
    17048717U,	// SQSUBv1i8
    2684884109U,	// SQSUBv2i32
    537662605U,	// SQSUBv2i64
    3222279309U,	// SQSUBv4i16
    1075057805U,	// SQSUBv4i32
    1612190861U,	// SQSUBv8i16
    3759936653U,	// SQSUBv8i8
    3254792534U,	// SQXTNv16i8
    553921176U,	// SQXTNv1i16
    553921176U,	// SQXTNv1i32
    553921176U,	// SQXTNv1i8
    1611143832U,	// SQXTNv2i32
    2685409944U,	// SQXTNv4i16
    1645490518U,	// SQXTNv4i32
    2719494486U,	// SQXTNv8i16
    3223067288U,	// SQXTNv8i8
    3254792571U,	// SQXTUNv16i8
    553921209U,	// SQXTUNv1i16
    553921209U,	// SQXTUNv1i32
    553921209U,	// SQXTUNv1i8
    1611143865U,	// SQXTUNv2i32
    2685409977U,	// SQXTUNv4i16
    1645490555U,	// SQXTUNv4i32
    2719494523U,	// SQXTUNv8i16
    3223067321U,	// SQXTUNv8i8
    2147489026U,	// SRHADDv16i8
    2684884226U,	// SRHADDv2i32
    3222279426U,	// SRHADDv4i16
    1075057922U,	// SRHADDv4i32
    1612190978U,	// SRHADDv8i16
    3759936770U,	// SRHADDv8i8
    67401735U,	// SRId
    2181052423U,	// SRIv16i8_shift
    2718447623U,	// SRIv2i32_shift
    571226119U,	// SRIv2i64_shift
    3255842823U,	// SRIv4i16_shift
    1108621319U,	// SRIv4i32_shift
    1645754375U,	// SRIv8i16_shift
    3793500167U,	// SRIv8i8_shift
    2147490088U,	// SRSHLv16i8
    17049896U,	// SRSHLv1i64
    2684885288U,	// SRSHLv2i32
    537663784U,	// SRSHLv2i64
    3222280488U,	// SRSHLv4i16
    1075058984U,	// SRSHLv4i32
    1612192040U,	// SRSHLv8i16
    3759937832U,	// SRSHLv8i8
    17050574U,	// SRSHRd
    2147490766U,	// SRSHRv16i8_shift
    2684885966U,	// SRSHRv2i32_shift
    537664462U,	// SRSHRv2i64_shift
    3222281166U,	// SRSHRv4i16_shift
    1075059662U,	// SRSHRv4i32_shift
    1612192718U,	// SRSHRv8i16_shift
    3759938510U,	// SRSHRv8i8_shift
    67400247U,	// SRSRAd
    2181050935U,	// SRSRAv16i8_shift
    2718446135U,	// SRSRAv2i32_shift
    571224631U,	// SRSRAv2i64_shift
    3255841335U,	// SRSRAv4i16_shift
    1108619831U,	// SRSRAv4i32_shift
    1645752887U,	// SRSRAv8i16_shift
    3793498679U,	// SRSRAv8i8_shift
    2149060796U,	// SSHLLv16i8_shift
    2685147458U,	// SSHLLv2i32_shift
    3222542658U,	// SSHLLv4i16_shift
    1074532540U,	// SSHLLv4i32_shift
    1611927740U,	// SSHLLv8i16_shift
    3759675714U,	// SSHLLv8i8_shift
    2147490102U,	// SSHLv16i8
    17049910U,	// SSHLv1i64
    2684885302U,	// SSHLv2i32
    537663798U,	// SSHLv2i64
    3222280502U,	// SSHLv4i16
    1075058998U,	// SSHLv4i32
    1612192054U,	// SSHLv8i16
    3759937846U,	// SSHLv8i8
    17050588U,	// SSHRd
    2147490780U,	// SSHRv16i8_shift
    2684885980U,	// SSHRv2i32_shift
    537664476U,	// SSHRv2i64_shift
    3222281180U,	// SSHRv4i16_shift
    1075059676U,	// SSHRv4i32_shift
    1612192732U,	// SSHRv8i16_shift
    3759938524U,	// SSHRv8i8_shift
    67400261U,	// SSRAd
    2181050949U,	// SSRAv16i8_shift
    2718446149U,	// SSRAv2i32_shift
    571224645U,	// SSRAv2i64_shift
    3255841349U,	// SSRAv4i16_shift
    1108619845U,	// SSRAv4i32_shift
    1645752901U,	// SSRAv8i16_shift
    3793498693U,	// SSRAv8i8_shift
    2149060748U,	// SSUBLv16i8_v8i16
    2685147329U,	// SSUBLv2i32_v2i64
    3222542529U,	// SSUBLv4i16_v4i32
    1074532492U,	// SSUBLv4i32_v2i64
    1611927692U,	// SSUBLv8i16_v4i32
    3759675585U,	// SSUBLv8i8_v8i16
    1612190117U,	// SSUBWv16i8_v8i16
    537665020U,	// SSUBWv2i32_v2i64
    1075060220U,	// SSUBWv4i16_v4i32
    537661861U,	// SSUBWv4i32_v2i64
    1075057061U,	// SSUBWv8i16_v4i32
    1612193276U,	// SSUBWv8i8_v8i16
    49203U,	// ST1Fourv16b
    3723315U,	// ST1Fourv16b_POST
    57395U,	// ST1Fourv1d
    3993651U,	// ST1Fourv1d_POST
    65587U,	// ST1Fourv2d
    3739699U,	// ST1Fourv2d_POST
    73779U,	// ST1Fourv2s
    4010035U,	// ST1Fourv2s_POST
    81971U,	// ST1Fourv4h
    4018227U,	// ST1Fourv4h_POST
    90163U,	// ST1Fourv4s
    3764275U,	// ST1Fourv4s_POST
    98355U,	// ST1Fourv8b
    4034611U,	// ST1Fourv8b_POST
    106547U,	// ST1Fourv8h
    3780659U,	// ST1Fourv8h_POST
    49203U,	// ST1Onev16b
    4247603U,	// ST1Onev16b_POST
    57395U,	// ST1Onev1d
    4517939U,	// ST1Onev1d_POST
    65587U,	// ST1Onev2d
    4263987U,	// ST1Onev2d_POST
    73779U,	// ST1Onev2s
    4534323U,	// ST1Onev2s_POST
    81971U,	// ST1Onev4h
    4542515U,	// ST1Onev4h_POST
    90163U,	// ST1Onev4s
    4288563U,	// ST1Onev4s_POST
    98355U,	// ST1Onev8b
    4558899U,	// ST1Onev8b_POST
    106547U,	// ST1Onev8h
    4304947U,	// ST1Onev8h_POST
    49203U,	// ST1Threev16b
    5558323U,	// ST1Threev16b_POST
    57395U,	// ST1Threev1d
    5828659U,	// ST1Threev1d_POST
    65587U,	// ST1Threev2d
    5574707U,	// ST1Threev2d_POST
    73779U,	// ST1Threev2s
    5845043U,	// ST1Threev2s_POST
    81971U,	// ST1Threev4h
    5853235U,	// ST1Threev4h_POST
    90163U,	// ST1Threev4s
    5599283U,	// ST1Threev4s_POST
    98355U,	// ST1Threev8b
    5869619U,	// ST1Threev8b_POST
    106547U,	// ST1Threev8h
    5615667U,	// ST1Threev8h_POST
    49203U,	// ST1Twov16b
    3985459U,	// ST1Twov16b_POST
    57395U,	// ST1Twov1d
    4255795U,	// ST1Twov1d_POST
    65587U,	// ST1Twov2d
    4001843U,	// ST1Twov2d_POST
    73779U,	// ST1Twov2s
    4272179U,	// ST1Twov2s_POST
    81971U,	// ST1Twov4h
    4280371U,	// ST1Twov4h_POST
    90163U,	// ST1Twov4s
    4026419U,	// ST1Twov4s_POST
    98355U,	// ST1Twov8b
    4296755U,	// ST1Twov8b_POST
    106547U,	// ST1Twov8h
    4042803U,	// ST1Twov8h_POST
    159795U,	// ST1i16
    279035955U,	// ST1i16_POST
    163891U,	// ST1i32
    295821363U,	// ST1i32_POST
    167987U,	// ST1i64
    312606771U,	// ST1i64_POST
    172083U,	// ST1i8
    329392179U,	// ST1i8_POST
    49568U,	// ST2Twov16b
    3985824U,	// ST2Twov16b_POST
    65952U,	// ST2Twov2d
    4002208U,	// ST2Twov2d_POST
    74144U,	// ST2Twov2s
    4272544U,	// ST2Twov2s_POST
    82336U,	// ST2Twov4h
    4280736U,	// ST2Twov4h_POST
    90528U,	// ST2Twov4s
    4026784U,	// ST2Twov4s_POST
    98720U,	// ST2Twov8b
    4297120U,	// ST2Twov8b_POST
    106912U,	// ST2Twov8h
    4043168U,	// ST2Twov8h_POST
    160160U,	// ST2i16
    295813536U,	// ST2i16_POST
    164256U,	// ST2i32
    312598944U,	// ST2i32_POST
    168352U,	// ST2i64
    346161568U,	// ST2i64_POST
    172448U,	// ST2i8
    279060896U,	// ST2i8_POST
    49617U,	// ST3Threev16b
    5558737U,	// ST3Threev16b_POST
    66001U,	// ST3Threev2d
    5575121U,	// ST3Threev2d_POST
    74193U,	// ST3Threev2s
    5845457U,	// ST3Threev2s_POST
    82385U,	// ST3Threev4h
    5853649U,	// ST3Threev4h_POST
    90577U,	// ST3Threev4s
    5599697U,	// ST3Threev4s_POST
    98769U,	// ST3Threev8b
    5870033U,	// ST3Threev8b_POST
    106961U,	// ST3Threev8h
    5616081U,	// ST3Threev8h_POST
    160209U,	// ST3i16
    362922449U,	// ST3i16_POST
    164305U,	// ST3i32
    379707857U,	// ST3i32_POST
    168401U,	// ST3i64
    396493265U,	// ST3i64_POST
    172497U,	// ST3i8
    413278673U,	// ST3i8_POST
    49634U,	// ST4Fourv16b
    3723746U,	// ST4Fourv16b_POST
    66018U,	// ST4Fourv2d
    3740130U,	// ST4Fourv2d_POST
    74210U,	// ST4Fourv2s
    4010466U,	// ST4Fourv2s_POST
    82402U,	// ST4Fourv4h
    4018658U,	// ST4Fourv4h_POST
    90594U,	// ST4Fourv4s
    3764706U,	// ST4Fourv4s_POST
    98786U,	// ST4Fourv8b
    4035042U,	// ST4Fourv8b_POST
    106978U,	// ST4Fourv8h
    3781090U,	// ST4Fourv8h_POST
    160226U,	// ST4i16
    312590818U,	// ST4i16_POST
    164322U,	// ST4i32
    346153442U,	// ST4i32_POST
    168418U,	// ST4i64
    430047714U,	// ST4i64_POST
    172514U,	// ST4i8
    295838178U,	// ST4i8_POST
    2173969380U,	// STLLRB
    2173970270U,	// STLLRH
    2173971444U,	// STLLRW
    2173971444U,	// STLLRX
    2173969388U,	// STLRB
    2173970278U,	// STLRH
    2173971451U,	// STLRW
    2173971451U,	// STLRX
    17050503U,	// STLXPW
    17050503U,	// STLXPX
    17048620U,	// STLXRB
    17049510U,	// STLXRH
    17050705U,	// STLXRW
    17050705U,	// STLXRX
    17050428U,	// STNPDi
    17050428U,	// STNPQi
    17050428U,	// STNPSi
    17050428U,	// STNPWi
    17050428U,	// STNPXi
    17050454U,	// STPDi
    67402582U,	// STPDpost
    67402582U,	// STPDpre
    17050454U,	// STPQi
    67402582U,	// STPQpost
    67402582U,	// STPQpre
    17050454U,	// STPSi
    67402582U,	// STPSpost
    67402582U,	// STPSpre
    17050454U,	// STPWi
    67402582U,	// STPWpost
    67402582U,	// STPWpre
    17050454U,	// STPXi
    67402582U,	// STPXpost
    67402582U,	// STPXpre
    2761192450U,	// STRBBpost
    76837890U,	// STRBBpre
    26485762U,	// STRBBroW
    26485762U,	// STRBBroX
    26485762U,	// STRBBui
    2761194535U,	// STRBpost
    76839975U,	// STRBpre
    26487847U,	// STRBroW
    26487847U,	// STRBroX
    26487847U,	// STRBui
    2761194535U,	// STRDpost
    76839975U,	// STRDpre
    26487847U,	// STRDroW
    26487847U,	// STRDroX
    26487847U,	// STRDui
    2761193340U,	// STRHHpost
    76838780U,	// STRHHpre
    26486652U,	// STRHHroW
    26486652U,	// STRHHroX
    26486652U,	// STRHHui
    2761194535U,	// STRHpost
    76839975U,	// STRHpre
    26487847U,	// STRHroW
    26487847U,	// STRHroX
    26487847U,	// STRHui
    2761194535U,	// STRQpost
    76839975U,	// STRQpre
    26487847U,	// STRQroW
    26487847U,	// STRQroX
    26487847U,	// STRQui
    2761194535U,	// STRSpost
    76839975U,	// STRSpre
    26487847U,	// STRSroW
    26487847U,	// STRSroX
    26487847U,	// STRSui
    2761194535U,	// STRWpost
    76839975U,	// STRWpre
    26487847U,	// STRWroW
    26487847U,	// STRWroX
    26487847U,	// STRWui
    2761194535U,	// STRXpost
    76839975U,	// STRXpre
    26487847U,	// STRXroW
    26487847U,	// STRXroX
    26487847U,	// STRXui
    26485768U,	// STTRBi
    26486658U,	// STTRHi
    26487852U,	// STTRWi
    26487852U,	// STTRXi
    26485782U,	// STURBBi
    26487870U,	// STURBi
    26487870U,	// STURDi
    26486672U,	// STURHHi
    26487870U,	// STURHi
    26487870U,	// STURQi
    26487870U,	// STURSi
    26487870U,	// STURWi
    26487870U,	// STURXi
    17050510U,	// STXPW
    17050510U,	// STXPX
    17048628U,	// STXRB
    17049518U,	// STXRH
    17050712U,	// STXRW
    17050712U,	// STXRX
    537401906U,	// SUBHNv2i64_v2i32
    571748625U,	// SUBHNv2i64_v4i32
    1074797106U,	// SUBHNv4i32_v4i16
    1108881681U,	// SUBHNv4i32_v8i16
    1644179729U,	// SUBHNv8i16_v16i8
    1612454450U,	// SUBHNv8i16_v8i8
    17050744U,	// SUBSWri
    0U,	// SUBSWrr
    17050744U,	// SUBSWrs
    17050744U,	// SUBSWrx
    17050744U,	// SUBSXri
    0U,	// SUBSXrr
    17050744U,	// SUBSXrs
    17050744U,	// SUBSXrx
    17050744U,	// SUBSXrx64
    17048683U,	// SUBWri
    0U,	// SUBWrr
    17048683U,	// SUBWrs
    17048683U,	// SUBWrx
    17048683U,	// SUBXri
    0U,	// SUBXrr
    17048683U,	// SUBXrs
    17048683U,	// SUBXrx
    17048683U,	// SUBXrx64
    2147488875U,	// SUBv16i8
    17048683U,	// SUBv1i64
    2684884075U,	// SUBv2i32
    537662571U,	// SUBv2i64
    3222279275U,	// SUBv4i16
    1075057771U,	// SUBv4i32
    1612190827U,	// SUBv8i16
    3759936619U,	// SUBv8i8
    33568055U,	// SUQADDv16i8
    604271927U,	// SUQADDv1i16
    604271927U,	// SUQADDv1i32
    604271927U,	// SUQADDv1i64
    604271927U,	// SUQADDv1i8
    1107834167U,	// SUQADDv2i32
    1644967223U,	// SUQADDv2i64
    2182100279U,	// SUQADDv4i16
    2719233335U,	// SUQADDv4i32
    3256366391U,	// SUQADDv8i16
    3793499447U,	// SUQADDv8i8
    21726U,	// SVC
    168063756U,	// SWPALb
    168065135U,	// SWPALd
    168064618U,	// SWPALh
    168065135U,	// SWPALs
    168063646U,	// SWPAb
    168063521U,	// SWPAd
    168064508U,	// SWPAh
    168063521U,	// SWPAs
    168063853U,	// SWPLb
    168065415U,	// SWPLd
    168064715U,	// SWPLh
    168065415U,	// SWPLs
    168063937U,	// SWPb
    168065888U,	// SWPd
    168064827U,	// SWPh
    168065888U,	// SWPs
    17050047U,	// SYSLxt
    436481248U,	// SYSxt
    452991148U,	// TBLv16i8Four
    452991148U,	// TBLv16i8One
    452991148U,	// TBLv16i8Three
    452991148U,	// TBLv16i8Two
    4212922540U,	// TBLv8i8Four
    4212922540U,	// TBLv8i8One
    4212922540U,	// TBLv8i8Three
    4212922540U,	// TBLv8i8Two
    17051294U,	// TBNZW
    17051294U,	// TBNZX
    469778013U,	// TBXv16i8Four
    469778013U,	// TBXv16i8One
    469778013U,	// TBXv16i8Three
    469778013U,	// TBXv16i8Two
    4229709405U,	// TBXv8i8Four
    4229709405U,	// TBXv8i8One
    4229709405U,	// TBXv8i8Three
    4229709405U,	// TBXv8i8Two
    17051278U,	// TBZW
    17051278U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    2109106U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147487770U,	// TRN1v16i8
    2684882970U,	// TRN1v2i32
    537661466U,	// TRN1v2i64
    3222278170U,	// TRN1v4i16
    1075056666U,	// TRN1v4i32
    1612189722U,	// TRN1v8i16
    3759935514U,	// TRN1v8i8
    2147488072U,	// TRN2v16i8
    2684883272U,	// TRN2v2i32
    537661768U,	// TRN2v2i64
    3222278472U,	// TRN2v4i16
    1075056968U,	// TRN2v4i32
    1612190024U,	// TRN2v8i16
    3759935816U,	// TRN2v8i8
    2182623338U,	// UABALv16i8_v8i16
    2718709804U,	// UABALv2i32_v2i64
    3256105004U,	// UABALv4i16_v4i32
    1108095082U,	// UABALv4i32_v2i64
    1645490282U,	// UABALv8i16_v4i32
    3793238060U,	// UABALv8i8_v8i16
    2181050868U,	// UABAv16i8
    2718446068U,	// UABAv2i32
    3255841268U,	// UABAv4i16
    1108619764U,	// UABAv4i32
    1645752820U,	// UABAv8i16
    3793498612U,	// UABAv8i8
    2149060772U,	// UABDLv16i8_v8i16
    2685147350U,	// UABDLv2i32_v2i64
    3222542550U,	// UABDLv4i16_v4i32
    1074532516U,	// UABDLv4i32_v2i64
    1611927716U,	// UABDLv8i16_v4i32
    3759675606U,	// UABDLv8i8_v8i16
    2147489007U,	// UABDv16i8
    2684884207U,	// UABDv2i32
    3222279407U,	// UABDv4i16
    1075057903U,	// UABDv4i32
    1612190959U,	// UABDv8i16
    3759936751U,	// UABDv8i8
    35142378U,	// UADALPv16i8_v8i16
    1117534954U,	// UADALPv2i32_v1i64
    2181577450U,	// UADALPv4i16_v2i32
    2718710506U,	// UADALPv4i32_v2i64
    3256105706U,	// UADALPv8i16_v4i32
    3792714474U,	// UADALPv8i8_v4i16
    1579770U,	// UADDLPv16i8_v8i16
    1083972346U,	// UADDLPv2i32_v1i64
    2148014842U,	// UADDLPv4i16_v2i32
    2685147898U,	// UADDLPv4i32_v2i64
    3222543098U,	// UADDLPv8i16_v4i32
    3759151866U,	// UADDLPv8i8_v4i16
    273815U,	// UADDLVv16i8v
    2147757463U,	// UADDLVv4i16v
    2684628375U,	// UADDLVv4i32v
    3221499287U,	// UADDLVv8i16v
    3758370199U,	// UADDLVv8i8v
    2149060788U,	// UADDLv16i8_v8i16
    2685147388U,	// UADDLv2i32_v2i64
    3222542588U,	// UADDLv4i16_v4i32
    1074532532U,	// UADDLv4i32_v2i64
    1611927732U,	// UADDLv8i16_v4i32
    3759675644U,	// UADDLv8i8_v8i16
    1612190141U,	// UADDWv16i8_v8i16
    537665050U,	// UADDWv2i32_v2i64
    1075060250U,	// UADDWv4i16_v4i32
    537661885U,	// UADDWv4i32_v2i64
    1075057085U,	// UADDWv8i16_v4i32
    1612193306U,	// UADDWv8i8_v8i16
    17050118U,	// UBFMWri
    17050118U,	// UBFMXri
    17048994U,	// UCVTFSWDri
    17048994U,	// UCVTFSWHri
    17048994U,	// UCVTFSWSri
    17048994U,	// UCVTFSXDri
    17048994U,	// UCVTFSXHri
    17048994U,	// UCVTFSXSri
    553919906U,	// UCVTFUWDri
    553919906U,	// UCVTFUWHri
    553919906U,	// UCVTFUWSri
    553919906U,	// UCVTFUXDri
    553919906U,	// UCVTFUXHri
    553919906U,	// UCVTFUXSri
    17048994U,	// UCVTFd
    17048994U,	// UCVTFh
    17048994U,	// UCVTFs
    553919906U,	// UCVTFv1i16
    553919906U,	// UCVTFv1i32
    553919906U,	// UCVTFv1i64
    1074271650U,	// UCVTFv2f32
    1611404706U,	// UCVTFv2f64
    2684884386U,	// UCVTFv2i32_shift
    537662882U,	// UCVTFv2i64_shift
    2148537762U,	// UCVTFv4f16
    2685670818U,	// UCVTFv4f32
    3222279586U,	// UCVTFv4i16_shift
    1075058082U,	// UCVTFv4i32_shift
    3222803874U,	// UCVTFv8f16
    1612191138U,	// UCVTFv8i16_shift
    17051017U,	// UDIVWr
    17051017U,	// UDIVXr
    2147489049U,	// UHADDv16i8
    2684884249U,	// UHADDv2i32
    3222279449U,	// UHADDv4i16
    1075057945U,	// UHADDv4i32
    1612191001U,	// UHADDv8i16
    3759936793U,	// UHADDv8i8
    2147488887U,	// UHSUBv16i8
    2684884087U,	// UHSUBv2i32
    3222279287U,	// UHSUBv4i16
    1075057783U,	// UHSUBv4i32
    1612190839U,	// UHSUBv8i16
    3759936631U,	// UHSUBv8i8
    17049837U,	// UMADDLrrr
    2147490682U,	// UMAXPv16i8
    2684885882U,	// UMAXPv2i32
    3222281082U,	// UMAXPv4i16
    1075059578U,	// UMAXPv4i32
    1612192634U,	// UMAXPv8i16
    3759938426U,	// UMAXPv8i8
    273901U,	// UMAXVv16i8v
    2147757549U,	// UMAXVv4i16v
    2684628461U,	// UMAXVv4i32v
    3221499373U,	// UMAXVv8i16v
    3758370285U,	// UMAXVv8i8v
    2147491415U,	// UMAXv16i8
    2684886615U,	// UMAXv2i32
    3222281815U,	// UMAXv4i16
    1075060311U,	// UMAXv4i32
    1612193367U,	// UMAXv8i16
    3759939159U,	// UMAXv8i8
    2147490613U,	// UMINPv16i8
    2684885813U,	// UMINPv2i32
    3222281013U,	// UMINPv4i16
    1075059509U,	// UMINPv4i32
    1612192565U,	// UMINPv8i16
    3759938357U,	// UMINPv8i8
    273855U,	// UMINVv16i8v
    2147757503U,	// UMINVv4i16v
    2684628415U,	// UMINVv4i32v
    3221499327U,	// UMINVv8i16v
    3758370239U,	// UMINVv8i8v
    2147490385U,	// UMINv16i8
    2684885585U,	// UMINv2i32
    3222280785U,	// UMINv4i16
    1075059281U,	// UMINv4i32
    1612192337U,	// UMINv8i16
    3759938129U,	// UMINv8i8
    2182623364U,	// UMLALv16i8_v8i16
    2718709836U,	// UMLALv2i32_indexed
    2718709836U,	// UMLALv2i32_v2i64
    3256105036U,	// UMLALv4i16_indexed
    3256105036U,	// UMLALv4i16_v4i32
    1108095108U,	// UMLALv4i32_indexed
    1108095108U,	// UMLALv4i32_v2i64
    1645490308U,	// UMLALv8i16_indexed
    1645490308U,	// UMLALv8i16_v4i32
    3793238092U,	// UMLALv8i8_v8i16
    2182623488U,	// UMLSLv16i8_v8i16
    2718710200U,	// UMLSLv2i32_indexed
    2718710200U,	// UMLSLv2i32_v2i64
    3256105400U,	// UMLSLv4i16_indexed
    3256105400U,	// UMLSLv4i16_v4i32
    1108095232U,	// UMLSLv4i32_indexed
    1108095232U,	// UMLSLv4i32_v2i64
    1645490432U,	// UMLSLv8i16_indexed
    1645490432U,	// UMLSLv8i16_v4i32
    3793238456U,	// UMLSLv8i8_v8i16
    537144793U,	// UMOVvi16
    1074015705U,	// UMOVvi32
    1610886617U,	// UMOVvi64
    2147757529U,	// UMOVvi8
    17049785U,	// UMSUBLrrr
    17049358U,	// UMULHrr
    2149060838U,	// UMULLv16i8_v8i16
    2685147495U,	// UMULLv2i32_indexed
    2685147495U,	// UMULLv2i32_v2i64
    3222542695U,	// UMULLv4i16_indexed
    3222542695U,	// UMULLv4i16_v4i32
    1074532582U,	// UMULLv4i32_indexed
    1074532582U,	// UMULLv4i32_v2i64
    1611927782U,	// UMULLv8i16_indexed
    1611927782U,	// UMULLv8i16_v4i32
    3759675751U,	// UMULLv8i8_v8i16
    2147489080U,	// UQADDv16i8
    17048888U,	// UQADDv1i16
    17048888U,	// UQADDv1i32
    17048888U,	// UQADDv1i64
    17048888U,	// UQADDv1i8
    2684884280U,	// UQADDv2i32
    537662776U,	// UQADDv2i64
    3222279480U,	// UQADDv4i16
    1075057976U,	// UQADDv4i32
    1612191032U,	// UQADDv8i16
    3759936824U,	// UQADDv8i8
    2147490080U,	// UQRSHLv16i8
    17049888U,	// UQRSHLv1i16
    17049888U,	// UQRSHLv1i32
    17049888U,	// UQRSHLv1i64
    17049888U,	// UQRSHLv1i8
    2684885280U,	// UQRSHLv2i32
    537663776U,	// UQRSHLv2i64
    3222280480U,	// UQRSHLv4i16
    1075058976U,	// UQRSHLv4i32
    1612192032U,	// UQRSHLv8i16
    3759937824U,	// UQRSHLv8i8
    17050235U,	// UQRSHRNb
    17050235U,	// UQRSHRNh
    17050235U,	// UQRSHRNs
    1644179774U,	// UQRSHRNv16i8_shift
    537401979U,	// UQRSHRNv2i32_shift
    1074797179U,	// UQRSHRNv4i16_shift
    571748670U,	// UQRSHRNv4i32_shift
    1108881726U,	// UQRSHRNv8i16_shift
    1612454523U,	// UQRSHRNv8i8_shift
    17049873U,	// UQSHLb
    17049873U,	// UQSHLd
    17049873U,	// UQSHLh
    17049873U,	// UQSHLs
    2147490065U,	// UQSHLv16i8
    2147490065U,	// UQSHLv16i8_shift
    17049873U,	// UQSHLv1i16
    17049873U,	// UQSHLv1i32
    17049873U,	// UQSHLv1i64
    17049873U,	// UQSHLv1i8
    2684885265U,	// UQSHLv2i32
    2684885265U,	// UQSHLv2i32_shift
    537663761U,	// UQSHLv2i64
    537663761U,	// UQSHLv2i64_shift
    3222280465U,	// UQSHLv4i16
    3222280465U,	// UQSHLv4i16_shift
    1075058961U,	// UQSHLv4i32
    1075058961U,	// UQSHLv4i32_shift
    1612192017U,	// UQSHLv8i16
    1612192017U,	// UQSHLv8i16_shift
    3759937809U,	// UQSHLv8i8
    3759937809U,	// UQSHLv8i8_shift
    17050218U,	// UQSHRNb
    17050218U,	// UQSHRNh
    17050218U,	// UQSHRNs
    1644179755U,	// UQSHRNv16i8_shift
    537401962U,	// UQSHRNv2i32_shift
    1074797162U,	// UQSHRNv4i16_shift
    571748651U,	// UQSHRNv4i32_shift
    1108881707U,	// UQSHRNv8i16_shift
    1612454506U,	// UQSHRNv8i8_shift
    2147488916U,	// UQSUBv16i8
    17048724U,	// UQSUBv1i16
    17048724U,	// UQSUBv1i32
    17048724U,	// UQSUBv1i64
    17048724U,	// UQSUBv1i8
    2684884116U,	// UQSUBv2i32
    537662612U,	// UQSUBv2i64
    3222279316U,	// UQSUBv4i16
    1075057812U,	// UQSUBv4i32
    1612190868U,	// UQSUBv8i16
    3759936660U,	// UQSUBv8i8
    3254792542U,	// UQXTNv16i8
    553921183U,	// UQXTNv1i16
    553921183U,	// UQXTNv1i32
    553921183U,	// UQXTNv1i8
    1611143839U,	// UQXTNv2i32
    2685409951U,	// UQXTNv4i16
    1645490526U,	// UQXTNv4i32
    2719494494U,	// UQXTNv8i16
    3223067295U,	// UQXTNv8i8
    1074271591U,	// URECPEv2i32
    2685670759U,	// URECPEv4i32
    2147489034U,	// URHADDv16i8
    2684884234U,	// URHADDv2i32
    3222279434U,	// URHADDv4i16
    1075057930U,	// URHADDv4i32
    1612190986U,	// URHADDv8i16
    3759936778U,	// URHADDv8i8
    2147490095U,	// URSHLv16i8
    17049903U,	// URSHLv1i64
    2684885295U,	// URSHLv2i32
    537663791U,	// URSHLv2i64
    3222280495U,	// URSHLv4i16
    1075058991U,	// URSHLv4i32
    1612192047U,	// URSHLv8i16
    3759937839U,	// URSHLv8i8
    17050581U,	// URSHRd
    2147490773U,	// URSHRv16i8_shift
    2684885973U,	// URSHRv2i32_shift
    537664469U,	// URSHRv2i64_shift
    3222281173U,	// URSHRv4i16_shift
    1075059669U,	// URSHRv4i32_shift
    1612192725U,	// URSHRv8i16_shift
    3759938517U,	// URSHRv8i8_shift
    1074271629U,	// URSQRTEv2i32
    2685670797U,	// URSQRTEv4i32
    67400254U,	// URSRAd
    2181050942U,	// URSRAv16i8_shift
    2718446142U,	// URSRAv2i32_shift
    571224638U,	// URSRAv2i64_shift
    3255841342U,	// URSRAv4i16_shift
    1108619838U,	// URSRAv4i32_shift
    1645752894U,	// URSRAv8i16_shift
    3793498686U,	// URSRAv8i8_shift
    2149060804U,	// USHLLv16i8_shift
    2685147465U,	// USHLLv2i32_shift
    3222542665U,	// USHLLv4i16_shift
    1074532548U,	// USHLLv4i32_shift
    1611927748U,	// USHLLv8i16_shift
    3759675721U,	// USHLLv8i8_shift
    2147490108U,	// USHLv16i8
    17049916U,	// USHLv1i64
    2684885308U,	// USHLv2i32
    537663804U,	// USHLv2i64
    3222280508U,	// USHLv4i16
    1075059004U,	// USHLv4i32
    1612192060U,	// USHLv8i16
    3759937852U,	// USHLv8i8
    17050594U,	// USHRd
    2147490786U,	// USHRv16i8_shift
    2684885986U,	// USHRv2i32_shift
    537664482U,	// USHRv2i64_shift
    3222281186U,	// USHRv4i16_shift
    1075059682U,	// USHRv4i32_shift
    1612192738U,	// USHRv8i16_shift
    3759938530U,	// USHRv8i8_shift
    33568047U,	// USQADDv16i8
    604271919U,	// USQADDv1i16
    604271919U,	// USQADDv1i32
    604271919U,	// USQADDv1i64
    604271919U,	// USQADDv1i8
    1107834159U,	// USQADDv2i32
    1644967215U,	// USQADDv2i64
    2182100271U,	// USQADDv4i16
    2719233327U,	// USQADDv4i32
    3256366383U,	// USQADDv8i16
    3793499439U,	// USQADDv8i8
    67400267U,	// USRAd
    2181050955U,	// USRAv16i8_shift
    2718446155U,	// USRAv2i32_shift
    571224651U,	// USRAv2i64_shift
    3255841355U,	// USRAv4i16_shift
    1108619851U,	// USRAv4i32_shift
    1645752907U,	// USRAv8i16_shift
    3793498699U,	// USRAv8i8_shift
    2149060756U,	// USUBLv16i8_v8i16
    2685147336U,	// USUBLv2i32_v2i64
    3222542536U,	// USUBLv4i16_v4i32
    1074532500U,	// USUBLv4i32_v2i64
    1611927700U,	// USUBLv8i16_v4i32
    3759675592U,	// USUBLv8i8_v8i16
    1612190125U,	// USUBWv16i8_v8i16
    537665027U,	// USUBWv2i32_v2i64
    1075060227U,	// USUBWv4i16_v4i32
    537661869U,	// USUBWv4i32_v2i64
    1075057069U,	// USUBWv8i16_v4i32
    1612193283U,	// USUBWv8i8_v8i16
    2147487782U,	// UZP1v16i8
    2684882982U,	// UZP1v2i32
    537661478U,	// UZP1v2i64
    3222278182U,	// UZP1v4i16
    1075056678U,	// UZP1v4i32
    1612189734U,	// UZP1v8i16
    3759935526U,	// UZP1v8i8
    2147488147U,	// UZP2v16i8
    2684883347U,	// UZP2v2i32
    537661843U,	// UZP2v2i64
    3222278547U,	// UZP2v4i16
    1075057043U,	// UZP2v4i32
    1612190099U,	// UZP2v8i16
    3759935891U,	// UZP2v8i8
    3254792536U,	// XTNv16i8
    1611143834U,	// XTNv2i32
    2685409946U,	// XTNv4i16
    1645490520U,	// XTNv4i32
    2719494488U,	// XTNv8i16
    3223067290U,	// XTNv8i8
    2147487776U,	// ZIP1v16i8
    2684882976U,	// ZIP1v2i32
    537661472U,	// ZIP1v2i64
    3222278176U,	// ZIP1v4i16
    1075056672U,	// ZIP1v4i32
    1612189728U,	// ZIP1v8i16
    3759935520U,	// ZIP1v8i8
    2147488141U,	// ZIP2v16i8
    2684883341U,	// ZIP2v2i32
    537661837U,	// ZIP2v2i64
    3222278541U,	// ZIP2v4i16
    1075057037U,	// ZIP2v4i32
    1612190093U,	// ZIP2v8i16
    3759935885U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    1U,	// ADCSWr
    1U,	// ADCSXr
    1U,	// ADCWr
    1U,	// ADCXr
    265U,	// ADDHNv2i64_v2i32
    273U,	// ADDHNv2i64_v4i32
    521U,	// ADDHNv4i32_v4i16
    529U,	// ADDHNv4i32_v8i16
    785U,	// ADDHNv8i16_v16i8
    777U,	// ADDHNv8i16_v8i8
    1033U,	// ADDPv16i8
    1289U,	// ADDPv2i32
    265U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    1545U,	// ADDPv4i16
    521U,	// ADDPv4i32
    777U,	// ADDPv8i16
    1801U,	// ADDPv8i8
    25U,	// ADDSWri
    0U,	// ADDSWrr
    33U,	// ADDSWrs
    41U,	// ADDSWrx
    25U,	// ADDSXri
    0U,	// ADDSXrr
    33U,	// ADDSXrs
    41U,	// ADDSXrx
    2049U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    25U,	// ADDWri
    0U,	// ADDWrr
    33U,	// ADDWrs
    41U,	// ADDWrx
    25U,	// ADDXri
    0U,	// ADDXrr
    33U,	// ADDXrs
    41U,	// ADDXrx
    2049U,	// ADDXrx64
    1033U,	// ADDv16i8
    1U,	// ADDv1i64
    1289U,	// ADDv2i32
    265U,	// ADDv2i64
    1545U,	// ADDv4i16
    521U,	// ADDv4i32
    777U,	// ADDv8i16
    1801U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    49U,	// ANDSWri
    0U,	// ANDSWrr
    33U,	// ANDSWrs
    57U,	// ANDSXri
    0U,	// ANDSXrr
    33U,	// ANDSXrs
    49U,	// ANDWri
    0U,	// ANDWrr
    33U,	// ANDWrs
    57U,	// ANDXri
    0U,	// ANDXrr
    33U,	// ANDXrs
    1033U,	// ANDv16i8
    1801U,	// ANDv8i8
    1U,	// ASRVWr
    1U,	// ASRVXr
    0U,	// B
    2369U,	// BFMWri
    2369U,	// BFMXri
    0U,	// BICSWrr
    33U,	// BICSWrs
    0U,	// BICSXrr
    33U,	// BICSXrs
    0U,	// BICWrr
    33U,	// BICWrs
    0U,	// BICXrr
    33U,	// BICXrs
    1033U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    1801U,	// BICv8i8
    1033U,	// BIFv16i8
    1801U,	// BIFv8i8
    1041U,	// BITv16i8
    1809U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    1041U,	// BSLv16i8
    1809U,	// BSLv8i8
    0U,	// Bcc
    2626U,	// CASALb
    2626U,	// CASALd
    2626U,	// CASALh
    2626U,	// CASALs
    2626U,	// CASAb
    2626U,	// CASAd
    2626U,	// CASAh
    2626U,	// CASAs
    2626U,	// CASLb
    2626U,	// CASLd
    2626U,	// CASLh
    2626U,	// CASLs
    0U,	// CASPALd
    0U,	// CASPALs
    0U,	// CASPAd
    0U,	// CASPAs
    0U,	// CASPLd
    0U,	// CASPLs
    0U,	// CASPd
    0U,	// CASPs
    2626U,	// CASb
    2626U,	// CASd
    2626U,	// CASh
    2626U,	// CASs
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    10497U,	// CCMNWi
    10497U,	// CCMNWr
    10497U,	// CCMNXi
    10497U,	// CCMNXr
    10497U,	// CCMPWi
    10497U,	// CCMPWr
    10497U,	// CCMPXi
    10497U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    1033U,	// CMEQv16i8
    2U,	// CMEQv16i8rz
    1U,	// CMEQv1i64
    2U,	// CMEQv1i64rz
    1289U,	// CMEQv2i32
    2U,	// CMEQv2i32rz
    265U,	// CMEQv2i64
    2U,	// CMEQv2i64rz
    1545U,	// CMEQv4i16
    2U,	// CMEQv4i16rz
    521U,	// CMEQv4i32
    2U,	// CMEQv4i32rz
    777U,	// CMEQv8i16
    2U,	// CMEQv8i16rz
    1801U,	// CMEQv8i8
    3U,	// CMEQv8i8rz
    1033U,	// CMGEv16i8
    2U,	// CMGEv16i8rz
    1U,	// CMGEv1i64
    2U,	// CMGEv1i64rz
    1289U,	// CMGEv2i32
    2U,	// CMGEv2i32rz
    265U,	// CMGEv2i64
    2U,	// CMGEv2i64rz
    1545U,	// CMGEv4i16
    2U,	// CMGEv4i16rz
    521U,	// CMGEv4i32
    2U,	// CMGEv4i32rz
    777U,	// CMGEv8i16
    2U,	// CMGEv8i16rz
    1801U,	// CMGEv8i8
    3U,	// CMGEv8i8rz
    1033U,	// CMGTv16i8
    2U,	// CMGTv16i8rz
    1U,	// CMGTv1i64
    2U,	// CMGTv1i64rz
    1289U,	// CMGTv2i32
    2U,	// CMGTv2i32rz
    265U,	// CMGTv2i64
    2U,	// CMGTv2i64rz
    1545U,	// CMGTv4i16
    2U,	// CMGTv4i16rz
    521U,	// CMGTv4i32
    2U,	// CMGTv4i32rz
    777U,	// CMGTv8i16
    2U,	// CMGTv8i16rz
    1801U,	// CMGTv8i8
    3U,	// CMGTv8i8rz
    1033U,	// CMHIv16i8
    1U,	// CMHIv1i64
    1289U,	// CMHIv2i32
    265U,	// CMHIv2i64
    1545U,	// CMHIv4i16
    521U,	// CMHIv4i32
    777U,	// CMHIv8i16
    1801U,	// CMHIv8i8
    1033U,	// CMHSv16i8
    1U,	// CMHSv1i64
    1289U,	// CMHSv2i32
    265U,	// CMHSv2i64
    1545U,	// CMHSv4i16
    521U,	// CMHSv4i32
    777U,	// CMHSv8i16
    1801U,	// CMHSv8i8
    2U,	// CMLEv16i8rz
    2U,	// CMLEv1i64rz
    2U,	// CMLEv2i32rz
    2U,	// CMLEv2i64rz
    2U,	// CMLEv4i16rz
    2U,	// CMLEv4i32rz
    2U,	// CMLEv8i16rz
    3U,	// CMLEv8i8rz
    2U,	// CMLTv16i8rz
    2U,	// CMLTv1i64rz
    2U,	// CMLTv2i32rz
    2U,	// CMLTv2i64rz
    2U,	// CMLTv4i16rz
    2U,	// CMLTv4i32rz
    2U,	// CMLTv8i16rz
    3U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    1033U,	// CMTSTv16i8
    1U,	// CMTSTv1i64
    1289U,	// CMTSTv2i32
    265U,	// CMTSTv2i64
    1545U,	// CMTSTv4i16
    521U,	// CMTSTv4i32
    777U,	// CMTSTv8i16
    1801U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    75U,	// CPYi16
    75U,	// CPYi32
    75U,	// CPYi64
    75U,	// CPYi8
    1U,	// CRC32Brr
    1U,	// CRC32CBrr
    1U,	// CRC32CHrr
    1U,	// CRC32CWrr
    1U,	// CRC32CXrr
    1U,	// CRC32Hrr
    1U,	// CRC32Wrr
    1U,	// CRC32Xrr
    10497U,	// CSELWr
    10497U,	// CSELXr
    10497U,	// CSINCWr
    10497U,	// CSINCXr
    10497U,	// CSINVWr
    10497U,	// CSINVXr
    10497U,	// CSNEGWr
    10497U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    75U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    75U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    75U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    75U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    75U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    75U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    75U,	// DUPv8i8lane
    0U,	// EONWrr
    33U,	// EONWrs
    0U,	// EONXrr
    33U,	// EONXrs
    49U,	// EORWri
    0U,	// EORWrr
    33U,	// EORWrs
    57U,	// EORXri
    0U,	// EORXrr
    33U,	// EORXrs
    1033U,	// EORv16i8
    1801U,	// EORv8i8
    0U,	// ERET
    18689U,	// EXTRWrri
    18689U,	// EXTRXrri
    2825U,	// EXTv16i8
    3081U,	// EXTv8i8
    0U,	// F128CSEL
    1U,	// FABD16
    1U,	// FABD32
    1U,	// FABD64
    1289U,	// FABDv2f32
    265U,	// FABDv2f64
    1545U,	// FABDv4f16
    521U,	// FABDv4f32
    777U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    1U,	// FACGE16
    1U,	// FACGE32
    1U,	// FACGE64
    1289U,	// FACGEv2f32
    265U,	// FACGEv2f64
    1545U,	// FACGEv4f16
    521U,	// FACGEv4f32
    777U,	// FACGEv8f16
    1U,	// FACGT16
    1U,	// FACGT32
    1U,	// FACGT64
    1289U,	// FACGTv2f32
    265U,	// FACGTv2f64
    1545U,	// FACGTv4f16
    521U,	// FACGTv4f32
    777U,	// FACGTv8f16
    1U,	// FADDDrr
    1U,	// FADDHrr
    1289U,	// FADDPv2f32
    265U,	// FADDPv2f64
    3U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    1545U,	// FADDPv4f16
    521U,	// FADDPv4f32
    777U,	// FADDPv8f16
    1U,	// FADDSrr
    1289U,	// FADDv2f32
    265U,	// FADDv2f64
    1545U,	// FADDv4f16
    521U,	// FADDv4f32
    777U,	// FADDv8f16
    10497U,	// FCCMPDrr
    10497U,	// FCCMPEDrr
    10497U,	// FCCMPEHrr
    10497U,	// FCCMPESrr
    10497U,	// FCCMPHrr
    10497U,	// FCCMPSrr
    1U,	// FCMEQ16
    1U,	// FCMEQ32
    1U,	// FCMEQ64
    3U,	// FCMEQv1i16rz
    3U,	// FCMEQv1i32rz
    3U,	// FCMEQv1i64rz
    1289U,	// FCMEQv2f32
    265U,	// FCMEQv2f64
    3U,	// FCMEQv2i32rz
    4U,	// FCMEQv2i64rz
    1545U,	// FCMEQv4f16
    521U,	// FCMEQv4f32
    4U,	// FCMEQv4i16rz
    4U,	// FCMEQv4i32rz
    777U,	// FCMEQv8f16
    4U,	// FCMEQv8i16rz
    1U,	// FCMGE16
    1U,	// FCMGE32
    1U,	// FCMGE64
    3U,	// FCMGEv1i16rz
    3U,	// FCMGEv1i32rz
    3U,	// FCMGEv1i64rz
    1289U,	// FCMGEv2f32
    265U,	// FCMGEv2f64
    3U,	// FCMGEv2i32rz
    4U,	// FCMGEv2i64rz
    1545U,	// FCMGEv4f16
    521U,	// FCMGEv4f32
    4U,	// FCMGEv4i16rz
    4U,	// FCMGEv4i32rz
    777U,	// FCMGEv8f16
    4U,	// FCMGEv8i16rz
    1U,	// FCMGT16
    1U,	// FCMGT32
    1U,	// FCMGT64
    3U,	// FCMGTv1i16rz
    3U,	// FCMGTv1i32rz
    3U,	// FCMGTv1i64rz
    1289U,	// FCMGTv2f32
    265U,	// FCMGTv2f64
    3U,	// FCMGTv2i32rz
    4U,	// FCMGTv2i64rz
    1545U,	// FCMGTv4f16
    521U,	// FCMGTv4f32
    4U,	// FCMGTv4i16rz
    4U,	// FCMGTv4i32rz
    777U,	// FCMGTv8f16
    4U,	// FCMGTv8i16rz
    3U,	// FCMLEv1i16rz
    3U,	// FCMLEv1i32rz
    3U,	// FCMLEv1i64rz
    3U,	// FCMLEv2i32rz
    4U,	// FCMLEv2i64rz
    4U,	// FCMLEv4i16rz
    4U,	// FCMLEv4i32rz
    4U,	// FCMLEv8i16rz
    3U,	// FCMLTv1i16rz
    3U,	// FCMLTv1i32rz
    3U,	// FCMLTv1i64rz
    3U,	// FCMLTv2i32rz
    4U,	// FCMLTv2i64rz
    4U,	// FCMLTv4i16rz
    4U,	// FCMLTv4i32rz
    4U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    10497U,	// FCSELDrrr
    10497U,	// FCSELHrrr
    10497U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    1U,	// FCVTZSSWDri
    1U,	// FCVTZSSWHri
    1U,	// FCVTZSSWSri
    1U,	// FCVTZSSXDri
    1U,	// FCVTZSSXHri
    1U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    1U,	// FCVTZSd
    1U,	// FCVTZSh
    1U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    1U,	// FCVTZSv2i32_shift
    1U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    1U,	// FCVTZSv4i16_shift
    1U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    1U,	// FCVTZSv8i16_shift
    1U,	// FCVTZUSWDri
    1U,	// FCVTZUSWHri
    1U,	// FCVTZUSWSri
    1U,	// FCVTZUSXDri
    1U,	// FCVTZUSXHri
    1U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    1U,	// FCVTZUd
    1U,	// FCVTZUh
    1U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    1U,	// FCVTZUv2i32_shift
    1U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    1U,	// FCVTZUv4i16_shift
    1U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    1U,	// FCVTZUv8i16_shift
    1U,	// FDIVDrr
    1U,	// FDIVHrr
    1U,	// FDIVSrr
    1289U,	// FDIVv2f32
    265U,	// FDIVv2f64
    1545U,	// FDIVv4f16
    521U,	// FDIVv4f32
    777U,	// FDIVv8f16
    18689U,	// FMADDDrrr
    18689U,	// FMADDHrrr
    18689U,	// FMADDSrrr
    1U,	// FMAXDrr
    1U,	// FMAXHrr
    1U,	// FMAXNMDrr
    1U,	// FMAXNMHrr
    1289U,	// FMAXNMPv2f32
    265U,	// FMAXNMPv2f64
    3U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    1545U,	// FMAXNMPv4f16
    521U,	// FMAXNMPv4f32
    777U,	// FMAXNMPv8f16
    1U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    1289U,	// FMAXNMv2f32
    265U,	// FMAXNMv2f64
    1545U,	// FMAXNMv4f16
    521U,	// FMAXNMv4f32
    777U,	// FMAXNMv8f16
    1289U,	// FMAXPv2f32
    265U,	// FMAXPv2f64
    3U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    1545U,	// FMAXPv4f16
    521U,	// FMAXPv4f32
    777U,	// FMAXPv8f16
    1U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    1289U,	// FMAXv2f32
    265U,	// FMAXv2f64
    1545U,	// FMAXv4f16
    521U,	// FMAXv4f32
    777U,	// FMAXv8f16
    1U,	// FMINDrr
    1U,	// FMINHrr
    1U,	// FMINNMDrr
    1U,	// FMINNMHrr
    1289U,	// FMINNMPv2f32
    265U,	// FMINNMPv2f64
    3U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    1545U,	// FMINNMPv4f16
    521U,	// FMINNMPv4f32
    777U,	// FMINNMPv8f16
    1U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    1289U,	// FMINNMv2f32
    265U,	// FMINNMv2f64
    1545U,	// FMINNMv4f16
    521U,	// FMINNMv4f32
    777U,	// FMINNMv8f16
    1289U,	// FMINPv2f32
    265U,	// FMINPv2f64
    3U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    1545U,	// FMINPv4f16
    521U,	// FMINPv4f32
    777U,	// FMINPv8f16
    1U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    1289U,	// FMINv2f32
    265U,	// FMINv2f64
    1545U,	// FMINv4f16
    521U,	// FMINv4f32
    777U,	// FMINv8f16
    27921U,	// FMLAv1i16_indexed
    28177U,	// FMLAv1i32_indexed
    28433U,	// FMLAv1i64_indexed
    1297U,	// FMLAv2f32
    273U,	// FMLAv2f64
    28177U,	// FMLAv2i32_indexed
    28433U,	// FMLAv2i64_indexed
    1553U,	// FMLAv4f16
    529U,	// FMLAv4f32
    27921U,	// FMLAv4i16_indexed
    28177U,	// FMLAv4i32_indexed
    785U,	// FMLAv8f16
    27921U,	// FMLAv8i16_indexed
    27921U,	// FMLSv1i16_indexed
    28177U,	// FMLSv1i32_indexed
    28433U,	// FMLSv1i64_indexed
    1297U,	// FMLSv2f32
    273U,	// FMLSv2f64
    28177U,	// FMLSv2i32_indexed
    28433U,	// FMLSv2i64_indexed
    1553U,	// FMLSv4f16
    529U,	// FMLSv4f32
    27921U,	// FMLSv4i16_indexed
    28177U,	// FMLSv4i32_indexed
    785U,	// FMLSv8f16
    27921U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    75U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    18689U,	// FMSUBDrrr
    18689U,	// FMSUBHrrr
    18689U,	// FMSUBSrrr
    1U,	// FMULDrr
    1U,	// FMULHrr
    1U,	// FMULSrr
    1U,	// FMULX16
    1U,	// FMULX32
    1U,	// FMULX64
    36105U,	// FMULXv1i16_indexed
    36361U,	// FMULXv1i32_indexed
    36617U,	// FMULXv1i64_indexed
    1289U,	// FMULXv2f32
    265U,	// FMULXv2f64
    36361U,	// FMULXv2i32_indexed
    36617U,	// FMULXv2i64_indexed
    1545U,	// FMULXv4f16
    521U,	// FMULXv4f32
    36105U,	// FMULXv4i16_indexed
    36361U,	// FMULXv4i32_indexed
    777U,	// FMULXv8f16
    36105U,	// FMULXv8i16_indexed
    36105U,	// FMULv1i16_indexed
    36361U,	// FMULv1i32_indexed
    36617U,	// FMULv1i64_indexed
    1289U,	// FMULv2f32
    265U,	// FMULv2f64
    36361U,	// FMULv2i32_indexed
    36617U,	// FMULv2i64_indexed
    1545U,	// FMULv4f16
    521U,	// FMULv4f32
    36105U,	// FMULv4i16_indexed
    36361U,	// FMULv4i32_indexed
    777U,	// FMULv8f16
    36105U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    18689U,	// FNMADDDrrr
    18689U,	// FNMADDHrrr
    18689U,	// FNMADDSrrr
    18689U,	// FNMSUBDrrr
    18689U,	// FNMSUBHrrr
    18689U,	// FNMSUBSrrr
    1U,	// FNMULDrr
    1U,	// FNMULHrr
    1U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    1U,	// FRECPS16
    1U,	// FRECPS32
    1U,	// FRECPS64
    1289U,	// FRECPSv2f32
    265U,	// FRECPSv2f64
    1545U,	// FRECPSv4f16
    521U,	// FRECPSv4f32
    777U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    1U,	// FRSQRTS16
    1U,	// FRSQRTS32
    1U,	// FRSQRTS64
    1289U,	// FRSQRTSv2f32
    265U,	// FRSQRTSv2f64
    1545U,	// FRSQRTSv4f16
    521U,	// FRSQRTSv4f32
    777U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    1U,	// FSUBDrr
    1U,	// FSUBHrr
    1U,	// FSUBSrr
    1289U,	// FSUBv2f32
    265U,	// FSUBv2f64
    1545U,	// FSUBv4f16
    521U,	// FSUBv4f32
    777U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    83U,	// INSvi16lane
    0U,	// INSvi32gpr
    83U,	// INSvi32lane
    0U,	// INSvi64gpr
    83U,	// INSvi64lane
    0U,	// INSvi8gpr
    83U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDALb
    0U,	// LDADDALd
    0U,	// LDADDALh
    0U,	// LDADDALs
    0U,	// LDADDAb
    0U,	// LDADDAd
    0U,	// LDADDAh
    0U,	// LDADDAs
    0U,	// LDADDLb
    0U,	// LDADDLd
    0U,	// LDADDLh
    0U,	// LDADDLs
    0U,	// LDADDb
    0U,	// LDADDd
    0U,	// LDADDh
    0U,	// LDADDs
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    2562U,	// LDAXPW
    2562U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    0U,	// LDCLRALb
    0U,	// LDCLRALd
    0U,	// LDCLRALh
    0U,	// LDCLRALs
    0U,	// LDCLRAb
    0U,	// LDCLRAd
    0U,	// LDCLRAh
    0U,	// LDCLRAs
    0U,	// LDCLRLb
    0U,	// LDCLRLd
    0U,	// LDCLRLh
    0U,	// LDCLRLs
    0U,	// LDCLRb
    0U,	// LDCLRd
    0U,	// LDCLRh
    0U,	// LDCLRs
    0U,	// LDEORALb
    0U,	// LDEORALd
    0U,	// LDEORALh
    0U,	// LDEORALs
    0U,	// LDEORAb
    0U,	// LDEORAd
    0U,	// LDEORAh
    0U,	// LDEORAs
    0U,	// LDEORLb
    0U,	// LDEORLd
    0U,	// LDEORLh
    0U,	// LDEORLs
    0U,	// LDEORb
    0U,	// LDEORd
    0U,	// LDEORh
    0U,	// LDEORs
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    43266U,	// LDNPDi
    51458U,	// LDNPQi
    59650U,	// LDNPSi
    59650U,	// LDNPWi
    43266U,	// LDNPXi
    43266U,	// LDPDi
    4162U,	// LDPDpost
    2370U,	// LDPDpre
    51458U,	// LDPQi
    12354U,	// LDPQpost
    10562U,	// LDPQpre
    59650U,	// LDPSWi
    20546U,	// LDPSWpost
    18754U,	// LDPSWpre
    59650U,	// LDPSi
    20546U,	// LDPSpost
    18754U,	// LDPSpre
    59650U,	// LDPWi
    20546U,	// LDPWpost
    18754U,	// LDPWpre
    43266U,	// LDPXi
    4162U,	// LDPXpost
    2370U,	// LDPXpre
    4U,	// LDRBBpost
    4417U,	// LDRBBpre
    26881U,	// LDRBBroW
    35073U,	// LDRBBroX
    89U,	// LDRBBui
    4U,	// LDRBpost
    4417U,	// LDRBpre
    26881U,	// LDRBroW
    35073U,	// LDRBroX
    89U,	// LDRBui
    0U,	// LDRDl
    4U,	// LDRDpost
    4417U,	// LDRDpre
    43265U,	// LDRDroW
    51457U,	// LDRDroX
    97U,	// LDRDui
    4U,	// LDRHHpost
    4417U,	// LDRHHpre
    59649U,	// LDRHHroW
    2305U,	// LDRHHroX
    105U,	// LDRHHui
    4U,	// LDRHpost
    4417U,	// LDRHpre
    59649U,	// LDRHroW
    2305U,	// LDRHroX
    105U,	// LDRHui
    0U,	// LDRQl
    4U,	// LDRQpost
    4417U,	// LDRQpre
    10497U,	// LDRQroW
    18689U,	// LDRQroX
    113U,	// LDRQui
    4U,	// LDRSBWpost
    4417U,	// LDRSBWpre
    26881U,	// LDRSBWroW
    35073U,	// LDRSBWroX
    89U,	// LDRSBWui
    4U,	// LDRSBXpost
    4417U,	// LDRSBXpre
    26881U,	// LDRSBXroW
    35073U,	// LDRSBXroX
    89U,	// LDRSBXui
    4U,	// LDRSHWpost
    4417U,	// LDRSHWpre
    59649U,	// LDRSHWroW
    2305U,	// LDRSHWroX
    105U,	// LDRSHWui
    4U,	// LDRSHXpost
    4417U,	// LDRSHXpre
    59649U,	// LDRSHXroW
    2305U,	// LDRSHXroX
    105U,	// LDRSHXui
    0U,	// LDRSWl
    4U,	// LDRSWpost
    4417U,	// LDRSWpre
    26881U,	// LDRSWroW
    35073U,	// LDRSWroX
    121U,	// LDRSWui
    0U,	// LDRSl
    4U,	// LDRSpost
    4417U,	// LDRSpre
    26881U,	// LDRSroW
    35073U,	// LDRSroX
    121U,	// LDRSui
    0U,	// LDRWl
    4U,	// LDRWpost
    4417U,	// LDRWpre
    26881U,	// LDRWroW
    35073U,	// LDRWroX
    121U,	// LDRWui
    0U,	// LDRXl
    4U,	// LDRXpost
    4417U,	// LDRXpre
    43265U,	// LDRXroW
    51457U,	// LDRXroX
    97U,	// LDRXui
    0U,	// LDSETALb
    0U,	// LDSETALd
    0U,	// LDSETALh
    0U,	// LDSETALs
    0U,	// LDSETAb
    0U,	// LDSETAd
    0U,	// LDSETAh
    0U,	// LDSETAs
    0U,	// LDSETLb
    0U,	// LDSETLd
    0U,	// LDSETLh
    0U,	// LDSETLs
    0U,	// LDSETb
    0U,	// LDSETd
    0U,	// LDSETh
    0U,	// LDSETs
    0U,	// LDSMAXALb
    0U,	// LDSMAXALd
    0U,	// LDSMAXALh
    0U,	// LDSMAXALs
    0U,	// LDSMAXAb
    0U,	// LDSMAXAd
    0U,	// LDSMAXAh
    0U,	// LDSMAXAs
    0U,	// LDSMAXLb
    0U,	// LDSMAXLd
    0U,	// LDSMAXLh
    0U,	// LDSMAXLs
    0U,	// LDSMAXb
    0U,	// LDSMAXd
    0U,	// LDSMAXh
    0U,	// LDSMAXs
    0U,	// LDSMINALb
    0U,	// LDSMINALd
    0U,	// LDSMINALh
    0U,	// LDSMINALs
    0U,	// LDSMINAb
    0U,	// LDSMINAd
    0U,	// LDSMINAh
    0U,	// LDSMINAs
    0U,	// LDSMINLb
    0U,	// LDSMINLd
    0U,	// LDSMINLh
    0U,	// LDSMINLs
    0U,	// LDSMINb
    0U,	// LDSMINd
    0U,	// LDSMINh
    0U,	// LDSMINs
    2561U,	// LDTRBi
    2561U,	// LDTRHi
    2561U,	// LDTRSBWi
    2561U,	// LDTRSBXi
    2561U,	// LDTRSHWi
    2561U,	// LDTRSHXi
    2561U,	// LDTRSWi
    2561U,	// LDTRWi
    2561U,	// LDTRXi
    0U,	// LDUMAXALb
    0U,	// LDUMAXALd
    0U,	// LDUMAXALh
    0U,	// LDUMAXALs
    0U,	// LDUMAXAb
    0U,	// LDUMAXAd
    0U,	// LDUMAXAh
    0U,	// LDUMAXAs
    0U,	// LDUMAXLb
    0U,	// LDUMAXLd
    0U,	// LDUMAXLh
    0U,	// LDUMAXLs
    0U,	// LDUMAXb
    0U,	// LDUMAXd
    0U,	// LDUMAXh
    0U,	// LDUMAXs
    0U,	// LDUMINALb
    0U,	// LDUMINALd
    0U,	// LDUMINALh
    0U,	// LDUMINALs
    0U,	// LDUMINAb
    0U,	// LDUMINAd
    0U,	// LDUMINAh
    0U,	// LDUMINAs
    0U,	// LDUMINLb
    0U,	// LDUMINLd
    0U,	// LDUMINLh
    0U,	// LDUMINLs
    0U,	// LDUMINb
    0U,	// LDUMINd
    0U,	// LDUMINh
    0U,	// LDUMINs
    2561U,	// LDURBBi
    2561U,	// LDURBi
    2561U,	// LDURDi
    2561U,	// LDURHHi
    2561U,	// LDURHi
    2561U,	// LDURQi
    2561U,	// LDURSBWi
    2561U,	// LDURSBXi
    2561U,	// LDURSHWi
    2561U,	// LDURSHXi
    2561U,	// LDURSWi
    2561U,	// LDURSi
    2561U,	// LDURWi
    2561U,	// LDURXi
    2562U,	// LDXPW
    2562U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    1U,	// LSLVWr
    1U,	// LSLVXr
    1U,	// LSRVWr
    1U,	// LSRVXr
    18689U,	// MADDWrrr
    18689U,	// MADDXrrr
    1041U,	// MLAv16i8
    1297U,	// MLAv2i32
    28177U,	// MLAv2i32_indexed
    1553U,	// MLAv4i16
    27921U,	// MLAv4i16_indexed
    529U,	// MLAv4i32
    28177U,	// MLAv4i32_indexed
    785U,	// MLAv8i16
    27921U,	// MLAv8i16_indexed
    1809U,	// MLAv8i8
    1041U,	// MLSv16i8
    1297U,	// MLSv2i32
    28177U,	// MLSv2i32_indexed
    1553U,	// MLSv4i16
    27921U,	// MLSv4i16_indexed
    529U,	// MLSv4i32
    28177U,	// MLSv4i32_indexed
    785U,	// MLSv8i16
    27921U,	// MLSv8i16_indexed
    1809U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    4U,	// MOVIv2i32
    4U,	// MOVIv2s_msl
    4U,	// MOVIv4i16
    4U,	// MOVIv4i32
    4U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    4U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    4U,	// MOVNWi
    4U,	// MOVNXi
    4U,	// MOVZWi
    4U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    18689U,	// MSUBWrrr
    18689U,	// MSUBXrrr
    1033U,	// MULv16i8
    1289U,	// MULv2i32
    36361U,	// MULv2i32_indexed
    1545U,	// MULv4i16
    36105U,	// MULv4i16_indexed
    521U,	// MULv4i32
    36361U,	// MULv4i32_indexed
    777U,	// MULv8i16
    36105U,	// MULv8i16_indexed
    1801U,	// MULv8i8
    4U,	// MVNIv2i32
    4U,	// MVNIv2s_msl
    4U,	// MVNIv4i16
    4U,	// MVNIv4i32
    4U,	// MVNIv4s_msl
    4U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    33U,	// ORNWrs
    0U,	// ORNXrr
    33U,	// ORNXrs
    1033U,	// ORNv16i8
    1801U,	// ORNv8i8
    49U,	// ORRWri
    0U,	// ORRWrr
    33U,	// ORRWrs
    57U,	// ORRXri
    0U,	// ORRXrr
    33U,	// ORRXrs
    1033U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    1801U,	// ORRv8i8
    1033U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    1801U,	// PMULLv8i8
    1033U,	// PMULv16i8
    1801U,	// PMULv8i8
    0U,	// PRFMl
    43265U,	// PRFMroW
    51457U,	// PRFMroX
    97U,	// PRFMui
    2561U,	// PRFUMi
    265U,	// RADDHNv2i64_v2i32
    273U,	// RADDHNv2i64_v4i32
    521U,	// RADDHNv4i32_v4i16
    529U,	// RADDHNv4i32_v8i16
    785U,	// RADDHNv8i16_v16i8
    777U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    1U,	// RORVWr
    1U,	// RORVXr
    65U,	// RSHRNv16i8_shift
    1U,	// RSHRNv2i32_shift
    1U,	// RSHRNv4i16_shift
    65U,	// RSHRNv4i32_shift
    65U,	// RSHRNv8i16_shift
    1U,	// RSHRNv8i8_shift
    265U,	// RSUBHNv2i64_v2i32
    273U,	// RSUBHNv2i64_v4i32
    521U,	// RSUBHNv4i32_v4i16
    529U,	// RSUBHNv4i32_v8i16
    785U,	// RSUBHNv8i16_v16i8
    777U,	// RSUBHNv8i16_v8i8
    1041U,	// SABALv16i8_v8i16
    1297U,	// SABALv2i32_v2i64
    1553U,	// SABALv4i16_v4i32
    529U,	// SABALv4i32_v2i64
    785U,	// SABALv8i16_v4i32
    1809U,	// SABALv8i8_v8i16
    1041U,	// SABAv16i8
    1297U,	// SABAv2i32
    1553U,	// SABAv4i16
    529U,	// SABAv4i32
    785U,	// SABAv8i16
    1809U,	// SABAv8i8
    1033U,	// SABDLv16i8_v8i16
    1289U,	// SABDLv2i32_v2i64
    1545U,	// SABDLv4i16_v4i32
    521U,	// SABDLv4i32_v2i64
    777U,	// SABDLv8i16_v4i32
    1801U,	// SABDLv8i8_v8i16
    1033U,	// SABDv16i8
    1289U,	// SABDv2i32
    1545U,	// SABDv4i16
    521U,	// SABDv4i32
    777U,	// SABDv8i16
    1801U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    1033U,	// SADDLv16i8_v8i16
    1289U,	// SADDLv2i32_v2i64
    1545U,	// SADDLv4i16_v4i32
    521U,	// SADDLv4i32_v2i64
    777U,	// SADDLv8i16_v4i32
    1801U,	// SADDLv8i8_v8i16
    1033U,	// SADDWv16i8_v8i16
    1289U,	// SADDWv2i32_v2i64
    1545U,	// SADDWv4i16_v4i32
    521U,	// SADDWv4i32_v2i64
    777U,	// SADDWv8i16_v4i32
    1801U,	// SADDWv8i8_v8i16
    1U,	// SBCSWr
    1U,	// SBCSXr
    1U,	// SBCWr
    1U,	// SBCXr
    18689U,	// SBFMWri
    18689U,	// SBFMXri
    1U,	// SCVTFSWDri
    1U,	// SCVTFSWHri
    1U,	// SCVTFSWSri
    1U,	// SCVTFSXDri
    1U,	// SCVTFSXHri
    1U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    1U,	// SCVTFd
    1U,	// SCVTFh
    1U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    1U,	// SCVTFv2i32_shift
    1U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    1U,	// SCVTFv4i16_shift
    1U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    1U,	// SCVTFv8i16_shift
    1U,	// SDIVWr
    1U,	// SDIVXr
    529U,	// SHA1Crrr
    0U,	// SHA1Hrr
    529U,	// SHA1Mrrr
    529U,	// SHA1Prrr
    529U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    529U,	// SHA256H2rrr
    529U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    529U,	// SHA256SU1rrr
    1033U,	// SHADDv16i8
    1289U,	// SHADDv2i32
    1545U,	// SHADDv4i16
    521U,	// SHADDv4i32
    777U,	// SHADDv8i16
    1801U,	// SHADDv8i8
    4U,	// SHLLv16i8
    5U,	// SHLLv2i32
    5U,	// SHLLv4i16
    5U,	// SHLLv4i32
    5U,	// SHLLv8i16
    5U,	// SHLLv8i8
    1U,	// SHLd
    1U,	// SHLv16i8_shift
    1U,	// SHLv2i32_shift
    1U,	// SHLv2i64_shift
    1U,	// SHLv4i16_shift
    1U,	// SHLv4i32_shift
    1U,	// SHLv8i16_shift
    1U,	// SHLv8i8_shift
    65U,	// SHRNv16i8_shift
    1U,	// SHRNv2i32_shift
    1U,	// SHRNv4i16_shift
    65U,	// SHRNv4i32_shift
    65U,	// SHRNv8i16_shift
    1U,	// SHRNv8i8_shift
    1033U,	// SHSUBv16i8
    1289U,	// SHSUBv2i32
    1545U,	// SHSUBv4i16
    521U,	// SHSUBv4i32
    777U,	// SHSUBv8i16
    1801U,	// SHSUBv8i8
    65U,	// SLId
    65U,	// SLIv16i8_shift
    65U,	// SLIv2i32_shift
    65U,	// SLIv2i64_shift
    65U,	// SLIv4i16_shift
    65U,	// SLIv4i32_shift
    65U,	// SLIv8i16_shift
    65U,	// SLIv8i8_shift
    18689U,	// SMADDLrrr
    1033U,	// SMAXPv16i8
    1289U,	// SMAXPv2i32
    1545U,	// SMAXPv4i16
    521U,	// SMAXPv4i32
    777U,	// SMAXPv8i16
    1801U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    1033U,	// SMAXv16i8
    1289U,	// SMAXv2i32
    1545U,	// SMAXv4i16
    521U,	// SMAXv4i32
    777U,	// SMAXv8i16
    1801U,	// SMAXv8i8
    0U,	// SMC
    1033U,	// SMINPv16i8
    1289U,	// SMINPv2i32
    1545U,	// SMINPv4i16
    521U,	// SMINPv4i32
    777U,	// SMINPv8i16
    1801U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    1033U,	// SMINv16i8
    1289U,	// SMINv2i32
    1545U,	// SMINv4i16
    521U,	// SMINv4i32
    777U,	// SMINv8i16
    1801U,	// SMINv8i8
    1041U,	// SMLALv16i8_v8i16
    28177U,	// SMLALv2i32_indexed
    1297U,	// SMLALv2i32_v2i64
    27921U,	// SMLALv4i16_indexed
    1553U,	// SMLALv4i16_v4i32
    28177U,	// SMLALv4i32_indexed
    529U,	// SMLALv4i32_v2i64
    27921U,	// SMLALv8i16_indexed
    785U,	// SMLALv8i16_v4i32
    1809U,	// SMLALv8i8_v8i16
    1041U,	// SMLSLv16i8_v8i16
    28177U,	// SMLSLv2i32_indexed
    1297U,	// SMLSLv2i32_v2i64
    27921U,	// SMLSLv4i16_indexed
    1553U,	// SMLSLv4i16_v4i32
    28177U,	// SMLSLv4i32_indexed
    529U,	// SMLSLv4i32_v2i64
    27921U,	// SMLSLv8i16_indexed
    785U,	// SMLSLv8i16_v4i32
    1809U,	// SMLSLv8i8_v8i16
    75U,	// SMOVvi16to32
    75U,	// SMOVvi16to64
    75U,	// SMOVvi32to64
    75U,	// SMOVvi8to32
    75U,	// SMOVvi8to64
    18689U,	// SMSUBLrrr
    1U,	// SMULHrr
    1033U,	// SMULLv16i8_v8i16
    36361U,	// SMULLv2i32_indexed
    1289U,	// SMULLv2i32_v2i64
    36105U,	// SMULLv4i16_indexed
    1545U,	// SMULLv4i16_v4i32
    36361U,	// SMULLv4i32_indexed
    521U,	// SMULLv4i32_v2i64
    36105U,	// SMULLv8i16_indexed
    777U,	// SMULLv8i16_v4i32
    1801U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    1033U,	// SQADDv16i8
    1U,	// SQADDv1i16
    1U,	// SQADDv1i32
    1U,	// SQADDv1i64
    1U,	// SQADDv1i8
    1289U,	// SQADDv2i32
    265U,	// SQADDv2i64
    1545U,	// SQADDv4i16
    521U,	// SQADDv4i32
    777U,	// SQADDv8i16
    1801U,	// SQADDv8i8
    65U,	// SQDMLALi16
    65U,	// SQDMLALi32
    27921U,	// SQDMLALv1i32_indexed
    28177U,	// SQDMLALv1i64_indexed
    28177U,	// SQDMLALv2i32_indexed
    1297U,	// SQDMLALv2i32_v2i64
    27921U,	// SQDMLALv4i16_indexed
    1553U,	// SQDMLALv4i16_v4i32
    28177U,	// SQDMLALv4i32_indexed
    529U,	// SQDMLALv4i32_v2i64
    27921U,	// SQDMLALv8i16_indexed
    785U,	// SQDMLALv8i16_v4i32
    65U,	// SQDMLSLi16
    65U,	// SQDMLSLi32
    27921U,	// SQDMLSLv1i32_indexed
    28177U,	// SQDMLSLv1i64_indexed
    28177U,	// SQDMLSLv2i32_indexed
    1297U,	// SQDMLSLv2i32_v2i64
    27921U,	// SQDMLSLv4i16_indexed
    1553U,	// SQDMLSLv4i16_v4i32
    28177U,	// SQDMLSLv4i32_indexed
    529U,	// SQDMLSLv4i32_v2i64
    27921U,	// SQDMLSLv8i16_indexed
    785U,	// SQDMLSLv8i16_v4i32
    1U,	// SQDMULHv1i16
    36105U,	// SQDMULHv1i16_indexed
    1U,	// SQDMULHv1i32
    36361U,	// SQDMULHv1i32_indexed
    1289U,	// SQDMULHv2i32
    36361U,	// SQDMULHv2i32_indexed
    1545U,	// SQDMULHv4i16
    36105U,	// SQDMULHv4i16_indexed
    521U,	// SQDMULHv4i32
    36361U,	// SQDMULHv4i32_indexed
    777U,	// SQDMULHv8i16
    36105U,	// SQDMULHv8i16_indexed
    1U,	// SQDMULLi16
    1U,	// SQDMULLi32
    36105U,	// SQDMULLv1i32_indexed
    36361U,	// SQDMULLv1i64_indexed
    36361U,	// SQDMULLv2i32_indexed
    1289U,	// SQDMULLv2i32_v2i64
    36105U,	// SQDMULLv4i16_indexed
    1545U,	// SQDMULLv4i16_v4i32
    36361U,	// SQDMULLv4i32_indexed
    521U,	// SQDMULLv4i32_v2i64
    36105U,	// SQDMULLv8i16_indexed
    777U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    27921U,	// SQRDMLAHi16_indexed
    28177U,	// SQRDMLAHi32_indexed
    65U,	// SQRDMLAHv1i16
    65U,	// SQRDMLAHv1i32
    1297U,	// SQRDMLAHv2i32
    28177U,	// SQRDMLAHv2i32_indexed
    1553U,	// SQRDMLAHv4i16
    27921U,	// SQRDMLAHv4i16_indexed
    529U,	// SQRDMLAHv4i32
    28177U,	// SQRDMLAHv4i32_indexed
    785U,	// SQRDMLAHv8i16
    27921U,	// SQRDMLAHv8i16_indexed
    27921U,	// SQRDMLSHi16_indexed
    28177U,	// SQRDMLSHi32_indexed
    65U,	// SQRDMLSHv1i16
    65U,	// SQRDMLSHv1i32
    1297U,	// SQRDMLSHv2i32
    28177U,	// SQRDMLSHv2i32_indexed
    1553U,	// SQRDMLSHv4i16
    27921U,	// SQRDMLSHv4i16_indexed
    529U,	// SQRDMLSHv4i32
    28177U,	// SQRDMLSHv4i32_indexed
    785U,	// SQRDMLSHv8i16
    27921U,	// SQRDMLSHv8i16_indexed
    1U,	// SQRDMULHv1i16
    36105U,	// SQRDMULHv1i16_indexed
    1U,	// SQRDMULHv1i32
    36361U,	// SQRDMULHv1i32_indexed
    1289U,	// SQRDMULHv2i32
    36361U,	// SQRDMULHv2i32_indexed
    1545U,	// SQRDMULHv4i16
    36105U,	// SQRDMULHv4i16_indexed
    521U,	// SQRDMULHv4i32
    36361U,	// SQRDMULHv4i32_indexed
    777U,	// SQRDMULHv8i16
    36105U,	// SQRDMULHv8i16_indexed
    1033U,	// SQRSHLv16i8
    1U,	// SQRSHLv1i16
    1U,	// SQRSHLv1i32
    1U,	// SQRSHLv1i64
    1U,	// SQRSHLv1i8
    1289U,	// SQRSHLv2i32
    265U,	// SQRSHLv2i64
    1545U,	// SQRSHLv4i16
    521U,	// SQRSHLv4i32
    777U,	// SQRSHLv8i16
    1801U,	// SQRSHLv8i8
    1U,	// SQRSHRNb
    1U,	// SQRSHRNh
    1U,	// SQRSHRNs
    65U,	// SQRSHRNv16i8_shift
    1U,	// SQRSHRNv2i32_shift
    1U,	// SQRSHRNv4i16_shift
    65U,	// SQRSHRNv4i32_shift
    65U,	// SQRSHRNv8i16_shift
    1U,	// SQRSHRNv8i8_shift
    1U,	// SQRSHRUNb
    1U,	// SQRSHRUNh
    1U,	// SQRSHRUNs
    65U,	// SQRSHRUNv16i8_shift
    1U,	// SQRSHRUNv2i32_shift
    1U,	// SQRSHRUNv4i16_shift
    65U,	// SQRSHRUNv4i32_shift
    65U,	// SQRSHRUNv8i16_shift
    1U,	// SQRSHRUNv8i8_shift
    1U,	// SQSHLUb
    1U,	// SQSHLUd
    1U,	// SQSHLUh
    1U,	// SQSHLUs
    1U,	// SQSHLUv16i8_shift
    1U,	// SQSHLUv2i32_shift
    1U,	// SQSHLUv2i64_shift
    1U,	// SQSHLUv4i16_shift
    1U,	// SQSHLUv4i32_shift
    1U,	// SQSHLUv8i16_shift
    1U,	// SQSHLUv8i8_shift
    1U,	// SQSHLb
    1U,	// SQSHLd
    1U,	// SQSHLh
    1U,	// SQSHLs
    1033U,	// SQSHLv16i8
    1U,	// SQSHLv16i8_shift
    1U,	// SQSHLv1i16
    1U,	// SQSHLv1i32
    1U,	// SQSHLv1i64
    1U,	// SQSHLv1i8
    1289U,	// SQSHLv2i32
    1U,	// SQSHLv2i32_shift
    265U,	// SQSHLv2i64
    1U,	// SQSHLv2i64_shift
    1545U,	// SQSHLv4i16
    1U,	// SQSHLv4i16_shift
    521U,	// SQSHLv4i32
    1U,	// SQSHLv4i32_shift
    777U,	// SQSHLv8i16
    1U,	// SQSHLv8i16_shift
    1801U,	// SQSHLv8i8
    1U,	// SQSHLv8i8_shift
    1U,	// SQSHRNb
    1U,	// SQSHRNh
    1U,	// SQSHRNs
    65U,	// SQSHRNv16i8_shift
    1U,	// SQSHRNv2i32_shift
    1U,	// SQSHRNv4i16_shift
    65U,	// SQSHRNv4i32_shift
    65U,	// SQSHRNv8i16_shift
    1U,	// SQSHRNv8i8_shift
    1U,	// SQSHRUNb
    1U,	// SQSHRUNh
    1U,	// SQSHRUNs
    65U,	// SQSHRUNv16i8_shift
    1U,	// SQSHRUNv2i32_shift
    1U,	// SQSHRUNv4i16_shift
    65U,	// SQSHRUNv4i32_shift
    65U,	// SQSHRUNv8i16_shift
    1U,	// SQSHRUNv8i8_shift
    1033U,	// SQSUBv16i8
    1U,	// SQSUBv1i16
    1U,	// SQSUBv1i32
    1U,	// SQSUBv1i64
    1U,	// SQSUBv1i8
    1289U,	// SQSUBv2i32
    265U,	// SQSUBv2i64
    1545U,	// SQSUBv4i16
    521U,	// SQSUBv4i32
    777U,	// SQSUBv8i16
    1801U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    1033U,	// SRHADDv16i8
    1289U,	// SRHADDv2i32
    1545U,	// SRHADDv4i16
    521U,	// SRHADDv4i32
    777U,	// SRHADDv8i16
    1801U,	// SRHADDv8i8
    65U,	// SRId
    65U,	// SRIv16i8_shift
    65U,	// SRIv2i32_shift
    65U,	// SRIv2i64_shift
    65U,	// SRIv4i16_shift
    65U,	// SRIv4i32_shift
    65U,	// SRIv8i16_shift
    65U,	// SRIv8i8_shift
    1033U,	// SRSHLv16i8
    1U,	// SRSHLv1i64
    1289U,	// SRSHLv2i32
    265U,	// SRSHLv2i64
    1545U,	// SRSHLv4i16
    521U,	// SRSHLv4i32
    777U,	// SRSHLv8i16
    1801U,	// SRSHLv8i8
    1U,	// SRSHRd
    1U,	// SRSHRv16i8_shift
    1U,	// SRSHRv2i32_shift
    1U,	// SRSHRv2i64_shift
    1U,	// SRSHRv4i16_shift
    1U,	// SRSHRv4i32_shift
    1U,	// SRSHRv8i16_shift
    1U,	// SRSHRv8i8_shift
    65U,	// SRSRAd
    65U,	// SRSRAv16i8_shift
    65U,	// SRSRAv2i32_shift
    65U,	// SRSRAv2i64_shift
    65U,	// SRSRAv4i16_shift
    65U,	// SRSRAv4i32_shift
    65U,	// SRSRAv8i16_shift
    65U,	// SRSRAv8i8_shift
    1U,	// SSHLLv16i8_shift
    1U,	// SSHLLv2i32_shift
    1U,	// SSHLLv4i16_shift
    1U,	// SSHLLv4i32_shift
    1U,	// SSHLLv8i16_shift
    1U,	// SSHLLv8i8_shift
    1033U,	// SSHLv16i8
    1U,	// SSHLv1i64
    1289U,	// SSHLv2i32
    265U,	// SSHLv2i64
    1545U,	// SSHLv4i16
    521U,	// SSHLv4i32
    777U,	// SSHLv8i16
    1801U,	// SSHLv8i8
    1U,	// SSHRd
    1U,	// SSHRv16i8_shift
    1U,	// SSHRv2i32_shift
    1U,	// SSHRv2i64_shift
    1U,	// SSHRv4i16_shift
    1U,	// SSHRv4i32_shift
    1U,	// SSHRv8i16_shift
    1U,	// SSHRv8i8_shift
    65U,	// SSRAd
    65U,	// SSRAv16i8_shift
    65U,	// SSRAv2i32_shift
    65U,	// SSRAv2i64_shift
    65U,	// SSRAv4i16_shift
    65U,	// SSRAv4i32_shift
    65U,	// SSRAv8i16_shift
    65U,	// SSRAv8i8_shift
    1033U,	// SSUBLv16i8_v8i16
    1289U,	// SSUBLv2i32_v2i64
    1545U,	// SSUBLv4i16_v4i32
    521U,	// SSUBLv4i32_v2i64
    777U,	// SSUBLv8i16_v4i32
    1801U,	// SSUBLv8i8_v8i16
    1033U,	// SSUBWv16i8_v8i16
    1289U,	// SSUBWv2i32_v2i64
    1545U,	// SSUBWv4i16_v4i32
    521U,	// SSUBWv4i32_v2i64
    777U,	// SSUBWv8i16_v4i32
    1801U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    4609U,	// STLXPW
    4609U,	// STLXPX
    2562U,	// STLXRB
    2562U,	// STLXRH
    2562U,	// STLXRW
    2562U,	// STLXRX
    43266U,	// STNPDi
    51458U,	// STNPQi
    59650U,	// STNPSi
    59650U,	// STNPWi
    43266U,	// STNPXi
    43266U,	// STPDi
    4162U,	// STPDpost
    2370U,	// STPDpre
    51458U,	// STPQi
    12354U,	// STPQpost
    10562U,	// STPQpre
    59650U,	// STPSi
    20546U,	// STPSpost
    18754U,	// STPSpre
    59650U,	// STPWi
    20546U,	// STPWpost
    18754U,	// STPWpre
    43266U,	// STPXi
    4162U,	// STPXpost
    2370U,	// STPXpre
    4U,	// STRBBpost
    4417U,	// STRBBpre
    26881U,	// STRBBroW
    35073U,	// STRBBroX
    89U,	// STRBBui
    4U,	// STRBpost
    4417U,	// STRBpre
    26881U,	// STRBroW
    35073U,	// STRBroX
    89U,	// STRBui
    4U,	// STRDpost
    4417U,	// STRDpre
    43265U,	// STRDroW
    51457U,	// STRDroX
    97U,	// STRDui
    4U,	// STRHHpost
    4417U,	// STRHHpre
    59649U,	// STRHHroW
    2305U,	// STRHHroX
    105U,	// STRHHui
    4U,	// STRHpost
    4417U,	// STRHpre
    59649U,	// STRHroW
    2305U,	// STRHroX
    105U,	// STRHui
    4U,	// STRQpost
    4417U,	// STRQpre
    10497U,	// STRQroW
    18689U,	// STRQroX
    113U,	// STRQui
    4U,	// STRSpost
    4417U,	// STRSpre
    26881U,	// STRSroW
    35073U,	// STRSroX
    121U,	// STRSui
    4U,	// STRWpost
    4417U,	// STRWpre
    26881U,	// STRWroW
    35073U,	// STRWroX
    121U,	// STRWui
    4U,	// STRXpost
    4417U,	// STRXpre
    43265U,	// STRXroW
    51457U,	// STRXroX
    97U,	// STRXui
    2561U,	// STTRBi
    2561U,	// STTRHi
    2561U,	// STTRWi
    2561U,	// STTRXi
    2561U,	// STURBBi
    2561U,	// STURBi
    2561U,	// STURDi
    2561U,	// STURHHi
    2561U,	// STURHi
    2561U,	// STURQi
    2561U,	// STURSi
    2561U,	// STURWi
    2561U,	// STURXi
    4609U,	// STXPW
    4609U,	// STXPX
    2562U,	// STXRB
    2562U,	// STXRH
    2562U,	// STXRW
    2562U,	// STXRX
    265U,	// SUBHNv2i64_v2i32
    273U,	// SUBHNv2i64_v4i32
    521U,	// SUBHNv4i32_v4i16
    529U,	// SUBHNv4i32_v8i16
    785U,	// SUBHNv8i16_v16i8
    777U,	// SUBHNv8i16_v8i8
    25U,	// SUBSWri
    0U,	// SUBSWrr
    33U,	// SUBSWrs
    41U,	// SUBSWrx
    25U,	// SUBSXri
    0U,	// SUBSXrr
    33U,	// SUBSXrs
    41U,	// SUBSXrx
    2049U,	// SUBSXrx64
    25U,	// SUBWri
    0U,	// SUBWrr
    33U,	// SUBWrs
    41U,	// SUBWrx
    25U,	// SUBXri
    0U,	// SUBXrr
    33U,	// SUBXrs
    41U,	// SUBXrx
    2049U,	// SUBXrx64
    1033U,	// SUBv16i8
    1U,	// SUBv1i64
    1289U,	// SUBv2i32
    265U,	// SUBv2i64
    1545U,	// SUBv4i16
    521U,	// SUBv4i32
    777U,	// SUBv8i16
    1801U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPALb
    0U,	// SWPALd
    0U,	// SWPALh
    0U,	// SWPALs
    0U,	// SWPAb
    0U,	// SWPAd
    0U,	// SWPAh
    0U,	// SWPAs
    0U,	// SWPLb
    0U,	// SWPLd
    0U,	// SWPLh
    0U,	// SWPLs
    0U,	// SWPb
    0U,	// SWPd
    0U,	// SWPh
    0U,	// SWPs
    129U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    137U,	// TBNZW
    137U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    137U,	// TBZW
    137U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    1033U,	// TRN1v16i8
    1289U,	// TRN1v2i32
    265U,	// TRN1v2i64
    1545U,	// TRN1v4i16
    521U,	// TRN1v4i32
    777U,	// TRN1v8i16
    1801U,	// TRN1v8i8
    1033U,	// TRN2v16i8
    1289U,	// TRN2v2i32
    265U,	// TRN2v2i64
    1545U,	// TRN2v4i16
    521U,	// TRN2v4i32
    777U,	// TRN2v8i16
    1801U,	// TRN2v8i8
    1041U,	// UABALv16i8_v8i16
    1297U,	// UABALv2i32_v2i64
    1553U,	// UABALv4i16_v4i32
    529U,	// UABALv4i32_v2i64
    785U,	// UABALv8i16_v4i32
    1809U,	// UABALv8i8_v8i16
    1041U,	// UABAv16i8
    1297U,	// UABAv2i32
    1553U,	// UABAv4i16
    529U,	// UABAv4i32
    785U,	// UABAv8i16
    1809U,	// UABAv8i8
    1033U,	// UABDLv16i8_v8i16
    1289U,	// UABDLv2i32_v2i64
    1545U,	// UABDLv4i16_v4i32
    521U,	// UABDLv4i32_v2i64
    777U,	// UABDLv8i16_v4i32
    1801U,	// UABDLv8i8_v8i16
    1033U,	// UABDv16i8
    1289U,	// UABDv2i32
    1545U,	// UABDv4i16
    521U,	// UABDv4i32
    777U,	// UABDv8i16
    1801U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    1033U,	// UADDLv16i8_v8i16
    1289U,	// UADDLv2i32_v2i64
    1545U,	// UADDLv4i16_v4i32
    521U,	// UADDLv4i32_v2i64
    777U,	// UADDLv8i16_v4i32
    1801U,	// UADDLv8i8_v8i16
    1033U,	// UADDWv16i8_v8i16
    1289U,	// UADDWv2i32_v2i64
    1545U,	// UADDWv4i16_v4i32
    521U,	// UADDWv4i32_v2i64
    777U,	// UADDWv8i16_v4i32
    1801U,	// UADDWv8i8_v8i16
    18689U,	// UBFMWri
    18689U,	// UBFMXri
    1U,	// UCVTFSWDri
    1U,	// UCVTFSWHri
    1U,	// UCVTFSWSri
    1U,	// UCVTFSXDri
    1U,	// UCVTFSXHri
    1U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    1U,	// UCVTFd
    1U,	// UCVTFh
    1U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    1U,	// UCVTFv2i32_shift
    1U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    1U,	// UCVTFv4i16_shift
    1U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    1U,	// UCVTFv8i16_shift
    1U,	// UDIVWr
    1U,	// UDIVXr
    1033U,	// UHADDv16i8
    1289U,	// UHADDv2i32
    1545U,	// UHADDv4i16
    521U,	// UHADDv4i32
    777U,	// UHADDv8i16
    1801U,	// UHADDv8i8
    1033U,	// UHSUBv16i8
    1289U,	// UHSUBv2i32
    1545U,	// UHSUBv4i16
    521U,	// UHSUBv4i32
    777U,	// UHSUBv8i16
    1801U,	// UHSUBv8i8
    18689U,	// UMADDLrrr
    1033U,	// UMAXPv16i8
    1289U,	// UMAXPv2i32
    1545U,	// UMAXPv4i16
    521U,	// UMAXPv4i32
    777U,	// UMAXPv8i16
    1801U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    1033U,	// UMAXv16i8
    1289U,	// UMAXv2i32
    1545U,	// UMAXv4i16
    521U,	// UMAXv4i32
    777U,	// UMAXv8i16
    1801U,	// UMAXv8i8
    1033U,	// UMINPv16i8
    1289U,	// UMINPv2i32
    1545U,	// UMINPv4i16
    521U,	// UMINPv4i32
    777U,	// UMINPv8i16
    1801U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    1033U,	// UMINv16i8
    1289U,	// UMINv2i32
    1545U,	// UMINv4i16
    521U,	// UMINv4i32
    777U,	// UMINv8i16
    1801U,	// UMINv8i8
    1041U,	// UMLALv16i8_v8i16
    28177U,	// UMLALv2i32_indexed
    1297U,	// UMLALv2i32_v2i64
    27921U,	// UMLALv4i16_indexed
    1553U,	// UMLALv4i16_v4i32
    28177U,	// UMLALv4i32_indexed
    529U,	// UMLALv4i32_v2i64
    27921U,	// UMLALv8i16_indexed
    785U,	// UMLALv8i16_v4i32
    1809U,	// UMLALv8i8_v8i16
    1041U,	// UMLSLv16i8_v8i16
    28177U,	// UMLSLv2i32_indexed
    1297U,	// UMLSLv2i32_v2i64
    27921U,	// UMLSLv4i16_indexed
    1553U,	// UMLSLv4i16_v4i32
    28177U,	// UMLSLv4i32_indexed
    529U,	// UMLSLv4i32_v2i64
    27921U,	// UMLSLv8i16_indexed
    785U,	// UMLSLv8i16_v4i32
    1809U,	// UMLSLv8i8_v8i16
    75U,	// UMOVvi16
    75U,	// UMOVvi32
    75U,	// UMOVvi64
    75U,	// UMOVvi8
    18689U,	// UMSUBLrrr
    1U,	// UMULHrr
    1033U,	// UMULLv16i8_v8i16
    36361U,	// UMULLv2i32_indexed
    1289U,	// UMULLv2i32_v2i64
    36105U,	// UMULLv4i16_indexed
    1545U,	// UMULLv4i16_v4i32
    36361U,	// UMULLv4i32_indexed
    521U,	// UMULLv4i32_v2i64
    36105U,	// UMULLv8i16_indexed
    777U,	// UMULLv8i16_v4i32
    1801U,	// UMULLv8i8_v8i16
    1033U,	// UQADDv16i8
    1U,	// UQADDv1i16
    1U,	// UQADDv1i32
    1U,	// UQADDv1i64
    1U,	// UQADDv1i8
    1289U,	// UQADDv2i32
    265U,	// UQADDv2i64
    1545U,	// UQADDv4i16
    521U,	// UQADDv4i32
    777U,	// UQADDv8i16
    1801U,	// UQADDv8i8
    1033U,	// UQRSHLv16i8
    1U,	// UQRSHLv1i16
    1U,	// UQRSHLv1i32
    1U,	// UQRSHLv1i64
    1U,	// UQRSHLv1i8
    1289U,	// UQRSHLv2i32
    265U,	// UQRSHLv2i64
    1545U,	// UQRSHLv4i16
    521U,	// UQRSHLv4i32
    777U,	// UQRSHLv8i16
    1801U,	// UQRSHLv8i8
    1U,	// UQRSHRNb
    1U,	// UQRSHRNh
    1U,	// UQRSHRNs
    65U,	// UQRSHRNv16i8_shift
    1U,	// UQRSHRNv2i32_shift
    1U,	// UQRSHRNv4i16_shift
    65U,	// UQRSHRNv4i32_shift
    65U,	// UQRSHRNv8i16_shift
    1U,	// UQRSHRNv8i8_shift
    1U,	// UQSHLb
    1U,	// UQSHLd
    1U,	// UQSHLh
    1U,	// UQSHLs
    1033U,	// UQSHLv16i8
    1U,	// UQSHLv16i8_shift
    1U,	// UQSHLv1i16
    1U,	// UQSHLv1i32
    1U,	// UQSHLv1i64
    1U,	// UQSHLv1i8
    1289U,	// UQSHLv2i32
    1U,	// UQSHLv2i32_shift
    265U,	// UQSHLv2i64
    1U,	// UQSHLv2i64_shift
    1545U,	// UQSHLv4i16
    1U,	// UQSHLv4i16_shift
    521U,	// UQSHLv4i32
    1U,	// UQSHLv4i32_shift
    777U,	// UQSHLv8i16
    1U,	// UQSHLv8i16_shift
    1801U,	// UQSHLv8i8
    1U,	// UQSHLv8i8_shift
    1U,	// UQSHRNb
    1U,	// UQSHRNh
    1U,	// UQSHRNs
    65U,	// UQSHRNv16i8_shift
    1U,	// UQSHRNv2i32_shift
    1U,	// UQSHRNv4i16_shift
    65U,	// UQSHRNv4i32_shift
    65U,	// UQSHRNv8i16_shift
    1U,	// UQSHRNv8i8_shift
    1033U,	// UQSUBv16i8
    1U,	// UQSUBv1i16
    1U,	// UQSUBv1i32
    1U,	// UQSUBv1i64
    1U,	// UQSUBv1i8
    1289U,	// UQSUBv2i32
    265U,	// UQSUBv2i64
    1545U,	// UQSUBv4i16
    521U,	// UQSUBv4i32
    777U,	// UQSUBv8i16
    1801U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    1033U,	// URHADDv16i8
    1289U,	// URHADDv2i32
    1545U,	// URHADDv4i16
    521U,	// URHADDv4i32
    777U,	// URHADDv8i16
    1801U,	// URHADDv8i8
    1033U,	// URSHLv16i8
    1U,	// URSHLv1i64
    1289U,	// URSHLv2i32
    265U,	// URSHLv2i64
    1545U,	// URSHLv4i16
    521U,	// URSHLv4i32
    777U,	// URSHLv8i16
    1801U,	// URSHLv8i8
    1U,	// URSHRd
    1U,	// URSHRv16i8_shift
    1U,	// URSHRv2i32_shift
    1U,	// URSHRv2i64_shift
    1U,	// URSHRv4i16_shift
    1U,	// URSHRv4i32_shift
    1U,	// URSHRv8i16_shift
    1U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    65U,	// URSRAd
    65U,	// URSRAv16i8_shift
    65U,	// URSRAv2i32_shift
    65U,	// URSRAv2i64_shift
    65U,	// URSRAv4i16_shift
    65U,	// URSRAv4i32_shift
    65U,	// URSRAv8i16_shift
    65U,	// URSRAv8i8_shift
    1U,	// USHLLv16i8_shift
    1U,	// USHLLv2i32_shift
    1U,	// USHLLv4i16_shift
    1U,	// USHLLv4i32_shift
    1U,	// USHLLv8i16_shift
    1U,	// USHLLv8i8_shift
    1033U,	// USHLv16i8
    1U,	// USHLv1i64
    1289U,	// USHLv2i32
    265U,	// USHLv2i64
    1545U,	// USHLv4i16
    521U,	// USHLv4i32
    777U,	// USHLv8i16
    1801U,	// USHLv8i8
    1U,	// USHRd
    1U,	// USHRv16i8_shift
    1U,	// USHRv2i32_shift
    1U,	// USHRv2i64_shift
    1U,	// USHRv4i16_shift
    1U,	// USHRv4i32_shift
    1U,	// USHRv8i16_shift
    1U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    65U,	// USRAd
    65U,	// USRAv16i8_shift
    65U,	// USRAv2i32_shift
    65U,	// USRAv2i64_shift
    65U,	// USRAv4i16_shift
    65U,	// USRAv4i32_shift
    65U,	// USRAv8i16_shift
    65U,	// USRAv8i8_shift
    1033U,	// USUBLv16i8_v8i16
    1289U,	// USUBLv2i32_v2i64
    1545U,	// USUBLv4i16_v4i32
    521U,	// USUBLv4i32_v2i64
    777U,	// USUBLv8i16_v4i32
    1801U,	// USUBLv8i8_v8i16
    1033U,	// USUBWv16i8_v8i16
    1289U,	// USUBWv2i32_v2i64
    1545U,	// USUBWv4i16_v4i32
    521U,	// USUBWv4i32_v2i64
    777U,	// USUBWv8i16_v4i32
    1801U,	// USUBWv8i8_v8i16
    1033U,	// UZP1v16i8
    1289U,	// UZP1v2i32
    265U,	// UZP1v2i64
    1545U,	// UZP1v4i16
    521U,	// UZP1v4i32
    777U,	// UZP1v8i16
    1801U,	// UZP1v8i8
    1033U,	// UZP2v16i8
    1289U,	// UZP2v2i32
    265U,	// UZP2v2i64
    1545U,	// UZP2v4i16
    521U,	// UZP2v4i32
    777U,	// UZP2v8i16
    1801U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    1033U,	// ZIP1v16i8
    1289U,	// ZIP1v2i32
    265U,	// ZIP1v2i64
    1545U,	// ZIP1v4i16
    521U,	// ZIP1v4i32
    777U,	// ZIP1v8i16
    1801U,	// ZIP1v8i8
    1033U,	// ZIP2v16i8
    1289U,	// ZIP2v2i32
    265U,	// ZIP2v2i64
    1545U,	// ZIP2v4i16
    521U,	// ZIP2v4i32
    777U,	// ZIP2v8i16
    1801U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASALb
    0U,	// CASALd
    0U,	// CASALh
    0U,	// CASALs
    0U,	// CASAb
    0U,	// CASAd
    0U,	// CASAh
    0U,	// CASAs
    0U,	// CASLb
    0U,	// CASLd
    0U,	// CASLh
    0U,	// CASLs
    0U,	// CASPALd
    0U,	// CASPALs
    0U,	// CASPAd
    0U,	// CASPAs
    0U,	// CASPLd
    0U,	// CASPLs
    0U,	// CASPd
    0U,	// CASPs
    0U,	// CASb
    0U,	// CASd
    0U,	// CASh
    0U,	// CASs
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    0U,	// CCMNWi
    0U,	// CCMNWr
    0U,	// CCMNXi
    0U,	// CCMNXr
    0U,	// CCMPWi
    0U,	// CCMPWr
    0U,	// CCMPXi
    0U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    0U,	// CSELWr
    0U,	// CSELXr
    0U,	// CSINCWr
    0U,	// CSINCXr
    0U,	// CSINVWr
    0U,	// CSINVXr
    0U,	// CSNEGWr
    0U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// EXTRWrri
    0U,	// EXTRXrri
    0U,	// EXTv16i8
    0U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    0U,	// FCCMPDrr
    0U,	// FCCMPEDrr
    0U,	// FCCMPEHrr
    0U,	// FCCMPESrr
    0U,	// FCCMPHrr
    0U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCSELDrrr
    0U,	// FCSELHrrr
    0U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FMADDDrrr
    0U,	// FMADDHrrr
    0U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    0U,	// FMLAv1i16_indexed
    0U,	// FMLAv1i32_indexed
    0U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    0U,	// FMLAv2i32_indexed
    0U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    0U,	// FMLAv4i16_indexed
    0U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    0U,	// FMLAv8i16_indexed
    0U,	// FMLSv1i16_indexed
    0U,	// FMLSv1i32_indexed
    0U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    0U,	// FMLSv2i32_indexed
    0U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    0U,	// FMLSv4i16_indexed
    0U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    0U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    0U,	// FMSUBDrrr
    0U,	// FMSUBHrrr
    0U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    0U,	// FMULXv1i16_indexed
    0U,	// FMULXv1i32_indexed
    0U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    0U,	// FMULXv2i32_indexed
    0U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    0U,	// FMULXv4i16_indexed
    0U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    0U,	// FMULXv8i16_indexed
    0U,	// FMULv1i16_indexed
    0U,	// FMULv1i32_indexed
    0U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    0U,	// FMULv2i32_indexed
    0U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    0U,	// FMULv4i16_indexed
    0U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    0U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    0U,	// FNMADDDrrr
    0U,	// FNMADDHrrr
    0U,	// FNMADDSrrr
    0U,	// FNMSUBDrrr
    0U,	// FNMSUBHrrr
    0U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDALb
    0U,	// LDADDALd
    0U,	// LDADDALh
    0U,	// LDADDALs
    0U,	// LDADDAb
    0U,	// LDADDAd
    0U,	// LDADDAh
    0U,	// LDADDAs
    0U,	// LDADDLb
    0U,	// LDADDLd
    0U,	// LDADDLh
    0U,	// LDADDLs
    0U,	// LDADDb
    0U,	// LDADDd
    0U,	// LDADDh
    0U,	// LDADDs
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRALb
    0U,	// LDCLRALd
    0U,	// LDCLRALh
    0U,	// LDCLRALs
    0U,	// LDCLRAb
    0U,	// LDCLRAd
    0U,	// LDCLRAh
    0U,	// LDCLRAs
    0U,	// LDCLRLb
    0U,	// LDCLRLd
    0U,	// LDCLRLh
    0U,	// LDCLRLs
    0U,	// LDCLRb
    0U,	// LDCLRd
    0U,	// LDCLRh
    0U,	// LDCLRs
    0U,	// LDEORALb
    0U,	// LDEORALd
    0U,	// LDEORALh
    0U,	// LDEORALs
    0U,	// LDEORAb
    0U,	// LDEORAd
    0U,	// LDEORAh
    0U,	// LDEORAs
    0U,	// LDEORLb
    0U,	// LDEORLd
    0U,	// LDEORLh
    0U,	// LDEORLs
    0U,	// LDEORb
    0U,	// LDEORd
    0U,	// LDEORh
    0U,	// LDEORs
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    0U,	// LDNPDi
    0U,	// LDNPQi
    0U,	// LDNPSi
    0U,	// LDNPWi
    0U,	// LDNPXi
    0U,	// LDPDi
    1U,	// LDPDpost
    5U,	// LDPDpre
    0U,	// LDPQi
    1U,	// LDPQpost
    5U,	// LDPQpre
    0U,	// LDPSWi
    1U,	// LDPSWpost
    5U,	// LDPSWpre
    0U,	// LDPSi
    1U,	// LDPSpost
    5U,	// LDPSpre
    0U,	// LDPWi
    1U,	// LDPWpost
    5U,	// LDPWpre
    0U,	// LDPXi
    1U,	// LDPXpost
    5U,	// LDPXpre
    0U,	// LDRBBpost
    0U,	// LDRBBpre
    1U,	// LDRBBroW
    1U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    0U,	// LDRBpre
    1U,	// LDRBroW
    1U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    0U,	// LDRDpre
    1U,	// LDRDroW
    1U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    0U,	// LDRHHpre
    1U,	// LDRHHroW
    2U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    0U,	// LDRHpre
    1U,	// LDRHroW
    2U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    0U,	// LDRQpre
    2U,	// LDRQroW
    2U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    0U,	// LDRSBWpre
    1U,	// LDRSBWroW
    1U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    0U,	// LDRSBXpre
    1U,	// LDRSBXroW
    1U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    0U,	// LDRSHWpre
    1U,	// LDRSHWroW
    2U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    0U,	// LDRSHXpre
    1U,	// LDRSHXroW
    2U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    0U,	// LDRSWpre
    2U,	// LDRSWroW
    2U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    0U,	// LDRSpre
    2U,	// LDRSroW
    2U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    0U,	// LDRWpre
    2U,	// LDRWroW
    2U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    0U,	// LDRXpre
    1U,	// LDRXroW
    1U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDSETALb
    0U,	// LDSETALd
    0U,	// LDSETALh
    0U,	// LDSETALs
    0U,	// LDSETAb
    0U,	// LDSETAd
    0U,	// LDSETAh
    0U,	// LDSETAs
    0U,	// LDSETLb
    0U,	// LDSETLd
    0U,	// LDSETLh
    0U,	// LDSETLs
    0U,	// LDSETb
    0U,	// LDSETd
    0U,	// LDSETh
    0U,	// LDSETs
    0U,	// LDSMAXALb
    0U,	// LDSMAXALd
    0U,	// LDSMAXALh
    0U,	// LDSMAXALs
    0U,	// LDSMAXAb
    0U,	// LDSMAXAd
    0U,	// LDSMAXAh
    0U,	// LDSMAXAs
    0U,	// LDSMAXLb
    0U,	// LDSMAXLd
    0U,	// LDSMAXLh
    0U,	// LDSMAXLs
    0U,	// LDSMAXb
    0U,	// LDSMAXd
    0U,	// LDSMAXh
    0U,	// LDSMAXs
    0U,	// LDSMINALb
    0U,	// LDSMINALd
    0U,	// LDSMINALh
    0U,	// LDSMINALs
    0U,	// LDSMINAb
    0U,	// LDSMINAd
    0U,	// LDSMINAh
    0U,	// LDSMINAs
    0U,	// LDSMINLb
    0U,	// LDSMINLd
    0U,	// LDSMINLh
    0U,	// LDSMINLs
    0U,	// LDSMINb
    0U,	// LDSMINd
    0U,	// LDSMINh
    0U,	// LDSMINs
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXALb
    0U,	// LDUMAXALd
    0U,	// LDUMAXALh
    0U,	// LDUMAXALs
    0U,	// LDUMAXAb
    0U,	// LDUMAXAd
    0U,	// LDUMAXAh
    0U,	// LDUMAXAs
    0U,	// LDUMAXLb
    0U,	// LDUMAXLd
    0U,	// LDUMAXLh
    0U,	// LDUMAXLs
    0U,	// LDUMAXb
    0U,	// LDUMAXd
    0U,	// LDUMAXh
    0U,	// LDUMAXs
    0U,	// LDUMINALb
    0U,	// LDUMINALd
    0U,	// LDUMINALh
    0U,	// LDUMINALs
    0U,	// LDUMINAb
    0U,	// LDUMINAd
    0U,	// LDUMINAh
    0U,	// LDUMINAs
    0U,	// LDUMINLb
    0U,	// LDUMINLd
    0U,	// LDUMINLh
    0U,	// LDUMINLs
    0U,	// LDUMINb
    0U,	// LDUMINd
    0U,	// LDUMINh
    0U,	// LDUMINs
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// MADDWrrr
    0U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    0U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    0U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    0U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    0U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    0U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    0U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    0U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    0U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    0U,	// MSUBWrrr
    0U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    0U,	// MULv2i32_indexed
    0U,	// MULv4i16
    0U,	// MULv4i16_indexed
    0U,	// MULv4i32
    0U,	// MULv4i32_indexed
    0U,	// MULv8i16
    0U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFMl
    1U,	// PRFMroW
    1U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFUMi
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    0U,	// SBFMWri
    0U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    0U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    0U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    0U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    0U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    0U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    0U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    0U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    0U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    0U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    0U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    0U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    0U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    0U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    0U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    0U,	// SQDMLALv1i32_indexed
    0U,	// SQDMLALv1i64_indexed
    0U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    0U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    0U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    0U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    0U,	// SQDMLSLv1i32_indexed
    0U,	// SQDMLSLv1i64_indexed
    0U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    0U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    0U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    0U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    0U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    0U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    0U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    0U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    0U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    0U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    0U,	// SQDMULLv1i32_indexed
    0U,	// SQDMULLv1i64_indexed
    0U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    0U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    0U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    0U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    0U,	// SQRDMLAHi16_indexed
    0U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    0U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    0U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    0U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    0U,	// SQRDMLAHv8i16_indexed
    0U,	// SQRDMLSHi16_indexed
    0U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    0U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    0U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    0U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    0U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    0U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    0U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    0U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    0U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    0U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    0U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    0U,	// STLXPW
    0U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    0U,	// STNPDi
    0U,	// STNPQi
    0U,	// STNPSi
    0U,	// STNPWi
    0U,	// STNPXi
    0U,	// STPDi
    1U,	// STPDpost
    5U,	// STPDpre
    0U,	// STPQi
    1U,	// STPQpost
    5U,	// STPQpre
    0U,	// STPSi
    1U,	// STPSpost
    5U,	// STPSpre
    0U,	// STPWi
    1U,	// STPWpost
    5U,	// STPWpre
    0U,	// STPXi
    1U,	// STPXpost
    5U,	// STPXpre
    0U,	// STRBBpost
    0U,	// STRBBpre
    1U,	// STRBBroW
    1U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    0U,	// STRBpre
    1U,	// STRBroW
    1U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    0U,	// STRDpre
    1U,	// STRDroW
    1U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    0U,	// STRHHpre
    1U,	// STRHHroW
    2U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    0U,	// STRHpre
    1U,	// STRHroW
    2U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    0U,	// STRQpre
    2U,	// STRQroW
    2U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    0U,	// STRSpre
    2U,	// STRSroW
    2U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    0U,	// STRWpre
    2U,	// STRWroW
    2U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    0U,	// STRXpre
    1U,	// STRXroW
    1U,	// STRXroX
    0U,	// STRXui
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    0U,	// STXPW
    0U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPALb
    0U,	// SWPALd
    0U,	// SWPALh
    0U,	// SWPALs
    0U,	// SWPAb
    0U,	// SWPAd
    0U,	// SWPAh
    0U,	// SWPAs
    0U,	// SWPLb
    0U,	// SWPLd
    0U,	// SWPLh
    0U,	// SWPLs
    0U,	// SWPb
    0U,	// SWPd
    0U,	// SWPh
    0U,	// SWPs
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    0U,	// UBFMWri
    0U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    0U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    0U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    0U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    0U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    0U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    0U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    0U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    0U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    0U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    0U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    0U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    0U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    0U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    0U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 6 bits for 43 unique commands.
  switch ((Bits >> 12) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    printOperand(MI, 1, STI, O);
    break;
  case 8:
    // CASPALd, CASPAd, CASPLd, CASPd
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // CASPALs, CASPAs, CASPLs, CASPs
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 11:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 12:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 14:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 16:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 18:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 20:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 22:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 24:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 26:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 28:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 29:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 30:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 31:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 32:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 33:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 34:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 36:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 37:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 38:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 39:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 40:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 41:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 42:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 41 unique commands.
  switch ((Bits >> 18) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDHNv8i16_v16i8, ADDPv16i8, ADDv16i8, AESDrr, AESErr, AESIM...
    O << ".16b, ";
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    O << ", ";
    break;
  case 2:
    // ABSv2i32, ADDHNv2i64_v2i32, ADDPv2i32, ADDv2i32, BICv2i32, CLSv2i32, C...
    O << ".2s, ";
    break;
  case 3:
    // ABSv2i64, ADDPv2i64, ADDv2i64, CMEQv2i64, CMEQv2i64rz, CMGEv2i64, CMGE...
    O << ".2d, ";
    break;
  case 4:
    // ABSv4i16, ADDHNv4i32_v4i16, ADDPv4i16, ADDv4i16, BICv4i16, CLSv4i16, C...
    O << ".4h, ";
    break;
  case 5:
    // ABSv4i32, ADDHNv2i64_v4i32, ADDPv4i32, ADDv4i32, BICv4i32, CLSv4i32, C...
    O << ".4s, ";
    break;
  case 6:
    // ABSv8i16, ADDHNv4i32_v8i16, ADDPv8i16, ADDv8i16, BICv8i16, CLSv8i16, C...
    O << ".8h, ";
    break;
  case 7:
    // ABSv8i8, ADDHNv8i16_v8i8, ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8...
    O << ".8b, ";
    break;
  case 8:
    // BLR, BR, CLREX, RET, TLSDESCCALL
    return;
    break;
  case 9:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 10:
    // FMOVXDHighr, INSvi64gpr, INSvi64lane
    O << ".d";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 11:
    // INSvi16gpr, INSvi16lane
    O << ".h";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 12:
    // INSvi32gpr, INSvi32lane
    O << ".s";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 13:
    // INSvi8gpr, INSvi8lane
    O << ".b";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 14:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 15:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 16:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 17:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 19:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 20:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 21:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 22:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 23:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 24:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 25:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 26:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 27:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 28:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 29:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 30:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 31:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 32:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 33:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 34:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 35:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 36:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 37:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ", [";
    break;
  case 38:
    // PMULLv1i64, PMULLv2i64
    O << ".1q, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 39:
    // SADALPv2i32_v1i64, SADDLPv2i32_v1i64, UADALPv2i32_v1i64, UADDLPv2i32_v...
    O << ".1d, ";
    break;
  case 40:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 8:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 9:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    break;
  case 10:
    // LDADDALb, LDADDALd, LDADDALh, LDADDALs, LDADDAb, LDADDAd, LDADDAh, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 11:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 12:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 13:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 14:
    // PMULLv1i64
    O << ".1d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".1d";
    return;
    break;
  case 15:
    // PMULLv2i64
    O << ".2d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".2d";
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 6 bits for 45 unique commands.
  switch ((Bits >> 29) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDVv16i8v, AESDrr, AESErr, AESIMCrr, AESMCrr, CLSv16i8, CLZ...
    O << ".16b";
    return;
    break;
  case 1:
    // ABSv1i64, ADR, CLSWr, CLSXr, CLZWr, CLZXr, DUPv16i8gpr, DUPv2i32gpr, D...
    return;
    break;
  case 2:
    // ABSv2i32, CLSv2i32, CLZv2i32, FABSv2f32, FADDPv2i32p, FCVTASv2f32, FCV...
    O << ".2s";
    return;
    break;
  case 3:
    // ABSv2i64, ADDPv2i64p, FABSv2f64, FADDPv2i64p, FCVTASv2f64, FCVTAUv2f64...
    O << ".2d";
    return;
    break;
  case 4:
    // ABSv4i16, ADDVv4i16v, CLSv4i16, CLZv4i16, FABSv4f16, FCVTASv4f16, FCVT...
    O << ".4h";
    return;
    break;
  case 5:
    // ABSv4i32, ADDVv4i32v, CLSv4i32, CLZv4i32, FABSv4f32, FCVTASv4f32, FCVT...
    O << ".4s";
    return;
    break;
  case 6:
    // ABSv8i16, ADDVv8i16v, CLSv8i16, CLZv8i16, FABSv8f16, FCVTASv8f16, FCVT...
    O << ".8h";
    return;
    break;
  case 7:
    // ABSv8i8, ADDVv8i8v, CLSv8i8, CLZv8i8, CNTv8i8, NEGv8i8, NOTv8i8, RBITv...
    O << ".8b";
    return;
    break;
  case 8:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADDSXri, ADDS...
    O << ", ";
    break;
  case 9:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d, ";
    break;
  case 10:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s, ";
    break;
  case 11:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h, ";
    break;
  case 12:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b, ";
    break;
  case 13:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s, ";
    break;
  case 14:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h, ";
    break;
  case 15:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b, ";
    break;
  case 16:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ", [";
    break;
  case 17:
    // CMEQv16i8rz, CMGEv16i8rz, CMGTv16i8rz, CMLEv16i8rz, CMLTv16i8rz
    O << ".16b, #0";
    return;
    break;
  case 18:
    // CMEQv1i64rz, CMGEv1i64rz, CMGTv1i64rz, CMLEv1i64rz, CMLTv1i64rz
    O << ", #0";
    return;
    break;
  case 19:
    // CMEQv2i32rz, CMGEv2i32rz, CMGTv2i32rz, CMLEv2i32rz, CMLTv2i32rz
    O << ".2s, #0";
    return;
    break;
  case 20:
    // CMEQv2i64rz, CMGEv2i64rz, CMGTv2i64rz, CMLEv2i64rz, CMLTv2i64rz
    O << ".2d, #0";
    return;
    break;
  case 21:
    // CMEQv4i16rz, CMGEv4i16rz, CMGTv4i16rz, CMLEv4i16rz, CMLTv4i16rz
    O << ".4h, #0";
    return;
    break;
  case 22:
    // CMEQv4i32rz, CMGEv4i32rz, CMGTv4i32rz, CMLEv4i32rz, CMLTv4i32rz
    O << ".4s, #0";
    return;
    break;
  case 23:
    // CMEQv8i16rz, CMGEv8i16rz, CMGTv8i16rz, CMLEv8i16rz, CMLTv8i16rz
    O << ".8h, #0";
    return;
    break;
  case 24:
    // CMEQv8i8rz, CMGEv8i8rz, CMGTv8i8rz, CMLEv8i8rz, CMLTv8i8rz
    O << ".8b, #0";
    return;
    break;
  case 25:
    // CPYi16, DUPv4i16lane, DUPv8i16lane, INSvi16lane, SMOVvi16to32, SMOVvi1...
    O << ".h";
    break;
  case 26:
    // CPYi32, DUPv2i32lane, DUPv4i32lane, INSvi32lane, SMOVvi32to64, UMOVvi3...
    O << ".s";
    break;
  case 27:
    // CPYi64, DUPv2i64lane, FMOVDXHighr, INSvi64lane, UMOVvi64
    O << ".d";
    break;
  case 28:
    // CPYi8, DUPv16i8lane, DUPv8i8lane, INSvi8lane, SMOVvi8to32, SMOVvi8to64...
    O << ".b";
    break;
  case 29:
    // FADDPv2i16p, FMAXNMPv2i16p, FMAXPv2i16p, FMINNMPv2i16p, FMINPv2i16p
    O << ".2h";
    return;
    break;
  case 30:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMGEv1i16rz, FCMGEv1i32rz, ...
    O << ", #0.0";
    return;
    break;
  case 31:
    // FCMEQv2i32rz, FCMGEv2i32rz, FCMGTv2i32rz, FCMLEv2i32rz, FCMLTv2i32rz
    O << ".2s, #0.0";
    return;
    break;
  case 32:
    // FCMEQv2i64rz, FCMGEv2i64rz, FCMGTv2i64rz, FCMLEv2i64rz, FCMLTv2i64rz
    O << ".2d, #0.0";
    return;
    break;
  case 33:
    // FCMEQv4i16rz, FCMGEv4i16rz, FCMGTv4i16rz, FCMLEv4i16rz, FCMLTv4i16rz
    O << ".4h, #0.0";
    return;
    break;
  case 34:
    // FCMEQv4i32rz, FCMGEv4i32rz, FCMGTv4i32rz, FCMLEv4i32rz, FCMLTv4i32rz
    O << ".4s, #0.0";
    return;
    break;
  case 35:
    // FCMEQv8i16rz, FCMGEv8i16rz, FCMGTv8i16rz, FCMLEv8i16rz, FCMLTv8i16rz
    O << ".8h, #0.0";
    return;
    break;
  case 36:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ']';
    return;
    break;
  case 37:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 38:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 39:
    // SHLLv16i8
    O << ".16b, #8";
    return;
    break;
  case 40:
    // SHLLv2i32
    O << ".2s, #32";
    return;
    break;
  case 41:
    // SHLLv4i16
    O << ".4h, #16";
    return;
    break;
  case 42:
    // SHLLv4i32
    O << ".4s, #32";
    return;
    break;
  case 43:
    // SHLLv8i16
    O << ".8h, #16";
    return;
    break;
  case 44:
    // SHLLv8i8
    O << ".8b, #8";
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 35) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O);
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 3, STI, O);
    break;
  case 9:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 10:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 11:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 17:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 40) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDv1i64, ASRVWr, ASRVXr, CMEQv1i64, CMG...
    return;
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d";
    return;
    break;
  case 2:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s";
    return;
    break;
  case 3:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h";
    return;
    break;
  case 4:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b";
    return;
    break;
  case 5:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s";
    return;
    break;
  case 6:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h";
    return;
    break;
  case 7:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b";
    return;
    break;
  case 8:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 9:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 10:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ']';
    return;
    break;
  case 11:
    // EXTv16i8
    O << ".16b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 12:
    // EXTv8i8
    O << ".8b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 13:
    // FMLAv1i16_indexed, FMLAv4i16_indexed, FMLAv8i16_indexed, FMLSv1i16_ind...
    O << ".h";
    break;
  case 14:
    // FMLAv1i32_indexed, FMLAv2i32_indexed, FMLAv4i32_indexed, FMLSv1i32_ind...
    O << ".s";
    break;
  case 15:
    // FMLAv1i64_indexed, FMLAv2i64_indexed, FMLSv1i64_indexed, FMLSv2i64_ind...
    O << ".d";
    break;
  case 16:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 17:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!";
    return;
    break;
  case 18:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 21 unique commands.
  switch ((Bits >> 45) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, FMADDDrrr, FMADDHrrr, FMADDSrrr, FMSUBDrrr, FMSUBH...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 4:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 5:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 6:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 7:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 8:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 9:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 10:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 11:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 50) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 484 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'q', '1', '0', 0,
  /* 56 */ 's', '1', '0', 0,
  /* 60 */ 'w', '1', '0', 0,
  /* 64 */ 'x', '1', '0', 0,
  /* 68 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 84 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 100 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 108 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 116 */ 'b', '2', '0', 0,
  /* 120 */ 'd', '2', '0', 0,
  /* 124 */ 'h', '2', '0', 0,
  /* 128 */ 'q', '2', '0', 0,
  /* 132 */ 's', '2', '0', 0,
  /* 136 */ 'w', '2', '0', 0,
  /* 140 */ 'x', '2', '0', 0,
  /* 144 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 160 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 176 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 184 */ 'b', '3', '0', 0,
  /* 188 */ 'd', '3', '0', 0,
  /* 192 */ 'h', '3', '0', 0,
  /* 196 */ 'q', '3', '0', 0,
  /* 200 */ 's', '3', '0', 0,
  /* 204 */ 'w', '3', '0', 0,
  /* 208 */ 'x', '3', '0', 0,
  /* 212 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 227 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 242 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 249 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 256 */ 'b', '0', 0,
  /* 259 */ 'd', '0', 0,
  /* 262 */ 'h', '0', 0,
  /* 265 */ 'q', '0', 0,
  /* 268 */ 's', '0', 0,
  /* 271 */ 'w', '0', 0,
  /* 274 */ 'x', '0', 0,
  /* 277 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 291 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 305 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 313 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 321 */ 'b', '1', '1', 0,
  /* 325 */ 'd', '1', '1', 0,
  /* 329 */ 'h', '1', '1', 0,
  /* 333 */ 'q', '1', '1', 0,
  /* 337 */ 's', '1', '1', 0,
  /* 341 */ 'w', '1', '1', 0,
  /* 345 */ 'x', '1', '1', 0,
  /* 349 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 365 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 381 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 389 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 397 */ 'b', '2', '1', 0,
  /* 401 */ 'd', '2', '1', 0,
  /* 405 */ 'h', '2', '1', 0,
  /* 409 */ 'q', '2', '1', 0,
  /* 413 */ 's', '2', '1', 0,
  /* 417 */ 'w', '2', '1', 0,
  /* 421 */ 'x', '2', '1', 0,
  /* 425 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 441 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 457 */ 'b', '3', '1', 0,
  /* 461 */ 'd', '3', '1', 0,
  /* 465 */ 'h', '3', '1', 0,
  /* 469 */ 'q', '3', '1', 0,
  /* 473 */ 's', '3', '1', 0,
  /* 477 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 491 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 505 */ 'W', '0', '_', 'W', '1', 0,
  /* 511 */ 'X', '0', '_', 'X', '1', 0,
  /* 517 */ 'b', '1', 0,
  /* 520 */ 'd', '1', 0,
  /* 523 */ 'h', '1', 0,
  /* 526 */ 'q', '1', 0,
  /* 529 */ 's', '1', 0,
  /* 532 */ 'w', '1', 0,
  /* 535 */ 'x', '1', 0,
  /* 538 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 553 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 568 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 576 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 584 */ 'b', '1', '2', 0,
  /* 588 */ 'd', '1', '2', 0,
  /* 592 */ 'h', '1', '2', 0,
  /* 596 */ 'q', '1', '2', 0,
  /* 600 */ 's', '1', '2', 0,
  /* 604 */ 'w', '1', '2', 0,
  /* 608 */ 'x', '1', '2', 0,
  /* 612 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 628 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 644 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 652 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 660 */ 'b', '2', '2', 0,
  /* 664 */ 'd', '2', '2', 0,
  /* 668 */ 'h', '2', '2', 0,
  /* 672 */ 'q', '2', '2', 0,
  /* 676 */ 's', '2', '2', 0,
  /* 680 */ 'w', '2', '2', 0,
  /* 684 */ 'x', '2', '2', 0,
  /* 688 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 701 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 714 */ 'W', '1', '_', 'W', '2', 0,
  /* 720 */ 'X', '1', '_', 'X', '2', 0,
  /* 726 */ 'b', '2', 0,
  /* 729 */ 'd', '2', 0,
  /* 732 */ 'h', '2', 0,
  /* 735 */ 'q', '2', 0,
  /* 738 */ 's', '2', 0,
  /* 741 */ 'w', '2', 0,
  /* 744 */ 'x', '2', 0,
  /* 747 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 763 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 779 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 787 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 795 */ 'b', '1', '3', 0,
  /* 799 */ 'd', '1', '3', 0,
  /* 803 */ 'h', '1', '3', 0,
  /* 807 */ 'q', '1', '3', 0,
  /* 811 */ 's', '1', '3', 0,
  /* 815 */ 'w', '1', '3', 0,
  /* 819 */ 'x', '1', '3', 0,
  /* 823 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 839 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 855 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 863 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 871 */ 'b', '2', '3', 0,
  /* 875 */ 'd', '2', '3', 0,
  /* 879 */ 'h', '2', '3', 0,
  /* 883 */ 'q', '2', '3', 0,
  /* 887 */ 's', '2', '3', 0,
  /* 891 */ 'w', '2', '3', 0,
  /* 895 */ 'x', '2', '3', 0,
  /* 899 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 911 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 923 */ 'W', '2', '_', 'W', '3', 0,
  /* 929 */ 'X', '2', '_', 'X', '3', 0,
  /* 935 */ 'b', '3', 0,
  /* 938 */ 'd', '3', 0,
  /* 941 */ 'h', '3', 0,
  /* 944 */ 'q', '3', 0,
  /* 947 */ 's', '3', 0,
  /* 950 */ 'w', '3', 0,
  /* 953 */ 'x', '3', 0,
  /* 956 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 972 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 988 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 996 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1004 */ 'b', '1', '4', 0,
  /* 1008 */ 'd', '1', '4', 0,
  /* 1012 */ 'h', '1', '4', 0,
  /* 1016 */ 'q', '1', '4', 0,
  /* 1020 */ 's', '1', '4', 0,
  /* 1024 */ 'w', '1', '4', 0,
  /* 1028 */ 'x', '1', '4', 0,
  /* 1032 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1048 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1064 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1072 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1080 */ 'b', '2', '4', 0,
  /* 1084 */ 'd', '2', '4', 0,
  /* 1088 */ 'h', '2', '4', 0,
  /* 1092 */ 'q', '2', '4', 0,
  /* 1096 */ 's', '2', '4', 0,
  /* 1100 */ 'w', '2', '4', 0,
  /* 1104 */ 'x', '2', '4', 0,
  /* 1108 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1120 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1132 */ 'W', '3', '_', 'W', '4', 0,
  /* 1138 */ 'X', '3', '_', 'X', '4', 0,
  /* 1144 */ 'b', '4', 0,
  /* 1147 */ 'd', '4', 0,
  /* 1150 */ 'h', '4', 0,
  /* 1153 */ 'q', '4', 0,
  /* 1156 */ 's', '4', 0,
  /* 1159 */ 'w', '4', 0,
  /* 1162 */ 'x', '4', 0,
  /* 1165 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1181 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1197 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1205 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1213 */ 'b', '1', '5', 0,
  /* 1217 */ 'd', '1', '5', 0,
  /* 1221 */ 'h', '1', '5', 0,
  /* 1225 */ 'q', '1', '5', 0,
  /* 1229 */ 's', '1', '5', 0,
  /* 1233 */ 'w', '1', '5', 0,
  /* 1237 */ 'x', '1', '5', 0,
  /* 1241 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1257 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1273 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1281 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1289 */ 'b', '2', '5', 0,
  /* 1293 */ 'd', '2', '5', 0,
  /* 1297 */ 'h', '2', '5', 0,
  /* 1301 */ 'q', '2', '5', 0,
  /* 1305 */ 's', '2', '5', 0,
  /* 1309 */ 'w', '2', '5', 0,
  /* 1313 */ 'x', '2', '5', 0,
  /* 1317 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1329 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1341 */ 'W', '4', '_', 'W', '5', 0,
  /* 1347 */ 'X', '4', '_', 'X', '5', 0,
  /* 1353 */ 'b', '5', 0,
  /* 1356 */ 'd', '5', 0,
  /* 1359 */ 'h', '5', 0,
  /* 1362 */ 'q', '5', 0,
  /* 1365 */ 's', '5', 0,
  /* 1368 */ 'w', '5', 0,
  /* 1371 */ 'x', '5', 0,
  /* 1374 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1390 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1406 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1414 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1422 */ 'b', '1', '6', 0,
  /* 1426 */ 'd', '1', '6', 0,
  /* 1430 */ 'h', '1', '6', 0,
  /* 1434 */ 'q', '1', '6', 0,
  /* 1438 */ 's', '1', '6', 0,
  /* 1442 */ 'w', '1', '6', 0,
  /* 1446 */ 'x', '1', '6', 0,
  /* 1450 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1466 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1482 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1490 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1498 */ 'b', '2', '6', 0,
  /* 1502 */ 'd', '2', '6', 0,
  /* 1506 */ 'h', '2', '6', 0,
  /* 1510 */ 'q', '2', '6', 0,
  /* 1514 */ 's', '2', '6', 0,
  /* 1518 */ 'w', '2', '6', 0,
  /* 1522 */ 'x', '2', '6', 0,
  /* 1526 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1538 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1550 */ 'W', '5', '_', 'W', '6', 0,
  /* 1556 */ 'X', '5', '_', 'X', '6', 0,
  /* 1562 */ 'b', '6', 0,
  /* 1565 */ 'd', '6', 0,
  /* 1568 */ 'h', '6', 0,
  /* 1571 */ 'q', '6', 0,
  /* 1574 */ 's', '6', 0,
  /* 1577 */ 'w', '6', 0,
  /* 1580 */ 'x', '6', 0,
  /* 1583 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1599 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1615 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1623 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1631 */ 'b', '1', '7', 0,
  /* 1635 */ 'd', '1', '7', 0,
  /* 1639 */ 'h', '1', '7', 0,
  /* 1643 */ 'q', '1', '7', 0,
  /* 1647 */ 's', '1', '7', 0,
  /* 1651 */ 'w', '1', '7', 0,
  /* 1655 */ 'x', '1', '7', 0,
  /* 1659 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1675 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1691 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1699 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1707 */ 'b', '2', '7', 0,
  /* 1711 */ 'd', '2', '7', 0,
  /* 1715 */ 'h', '2', '7', 0,
  /* 1719 */ 'q', '2', '7', 0,
  /* 1723 */ 's', '2', '7', 0,
  /* 1727 */ 'w', '2', '7', 0,
  /* 1731 */ 'x', '2', '7', 0,
  /* 1735 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1747 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1759 */ 'W', '6', '_', 'W', '7', 0,
  /* 1765 */ 'X', '6', '_', 'X', '7', 0,
  /* 1771 */ 'b', '7', 0,
  /* 1774 */ 'd', '7', 0,
  /* 1777 */ 'h', '7', 0,
  /* 1780 */ 'q', '7', 0,
  /* 1783 */ 's', '7', 0,
  /* 1786 */ 'w', '7', 0,
  /* 1789 */ 'x', '7', 0,
  /* 1792 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1808 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1824 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1832 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1840 */ 'b', '1', '8', 0,
  /* 1844 */ 'd', '1', '8', 0,
  /* 1848 */ 'h', '1', '8', 0,
  /* 1852 */ 'q', '1', '8', 0,
  /* 1856 */ 's', '1', '8', 0,
  /* 1860 */ 'w', '1', '8', 0,
  /* 1864 */ 'x', '1', '8', 0,
  /* 1868 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1884 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1900 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 1908 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 1916 */ 'b', '2', '8', 0,
  /* 1920 */ 'd', '2', '8', 0,
  /* 1924 */ 'h', '2', '8', 0,
  /* 1928 */ 'q', '2', '8', 0,
  /* 1932 */ 's', '2', '8', 0,
  /* 1936 */ 'w', '2', '8', 0,
  /* 1940 */ 'x', '2', '8', 0,
  /* 1944 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1956 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1968 */ 'W', '7', '_', 'W', '8', 0,
  /* 1974 */ 'X', '7', '_', 'X', '8', 0,
  /* 1980 */ 'b', '8', 0,
  /* 1983 */ 'd', '8', 0,
  /* 1986 */ 'h', '8', 0,
  /* 1989 */ 'q', '8', 0,
  /* 1992 */ 's', '8', 0,
  /* 1995 */ 'w', '8', 0,
  /* 1998 */ 'x', '8', 0,
  /* 2001 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2017 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2033 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2041 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2049 */ 'b', '1', '9', 0,
  /* 2053 */ 'd', '1', '9', 0,
  /* 2057 */ 'h', '1', '9', 0,
  /* 2061 */ 'q', '1', '9', 0,
  /* 2065 */ 's', '1', '9', 0,
  /* 2069 */ 'w', '1', '9', 0,
  /* 2073 */ 'x', '1', '9', 0,
  /* 2077 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2093 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2109 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2117 */ 'b', '2', '9', 0,
  /* 2121 */ 'd', '2', '9', 0,
  /* 2125 */ 'h', '2', '9', 0,
  /* 2129 */ 'q', '2', '9', 0,
  /* 2133 */ 's', '2', '9', 0,
  /* 2137 */ 'w', '2', '9', 0,
  /* 2141 */ 'x', '2', '9', 0,
  /* 2145 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2157 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2169 */ 'W', '8', '_', 'W', '9', 0,
  /* 2175 */ 'X', '8', '_', 'X', '9', 0,
  /* 2181 */ 'b', '9', 0,
  /* 2184 */ 'd', '9', 0,
  /* 2187 */ 'h', '9', 0,
  /* 2190 */ 'q', '9', 0,
  /* 2193 */ 's', '9', 0,
  /* 2196 */ 'w', '9', 0,
  /* 2199 */ 'x', '9', 0,
  /* 2202 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2209 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2215 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2223 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2230 */ 'w', 's', 'p', 0,
  /* 2234 */ 'w', 'z', 'r', 0,
  /* 2238 */ 'x', 'z', 'r', 0,
  /* 2242 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2141, 208, 2242, 2231, 2230, 2234, 2238, 256, 517, 726, 935, 1144, 1353, 1562, 
    1771, 1980, 2181, 40, 321, 584, 795, 1004, 1213, 1422, 1631, 1840, 2049, 116, 
    397, 660, 871, 1080, 1289, 1498, 1707, 1916, 2117, 184, 457, 259, 520, 729, 
    938, 1147, 1356, 1565, 1774, 1983, 2184, 44, 325, 588, 799, 1008, 1217, 1426, 
    1635, 1844, 2053, 120, 401, 664, 875, 1084, 1293, 1502, 1711, 1920, 2121, 188, 
    461, 262, 523, 732, 941, 1150, 1359, 1568, 1777, 1986, 2187, 48, 329, 592, 
    803, 1012, 1221, 1430, 1639, 1848, 2057, 124, 405, 668, 879, 1088, 1297, 1506, 
    1715, 1924, 2125, 192, 465, 265, 526, 735, 944, 1153, 1362, 1571, 1780, 1989, 
    2190, 52, 333, 596, 807, 1016, 1225, 1434, 1643, 1852, 2061, 128, 409, 672, 
    883, 1092, 1301, 1510, 1719, 1928, 2129, 196, 469, 268, 529, 738, 947, 1156, 
    1365, 1574, 1783, 1992, 2193, 56, 337, 600, 811, 1020, 1229, 1438, 1647, 1856, 
    2065, 132, 413, 676, 887, 1096, 1305, 1514, 1723, 1932, 2133, 200, 473, 271, 
    532, 741, 950, 1159, 1368, 1577, 1786, 1995, 2196, 60, 341, 604, 815, 1024, 
    1233, 1442, 1651, 1860, 2069, 136, 417, 680, 891, 1100, 1309, 1518, 1727, 1936, 
    2137, 204, 274, 535, 744, 953, 1162, 1371, 1580, 1789, 1998, 2199, 64, 345, 
    608, 819, 1028, 1237, 1446, 1655, 1864, 2073, 140, 421, 684, 895, 1104, 1313, 
    1522, 1731, 1940, 485, 695, 905, 1114, 1323, 1532, 1741, 1950, 2151, 6, 283, 
    545, 755, 964, 1173, 1382, 1591, 1800, 2009, 76, 357, 620, 831, 1040, 1249, 
    1458, 1667, 1876, 2085, 152, 433, 220, 899, 1108, 1317, 1526, 1735, 1944, 2145, 
    0, 277, 538, 747, 956, 1165, 1374, 1583, 1792, 2001, 68, 349, 612, 823, 
    1032, 1241, 1450, 1659, 1868, 2077, 144, 425, 212, 477, 688, 692, 902, 1111, 
    1320, 1529, 1738, 1947, 2148, 3, 280, 541, 751, 960, 1169, 1378, 1587, 1796, 
    2005, 72, 353, 616, 827, 1036, 1245, 1454, 1663, 1872, 2081, 148, 429, 216, 
    481, 499, 708, 917, 1126, 1335, 1544, 1753, 1962, 2163, 19, 297, 560, 771, 
    980, 1189, 1398, 1607, 1816, 2025, 92, 373, 636, 847, 1056, 1265, 1474, 1683, 
    1892, 2101, 168, 449, 235, 911, 1120, 1329, 1538, 1747, 1956, 2157, 13, 291, 
    553, 763, 972, 1181, 1390, 1599, 1808, 2017, 84, 365, 628, 839, 1048, 1257, 
    1466, 1675, 1884, 2093, 160, 441, 227, 491, 701, 705, 914, 1123, 1332, 1541, 
    1750, 1959, 2160, 16, 294, 556, 767, 976, 1185, 1394, 1603, 1812, 2021, 88, 
    369, 632, 843, 1052, 1261, 1470, 1679, 1888, 2097, 164, 445, 231, 495, 242, 
    2215, 505, 714, 923, 1132, 1341, 1550, 1759, 1968, 2169, 26, 305, 568, 779, 
    988, 1197, 1406, 1615, 1824, 2033, 100, 381, 644, 855, 1064, 1273, 1482, 1691, 
    1900, 2109, 176, 2209, 2223, 249, 2202, 511, 720, 929, 1138, 1347, 1556, 1765, 
    1974, 2175, 33, 313, 576, 787, 996, 1205, 1414, 1623, 1832, 2041, 108, 389, 
    652, 863, 1072, 1281, 1490, 1699, 1908, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(0), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.h$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov	$\xFF\x01\x06.h$\xFF\x02\x0A, $\xFF\x03\x06.h$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.s$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov	$\xFF\x01\x06.s$\xFF\x02\x0A, $\xFF\x03\x06.s$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov	$\xFF\x01\x06.d$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov	$\xFF\x01\x06.d$\xFF\x02\x0A, $\xFF\x03\x06.d$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x06.b$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov	$\xFF\x01\x06.b$\xFF\x02\x0A, $\xFF\x03\x06.b$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x12, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x12, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x12, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x12, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn $\xFF\x01\x06.16b, $\xFF\x02\x06.16b";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn $\xFF\x01\x06.8b, $\xFF\x02\x06.8b";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov	$\xFF\x01\x06.16b, $\xFF\x02\x06.16b";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov	$\xFF\x01\x06.8b, $\xFF\x02\x06.8b";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x19, $\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x06.s$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x06.d$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64InstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 9:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 23:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 24:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 2: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
