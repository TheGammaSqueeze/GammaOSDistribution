/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 12 */ 's', 't', '1', 9, 0,
  /* 17 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 24 */ 'l', 'd', '2', 9, 0,
  /* 29 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 37 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 45 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 61 */ 's', 't', '2', 9, 0,
  /* 66 */ 'l', 'd', '3', 9, 0,
  /* 71 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 78 */ 's', 't', '3', 9, 0,
  /* 83 */ 'l', 'd', '4', 9, 0,
  /* 88 */ 's', 't', '4', 9, 0,
  /* 93 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 100 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 108 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 117 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 126 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 133 */ 's', 'w', 'p', 'a', 9, 0,
  /* 139 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 147 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 155 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 162 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 169 */ 's', 's', 'r', 'a', 9, 0,
  /* 175 */ 'u', 's', 'r', 'a', 9, 0,
  /* 181 */ 'c', 'a', 's', 'a', 9, 0,
  /* 187 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 195 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 203 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 212 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 221 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 228 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 236 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 244 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 252 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 262 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 272 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 282 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 293 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 306 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 319 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 332 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 345 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 359 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 373 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 383 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 395 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 407 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 421 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 436 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 449 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 459 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 469 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 480 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 491 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 501 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 511 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 520 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 531 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 542 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 552 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 562 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 573 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 584 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 595 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 606 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 615 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 627 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 638 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 648 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 658 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 670 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 682 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 693 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 704 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 716 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 728 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 737 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 747 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 757 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 767 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 777 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 786 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 797 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 807 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 816 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 825 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 835 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 846 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 857 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 869 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 881 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 892 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 903 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 913 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 923 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 932 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 942 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 952 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 962 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 971 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 981 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 992 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1003 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1012 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1023 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1034 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 1044 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1055 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1066 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1076 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1086 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1095 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1104 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1115 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1125 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1134 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1143 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1153 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1163 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1173 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1182 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1191 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1202 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1211 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1223 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1233 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1245 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1257 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1268 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1279 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1290 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1301 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1311 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1321 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1330 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1339 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1348 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1357 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1367 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1376 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1385 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1394 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1404 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1414 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1423 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1432 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1440 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1450 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1460 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1469 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1478 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1488 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1498 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1508 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1518 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1526 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1535 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1544 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1555 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1566 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1576 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1586 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1597 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1608 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1616 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1625 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1634 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1642 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1652 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1661 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1669 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1677 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1686 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1696 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1706 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1717 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1728 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1738 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1748 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1757 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1766 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1774 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1783 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1794 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1805 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1814 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1823 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1834 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1845 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1857 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1869 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1877 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1887 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1897 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1909 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1922 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1933 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 1942 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1952 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 1962 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 1970 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1980 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 1990 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 1999 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2009 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2019 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2028 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2037 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 2045 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 2053 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 2063 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 2072 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2080 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2088 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2097 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2106 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2115 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2123 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2131 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2141 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2149 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2160 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2169 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2180 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2191 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2201 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2211 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2221 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2231 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2240 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2249 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2257 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 2266 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2276 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2286 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 2293 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 2302 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 2311 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 2318 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 2327 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2337 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2347 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2356 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 2364 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 2374 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2385 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2396 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 2404 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 2414 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 2424 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 2432 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 2442 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2453 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2464 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 2473 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2483 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2493 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 2500 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 2509 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 2518 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 2525 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 2534 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2544 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2554 */ 'd', 'm', 'b', 9, 0,
  /* 2559 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 2568 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 2577 */ 's', 'w', 'p', 'b', 9, 0,
  /* 2583 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2590 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 2598 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2604 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 2612 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 2620 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2627 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 2635 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2642 */ 's', 't', 'r', 'b', 9, 0,
  /* 2648 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2655 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2662 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2669 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2677 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2684 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2692 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2699 */ 'c', 'a', 's', 'b', 9, 0,
  /* 2705 */ 'd', 's', 'b', 9, 0,
  /* 2710 */ 'i', 's', 'b', 9, 0,
  /* 2715 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2722 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2730 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2738 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 2746 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2752 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2759 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2767 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2774 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2781 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 2790 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 2799 */ 's', 'b', 'c', 9, 0,
  /* 2804 */ 'a', 'd', 'c', 9, 0,
  /* 2809 */ 'b', 'i', 'c', 9, 0,
  /* 2814 */ 's', 'm', 'c', 9, 0,
  /* 2819 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 2826 */ 'h', 'v', 'c', 9, 0,
  /* 2831 */ 's', 'v', 'c', 9, 0,
  /* 2836 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 2844 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 2852 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 2860 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 2867 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2875 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 2883 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 2892 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2903 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2914 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2925 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 2936 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 2945 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2954 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 2963 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2974 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2985 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 2998 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3009 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3020 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3031 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3042 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3053 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3064 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3075 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3086 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3097 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3108 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3121 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3132 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3143 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3156 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3167 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3178 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 3187 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3196 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3205 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3216 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3227 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3238 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3249 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 3258 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3268 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3278 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3287 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3296 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 3307 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3316 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3326 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3336 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 3345 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3354 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3365 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3376 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3386 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3396 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 3406 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 3417 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 3429 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3439 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3449 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3458 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3468 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3477 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3485 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3493 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3504 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3513 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3523 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3533 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3545 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3555 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3565 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3575 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3585 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3595 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3605 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3615 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3625 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3635 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3645 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3656 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3667 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3677 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3687 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3696 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3705 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3715 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3725 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3737 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3747 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3757 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3769 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3779 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3789 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 3798 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3809 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3820 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 3831 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 3840 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 3851 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 3861 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3872 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3883 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3894 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 3905 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3917 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 3929 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 3939 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 3950 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 3958 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 3968 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 3978 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3988 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 3998 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4007 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4016 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 4027 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4036 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4046 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 4055 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 4064 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 4075 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 4086 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4097 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4108 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 4120 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 4131 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4141 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4151 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 4161 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 4171 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 4181 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 4192 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 4203 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 4214 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 4225 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 4236 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 4247 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 4256 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 4265 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4275 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4285 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4295 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4305 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 4314 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 4324 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 4335 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 4346 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 4352 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 4359 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 4365 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 4372 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 4380 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 4388 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 4396 */ 'a', 'n', 'd', 9, 0,
  /* 4401 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 4408 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 4415 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 4422 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 4430 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 4438 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 4445 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 4454 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 4461 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 4468 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4474 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4481 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4488 */ 'f', 'm', 'l', 'a', '.', 'h', 9, 0,
  /* 4496 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 'h', 9, 0,
  /* 4508 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4519 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4531 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 'h', 9, 0,
  /* 4543 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4554 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4565 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4576 */ 'f', 'm', 'u', 'l', '.', 'h', 9, 0,
  /* 4584 */ 'f', 'm', 'l', 's', '.', 'h', 9, 0,
  /* 4592 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4599 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4607 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4615 */ 'f', 'm', 'u', 'l', 'x', '.', 'h', 9, 0,
  /* 4624 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4631 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'h', 9, 0,
  /* 4641 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4653 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4665 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'h', 9, 0,
  /* 4675 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'h', 9, 0,
  /* 4685 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4693 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4702 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4711 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4720 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4730 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4739 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4748 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4757 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4767 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4776 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4785 */ 'f', 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 4794 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4804 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4814 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4823 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4832 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 'h', 9, 0,
  /* 4843 */ 'f', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4852 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4862 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4872 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4882 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 4892 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 4900 */ 'f', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4909 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4918 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 4927 */ 'f', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4936 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4947 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4958 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4968 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4978 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 4989 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5000 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5010 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5020 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 5030 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 'h', 9, 0,
  /* 5041 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 'h', 9, 0,
  /* 5053 */ 's', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5063 */ 'u', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5073 */ 'f', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5082 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5092 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 'h', 9, 0,
  /* 5105 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5117 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5130 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 'h', 9, 0,
  /* 5143 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 5152 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 5160 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 5169 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 5177 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 'h', 9, 0,
  /* 5188 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 5197 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5207 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5217 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5228 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5239 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5249 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5259 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5268 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5277 */ 'f', 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 5286 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5297 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5308 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 'h', 9, 0,
  /* 5319 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5330 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5341 */ 'f', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5350 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5359 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5368 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5379 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5390 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5402 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5414 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5425 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5435 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5445 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5457 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5470 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5481 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 5491 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5502 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5513 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5524 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5535 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5547 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5559 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5569 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5579 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5589 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 'h', 9, 0,
  /* 5600 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 5608 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5618 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5628 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5638 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 5648 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5658 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5668 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5677 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5686 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 5694 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 'h', 9, 0,
  /* 5705 */ 'f', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5714 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5724 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 5733 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5741 */ 'f', 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5750 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 'h', 9, 0,
  /* 5761 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 'h', 9, 0,
  /* 5772 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 'h', 9, 0,
  /* 5783 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 'h', 9, 0,
  /* 5794 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 'h', 9, 0,
  /* 5806 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 'h', 9, 0,
  /* 5817 */ 'f', 'a', 'c', 'g', 't', '.', '4', 'h', 9, 0,
  /* 5827 */ 'f', 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 5837 */ 'f', 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 5847 */ 'f', 's', 'q', 'r', 't', '.', '4', 'h', 9, 0,
  /* 5857 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 5867 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 'h', 9, 0,
  /* 5878 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 5889 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 'h', 9, 0,
  /* 5900 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 'h', 9, 0,
  /* 5911 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 'h', 9, 0,
  /* 5922 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 'h', 9, 0,
  /* 5933 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 5942 */ 'f', 'd', 'i', 'v', '.', '4', 'h', 9, 0,
  /* 5951 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5962 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 5973 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 5985 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 5997 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6007 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6017 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6027 */ 'f', 'm', 'o', 'v', '.', '4', 'h', 9, 0,
  /* 6036 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6046 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6056 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6066 */ 'f', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6075 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6084 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6093 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 'h', 9, 0,
  /* 6103 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 'h', 9, 0,
  /* 6114 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 6122 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 'h', 9, 0,
  /* 6133 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 6142 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6151 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6160 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 6170 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6181 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6192 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6203 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6214 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6225 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6236 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6247 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6258 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6269 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6280 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6291 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6302 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6313 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6324 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6335 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6346 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6357 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6369 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6381 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6393 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6405 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6418 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6431 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6440 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6451 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6462 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6475 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6489 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6501 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6510 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6519 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6530 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6541 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6552 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6563 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 6573 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6582 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6591 */ 'f', 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 6600 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6610 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6620 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6629 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6638 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '8', 'h', 9, 0,
  /* 6649 */ 'f', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6658 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6668 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6678 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6688 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6698 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 6706 */ 'f', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6715 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6724 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6733 */ 'f', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6742 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6753 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6764 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6774 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6784 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6795 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6806 */ 'f', 'a', 'c', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 6816 */ 'f', 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 6826 */ 'f', 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 6836 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '8', 'h', 9, 0,
  /* 6847 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '8', 'h', 9, 0,
  /* 6859 */ 's', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 6869 */ 'u', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 6879 */ 'f', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 6888 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 6898 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '8', 'h', 9, 0,
  /* 6911 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 6923 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 6936 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '8', 'h', 9, 0,
  /* 6949 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 6958 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 6966 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 6975 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 6983 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '8', 'h', 9, 0,
  /* 6994 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 7003 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7013 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7023 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7033 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7043 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7053 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7063 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7073 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7083 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7093 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7103 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7113 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7123 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7134 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7145 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7155 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7165 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7174 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7183 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7193 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7203 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7213 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7223 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7233 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7243 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7253 */ 'f', 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 7262 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7273 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7284 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '8', 'h', 9, 0,
  /* 7295 */ 'f', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7304 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7313 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7322 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '8', 'h', 9, 0,
  /* 7333 */ 'f', 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 7343 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7354 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7365 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7376 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7387 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7399 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7411 */ 'f', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7421 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7431 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7441 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '8', 'h', 9, 0,
  /* 7452 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 7460 */ 'f', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7470 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7480 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7490 */ 'f', 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 7500 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7510 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7520 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7529 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7538 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 7546 */ 'f', 'c', 'v', 't', 'a', 's', '.', '8', 'h', 9, 0,
  /* 7557 */ 'f', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7566 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7576 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 7585 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7593 */ 'f', 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7602 */ 'f', 'c', 'v', 't', 'm', 's', '.', '8', 'h', 9, 0,
  /* 7613 */ 'f', 'c', 'v', 't', 'n', 's', '.', '8', 'h', 9, 0,
  /* 7624 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7635 */ 'f', 'c', 'v', 't', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7646 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '8', 'h', 9, 0,
  /* 7658 */ 'f', 'c', 'v', 't', 'z', 's', '.', '8', 'h', 9, 0,
  /* 7669 */ 'f', 'a', 'c', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7679 */ 'f', 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7689 */ 'f', 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 7699 */ 'f', 's', 'q', 'r', 't', '.', '8', 'h', 9, 0,
  /* 7709 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 7719 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '8', 'h', 9, 0,
  /* 7730 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 7741 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '8', 'h', 9, 0,
  /* 7752 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '8', 'h', 9, 0,
  /* 7763 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '8', 'h', 9, 0,
  /* 7774 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '8', 'h', 9, 0,
  /* 7785 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 7794 */ 'f', 'd', 'i', 'v', '.', '8', 'h', 9, 0,
  /* 7803 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 7814 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 7825 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 7837 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 7849 */ 'f', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 7859 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 7869 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 7879 */ 'f', 'm', 'o', 'v', '.', '8', 'h', 9, 0,
  /* 7888 */ 'f', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 7898 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 7908 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 7918 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 7928 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 7938 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 7948 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 7958 */ 'f', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 7967 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 7976 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 7985 */ 'f', 'm', 'u', 'l', 'x', '.', '8', 'h', 9, 0,
  /* 7995 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '8', 'h', 9, 0,
  /* 8006 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 8014 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '8', 'h', 9, 0,
  /* 8025 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 8034 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 8044 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8054 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8064 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 8071 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 8080 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 8089 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 8096 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 8105 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8115 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8125 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 8134 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 8142 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 8152 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8163 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8174 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 8182 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 8192 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 8202 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 8210 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 8220 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8231 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8242 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 8251 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8261 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8271 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 8278 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 8287 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 8296 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 8303 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 8312 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8321 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8331 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 8338 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 8345 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8355 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8365 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 8374 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 8383 */ 's', 'w', 'p', 'h', 9, 0,
  /* 8389 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 8396 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 8404 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 8410 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 8418 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 8426 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 8433 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 8441 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 8448 */ 's', 't', 'r', 'h', 9, 0,
  /* 8454 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 8461 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 8468 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 8475 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 8483 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 8490 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 8498 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 8505 */ 'c', 'a', 's', 'h', 9, 0,
  /* 8511 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 8521 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 8528 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 8536 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 8544 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 8552 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 8561 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 8570 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 8576 */ 's', 'l', 'i', 9, 0,
  /* 8581 */ 's', 'r', 'i', 9, 0,
  /* 8586 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 8594 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 8600 */ 'b', 'r', 'k', 9, 0,
  /* 8605 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 8611 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 8620 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 8629 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8639 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8649 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 8657 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 8664 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 8673 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 8682 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 8689 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 8698 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8708 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8718 */ 't', 'b', 'l', 9, 0,
  /* 8723 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 8731 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 8739 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 8747 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 8755 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 8763 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 8770 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 8777 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 8784 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 8792 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 8800 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 8807 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 8814 */ 's', 's', 'h', 'l', 9, 0,
  /* 8820 */ 'u', 's', 'h', 'l', 9, 0,
  /* 8826 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 8835 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 8844 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 8853 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 8860 */ 's', 'w', 'p', 'l', 9, 0,
  /* 8866 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 8874 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 8882 */ 'c', 'a', 's', 'l', 9, 0,
  /* 8888 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 8897 */ 's', 'y', 's', 'l', 9, 0,
  /* 8903 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 8911 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 8918 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 8924 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 8931 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 8940 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 8949 */ 's', 'b', 'f', 'm', 9, 0,
  /* 8955 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 8961 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 8967 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 8975 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 8983 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 8991 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 8998 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 9004 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 9012 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 9020 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 9026 */ 'e', 'o', 'n', 9, 0,
  /* 9031 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9039 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9047 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9056 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9065 */ 'o', 'r', 'n', 9, 0,
  /* 9070 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 9078 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 9085 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 9092 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 9099 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9108 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9118 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 9126 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 9132 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 9140 */ 'l', 'd', 'p', 9, 0,
  /* 9145 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 9152 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 9158 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 9164 */ 's', 't', 'n', 'p', 9, 0,
  /* 9170 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 9176 */ 'c', 'a', 's', 'p', 9, 0,
  /* 9182 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 9190 */ 's', 't', 'p', 9, 0,
  /* 9195 */ 's', 'w', 'p', 9, 0,
  /* 9200 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 9207 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 9213 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 9220 */ 's', 't', 'x', 'p', 9, 0,
  /* 9226 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 9237 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 9247 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 9254 */ 'l', 'd', '1', 'r', 9, 0,
  /* 9260 */ 'l', 'd', '2', 'r', 9, 0,
  /* 9266 */ 'l', 'd', '3', 'r', 9, 0,
  /* 9272 */ 'l', 'd', '4', 'r', 9, 0,
  /* 9278 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 9284 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 9291 */ 'b', 'r', 9, 0,
  /* 9295 */ 'a', 'd', 'r', 9, 0,
  /* 9300 */ 'l', 'd', 'r', 9, 0,
  /* 9305 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 9312 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 9319 */ 's', 's', 'h', 'r', 9, 0,
  /* 9325 */ 'u', 's', 'h', 'r', 9, 0,
  /* 9331 */ 'b', 'l', 'r', 9, 0,
  /* 9336 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 9343 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 9350 */ 's', 't', 'l', 'r', 9, 0,
  /* 9356 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 9363 */ 'r', 'o', 'r', 9, 0,
  /* 9368 */ 'o', 'r', 'r', 9, 0,
  /* 9373 */ 'a', 's', 'r', 9, 0,
  /* 9378 */ 'l', 's', 'r', 9, 0,
  /* 9383 */ 'm', 's', 'r', 9, 0,
  /* 9388 */ 'l', 'd', 't', 'r', 9, 0,
  /* 9394 */ 's', 't', 'r', 9, 0,
  /* 9399 */ 's', 't', 't', 'r', 9, 0,
  /* 9405 */ 'e', 'x', 't', 'r', 9, 0,
  /* 9411 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 9417 */ 's', 't', 'u', 'r', 9, 0,
  /* 9423 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 9430 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 9436 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 9443 */ 's', 't', 'x', 'r', 9, 0,
  /* 9449 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 9457 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 's', 9, 0,
  /* 9469 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9480 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9492 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 's', 9, 0,
  /* 9504 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 9515 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 9526 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 9537 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 9545 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 9553 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 9560 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9568 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9576 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 9585 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 9594 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 9603 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 9612 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 9621 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 9630 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 9639 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 9649 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9658 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9667 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 9676 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9686 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9696 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9705 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9714 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 9725 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9734 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9744 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9754 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9764 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9774 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 9782 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 9791 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 9800 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 9809 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9818 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9829 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9840 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9850 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9860 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9871 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 9882 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 9892 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 9902 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 9912 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 9923 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 9934 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 9946 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 9958 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 9968 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 9978 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 9987 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 9997 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '2', 's', 9, 0,
  /* 10010 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10022 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10035 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '2', 's', 9, 0,
  /* 10048 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 10057 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 10065 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 10074 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 10082 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 10093 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 10102 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10112 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10122 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10133 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10144 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10154 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10164 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10173 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10182 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 10191 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10202 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10213 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 10224 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10235 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10246 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10255 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10264 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10273 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10284 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10295 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10307 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10319 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 10330 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10340 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10350 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10362 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10375 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10386 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 10396 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10407 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10418 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10429 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10440 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10452 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10464 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10474 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10484 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10494 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 10505 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 10513 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10523 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10533 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10543 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 10553 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10563 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10573 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10582 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10591 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 10599 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 10610 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10619 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10629 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 10638 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 10646 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 10655 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 10666 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 10677 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 10688 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 10699 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 10711 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 10722 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 10732 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 10742 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 10752 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 10762 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 10772 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 10783 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 10794 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 10805 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 10816 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 10827 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 10838 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 10847 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 10856 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 10865 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 10874 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 10883 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 10893 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 10904 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 10912 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 10923 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 10935 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 10949 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 10958 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 10967 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 10976 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 10988 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 11002 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 11015 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11026 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11037 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11050 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11061 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11072 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11083 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11094 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11105 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11116 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11127 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11138 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11149 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11160 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11173 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11184 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11195 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11208 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11219 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11230 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11242 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11254 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11266 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11278 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11291 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11304 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11313 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11324 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11335 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11348 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11362 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11374 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 11383 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 11392 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11403 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11414 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11425 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11436 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 11446 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11455 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11464 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 11473 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11483 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11493 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11502 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11511 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 11522 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11531 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11541 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11551 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11561 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11571 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 11581 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 11589 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11598 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11607 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11616 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11625 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11636 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11647 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11657 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11667 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11678 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11689 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 11699 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 11709 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 11719 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 11730 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 11741 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 11753 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 11765 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 11775 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 11785 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 11794 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 11804 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 11816 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 's', 9, 0,
  /* 11829 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 11841 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 11854 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 's', 9, 0,
  /* 11867 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 11876 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 11884 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 11893 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 11901 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 11912 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 11921 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 11931 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 11941 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 11953 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 11963 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 11973 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 11983 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 11993 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12003 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12013 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12023 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12033 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12043 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12053 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12064 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12075 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12085 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12095 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12104 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12113 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12123 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12133 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12145 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12155 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12165 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12177 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12187 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12197 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 12206 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 12216 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12227 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12238 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 12249 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12258 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12267 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12276 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 12287 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 12297 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 12307 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12318 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12329 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12340 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12351 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12363 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12375 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12385 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12395 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12405 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 12416 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 12424 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12434 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12444 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12454 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 12464 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12474 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12484 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12493 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12502 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 12510 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 12521 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12530 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12540 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 12549 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 12557 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 12566 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 12577 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 12588 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 12599 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 12610 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 12622 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 12633 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 12643 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 12653 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 12663 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 12673 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 12683 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 12694 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 12705 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 12716 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 12727 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 12738 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 12749 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 12758 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 12767 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 12778 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 12789 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 12801 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 12813 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 12823 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 12833 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 12843 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 12852 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 12862 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 12872 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 12882 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 12892 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 12902 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 12912 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 12922 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 12931 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 12940 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 12949 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 12959 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 12970 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 12978 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 12989 */ 'c', 'a', 's', 9, 0,
  /* 12994 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 13002 */ 'f', 'a', 'b', 's', 9, 0,
  /* 13008 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 13015 */ 's', 'u', 'b', 's', 9, 0,
  /* 13021 */ 's', 'b', 'c', 's', 9, 0,
  /* 13027 */ 'a', 'd', 'c', 's', 9, 0,
  /* 13033 */ 'b', 'i', 'c', 's', 9, 0,
  /* 13039 */ 'a', 'd', 'd', 's', 9, 0,
  /* 13045 */ 'a', 'n', 'd', 's', 9, 0,
  /* 13051 */ 'c', 'm', 'h', 's', 9, 0,
  /* 13057 */ 'c', 'l', 's', 9, 0,
  /* 13062 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 13070 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 13078 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 13086 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 13094 */ 'm', 'r', 's', 9, 0,
  /* 13099 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 13108 */ 's', 'y', 's', 9, 0,
  /* 13113 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 13121 */ 'r', 'e', 't', 9, 0,
  /* 13126 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 13133 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 13140 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 13147 */ 'r', 'b', 'i', 't', 9, 0,
  /* 13153 */ 'h', 'l', 't', 9, 0,
  /* 13158 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 13165 */ 'h', 'i', 'n', 't', 9, 0,
  /* 13171 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 13178 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 13185 */ 'f', 'c', 'v', 't', 9, 0,
  /* 13191 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 13199 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 13207 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 13215 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 13223 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 13231 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 13239 */ 'r', 'e', 'v', 9, 0,
  /* 13244 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 13250 */ 's', 'd', 'i', 'v', 9, 0,
  /* 13256 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 13262 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 13269 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 13275 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 13283 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 13292 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 13299 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 13306 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 13314 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 13322 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 13330 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 13336 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 13344 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 13352 */ 't', 'b', 'x', 9, 0,
  /* 13357 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 13366 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 13373 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 13380 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 13388 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 13396 */ 'c', 'b', 'z', 9, 0,
  /* 13401 */ 't', 'b', 'z', 9, 0,
  /* 13406 */ 'c', 'l', 'z', 9, 0,
  /* 13411 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 13417 */ 't', 'b', 'n', 'z', 9, 0,
  /* 13423 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 13431 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 13437 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 13451 */ 'b', '.', 0,
  /* 13454 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 13477 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13499 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13512 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13519 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13529 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 13544 */ 'd', 'r', 'p', 's', 0,
  /* 13549 */ 'e', 'r', 'e', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    13520U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13513U,	// BUNDLE
    13530U,	// LIFETIME_START
    13500U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    13455U,	// PATCHABLE_FUNCTION_ENTER
    13478U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    17491U,	// ABSv16i8
    67154636U,	// ABSv1i64
    26996U,	// ABSv2i32
    20413U,	// ABSv2i64
    22091U,	// ABSv4i16
    28907U,	// ABSv4i32
    23943U,	// ABSv8i16
    18440U,	// ABSv8i8
    2214638308U,	// ADCSWr
    2214638308U,	// ADCSXr
    2214628085U,	// ADCWr
    2214628085U,	// ADCXr
    2147510269U,	// ADDHNv2i64_v2i32
    2281761772U,	// ADDHNv2i64_v4i32
    2147505364U,	// ADDHNv4i32_v4i16
    2281756899U,	// ADDHNv4i32_v8i16
    2281750836U,	// ADDHNv8i16_v16i8
    2147501828U,	// ADDHNv8i16_v8i8
    2147501004U,	// ADDPv16i8
    2147510420U,	// ADDPv2i32
    2147503885U,	// ADDPv2i64
    36621U,	// ADDPv2i64p
    2147505515U,	// ADDPv4i16
    2147512331U,	// ADDPv4i32
    2147507367U,	// ADDPv8i16
    2147501966U,	// ADDPv8i8
    2214638320U,	// ADDSWri
    0U,	// ADDSWrr
    2214638320U,	// ADDSWrs
    2214638320U,	// ADDSWrx
    2214638320U,	// ADDSXri
    0U,	// ADDSXrr
    2214638320U,	// ADDSXrs
    2214638320U,	// ADDSXrx
    2214638320U,	// ADDSXrx64
    33992U,	// ADDVv16i8v
    38702U,	// ADDVv4i16v
    45518U,	// ADDVv4i32v
    40554U,	// ADDVv8i16v
    34929U,	// ADDVv8i8v
    2214629635U,	// ADDWri
    0U,	// ADDWrr
    2214629635U,	// ADDWrs
    2214629635U,	// ADDWrx
    2214629635U,	// ADDXri
    0U,	// ADDXrr
    2214629635U,	// ADDXrs
    2214629635U,	// ADDXrx
    2214629635U,	// ADDXrx64
    2147500694U,	// ADDv16i8
    2214629635U,	// ADDv1i64
    2147509843U,	// ADDv2i32
    2147503379U,	// ADDv2i64
    2147504961U,	// ADDv4i16
    2147511650U,	// ADDv4i32
    2147506767U,	// ADDv8i16
    2147501580U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67150928U,	// ADR
    201368531U,	// ADRP
    134267618U,	// AESDrr
    134267648U,	// AESErr
    17000U,	// AESIMCrr
    17012U,	// AESMCrr
    2214638326U,	// ANDSWri
    0U,	// ANDSWrr
    2214638326U,	// ANDSWrs
    2214638326U,	// ANDSXri
    0U,	// ANDSXrr
    2214638326U,	// ANDSXrs
    2214629677U,	// ANDWri
    0U,	// ANDWrr
    2214629677U,	// ANDWrs
    2214629677U,	// ANDXri
    0U,	// ANDXrr
    2214629677U,	// ANDXrs
    2147500761U,	// ANDv16i8
    2147501641U,	// ANDv8i8
    2214634654U,	// ASRVWr
    2214634654U,	// ASRVXr
    65762U,	// B
    2415960823U,	// BFMWri
    2415960823U,	// BFMXri
    0U,	// BICSWrr
    2214638314U,	// BICSWrs
    0U,	// BICSXrr
    2214638314U,	// BICSXrs
    0U,	// BICWrr
    2214628090U,	// BICWrs
    0U,	// BICXrr
    2214628090U,	// BICXrs
    2147500639U,	// BICv16i8
    335603247U,	// BICv2i32
    335598365U,	// BICv4i16
    335605054U,	// BICv4i32
    335600171U,	// BICv8i16
    2147501551U,	// BICv8i8
    2147500810U,	// BIFv16i8
    2147501667U,	// BIFv8i8
    2281751683U,	// BITv16i8
    2281752627U,	// BITv8i8
    74256U,	// BL
    1090676U,	// BLR
    1090636U,	// BR
    90521U,	// BRK
    2281751452U,	// BSLv16i8
    2281752295U,	// BSLv8i8
    111756U,	// Bcc
    268552569U,	// CASALb
    268558827U,	// CASALd
    268558347U,	// CASALh
    268558827U,	// CASALs
    268552456U,	// CASAb
    268550326U,	// CASAd
    268558234U,	// CASAh
    268550326U,	// CASAs
    268552663U,	// CASLb
    268559027U,	// CASLd
    268558441U,	// CASLh
    268559027U,	// CASLs
    139722U,	// CASPALd
    156106U,	// CASPALs
    131199U,	// CASPAd
    147583U,	// CASPAs
    139926U,	// CASPLd
    156310U,	// CASPLs
    140249U,	// CASPd
    156633U,	// CASPs
    268552844U,	// CASb
    268563134U,	// CASd
    268558650U,	// CASh
    268563134U,	// CASs
    402699364U,	// CBNZW
    402699364U,	// CBNZX
    402699349U,	// CBZW
    402699349U,	// CBZX
    2214634301U,	// CCMNWi
    2214634301U,	// CCMNWr
    2214634301U,	// CCMNXi
    2214634301U,	// CCMNXr
    2214634427U,	// CCMPWi
    2214634427U,	// CCMPWr
    2214634427U,	// CCMPXi
    2214634427U,	// CCMPXr
    1094711U,	// CLREX
    67154690U,	// CLSWr
    67154690U,	// CLSXr
    17510U,	// CLSv16i8
    27023U,	// CLSv2i32
    22118U,	// CLSv4i16
    28934U,	// CLSv4i32
    23970U,	// CLSv8i16
    18457U,	// CLSv8i8
    67155039U,	// CLZWr
    67155039U,	// CLZXr
    17706U,	// CLZv16i8
    27289U,	// CLZv2i32
    22499U,	// CLZv4i16
    29355U,	// CLZv4i32
    24391U,	// CLZv8i16
    18634U,	// CLZv8i8
    2147501067U,	// CMEQv16i8
    2147501067U,	// CMEQv16i8rz
    2214634529U,	// CMEQv1i64
    2214634529U,	// CMEQv1i64rz
    2147510577U,	// CMEQv2i32
    2147510577U,	// CMEQv2i32rz
    2147504002U,	// CMEQv2i64
    2147504002U,	// CMEQv2i64rz
    2147505672U,	// CMEQv4i16
    2147505672U,	// CMEQv4i16rz
    2147512488U,	// CMEQv4i32
    2147512488U,	// CMEQv4i32rz
    2147507524U,	// CMEQv8i16
    2147507524U,	// CMEQv8i16rz
    2147502023U,	// CMEQv8i8
    2147502023U,	// CMEQv8i8rz
    2147500780U,	// CMGEv16i8
    2147500780U,	// CMGEv16i8rz
    2214629690U,	// CMGEv1i64
    2214629690U,	// CMGEv1i64rz
    2147509926U,	// CMGEv2i32
    2147509926U,	// CMGEv2i32rz
    2147503420U,	// CMGEv2i64
    2147503420U,	// CMGEv2i64rz
    2147505044U,	// CMGEv4i16
    2147505044U,	// CMGEv4i16rz
    2147511733U,	// CMGEv4i32
    2147511733U,	// CMGEv4i32rz
    2147506850U,	// CMGEv8i16
    2147506850U,	// CMGEv8i16rz
    2147501649U,	// CMGEv8i8
    2147501649U,	// CMGEv8i8rz
    2147501176U,	// CMGTv16i8
    2147501176U,	// CMGTv16i8rz
    2214638422U,	// CMGTv1i64
    2214638422U,	// CMGTv1i64rz
    2147510766U,	// CMGTv2i32
    2147510766U,	// CMGTv2i32rz
    2147504175U,	// CMGTv2i64
    2147504175U,	// CMGTv2i64rz
    2147505861U,	// CMGTv4i16
    2147505861U,	// CMGTv4i16rz
    2147512677U,	// CMGTv4i32
    2147512677U,	// CMGTv4i32rz
    2147507713U,	// CMGTv8i16
    2147507713U,	// CMGTv8i16rz
    2147502121U,	// CMGTv8i8
    2147502121U,	// CMGTv8i8rz
    2147500830U,	// CMHIv16i8
    2214633851U,	// CMHIv1i64
    2147510081U,	// CMHIv2i32
    2147503501U,	// CMHIv2i64
    2147505176U,	// CMHIv4i16
    2147511900U,	// CMHIv4i32
    2147506982U,	// CMHIv8i16
    2147501685U,	// CMHIv8i8
    2147501148U,	// CMHSv16i8
    2214638332U,	// CMHSv1i64
    2147510662U,	// CMHSv2i32
    2147504079U,	// CMHSv2i64
    2147505757U,	// CMHSv4i16
    2147512573U,	// CMHSv4i32
    2147507609U,	// CMHSv8i16
    2147502096U,	// CMHSv8i8
    2147500790U,	// CMLEv16i8rz
    2214629697U,	// CMLEv1i64rz
    2147509936U,	// CMLEv2i32rz
    2147503430U,	// CMLEv2i64rz
    2147505054U,	// CMLEv4i16rz
    2147511743U,	// CMLEv4i32rz
    2147506860U,	// CMLEv8i16rz
    2147501658U,	// CMLEv8i8rz
    2147501196U,	// CMLTv16i8rz
    2214638440U,	// CMLTv1i64rz
    2147510776U,	// CMLTv2i32rz
    2147504185U,	// CMLTv2i64rz
    2147505871U,	// CMLTv4i16rz
    2147512687U,	// CMLTv4i32rz
    2147507723U,	// CMLTv8i16rz
    2147502139U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    2147501224U,	// CMTSTv16i8
    2214638459U,	// CMTSTv1i64
    2147510795U,	// CMTSTv2i32
    2147504204U,	// CMTSTv2i64
    2147505890U,	// CMTSTv4i16
    2147512706U,	// CMTSTv4i32
    2147507742U,	// CMTSTv8i16
    2147502164U,	// CMTSTv8i8
    17558U,	// CNTv16i8
    18500U,	// CNTv8i8
    46039U,	// CPYi16
    46039U,	// CPYi32
    46039U,	// CPYi64
    46039U,	// CPYi8
    2214625525U,	// CRC32Brr
    2214627628U,	// CRC32CBrr
    2214633406U,	// CRC32CHrr
    2214638564U,	// CRC32CWrr
    2214638638U,	// CRC32CXrr
    2214629966U,	// CRC32Hrr
    2214638556U,	// CRC32Wrr
    2214638603U,	// CRC32Xrr
    2214634045U,	// CSELWr
    2214634045U,	// CSELXr
    2214628100U,	// CSINCWr
    2214628100U,	// CSINCXr
    2214638543U,	// CSINVWr
    2214638543U,	// CSINVXr
    2214629762U,	// CSNEGWr
    2214629762U,	// CSNEGXr
    81926U,	// DCPS1
    81975U,	// DCPS2
    81992U,	// DCPS3
    166395U,	// DMB
    13545U,	// DRPS
    166546U,	// DSB
    67126252U,	// DUPv16i8gpr
    17388U,	// DUPv16i8lane
    67135754U,	// DUPv2i32gpr
    26890U,	// DUPv2i32lane
    67129199U,	// DUPv2i64gpr
    20335U,	// DUPv2i64lane
    67130849U,	// DUPv4i16gpr
    21985U,	// DUPv4i16lane
    67137665U,	// DUPv4i32gpr
    28801U,	// DUPv4i32lane
    67132701U,	// DUPv8i16gpr
    23837U,	// DUPv8i16lane
    67127211U,	// DUPv8i8gpr
    18347U,	// DUPv8i8lane
    0U,	// EONWrr
    2214634307U,	// EONWrs
    0U,	// EONXrr
    2214634307U,	// EONXrs
    2214634639U,	// EORWri
    0U,	// EORWrr
    2214634639U,	// EORWrs
    2214634639U,	// EORXri
    0U,	// EORXrr
    2214634639U,	// EORXrs
    2147501119U,	// EORv16i8
    2147502070U,	// EORv8i8
    13550U,	// ERET
    2214634686U,	// EXTRWrri
    2214634686U,	// EXTRXrri
    2147501235U,	// EXTv16i8
    2147502174U,	// EXTv8i8
    0U,	// F128CSEL
    2214629627U,	// FABD16
    2214629627U,	// FABD32
    2214629627U,	// FABD64
    2147509815U,	// FABDv2f32
    2147503369U,	// FABDv2f64
    2147504933U,	// FABDv4f16
    2147511622U,	// FABDv4f32
    2147506739U,	// FABDv8f16
    67154635U,	// FABSDr
    67154635U,	// FABSHr
    67154635U,	// FABSSr
    26995U,	// FABSv2f32
    20412U,	// FABSv2f64
    22090U,	// FABSv4f16
    28906U,	// FABSv4f32
    23942U,	// FABSv8f16
    2214629682U,	// FACGE16
    2214629682U,	// FACGE32
    2214629682U,	// FACGE64
    2147509915U,	// FACGEv2f32
    2147503409U,	// FACGEv2f64
    2147505033U,	// FACGEv4f16
    2147511722U,	// FACGEv4f32
    2147506839U,	// FACGEv8f16
    2214638414U,	// FACGT16
    2214638414U,	// FACGT32
    2214638414U,	// FACGT64
    2147510755U,	// FACGTv2f32
    2147504164U,	// FACGTv2f64
    2147505850U,	// FACGTv4f16
    2147512666U,	// FACGTv4f32
    2147507702U,	// FACGTv8f16
    2214629640U,	// FADDDrr
    2214629640U,	// FADDHrr
    2147510419U,	// FADDPv2f32
    2147503884U,	// FADDPv2f64
    37400U,	// FADDPv2i16p
    43155U,	// FADDPv2i32p
    36620U,	// FADDPv2i64p
    2147505514U,	// FADDPv4f16
    2147512330U,	// FADDPv4f32
    2147507366U,	// FADDPv8f16
    2214629640U,	// FADDSrr
    2147509842U,	// FADDv2f32
    2147503378U,	// FADDv2f64
    2147504960U,	// FADDv4f16
    2147511649U,	// FADDv4f32
    2147506766U,	// FADDv8f16
    2214634426U,	// FCCMPDrr
    2214629711U,	// FCCMPEDrr
    2214629711U,	// FCCMPEHrr
    2214629711U,	// FCCMPESrr
    2214634426U,	// FCCMPHrr
    2214634426U,	// FCCMPSrr
    2214634528U,	// FCMEQ16
    2214634528U,	// FCMEQ32
    2214634528U,	// FCMEQ64
    2214634528U,	// FCMEQv1i16rz
    2214634528U,	// FCMEQv1i32rz
    2214634528U,	// FCMEQv1i64rz
    2147510576U,	// FCMEQv2f32
    2147504001U,	// FCMEQv2f64
    2147510576U,	// FCMEQv2i32rz
    2147504001U,	// FCMEQv2i64rz
    2147505671U,	// FCMEQv4f16
    2147512487U,	// FCMEQv4f32
    2147505671U,	// FCMEQv4i16rz
    2147512487U,	// FCMEQv4i32rz
    2147507523U,	// FCMEQv8f16
    2147507523U,	// FCMEQv8i16rz
    2214629689U,	// FCMGE16
    2214629689U,	// FCMGE32
    2214629689U,	// FCMGE64
    2214629689U,	// FCMGEv1i16rz
    2214629689U,	// FCMGEv1i32rz
    2214629689U,	// FCMGEv1i64rz
    2147509925U,	// FCMGEv2f32
    2147503419U,	// FCMGEv2f64
    2147509925U,	// FCMGEv2i32rz
    2147503419U,	// FCMGEv2i64rz
    2147505043U,	// FCMGEv4f16
    2147511732U,	// FCMGEv4f32
    2147505043U,	// FCMGEv4i16rz
    2147511732U,	// FCMGEv4i32rz
    2147506849U,	// FCMGEv8f16
    2147506849U,	// FCMGEv8i16rz
    2214638421U,	// FCMGT16
    2214638421U,	// FCMGT32
    2214638421U,	// FCMGT64
    2214638421U,	// FCMGTv1i16rz
    2214638421U,	// FCMGTv1i32rz
    2214638421U,	// FCMGTv1i64rz
    2147510765U,	// FCMGTv2f32
    2147504174U,	// FCMGTv2f64
    2147510765U,	// FCMGTv2i32rz
    2147504174U,	// FCMGTv2i64rz
    2147505860U,	// FCMGTv4f16
    2147512676U,	// FCMGTv4f32
    2147505860U,	// FCMGTv4i16rz
    2147512676U,	// FCMGTv4i32rz
    2147507712U,	// FCMGTv8f16
    2147507712U,	// FCMGTv8i16rz
    2214629696U,	// FCMLEv1i16rz
    2214629696U,	// FCMLEv1i32rz
    2214629696U,	// FCMLEv1i64rz
    2147509935U,	// FCMLEv2i32rz
    2147503429U,	// FCMLEv2i64rz
    2147505053U,	// FCMLEv4i16rz
    2147511742U,	// FCMLEv4i32rz
    2147506859U,	// FCMLEv8i16rz
    2214638439U,	// FCMLTv1i16rz
    2214638439U,	// FCMLTv1i32rz
    2214638439U,	// FCMLTv1i64rz
    2147510775U,	// FCMLTv2i32rz
    2147504184U,	// FCMLTv2i64rz
    2147505870U,	// FCMLTv4i16rz
    2147512686U,	// FCMLTv4i32rz
    2147507722U,	// FCMLTv8i16rz
    2139073U,	// FCMPDri
    67150785U,	// FCMPDrr
    2134359U,	// FCMPEDri
    67146071U,	// FCMPEDrr
    2134359U,	// FCMPEHri
    67146071U,	// FCMPEHrr
    2134359U,	// FCMPESri
    67146071U,	// FCMPESrr
    2139073U,	// FCMPHri
    67150785U,	// FCMPHrr
    2139073U,	// FCMPSri
    67150785U,	// FCMPSrr
    2214634044U,	// FCSELDrrr
    2214634044U,	// FCSELHrrr
    2214634044U,	// FCSELSrrr
    67154627U,	// FCVTASUWDr
    67154627U,	// FCVTASUWHr
    67154627U,	// FCVTASUWSr
    67154627U,	// FCVTASUXDr
    67154627U,	// FCVTASUXHr
    67154627U,	// FCVTASUXSr
    67154627U,	// FCVTASv1f16
    67154627U,	// FCVTASv1i32
    67154627U,	// FCVTASv1i64
    26984U,	// FCVTASv2f32
    20401U,	// FCVTASv2f64
    22079U,	// FCVTASv4f16
    28895U,	// FCVTASv4f32
    23931U,	// FCVTASv8f16
    67154824U,	// FCVTAUUWDr
    67154824U,	// FCVTAUUWHr
    67154824U,	// FCVTAUUWSr
    67154824U,	// FCVTAUUXDr
    67154824U,	// FCVTAUUXHr
    67154824U,	// FCVTAUUXSr
    67154824U,	// FCVTAUv1f16
    67154824U,	// FCVTAUv1i32
    67154824U,	// FCVTAUv1i64
    27157U,	// FCVTAUv2f32
    20566U,	// FCVTAUv2f64
    22252U,	// FCVTAUv4f16
    29068U,	// FCVTAUv4f32
    24104U,	// FCVTAUv8f16
    67154818U,	// FCVTDHr
    67154818U,	// FCVTDSr
    67154818U,	// FCVTHDr
    67154818U,	// FCVTHSr
    472933072U,	// FCVTLv2i32
    4219600U,	// FCVTLv4i16
    540033054U,	// FCVTLv4i32
    2151694366U,	// FCVTLv8i16
    67154695U,	// FCVTMSUWDr
    67154695U,	// FCVTMSUWHr
    67154695U,	// FCVTMSUWSr
    67154695U,	// FCVTMSUXDr
    67154695U,	// FCVTMSUXHr
    67154695U,	// FCVTMSUXSr
    67154695U,	// FCVTMSv1f16
    67154695U,	// FCVTMSv1i32
    67154695U,	// FCVTMSv1i64
    27040U,	// FCVTMSv2f32
    20449U,	// FCVTMSv2f64
    22135U,	// FCVTMSv4f16
    28951U,	// FCVTMSv4f32
    23987U,	// FCVTMSv8f16
    67154840U,	// FCVTMUUWDr
    67154840U,	// FCVTMUUWHr
    67154840U,	// FCVTMUUWSr
    67154840U,	// FCVTMUUXDr
    67154840U,	// FCVTMUUXHr
    67154840U,	// FCVTMUUXSr
    67154840U,	// FCVTMUv1f16
    67154840U,	// FCVTMUv1i32
    67154840U,	// FCVTMUv1i64
    27179U,	// FCVTMUv2f32
    20588U,	// FCVTMUv2f64
    22274U,	// FCVTMUv4f16
    29090U,	// FCVTMUv4f32
    24126U,	// FCVTMUv8f16
    67154703U,	// FCVTNSUWDr
    67154703U,	// FCVTNSUWHr
    67154703U,	// FCVTNSUWSr
    67154703U,	// FCVTNSUXDr
    67154703U,	// FCVTNSUXHr
    67154703U,	// FCVTNSUXSr
    67154703U,	// FCVTNSv1f16
    67154703U,	// FCVTNSv1i32
    67154703U,	// FCVTNSv1i64
    27051U,	// FCVTNSv2f32
    20460U,	// FCVTNSv2f64
    22146U,	// FCVTNSv4f16
    28962U,	// FCVTNSv4f32
    23998U,	// FCVTNSv8f16
    67154848U,	// FCVTNUUWDr
    67154848U,	// FCVTNUUWHr
    67154848U,	// FCVTNUUWSr
    67154848U,	// FCVTNUUXDr
    67154848U,	// FCVTNUUXHr
    67154848U,	// FCVTNUUXSr
    67154848U,	// FCVTNUv1f16
    67154848U,	// FCVTNUv1i32
    67154848U,	// FCVTNUv1i64
    27190U,	// FCVTNUv2f32
    20599U,	// FCVTNUv2f64
    22285U,	// FCVTNUv4f16
    29101U,	// FCVTNUv4f32
    24137U,	// FCVTNUv8f16
    5268343U,	// FCVTNv2i32
    6316919U,	// FCVTNv4i16
    138461222U,	// FCVTNv4i32
    7389222U,	// FCVTNv8i16
    67154719U,	// FCVTPSUWDr
    67154719U,	// FCVTPSUWHr
    67154719U,	// FCVTPSUWSr
    67154719U,	// FCVTPSUXDr
    67154719U,	// FCVTPSUXHr
    67154719U,	// FCVTPSUXSr
    67154719U,	// FCVTPSv1f16
    67154719U,	// FCVTPSv1i32
    67154719U,	// FCVTPSv1i64
    27073U,	// FCVTPSv2f32
    20482U,	// FCVTPSv2f64
    22168U,	// FCVTPSv4f16
    28984U,	// FCVTPSv4f32
    24020U,	// FCVTPSv8f16
    67154856U,	// FCVTPUUWDr
    67154856U,	// FCVTPUUWHr
    67154856U,	// FCVTPUUWSr
    67154856U,	// FCVTPUUXDr
    67154856U,	// FCVTPUUXHr
    67154856U,	// FCVTPUUXSr
    67154856U,	// FCVTPUv1f16
    67154856U,	// FCVTPUv1i32
    67154856U,	// FCVTPUv1i64
    27201U,	// FCVTPUv2f32
    20610U,	// FCVTPUv2f64
    22296U,	// FCVTPUv4f16
    29112U,	// FCVTPUv4f32
    24148U,	// FCVTPUv8f16
    67154818U,	// FCVTSDr
    67154818U,	// FCVTSHr
    67150765U,	// FCVTXNv1i64
    5268397U,	// FCVTXNv2f32
    138461230U,	// FCVTXNv4f32
    2214638394U,	// FCVTZSSWDri
    2214638394U,	// FCVTZSSWHri
    2214638394U,	// FCVTZSSWSri
    2214638394U,	// FCVTZSSXDri
    2214638394U,	// FCVTZSSXHri
    2214638394U,	// FCVTZSSXSri
    67154746U,	// FCVTZSUWDr
    67154746U,	// FCVTZSUWHr
    67154746U,	// FCVTZSUWSr
    67154746U,	// FCVTZSUXDr
    67154746U,	// FCVTZSUXHr
    67154746U,	// FCVTZSUXSr
    2214638394U,	// FCVTZSd
    2214638394U,	// FCVTZSh
    2214638394U,	// FCVTZSs
    67154746U,	// FCVTZSv1f16
    67154746U,	// FCVTZSv1i32
    67154746U,	// FCVTZSv1i64
    27096U,	// FCVTZSv2f32
    20505U,	// FCVTZSv2f64
    2147510744U,	// FCVTZSv2i32_shift
    2147504153U,	// FCVTZSv2i64_shift
    22191U,	// FCVTZSv4f16
    29007U,	// FCVTZSv4f32
    2147505839U,	// FCVTZSv4i16_shift
    2147512655U,	// FCVTZSv4i32_shift
    24043U,	// FCVTZSv8f16
    2147507691U,	// FCVTZSv8i16_shift
    2214638512U,	// FCVTZUSWDri
    2214638512U,	// FCVTZUSWHri
    2214638512U,	// FCVTZUSWSri
    2214638512U,	// FCVTZUSXDri
    2214638512U,	// FCVTZUSXHri
    2214638512U,	// FCVTZUSXSri
    67154864U,	// FCVTZUUWDr
    67154864U,	// FCVTZUUWHr
    67154864U,	// FCVTZUUWSr
    67154864U,	// FCVTZUUXDr
    67154864U,	// FCVTZUUXHr
    67154864U,	// FCVTZUUXSr
    2214638512U,	// FCVTZUd
    2214638512U,	// FCVTZUh
    2214638512U,	// FCVTZUs
    67154864U,	// FCVTZUv1f16
    67154864U,	// FCVTZUv1i32
    67154864U,	// FCVTZUv1i64
    27212U,	// FCVTZUv2f32
    20621U,	// FCVTZUv2f64
    2147510860U,	// FCVTZUv2i32_shift
    2147504269U,	// FCVTZUv2i64_shift
    22307U,	// FCVTZUv4f16
    29123U,	// FCVTZUv4f32
    2147505955U,	// FCVTZUv4i16_shift
    2147512771U,	// FCVTZUv4i32_shift
    24159U,	// FCVTZUv8f16
    2147507807U,	// FCVTZUv8i16_shift
    2214638525U,	// FDIVDrr
    2214638525U,	// FDIVHrr
    2214638525U,	// FDIVSrr
    2147510871U,	// FDIVv2f32
    2147504280U,	// FDIVv2f64
    2147505975U,	// FDIVv4f16
    2147512791U,	// FDIVv4f32
    2147507827U,	// FDIVv8f16
    2214629646U,	// FMADDDrrr
    2214629646U,	// FMADDHrrr
    2214629646U,	// FMADDSrrr
    2214638611U,	// FMAXDrr
    2214638611U,	// FMAXHrr
    2214634256U,	// FMAXNMDrr
    2214634256U,	// FMAXNMHrr
    2147510485U,	// FMAXNMPv2f32
    2147503950U,	// FMAXNMPv2f64
    37422U,	// FMAXNMPv2i16p
    43221U,	// FMAXNMPv2i32p
    36686U,	// FMAXNMPv2i64p
    2147505580U,	// FMAXNMPv4f16
    2147512396U,	// FMAXNMPv4f32
    2147507432U,	// FMAXNMPv8f16
    2214634256U,	// FMAXNMSrr
    38754U,	// FMAXNMVv4i16v
    45570U,	// FMAXNMVv4i32v
    40606U,	// FMAXNMVv8i16v
    2147510235U,	// FMAXNMv2f32
    2147503842U,	// FMAXNMv2f64
    2147505330U,	// FMAXNMv4f16
    2147512260U,	// FMAXNMv4f32
    2147507306U,	// FMAXNMv8f16
    2147510546U,	// FMAXPv2f32
    2147503991U,	// FMAXPv2f64
    37444U,	// FMAXPv2i16p
    43282U,	// FMAXPv2i32p
    36727U,	// FMAXPv2i64p
    2147505641U,	// FMAXPv4f16
    2147512457U,	// FMAXPv4f32
    2147507493U,	// FMAXPv8f16
    2214638611U,	// FMAXSrr
    38805U,	// FMAXVv4i16v
    45621U,	// FMAXVv4i32v
    40657U,	// FMAXVv8i16v
    2147510889U,	// FMAXv2f32
    2147504338U,	// FMAXv2f64
    2147506099U,	// FMAXv4f16
    2147512955U,	// FMAXv4f32
    2147507991U,	// FMAXv8f16
    2214634279U,	// FMINDrr
    2214634279U,	// FMINHrr
    2214634248U,	// FMINNMDrr
    2214634248U,	// FMINNMHrr
    2147510473U,	// FMINNMPv2f32
    2147503938U,	// FMINNMPv2f64
    37410U,	// FMINNMPv2i16p
    43209U,	// FMINNMPv2i32p
    36674U,	// FMINNMPv2i64p
    2147505568U,	// FMINNMPv4f16
    2147512384U,	// FMINNMPv4f32
    2147507420U,	// FMINNMPv8f16
    2214634248U,	// FMINNMSrr
    38742U,	// FMINNMVv4i16v
    45558U,	// FMINNMVv4i32v
    40594U,	// FMINNMVv8i16v
    2147510224U,	// FMINNMv2f32
    2147503831U,	// FMINNMv2f64
    2147505319U,	// FMINNMv4f16
    2147512249U,	// FMINNMv4f32
    2147507295U,	// FMINNMv8f16
    2147510497U,	// FMINPv2f32
    2147503962U,	// FMINPv2f64
    37434U,	// FMINPv2i16p
    43233U,	// FMINPv2i32p
    36698U,	// FMINPv2i64p
    2147505592U,	// FMINPv4f16
    2147512408U,	// FMINPv4f32
    2147507444U,	// FMINPv8f16
    2214634279U,	// FMINSrr
    38766U,	// FMINVv4i16v
    45582U,	// FMINVv4i32v
    40618U,	// FMINVv8i16v
    2147510279U,	// FMINv2f32
    2147503864U,	// FMINv2f64
    2147505374U,	// FMINv4f16
    2147512282U,	// FMINv4f32
    2147507328U,	// FMINv8f16
    2416038281U,	// FMLAv1i16_indexed
    2416043242U,	// FMLAv1i32_indexed
    2416036629U,	// FMLAv1i64_indexed
    2281760196U,	// FMLAv2f32
    2281753778U,	// FMLAv2f64
    2281760196U,	// FMLAv2i32_indexed
    2281753778U,	// FMLAv2i64_indexed
    2281755314U,	// FMLAv4f16
    2281761993U,	// FMLAv4f32
    2281755314U,	// FMLAv4i16_indexed
    2281761993U,	// FMLAv4i32_indexed
    2281757120U,	// FMLAv8f16
    2281757120U,	// FMLAv8i16_indexed
    2416038377U,	// FMLSv1i16_indexed
    2416043338U,	// FMLSv1i32_indexed
    2416036645U,	// FMLSv1i64_indexed
    2281761175U,	// FMLSv2f32
    2281754584U,	// FMLSv2f64
    2281761175U,	// FMLSv2i32_indexed
    2281754584U,	// FMLSv2i64_indexed
    2281756270U,	// FMLSv4f16
    2281763086U,	// FMLSv4f32
    2281756270U,	// FMLSv4i16_indexed
    2281763086U,	// FMLSv4i32_indexed
    2281758122U,	// FMLSv8f16
    2281758122U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    35636U,	// FMOVDXHighr
    67154902U,	// FMOVDXr
    604025814U,	// FMOVDi
    67154902U,	// FMOVDr
    67154902U,	// FMOVHWr
    67154902U,	// FMOVHXr
    604025814U,	// FMOVHi
    67154902U,	// FMOVHr
    0U,	// FMOVS0
    67154902U,	// FMOVSWr
    604025814U,	// FMOVSi
    67154902U,	// FMOVSr
    67154902U,	// FMOVWHr
    67154902U,	// FMOVWSr
    75516724U,	// FMOVXDHighr
    67154902U,	// FMOVXDr
    67154902U,	// FMOVXHr
    604007008U,	// FMOVv2f32_ns
    604000417U,	// FMOVv2f64_ns
    604002188U,	// FMOVv4f16_ns
    604009004U,	// FMOVv4f32_ns
    604004040U,	// FMOVv8f16_ns
    2214628033U,	// FMSUBDrrr
    2214628033U,	// FMSUBHrrr
    2214628033U,	// FMSUBSrrr
    2214634199U,	// FMULDrr
    2214634199U,	// FMULHrr
    2214634199U,	// FMULSrr
    2214638654U,	// FMULX16
    2214638654U,	// FMULX32
    2214638654U,	// FMULX64
    2214629896U,	// FMULXv1i16_indexed
    2214634857U,	// FMULXv1i32_indexed
    2214628164U,	// FMULXv1i64_indexed
    2147510916U,	// FMULXv2f32
    2147504347U,	// FMULXv2f64
    2147510916U,	// FMULXv2i32_indexed
    2147504347U,	// FMULXv2i64_indexed
    2147506126U,	// FMULXv4f16
    2147512982U,	// FMULXv4f32
    2147506126U,	// FMULXv4i16_indexed
    2147512982U,	// FMULXv4i32_indexed
    2147508018U,	// FMULXv8f16
    2147508018U,	// FMULXv8i16_indexed
    2214629857U,	// FMULv1i16_indexed
    2214634818U,	// FMULv1i32_indexed
    2214628125U,	// FMULv1i64_indexed
    2147510215U,	// FMULv2f32
    2147503822U,	// FMULv2f64
    2147510215U,	// FMULv2i32_indexed
    2147503822U,	// FMULv2i64_indexed
    2147505310U,	// FMULv4f16
    2147512230U,	// FMULv4f32
    2147505310U,	// FMULv4i16_indexed
    2147512230U,	// FMULv4i32_indexed
    2147507286U,	// FMULv8f16
    2147507286U,	// FMULv8i16_indexed
    67146101U,	// FNEGDr
    67146101U,	// FNEGHr
    67146101U,	// FNEGSr
    26363U,	// FNEGv2f32
    19834U,	// FNEGv2f64
    21458U,	// FNEGv4f16
    28170U,	// FNEGv4f32
    23264U,	// FNEGv8f16
    2214629653U,	// FNMADDDrrr
    2214629653U,	// FNMADDHrrr
    2214629653U,	// FNMADDSrrr
    2214628040U,	// FNMSUBDrrr
    2214628040U,	// FNMSUBHrrr
    2214628040U,	// FNMSUBSrrr
    2214634205U,	// FNMULDrr
    2214634205U,	// FNMULHrr
    2214634205U,	// FNMULSrr
    67146055U,	// FRECPEv1f16
    67146055U,	// FRECPEv1i32
    67146055U,	// FRECPEv1i64
    26297U,	// FRECPEv2f32
    19791U,	// FRECPEv2f64
    21415U,	// FRECPEv4f16
    28104U,	// FRECPEv4f32
    23221U,	// FRECPEv8f16
    2214638359U,	// FRECPS16
    2214638359U,	// FRECPS32
    2214638359U,	// FRECPS64
    2147510710U,	// FRECPSv2f32
    2147504119U,	// FRECPSv2f64
    2147505805U,	// FRECPSv4f16
    2147512621U,	// FRECPSv4f32
    2147507657U,	// FRECPSv8f16
    67155013U,	// FRECPXv1f16
    67155013U,	// FRECPXv1i32
    67155013U,	// FRECPXv1i64
    67141828U,	// FRINTADr
    67141828U,	// FRINTAHr
    67141828U,	// FRINTASr
    26099U,	// FRINTAv2f32
    19681U,	// FRINTAv2f64
    21217U,	// FRINTAv4f16
    27896U,	// FRINTAv4f32
    23023U,	// FRINTAv8f16
    67150219U,	// FRINTIDr
    67150219U,	// FRINTIHr
    67150219U,	// FRINTISr
    26467U,	// FRINTIv2f32
    19878U,	// FRINTIv2f64
    21562U,	// FRINTIv4f16
    28286U,	// FRINTIv4f32
    23368U,	// FRINTIv8f16
    67150616U,	// FRINTMDr
    67150616U,	// FRINTMHr
    67150616U,	// FRINTMSr
    26598U,	// FRINTMv2f32
    20205U,	// FRINTMv2f64
    21693U,	// FRINTMv4f16
    28623U,	// FRINTMv4f32
    23669U,	// FRINTMv8f16
    67150703U,	// FRINTNDr
    67150703U,	// FRINTNHr
    67150703U,	// FRINTNSr
    26704U,	// FRINTNv2f32
    20225U,	// FRINTNv2f64
    21799U,	// FRINTNv4f16
    28661U,	// FRINTNv4f32
    23707U,	// FRINTNv8f16
    67150815U,	// FRINTPDr
    67150815U,	// FRINTPHr
    67150815U,	// FRINTPSr
    26879U,	// FRINTPv2f32
    20324U,	// FRINTPv2f64
    21974U,	// FRINTPv4f16
    28790U,	// FRINTPv4f32
    23826U,	// FRINTPv8f16
    67155021U,	// FRINTXDr
    67155021U,	// FRINTXHr
    67155021U,	// FRINTXSr
    27278U,	// FRINTXv2f32
    20709U,	// FRINTXv2f64
    22488U,	// FRINTXv4f16
    29344U,	// FRINTXv4f32
    24380U,	// FRINTXv8f16
    67155056U,	// FRINTZDr
    67155056U,	// FRINTZHr
    67155056U,	// FRINTZSr
    27297U,	// FRINTZv2f32
    20720U,	// FRINTZv2f64
    22507U,	// FRINTZv4f16
    29363U,	// FRINTZv4f32
    24399U,	// FRINTZv8f16
    67146078U,	// FRSQRTEv1f16
    67146078U,	// FRSQRTEv1i32
    67146078U,	// FRSQRTEv1i64
    26319U,	// FRSQRTEv2f32
    19802U,	// FRSQRTEv2f64
    21426U,	// FRSQRTEv4f16
    28126U,	// FRSQRTEv4f32
    23232U,	// FRSQRTEv8f16
    2214638380U,	// FRSQRTS16
    2214638380U,	// FRSQRTS32
    2214638380U,	// FRSQRTS64
    2147510732U,	// FRSQRTSv2f32
    2147504141U,	// FRSQRTSv2f64
    2147505827U,	// FRSQRTSv4f16
    2147512643U,	// FRSQRTSv4f32
    2147507679U,	// FRSQRTSv8f16
    67154804U,	// FSQRTDr
    67154804U,	// FSQRTHr
    67154804U,	// FSQRTSr
    27137U,	// FSQRTv2f32
    20546U,	// FSQRTv2f64
    22232U,	// FSQRTv4f16
    29048U,	// FSQRTv4f32
    24084U,	// FSQRTv8f16
    2214628027U,	// FSUBDrr
    2214628027U,	// FSUBHrr
    2214628027U,	// FSUBSrr
    2147509758U,	// FSUBv2f32
    2147503340U,	// FSUBv2f64
    2147504876U,	// FSUBv4f16
    2147511555U,	// FSUBv4f32
    2147506682U,	// FSUBv8f16
    193390U,	// HINT
    95074U,	// HLT
    84747U,	// HVC
    679530993U,	// INSvi16gpr
    746639857U,	// INSvi16lane
    679535954U,	// INSvi32gpr
    746644818U,	// INSvi32lane
    679529261U,	// INSvi64gpr
    746638125U,	// INSvi64lane
    679526622U,	// INSvi8gpr
    746635486U,	// INSvi8lane
    166551U,	// ISB
    196609U,	// LD1Fourv16b
    9650177U,	// LD1Fourv16b_POST
    229377U,	// LD1Fourv1d
    10731521U,	// LD1Fourv1d_POST
    262145U,	// LD1Fourv2d
    9715713U,	// LD1Fourv2d_POST
    294913U,	// LD1Fourv2s
    10797057U,	// LD1Fourv2s_POST
    327681U,	// LD1Fourv4h
    10829825U,	// LD1Fourv4h_POST
    360449U,	// LD1Fourv4s
    9814017U,	// LD1Fourv4s_POST
    393217U,	// LD1Fourv8b
    10895361U,	// LD1Fourv8b_POST
    425985U,	// LD1Fourv8h
    9879553U,	// LD1Fourv8h_POST
    196609U,	// LD1Onev16b
    11747329U,	// LD1Onev16b_POST
    229377U,	// LD1Onev1d
    12828673U,	// LD1Onev1d_POST
    262145U,	// LD1Onev2d
    11812865U,	// LD1Onev2d_POST
    294913U,	// LD1Onev2s
    12894209U,	// LD1Onev2s_POST
    327681U,	// LD1Onev4h
    12926977U,	// LD1Onev4h_POST
    360449U,	// LD1Onev4s
    11911169U,	// LD1Onev4s_POST
    393217U,	// LD1Onev8b
    12992513U,	// LD1Onev8b_POST
    425985U,	// LD1Onev8h
    11976705U,	// LD1Onev8h_POST
    205863U,	// LD1Rv16b
    13853735U,	// LD1Rv16b_POST
    238631U,	// LD1Rv1d
    12837927U,	// LD1Rv1d_POST
    271399U,	// LD1Rv2d
    12870695U,	// LD1Rv2d_POST
    304167U,	// LD1Rv2s
    15000615U,	// LD1Rv2s_POST
    336935U,	// LD1Rv4h
    16081959U,	// LD1Rv4h_POST
    369703U,	// LD1Rv4s
    15066151U,	// LD1Rv4s_POST
    402471U,	// LD1Rv8b
    14050343U,	// LD1Rv8b_POST
    435239U,	// LD1Rv8h
    16180263U,	// LD1Rv8h_POST
    196609U,	// LD1Threev16b
    16990209U,	// LD1Threev16b_POST
    229377U,	// LD1Threev1d
    18071553U,	// LD1Threev1d_POST
    262145U,	// LD1Threev2d
    17055745U,	// LD1Threev2d_POST
    294913U,	// LD1Threev2s
    18137089U,	// LD1Threev2s_POST
    327681U,	// LD1Threev4h
    18169857U,	// LD1Threev4h_POST
    360449U,	// LD1Threev4s
    17154049U,	// LD1Threev4s_POST
    393217U,	// LD1Threev8b
    18235393U,	// LD1Threev8b_POST
    425985U,	// LD1Threev8h
    17219585U,	// LD1Threev8h_POST
    196609U,	// LD1Twov16b
    10698753U,	// LD1Twov16b_POST
    229377U,	// LD1Twov1d
    11780097U,	// LD1Twov1d_POST
    262145U,	// LD1Twov2d
    10764289U,	// LD1Twov2d_POST
    294913U,	// LD1Twov2s
    11845633U,	// LD1Twov2s_POST
    327681U,	// LD1Twov4h
    11878401U,	// LD1Twov4h_POST
    360449U,	// LD1Twov4s
    10862593U,	// LD1Twov4s_POST
    393217U,	// LD1Twov8b
    11943937U,	// LD1Twov8b_POST
    425985U,	// LD1Twov8h
    10928129U,	// LD1Twov8h_POST
    19333121U,	// LD1i16
    20398081U,	// LD1i16_POST
    19365889U,	// LD1i32
    21479425U,	// LD1i32_POST
    19398657U,	// LD1i64
    22560769U,	// LD1i64_POST
    19431425U,	// LD1i8
    23642113U,	// LD1i8_POST
    205869U,	// LD2Rv16b
    15950893U,	// LD2Rv16b_POST
    238637U,	// LD2Rv1d
    11789357U,	// LD2Rv1d_POST
    271405U,	// LD2Rv2d
    11822125U,	// LD2Rv2d_POST
    304173U,	// LD2Rv2s
    12903469U,	// LD2Rv2s_POST
    336941U,	// LD2Rv4h
    15033389U,	// LD2Rv4h_POST
    369709U,	// LD2Rv4s
    12969005U,	// LD2Rv4s_POST
    402477U,	// LD2Rv8b
    16147501U,	// LD2Rv8b_POST
    435245U,	// LD2Rv8h
    15131693U,	// LD2Rv8h_POST
    196633U,	// LD2Twov16b
    10698777U,	// LD2Twov16b_POST
    262169U,	// LD2Twov2d
    10764313U,	// LD2Twov2d_POST
    294937U,	// LD2Twov2s
    11845657U,	// LD2Twov2s_POST
    327705U,	// LD2Twov4h
    11878425U,	// LD2Twov4h_POST
    360473U,	// LD2Twov4s
    10862617U,	// LD2Twov4s_POST
    393241U,	// LD2Twov8b
    11943961U,	// LD2Twov8b_POST
    426009U,	// LD2Twov8h
    10928153U,	// LD2Twov8h_POST
    19333145U,	// LD2i16
    21446681U,	// LD2i16_POST
    19365913U,	// LD2i32
    22528025U,	// LD2i32_POST
    19398681U,	// LD2i64
    24657945U,	// LD2i64_POST
    19431449U,	// LD2i8
    20496409U,	// LD2i8_POST
    205875U,	// LD3Rv16b
    25388083U,	// LD3Rv16b_POST
    238643U,	// LD3Rv1d
    18080819U,	// LD3Rv1d_POST
    271411U,	// LD3Rv2d
    18113587U,	// LD3Rv2d_POST
    304179U,	// LD3Rv2s
    26534963U,	// LD3Rv2s_POST
    336947U,	// LD3Rv4h
    27616307U,	// LD3Rv4h_POST
    369715U,	// LD3Rv4s
    26600499U,	// LD3Rv4s_POST
    402483U,	// LD3Rv8b
    25584691U,	// LD3Rv8b_POST
    435251U,	// LD3Rv8h
    27714611U,	// LD3Rv8h_POST
    196675U,	// LD3Threev16b
    16990275U,	// LD3Threev16b_POST
    262211U,	// LD3Threev2d
    17055811U,	// LD3Threev2d_POST
    294979U,	// LD3Threev2s
    18137155U,	// LD3Threev2s_POST
    327747U,	// LD3Threev4h
    18169923U,	// LD3Threev4h_POST
    360515U,	// LD3Threev4s
    17154115U,	// LD3Threev4s_POST
    393283U,	// LD3Threev8b
    18235459U,	// LD3Threev8b_POST
    426051U,	// LD3Threev8h
    17219651U,	// LD3Threev8h_POST
    19333187U,	// LD3i16
    28786755U,	// LD3i16_POST
    19365955U,	// LD3i32
    29868099U,	// LD3i32_POST
    19398723U,	// LD3i64
    30949443U,	// LD3i64_POST
    19431491U,	// LD3i8
    32030787U,	// LD3i8_POST
    196692U,	// LD4Fourv16b
    9650260U,	// LD4Fourv16b_POST
    262228U,	// LD4Fourv2d
    9715796U,	// LD4Fourv2d_POST
    294996U,	// LD4Fourv2s
    10797140U,	// LD4Fourv2s_POST
    327764U,	// LD4Fourv4h
    10829908U,	// LD4Fourv4h_POST
    360532U,	// LD4Fourv4s
    9814100U,	// LD4Fourv4s_POST
    393300U,	// LD4Fourv8b
    10895444U,	// LD4Fourv8b_POST
    426068U,	// LD4Fourv8h
    9879636U,	// LD4Fourv8h_POST
    205881U,	// LD4Rv16b
    14902329U,	// LD4Rv16b_POST
    238649U,	// LD4Rv1d
    10740793U,	// LD4Rv1d_POST
    271417U,	// LD4Rv2d
    10773561U,	// LD4Rv2d_POST
    304185U,	// LD4Rv2s
    11854905U,	// LD4Rv2s_POST
    336953U,	// LD4Rv4h
    12936249U,	// LD4Rv4h_POST
    369721U,	// LD4Rv4s
    11920441U,	// LD4Rv4s_POST
    402489U,	// LD4Rv8b
    15098937U,	// LD4Rv8b_POST
    435257U,	// LD4Rv8h
    13034553U,	// LD4Rv8h_POST
    19333204U,	// LD4i16
    22495316U,	// LD4i16_POST
    19365972U,	// LD4i32
    24625236U,	// LD4i32_POST
    19398740U,	// LD4i64
    33046612U,	// LD4i64_POST
    19431508U,	// LD4i8
    21545044U,	// LD4i8_POST
    805423421U,	// LDADDALb
    805429668U,	// LDADDALd
    805429199U,	// LDADDALh
    805429668U,	// LDADDALs
    805423314U,	// LDADDAb
    805421157U,	// LDADDAd
    805429082U,	// LDADDAh
    805421157U,	// LDADDAs
    805423521U,	// LDADDLb
    805429796U,	// LDADDLd
    805429299U,	// LDADDLh
    805429796U,	// LDADDLs
    805423413U,	// LDADDb
    805425409U,	// LDADDd
    805429191U,	// LDADDh
    805425409U,	// LDADDs
    2248182296U,	// LDARB
    2248188102U,	// LDARH
    2248188991U,	// LDARW
    2248188991U,	// LDARX
    67150833U,	// LDAXPW
    67150833U,	// LDAXPX
    2248182382U,	// LDAXRB
    2248188188U,	// LDAXRH
    2248189136U,	// LDAXRW
    2248189136U,	// LDAXRX
    805423461U,	// LDCLRALb
    805429721U,	// LDCLRALd
    805429239U,	// LDCLRALh
    805429721U,	// LDCLRALs
    805423350U,	// LDCLRAb
    805421196U,	// LDCLRAd
    805429128U,	// LDCLRAh
    805421196U,	// LDCLRAs
    805423557U,	// LDCLRLb
    805429923U,	// LDCLRLd
    805429335U,	// LDCLRLh
    805429923U,	// LDCLRLs
    805423661U,	// LDCLRb
    805430393U,	// LDCLRd
    805429467U,	// LDCLRh
    805430393U,	// LDCLRs
    805423471U,	// LDEORALb
    805429730U,	// LDEORALd
    805429249U,	// LDEORALh
    805429730U,	// LDEORALs
    805423359U,	// LDEORAb
    805421204U,	// LDEORAd
    805429137U,	// LDEORAh
    805421204U,	// LDEORAs
    805423566U,	// LDEORLb
    805429931U,	// LDEORLd
    805429344U,	// LDEORLh
    805429931U,	// LDEORLs
    805423684U,	// LDEORb
    805430413U,	// LDEORd
    805429490U,	// LDEORh
    805430413U,	// LDEORs
    2248182303U,	// LDLARB
    2248188109U,	// LDLARH
    2248188997U,	// LDLARW
    2248188997U,	// LDLARX
    67150791U,	// LDNPDi
    67150791U,	// LDNPQi
    67150791U,	// LDNPSi
    67150791U,	// LDNPWi
    67150791U,	// LDNPXi
    67150773U,	// LDPDi
    268559285U,	// LDPDpost
    268559285U,	// LDPDpre
    67150773U,	// LDPQi
    268559285U,	// LDPQpost
    268559285U,	// LDPQpre
    67154925U,	// LDPSWi
    268563437U,	// LDPSWpost
    268563437U,	// LDPSWpre
    67150773U,	// LDPSi
    268559285U,	// LDPSpost
    268559285U,	// LDPSpre
    67150773U,	// LDPWi
    268559285U,	// LDPWpost
    268559285U,	// LDPWpre
    67150773U,	// LDPXi
    268559285U,	// LDPXpost
    268559285U,	// LDPXpre
    302107175U,	// LDRBBpost
    2449590823U,	// LDRBBpre
    2248182311U,	// LDRBBroW
    2248182311U,	// LDRBBroX
    2248182311U,	// LDRBBui
    302113877U,	// LDRBpost
    2449597525U,	// LDRBpre
    2248189013U,	// LDRBroW
    2248189013U,	// LDRBroX
    2248189013U,	// LDRBui
    402695253U,	// LDRDl
    302113877U,	// LDRDpost
    2449597525U,	// LDRDpre
    2248189013U,	// LDRDroW
    2248189013U,	// LDRDroX
    2248189013U,	// LDRDui
    302112981U,	// LDRHHpost
    2449596629U,	// LDRHHpre
    2248188117U,	// LDRHHroW
    2248188117U,	// LDRHHroX
    2248188117U,	// LDRHHui
    302113877U,	// LDRHpost
    2449597525U,	// LDRHpre
    2248189013U,	// LDRHroW
    2248189013U,	// LDRHroX
    2248189013U,	// LDRHui
    402695253U,	// LDRQl
    302113877U,	// LDRQpost
    2449597525U,	// LDRQpre
    2248189013U,	// LDRQroW
    2248189013U,	// LDRQroX
    2248189013U,	// LDRQui
    302107292U,	// LDRSBWpost
    2449590940U,	// LDRSBWpre
    2248182428U,	// LDRSBWroW
    2248182428U,	// LDRSBWroX
    2248182428U,	// LDRSBWui
    302107292U,	// LDRSBXpost
    2449590940U,	// LDRSBXpre
    2248182428U,	// LDRSBXroW
    2248182428U,	// LDRSBXroX
    2248182428U,	// LDRSBXui
    302113098U,	// LDRSHWpost
    2449596746U,	// LDRSHWpre
    2248188234U,	// LDRSHWroW
    2248188234U,	// LDRSHWroX
    2248188234U,	// LDRSHWui
    302113098U,	// LDRSHXpost
    2449596746U,	// LDRSHXpre
    2248188234U,	// LDRSHXroW
    2248188234U,	// LDRSHXroX
    2248188234U,	// LDRSHXui
    402699252U,	// LDRSWl
    302117876U,	// LDRSWpost
    2449601524U,	// LDRSWpre
    2248193012U,	// LDRSWroW
    2248193012U,	// LDRSWroX
    2248193012U,	// LDRSWui
    402695253U,	// LDRSl
    302113877U,	// LDRSpost
    2449597525U,	// LDRSpre
    2248189013U,	// LDRSroW
    2248189013U,	// LDRSroX
    2248189013U,	// LDRSui
    402695253U,	// LDRWl
    302113877U,	// LDRWpost
    2449597525U,	// LDRWpre
    2248189013U,	// LDRWroW
    2248189013U,	// LDRWroX
    2248189013U,	// LDRWui
    402695253U,	// LDRXl
    302113877U,	// LDRXpost
    2449597525U,	// LDRXpre
    2248189013U,	// LDRXroW
    2248189013U,	// LDRXroX
    2248189013U,	// LDRXui
    805423489U,	// LDSETALb
    805429746U,	// LDSETALd
    805429267U,	// LDSETALh
    805429746U,	// LDSETALs
    805423375U,	// LDSETAb
    805421244U,	// LDSETAd
    805429153U,	// LDSETAh
    805421244U,	// LDSETAs
    805423582U,	// LDSETLb
    805429960U,	// LDSETLd
    805429360U,	// LDSETLh
    805429960U,	// LDSETLs
    805423795U,	// LDSETb
    805434183U,	// LDSETd
    805429601U,	// LDSETh
    805434183U,	// LDSETs
    805423499U,	// LDSMAXALb
    805429755U,	// LDSMAXALd
    805429277U,	// LDSMAXALh
    805429755U,	// LDSMAXALs
    805423384U,	// LDSMAXAb
    805421260U,	// LDSMAXAd
    805429162U,	// LDSMAXAh
    805421260U,	// LDSMAXAs
    805423591U,	// LDSMAXLb
    805429988U,	// LDSMAXLd
    805429402U,	// LDSMAXLh
    805429988U,	// LDSMAXLs
    805423838U,	// LDSMAXb
    805434393U,	// LDSMAXd
    805429609U,	// LDSMAXh
    805434393U,	// LDSMAXs
    805423431U,	// LDSMINALb
    805429686U,	// LDSMINALd
    805429209U,	// LDSMINALh
    805429686U,	// LDSMINALs
    805423323U,	// LDSMINAb
    805421165U,	// LDSMINAd
    805429101U,	// LDSMINAh
    805421165U,	// LDSMINAs
    805423530U,	// LDSMINLb
    805429892U,	// LDSMINLd
    805429308U,	// LDSMINLh
    805429892U,	// LDSMINLs
    805423616U,	// LDSMINb
    805430061U,	// LDSMINd
    805429422U,	// LDSMINh
    805430061U,	// LDSMINs
    2248182348U,	// LDTRBi
    2248188154U,	// LDTRHi
    2248182435U,	// LDTRSBWi
    2248182435U,	// LDTRSBXi
    2248188241U,	// LDTRSHWi
    2248188241U,	// LDTRSHXi
    2248193019U,	// LDTRSWi
    2248189101U,	// LDTRWi
    2248189101U,	// LDTRXi
    805423510U,	// LDUMAXALb
    805429765U,	// LDUMAXALd
    805429288U,	// LDUMAXALh
    805429765U,	// LDUMAXALs
    805423394U,	// LDUMAXAb
    805421269U,	// LDUMAXAd
    805429172U,	// LDUMAXAh
    805421269U,	// LDUMAXAs
    805423601U,	// LDUMAXLb
    805429997U,	// LDUMAXLd
    805429412U,	// LDUMAXLh
    805429997U,	// LDUMAXLs
    805423847U,	// LDUMAXb
    805434401U,	// LDUMAXd
    805429618U,	// LDUMAXh
    805434401U,	// LDUMAXs
    805423442U,	// LDUMINALb
    805429696U,	// LDUMINALd
    805429220U,	// LDUMINALh
    805429696U,	// LDUMINALs
    805423333U,	// LDUMINAb
    805421174U,	// LDUMINAd
    805429111U,	// LDUMINAh
    805421174U,	// LDUMINAs
    805423540U,	// LDUMINLb
    805429901U,	// LDUMINLd
    805429318U,	// LDUMINLh
    805429901U,	// LDUMINLs
    805423625U,	// LDUMINb
    805430069U,	// LDUMINd
    805429431U,	// LDUMINh
    805430069U,	// LDUMINs
    2248182368U,	// LDURBBi
    2248189124U,	// LDURBi
    2248189124U,	// LDURDi
    2248188174U,	// LDURHHi
    2248189124U,	// LDURHi
    2248189124U,	// LDURQi
    2248182443U,	// LDURSBWi
    2248182443U,	// LDURSBXi
    2248188249U,	// LDURSHWi
    2248188249U,	// LDURSHXi
    2248193027U,	// LDURSWi
    2248189124U,	// LDURSi
    2248189124U,	// LDURWi
    2248189124U,	// LDURXi
    67150840U,	// LDXPW
    67150840U,	// LDXPX
    2248182390U,	// LDXRB
    2248188196U,	// LDXRH
    2248189143U,	// LDXRW
    2248189143U,	// LDXRX
    0U,	// LOADgot
    2214634173U,	// LSLVWr
    2214634173U,	// LSLVXr
    2214634659U,	// LSRVWr
    2214634659U,	// LSRVXr
    2214629647U,	// MADDWrrr
    2214629647U,	// MADDXrrr
    2281751040U,	// MLAv16i8
    2281760197U,	// MLAv2i32
    2281760197U,	// MLAv2i32_indexed
    2281755315U,	// MLAv4i16
    2281755315U,	// MLAv4i16_indexed
    2281761994U,	// MLAv4i32
    2281761994U,	// MLAv4i32_indexed
    2281757121U,	// MLAv8i16
    2281757121U,	// MLAv8i16_indexed
    2281751961U,	// MLAv8i8
    2281751663U,	// MLSv16i8
    2281761176U,	// MLSv2i32
    2281761176U,	// MLSv2i32_indexed
    2281756271U,	// MLSv4i16
    2281756271U,	// MLSv4i16_indexed
    2281763087U,	// MLSv4i32
    2281763087U,	// MLSv4i32_indexed
    2281758123U,	// MLSv8i16
    2281758123U,	// MLSv8i16_indexed
    2281752609U,	// MLSv8i8
    872456595U,	// MOVID
    939541306U,	// MOVIv16b_ns
    872435121U,	// MOVIv2d_ns
    3087034222U,	// MOVIv2i32
    3087034222U,	// MOVIv2s_msl
    3087029317U,	// MOVIv4i16
    3087036041U,	// MOVIv4i32
    3087036041U,	// MOVIv4s_msl
    939542158U,	// MOVIv8b_ns
    3087031123U,	// MOVIv8i16
    335585694U,	// MOVKWi
    335585694U,	// MOVKXi
    3087049639U,	// MOVNWi
    3087049639U,	// MOVNXi
    3087053944U,	// MOVZWi
    3087053944U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    1006678823U,	// MRS
    599208U,	// MSR
    615592U,	// MSRpstateImm1
    615592U,	// MSRpstateImm4
    2214628034U,	// MSUBWrrr
    2214628034U,	// MSUBXrrr
    2147500966U,	// MULv16i8
    2147510216U,	// MULv2i32
    2147510216U,	// MULv2i32_indexed
    2147505311U,	// MULv4i16
    2147505311U,	// MULv4i16_indexed
    2147512231U,	// MULv4i32
    2147512231U,	// MULv4i32_indexed
    2147507287U,	// MULv8i16
    2147507287U,	// MULv8i16_indexed
    2147501808U,	// MULv8i8
    3087034194U,	// MVNIv2i32
    3087034194U,	// MVNIv2s_msl
    3087029289U,	// MVNIv4i16
    3087036013U,	// MVNIv4i32
    3087036013U,	// MVNIv4s_msl
    3087031095U,	// MVNIv8i16
    17173U,	// NEGv16i8
    67146102U,	// NEGv1i64
    26364U,	// NEGv2i32
    19835U,	// NEGv2i64
    21459U,	// NEGv4i16
    28171U,	// NEGv4i32
    23265U,	// NEGv8i16
    18029U,	// NEGv8i8
    17567U,	// NOTv16i8
    18508U,	// NOTv8i8
    0U,	// ORNWrr
    2214634346U,	// ORNWrs
    0U,	// ORNXrr
    2214634346U,	// ORNXrs
    2147500995U,	// ORNv16i8
    2147501902U,	// ORNv8i8
    2214634649U,	// ORRWri
    0U,	// ORRWrr
    2214634649U,	// ORRWrs
    2214634649U,	// ORRXri
    0U,	// ORRXrr
    2214634649U,	// ORRXrs
    2147501128U,	// ORRv16i8
    335604064U,	// ORRv2i32
    335599159U,	// ORRv4i16
    335605975U,	// ORRv4i32
    335601011U,	// ORRv8i16
    2147502078U,	// ORRv8i8
    2147506335U,	// PMULLv16i8
    2147509270U,	// PMULLv1i64
    2147509259U,	// PMULLv2i64
    2147507236U,	// PMULLv8i8
    2147500965U,	// PMULv16i8
    2147501807U,	// PMULv8i8
    403284738U,	// PRFMl
    2248778498U,	// PRFMroW
    2248778498U,	// PRFMroX
    2248778498U,	// PRFMui
    2248778528U,	// PRFUMi
    2147510268U,	// RADDHNv2i64_v2i32
    2281761771U,	// RADDHNv2i64_v4i32
    2147505363U,	// RADDHNv4i32_v4i16
    2281756898U,	// RADDHNv4i32_v8i16
    2281750835U,	// RADDHNv8i16_v16i8
    2147501827U,	// RADDHNv8i16_v8i8
    67154780U,	// RBITWr
    67154780U,	// RBITXr
    17538U,	// RBITv16i8
    18482U,	// RBITv8i8
    1094466U,	// RET
    0U,	// RET_ReallyLR
    67141726U,	// REV16Wr
    67141726U,	// REV16Xr
    16865U,	// REV16v16i8
    17789U,	// REV16v8i8
    67141650U,	// REV32Xr
    16667U,	// REV32v16i8
    21105U,	// REV32v4i16
    22545U,	// REV32v8i16
    17742U,	// REV32v8i8
    16854U,	// REV64v16i8
    26024U,	// REV64v2i32
    21142U,	// REV64v4i16
    27821U,	// REV64v4i32
    22948U,	// REV64v8i16
    17779U,	// REV64v8i8
    67154872U,	// REVWr
    67154872U,	// REVXr
    2214634644U,	// RORVWr
    2214634644U,	// RORVXr
    2281750876U,	// RSHRNv16i8_shift
    2147510330U,	// RSHRNv2i32_shift
    2147505425U,	// RSHRNv4i16_shift
    2281761809U,	// RSHRNv4i32_shift
    2281756936U,	// RSHRNv8i16_shift
    2147501880U,	// RSHRNv8i8_shift
    2147510257U,	// RSUBHNv2i64_v2i32
    2281761759U,	// RSUBHNv2i64_v4i32
    2147505352U,	// RSUBHNv4i32_v4i16
    2281756886U,	// RSUBHNv4i32_v8i16
    2281750822U,	// RSUBHNv8i16_v16i8
    2147501816U,	// RSUBHNv8i16_v8i8
    2281756699U,	// SABALv16i8_v8i16
    2281754042U,	// SABALv2i32_v2i64
    2281762450U,	// SABALv4i16_v4i32
    2281753492U,	// SABALv4i32_v2i64
    2281761544U,	// SABALv8i16_v4i32
    2281757532U,	// SABALv8i8_v8i16
    2281751020U,	// SABAv16i8
    2281760178U,	// SABAv2i32
    2281755296U,	// SABAv4i16
    2281761975U,	// SABAv4i32
    2281757102U,	// SABAv8i16
    2281751943U,	// SABAv8i8
    2147506269U,	// SABDLv16i8_v8i16
    2147503618U,	// SABDLv2i32_v2i64
    2147512026U,	// SABDLv4i16_v4i32
    2147503075U,	// SABDLv4i32_v2i64
    2147511127U,	// SABDLv8i16_v4i32
    2147507096U,	// SABDLv8i8_v8i16
    2147500671U,	// SABDv16i8
    2147509824U,	// SABDv2i32
    2147504942U,	// SABDv4i16
    2147511631U,	// SABDv4i32
    2147506748U,	// SABDv8i16
    2147501559U,	// SABDv8i8
    134274224U,	// SADALPv16i8_v8i16
    134269773U,	// SADALPv2i32_v1i64
    134277277U,	// SADALPv4i16_v2i32
    134270742U,	// SADALPv4i32_v2i64
    134279188U,	// SADALPv8i16_v4i32
    134272372U,	// SADALPv8i8_v4i16
    23750U,	// SADDLPv16i8_v8i16
    19299U,	// SADDLPv2i32_v1i64
    26803U,	// SADDLPv4i16_v2i32
    20268U,	// SADDLPv4i32_v2i64
    28714U,	// SADDLPv8i16_v4i32
    21898U,	// SADDLPv8i8_v4i16
    34002U,	// SADDLVv16i8v
    38720U,	// SADDLVv4i16v
    45536U,	// SADDLVv4i32v
    40572U,	// SADDLVv8i16v
    34938U,	// SADDLVv8i8v
    2147506291U,	// SADDLv16i8_v8i16
    2147503638U,	// SADDLv2i32_v2i64
    2147512046U,	// SADDLv4i16_v4i32
    2147503097U,	// SADDLv4i32_v2i64
    2147511149U,	// SADDLv8i16_v4i32
    2147507116U,	// SADDLv8i8_v8i16
    2147506574U,	// SADDWv16i8_v8i16
    2147504318U,	// SADDWv2i32_v2i64
    2147512935U,	// SADDWv4i16_v4i32
    2147503260U,	// SADDWv4i32_v2i64
    2147511447U,	// SADDWv8i16_v4i32
    2147507971U,	// SADDWv8i8_v8i16
    2214638302U,	// SBCSWr
    2214638302U,	// SBCSXr
    2214628080U,	// SBCWr
    2214628080U,	// SBCXr
    2214634230U,	// SBFMWri
    2214634230U,	// SBFMXri
    2214629735U,	// SCVTFSWDri
    2214629735U,	// SCVTFSWHri
    2214629735U,	// SCVTFSWSri
    2214629735U,	// SCVTFSXDri
    2214629735U,	// SCVTFSXHri
    2214629735U,	// SCVTFSXSri
    67146087U,	// SCVTFUWDri
    67146087U,	// SCVTFUWHri
    67146087U,	// SCVTFUWSri
    67146087U,	// SCVTFUXDri
    67146087U,	// SCVTFUXHri
    67146087U,	// SCVTFUXSri
    2214629735U,	// SCVTFd
    2214629735U,	// SCVTFh
    2214629735U,	// SCVTFs
    67146087U,	// SCVTFv1i16
    67146087U,	// SCVTFv1i32
    67146087U,	// SCVTFv1i64
    26343U,	// SCVTFv2f32
    19814U,	// SCVTFv2f64
    2147509991U,	// SCVTFv2i32_shift
    2147503462U,	// SCVTFv2i64_shift
    21438U,	// SCVTFv4f16
    28150U,	// SCVTFv4f32
    2147505086U,	// SCVTFv4i16_shift
    2147511798U,	// SCVTFv4i32_shift
    23244U,	// SCVTFv8f16
    2147506892U,	// SCVTFv8i16_shift
    2214638531U,	// SDIVWr
    2214638531U,	// SDIVXr
    2416045364U,	// SHA1Crrr
    67146257U,	// SHA1Hrr
    2416045999U,	// SHA1Mrrr
    2416046080U,	// SHA1Prrr
    2281761452U,	// SHA1SU0rrr
    134277857U,	// SHA1SU1rr
    2416044795U,	// SHA256H2rrr
    2416045597U,	// SHA256Hrrr
    134277816U,	// SHA256SU0rr
    2281761517U,	// SHA256SU1rrr
    2147500715U,	// SHADDv16i8
    2147509873U,	// SHADDv2i32
    2147504991U,	// SHADDv4i16
    2147511680U,	// SHADDv4i32
    2147506797U,	// SHADDv8i16
    2147501599U,	// SHADDv8i8
    22666U,	// SHLLv16i8
    2147503739U,	// SHLLv2i32
    28499U,	// SHLLv4i16
    2147503120U,	// SHLLv4i32
    27524U,	// SHLLv8i16
    23569U,	// SHLLv8i8
    2214634053U,	// SHLd
    2147500870U,	// SHLv16i8_shift
    2147510137U,	// SHLv2i32_shift
    2147503660U,	// SHLv2i64_shift
    2147505232U,	// SHLv4i16_shift
    2147512068U,	// SHLv4i32_shift
    2147507138U,	// SHLv8i16_shift
    2147501721U,	// SHLv8i8_shift
    2281750850U,	// SHRNv16i8_shift
    2147510308U,	// SHRNv2i32_shift
    2147505403U,	// SHRNv4i16_shift
    2281761785U,	// SHRNv4i32_shift
    2281756912U,	// SHRNv8i16_shift
    2147501858U,	// SHRNv8i8_shift
    2147500595U,	// SHSUBv16i8
    2147509767U,	// SHSUBv2i32
    2147504885U,	// SHSUBv4i16
    2147511564U,	// SHSUBv4i32
    2147506691U,	// SHSUBv8i16
    2147501511U,	// SHSUBv8i8
    2416042369U,	// SLId
    2281751336U,	// SLIv16i8_shift
    2281760586U,	// SLIv2i32_shift
    2281754006U,	// SLIv2i64_shift
    2281755681U,	// SLIv4i16_shift
    2281762405U,	// SLIv4i32_shift
    2281757487U,	// SLIv8i16_shift
    2281752190U,	// SLIv8i8_shift
    2214634028U,	// SMADDLrrr
    2147501045U,	// SMAXPv16i8
    2147510556U,	// SMAXPv2i32
    2147505651U,	// SMAXPv4i16
    2147512467U,	// SMAXPv4i32
    2147507503U,	// SMAXPv8i16
    2147502003U,	// SMAXPv8i8
    34048U,	// SMAXVv16i8v
    38815U,	// SMAXVv4i16v
    45631U,	// SMAXVv4i32v
    40667U,	// SMAXVv8i16v
    34980U,	// SMAXVv8i8v
    2147501334U,	// SMAXv16i8
    2147510898U,	// SMAXv2i32
    2147506108U,	// SMAXv4i16
    2147512964U,	// SMAXv4i32
    2147508000U,	// SMAXv8i16
    2147502264U,	// SMAXv8i8
    84735U,	// SMC
    2147501014U,	// SMINPv16i8
    2147510507U,	// SMINPv2i32
    2147505602U,	// SMINPv4i16
    2147512418U,	// SMINPv4i32
    2147507454U,	// SMINPv8i16
    2147501975U,	// SMINPv8i8
    34026U,	// SMINVv16i8v
    38776U,	// SMINVv4i16v
    45592U,	// SMINVv4i32v
    40628U,	// SMINVv8i16v
    34960U,	// SMINVv8i8v
    2147500975U,	// SMINv16i8
    2147510288U,	// SMINv2i32
    2147505383U,	// SMINv4i16
    2147512291U,	// SMINv4i32
    2147507337U,	// SMINv8i16
    2147501838U,	// SMINv8i8
    2281756721U,	// SMLALv16i8_v8i16
    2281754074U,	// SMLALv2i32_indexed
    2281754074U,	// SMLALv2i32_v2i64
    2281762482U,	// SMLALv4i16_indexed
    2281762482U,	// SMLALv4i16_v4i32
    2281753527U,	// SMLALv4i32_indexed
    2281753527U,	// SMLALv4i32_v2i64
    2281761579U,	// SMLALv8i16_indexed
    2281761579U,	// SMLALv8i16_v4i32
    2281757552U,	// SMLALv8i8_v8i16
    2281756864U,	// SMLSLv16i8_v8i16
    2281754298U,	// SMLSLv2i32_indexed
    2281754298U,	// SMLSLv2i32_v2i64
    2281762706U,	// SMLSLv4i16_indexed
    2281762706U,	// SMLSLv4i16_v4i32
    2281753685U,	// SMLSLv4i32_indexed
    2281753685U,	// SMLSLv4i32_v2i64
    2281761737U,	// SMLSLv8i16_indexed
    2281761737U,	// SMLSLv8i16_v4i32
    2281757762U,	// SMLSLv8i8_v8i16
    37368U,	// SMOVvi16to32
    37368U,	// SMOVvi16to64
    42329U,	// SMOVvi32to64
    32997U,	// SMOVvi8to32
    32997U,	// SMOVvi8to64
    2214634004U,	// SMSUBLrrr
    2214633612U,	// SMULHrr
    2147506346U,	// SMULLv16i8_v8i16
    2147503770U,	// SMULLv2i32_indexed
    2147503770U,	// SMULLv2i32_v2i64
    2147512178U,	// SMULLv4i16_indexed
    2147512178U,	// SMULLv4i16_v4i32
    2147503154U,	// SMULLv4i32_indexed
    2147503154U,	// SMULLv4i32_v2i64
    2147511206U,	// SMULLv8i16_indexed
    2147511206U,	// SMULLv8i16_v4i32
    2147507246U,	// SMULLv8i8_v8i16
    17489U,	// SQABSv16i8
    67154641U,	// SQABSv1i16
    67154641U,	// SQABSv1i32
    67154641U,	// SQABSv1i64
    67154641U,	// SQABSv1i8
    27004U,	// SQABSv2i32
    20421U,	// SQABSv2i64
    22099U,	// SQABSv4i16
    28915U,	// SQABSv4i32
    23951U,	// SQABSv8i16
    18438U,	// SQABSv8i8
    2147500738U,	// SQADDv16i8
    2214629662U,	// SQADDv1i16
    2214629662U,	// SQADDv1i32
    2214629662U,	// SQADDv1i64
    2214629662U,	// SQADDv1i8
    2147509894U,	// SQADDv2i32
    2147503388U,	// SQADDv2i64
    2147505012U,	// SQADDv4i16
    2147511701U,	// SQADDv4i32
    2147506818U,	// SQADDv8i16
    2147501620U,	// SQADDv8i8
    2416042413U,	// SQDMLALi16
    2416042413U,	// SQDMLALi32
    2416038336U,	// SQDMLALv1i32_indexed
    2416043297U,	// SQDMLALv1i64_indexed
    2281754062U,	// SQDMLALv2i32_indexed
    2281754062U,	// SQDMLALv2i32_v2i64
    2281762470U,	// SQDMLALv4i16_indexed
    2281762470U,	// SQDMLALv4i16_v4i32
    2281753514U,	// SQDMLALv4i32_indexed
    2281753514U,	// SQDMLALv4i32_v2i64
    2281761566U,	// SQDMLALv8i16_indexed
    2281761566U,	// SQDMLALv8i16_v4i32
    2416042681U,	// SQDMLSLi16
    2416042681U,	// SQDMLSLi32
    2416038358U,	// SQDMLSLv1i32_indexed
    2416043319U,	// SQDMLSLv1i64_indexed
    2281754286U,	// SQDMLSLv2i32_indexed
    2281754286U,	// SQDMLSLv2i32_v2i64
    2281762694U,	// SQDMLSLv4i16_indexed
    2281762694U,	// SQDMLSLv4i16_v4i32
    2281753672U,	// SQDMLSLv4i32_indexed
    2281753672U,	// SQDMLSLv4i32_v2i64
    2281761724U,	// SQDMLSLv8i16_indexed
    2281761724U,	// SQDMLSLv8i16_v4i32
    2214633593U,	// SQDMULHv1i16
    2214629789U,	// SQDMULHv1i16_indexed
    2214633593U,	// SQDMULHv1i32
    2214634750U,	// SQDMULHv1i32_indexed
    2147510043U,	// SQDMULHv2i32
    2147510043U,	// SQDMULHv2i32_indexed
    2147505138U,	// SQDMULHv4i16
    2147505138U,	// SQDMULHv4i16_indexed
    2147511862U,	// SQDMULHv4i32
    2147511862U,	// SQDMULHv4i32_indexed
    2147506944U,	// SQDMULHv8i16
    2147506944U,	// SQDMULHv8i16_indexed
    2214634107U,	// SQDMULLi16
    2214634107U,	// SQDMULLi32
    2214629835U,	// SQDMULLv1i32_indexed
    2214634796U,	// SQDMULLv1i64_indexed
    2147503758U,	// SQDMULLv2i32_indexed
    2147503758U,	// SQDMULLv2i32_v2i64
    2147512166U,	// SQDMULLv4i16_indexed
    2147512166U,	// SQDMULLv4i16_v4i32
    2147503141U,	// SQDMULLv4i32_indexed
    2147503141U,	// SQDMULLv4i32_v2i64
    2147511193U,	// SQDMULLv8i16_indexed
    2147511193U,	// SQDMULLv8i16_v4i32
    17171U,	// SQNEGv16i8
    67146107U,	// SQNEGv1i16
    67146107U,	// SQNEGv1i32
    67146107U,	// SQNEGv1i64
    67146107U,	// SQNEGv1i8
    26372U,	// SQNEGv2i32
    19843U,	// SQNEGv2i64
    21467U,	// SQNEGv4i16
    28179U,	// SQNEGv4i32
    23273U,	// SQNEGv8i16
    18027U,	// SQNEGv8i8
    2416038289U,	// SQRDMLAHi16_indexed
    2416043250U,	// SQRDMLAHi32_indexed
    2416041827U,	// SQRDMLAHv1i16
    2416041827U,	// SQRDMLAHv1i32
    2281760526U,	// SQRDMLAHv2i32
    2281760526U,	// SQRDMLAHv2i32_indexed
    2281755621U,	// SQRDMLAHv4i16
    2281755621U,	// SQRDMLAHv4i16_indexed
    2281762345U,	// SQRDMLAHv4i32
    2281762345U,	// SQRDMLAHv4i32_indexed
    2281757427U,	// SQRDMLAHv8i16
    2281757427U,	// SQRDMLAHv8i16_indexed
    2416038324U,	// SQRDMLSHi16_indexed
    2416043285U,	// SQRDMLSHi32_indexed
    2416042304U,	// SQRDMLSHv1i16
    2416042304U,	// SQRDMLSHv1i32
    2281760564U,	// SQRDMLSHv2i32
    2281760564U,	// SQRDMLSHv2i32_indexed
    2281755659U,	// SQRDMLSHv4i16
    2281755659U,	// SQRDMLSHv4i16_indexed
    2281762383U,	// SQRDMLSHv4i32
    2281762383U,	// SQRDMLSHv4i32_indexed
    2281757465U,	// SQRDMLSHv8i16
    2281757465U,	// SQRDMLSHv8i16_indexed
    2214633602U,	// SQRDMULHv1i16
    2214629800U,	// SQRDMULHv1i16_indexed
    2214633602U,	// SQRDMULHv1i32
    2214634761U,	// SQRDMULHv1i32_indexed
    2147510055U,	// SQRDMULHv2i32
    2147510055U,	// SQRDMULHv2i32_indexed
    2147505150U,	// SQRDMULHv4i16
    2147505150U,	// SQRDMULHv4i16_indexed
    2147511874U,	// SQRDMULHv4i32
    2147511874U,	// SQRDMULHv4i32_indexed
    2147506956U,	// SQRDMULHv8i16
    2147506956U,	// SQRDMULHv8i16_indexed
    2147500890U,	// SQRSHLv16i8
    2214634065U,	// SQRSHLv1i16
    2214634065U,	// SQRSHLv1i32
    2214634065U,	// SQRSHLv1i64
    2214634065U,	// SQRSHLv1i8
    2147510155U,	// SQRSHLv2i32
    2147503678U,	// SQRSHLv2i64
    2147505250U,	// SQRSHLv4i16
    2147512086U,	// SQRSHLv4i32
    2147507156U,	// SQRSHLv8i16
    2147501739U,	// SQRSHLv8i8
    2214634328U,	// SQRSHRNb
    2214634328U,	// SQRSHRNh
    2214634328U,	// SQRSHRNs
    2281750874U,	// SQRSHRNv16i8_shift
    2147510328U,	// SQRSHRNv2i32_shift
    2147505423U,	// SQRSHRNv4i16_shift
    2281761807U,	// SQRSHRNv4i32_shift
    2281756934U,	// SQRSHRNv8i16_shift
    2147501878U,	// SQRSHRNv8i8_shift
    2214634389U,	// SQRSHRUNb
    2214634389U,	// SQRSHRUNh
    2214634389U,	// SQRSHRUNs
    2281750950U,	// SQRSHRUNv16i8_shift
    2147510395U,	// SQRSHRUNv2i32_shift
    2147505490U,	// SQRSHRUNv4i16_shift
    2281761877U,	// SQRSHRUNv4i32_shift
    2281757004U,	// SQRSHRUNv8i16_shift
    2147501942U,	// SQRSHRUNv8i8_shift
    2214638480U,	// SQSHLUb
    2214638480U,	// SQSHLUd
    2214638480U,	// SQSHLUh
    2214638480U,	// SQSHLUs
    2147501244U,	// SQSHLUv16i8_shift
    2147510816U,	// SQSHLUv2i32_shift
    2147504225U,	// SQSHLUv2i64_shift
    2147505911U,	// SQSHLUv4i16_shift
    2147512727U,	// SQSHLUv4i32_shift
    2147507763U,	// SQSHLUv8i16_shift
    2147502182U,	// SQSHLUv8i8_shift
    2214634051U,	// SQSHLb
    2214634051U,	// SQSHLd
    2214634051U,	// SQSHLh
    2214634051U,	// SQSHLs
    2147500868U,	// SQSHLv16i8
    2147500868U,	// SQSHLv16i8_shift
    2214634051U,	// SQSHLv1i16
    2214634051U,	// SQSHLv1i32
    2214634051U,	// SQSHLv1i64
    2214634051U,	// SQSHLv1i8
    2147510135U,	// SQSHLv2i32
    2147510135U,	// SQSHLv2i32_shift
    2147503658U,	// SQSHLv2i64
    2147503658U,	// SQSHLv2i64_shift
    2147505230U,	// SQSHLv4i16
    2147505230U,	// SQSHLv4i16_shift
    2147512066U,	// SQSHLv4i32
    2147512066U,	// SQSHLv4i32_shift
    2147507136U,	// SQSHLv8i16
    2147507136U,	// SQSHLv8i16_shift
    2147501719U,	// SQSHLv8i8
    2147501719U,	// SQSHLv8i8_shift
    2214634312U,	// SQSHRNb
    2214634312U,	// SQSHRNh
    2214634312U,	// SQSHRNs
    2281750848U,	// SQSHRNv16i8_shift
    2147510306U,	// SQSHRNv2i32_shift
    2147505401U,	// SQSHRNv4i16_shift
    2281761783U,	// SQSHRNv4i32_shift
    2281756910U,	// SQSHRNv8i16_shift
    2147501856U,	// SQSHRNv8i8_shift
    2214634380U,	// SQSHRUNb
    2214634380U,	// SQSHRUNh
    2214634380U,	// SQSHRUNs
    2281750936U,	// SQSHRUNv16i8_shift
    2147510383U,	// SQSHRUNv2i32_shift
    2147505478U,	// SQSHRUNv4i16_shift
    2281761864U,	// SQSHRUNv4i32_shift
    2281756991U,	// SQSHRUNv8i16_shift
    2147501930U,	// SQSHRUNv8i8_shift
    2147500617U,	// SQSUBv16i8
    2214628048U,	// SQSUBv1i16
    2214628048U,	// SQSUBv1i32
    2214628048U,	// SQSUBv1i64
    2214628048U,	// SQSUBv1i8
    2147509787U,	// SQSUBv2i32
    2147503349U,	// SQSUBv2i64
    2147504905U,	// SQSUBv4i16
    2147511584U,	// SQSUBv4i32
    2147506711U,	// SQSUBv8i16
    2147501531U,	// SQSUBv8i8
    134267264U,	// SQXTNv16i8
    67150718U,	// SQXTNv1i16
    67150718U,	// SQXTNv1i32
    67150718U,	// SQXTNv1i8
    26715U,	// SQXTNv2i32
    21810U,	// SQXTNv4i16
    134278194U,	// SQXTNv4i32
    134273321U,	// SQXTNv8i16
    18262U,	// SQXTNv8i8
    134267317U,	// SQXTUNv16i8
    67150751U,	// SQXTUNv1i16
    67150751U,	// SQXTUNv1i32
    67150751U,	// SQXTUNv1i8
    26760U,	// SQXTUNv2i32
    21855U,	// SQXTUNv4i16
    134278243U,	// SQXTUNv4i32
    134273370U,	// SQXTUNv8i16
    18307U,	// SQXTUNv8i8
    2147500691U,	// SRHADDv16i8
    2147509851U,	// SRHADDv2i32
    2147504969U,	// SRHADDv4i16
    2147511658U,	// SRHADDv4i32
    2147506775U,	// SRHADDv8i16
    2147501577U,	// SRHADDv8i8
    2416042374U,	// SRId
    2281751345U,	// SRIv16i8_shift
    2281760603U,	// SRIv2i32_shift
    2281754014U,	// SRIv2i64_shift
    2281755698U,	// SRIv4i16_shift
    2281762422U,	// SRIv4i32_shift
    2281757504U,	// SRIv8i16_shift
    2281752198U,	// SRIv8i8_shift
    2147500914U,	// SRSHLv16i8
    2214634081U,	// SRSHLv1i64
    2147510177U,	// SRSHLv2i32
    2147503700U,	// SRSHLv2i64
    2147505272U,	// SRSHLv4i16
    2147512108U,	// SRSHLv4i32
    2147507178U,	// SRSHLv8i16
    2147501761U,	// SRSHLv8i8
    2214634586U,	// SRSHRd
    2147501077U,	// SRSHRv16i8_shift
    2147510586U,	// SRSHRv2i32_shift
    2147504011U,	// SRSHRv2i64_shift
    2147505681U,	// SRSHRv4i16_shift
    2147512497U,	// SRSHRv4i32_shift
    2147507533U,	// SRSHRv8i16_shift
    2147502032U,	// SRSHRv8i8_shift
    2416033948U,	// SRSRAd
    2281751049U,	// SRSRAv16i8_shift
    2281760205U,	// SRSRAv2i32_shift
    2281753787U,	// SRSRAv2i64_shift
    2281755323U,	// SRSRAv4i16_shift
    2281762002U,	// SRSRAv4i32_shift
    2281757129U,	// SRSRAv8i16_shift
    2281751969U,	// SRSRAv8i8_shift
    2147506313U,	// SSHLLv16i8_shift
    2147503738U,	// SSHLLv2i32_shift
    2147512146U,	// SSHLLv4i16_shift
    2147503119U,	// SSHLLv4i32_shift
    2147511171U,	// SSHLLv8i16_shift
    2147507216U,	// SSHLLv8i8_shift
    2147500936U,	// SSHLv16i8
    2214634095U,	// SSHLv1i64
    2147510197U,	// SSHLv2i32
    2147503720U,	// SSHLv2i64
    2147505292U,	// SSHLv4i16
    2147512128U,	// SSHLv4i32
    2147507198U,	// SSHLv8i16
    2147501781U,	// SSHLv8i8
    2214634600U,	// SSHRd
    2147501099U,	// SSHRv16i8_shift
    2147510606U,	// SSHRv2i32_shift
    2147504031U,	// SSHRv2i64_shift
    2147505701U,	// SSHRv4i16_shift
    2147512517U,	// SSHRv4i32_shift
    2147507553U,	// SSHRv8i16_shift
    2147502052U,	// SSHRv8i8_shift
    2416033962U,	// SSRAd
    2281751071U,	// SSRAv16i8_shift
    2281760225U,	// SSRAv2i32_shift
    2281753807U,	// SSRAv2i64_shift
    2281755343U,	// SSRAv4i16_shift
    2281762022U,	// SSRAv4i32_shift
    2281757149U,	// SSRAv8i16_shift
    2281751989U,	// SSRAv8i8_shift
    2147506247U,	// SSUBLv16i8_v8i16
    2147503598U,	// SSUBLv2i32_v2i64
    2147512006U,	// SSUBLv4i16_v4i32
    2147503053U,	// SSUBLv4i32_v2i64
    2147511105U,	// SSUBLv8i16_v4i32
    2147507076U,	// SSUBLv8i8_v8i16
    2147506552U,	// SSUBWv16i8_v8i16
    2147504298U,	// SSUBWv2i32_v2i64
    2147512915U,	// SSUBWv4i16_v4i32
    2147503238U,	// SSUBWv4i32_v2i64
    2147511425U,	// SSUBWv8i16_v4i32
    2147507951U,	// SSUBWv8i8_v8i16
    196621U,	// ST1Fourv16b
    9650189U,	// ST1Fourv16b_POST
    229389U,	// ST1Fourv1d
    10731533U,	// ST1Fourv1d_POST
    262157U,	// ST1Fourv2d
    9715725U,	// ST1Fourv2d_POST
    294925U,	// ST1Fourv2s
    10797069U,	// ST1Fourv2s_POST
    327693U,	// ST1Fourv4h
    10829837U,	// ST1Fourv4h_POST
    360461U,	// ST1Fourv4s
    9814029U,	// ST1Fourv4s_POST
    393229U,	// ST1Fourv8b
    10895373U,	// ST1Fourv8b_POST
    425997U,	// ST1Fourv8h
    9879565U,	// ST1Fourv8h_POST
    196621U,	// ST1Onev16b
    11747341U,	// ST1Onev16b_POST
    229389U,	// ST1Onev1d
    12828685U,	// ST1Onev1d_POST
    262157U,	// ST1Onev2d
    11812877U,	// ST1Onev2d_POST
    294925U,	// ST1Onev2s
    12894221U,	// ST1Onev2s_POST
    327693U,	// ST1Onev4h
    12926989U,	// ST1Onev4h_POST
    360461U,	// ST1Onev4s
    11911181U,	// ST1Onev4s_POST
    393229U,	// ST1Onev8b
    12992525U,	// ST1Onev8b_POST
    425997U,	// ST1Onev8h
    11976717U,	// ST1Onev8h_POST
    196621U,	// ST1Threev16b
    16990221U,	// ST1Threev16b_POST
    229389U,	// ST1Threev1d
    18071565U,	// ST1Threev1d_POST
    262157U,	// ST1Threev2d
    17055757U,	// ST1Threev2d_POST
    294925U,	// ST1Threev2s
    18137101U,	// ST1Threev2s_POST
    327693U,	// ST1Threev4h
    18169869U,	// ST1Threev4h_POST
    360461U,	// ST1Threev4s
    17154061U,	// ST1Threev4s_POST
    393229U,	// ST1Threev8b
    18235405U,	// ST1Threev8b_POST
    425997U,	// ST1Threev8h
    17219597U,	// ST1Threev8h_POST
    196621U,	// ST1Twov16b
    10698765U,	// ST1Twov16b_POST
    229389U,	// ST1Twov1d
    11780109U,	// ST1Twov1d_POST
    262157U,	// ST1Twov2d
    10764301U,	// ST1Twov2d_POST
    294925U,	// ST1Twov2s
    11845645U,	// ST1Twov2s_POST
    327693U,	// ST1Twov4h
    11878413U,	// ST1Twov4h_POST
    360461U,	// ST1Twov4s
    10862605U,	// ST1Twov4s_POST
    393229U,	// ST1Twov8b
    11943949U,	// ST1Twov8b_POST
    425997U,	// ST1Twov8h
    10928141U,	// ST1Twov8h_POST
    638989U,	// ST1i16
    1108803597U,	// ST1i16_POST
    655373U,	// ST1i32
    1175945229U,	// ST1i32_POST
    671757U,	// ST1i64
    1243086861U,	// ST1i64_POST
    688141U,	// ST1i8
    1310228493U,	// ST1i8_POST
    196670U,	// ST2Twov16b
    10698814U,	// ST2Twov16b_POST
    262206U,	// ST2Twov2d
    10764350U,	// ST2Twov2d_POST
    294974U,	// ST2Twov2s
    11845694U,	// ST2Twov2s_POST
    327742U,	// ST2Twov4h
    11878462U,	// ST2Twov4h_POST
    360510U,	// ST2Twov4s
    10862654U,	// ST2Twov4s_POST
    393278U,	// ST2Twov8b
    11943998U,	// ST2Twov8b_POST
    426046U,	// ST2Twov8h
    10928190U,	// ST2Twov8h_POST
    639038U,	// ST2i16
    1175912510U,	// ST2i16_POST
    655422U,	// ST2i32
    1243054142U,	// ST2i32_POST
    671806U,	// ST2i64
    1377304638U,	// ST2i64_POST
    688190U,	// ST2i8
    1108901950U,	// ST2i8_POST
    196687U,	// ST3Threev16b
    16990287U,	// ST3Threev16b_POST
    262223U,	// ST3Threev2d
    17055823U,	// ST3Threev2d_POST
    294991U,	// ST3Threev2s
    18137167U,	// ST3Threev2s_POST
    327759U,	// ST3Threev4h
    18169935U,	// ST3Threev4h_POST
    360527U,	// ST3Threev4s
    17154127U,	// ST3Threev4s_POST
    393295U,	// ST3Threev8b
    18235471U,	// ST3Threev8b_POST
    426063U,	// ST3Threev8h
    17219663U,	// ST3Threev8h_POST
    639055U,	// ST3i16
    1444347983U,	// ST3i16_POST
    655439U,	// ST3i32
    1511489615U,	// ST3i32_POST
    671823U,	// ST3i64
    1578631247U,	// ST3i64_POST
    688207U,	// ST3i8
    1645772879U,	// ST3i8_POST
    196697U,	// ST4Fourv16b
    9650265U,	// ST4Fourv16b_POST
    262233U,	// ST4Fourv2d
    9715801U,	// ST4Fourv2d_POST
    295001U,	// ST4Fourv2s
    10797145U,	// ST4Fourv2s_POST
    327769U,	// ST4Fourv4h
    10829913U,	// ST4Fourv4h_POST
    360537U,	// ST4Fourv4s
    9814105U,	// ST4Fourv4s_POST
    393305U,	// ST4Fourv8b
    10895449U,	// ST4Fourv8b_POST
    426073U,	// ST4Fourv8h
    9879641U,	// ST4Fourv8h_POST
    639065U,	// ST4i16
    1243021401U,	// ST4i16_POST
    655449U,	// ST4i32
    1377271897U,	// ST4i32_POST
    671833U,	// ST4i64
    1712848985U,	// ST4i64_POST
    688217U,	// ST4i8
    1176010841U,	// ST4i8_POST
    2248182325U,	// STLLRB
    2248188131U,	// STLLRH
    2248189056U,	// STLLRW
    2248189056U,	// STLLRX
    2248182333U,	// STLRB
    2248188139U,	// STLRH
    2248189063U,	// STLRW
    2248189063U,	// STLRX
    2214634494U,	// STLXPW
    2214634494U,	// STLXPX
    67144317U,	// STLXRB
    67150123U,	// STLXRH
    67151069U,	// STLXRW
    67151069U,	// STLXRX
    67150797U,	// STNPDi
    67150797U,	// STNPQi
    67150797U,	// STNPSi
    67150797U,	// STNPWi
    67150797U,	// STNPXi
    67150823U,	// STPDi
    268559335U,	// STPDpost
    268559335U,	// STPDpre
    67150823U,	// STPQi
    268559335U,	// STPQpost
    268559335U,	// STPQpre
    67150823U,	// STPSi
    268559335U,	// STPSpost
    268559335U,	// STPSpre
    67150823U,	// STPWi
    268559335U,	// STPWpost
    268559335U,	// STPWpre
    67150823U,	// STPXi
    268559335U,	// STPXpost
    268559335U,	// STPXpre
    302107219U,	// STRBBpost
    2449590867U,	// STRBBpre
    2248182355U,	// STRBBroW
    2248182355U,	// STRBBroX
    2248182355U,	// STRBBui
    302113971U,	// STRBpost
    2449597619U,	// STRBpre
    2248189107U,	// STRBroW
    2248189107U,	// STRBroX
    2248189107U,	// STRBui
    302113971U,	// STRDpost
    2449597619U,	// STRDpre
    2248189107U,	// STRDroW
    2248189107U,	// STRDroX
    2248189107U,	// STRDui
    302113025U,	// STRHHpost
    2449596673U,	// STRHHpre
    2248188161U,	// STRHHroW
    2248188161U,	// STRHHroX
    2248188161U,	// STRHHui
    302113971U,	// STRHpost
    2449597619U,	// STRHpre
    2248189107U,	// STRHroW
    2248189107U,	// STRHroX
    2248189107U,	// STRHui
    302113971U,	// STRQpost
    2449597619U,	// STRQpre
    2248189107U,	// STRQroW
    2248189107U,	// STRQroX
    2248189107U,	// STRQui
    302113971U,	// STRSpost
    2449597619U,	// STRSpre
    2248189107U,	// STRSroW
    2248189107U,	// STRSroX
    2248189107U,	// STRSui
    302113971U,	// STRWpost
    2449597619U,	// STRWpre
    2248189107U,	// STRWroW
    2248189107U,	// STRWroX
    2248189107U,	// STRWui
    302113971U,	// STRXpost
    2449597619U,	// STRXpre
    2248189107U,	// STRXroW
    2248189107U,	// STRXroX
    2248189107U,	// STRXui
    2248182361U,	// STTRBi
    2248188167U,	// STTRHi
    2248189112U,	// STTRWi
    2248189112U,	// STTRXi
    2248182375U,	// STURBBi
    2248189130U,	// STURBi
    2248189130U,	// STURDi
    2248188181U,	// STURHHi
    2248189130U,	// STURHi
    2248189130U,	// STURQi
    2248189130U,	// STURSi
    2248189130U,	// STURWi
    2248189130U,	// STURXi
    2214634501U,	// STXPW
    2214634501U,	// STXPX
    67144325U,	// STXRB
    67150131U,	// STXRH
    67151076U,	// STXRW
    67151076U,	// STXRX
    2147510258U,	// SUBHNv2i64_v2i32
    2281761760U,	// SUBHNv2i64_v4i32
    2147505353U,	// SUBHNv4i32_v4i16
    2281756887U,	// SUBHNv4i32_v8i16
    2281750823U,	// SUBHNv8i16_v16i8
    2147501817U,	// SUBHNv8i16_v8i8
    2214638296U,	// SUBSWri
    0U,	// SUBSWrr
    2214638296U,	// SUBSWrs
    2214638296U,	// SUBSWrx
    2214638296U,	// SUBSXri
    0U,	// SUBSXrr
    2214638296U,	// SUBSXrs
    2214638296U,	// SUBSXrx
    2214638296U,	// SUBSXrx64
    2214628028U,	// SUBWri
    0U,	// SUBWrr
    2214628028U,	// SUBWrs
    2214628028U,	// SUBWrx
    2214628028U,	// SUBXri
    0U,	// SUBXrr
    2214628028U,	// SUBXrs
    2214628028U,	// SUBXrx
    2214628028U,	// SUBXrx64
    2147500597U,	// SUBv16i8
    2214628028U,	// SUBv1i64
    2147509759U,	// SUBv2i32
    2147503341U,	// SUBv2i64
    2147504877U,	// SUBv4i16
    2147511556U,	// SUBv4i32
    2147506683U,	// SUBv8i16
    2147501513U,	// SUBv8i8
    134267597U,	// SUQADDv16i8
    268554533U,	// SUQADDv1i16
    268554533U,	// SUQADDv1i32
    268554533U,	// SUQADDv1i64
    268554533U,	// SUQADDv1i8
    134276752U,	// SUQADDv2i32
    134270246U,	// SUQADDv2i64
    134271870U,	// SUQADDv4i16
    134278559U,	// SUQADDv4i32
    134273676U,	// SUQADDv8i16
    134268478U,	// SUQADDv8i8
    84752U,	// SVC
    805423453U,	// SWPALb
    805429714U,	// SWPALd
    805429231U,	// SWPALh
    805429714U,	// SWPALs
    805423343U,	// SWPAb
    805421190U,	// SWPAd
    805429121U,	// SWPAh
    805421190U,	// SWPAs
    805423550U,	// SWPLb
    805429917U,	// SWPLd
    805429328U,	// SWPLh
    805429917U,	// SWPLs
    805423634U,	// SWPb
    805430252U,	// SWPd
    805429440U,	// SWPh
    805430252U,	// SWPs
    2214634178U,	// SYSLxt
    1744876341U,	// SYSxt
    3995099663U,	// TBLv16i8Four
    3995099663U,	// TBLv16i8One
    3995099663U,	// TBLv16i8Three
    3995099663U,	// TBLv16i8Two
    1848664591U,	// TBLv8i8Four
    1848664591U,	// TBLv8i8One
    1848664591U,	// TBLv8i8Three
    1848664591U,	// TBLv8i8Two
    2214638698U,	// TBNZW
    2214638698U,	// TBNZX
    4062245929U,	// TBXv16i8Four
    4062245929U,	// TBXv16i8One
    4062245929U,	// TBXv16i8Three
    4062245929U,	// TBXv16i8Two
    1915810857U,	// TBXv8i8Four
    1915810857U,	// TBXv8i8One
    1915810857U,	// TBXv8i8Three
    1915810857U,	// TBXv8i8Two
    2214638682U,	// TBZW
    2214638682U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1094782U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147500285U,	// TRN1v16i8
    2147509618U,	// TRN1v2i32
    2147502969U,	// TRN1v2i64
    2147504726U,	// TRN1v4i16
    2147510982U,	// TRN1v4i32
    2147506166U,	// TRN1v8i16
    2147501363U,	// TRN1v8i8
    2147500406U,	// TRN2v16i8
    2147509645U,	// TRN2v2i32
    2147503211U,	// TRN2v2i64
    2147504763U,	// TRN2v4i16
    2147511337U,	// TRN2v4i32
    2147506464U,	// TRN2v8i16
    2147501400U,	// TRN2v8i8
    2281756710U,	// UABALv16i8_v8i16
    2281754052U,	// UABALv2i32_v2i64
    2281762460U,	// UABALv4i16_v4i32
    2281753503U,	// UABALv4i32_v2i64
    2281761555U,	// UABALv8i16_v4i32
    2281757542U,	// UABALv8i8_v8i16
    2281751030U,	// UABAv16i8
    2281760187U,	// UABAv2i32
    2281755305U,	// UABAv4i16
    2281761984U,	// UABAv4i32
    2281757111U,	// UABAv8i16
    2281751952U,	// UABAv8i8
    2147506280U,	// UABDLv16i8_v8i16
    2147503628U,	// UABDLv2i32_v2i64
    2147512036U,	// UABDLv4i16_v4i32
    2147503086U,	// UABDLv4i32_v2i64
    2147511138U,	// UABDLv8i16_v4i32
    2147507106U,	// UABDLv8i8_v8i16
    2147500681U,	// UABDv16i8
    2147509833U,	// UABDv2i32
    2147504951U,	// UABDv4i16
    2147511640U,	// UABDv4i32
    2147506757U,	// UABDv8i16
    2147501568U,	// UABDv8i8
    134274235U,	// UADALPv16i8_v8i16
    134269784U,	// UADALPv2i32_v1i64
    134277288U,	// UADALPv4i16_v2i32
    134270753U,	// UADALPv4i32_v2i64
    134279199U,	// UADALPv8i16_v4i32
    134272383U,	// UADALPv8i8_v4i16
    23761U,	// UADDLPv16i8_v8i16
    19310U,	// UADDLPv2i32_v1i64
    26814U,	// UADDLPv4i16_v2i32
    20279U,	// UADDLPv4i32_v2i64
    28725U,	// UADDLPv8i16_v4i32
    21909U,	// UADDLPv8i8_v4i16
    34014U,	// UADDLVv16i8v
    38731U,	// UADDLVv4i16v
    45547U,	// UADDLVv4i32v
    40583U,	// UADDLVv8i16v
    34949U,	// UADDLVv8i8v
    2147506302U,	// UADDLv16i8_v8i16
    2147503648U,	// UADDLv2i32_v2i64
    2147512056U,	// UADDLv4i16_v4i32
    2147503108U,	// UADDLv4i32_v2i64
    2147511160U,	// UADDLv8i16_v4i32
    2147507126U,	// UADDLv8i8_v8i16
    2147506585U,	// UADDWv16i8_v8i16
    2147504328U,	// UADDWv2i32_v2i64
    2147512945U,	// UADDWv4i16_v4i32
    2147503271U,	// UADDWv4i32_v2i64
    2147511458U,	// UADDWv8i16_v4i32
    2147507981U,	// UADDWv8i8_v8i16
    2214634236U,	// UBFMWri
    2214634236U,	// UBFMXri
    2214629742U,	// UCVTFSWDri
    2214629742U,	// UCVTFSWHri
    2214629742U,	// UCVTFSWSri
    2214629742U,	// UCVTFSXDri
    2214629742U,	// UCVTFSXHri
    2214629742U,	// UCVTFSXSri
    67146094U,	// UCVTFUWDri
    67146094U,	// UCVTFUWHri
    67146094U,	// UCVTFUWSri
    67146094U,	// UCVTFUXDri
    67146094U,	// UCVTFUXHri
    67146094U,	// UCVTFUXSri
    2214629742U,	// UCVTFd
    2214629742U,	// UCVTFh
    2214629742U,	// UCVTFs
    67146094U,	// UCVTFv1i16
    67146094U,	// UCVTFv1i32
    67146094U,	// UCVTFv1i64
    26353U,	// UCVTFv2f32
    19824U,	// UCVTFv2f64
    2147510001U,	// UCVTFv2i32_shift
    2147503472U,	// UCVTFv2i64_shift
    21448U,	// UCVTFv4f16
    28160U,	// UCVTFv4f32
    2147505096U,	// UCVTFv4i16_shift
    2147511808U,	// UCVTFv4i32_shift
    23254U,	// UCVTFv8f16
    2147506902U,	// UCVTFv8i16_shift
    2214638537U,	// UDIVWr
    2214638537U,	// UDIVXr
    2147500726U,	// UHADDv16i8
    2147509883U,	// UHADDv2i32
    2147505001U,	// UHADDv4i16
    2147511690U,	// UHADDv4i32
    2147506807U,	// UHADDv8i16
    2147501609U,	// UHADDv8i8
    2147500606U,	// UHSUBv16i8
    2147509777U,	// UHSUBv2i32
    2147504895U,	// UHSUBv4i16
    2147511574U,	// UHSUBv4i32
    2147506701U,	// UHSUBv8i16
    2147501521U,	// UHSUBv8i8
    2214634036U,	// UMADDLrrr
    2147501056U,	// UMAXPv16i8
    2147510566U,	// UMAXPv2i32
    2147505661U,	// UMAXPv4i16
    2147512477U,	// UMAXPv4i32
    2147507513U,	// UMAXPv8i16
    2147502013U,	// UMAXPv8i8
    34059U,	// UMAXVv16i8v
    38825U,	// UMAXVv4i16v
    45641U,	// UMAXVv4i32v
    40677U,	// UMAXVv8i16v
    34990U,	// UMAXVv8i8v
    2147501344U,	// UMAXv16i8
    2147510907U,	// UMAXv2i32
    2147506117U,	// UMAXv4i16
    2147512973U,	// UMAXv4i32
    2147508009U,	// UMAXv8i16
    2147502273U,	// UMAXv8i8
    2147501025U,	// UMINPv16i8
    2147510517U,	// UMINPv2i32
    2147505612U,	// UMINPv4i16
    2147512428U,	// UMINPv4i32
    2147507464U,	// UMINPv8i16
    2147501985U,	// UMINPv8i8
    34037U,	// UMINVv16i8v
    38786U,	// UMINVv4i16v
    45602U,	// UMINVv4i32v
    40638U,	// UMINVv8i16v
    34970U,	// UMINVv8i8v
    2147500985U,	// UMINv16i8
    2147510297U,	// UMINv2i32
    2147505392U,	// UMINv4i16
    2147512300U,	// UMINv4i32
    2147507346U,	// UMINv8i16
    2147501847U,	// UMINv8i8
    2281756732U,	// UMLALv16i8_v8i16
    2281754084U,	// UMLALv2i32_indexed
    2281754084U,	// UMLALv2i32_v2i64
    2281762492U,	// UMLALv4i16_indexed
    2281762492U,	// UMLALv4i16_v4i32
    2281753538U,	// UMLALv4i32_indexed
    2281753538U,	// UMLALv4i32_v2i64
    2281761590U,	// UMLALv8i16_indexed
    2281761590U,	// UMLALv8i16_v4i32
    2281757562U,	// UMLALv8i8_v8i16
    2281756875U,	// UMLSLv16i8_v8i16
    2281754308U,	// UMLSLv2i32_indexed
    2281754308U,	// UMLSLv2i32_v2i64
    2281762716U,	// UMLSLv4i16_indexed
    2281762716U,	// UMLSLv4i16_v4i32
    2281753696U,	// UMLSLv4i32_indexed
    2281753696U,	// UMLSLv4i32_v2i64
    2281761748U,	// UMLSLv8i16_indexed
    2281761748U,	// UMLSLv8i16_v4i32
    2281757772U,	// UMLSLv8i8_v8i16
    37376U,	// UMOVvi16
    42337U,	// UMOVvi32
    35644U,	// UMOVvi64
    33005U,	// UMOVvi8
    2214634012U,	// UMSUBLrrr
    2214633619U,	// UMULHrr
    2147506357U,	// UMULLv16i8_v8i16
    2147503780U,	// UMULLv2i32_indexed
    2147503780U,	// UMULLv2i32_v2i64
    2147512188U,	// UMULLv4i16_indexed
    2147512188U,	// UMULLv4i16_v4i32
    2147503165U,	// UMULLv4i32_indexed
    2147503165U,	// UMULLv4i32_v2i64
    2147511217U,	// UMULLv8i16_indexed
    2147511217U,	// UMULLv8i16_v4i32
    2147507256U,	// UMULLv8i8_v8i16
    2147500750U,	// UQADDv16i8
    2214629670U,	// UQADDv1i16
    2214629670U,	// UQADDv1i32
    2214629670U,	// UQADDv1i64
    2214629670U,	// UQADDv1i8
    2147509905U,	// UQADDv2i32
    2147503399U,	// UQADDv2i64
    2147505023U,	// UQADDv4i16
    2147511712U,	// UQADDv4i32
    2147506829U,	// UQADDv8i16
    2147501631U,	// UQADDv8i8
    2147500902U,	// UQRSHLv16i8
    2214634073U,	// UQRSHLv1i16
    2214634073U,	// UQRSHLv1i32
    2214634073U,	// UQRSHLv1i64
    2214634073U,	// UQRSHLv1i8
    2147510166U,	// UQRSHLv2i32
    2147503689U,	// UQRSHLv2i64
    2147505261U,	// UQRSHLv4i16
    2147512097U,	// UQRSHLv4i32
    2147507167U,	// UQRSHLv8i16
    2147501750U,	// UQRSHLv8i8
    2214634337U,	// UQRSHRNb
    2214634337U,	// UQRSHRNh
    2214634337U,	// UQRSHRNs
    2281750888U,	// UQRSHRNv16i8_shift
    2147510340U,	// UQRSHRNv2i32_shift
    2147505435U,	// UQRSHRNv4i16_shift
    2281761820U,	// UQRSHRNv4i32_shift
    2281756947U,	// UQRSHRNv8i16_shift
    2147501890U,	// UQRSHRNv8i8_shift
    2214634058U,	// UQSHLb
    2214634058U,	// UQSHLd
    2214634058U,	// UQSHLh
    2214634058U,	// UQSHLs
    2147500879U,	// UQSHLv16i8
    2147500879U,	// UQSHLv16i8_shift
    2214634058U,	// UQSHLv1i16
    2214634058U,	// UQSHLv1i32
    2214634058U,	// UQSHLv1i64
    2214634058U,	// UQSHLv1i8
    2147510145U,	// UQSHLv2i32
    2147510145U,	// UQSHLv2i32_shift
    2147503668U,	// UQSHLv2i64
    2147503668U,	// UQSHLv2i64_shift
    2147505240U,	// UQSHLv4i16
    2147505240U,	// UQSHLv4i16_shift
    2147512076U,	// UQSHLv4i32
    2147512076U,	// UQSHLv4i32_shift
    2147507146U,	// UQSHLv8i16
    2147507146U,	// UQSHLv8i16_shift
    2147501729U,	// UQSHLv8i8
    2147501729U,	// UQSHLv8i8_shift
    2214634320U,	// UQSHRNb
    2214634320U,	// UQSHRNh
    2214634320U,	// UQSHRNs
    2281750861U,	// UQSHRNv16i8_shift
    2147510317U,	// UQSHRNv2i32_shift
    2147505412U,	// UQSHRNv4i16_shift
    2281761795U,	// UQSHRNv4i32_shift
    2281756922U,	// UQSHRNv8i16_shift
    2147501867U,	// UQSHRNv8i8_shift
    2147500628U,	// UQSUBv16i8
    2214628055U,	// UQSUBv1i16
    2214628055U,	// UQSUBv1i32
    2214628055U,	// UQSUBv1i64
    2214628055U,	// UQSUBv1i8
    2147509797U,	// UQSUBv2i32
    2147503359U,	// UQSUBv2i64
    2147504915U,	// UQSUBv4i16
    2147511594U,	// UQSUBv4i32
    2147506721U,	// UQSUBv8i16
    2147501541U,	// UQSUBv8i8
    134267276U,	// UQXTNv16i8
    67150725U,	// UQXTNv1i16
    67150725U,	// UQXTNv1i32
    67150725U,	// UQXTNv1i8
    26725U,	// UQXTNv2i32
    21820U,	// UQXTNv4i16
    134278205U,	// UQXTNv4i32
    134273332U,	// UQXTNv8i16
    18272U,	// UQXTNv8i8
    26308U,	// URECPEv2i32
    28115U,	// URECPEv4i32
    2147500703U,	// URHADDv16i8
    2147509862U,	// URHADDv2i32
    2147504980U,	// URHADDv4i16
    2147511669U,	// URHADDv4i32
    2147506786U,	// URHADDv8i16
    2147501588U,	// URHADDv8i8
    2147500925U,	// URSHLv16i8
    2214634088U,	// URSHLv1i64
    2147510187U,	// URSHLv2i32
    2147503710U,	// URSHLv2i64
    2147505282U,	// URSHLv4i16
    2147512118U,	// URSHLv4i32
    2147507188U,	// URSHLv8i16
    2147501771U,	// URSHLv8i8
    2214634593U,	// URSHRd
    2147501088U,	// URSHRv16i8_shift
    2147510596U,	// URSHRv2i32_shift
    2147504021U,	// URSHRv2i64_shift
    2147505691U,	// URSHRv4i16_shift
    2147512507U,	// URSHRv4i32_shift
    2147507543U,	// URSHRv8i16_shift
    2147502042U,	// URSHRv8i8_shift
    26331U,	// URSQRTEv2i32
    28138U,	// URSQRTEv4i32
    2416033955U,	// URSRAd
    2281751060U,	// URSRAv16i8_shift
    2281760215U,	// URSRAv2i32_shift
    2281753797U,	// URSRAv2i64_shift
    2281755333U,	// URSRAv4i16_shift
    2281762012U,	// URSRAv4i32_shift
    2281757139U,	// URSRAv8i16_shift
    2281751979U,	// URSRAv8i8_shift
    2147506324U,	// USHLLv16i8_shift
    2147503748U,	// USHLLv2i32_shift
    2147512156U,	// USHLLv4i16_shift
    2147503130U,	// USHLLv4i32_shift
    2147511182U,	// USHLLv8i16_shift
    2147507226U,	// USHLLv8i8_shift
    2147500946U,	// USHLv16i8
    2214634101U,	// USHLv1i64
    2147510206U,	// USHLv2i32
    2147503729U,	// USHLv2i64
    2147505301U,	// USHLv4i16
    2147512137U,	// USHLv4i32
    2147507207U,	// USHLv8i16
    2147501790U,	// USHLv8i8
    2214634606U,	// USHRd
    2147501109U,	// USHRv16i8_shift
    2147510615U,	// USHRv2i32_shift
    2147504040U,	// USHRv2i64_shift
    2147505710U,	// USHRv4i16_shift
    2147512526U,	// USHRv4i32_shift
    2147507562U,	// USHRv8i16_shift
    2147502061U,	// USHRv8i8_shift
    134267585U,	// USQADDv16i8
    268554525U,	// USQADDv1i16
    268554525U,	// USQADDv1i32
    268554525U,	// USQADDv1i64
    268554525U,	// USQADDv1i8
    134276741U,	// USQADDv2i32
    134270235U,	// USQADDv2i64
    134271859U,	// USQADDv4i16
    134278548U,	// USQADDv4i32
    134273665U,	// USQADDv8i16
    134268467U,	// USQADDv8i8
    2416033968U,	// USRAd
    2281751081U,	// USRAv16i8_shift
    2281760234U,	// USRAv2i32_shift
    2281753816U,	// USRAv2i64_shift
    2281755352U,	// USRAv4i16_shift
    2281762031U,	// USRAv4i32_shift
    2281757158U,	// USRAv8i16_shift
    2281751998U,	// USRAv8i8_shift
    2147506258U,	// USUBLv16i8_v8i16
    2147503608U,	// USUBLv2i32_v2i64
    2147512016U,	// USUBLv4i16_v4i32
    2147503064U,	// USUBLv4i32_v2i64
    2147511116U,	// USUBLv8i16_v4i32
    2147507086U,	// USUBLv8i8_v8i16
    2147506563U,	// USUBWv16i8_v8i16
    2147504308U,	// USUBWv2i32_v2i64
    2147512925U,	// USUBWv4i16_v4i32
    2147503249U,	// USUBWv4i32_v2i64
    2147511436U,	// USUBWv8i16_v4i32
    2147507961U,	// USUBWv8i8_v8i16
    2147500305U,	// UZP1v16i8
    2147509636U,	// UZP1v2i32
    2147502987U,	// UZP1v2i64
    2147504744U,	// UZP1v4i16
    2147511000U,	// UZP1v4i32
    2147506184U,	// UZP1v8i16
    2147501381U,	// UZP1v8i8
    2147500492U,	// UZP2v16i8
    2147509663U,	// UZP2v2i32
    2147503229U,	// UZP2v2i64
    2147504781U,	// UZP2v4i16
    2147511416U,	// UZP2v4i32
    2147506543U,	// UZP2v8i16
    2147501418U,	// UZP2v8i8
    134267266U,	// XTNv16i8
    26717U,	// XTNv2i32
    21812U,	// XTNv4i16
    134278196U,	// XTNv4i32
    134273323U,	// XTNv8i16
    18264U,	// XTNv8i8
    2147500295U,	// ZIP1v16i8
    2147509627U,	// ZIP1v2i32
    2147502978U,	// ZIP1v2i64
    2147504735U,	// ZIP1v4i16
    2147510991U,	// ZIP1v4i32
    2147506175U,	// ZIP1v8i16
    2147501372U,	// ZIP1v8i8
    2147500482U,	// ZIP2v16i8
    2147509654U,	// ZIP2v2i32
    2147503220U,	// ZIP2v2i64
    2147504772U,	// ZIP2v4i16
    2147511407U,	// ZIP2v4i32
    2147506534U,	// ZIP2v8i16
    2147501409U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    256U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    256U,	// ADDXrx64
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    640U,	// BFMWri
    640U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    897U,	// CASALb
    897U,	// CASALd
    897U,	// CASALh
    897U,	// CASALs
    897U,	// CASAb
    897U,	// CASAd
    897U,	// CASAh
    897U,	// CASAs
    897U,	// CASLb
    897U,	// CASLd
    897U,	// CASLh
    897U,	// CASLs
    0U,	// CASPALd
    0U,	// CASPALs
    0U,	// CASPAd
    0U,	// CASPAs
    0U,	// CASPLd
    0U,	// CASPLs
    0U,	// CASPd
    0U,	// CASPs
    897U,	// CASb
    897U,	// CASd
    897U,	// CASh
    897U,	// CASs
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    4608U,	// CCMNWi
    4608U,	// CCMNWr
    4608U,	// CCMNXi
    4608U,	// CCMNXr
    4608U,	// CCMPWi
    4608U,	// CCMPWr
    4608U,	// CCMPXi
    4608U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    2U,	// CPYi16
    2U,	// CPYi32
    2U,	// CPYi64
    2U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    4608U,	// CSELWr
    4608U,	// CSELXr
    4608U,	// CSINCWr
    4608U,	// CSINCXr
    4608U,	// CSINVWr
    4608U,	// CSINVXr
    4608U,	// CSNEGWr
    4608U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    2U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    2U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    2U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    2U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    2U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    2U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    2U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    8704U,	// EXTRWrri
    8704U,	// EXTRXrri
    8720U,	// EXTv16i8
    8720U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f16
    16U,	// FABDv4f32
    16U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f16
    16U,	// FACGEv4f32
    16U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f16
    16U,	// FACGTv4f32
    16U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f16
    16U,	// FADDPv4f32
    16U,	// FADDPv8f16
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f16
    16U,	// FADDv4f32
    16U,	// FADDv8f16
    4608U,	// FCCMPDrr
    4608U,	// FCCMPEDrr
    4608U,	// FCCMPEHrr
    4608U,	// FCCMPESrr
    4608U,	// FCCMPHrr
    4608U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i16rz
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f16
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i16rz
    2U,	// FCMEQv4i32rz
    16U,	// FCMEQv8f16
    2U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i16rz
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f16
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i16rz
    2U,	// FCMGEv4i32rz
    16U,	// FCMGEv8f16
    2U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i16rz
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f16
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i16rz
    2U,	// FCMGTv4i32rz
    16U,	// FCMGTv8f16
    2U,	// FCMGTv8i16rz
    2U,	// FCMLEv1i16rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i16rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLEv8i16rz
    2U,	// FCMLTv1i16rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i16rz
    2U,	// FCMLTv4i32rz
    2U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    4608U,	// FCSELDrrr
    4608U,	// FCSELHrrr
    4608U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    3U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    4U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    4U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f16
    16U,	// FDIVv4f32
    16U,	// FDIVv8f16
    8704U,	// FMADDDrrr
    8704U,	// FMADDHrrr
    8704U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f16
    16U,	// FMAXNMPv4f32
    16U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f16
    16U,	// FMAXNMv4f32
    16U,	// FMAXNMv8f16
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f16
    16U,	// FMAXPv4f32
    16U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f16
    16U,	// FMAXv4f32
    16U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f16
    16U,	// FMINNMPv4f32
    16U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f16
    16U,	// FMINNMv4f32
    16U,	// FMINNMv8f16
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f16
    16U,	// FMINPv4f32
    16U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f16
    16U,	// FMINv4f32
    16U,	// FMINv8f16
    1056U,	// FMLAv1i16_indexed
    1056U,	// FMLAv1i32_indexed
    1056U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    1056U,	// FMLAv2i32_indexed
    1056U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f16
    32U,	// FMLAv4f32
    1056U,	// FMLAv4i16_indexed
    1056U,	// FMLAv4i32_indexed
    32U,	// FMLAv8f16
    1056U,	// FMLAv8i16_indexed
    1056U,	// FMLSv1i16_indexed
    1056U,	// FMLSv1i32_indexed
    1056U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    1056U,	// FMLSv2i32_indexed
    1056U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f16
    32U,	// FMLSv4f32
    1056U,	// FMLSv4i16_indexed
    1056U,	// FMLSv4i32_indexed
    32U,	// FMLSv8f16
    1056U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    2U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    8704U,	// FMSUBDrrr
    8704U,	// FMSUBHrrr
    8704U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    1296U,	// FMULXv1i16_indexed
    1296U,	// FMULXv1i32_indexed
    1296U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    1296U,	// FMULXv2i32_indexed
    1296U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f16
    16U,	// FMULXv4f32
    1296U,	// FMULXv4i16_indexed
    1296U,	// FMULXv4i32_indexed
    16U,	// FMULXv8f16
    1296U,	// FMULXv8i16_indexed
    1296U,	// FMULv1i16_indexed
    1296U,	// FMULv1i32_indexed
    1296U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    1296U,	// FMULv2i32_indexed
    1296U,	// FMULv2i64_indexed
    16U,	// FMULv4f16
    16U,	// FMULv4f32
    1296U,	// FMULv4i16_indexed
    1296U,	// FMULv4i32_indexed
    16U,	// FMULv8f16
    1296U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    8704U,	// FNMADDDrrr
    8704U,	// FNMADDHrrr
    8704U,	// FNMADDSrrr
    8704U,	// FNMSUBDrrr
    8704U,	// FNMSUBHrrr
    8704U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f16
    16U,	// FRECPSv4f32
    16U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f16
    16U,	// FRSQRTSv4f32
    16U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f16
    16U,	// FSUBv4f32
    16U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDALb
    0U,	// LDADDALd
    0U,	// LDADDALh
    0U,	// LDADDALs
    0U,	// LDADDAb
    0U,	// LDADDAd
    0U,	// LDADDAh
    0U,	// LDADDAs
    0U,	// LDADDLb
    0U,	// LDADDLd
    0U,	// LDADDLh
    0U,	// LDADDLs
    0U,	// LDADDb
    0U,	// LDADDd
    0U,	// LDADDh
    0U,	// LDADDs
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    769U,	// LDAXPW
    769U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    0U,	// LDCLRALb
    0U,	// LDCLRALd
    0U,	// LDCLRALh
    0U,	// LDCLRALs
    0U,	// LDCLRAb
    0U,	// LDCLRAd
    0U,	// LDCLRAh
    0U,	// LDCLRAs
    0U,	// LDCLRLb
    0U,	// LDCLRLd
    0U,	// LDCLRLh
    0U,	// LDCLRLs
    0U,	// LDCLRb
    0U,	// LDCLRd
    0U,	// LDCLRh
    0U,	// LDCLRs
    0U,	// LDEORALb
    0U,	// LDEORALd
    0U,	// LDEORALh
    0U,	// LDEORALs
    0U,	// LDEORAb
    0U,	// LDEORAd
    0U,	// LDEORAh
    0U,	// LDEORAs
    0U,	// LDEORLb
    0U,	// LDEORLd
    0U,	// LDEORLh
    0U,	// LDEORLs
    0U,	// LDEORb
    0U,	// LDEORd
    0U,	// LDEORh
    0U,	// LDEORs
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    12801U,	// LDNPDi
    16897U,	// LDNPQi
    20993U,	// LDNPSi
    20993U,	// LDNPWi
    12801U,	// LDNPXi
    12801U,	// LDPDi
    26241U,	// LDPDpost
    25217U,	// LDPDpre
    16897U,	// LDPQi
    30337U,	// LDPQpost
    29313U,	// LDPQpre
    20993U,	// LDPSWi
    34433U,	// LDPSWpost
    33409U,	// LDPSWpre
    20993U,	// LDPSi
    34433U,	// LDPSpost
    33409U,	// LDPSpre
    20993U,	// LDPWi
    34433U,	// LDPWpost
    33409U,	// LDPWpre
    12801U,	// LDPXi
    26241U,	// LDPXpost
    25217U,	// LDPXpre
    5U,	// LDRBBpost
    1920U,	// LDRBBpre
    37376U,	// LDRBBroW
    41472U,	// LDRBBroX
    144U,	// LDRBBui
    5U,	// LDRBpost
    1920U,	// LDRBpre
    37376U,	// LDRBroW
    41472U,	// LDRBroX
    144U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    1920U,	// LDRDpre
    45568U,	// LDRDroW
    49664U,	// LDRDroX
    160U,	// LDRDui
    5U,	// LDRHHpost
    1920U,	// LDRHHpre
    53760U,	// LDRHHroW
    57856U,	// LDRHHroX
    176U,	// LDRHHui
    5U,	// LDRHpost
    1920U,	// LDRHpre
    53760U,	// LDRHroW
    57856U,	// LDRHroX
    176U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    1920U,	// LDRQpre
    61952U,	// LDRQroW
    512U,	// LDRQroX
    192U,	// LDRQui
    5U,	// LDRSBWpost
    1920U,	// LDRSBWpre
    37376U,	// LDRSBWroW
    41472U,	// LDRSBWroX
    144U,	// LDRSBWui
    5U,	// LDRSBXpost
    1920U,	// LDRSBXpre
    37376U,	// LDRSBXroW
    41472U,	// LDRSBXroX
    144U,	// LDRSBXui
    5U,	// LDRSHWpost
    1920U,	// LDRSHWpre
    53760U,	// LDRSHWroW
    57856U,	// LDRSHWroX
    176U,	// LDRSHWui
    5U,	// LDRSHXpost
    1920U,	// LDRSHXpre
    53760U,	// LDRSHXroW
    57856U,	// LDRSHXroX
    176U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    1920U,	// LDRSWpre
    4608U,	// LDRSWroW
    8704U,	// LDRSWroX
    208U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    1920U,	// LDRSpre
    4608U,	// LDRSroW
    8704U,	// LDRSroX
    208U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    1920U,	// LDRWpre
    4608U,	// LDRWroW
    8704U,	// LDRWroX
    208U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    1920U,	// LDRXpre
    45568U,	// LDRXroW
    49664U,	// LDRXroX
    160U,	// LDRXui
    0U,	// LDSETALb
    0U,	// LDSETALd
    0U,	// LDSETALh
    0U,	// LDSETALs
    0U,	// LDSETAb
    0U,	// LDSETAd
    0U,	// LDSETAh
    0U,	// LDSETAs
    0U,	// LDSETLb
    0U,	// LDSETLd
    0U,	// LDSETLh
    0U,	// LDSETLs
    0U,	// LDSETb
    0U,	// LDSETd
    0U,	// LDSETh
    0U,	// LDSETs
    0U,	// LDSMAXALb
    0U,	// LDSMAXALd
    0U,	// LDSMAXALh
    0U,	// LDSMAXALs
    0U,	// LDSMAXAb
    0U,	// LDSMAXAd
    0U,	// LDSMAXAh
    0U,	// LDSMAXAs
    0U,	// LDSMAXLb
    0U,	// LDSMAXLd
    0U,	// LDSMAXLh
    0U,	// LDSMAXLs
    0U,	// LDSMAXb
    0U,	// LDSMAXd
    0U,	// LDSMAXh
    0U,	// LDSMAXs
    0U,	// LDSMINALb
    0U,	// LDSMINALd
    0U,	// LDSMINALh
    0U,	// LDSMINALs
    0U,	// LDSMINAb
    0U,	// LDSMINAd
    0U,	// LDSMINAh
    0U,	// LDSMINAs
    0U,	// LDSMINLb
    0U,	// LDSMINLd
    0U,	// LDSMINLh
    0U,	// LDSMINLs
    0U,	// LDSMINb
    0U,	// LDSMINd
    0U,	// LDSMINh
    0U,	// LDSMINs
    768U,	// LDTRBi
    768U,	// LDTRHi
    768U,	// LDTRSBWi
    768U,	// LDTRSBXi
    768U,	// LDTRSHWi
    768U,	// LDTRSHXi
    768U,	// LDTRSWi
    768U,	// LDTRWi
    768U,	// LDTRXi
    0U,	// LDUMAXALb
    0U,	// LDUMAXALd
    0U,	// LDUMAXALh
    0U,	// LDUMAXALs
    0U,	// LDUMAXAb
    0U,	// LDUMAXAd
    0U,	// LDUMAXAh
    0U,	// LDUMAXAs
    0U,	// LDUMAXLb
    0U,	// LDUMAXLd
    0U,	// LDUMAXLh
    0U,	// LDUMAXLs
    0U,	// LDUMAXb
    0U,	// LDUMAXd
    0U,	// LDUMAXh
    0U,	// LDUMAXs
    0U,	// LDUMINALb
    0U,	// LDUMINALd
    0U,	// LDUMINALh
    0U,	// LDUMINALs
    0U,	// LDUMINAb
    0U,	// LDUMINAd
    0U,	// LDUMINAh
    0U,	// LDUMINAs
    0U,	// LDUMINLb
    0U,	// LDUMINLd
    0U,	// LDUMINLh
    0U,	// LDUMINLs
    0U,	// LDUMINb
    0U,	// LDUMINd
    0U,	// LDUMINh
    0U,	// LDUMINs
    768U,	// LDURBBi
    768U,	// LDURBi
    768U,	// LDURDi
    768U,	// LDURHHi
    768U,	// LDURHi
    768U,	// LDURQi
    768U,	// LDURSBWi
    768U,	// LDURSBXi
    768U,	// LDURSHWi
    768U,	// LDURSHXi
    768U,	// LDURSWi
    768U,	// LDURSi
    768U,	// LDURWi
    768U,	// LDURXi
    769U,	// LDXPW
    769U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    8704U,	// MADDWrrr
    8704U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    1056U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    1056U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    1056U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    1056U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    1056U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    1056U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    1056U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    1056U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    8704U,	// MSUBWrrr
    8704U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    1296U,	// MULv2i32_indexed
    16U,	// MULv4i16
    1296U,	// MULv4i16_indexed
    16U,	// MULv4i32
    1296U,	// MULv4i32_indexed
    16U,	// MULv8i16
    1296U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    45568U,	// PRFMroW
    49664U,	// PRFMroX
    160U,	// PRFMui
    768U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    8704U,	// SBFMWri
    8704U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    8704U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    1056U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    1056U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    1056U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    1056U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    1056U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    1056U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    1056U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    1056U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    2U,	// SMOVvi16to32
    2U,	// SMOVvi16to64
    2U,	// SMOVvi32to64
    2U,	// SMOVvi8to32
    2U,	// SMOVvi8to64
    8704U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    1296U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    1296U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    1296U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    1296U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    1056U,	// SQDMLALv1i32_indexed
    1056U,	// SQDMLALv1i64_indexed
    1056U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    1056U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    1056U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    1056U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    1056U,	// SQDMLSLv1i32_indexed
    1056U,	// SQDMLSLv1i64_indexed
    1056U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    1056U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    1056U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    1056U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    1296U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    1296U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    1296U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    1296U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    1296U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    1296U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    1296U,	// SQDMULLv1i32_indexed
    1296U,	// SQDMULLv1i64_indexed
    1296U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    1296U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    1296U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    1296U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    1056U,	// SQRDMLAHi16_indexed
    1056U,	// SQRDMLAHi32_indexed
    128U,	// SQRDMLAHv1i16
    128U,	// SQRDMLAHv1i32
    32U,	// SQRDMLAHv2i32
    1056U,	// SQRDMLAHv2i32_indexed
    32U,	// SQRDMLAHv4i16
    1056U,	// SQRDMLAHv4i16_indexed
    32U,	// SQRDMLAHv4i32
    1056U,	// SQRDMLAHv4i32_indexed
    32U,	// SQRDMLAHv8i16
    1056U,	// SQRDMLAHv8i16_indexed
    1056U,	// SQRDMLSHi16_indexed
    1056U,	// SQRDMLSHi32_indexed
    128U,	// SQRDMLSHv1i16
    128U,	// SQRDMLSHv1i32
    32U,	// SQRDMLSHv2i32
    1056U,	// SQRDMLSHv2i32_indexed
    32U,	// SQRDMLSHv4i16
    1056U,	// SQRDMLSHv4i16_indexed
    32U,	// SQRDMLSHv4i32
    1056U,	// SQRDMLSHv4i32_indexed
    32U,	// SQRDMLSHv8i16
    1056U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    1296U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    1296U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    1296U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    1296U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    1296U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    1296U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    2048U,	// STLXPW
    2048U,	// STLXPX
    769U,	// STLXRB
    769U,	// STLXRH
    769U,	// STLXRW
    769U,	// STLXRX
    12801U,	// STNPDi
    16897U,	// STNPQi
    20993U,	// STNPSi
    20993U,	// STNPWi
    12801U,	// STNPXi
    12801U,	// STPDi
    26241U,	// STPDpost
    25217U,	// STPDpre
    16897U,	// STPQi
    30337U,	// STPQpost
    29313U,	// STPQpre
    20993U,	// STPSi
    34433U,	// STPSpost
    33409U,	// STPSpre
    20993U,	// STPWi
    34433U,	// STPWpost
    33409U,	// STPWpre
    12801U,	// STPXi
    26241U,	// STPXpost
    25217U,	// STPXpre
    5U,	// STRBBpost
    1920U,	// STRBBpre
    37376U,	// STRBBroW
    41472U,	// STRBBroX
    144U,	// STRBBui
    5U,	// STRBpost
    1920U,	// STRBpre
    37376U,	// STRBroW
    41472U,	// STRBroX
    144U,	// STRBui
    5U,	// STRDpost
    1920U,	// STRDpre
    45568U,	// STRDroW
    49664U,	// STRDroX
    160U,	// STRDui
    5U,	// STRHHpost
    1920U,	// STRHHpre
    53760U,	// STRHHroW
    57856U,	// STRHHroX
    176U,	// STRHHui
    5U,	// STRHpost
    1920U,	// STRHpre
    53760U,	// STRHroW
    57856U,	// STRHroX
    176U,	// STRHui
    5U,	// STRQpost
    1920U,	// STRQpre
    61952U,	// STRQroW
    512U,	// STRQroX
    192U,	// STRQui
    5U,	// STRSpost
    1920U,	// STRSpre
    4608U,	// STRSroW
    8704U,	// STRSroX
    208U,	// STRSui
    5U,	// STRWpost
    1920U,	// STRWpre
    4608U,	// STRWroW
    8704U,	// STRWroX
    208U,	// STRWui
    5U,	// STRXpost
    1920U,	// STRXpre
    45568U,	// STRXroW
    49664U,	// STRXroX
    160U,	// STRXui
    768U,	// STTRBi
    768U,	// STTRHi
    768U,	// STTRWi
    768U,	// STTRXi
    768U,	// STURBBi
    768U,	// STURBi
    768U,	// STURDi
    768U,	// STURHHi
    768U,	// STURHi
    768U,	// STURQi
    768U,	// STURSi
    768U,	// STURWi
    768U,	// STURXi
    2048U,	// STXPW
    2048U,	// STXPX
    769U,	// STXRB
    769U,	// STXRH
    769U,	// STXRW
    769U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    256U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    256U,	// SUBXrx64
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPALb
    0U,	// SWPALd
    0U,	// SWPALh
    0U,	// SWPALs
    0U,	// SWPAb
    0U,	// SWPAd
    0U,	// SWPAh
    0U,	// SWPAs
    0U,	// SWPLb
    0U,	// SWPLd
    0U,	// SWPLh
    0U,	// SWPLs
    0U,	// SWPb
    0U,	// SWPd
    0U,	// SWPh
    0U,	// SWPs
    224U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    240U,	// TBNZW
    240U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    240U,	// TBZW
    240U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    8704U,	// UBFMWri
    8704U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    8704U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    1056U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    1056U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    1056U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    1056U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    1056U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    1056U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    1056U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    1056U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    2U,	// UMOVvi16
    2U,	// UMOVvi32
    2U,	// UMOVvi64
    2U,	// UMOVvi8
    8704U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    1296U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    1296U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    1296U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    1296U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// G_ADD
    0U,	// G_OR
    0U,	// G_BR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESMCrr
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BR
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASALb
    0U,	// CASALd
    0U,	// CASALh
    0U,	// CASALs
    0U,	// CASAb
    0U,	// CASAd
    0U,	// CASAh
    0U,	// CASAs
    0U,	// CASLb
    0U,	// CASLd
    0U,	// CASLh
    0U,	// CASLs
    0U,	// CASPALd
    0U,	// CASPALs
    0U,	// CASPAd
    0U,	// CASPAs
    0U,	// CASPLd
    0U,	// CASPLs
    0U,	// CASPd
    0U,	// CASPs
    0U,	// CASb
    0U,	// CASd
    0U,	// CASh
    0U,	// CASs
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    0U,	// CCMNWi
    0U,	// CCMNWr
    0U,	// CCMNXi
    0U,	// CCMNXr
    0U,	// CCMPWi
    0U,	// CCMPWr
    0U,	// CCMPXi
    0U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    0U,	// CSELWr
    0U,	// CSELXr
    0U,	// CSINCWr
    0U,	// CSINCXr
    0U,	// CSINVWr
    0U,	// CSINVXr
    0U,	// CSNEGWr
    0U,	// CSNEGXr
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// EXTRWrri
    0U,	// EXTRXrri
    0U,	// EXTv16i8
    0U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    0U,	// FCCMPDrr
    0U,	// FCCMPEDrr
    0U,	// FCCMPEHrr
    0U,	// FCCMPESrr
    0U,	// FCCMPHrr
    0U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCSELDrrr
    0U,	// FCSELHrrr
    0U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FMADDDrrr
    0U,	// FMADDHrrr
    0U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    0U,	// FMLAv1i16_indexed
    0U,	// FMLAv1i32_indexed
    0U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    0U,	// FMLAv2i32_indexed
    0U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    0U,	// FMLAv4i16_indexed
    0U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    0U,	// FMLAv8i16_indexed
    0U,	// FMLSv1i16_indexed
    0U,	// FMLSv1i32_indexed
    0U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    0U,	// FMLSv2i32_indexed
    0U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    0U,	// FMLSv4i16_indexed
    0U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    0U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    0U,	// FMSUBDrrr
    0U,	// FMSUBHrrr
    0U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    0U,	// FMULXv1i16_indexed
    0U,	// FMULXv1i32_indexed
    0U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    0U,	// FMULXv2i32_indexed
    0U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    0U,	// FMULXv4i16_indexed
    0U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    0U,	// FMULXv8i16_indexed
    0U,	// FMULv1i16_indexed
    0U,	// FMULv1i32_indexed
    0U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    0U,	// FMULv2i32_indexed
    0U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    0U,	// FMULv4i16_indexed
    0U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    0U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    0U,	// FNMADDDrrr
    0U,	// FNMADDHrrr
    0U,	// FNMADDSrrr
    0U,	// FNMSUBDrrr
    0U,	// FNMSUBHrrr
    0U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDALb
    0U,	// LDADDALd
    0U,	// LDADDALh
    0U,	// LDADDALs
    0U,	// LDADDAb
    0U,	// LDADDAd
    0U,	// LDADDAh
    0U,	// LDADDAs
    0U,	// LDADDLb
    0U,	// LDADDLd
    0U,	// LDADDLh
    0U,	// LDADDLs
    0U,	// LDADDb
    0U,	// LDADDd
    0U,	// LDADDh
    0U,	// LDADDs
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRALb
    0U,	// LDCLRALd
    0U,	// LDCLRALh
    0U,	// LDCLRALs
    0U,	// LDCLRAb
    0U,	// LDCLRAd
    0U,	// LDCLRAh
    0U,	// LDCLRAs
    0U,	// LDCLRLb
    0U,	// LDCLRLd
    0U,	// LDCLRLh
    0U,	// LDCLRLs
    0U,	// LDCLRb
    0U,	// LDCLRd
    0U,	// LDCLRh
    0U,	// LDCLRs
    0U,	// LDEORALb
    0U,	// LDEORALd
    0U,	// LDEORALh
    0U,	// LDEORALs
    0U,	// LDEORAb
    0U,	// LDEORAd
    0U,	// LDEORAh
    0U,	// LDEORAs
    0U,	// LDEORLb
    0U,	// LDEORLd
    0U,	// LDEORLh
    0U,	// LDEORLs
    0U,	// LDEORb
    0U,	// LDEORd
    0U,	// LDEORh
    0U,	// LDEORs
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    0U,	// LDNPDi
    0U,	// LDNPQi
    0U,	// LDNPSi
    0U,	// LDNPWi
    0U,	// LDNPXi
    0U,	// LDPDi
    0U,	// LDPDpost
    2U,	// LDPDpre
    0U,	// LDPQi
    0U,	// LDPQpost
    2U,	// LDPQpre
    0U,	// LDPSWi
    0U,	// LDPSWpost
    2U,	// LDPSWpre
    0U,	// LDPSi
    0U,	// LDPSpost
    2U,	// LDPSpre
    0U,	// LDPWi
    0U,	// LDPWpost
    2U,	// LDPWpre
    0U,	// LDPXi
    0U,	// LDPXpost
    2U,	// LDPXpre
    0U,	// LDRBBpost
    0U,	// LDRBBpre
    0U,	// LDRBBroW
    0U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    0U,	// LDRBpre
    0U,	// LDRBroW
    0U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    0U,	// LDRDpre
    0U,	// LDRDroW
    0U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    0U,	// LDRHHpre
    0U,	// LDRHHroW
    0U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    0U,	// LDRHpre
    0U,	// LDRHroW
    0U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    0U,	// LDRQpre
    0U,	// LDRQroW
    1U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    0U,	// LDRSBWpre
    0U,	// LDRSBWroW
    0U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    0U,	// LDRSBXpre
    0U,	// LDRSBXroW
    0U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    0U,	// LDRSHWpre
    0U,	// LDRSHWroW
    0U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    0U,	// LDRSHXpre
    0U,	// LDRSHXroW
    0U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    0U,	// LDRSWpre
    1U,	// LDRSWroW
    1U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    0U,	// LDRSpre
    1U,	// LDRSroW
    1U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    0U,	// LDRWpre
    1U,	// LDRWroW
    1U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    0U,	// LDRXpre
    0U,	// LDRXroW
    0U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDSETALb
    0U,	// LDSETALd
    0U,	// LDSETALh
    0U,	// LDSETALs
    0U,	// LDSETAb
    0U,	// LDSETAd
    0U,	// LDSETAh
    0U,	// LDSETAs
    0U,	// LDSETLb
    0U,	// LDSETLd
    0U,	// LDSETLh
    0U,	// LDSETLs
    0U,	// LDSETb
    0U,	// LDSETd
    0U,	// LDSETh
    0U,	// LDSETs
    0U,	// LDSMAXALb
    0U,	// LDSMAXALd
    0U,	// LDSMAXALh
    0U,	// LDSMAXALs
    0U,	// LDSMAXAb
    0U,	// LDSMAXAd
    0U,	// LDSMAXAh
    0U,	// LDSMAXAs
    0U,	// LDSMAXLb
    0U,	// LDSMAXLd
    0U,	// LDSMAXLh
    0U,	// LDSMAXLs
    0U,	// LDSMAXb
    0U,	// LDSMAXd
    0U,	// LDSMAXh
    0U,	// LDSMAXs
    0U,	// LDSMINALb
    0U,	// LDSMINALd
    0U,	// LDSMINALh
    0U,	// LDSMINALs
    0U,	// LDSMINAb
    0U,	// LDSMINAd
    0U,	// LDSMINAh
    0U,	// LDSMINAs
    0U,	// LDSMINLb
    0U,	// LDSMINLd
    0U,	// LDSMINLh
    0U,	// LDSMINLs
    0U,	// LDSMINb
    0U,	// LDSMINd
    0U,	// LDSMINh
    0U,	// LDSMINs
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXALb
    0U,	// LDUMAXALd
    0U,	// LDUMAXALh
    0U,	// LDUMAXALs
    0U,	// LDUMAXAb
    0U,	// LDUMAXAd
    0U,	// LDUMAXAh
    0U,	// LDUMAXAs
    0U,	// LDUMAXLb
    0U,	// LDUMAXLd
    0U,	// LDUMAXLh
    0U,	// LDUMAXLs
    0U,	// LDUMAXb
    0U,	// LDUMAXd
    0U,	// LDUMAXh
    0U,	// LDUMAXs
    0U,	// LDUMINALb
    0U,	// LDUMINALd
    0U,	// LDUMINALh
    0U,	// LDUMINALs
    0U,	// LDUMINAb
    0U,	// LDUMINAd
    0U,	// LDUMINAh
    0U,	// LDUMINAs
    0U,	// LDUMINLb
    0U,	// LDUMINLd
    0U,	// LDUMINLh
    0U,	// LDUMINLs
    0U,	// LDUMINb
    0U,	// LDUMINd
    0U,	// LDUMINh
    0U,	// LDUMINs
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// MADDWrrr
    0U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    0U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    0U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    0U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    0U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    0U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    0U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    0U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    0U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    0U,	// MSUBWrrr
    0U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    0U,	// MULv2i32_indexed
    0U,	// MULv4i16
    0U,	// MULv4i16_indexed
    0U,	// MULv4i32
    0U,	// MULv4i32_indexed
    0U,	// MULv8i16
    0U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFMl
    0U,	// PRFMroW
    0U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFUMi
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    0U,	// SBFMWri
    0U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    0U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    0U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    0U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    0U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    0U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    0U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    0U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    0U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    0U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    0U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    0U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    0U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    0U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    0U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    0U,	// SQDMLALv1i32_indexed
    0U,	// SQDMLALv1i64_indexed
    0U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    0U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    0U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    0U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    0U,	// SQDMLSLv1i32_indexed
    0U,	// SQDMLSLv1i64_indexed
    0U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    0U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    0U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    0U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    0U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    0U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    0U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    0U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    0U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    0U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    0U,	// SQDMULLv1i32_indexed
    0U,	// SQDMULLv1i64_indexed
    0U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    0U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    0U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    0U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    0U,	// SQRDMLAHi16_indexed
    0U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    0U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    0U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    0U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    0U,	// SQRDMLAHv8i16_indexed
    0U,	// SQRDMLSHi16_indexed
    0U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    0U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    0U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    0U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    0U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    0U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    0U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    0U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    0U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    0U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    0U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    0U,	// STLXPW
    0U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    0U,	// STNPDi
    0U,	// STNPQi
    0U,	// STNPSi
    0U,	// STNPWi
    0U,	// STNPXi
    0U,	// STPDi
    0U,	// STPDpost
    2U,	// STPDpre
    0U,	// STPQi
    0U,	// STPQpost
    2U,	// STPQpre
    0U,	// STPSi
    0U,	// STPSpost
    2U,	// STPSpre
    0U,	// STPWi
    0U,	// STPWpost
    2U,	// STPWpre
    0U,	// STPXi
    0U,	// STPXpost
    2U,	// STPXpre
    0U,	// STRBBpost
    0U,	// STRBBpre
    0U,	// STRBBroW
    0U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    0U,	// STRBpre
    0U,	// STRBroW
    0U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    0U,	// STRDpre
    0U,	// STRDroW
    0U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    0U,	// STRHHpre
    0U,	// STRHHroW
    0U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    0U,	// STRHpre
    0U,	// STRHroW
    0U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    0U,	// STRQpre
    0U,	// STRQroW
    1U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    0U,	// STRSpre
    1U,	// STRSroW
    1U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    0U,	// STRWpre
    1U,	// STRWroW
    1U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    0U,	// STRXpre
    0U,	// STRXroW
    0U,	// STRXroX
    0U,	// STRXui
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    0U,	// STXPW
    0U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPALb
    0U,	// SWPALd
    0U,	// SWPALh
    0U,	// SWPALs
    0U,	// SWPAb
    0U,	// SWPAd
    0U,	// SWPAh
    0U,	// SWPAs
    0U,	// SWPLb
    0U,	// SWPLd
    0U,	// SWPLh
    0U,	// SWPLs
    0U,	// SWPb
    0U,	// SWPd
    0U,	// SWPh
    0U,	// SWPs
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    0U,	// UBFMWri
    0U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    0U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    0U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    0U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    0U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    0U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    0U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    0U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    0U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    0U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    0U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    0U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    0U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    0U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    0U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 43 unique commands.
  switch ((Bits >> 14) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    printOperand(MI, 1, STI, O);
    break;
  case 8:
    // CASPALd, CASPAd, CASPLd, CASPd
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // CASPALs, CASPAs, CASPLs, CASPs
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 11:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 12:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 14:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 16:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 18:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 20:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 22:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 24:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 26:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 28:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 29:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 30:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 31:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 32:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 33:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 34:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 36:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 37:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 38:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 39:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 40:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 41:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 42:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", ";
    break;
  case 1:
    // BLR, BR, CLREX, RET, TLSDESCCALL
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, ";
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".2d";
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".4s";
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".4s";
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 32:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ", [";
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, ";
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, ";
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 26) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s";
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s";
    return;
    break;
  case 9:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 12:
    // LDADDALb, LDADDALd, LDADDALh, LDADDALs, LDADDAb, LDADDAd, LDADDAh, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 14:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 15:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", ";
    break;
  case 2:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ", [";
    break;
  case 3:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0";
    return;
    break;
  case 4:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 5:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, ...
    O << ", #0.0";
    return;
    break;
  case 6:
    // FCVTLv4i16
    O << ".4h";
    return;
    break;
  case 7:
    // FCVTLv8i16
    O << ".8h";
    return;
    break;
  case 8:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d";
    return;
    break;
  case 9:
    // LDARB, LDARH, LDARW, LDARX, LDAXRB, LDAXRH, LDAXRW, LDAXRX, LDLARB, LD...
    O << ']';
    return;
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8";
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32";
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16";
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b";
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b";
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 36) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O);
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, C...
    printOperand(MI, 3, STI, O);
    break;
  case 9:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 11:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 15:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 40) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 3:
    // CASALb, CASALd, CASALh, CASALs, CASAb, CASAd, CASAh, CASAs, CASLb, CAS...
    O << ']';
    return;
    break;
  case 4:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 5:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!";
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 44) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDHrrr, FMADDSrrr...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 4:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 5:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 6:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 7:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 8:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 9:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 11:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 49) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 484 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'q', '1', '0', 0,
  /* 56 */ 's', '1', '0', 0,
  /* 60 */ 'w', '1', '0', 0,
  /* 64 */ 'x', '1', '0', 0,
  /* 68 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 84 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 100 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 108 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 116 */ 'b', '2', '0', 0,
  /* 120 */ 'd', '2', '0', 0,
  /* 124 */ 'h', '2', '0', 0,
  /* 128 */ 'q', '2', '0', 0,
  /* 132 */ 's', '2', '0', 0,
  /* 136 */ 'w', '2', '0', 0,
  /* 140 */ 'x', '2', '0', 0,
  /* 144 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 160 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 176 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 184 */ 'b', '3', '0', 0,
  /* 188 */ 'd', '3', '0', 0,
  /* 192 */ 'h', '3', '0', 0,
  /* 196 */ 'q', '3', '0', 0,
  /* 200 */ 's', '3', '0', 0,
  /* 204 */ 'w', '3', '0', 0,
  /* 208 */ 'x', '3', '0', 0,
  /* 212 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 227 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 242 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 249 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 256 */ 'b', '0', 0,
  /* 259 */ 'd', '0', 0,
  /* 262 */ 'h', '0', 0,
  /* 265 */ 'q', '0', 0,
  /* 268 */ 's', '0', 0,
  /* 271 */ 'w', '0', 0,
  /* 274 */ 'x', '0', 0,
  /* 277 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 291 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 305 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 313 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 321 */ 'b', '1', '1', 0,
  /* 325 */ 'd', '1', '1', 0,
  /* 329 */ 'h', '1', '1', 0,
  /* 333 */ 'q', '1', '1', 0,
  /* 337 */ 's', '1', '1', 0,
  /* 341 */ 'w', '1', '1', 0,
  /* 345 */ 'x', '1', '1', 0,
  /* 349 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 365 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 381 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 389 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 397 */ 'b', '2', '1', 0,
  /* 401 */ 'd', '2', '1', 0,
  /* 405 */ 'h', '2', '1', 0,
  /* 409 */ 'q', '2', '1', 0,
  /* 413 */ 's', '2', '1', 0,
  /* 417 */ 'w', '2', '1', 0,
  /* 421 */ 'x', '2', '1', 0,
  /* 425 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 441 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 457 */ 'b', '3', '1', 0,
  /* 461 */ 'd', '3', '1', 0,
  /* 465 */ 'h', '3', '1', 0,
  /* 469 */ 'q', '3', '1', 0,
  /* 473 */ 's', '3', '1', 0,
  /* 477 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 491 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 505 */ 'W', '0', '_', 'W', '1', 0,
  /* 511 */ 'X', '0', '_', 'X', '1', 0,
  /* 517 */ 'b', '1', 0,
  /* 520 */ 'd', '1', 0,
  /* 523 */ 'h', '1', 0,
  /* 526 */ 'q', '1', 0,
  /* 529 */ 's', '1', 0,
  /* 532 */ 'w', '1', 0,
  /* 535 */ 'x', '1', 0,
  /* 538 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 553 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 568 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 576 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 584 */ 'b', '1', '2', 0,
  /* 588 */ 'd', '1', '2', 0,
  /* 592 */ 'h', '1', '2', 0,
  /* 596 */ 'q', '1', '2', 0,
  /* 600 */ 's', '1', '2', 0,
  /* 604 */ 'w', '1', '2', 0,
  /* 608 */ 'x', '1', '2', 0,
  /* 612 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 628 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 644 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 652 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 660 */ 'b', '2', '2', 0,
  /* 664 */ 'd', '2', '2', 0,
  /* 668 */ 'h', '2', '2', 0,
  /* 672 */ 'q', '2', '2', 0,
  /* 676 */ 's', '2', '2', 0,
  /* 680 */ 'w', '2', '2', 0,
  /* 684 */ 'x', '2', '2', 0,
  /* 688 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 701 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 714 */ 'W', '1', '_', 'W', '2', 0,
  /* 720 */ 'X', '1', '_', 'X', '2', 0,
  /* 726 */ 'b', '2', 0,
  /* 729 */ 'd', '2', 0,
  /* 732 */ 'h', '2', 0,
  /* 735 */ 'q', '2', 0,
  /* 738 */ 's', '2', 0,
  /* 741 */ 'w', '2', 0,
  /* 744 */ 'x', '2', 0,
  /* 747 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 763 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 779 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 787 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 795 */ 'b', '1', '3', 0,
  /* 799 */ 'd', '1', '3', 0,
  /* 803 */ 'h', '1', '3', 0,
  /* 807 */ 'q', '1', '3', 0,
  /* 811 */ 's', '1', '3', 0,
  /* 815 */ 'w', '1', '3', 0,
  /* 819 */ 'x', '1', '3', 0,
  /* 823 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 839 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 855 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 863 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 871 */ 'b', '2', '3', 0,
  /* 875 */ 'd', '2', '3', 0,
  /* 879 */ 'h', '2', '3', 0,
  /* 883 */ 'q', '2', '3', 0,
  /* 887 */ 's', '2', '3', 0,
  /* 891 */ 'w', '2', '3', 0,
  /* 895 */ 'x', '2', '3', 0,
  /* 899 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 911 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 923 */ 'W', '2', '_', 'W', '3', 0,
  /* 929 */ 'X', '2', '_', 'X', '3', 0,
  /* 935 */ 'b', '3', 0,
  /* 938 */ 'd', '3', 0,
  /* 941 */ 'h', '3', 0,
  /* 944 */ 'q', '3', 0,
  /* 947 */ 's', '3', 0,
  /* 950 */ 'w', '3', 0,
  /* 953 */ 'x', '3', 0,
  /* 956 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 972 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 988 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 996 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1004 */ 'b', '1', '4', 0,
  /* 1008 */ 'd', '1', '4', 0,
  /* 1012 */ 'h', '1', '4', 0,
  /* 1016 */ 'q', '1', '4', 0,
  /* 1020 */ 's', '1', '4', 0,
  /* 1024 */ 'w', '1', '4', 0,
  /* 1028 */ 'x', '1', '4', 0,
  /* 1032 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1048 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1064 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1072 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1080 */ 'b', '2', '4', 0,
  /* 1084 */ 'd', '2', '4', 0,
  /* 1088 */ 'h', '2', '4', 0,
  /* 1092 */ 'q', '2', '4', 0,
  /* 1096 */ 's', '2', '4', 0,
  /* 1100 */ 'w', '2', '4', 0,
  /* 1104 */ 'x', '2', '4', 0,
  /* 1108 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1120 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1132 */ 'W', '3', '_', 'W', '4', 0,
  /* 1138 */ 'X', '3', '_', 'X', '4', 0,
  /* 1144 */ 'b', '4', 0,
  /* 1147 */ 'd', '4', 0,
  /* 1150 */ 'h', '4', 0,
  /* 1153 */ 'q', '4', 0,
  /* 1156 */ 's', '4', 0,
  /* 1159 */ 'w', '4', 0,
  /* 1162 */ 'x', '4', 0,
  /* 1165 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1181 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1197 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1205 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1213 */ 'b', '1', '5', 0,
  /* 1217 */ 'd', '1', '5', 0,
  /* 1221 */ 'h', '1', '5', 0,
  /* 1225 */ 'q', '1', '5', 0,
  /* 1229 */ 's', '1', '5', 0,
  /* 1233 */ 'w', '1', '5', 0,
  /* 1237 */ 'x', '1', '5', 0,
  /* 1241 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1257 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1273 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1281 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1289 */ 'b', '2', '5', 0,
  /* 1293 */ 'd', '2', '5', 0,
  /* 1297 */ 'h', '2', '5', 0,
  /* 1301 */ 'q', '2', '5', 0,
  /* 1305 */ 's', '2', '5', 0,
  /* 1309 */ 'w', '2', '5', 0,
  /* 1313 */ 'x', '2', '5', 0,
  /* 1317 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1329 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1341 */ 'W', '4', '_', 'W', '5', 0,
  /* 1347 */ 'X', '4', '_', 'X', '5', 0,
  /* 1353 */ 'b', '5', 0,
  /* 1356 */ 'd', '5', 0,
  /* 1359 */ 'h', '5', 0,
  /* 1362 */ 'q', '5', 0,
  /* 1365 */ 's', '5', 0,
  /* 1368 */ 'w', '5', 0,
  /* 1371 */ 'x', '5', 0,
  /* 1374 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1390 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1406 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1414 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1422 */ 'b', '1', '6', 0,
  /* 1426 */ 'd', '1', '6', 0,
  /* 1430 */ 'h', '1', '6', 0,
  /* 1434 */ 'q', '1', '6', 0,
  /* 1438 */ 's', '1', '6', 0,
  /* 1442 */ 'w', '1', '6', 0,
  /* 1446 */ 'x', '1', '6', 0,
  /* 1450 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1466 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1482 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1490 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1498 */ 'b', '2', '6', 0,
  /* 1502 */ 'd', '2', '6', 0,
  /* 1506 */ 'h', '2', '6', 0,
  /* 1510 */ 'q', '2', '6', 0,
  /* 1514 */ 's', '2', '6', 0,
  /* 1518 */ 'w', '2', '6', 0,
  /* 1522 */ 'x', '2', '6', 0,
  /* 1526 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1538 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1550 */ 'W', '5', '_', 'W', '6', 0,
  /* 1556 */ 'X', '5', '_', 'X', '6', 0,
  /* 1562 */ 'b', '6', 0,
  /* 1565 */ 'd', '6', 0,
  /* 1568 */ 'h', '6', 0,
  /* 1571 */ 'q', '6', 0,
  /* 1574 */ 's', '6', 0,
  /* 1577 */ 'w', '6', 0,
  /* 1580 */ 'x', '6', 0,
  /* 1583 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1599 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1615 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1623 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1631 */ 'b', '1', '7', 0,
  /* 1635 */ 'd', '1', '7', 0,
  /* 1639 */ 'h', '1', '7', 0,
  /* 1643 */ 'q', '1', '7', 0,
  /* 1647 */ 's', '1', '7', 0,
  /* 1651 */ 'w', '1', '7', 0,
  /* 1655 */ 'x', '1', '7', 0,
  /* 1659 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1675 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1691 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1699 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1707 */ 'b', '2', '7', 0,
  /* 1711 */ 'd', '2', '7', 0,
  /* 1715 */ 'h', '2', '7', 0,
  /* 1719 */ 'q', '2', '7', 0,
  /* 1723 */ 's', '2', '7', 0,
  /* 1727 */ 'w', '2', '7', 0,
  /* 1731 */ 'x', '2', '7', 0,
  /* 1735 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1747 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1759 */ 'W', '6', '_', 'W', '7', 0,
  /* 1765 */ 'X', '6', '_', 'X', '7', 0,
  /* 1771 */ 'b', '7', 0,
  /* 1774 */ 'd', '7', 0,
  /* 1777 */ 'h', '7', 0,
  /* 1780 */ 'q', '7', 0,
  /* 1783 */ 's', '7', 0,
  /* 1786 */ 'w', '7', 0,
  /* 1789 */ 'x', '7', 0,
  /* 1792 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1808 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1824 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1832 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1840 */ 'b', '1', '8', 0,
  /* 1844 */ 'd', '1', '8', 0,
  /* 1848 */ 'h', '1', '8', 0,
  /* 1852 */ 'q', '1', '8', 0,
  /* 1856 */ 's', '1', '8', 0,
  /* 1860 */ 'w', '1', '8', 0,
  /* 1864 */ 'x', '1', '8', 0,
  /* 1868 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1884 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1900 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 1908 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 1916 */ 'b', '2', '8', 0,
  /* 1920 */ 'd', '2', '8', 0,
  /* 1924 */ 'h', '2', '8', 0,
  /* 1928 */ 'q', '2', '8', 0,
  /* 1932 */ 's', '2', '8', 0,
  /* 1936 */ 'w', '2', '8', 0,
  /* 1940 */ 'x', '2', '8', 0,
  /* 1944 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1956 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1968 */ 'W', '7', '_', 'W', '8', 0,
  /* 1974 */ 'X', '7', '_', 'X', '8', 0,
  /* 1980 */ 'b', '8', 0,
  /* 1983 */ 'd', '8', 0,
  /* 1986 */ 'h', '8', 0,
  /* 1989 */ 'q', '8', 0,
  /* 1992 */ 's', '8', 0,
  /* 1995 */ 'w', '8', 0,
  /* 1998 */ 'x', '8', 0,
  /* 2001 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2017 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2033 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2041 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2049 */ 'b', '1', '9', 0,
  /* 2053 */ 'd', '1', '9', 0,
  /* 2057 */ 'h', '1', '9', 0,
  /* 2061 */ 'q', '1', '9', 0,
  /* 2065 */ 's', '1', '9', 0,
  /* 2069 */ 'w', '1', '9', 0,
  /* 2073 */ 'x', '1', '9', 0,
  /* 2077 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2093 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2109 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2117 */ 'b', '2', '9', 0,
  /* 2121 */ 'd', '2', '9', 0,
  /* 2125 */ 'h', '2', '9', 0,
  /* 2129 */ 'q', '2', '9', 0,
  /* 2133 */ 's', '2', '9', 0,
  /* 2137 */ 'w', '2', '9', 0,
  /* 2141 */ 'x', '2', '9', 0,
  /* 2145 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2157 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2169 */ 'W', '8', '_', 'W', '9', 0,
  /* 2175 */ 'X', '8', '_', 'X', '9', 0,
  /* 2181 */ 'b', '9', 0,
  /* 2184 */ 'd', '9', 0,
  /* 2187 */ 'h', '9', 0,
  /* 2190 */ 'q', '9', 0,
  /* 2193 */ 's', '9', 0,
  /* 2196 */ 'w', '9', 0,
  /* 2199 */ 'x', '9', 0,
  /* 2202 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2209 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2215 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2223 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2230 */ 'w', 's', 'p', 0,
  /* 2234 */ 'w', 'z', 'r', 0,
  /* 2238 */ 'x', 'z', 'r', 0,
  /* 2242 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2141, 208, 2242, 2231, 2230, 2234, 2238, 256, 517, 726, 935, 1144, 1353, 1562, 
    1771, 1980, 2181, 40, 321, 584, 795, 1004, 1213, 1422, 1631, 1840, 2049, 116, 
    397, 660, 871, 1080, 1289, 1498, 1707, 1916, 2117, 184, 457, 259, 520, 729, 
    938, 1147, 1356, 1565, 1774, 1983, 2184, 44, 325, 588, 799, 1008, 1217, 1426, 
    1635, 1844, 2053, 120, 401, 664, 875, 1084, 1293, 1502, 1711, 1920, 2121, 188, 
    461, 262, 523, 732, 941, 1150, 1359, 1568, 1777, 1986, 2187, 48, 329, 592, 
    803, 1012, 1221, 1430, 1639, 1848, 2057, 124, 405, 668, 879, 1088, 1297, 1506, 
    1715, 1924, 2125, 192, 465, 265, 526, 735, 944, 1153, 1362, 1571, 1780, 1989, 
    2190, 52, 333, 596, 807, 1016, 1225, 1434, 1643, 1852, 2061, 128, 409, 672, 
    883, 1092, 1301, 1510, 1719, 1928, 2129, 196, 469, 268, 529, 738, 947, 1156, 
    1365, 1574, 1783, 1992, 2193, 56, 337, 600, 811, 1020, 1229, 1438, 1647, 1856, 
    2065, 132, 413, 676, 887, 1096, 1305, 1514, 1723, 1932, 2133, 200, 473, 271, 
    532, 741, 950, 1159, 1368, 1577, 1786, 1995, 2196, 60, 341, 604, 815, 1024, 
    1233, 1442, 1651, 1860, 2069, 136, 417, 680, 891, 1100, 1309, 1518, 1727, 1936, 
    2137, 204, 274, 535, 744, 953, 1162, 1371, 1580, 1789, 1998, 2199, 64, 345, 
    608, 819, 1028, 1237, 1446, 1655, 1864, 2073, 140, 421, 684, 895, 1104, 1313, 
    1522, 1731, 1940, 485, 695, 905, 1114, 1323, 1532, 1741, 1950, 2151, 6, 283, 
    545, 755, 964, 1173, 1382, 1591, 1800, 2009, 76, 357, 620, 831, 1040, 1249, 
    1458, 1667, 1876, 2085, 152, 433, 220, 899, 1108, 1317, 1526, 1735, 1944, 2145, 
    0, 277, 538, 747, 956, 1165, 1374, 1583, 1792, 2001, 68, 349, 612, 823, 
    1032, 1241, 1450, 1659, 1868, 2077, 144, 425, 212, 477, 688, 692, 902, 1111, 
    1320, 1529, 1738, 1947, 2148, 3, 280, 541, 751, 960, 1169, 1378, 1587, 1796, 
    2005, 72, 353, 616, 827, 1036, 1245, 1454, 1663, 1872, 2081, 148, 429, 216, 
    481, 499, 708, 917, 1126, 1335, 1544, 1753, 1962, 2163, 19, 297, 560, 771, 
    980, 1189, 1398, 1607, 1816, 2025, 92, 373, 636, 847, 1056, 1265, 1474, 1683, 
    1892, 2101, 168, 449, 235, 911, 1120, 1329, 1538, 1747, 1956, 2157, 13, 291, 
    553, 763, 972, 1181, 1390, 1599, 1808, 2017, 84, 365, 628, 839, 1048, 1257, 
    1466, 1675, 1884, 2093, 160, 441, 227, 491, 701, 705, 914, 1123, 1332, 1541, 
    1750, 1959, 2160, 16, 294, 556, 767, 976, 1185, 1394, 1603, 1812, 2021, 88, 
    369, 632, 843, 1052, 1261, 1470, 1679, 1888, 2097, 164, 445, 231, 495, 242, 
    2215, 505, 714, 923, 1132, 1341, 1550, 1759, 1968, 2169, 26, 305, 568, 779, 
    988, 1197, 1406, 1615, 1824, 2033, 100, 381, 644, 855, 1064, 1273, 1482, 1691, 
    1900, 2109, 176, 2209, 2223, 249, 2202, 511, 720, 929, 1138, 1347, 1556, 1765, 
    1974, 2175, 33, 313, 576, 787, 996, 1205, 1414, 1623, 1832, 2041, 108, 389, 
    652, 863, 1072, 1281, 1490, 1699, 1908, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(0), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x12, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x12, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x12, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x12, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDADDs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDCLRs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDEORs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSETs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDSMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMAXs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINLs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINb:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINb WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINd:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINd XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINh:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINh WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::HasV8_1aOps]) {
      // (LDUMINs WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x19, $\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 9:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 23:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 24:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 2: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
