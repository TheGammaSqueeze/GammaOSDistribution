// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIG_TFLITE_OPS_CUSTOM_SENTENCEPIECE_H_
#define FLATBUFFERS_GENERATED_CONFIG_TFLITE_OPS_CUSTOM_SENTENCEPIECE_H_

#include "flatbuffers/flatbuffers.h"

namespace tflite {
namespace ops {
namespace custom {
namespace sentencepiece {

struct Trie;
struct TrieBuilder;
struct TrieT;

enum EncoderVersion {
  EncoderVersion_SENTENCE_PIECE = 0,
  EncoderVersion_MIN = EncoderVersion_SENTENCE_PIECE,
  EncoderVersion_MAX = EncoderVersion_SENTENCE_PIECE
};

inline const EncoderVersion (&EnumValuesEncoderVersion())[1] {
  static const EncoderVersion values[] = {
    EncoderVersion_SENTENCE_PIECE
  };
  return values;
}

inline const char * const *EnumNamesEncoderVersion() {
  static const char * const names[2] = {
    "SENTENCE_PIECE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEncoderVersion(EncoderVersion e) {
  if (flatbuffers::IsOutRange(e, EncoderVersion_SENTENCE_PIECE, EncoderVersion_SENTENCE_PIECE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEncoderVersion()[index];
}

struct TrieT : public flatbuffers::NativeTable {
  typedef Trie TableType;
  std::vector<uint32_t> nodes;
  TrieT() {
  }
};

struct Trie FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrieT NativeTableType;
  typedef TrieBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4
  };
  const flatbuffers::Vector<uint32_t> *nodes() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_NODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.EndTable();
  }
  TrieT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TrieT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Trie> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TrieT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TrieBuilder {
  typedef Trie Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> nodes) {
    fbb_.AddOffset(Trie::VT_NODES, nodes);
  }
  explicit TrieBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TrieBuilder &operator=(const TrieBuilder &);
  flatbuffers::Offset<Trie> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Trie>(end);
    return o;
  }
};

inline flatbuffers::Offset<Trie> CreateTrie(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> nodes = 0) {
  TrieBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Trie> CreateTrieDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVector<uint32_t>(*nodes) : 0;
  return tflite::ops::custom::sentencepiece::CreateTrie(
      _fbb,
      nodes__);
}

flatbuffers::Offset<Trie> CreateTrie(flatbuffers::FlatBufferBuilder &_fbb, const TrieT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TrieT *Trie::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<tflite::ops::custom::sentencepiece::TrieT> _o = std::unique_ptr<tflite::ops::custom::sentencepiece::TrieT>(new TrieT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Trie::UnPackTo(TrieT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = nodes(); if (_e) { _o->nodes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->nodes[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<Trie> Trie::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TrieT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTrie(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Trie> CreateTrie(flatbuffers::FlatBufferBuilder &_fbb, const TrieT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TrieT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _nodes = _o->nodes.size() ? _fbb.CreateVector(_o->nodes) : 0;
  return tflite::ops::custom::sentencepiece::CreateTrie(
      _fbb,
      _nodes);
}

}  // namespace sentencepiece
}  // namespace custom
}  // namespace ops
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_CONFIG_TFLITE_OPS_CUSTOM_SENTENCEPIECE_H_
