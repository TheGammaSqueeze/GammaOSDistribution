// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external/puffin/puffin/src/puffin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace puffin {
namespace metadata {
class BitExtent;
class BitExtentDefaultTypeInternal;
extern BitExtentDefaultTypeInternal _BitExtent_default_instance_;
class PatchHeader;
class PatchHeaderDefaultTypeInternal;
extern PatchHeaderDefaultTypeInternal _PatchHeader_default_instance_;
class StreamInfo;
class StreamInfoDefaultTypeInternal;
extern StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
}  // namespace metadata
}  // namespace puffin
PROTOBUF_NAMESPACE_OPEN
template<> ::puffin::metadata::BitExtent* Arena::CreateMaybeMessage<::puffin::metadata::BitExtent>(Arena*);
template<> ::puffin::metadata::PatchHeader* Arena::CreateMaybeMessage<::puffin::metadata::PatchHeader>(Arena*);
template<> ::puffin::metadata::StreamInfo* Arena::CreateMaybeMessage<::puffin::metadata::StreamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace puffin {
namespace metadata {

// ===================================================================

class BitExtent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:puffin.metadata.BitExtent) */ {
 public:
  BitExtent();
  virtual ~BitExtent();

  BitExtent(const BitExtent& from);
  BitExtent(BitExtent&& from) noexcept
    : BitExtent() {
    *this = ::std::move(from);
  }

  inline BitExtent& operator=(const BitExtent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitExtent& operator=(BitExtent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BitExtent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitExtent* internal_default_instance() {
    return reinterpret_cast<const BitExtent*>(
               &_BitExtent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitExtent& a, BitExtent& b) {
    a.Swap(&b);
  }
  inline void Swap(BitExtent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitExtent* New() const final {
    return CreateMaybeMessage<BitExtent>(nullptr);
  }

  BitExtent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitExtent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BitExtent& from);
  void MergeFrom(const BitExtent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BitExtent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "puffin.metadata.BitExtent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // uint64 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:puffin.metadata.BitExtent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto;
};
// -------------------------------------------------------------------

class StreamInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:puffin.metadata.StreamInfo) */ {
 public:
  StreamInfo();
  virtual ~StreamInfo();

  StreamInfo(const StreamInfo& from);
  StreamInfo(StreamInfo&& from) noexcept
    : StreamInfo() {
    *this = ::std::move(from);
  }

  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInfo& operator=(StreamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StreamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamInfo* internal_default_instance() {
    return reinterpret_cast<const StreamInfo*>(
               &_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamInfo& a, StreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInfo* New() const final {
    return CreateMaybeMessage<StreamInfo>(nullptr);
  }

  StreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "puffin.metadata.StreamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeflatesFieldNumber = 1,
    kPuffsFieldNumber = 2,
    kPuffLengthFieldNumber = 3,
  };
  // repeated .puffin.metadata.BitExtent deflates = 1;
  int deflates_size() const;
  void clear_deflates();
  ::puffin::metadata::BitExtent* mutable_deflates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >*
      mutable_deflates();
  const ::puffin::metadata::BitExtent& deflates(int index) const;
  ::puffin::metadata::BitExtent* add_deflates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >&
      deflates() const;

  // repeated .puffin.metadata.BitExtent puffs = 2;
  int puffs_size() const;
  void clear_puffs();
  ::puffin::metadata::BitExtent* mutable_puffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >*
      mutable_puffs();
  const ::puffin::metadata::BitExtent& puffs(int index) const;
  ::puffin::metadata::BitExtent* add_puffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >&
      puffs() const;

  // uint64 puff_length = 3;
  void clear_puff_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 puff_length() const;
  void set_puff_length(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:puffin.metadata.StreamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent > deflates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent > puffs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 puff_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto;
};
// -------------------------------------------------------------------

class PatchHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:puffin.metadata.PatchHeader) */ {
 public:
  PatchHeader();
  virtual ~PatchHeader();

  PatchHeader(const PatchHeader& from);
  PatchHeader(PatchHeader&& from) noexcept
    : PatchHeader() {
    *this = ::std::move(from);
  }

  inline PatchHeader& operator=(const PatchHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchHeader& operator=(PatchHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PatchHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchHeader* internal_default_instance() {
    return reinterpret_cast<const PatchHeader*>(
               &_PatchHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PatchHeader& a, PatchHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchHeader* New() const final {
    return CreateMaybeMessage<PatchHeader>(nullptr);
  }

  PatchHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PatchHeader& from);
  void MergeFrom(const PatchHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PatchHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "puffin.metadata.PatchHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 2,
    kDstFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // .puffin.metadata.StreamInfo src = 2;
  bool has_src() const;
  void clear_src();
  const ::puffin::metadata::StreamInfo& src() const;
  ::puffin::metadata::StreamInfo* release_src();
  ::puffin::metadata::StreamInfo* mutable_src();
  void set_allocated_src(::puffin::metadata::StreamInfo* src);

  // .puffin.metadata.StreamInfo dst = 3;
  bool has_dst() const;
  void clear_dst();
  const ::puffin::metadata::StreamInfo& dst() const;
  ::puffin::metadata::StreamInfo* release_dst();
  ::puffin::metadata::StreamInfo* mutable_dst();
  void set_allocated_dst(::puffin::metadata::StreamInfo* dst);

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:puffin.metadata.PatchHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::puffin::metadata::StreamInfo* src_;
  ::puffin::metadata::StreamInfo* dst_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BitExtent

// uint64 offset = 1;
inline void BitExtent::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitExtent::offset() const {
  // @@protoc_insertion_point(field_get:puffin.metadata.BitExtent.offset)
  return offset_;
}
inline void BitExtent::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:puffin.metadata.BitExtent.offset)
}

// uint64 length = 2;
inline void BitExtent::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitExtent::length() const {
  // @@protoc_insertion_point(field_get:puffin.metadata.BitExtent.length)
  return length_;
}
inline void BitExtent::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:puffin.metadata.BitExtent.length)
}

// -------------------------------------------------------------------

// StreamInfo

// repeated .puffin.metadata.BitExtent deflates = 1;
inline int StreamInfo::deflates_size() const {
  return deflates_.size();
}
inline void StreamInfo::clear_deflates() {
  deflates_.Clear();
}
inline ::puffin::metadata::BitExtent* StreamInfo::mutable_deflates(int index) {
  // @@protoc_insertion_point(field_mutable:puffin.metadata.StreamInfo.deflates)
  return deflates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >*
StreamInfo::mutable_deflates() {
  // @@protoc_insertion_point(field_mutable_list:puffin.metadata.StreamInfo.deflates)
  return &deflates_;
}
inline const ::puffin::metadata::BitExtent& StreamInfo::deflates(int index) const {
  // @@protoc_insertion_point(field_get:puffin.metadata.StreamInfo.deflates)
  return deflates_.Get(index);
}
inline ::puffin::metadata::BitExtent* StreamInfo::add_deflates() {
  // @@protoc_insertion_point(field_add:puffin.metadata.StreamInfo.deflates)
  return deflates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >&
StreamInfo::deflates() const {
  // @@protoc_insertion_point(field_list:puffin.metadata.StreamInfo.deflates)
  return deflates_;
}

// repeated .puffin.metadata.BitExtent puffs = 2;
inline int StreamInfo::puffs_size() const {
  return puffs_.size();
}
inline void StreamInfo::clear_puffs() {
  puffs_.Clear();
}
inline ::puffin::metadata::BitExtent* StreamInfo::mutable_puffs(int index) {
  // @@protoc_insertion_point(field_mutable:puffin.metadata.StreamInfo.puffs)
  return puffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >*
StreamInfo::mutable_puffs() {
  // @@protoc_insertion_point(field_mutable_list:puffin.metadata.StreamInfo.puffs)
  return &puffs_;
}
inline const ::puffin::metadata::BitExtent& StreamInfo::puffs(int index) const {
  // @@protoc_insertion_point(field_get:puffin.metadata.StreamInfo.puffs)
  return puffs_.Get(index);
}
inline ::puffin::metadata::BitExtent* StreamInfo::add_puffs() {
  // @@protoc_insertion_point(field_add:puffin.metadata.StreamInfo.puffs)
  return puffs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::puffin::metadata::BitExtent >&
StreamInfo::puffs() const {
  // @@protoc_insertion_point(field_list:puffin.metadata.StreamInfo.puffs)
  return puffs_;
}

// uint64 puff_length = 3;
inline void StreamInfo::clear_puff_length() {
  puff_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamInfo::puff_length() const {
  // @@protoc_insertion_point(field_get:puffin.metadata.StreamInfo.puff_length)
  return puff_length_;
}
inline void StreamInfo::set_puff_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  puff_length_ = value;
  // @@protoc_insertion_point(field_set:puffin.metadata.StreamInfo.puff_length)
}

// -------------------------------------------------------------------

// PatchHeader

// int32 version = 1;
inline void PatchHeader::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PatchHeader::version() const {
  // @@protoc_insertion_point(field_get:puffin.metadata.PatchHeader.version)
  return version_;
}
inline void PatchHeader::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:puffin.metadata.PatchHeader.version)
}

// .puffin.metadata.StreamInfo src = 2;
inline bool PatchHeader::has_src() const {
  return this != internal_default_instance() && src_ != nullptr;
}
inline void PatchHeader::clear_src() {
  if (GetArenaNoVirtual() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
}
inline const ::puffin::metadata::StreamInfo& PatchHeader::src() const {
  const ::puffin::metadata::StreamInfo* p = src_;
  // @@protoc_insertion_point(field_get:puffin.metadata.PatchHeader.src)
  return p != nullptr ? *p : *reinterpret_cast<const ::puffin::metadata::StreamInfo*>(
      &::puffin::metadata::_StreamInfo_default_instance_);
}
inline ::puffin::metadata::StreamInfo* PatchHeader::release_src() {
  // @@protoc_insertion_point(field_release:puffin.metadata.PatchHeader.src)
  
  ::puffin::metadata::StreamInfo* temp = src_;
  src_ = nullptr;
  return temp;
}
inline ::puffin::metadata::StreamInfo* PatchHeader::mutable_src() {
  
  if (src_ == nullptr) {
    auto* p = CreateMaybeMessage<::puffin::metadata::StreamInfo>(GetArenaNoVirtual());
    src_ = p;
  }
  // @@protoc_insertion_point(field_mutable:puffin.metadata.PatchHeader.src)
  return src_;
}
inline void PatchHeader::set_allocated_src(::puffin::metadata::StreamInfo* src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete src_;
  }
  if (src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    
  } else {
    
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:puffin.metadata.PatchHeader.src)
}

// .puffin.metadata.StreamInfo dst = 3;
inline bool PatchHeader::has_dst() const {
  return this != internal_default_instance() && dst_ != nullptr;
}
inline void PatchHeader::clear_dst() {
  if (GetArenaNoVirtual() == nullptr && dst_ != nullptr) {
    delete dst_;
  }
  dst_ = nullptr;
}
inline const ::puffin::metadata::StreamInfo& PatchHeader::dst() const {
  const ::puffin::metadata::StreamInfo* p = dst_;
  // @@protoc_insertion_point(field_get:puffin.metadata.PatchHeader.dst)
  return p != nullptr ? *p : *reinterpret_cast<const ::puffin::metadata::StreamInfo*>(
      &::puffin::metadata::_StreamInfo_default_instance_);
}
inline ::puffin::metadata::StreamInfo* PatchHeader::release_dst() {
  // @@protoc_insertion_point(field_release:puffin.metadata.PatchHeader.dst)
  
  ::puffin::metadata::StreamInfo* temp = dst_;
  dst_ = nullptr;
  return temp;
}
inline ::puffin::metadata::StreamInfo* PatchHeader::mutable_dst() {
  
  if (dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::puffin::metadata::StreamInfo>(GetArenaNoVirtual());
    dst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:puffin.metadata.PatchHeader.dst)
  return dst_;
}
inline void PatchHeader::set_allocated_dst(::puffin::metadata::StreamInfo* dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dst_;
  }
  if (dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    
  } else {
    
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:puffin.metadata.PatchHeader.dst)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metadata
}  // namespace puffin

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_external_2fpuffin_2fpuffin_2fsrc_2fpuffin_2eproto
