// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BITVECTOR_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_BITVECTOR_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {

struct BitVectorData;
struct BitVectorDataBuilder;
struct BitVectorDataT;

struct DenseBitVectorData;
struct DenseBitVectorDataBuilder;
struct DenseBitVectorDataT;

struct SparseBitVectorData;
struct SparseBitVectorDataBuilder;
struct SparseBitVectorDataT;

struct BitVectorDataT : public flatbuffers::NativeTable {
  typedef BitVectorData TableType;
  std::unique_ptr<libtextclassifier3::DenseBitVectorDataT> dense_data;
  std::unique_ptr<libtextclassifier3::SparseBitVectorDataT> sparse_data;
  BitVectorDataT() {
  }
};

struct BitVectorData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BitVectorDataT NativeTableType;
  typedef BitVectorDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DENSE_DATA = 4,
    VT_SPARSE_DATA = 6
  };
  const libtextclassifier3::DenseBitVectorData *dense_data() const {
    return GetPointer<const libtextclassifier3::DenseBitVectorData *>(VT_DENSE_DATA);
  }
  const libtextclassifier3::SparseBitVectorData *sparse_data() const {
    return GetPointer<const libtextclassifier3::SparseBitVectorData *>(VT_SPARSE_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DENSE_DATA) &&
           verifier.VerifyTable(dense_data()) &&
           VerifyOffset(verifier, VT_SPARSE_DATA) &&
           verifier.VerifyTable(sparse_data()) &&
           verifier.EndTable();
  }
  BitVectorDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<BitVectorData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BitVectorDataBuilder {
  typedef BitVectorData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dense_data(flatbuffers::Offset<libtextclassifier3::DenseBitVectorData> dense_data) {
    fbb_.AddOffset(BitVectorData::VT_DENSE_DATA, dense_data);
  }
  void add_sparse_data(flatbuffers::Offset<libtextclassifier3::SparseBitVectorData> sparse_data) {
    fbb_.AddOffset(BitVectorData::VT_SPARSE_DATA, sparse_data);
  }
  explicit BitVectorDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BitVectorDataBuilder &operator=(const BitVectorDataBuilder &);
  flatbuffers::Offset<BitVectorData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BitVectorData>(end);
    return o;
  }
};

inline flatbuffers::Offset<BitVectorData> CreateBitVectorData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<libtextclassifier3::DenseBitVectorData> dense_data = 0,
    flatbuffers::Offset<libtextclassifier3::SparseBitVectorData> sparse_data = 0) {
  BitVectorDataBuilder builder_(_fbb);
  builder_.add_sparse_data(sparse_data);
  builder_.add_dense_data(dense_data);
  return builder_.Finish();
}

flatbuffers::Offset<BitVectorData> CreateBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const BitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DenseBitVectorDataT : public flatbuffers::NativeTable {
  typedef DenseBitVectorData TableType;
  std::vector<uint8_t> data;
  int32_t size;
  DenseBitVectorDataT()
      : size(0) {
  }
};

struct DenseBitVectorData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DenseBitVectorDataT NativeTableType;
  typedef DenseBitVectorDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_SIZE = 6
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  int32_t size() const {
    return GetField<int32_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<int32_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
  DenseBitVectorDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DenseBitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<DenseBitVectorData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DenseBitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DenseBitVectorDataBuilder {
  typedef DenseBitVectorData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(DenseBitVectorData::VT_DATA, data);
  }
  void add_size(int32_t size) {
    fbb_.AddElement<int32_t>(DenseBitVectorData::VT_SIZE, size, 0);
  }
  explicit DenseBitVectorDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DenseBitVectorDataBuilder &operator=(const DenseBitVectorDataBuilder &);
  flatbuffers::Offset<DenseBitVectorData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DenseBitVectorData>(end);
    return o;
  }
};

inline flatbuffers::Offset<DenseBitVectorData> CreateDenseBitVectorData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    int32_t size = 0) {
  DenseBitVectorDataBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<DenseBitVectorData> CreateDenseBitVectorDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    int32_t size = 0) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return libtextclassifier3::CreateDenseBitVectorData(
      _fbb,
      data__,
      size);
}

flatbuffers::Offset<DenseBitVectorData> CreateDenseBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const DenseBitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SparseBitVectorDataT : public flatbuffers::NativeTable {
  typedef SparseBitVectorData TableType;
  std::vector<int32_t> sorted_indices_32;
  SparseBitVectorDataT() {
  }
};

struct SparseBitVectorData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SparseBitVectorDataT NativeTableType;
  typedef SparseBitVectorDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SORTED_INDICES_32 = 4
  };
  const flatbuffers::Vector<int32_t> *sorted_indices_32() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SORTED_INDICES_32);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SORTED_INDICES_32) &&
           verifier.VerifyVector(sorted_indices_32()) &&
           verifier.EndTable();
  }
  SparseBitVectorDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SparseBitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SparseBitVectorData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SparseBitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SparseBitVectorDataBuilder {
  typedef SparseBitVectorData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sorted_indices_32(flatbuffers::Offset<flatbuffers::Vector<int32_t>> sorted_indices_32) {
    fbb_.AddOffset(SparseBitVectorData::VT_SORTED_INDICES_32, sorted_indices_32);
  }
  explicit SparseBitVectorDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SparseBitVectorDataBuilder &operator=(const SparseBitVectorDataBuilder &);
  flatbuffers::Offset<SparseBitVectorData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SparseBitVectorData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SparseBitVectorData> CreateSparseBitVectorData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> sorted_indices_32 = 0) {
  SparseBitVectorDataBuilder builder_(_fbb);
  builder_.add_sorted_indices_32(sorted_indices_32);
  return builder_.Finish();
}

inline flatbuffers::Offset<SparseBitVectorData> CreateSparseBitVectorDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *sorted_indices_32 = nullptr) {
  auto sorted_indices_32__ = sorted_indices_32 ? _fbb.CreateVector<int32_t>(*sorted_indices_32) : 0;
  return libtextclassifier3::CreateSparseBitVectorData(
      _fbb,
      sorted_indices_32__);
}

flatbuffers::Offset<SparseBitVectorData> CreateSparseBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const SparseBitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BitVectorDataT *BitVectorData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::BitVectorDataT> _o = std::unique_ptr<libtextclassifier3::BitVectorDataT>(new BitVectorDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BitVectorData::UnPackTo(BitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dense_data(); if (_e) _o->dense_data = std::unique_ptr<libtextclassifier3::DenseBitVectorDataT>(_e->UnPack(_resolver)); }
  { auto _e = sparse_data(); if (_e) _o->sparse_data = std::unique_ptr<libtextclassifier3::SparseBitVectorDataT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<BitVectorData> BitVectorData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBitVectorData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<BitVectorData> CreateBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const BitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BitVectorDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dense_data = _o->dense_data ? CreateDenseBitVectorData(_fbb, _o->dense_data.get(), _rehasher) : 0;
  auto _sparse_data = _o->sparse_data ? CreateSparseBitVectorData(_fbb, _o->sparse_data.get(), _rehasher) : 0;
  return libtextclassifier3::CreateBitVectorData(
      _fbb,
      _dense_data,
      _sparse_data);
}

inline DenseBitVectorDataT *DenseBitVectorData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::DenseBitVectorDataT> _o = std::unique_ptr<libtextclassifier3::DenseBitVectorDataT>(new DenseBitVectorDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DenseBitVectorData::UnPackTo(DenseBitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
  { auto _e = size(); _o->size = _e; }
}

inline flatbuffers::Offset<DenseBitVectorData> DenseBitVectorData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DenseBitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDenseBitVectorData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<DenseBitVectorData> CreateDenseBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const DenseBitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DenseBitVectorDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  auto _size = _o->size;
  return libtextclassifier3::CreateDenseBitVectorData(
      _fbb,
      _data,
      _size);
}

inline SparseBitVectorDataT *SparseBitVectorData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::SparseBitVectorDataT> _o = std::unique_ptr<libtextclassifier3::SparseBitVectorDataT>(new SparseBitVectorDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SparseBitVectorData::UnPackTo(SparseBitVectorDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = sorted_indices_32(); if (_e) { _o->sorted_indices_32.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->sorted_indices_32[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<SparseBitVectorData> SparseBitVectorData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SparseBitVectorDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSparseBitVectorData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SparseBitVectorData> CreateSparseBitVectorData(flatbuffers::FlatBufferBuilder &_fbb, const SparseBitVectorDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SparseBitVectorDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _sorted_indices_32 = _o->sorted_indices_32.size() ? _fbb.CreateVector(_o->sorted_indices_32) : 0;
  return libtextclassifier3::CreateSparseBitVectorData(
      _fbb,
      _sorted_indices_32);
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_BITVECTOR_LIBTEXTCLASSIFIER3_H_
