// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTENTCONFIG_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_INTENTCONFIG_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

#include "utils/zlib/buffer_generated.h"

namespace libtextclassifier3 {

struct AndroidIntentFactoryOptions;
struct AndroidIntentFactoryOptionsBuilder;
struct AndroidIntentFactoryOptionsT;

struct AndroidIntentFactoryEntityOptions;
struct AndroidIntentFactoryEntityOptionsBuilder;
struct AndroidIntentFactoryEntityOptionsT;

struct AndroidIntentGeneratorOptions;
struct AndroidIntentGeneratorOptionsBuilder;
struct AndroidIntentGeneratorOptionsT;

struct AndroidIntentGeneratorStrings;
struct AndroidIntentGeneratorStringsBuilder;
struct AndroidIntentGeneratorStringsT;

struct AndroidSimpleIntentGeneratorExtra;
struct AndroidSimpleIntentGeneratorExtraBuilder;
struct AndroidSimpleIntentGeneratorExtraT;

struct AndroidSimpleIntentGeneratorCondition;
struct AndroidSimpleIntentGeneratorConditionBuilder;
struct AndroidSimpleIntentGeneratorConditionT;

struct AndroidSimpleIntentGeneratorOptions;
struct AndroidSimpleIntentGeneratorOptionsBuilder;
struct AndroidSimpleIntentGeneratorOptionsT;

namespace IntentFactoryModel_ {

struct IntentGenerator;
struct IntentGeneratorBuilder;
struct IntentGeneratorT;

}  // namespace IntentFactoryModel_

struct IntentFactoryModel;
struct IntentFactoryModelBuilder;
struct IntentFactoryModelT;

enum AndroidSimpleIntentGeneratorVariableType {
  AndroidSimpleIntentGeneratorVariableType_INVALID_VARIABLE = 0,
  AndroidSimpleIntentGeneratorVariableType_RAW_TEXT = 1,
  AndroidSimpleIntentGeneratorVariableType_URL_TEXT = 2,
  AndroidSimpleIntentGeneratorVariableType_URL_ENCODED_TEXT = 3,
  AndroidSimpleIntentGeneratorVariableType_EVENT_TIME_MS_UTC = 4,
  AndroidSimpleIntentGeneratorVariableType_EVENT_START_MS_UTC = 5,
  AndroidSimpleIntentGeneratorVariableType_EVENT_END_MS_UTC = 6,
  AndroidSimpleIntentGeneratorVariableType_PACKAGE_NAME = 7,
  AndroidSimpleIntentGeneratorVariableType_MIN = AndroidSimpleIntentGeneratorVariableType_INVALID_VARIABLE,
  AndroidSimpleIntentGeneratorVariableType_MAX = AndroidSimpleIntentGeneratorVariableType_PACKAGE_NAME
};

inline const AndroidSimpleIntentGeneratorVariableType (&EnumValuesAndroidSimpleIntentGeneratorVariableType())[8] {
  static const AndroidSimpleIntentGeneratorVariableType values[] = {
    AndroidSimpleIntentGeneratorVariableType_INVALID_VARIABLE,
    AndroidSimpleIntentGeneratorVariableType_RAW_TEXT,
    AndroidSimpleIntentGeneratorVariableType_URL_TEXT,
    AndroidSimpleIntentGeneratorVariableType_URL_ENCODED_TEXT,
    AndroidSimpleIntentGeneratorVariableType_EVENT_TIME_MS_UTC,
    AndroidSimpleIntentGeneratorVariableType_EVENT_START_MS_UTC,
    AndroidSimpleIntentGeneratorVariableType_EVENT_END_MS_UTC,
    AndroidSimpleIntentGeneratorVariableType_PACKAGE_NAME
  };
  return values;
}

inline const char * const *EnumNamesAndroidSimpleIntentGeneratorVariableType() {
  static const char * const names[9] = {
    "INVALID_VARIABLE",
    "RAW_TEXT",
    "URL_TEXT",
    "URL_ENCODED_TEXT",
    "EVENT_TIME_MS_UTC",
    "EVENT_START_MS_UTC",
    "EVENT_END_MS_UTC",
    "PACKAGE_NAME",
    nullptr
  };
  return names;
}

inline const char *EnumNameAndroidSimpleIntentGeneratorVariableType(AndroidSimpleIntentGeneratorVariableType e) {
  if (flatbuffers::IsOutRange(e, AndroidSimpleIntentGeneratorVariableType_INVALID_VARIABLE, AndroidSimpleIntentGeneratorVariableType_PACKAGE_NAME)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAndroidSimpleIntentGeneratorVariableType()[index];
}

enum AndroidSimpleIntentGeneratorExtraType {
  AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE = 0,
  AndroidSimpleIntentGeneratorExtraType_STRING = 1,
  AndroidSimpleIntentGeneratorExtraType_BOOL = 2,
  AndroidSimpleIntentGeneratorExtraType_VARIABLE_AS_LONG = 3,
  AndroidSimpleIntentGeneratorExtraType_MIN = AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE,
  AndroidSimpleIntentGeneratorExtraType_MAX = AndroidSimpleIntentGeneratorExtraType_VARIABLE_AS_LONG
};

inline const AndroidSimpleIntentGeneratorExtraType (&EnumValuesAndroidSimpleIntentGeneratorExtraType())[4] {
  static const AndroidSimpleIntentGeneratorExtraType values[] = {
    AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE,
    AndroidSimpleIntentGeneratorExtraType_STRING,
    AndroidSimpleIntentGeneratorExtraType_BOOL,
    AndroidSimpleIntentGeneratorExtraType_VARIABLE_AS_LONG
  };
  return values;
}

inline const char * const *EnumNamesAndroidSimpleIntentGeneratorExtraType() {
  static const char * const names[5] = {
    "INVALID_EXTRA_TYPE",
    "STRING",
    "BOOL",
    "VARIABLE_AS_LONG",
    nullptr
  };
  return names;
}

inline const char *EnumNameAndroidSimpleIntentGeneratorExtraType(AndroidSimpleIntentGeneratorExtraType e) {
  if (flatbuffers::IsOutRange(e, AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE, AndroidSimpleIntentGeneratorExtraType_VARIABLE_AS_LONG)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAndroidSimpleIntentGeneratorExtraType()[index];
}

enum AndroidSimpleIntentGeneratorConditionType {
  AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE = 0,
  AndroidSimpleIntentGeneratorConditionType_USER_RESTRICTION_NOT_SET = 1,
  AndroidSimpleIntentGeneratorConditionType_EVENT_START_IN_FUTURE_MS = 2,
  AndroidSimpleIntentGeneratorConditionType_MIN = AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE,
  AndroidSimpleIntentGeneratorConditionType_MAX = AndroidSimpleIntentGeneratorConditionType_EVENT_START_IN_FUTURE_MS
};

inline const AndroidSimpleIntentGeneratorConditionType (&EnumValuesAndroidSimpleIntentGeneratorConditionType())[3] {
  static const AndroidSimpleIntentGeneratorConditionType values[] = {
    AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE,
    AndroidSimpleIntentGeneratorConditionType_USER_RESTRICTION_NOT_SET,
    AndroidSimpleIntentGeneratorConditionType_EVENT_START_IN_FUTURE_MS
  };
  return values;
}

inline const char * const *EnumNamesAndroidSimpleIntentGeneratorConditionType() {
  static const char * const names[4] = {
    "INVALID_CONDITION_TYPE",
    "USER_RESTRICTION_NOT_SET",
    "EVENT_START_IN_FUTURE_MS",
    nullptr
  };
  return names;
}

inline const char *EnumNameAndroidSimpleIntentGeneratorConditionType(AndroidSimpleIntentGeneratorConditionType e) {
  if (flatbuffers::IsOutRange(e, AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE, AndroidSimpleIntentGeneratorConditionType_EVENT_START_IN_FUTURE_MS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAndroidSimpleIntentGeneratorConditionType()[index];
}

struct AndroidIntentFactoryOptionsT : public flatbuffers::NativeTable {
  typedef AndroidIntentFactoryOptions TableType;
  std::vector<std::unique_ptr<libtextclassifier3::AndroidIntentFactoryEntityOptionsT>> entity;
  AndroidIntentFactoryOptionsT() {
  }
};

struct AndroidIntentFactoryOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidIntentFactoryOptionsT NativeTableType;
  typedef AndroidIntentFactoryOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>> *entity() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>> *>(VT_ENTITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyVector(entity()) &&
           verifier.VerifyVectorOfTables(entity()) &&
           verifier.EndTable();
  }
  AndroidIntentFactoryOptionsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidIntentFactoryOptionsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidIntentFactoryOptions> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidIntentFactoryOptionsBuilder {
  typedef AndroidIntentFactoryOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>>> entity) {
    fbb_.AddOffset(AndroidIntentFactoryOptions::VT_ENTITY, entity);
  }
  explicit AndroidIntentFactoryOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidIntentFactoryOptionsBuilder &operator=(const AndroidIntentFactoryOptionsBuilder &);
  flatbuffers::Offset<AndroidIntentFactoryOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidIntentFactoryOptions>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidIntentFactoryOptions> CreateAndroidIntentFactoryOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>>> entity = 0) {
  AndroidIntentFactoryOptionsBuilder builder_(_fbb);
  builder_.add_entity(entity);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidIntentFactoryOptions> CreateAndroidIntentFactoryOptionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>> *entity = nullptr) {
  auto entity__ = entity ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>>(*entity) : 0;
  return libtextclassifier3::CreateAndroidIntentFactoryOptions(
      _fbb,
      entity__);
}

flatbuffers::Offset<AndroidIntentFactoryOptions> CreateAndroidIntentFactoryOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidIntentFactoryEntityOptionsT : public flatbuffers::NativeTable {
  typedef AndroidIntentFactoryEntityOptions TableType;
  std::string entity_type;
  std::vector<std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorOptionsT>> generator;
  AndroidIntentFactoryEntityOptionsT() {
  }
};

struct AndroidIntentFactoryEntityOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidIntentFactoryEntityOptionsT NativeTableType;
  typedef AndroidIntentFactoryEntityOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_TYPE = 4,
    VT_GENERATOR = 6
  };
  const flatbuffers::String *entity_type() const {
    return GetPointer<const flatbuffers::String *>(VT_ENTITY_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>> *generator() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>> *>(VT_GENERATOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTITY_TYPE) &&
           verifier.VerifyString(entity_type()) &&
           VerifyOffset(verifier, VT_GENERATOR) &&
           verifier.VerifyVector(generator()) &&
           verifier.VerifyVectorOfTables(generator()) &&
           verifier.EndTable();
  }
  AndroidIntentFactoryEntityOptionsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidIntentFactoryEntityOptionsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidIntentFactoryEntityOptions> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryEntityOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidIntentFactoryEntityOptionsBuilder {
  typedef AndroidIntentFactoryEntityOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity_type(flatbuffers::Offset<flatbuffers::String> entity_type) {
    fbb_.AddOffset(AndroidIntentFactoryEntityOptions::VT_ENTITY_TYPE, entity_type);
  }
  void add_generator(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>>> generator) {
    fbb_.AddOffset(AndroidIntentFactoryEntityOptions::VT_GENERATOR, generator);
  }
  explicit AndroidIntentFactoryEntityOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidIntentFactoryEntityOptionsBuilder &operator=(const AndroidIntentFactoryEntityOptionsBuilder &);
  flatbuffers::Offset<AndroidIntentFactoryEntityOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidIntentFactoryEntityOptions>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidIntentFactoryEntityOptions> CreateAndroidIntentFactoryEntityOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> entity_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>>> generator = 0) {
  AndroidIntentFactoryEntityOptionsBuilder builder_(_fbb);
  builder_.add_generator(generator);
  builder_.add_entity_type(entity_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidIntentFactoryEntityOptions> CreateAndroidIntentFactoryEntityOptionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *entity_type = nullptr,
    const std::vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>> *generator = nullptr) {
  auto entity_type__ = entity_type ? _fbb.CreateSharedString(entity_type) : 0;
  auto generator__ = generator ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>>(*generator) : 0;
  return libtextclassifier3::CreateAndroidIntentFactoryEntityOptions(
      _fbb,
      entity_type__,
      generator__);
}

flatbuffers::Offset<AndroidIntentFactoryEntityOptions> CreateAndroidIntentFactoryEntityOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryEntityOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidIntentGeneratorOptionsT : public flatbuffers::NativeTable {
  typedef AndroidIntentGeneratorOptions TableType;
  std::vector<std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorStringsT>> strings;
  std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorOptionsT> simple;
  AndroidIntentGeneratorOptionsT() {
  }
};

struct AndroidIntentGeneratorOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidIntentGeneratorOptionsT NativeTableType;
  typedef AndroidIntentGeneratorOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STRINGS = 4,
    VT_SIMPLE = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>> *strings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>> *>(VT_STRINGS);
  }
  const libtextclassifier3::AndroidSimpleIntentGeneratorOptions *simple() const {
    return GetPointer<const libtextclassifier3::AndroidSimpleIntentGeneratorOptions *>(VT_SIMPLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STRINGS) &&
           verifier.VerifyVector(strings()) &&
           verifier.VerifyVectorOfTables(strings()) &&
           VerifyOffset(verifier, VT_SIMPLE) &&
           verifier.VerifyTable(simple()) &&
           verifier.EndTable();
  }
  AndroidIntentGeneratorOptionsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidIntentGeneratorOptionsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidIntentGeneratorOptions> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidIntentGeneratorOptionsBuilder {
  typedef AndroidIntentGeneratorOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_strings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>>> strings) {
    fbb_.AddOffset(AndroidIntentGeneratorOptions::VT_STRINGS, strings);
  }
  void add_simple(flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorOptions> simple) {
    fbb_.AddOffset(AndroidIntentGeneratorOptions::VT_SIMPLE, simple);
  }
  explicit AndroidIntentGeneratorOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidIntentGeneratorOptionsBuilder &operator=(const AndroidIntentGeneratorOptionsBuilder &);
  flatbuffers::Offset<AndroidIntentGeneratorOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidIntentGeneratorOptions>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidIntentGeneratorOptions> CreateAndroidIntentGeneratorOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>>> strings = 0,
    flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorOptions> simple = 0) {
  AndroidIntentGeneratorOptionsBuilder builder_(_fbb);
  builder_.add_simple(simple);
  builder_.add_strings(strings);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidIntentGeneratorOptions> CreateAndroidIntentGeneratorOptionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>> *strings = nullptr,
    flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorOptions> simple = 0) {
  auto strings__ = strings ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>>(*strings) : 0;
  return libtextclassifier3::CreateAndroidIntentGeneratorOptions(
      _fbb,
      strings__,
      simple);
}

flatbuffers::Offset<AndroidIntentGeneratorOptions> CreateAndroidIntentGeneratorOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidIntentGeneratorStringsT : public flatbuffers::NativeTable {
  typedef AndroidIntentGeneratorStrings TableType;
  std::string language_tag;
  std::string title;
  std::string description;
  AndroidIntentGeneratorStringsT() {
  }
};

struct AndroidIntentGeneratorStrings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidIntentGeneratorStringsT NativeTableType;
  typedef AndroidIntentGeneratorStringsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANGUAGE_TAG = 4,
    VT_TITLE = 6,
    VT_DESCRIPTION = 8
  };
  const flatbuffers::String *language_tag() const {
    return GetPointer<const flatbuffers::String *>(VT_LANGUAGE_TAG);
  }
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANGUAGE_TAG) &&
           verifier.VerifyString(language_tag()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           verifier.EndTable();
  }
  AndroidIntentGeneratorStringsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidIntentGeneratorStringsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidIntentGeneratorStrings> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorStringsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidIntentGeneratorStringsBuilder {
  typedef AndroidIntentGeneratorStrings Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_language_tag(flatbuffers::Offset<flatbuffers::String> language_tag) {
    fbb_.AddOffset(AndroidIntentGeneratorStrings::VT_LANGUAGE_TAG, language_tag);
  }
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(AndroidIntentGeneratorStrings::VT_TITLE, title);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(AndroidIntentGeneratorStrings::VT_DESCRIPTION, description);
  }
  explicit AndroidIntentGeneratorStringsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidIntentGeneratorStringsBuilder &operator=(const AndroidIntentGeneratorStringsBuilder &);
  flatbuffers::Offset<AndroidIntentGeneratorStrings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidIntentGeneratorStrings>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidIntentGeneratorStrings> CreateAndroidIntentGeneratorStrings(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> language_tag = 0,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0) {
  AndroidIntentGeneratorStringsBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_title(title);
  builder_.add_language_tag(language_tag);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidIntentGeneratorStrings> CreateAndroidIntentGeneratorStringsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *language_tag = nullptr,
    const char *title = nullptr,
    const char *description = nullptr) {
  auto language_tag__ = language_tag ? _fbb.CreateSharedString(language_tag) : 0;
  auto title__ = title ? _fbb.CreateSharedString(title) : 0;
  auto description__ = description ? _fbb.CreateSharedString(description) : 0;
  return libtextclassifier3::CreateAndroidIntentGeneratorStrings(
      _fbb,
      language_tag__,
      title__,
      description__);
}

flatbuffers::Offset<AndroidIntentGeneratorStrings> CreateAndroidIntentGeneratorStrings(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorStringsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidSimpleIntentGeneratorExtraT : public flatbuffers::NativeTable {
  typedef AndroidSimpleIntentGeneratorExtra TableType;
  std::string name;
  libtextclassifier3::AndroidSimpleIntentGeneratorExtraType type;
  std::string string_;
  bool bool_;
  int32_t int32_;
  AndroidSimpleIntentGeneratorExtraT()
      : type(libtextclassifier3::AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE),
        bool_(false),
        int32_(0) {
  }
};

struct AndroidSimpleIntentGeneratorExtra FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidSimpleIntentGeneratorExtraT NativeTableType;
  typedef AndroidSimpleIntentGeneratorExtraBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_STRING_ = 8,
    VT_BOOL_ = 10,
    VT_INT32_ = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  libtextclassifier3::AndroidSimpleIntentGeneratorExtraType type() const {
    return static_cast<libtextclassifier3::AndroidSimpleIntentGeneratorExtraType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *string_() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING_);
  }
  bool bool_() const {
    return GetField<uint8_t>(VT_BOOL_, 0) != 0;
  }
  int32_t int32_() const {
    return GetField<int32_t>(VT_INT32_, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_STRING_) &&
           verifier.VerifyString(string_()) &&
           VerifyField<uint8_t>(verifier, VT_BOOL_) &&
           VerifyField<int32_t>(verifier, VT_INT32_) &&
           verifier.EndTable();
  }
  AndroidSimpleIntentGeneratorExtraT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidSimpleIntentGeneratorExtraT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorExtraT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidSimpleIntentGeneratorExtraBuilder {
  typedef AndroidSimpleIntentGeneratorExtra Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorExtra::VT_NAME, name);
  }
  void add_type(libtextclassifier3::AndroidSimpleIntentGeneratorExtraType type) {
    fbb_.AddElement<int32_t>(AndroidSimpleIntentGeneratorExtra::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_string_(flatbuffers::Offset<flatbuffers::String> string_) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorExtra::VT_STRING_, string_);
  }
  void add_bool_(bool bool_) {
    fbb_.AddElement<uint8_t>(AndroidSimpleIntentGeneratorExtra::VT_BOOL_, static_cast<uint8_t>(bool_), 0);
  }
  void add_int32_(int32_t int32_) {
    fbb_.AddElement<int32_t>(AndroidSimpleIntentGeneratorExtra::VT_INT32_, int32_, 0);
  }
  explicit AndroidSimpleIntentGeneratorExtraBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidSimpleIntentGeneratorExtraBuilder &operator=(const AndroidSimpleIntentGeneratorExtraBuilder &);
  flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> CreateAndroidSimpleIntentGeneratorExtra(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    libtextclassifier3::AndroidSimpleIntentGeneratorExtraType type = libtextclassifier3::AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE,
    flatbuffers::Offset<flatbuffers::String> string_ = 0,
    bool bool_ = false,
    int32_t int32_ = 0) {
  AndroidSimpleIntentGeneratorExtraBuilder builder_(_fbb);
  builder_.add_int32_(int32_);
  builder_.add_string_(string_);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_bool_(bool_);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> CreateAndroidSimpleIntentGeneratorExtraDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    libtextclassifier3::AndroidSimpleIntentGeneratorExtraType type = libtextclassifier3::AndroidSimpleIntentGeneratorExtraType_INVALID_EXTRA_TYPE,
    const char *string_ = nullptr,
    bool bool_ = false,
    int32_t int32_ = 0) {
  auto name__ = name ? _fbb.CreateSharedString(name) : 0;
  auto string___ = string_ ? _fbb.CreateSharedString(string_) : 0;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorExtra(
      _fbb,
      name__,
      type,
      string___,
      bool_,
      int32_);
}

flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> CreateAndroidSimpleIntentGeneratorExtra(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorExtraT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidSimpleIntentGeneratorConditionT : public flatbuffers::NativeTable {
  typedef AndroidSimpleIntentGeneratorCondition TableType;
  libtextclassifier3::AndroidSimpleIntentGeneratorConditionType type;
  std::string string_;
  int32_t int32_;
  int64_t int64_;
  AndroidSimpleIntentGeneratorConditionT()
      : type(libtextclassifier3::AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE),
        int32_(0),
        int64_(0) {
  }
};

struct AndroidSimpleIntentGeneratorCondition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidSimpleIntentGeneratorConditionT NativeTableType;
  typedef AndroidSimpleIntentGeneratorConditionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_STRING_ = 6,
    VT_INT32_ = 8,
    VT_INT64_ = 10
  };
  libtextclassifier3::AndroidSimpleIntentGeneratorConditionType type() const {
    return static_cast<libtextclassifier3::AndroidSimpleIntentGeneratorConditionType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *string_() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING_);
  }
  int32_t int32_() const {
    return GetField<int32_t>(VT_INT32_, 0);
  }
  int64_t int64_() const {
    return GetField<int64_t>(VT_INT64_, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_STRING_) &&
           verifier.VerifyString(string_()) &&
           VerifyField<int32_t>(verifier, VT_INT32_) &&
           VerifyField<int64_t>(verifier, VT_INT64_) &&
           verifier.EndTable();
  }
  AndroidSimpleIntentGeneratorConditionT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidSimpleIntentGeneratorConditionT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorConditionT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidSimpleIntentGeneratorConditionBuilder {
  typedef AndroidSimpleIntentGeneratorCondition Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(libtextclassifier3::AndroidSimpleIntentGeneratorConditionType type) {
    fbb_.AddElement<int32_t>(AndroidSimpleIntentGeneratorCondition::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_string_(flatbuffers::Offset<flatbuffers::String> string_) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorCondition::VT_STRING_, string_);
  }
  void add_int32_(int32_t int32_) {
    fbb_.AddElement<int32_t>(AndroidSimpleIntentGeneratorCondition::VT_INT32_, int32_, 0);
  }
  void add_int64_(int64_t int64_) {
    fbb_.AddElement<int64_t>(AndroidSimpleIntentGeneratorCondition::VT_INT64_, int64_, 0);
  }
  explicit AndroidSimpleIntentGeneratorConditionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidSimpleIntentGeneratorConditionBuilder &operator=(const AndroidSimpleIntentGeneratorConditionBuilder &);
  flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> CreateAndroidSimpleIntentGeneratorCondition(
    flatbuffers::FlatBufferBuilder &_fbb,
    libtextclassifier3::AndroidSimpleIntentGeneratorConditionType type = libtextclassifier3::AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE,
    flatbuffers::Offset<flatbuffers::String> string_ = 0,
    int32_t int32_ = 0,
    int64_t int64_ = 0) {
  AndroidSimpleIntentGeneratorConditionBuilder builder_(_fbb);
  builder_.add_int64_(int64_);
  builder_.add_int32_(int32_);
  builder_.add_string_(string_);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> CreateAndroidSimpleIntentGeneratorConditionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    libtextclassifier3::AndroidSimpleIntentGeneratorConditionType type = libtextclassifier3::AndroidSimpleIntentGeneratorConditionType_INVALID_CONDITION_TYPE,
    const char *string_ = nullptr,
    int32_t int32_ = 0,
    int64_t int64_ = 0) {
  auto string___ = string_ ? _fbb.CreateSharedString(string_) : 0;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorCondition(
      _fbb,
      type,
      string___,
      int32_,
      int64_);
}

flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> CreateAndroidSimpleIntentGeneratorCondition(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorConditionT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AndroidSimpleIntentGeneratorOptionsT : public flatbuffers::NativeTable {
  typedef AndroidSimpleIntentGeneratorOptions TableType;
  std::string action;
  std::string data;
  std::string type;
  std::vector<std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorExtraT>> extra;
  std::vector<libtextclassifier3::AndroidSimpleIntentGeneratorVariableType> variable;
  std::vector<std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorConditionT>> condition;
  AndroidSimpleIntentGeneratorOptionsT() {
  }
};

struct AndroidSimpleIntentGeneratorOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AndroidSimpleIntentGeneratorOptionsT NativeTableType;
  typedef AndroidSimpleIntentGeneratorOptionsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION = 4,
    VT_DATA = 6,
    VT_TYPE = 8,
    VT_EXTRA = 10,
    VT_VARIABLE = 12,
    VT_CONDITION = 14
  };
  const flatbuffers::String *action() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION);
  }
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>> *extra() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>> *>(VT_EXTRA);
  }
  const flatbuffers::Vector<int32_t> *variable() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_VARIABLE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>> *condition() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>> *>(VT_CONDITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION) &&
           verifier.VerifyString(action()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_EXTRA) &&
           verifier.VerifyVector(extra()) &&
           verifier.VerifyVectorOfTables(extra()) &&
           VerifyOffset(verifier, VT_VARIABLE) &&
           verifier.VerifyVector(variable()) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           verifier.VerifyVector(condition()) &&
           verifier.VerifyVectorOfTables(condition()) &&
           verifier.EndTable();
  }
  AndroidSimpleIntentGeneratorOptionsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AndroidSimpleIntentGeneratorOptionsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AndroidSimpleIntentGeneratorOptionsBuilder {
  typedef AndroidSimpleIntentGeneratorOptions Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action(flatbuffers::Offset<flatbuffers::String> action) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_ACTION, action);
  }
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_DATA, data);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_TYPE, type);
  }
  void add_extra(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>>> extra) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_EXTRA, extra);
  }
  void add_variable(flatbuffers::Offset<flatbuffers::Vector<int32_t>> variable) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_VARIABLE, variable);
  }
  void add_condition(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>>> condition) {
    fbb_.AddOffset(AndroidSimpleIntentGeneratorOptions::VT_CONDITION, condition);
  }
  explicit AndroidSimpleIntentGeneratorOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AndroidSimpleIntentGeneratorOptionsBuilder &operator=(const AndroidSimpleIntentGeneratorOptionsBuilder &);
  flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions>(end);
    return o;
  }
};

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> CreateAndroidSimpleIntentGeneratorOptions(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> action = 0,
    flatbuffers::Offset<flatbuffers::String> data = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>>> extra = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> variable = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>>> condition = 0) {
  AndroidSimpleIntentGeneratorOptionsBuilder builder_(_fbb);
  builder_.add_condition(condition);
  builder_.add_variable(variable);
  builder_.add_extra(extra);
  builder_.add_type(type);
  builder_.add_data(data);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> CreateAndroidSimpleIntentGeneratorOptionsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *action = nullptr,
    const char *data = nullptr,
    const char *type = nullptr,
    const std::vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>> *extra = nullptr,
    const std::vector<int32_t> *variable = nullptr,
    const std::vector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>> *condition = nullptr) {
  auto action__ = action ? _fbb.CreateSharedString(action) : 0;
  auto data__ = data ? _fbb.CreateSharedString(data) : 0;
  auto type__ = type ? _fbb.CreateSharedString(type) : 0;
  auto extra__ = extra ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>>(*extra) : 0;
  auto variable__ = variable ? _fbb.CreateVector<int32_t>(*variable) : 0;
  auto condition__ = condition ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>>(*condition) : 0;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorOptions(
      _fbb,
      action__,
      data__,
      type__,
      extra__,
      variable__,
      condition__);
}

flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> CreateAndroidSimpleIntentGeneratorOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

namespace IntentFactoryModel_ {

struct IntentGeneratorT : public flatbuffers::NativeTable {
  typedef IntentGenerator TableType;
  std::string type;
  std::vector<uint8_t> lua_template_generator;
  std::unique_ptr<libtextclassifier3::CompressedBufferT> compressed_lua_template_generator;
  IntentGeneratorT() {
  }
};

struct IntentGenerator FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IntentGeneratorT NativeTableType;
  typedef IntentGeneratorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_LUA_TEMPLATE_GENERATOR = 6,
    VT_COMPRESSED_LUA_TEMPLATE_GENERATOR = 8
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::Vector<uint8_t> *lua_template_generator() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_LUA_TEMPLATE_GENERATOR);
  }
  const libtextclassifier3::CompressedBuffer *compressed_lua_template_generator() const {
    return GetPointer<const libtextclassifier3::CompressedBuffer *>(VT_COMPRESSED_LUA_TEMPLATE_GENERATOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_LUA_TEMPLATE_GENERATOR) &&
           verifier.VerifyVector(lua_template_generator()) &&
           VerifyOffset(verifier, VT_COMPRESSED_LUA_TEMPLATE_GENERATOR) &&
           verifier.VerifyTable(compressed_lua_template_generator()) &&
           verifier.EndTable();
  }
  IntentGeneratorT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(IntentGeneratorT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<IntentGenerator> Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntentGeneratorT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct IntentGeneratorBuilder {
  typedef IntentGenerator Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(IntentGenerator::VT_TYPE, type);
  }
  void add_lua_template_generator(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> lua_template_generator) {
    fbb_.AddOffset(IntentGenerator::VT_LUA_TEMPLATE_GENERATOR, lua_template_generator);
  }
  void add_compressed_lua_template_generator(flatbuffers::Offset<libtextclassifier3::CompressedBuffer> compressed_lua_template_generator) {
    fbb_.AddOffset(IntentGenerator::VT_COMPRESSED_LUA_TEMPLATE_GENERATOR, compressed_lua_template_generator);
  }
  explicit IntentGeneratorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IntentGeneratorBuilder &operator=(const IntentGeneratorBuilder &);
  flatbuffers::Offset<IntentGenerator> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IntentGenerator>(end);
    return o;
  }
};

inline flatbuffers::Offset<IntentGenerator> CreateIntentGenerator(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> lua_template_generator = 0,
    flatbuffers::Offset<libtextclassifier3::CompressedBuffer> compressed_lua_template_generator = 0) {
  IntentGeneratorBuilder builder_(_fbb);
  builder_.add_compressed_lua_template_generator(compressed_lua_template_generator);
  builder_.add_lua_template_generator(lua_template_generator);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<IntentGenerator> CreateIntentGeneratorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const std::vector<uint8_t> *lua_template_generator = nullptr,
    flatbuffers::Offset<libtextclassifier3::CompressedBuffer> compressed_lua_template_generator = 0) {
  auto type__ = type ? _fbb.CreateSharedString(type) : 0;
  auto lua_template_generator__ = lua_template_generator ? _fbb.CreateVector<uint8_t>(*lua_template_generator) : 0;
  return libtextclassifier3::IntentFactoryModel_::CreateIntentGenerator(
      _fbb,
      type__,
      lua_template_generator__,
      compressed_lua_template_generator);
}

flatbuffers::Offset<IntentGenerator> CreateIntentGenerator(flatbuffers::FlatBufferBuilder &_fbb, const IntentGeneratorT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

}  // namespace IntentFactoryModel_

struct IntentFactoryModelT : public flatbuffers::NativeTable {
  typedef IntentFactoryModel TableType;
  std::vector<std::unique_ptr<libtextclassifier3::IntentFactoryModel_::IntentGeneratorT>> generator;
  bool precompile_generators;
  IntentFactoryModelT()
      : precompile_generators(false) {
  }
};

struct IntentFactoryModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IntentFactoryModelT NativeTableType;
  typedef IntentFactoryModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GENERATOR = 4,
    VT_PRECOMPILE_GENERATORS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>> *generator() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>> *>(VT_GENERATOR);
  }
  bool precompile_generators() const {
    return GetField<uint8_t>(VT_PRECOMPILE_GENERATORS, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GENERATOR) &&
           verifier.VerifyVector(generator()) &&
           verifier.VerifyVectorOfTables(generator()) &&
           VerifyField<uint8_t>(verifier, VT_PRECOMPILE_GENERATORS) &&
           verifier.EndTable();
  }
  IntentFactoryModelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(IntentFactoryModelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<IntentFactoryModel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntentFactoryModelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct IntentFactoryModelBuilder {
  typedef IntentFactoryModel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_generator(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>>> generator) {
    fbb_.AddOffset(IntentFactoryModel::VT_GENERATOR, generator);
  }
  void add_precompile_generators(bool precompile_generators) {
    fbb_.AddElement<uint8_t>(IntentFactoryModel::VT_PRECOMPILE_GENERATORS, static_cast<uint8_t>(precompile_generators), 0);
  }
  explicit IntentFactoryModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IntentFactoryModelBuilder &operator=(const IntentFactoryModelBuilder &);
  flatbuffers::Offset<IntentFactoryModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IntentFactoryModel>(end);
    return o;
  }
};

inline flatbuffers::Offset<IntentFactoryModel> CreateIntentFactoryModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>>> generator = 0,
    bool precompile_generators = false) {
  IntentFactoryModelBuilder builder_(_fbb);
  builder_.add_generator(generator);
  builder_.add_precompile_generators(precompile_generators);
  return builder_.Finish();
}

inline flatbuffers::Offset<IntentFactoryModel> CreateIntentFactoryModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>> *generator = nullptr,
    bool precompile_generators = false) {
  auto generator__ = generator ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>>(*generator) : 0;
  return libtextclassifier3::CreateIntentFactoryModel(
      _fbb,
      generator__,
      precompile_generators);
}

flatbuffers::Offset<IntentFactoryModel> CreateIntentFactoryModel(flatbuffers::FlatBufferBuilder &_fbb, const IntentFactoryModelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AndroidIntentFactoryOptionsT *AndroidIntentFactoryOptions::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidIntentFactoryOptionsT> _o = std::unique_ptr<libtextclassifier3::AndroidIntentFactoryOptionsT>(new AndroidIntentFactoryOptionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidIntentFactoryOptions::UnPackTo(AndroidIntentFactoryOptionsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = entity(); if (_e) { _o->entity.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->entity[_i] = std::unique_ptr<libtextclassifier3::AndroidIntentFactoryEntityOptionsT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<AndroidIntentFactoryOptions> AndroidIntentFactoryOptions::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidIntentFactoryOptions(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidIntentFactoryOptions> CreateAndroidIntentFactoryOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidIntentFactoryOptionsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _entity = _o->entity.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentFactoryEntityOptions>> (_o->entity.size(), [](size_t i, _VectorArgs *__va) { return CreateAndroidIntentFactoryEntityOptions(*__va->__fbb, __va->__o->entity[i].get(), __va->__rehasher); }, &_va ) : 0;
  return libtextclassifier3::CreateAndroidIntentFactoryOptions(
      _fbb,
      _entity);
}

inline AndroidIntentFactoryEntityOptionsT *AndroidIntentFactoryEntityOptions::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidIntentFactoryEntityOptionsT> _o = std::unique_ptr<libtextclassifier3::AndroidIntentFactoryEntityOptionsT>(new AndroidIntentFactoryEntityOptionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidIntentFactoryEntityOptions::UnPackTo(AndroidIntentFactoryEntityOptionsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = entity_type(); if (_e) _o->entity_type = _e->str(); }
  { auto _e = generator(); if (_e) { _o->generator.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->generator[_i] = std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorOptionsT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<AndroidIntentFactoryEntityOptions> AndroidIntentFactoryEntityOptions::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryEntityOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidIntentFactoryEntityOptions(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidIntentFactoryEntityOptions> CreateAndroidIntentFactoryEntityOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentFactoryEntityOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidIntentFactoryEntityOptionsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _entity_type = _o->entity_type.empty() ? 0 : _fbb.CreateSharedString(_o->entity_type);
  auto _generator = _o->generator.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorOptions>> (_o->generator.size(), [](size_t i, _VectorArgs *__va) { return CreateAndroidIntentGeneratorOptions(*__va->__fbb, __va->__o->generator[i].get(), __va->__rehasher); }, &_va ) : 0;
  return libtextclassifier3::CreateAndroidIntentFactoryEntityOptions(
      _fbb,
      _entity_type,
      _generator);
}

inline AndroidIntentGeneratorOptionsT *AndroidIntentGeneratorOptions::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorOptionsT> _o = std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorOptionsT>(new AndroidIntentGeneratorOptionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidIntentGeneratorOptions::UnPackTo(AndroidIntentGeneratorOptionsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = strings(); if (_e) { _o->strings.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->strings[_i] = std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorStringsT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = simple(); if (_e) _o->simple = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorOptionsT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<AndroidIntentGeneratorOptions> AndroidIntentGeneratorOptions::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidIntentGeneratorOptions(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidIntentGeneratorOptions> CreateAndroidIntentGeneratorOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidIntentGeneratorOptionsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _strings = _o->strings.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidIntentGeneratorStrings>> (_o->strings.size(), [](size_t i, _VectorArgs *__va) { return CreateAndroidIntentGeneratorStrings(*__va->__fbb, __va->__o->strings[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _simple = _o->simple ? CreateAndroidSimpleIntentGeneratorOptions(_fbb, _o->simple.get(), _rehasher) : 0;
  return libtextclassifier3::CreateAndroidIntentGeneratorOptions(
      _fbb,
      _strings,
      _simple);
}

inline AndroidIntentGeneratorStringsT *AndroidIntentGeneratorStrings::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorStringsT> _o = std::unique_ptr<libtextclassifier3::AndroidIntentGeneratorStringsT>(new AndroidIntentGeneratorStringsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidIntentGeneratorStrings::UnPackTo(AndroidIntentGeneratorStringsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = language_tag(); if (_e) _o->language_tag = _e->str(); }
  { auto _e = title(); if (_e) _o->title = _e->str(); }
  { auto _e = description(); if (_e) _o->description = _e->str(); }
}

inline flatbuffers::Offset<AndroidIntentGeneratorStrings> AndroidIntentGeneratorStrings::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorStringsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidIntentGeneratorStrings(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidIntentGeneratorStrings> CreateAndroidIntentGeneratorStrings(flatbuffers::FlatBufferBuilder &_fbb, const AndroidIntentGeneratorStringsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidIntentGeneratorStringsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _language_tag = _o->language_tag.empty() ? 0 : _fbb.CreateSharedString(_o->language_tag);
  auto _title = _o->title.empty() ? 0 : _fbb.CreateSharedString(_o->title);
  auto _description = _o->description.empty() ? 0 : _fbb.CreateSharedString(_o->description);
  return libtextclassifier3::CreateAndroidIntentGeneratorStrings(
      _fbb,
      _language_tag,
      _title,
      _description);
}

inline AndroidSimpleIntentGeneratorExtraT *AndroidSimpleIntentGeneratorExtra::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorExtraT> _o = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorExtraT>(new AndroidSimpleIntentGeneratorExtraT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidSimpleIntentGeneratorExtra::UnPackTo(AndroidSimpleIntentGeneratorExtraT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = type(); _o->type = _e; }
  { auto _e = string_(); if (_e) _o->string_ = _e->str(); }
  { auto _e = bool_(); _o->bool_ = _e; }
  { auto _e = int32_(); _o->int32_ = _e; }
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> AndroidSimpleIntentGeneratorExtra::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorExtraT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidSimpleIntentGeneratorExtra(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorExtra> CreateAndroidSimpleIntentGeneratorExtra(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorExtraT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidSimpleIntentGeneratorExtraT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateSharedString(_o->name);
  auto _type = _o->type;
  auto _string_ = _o->string_.empty() ? 0 : _fbb.CreateSharedString(_o->string_);
  auto _bool_ = _o->bool_;
  auto _int32_ = _o->int32_;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorExtra(
      _fbb,
      _name,
      _type,
      _string_,
      _bool_,
      _int32_);
}

inline AndroidSimpleIntentGeneratorConditionT *AndroidSimpleIntentGeneratorCondition::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorConditionT> _o = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorConditionT>(new AndroidSimpleIntentGeneratorConditionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidSimpleIntentGeneratorCondition::UnPackTo(AndroidSimpleIntentGeneratorConditionT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = string_(); if (_e) _o->string_ = _e->str(); }
  { auto _e = int32_(); _o->int32_ = _e; }
  { auto _e = int64_(); _o->int64_ = _e; }
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> AndroidSimpleIntentGeneratorCondition::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorConditionT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidSimpleIntentGeneratorCondition(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorCondition> CreateAndroidSimpleIntentGeneratorCondition(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorConditionT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidSimpleIntentGeneratorConditionT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _string_ = _o->string_.empty() ? 0 : _fbb.CreateSharedString(_o->string_);
  auto _int32_ = _o->int32_;
  auto _int64_ = _o->int64_;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorCondition(
      _fbb,
      _type,
      _string_,
      _int32_,
      _int64_);
}

inline AndroidSimpleIntentGeneratorOptionsT *AndroidSimpleIntentGeneratorOptions::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorOptionsT> _o = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorOptionsT>(new AndroidSimpleIntentGeneratorOptionsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AndroidSimpleIntentGeneratorOptions::UnPackTo(AndroidSimpleIntentGeneratorOptionsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = action(); if (_e) _o->action = _e->str(); }
  { auto _e = data(); if (_e) _o->data = _e->str(); }
  { auto _e = type(); if (_e) _o->type = _e->str(); }
  { auto _e = extra(); if (_e) { _o->extra.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->extra[_i] = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorExtraT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = variable(); if (_e) { _o->variable.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->variable[_i] = static_cast<libtextclassifier3::AndroidSimpleIntentGeneratorVariableType>(_e->Get(_i)); } } }
  { auto _e = condition(); if (_e) { _o->condition.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->condition[_i] = std::unique_ptr<libtextclassifier3::AndroidSimpleIntentGeneratorConditionT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> AndroidSimpleIntentGeneratorOptions::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorOptionsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAndroidSimpleIntentGeneratorOptions(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AndroidSimpleIntentGeneratorOptions> CreateAndroidSimpleIntentGeneratorOptions(flatbuffers::FlatBufferBuilder &_fbb, const AndroidSimpleIntentGeneratorOptionsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AndroidSimpleIntentGeneratorOptionsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _action = _o->action.empty() ? 0 : _fbb.CreateSharedString(_o->action);
  auto _data = _o->data.empty() ? 0 : _fbb.CreateSharedString(_o->data);
  auto _type = _o->type.empty() ? 0 : _fbb.CreateSharedString(_o->type);
  auto _extra = _o->extra.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorExtra>> (_o->extra.size(), [](size_t i, _VectorArgs *__va) { return CreateAndroidSimpleIntentGeneratorExtra(*__va->__fbb, __va->__o->extra[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _variable = _o->variable.size() ? _fbb.CreateVectorScalarCast<int32_t>(flatbuffers::data(_o->variable), _o->variable.size()) : 0;
  auto _condition = _o->condition.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::AndroidSimpleIntentGeneratorCondition>> (_o->condition.size(), [](size_t i, _VectorArgs *__va) { return CreateAndroidSimpleIntentGeneratorCondition(*__va->__fbb, __va->__o->condition[i].get(), __va->__rehasher); }, &_va ) : 0;
  return libtextclassifier3::CreateAndroidSimpleIntentGeneratorOptions(
      _fbb,
      _action,
      _data,
      _type,
      _extra,
      _variable,
      _condition);
}

namespace IntentFactoryModel_ {

inline IntentGeneratorT *IntentGenerator::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::IntentFactoryModel_::IntentGeneratorT> _o = std::unique_ptr<libtextclassifier3::IntentFactoryModel_::IntentGeneratorT>(new IntentGeneratorT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void IntentGenerator::UnPackTo(IntentGeneratorT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); if (_e) _o->type = _e->str(); }
  { auto _e = lua_template_generator(); if (_e) { _o->lua_template_generator.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->lua_template_generator[_i] = _e->Get(_i); } } }
  { auto _e = compressed_lua_template_generator(); if (_e) _o->compressed_lua_template_generator = std::unique_ptr<libtextclassifier3::CompressedBufferT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<IntentGenerator> IntentGenerator::Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntentGeneratorT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateIntentGenerator(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<IntentGenerator> CreateIntentGenerator(flatbuffers::FlatBufferBuilder &_fbb, const IntentGeneratorT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const IntentGeneratorT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type.empty() ? 0 : _fbb.CreateSharedString(_o->type);
  auto _lua_template_generator = _o->lua_template_generator.size() ? _fbb.CreateVector(_o->lua_template_generator) : 0;
  auto _compressed_lua_template_generator = _o->compressed_lua_template_generator ? CreateCompressedBuffer(_fbb, _o->compressed_lua_template_generator.get(), _rehasher) : 0;
  return libtextclassifier3::IntentFactoryModel_::CreateIntentGenerator(
      _fbb,
      _type,
      _lua_template_generator,
      _compressed_lua_template_generator);
}

}  // namespace IntentFactoryModel_

inline IntentFactoryModelT *IntentFactoryModel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::IntentFactoryModelT> _o = std::unique_ptr<libtextclassifier3::IntentFactoryModelT>(new IntentFactoryModelT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void IntentFactoryModel::UnPackTo(IntentFactoryModelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = generator(); if (_e) { _o->generator.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->generator[_i] = std::unique_ptr<libtextclassifier3::IntentFactoryModel_::IntentGeneratorT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = precompile_generators(); _o->precompile_generators = _e; }
}

inline flatbuffers::Offset<IntentFactoryModel> IntentFactoryModel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const IntentFactoryModelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateIntentFactoryModel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<IntentFactoryModel> CreateIntentFactoryModel(flatbuffers::FlatBufferBuilder &_fbb, const IntentFactoryModelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const IntentFactoryModelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _generator = _o->generator.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::IntentFactoryModel_::IntentGenerator>> (_o->generator.size(), [](size_t i, _VectorArgs *__va) { return CreateIntentGenerator(*__va->__fbb, __va->__o->generator[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _precompile_generators = _o->precompile_generators;
  return libtextclassifier3::CreateIntentFactoryModel(
      _fbb,
      _generator,
      _precompile_generators);
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_INTENTCONFIG_LIBTEXTCLASSIFIER3_H_
