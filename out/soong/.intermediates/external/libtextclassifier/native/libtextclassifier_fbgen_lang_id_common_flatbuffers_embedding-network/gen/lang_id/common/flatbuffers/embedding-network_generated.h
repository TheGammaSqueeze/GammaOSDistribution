// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EMBEDDINGNETWORK_LIBTEXTCLASSIFIER3_SAFT_FBS_H_
#define FLATBUFFERS_GENERATED_EMBEDDINGNETWORK_LIBTEXTCLASSIFIER3_SAFT_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {
namespace saft_fbs {

struct Matrix;
struct MatrixBuilder;
struct MatrixT;

struct InputChunk;
struct InputChunkBuilder;
struct InputChunkT;

struct NeuralLayer;
struct NeuralLayerBuilder;
struct NeuralLayerT;

struct EmbeddingNetwork;
struct EmbeddingNetworkBuilder;
struct EmbeddingNetworkT;

enum QuantizationType {
  QuantizationType_NONE = 0,
  QuantizationType_UINT8 = 1,
  QuantizationType_UINT4 = 2,
  QuantizationType_FLOAT16 = 3,
  QuantizationType_MIN = QuantizationType_NONE,
  QuantizationType_MAX = QuantizationType_FLOAT16
};

inline const QuantizationType (&EnumValuesQuantizationType())[4] {
  static const QuantizationType values[] = {
    QuantizationType_NONE,
    QuantizationType_UINT8,
    QuantizationType_UINT4,
    QuantizationType_FLOAT16
  };
  return values;
}

inline const char * const *EnumNamesQuantizationType() {
  static const char * const names[5] = {
    "NONE",
    "UINT8",
    "UINT4",
    "FLOAT16",
    nullptr
  };
  return names;
}

inline const char *EnumNameQuantizationType(QuantizationType e) {
  if (flatbuffers::IsOutRange(e, QuantizationType_NONE, QuantizationType_FLOAT16)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesQuantizationType()[index];
}

struct MatrixT : public flatbuffers::NativeTable {
  typedef Matrix TableType;
  int32_t rows;
  int32_t cols;
  libtextclassifier3::saft_fbs::QuantizationType quantization_type;
  std::vector<float> values;
  std::vector<uint8_t> quantized_values;
  std::vector<uint16_t> scales;
  MatrixT()
      : rows(0),
        cols(0),
        quantization_type(libtextclassifier3::saft_fbs::QuantizationType_NONE) {
  }
};

struct Matrix FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MatrixT NativeTableType;
  typedef MatrixBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROWS = 4,
    VT_COLS = 6,
    VT_QUANTIZATION_TYPE = 8,
    VT_VALUES = 10,
    VT_QUANTIZED_VALUES = 12,
    VT_SCALES = 14
  };
  int32_t rows() const {
    return GetField<int32_t>(VT_ROWS, 0);
  }
  int32_t cols() const {
    return GetField<int32_t>(VT_COLS, 0);
  }
  libtextclassifier3::saft_fbs::QuantizationType quantization_type() const {
    return static_cast<libtextclassifier3::saft_fbs::QuantizationType>(GetField<int8_t>(VT_QUANTIZATION_TYPE, 0));
  }
  const flatbuffers::Vector<float> *values() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUES);
  }
  const flatbuffers::Vector<uint8_t> *quantized_values() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_QUANTIZED_VALUES);
  }
  const flatbuffers::Vector<uint16_t> *scales() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_SCALES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROWS) &&
           VerifyField<int32_t>(verifier, VT_COLS) &&
           VerifyField<int8_t>(verifier, VT_QUANTIZATION_TYPE) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyOffset(verifier, VT_QUANTIZED_VALUES) &&
           verifier.VerifyVector(quantized_values()) &&
           VerifyOffset(verifier, VT_SCALES) &&
           verifier.VerifyVector(scales()) &&
           verifier.EndTable();
  }
  MatrixT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MatrixT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Matrix> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MatrixT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MatrixBuilder {
  typedef Matrix Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) {
    fbb_.AddElement<int32_t>(Matrix::VT_ROWS, rows, 0);
  }
  void add_cols(int32_t cols) {
    fbb_.AddElement<int32_t>(Matrix::VT_COLS, cols, 0);
  }
  void add_quantization_type(libtextclassifier3::saft_fbs::QuantizationType quantization_type) {
    fbb_.AddElement<int8_t>(Matrix::VT_QUANTIZATION_TYPE, static_cast<int8_t>(quantization_type), 0);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<float>> values) {
    fbb_.AddOffset(Matrix::VT_VALUES, values);
  }
  void add_quantized_values(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> quantized_values) {
    fbb_.AddOffset(Matrix::VT_QUANTIZED_VALUES, quantized_values);
  }
  void add_scales(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> scales) {
    fbb_.AddOffset(Matrix::VT_SCALES, scales);
  }
  explicit MatrixBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MatrixBuilder &operator=(const MatrixBuilder &);
  flatbuffers::Offset<Matrix> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Matrix>(end);
    return o;
  }
};

inline flatbuffers::Offset<Matrix> CreateMatrix(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    libtextclassifier3::saft_fbs::QuantizationType quantization_type = libtextclassifier3::saft_fbs::QuantizationType_NONE,
    flatbuffers::Offset<flatbuffers::Vector<float>> values = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> quantized_values = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> scales = 0) {
  MatrixBuilder builder_(_fbb);
  builder_.add_scales(scales);
  builder_.add_quantized_values(quantized_values);
  builder_.add_values(values);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  builder_.add_quantization_type(quantization_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Matrix> CreateMatrixDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rows = 0,
    int32_t cols = 0,
    libtextclassifier3::saft_fbs::QuantizationType quantization_type = libtextclassifier3::saft_fbs::QuantizationType_NONE,
    const std::vector<float> *values = nullptr,
    const std::vector<uint8_t> *quantized_values = nullptr,
    const std::vector<uint16_t> *scales = nullptr) {
  auto values__ = values ? _fbb.CreateVector<float>(*values) : 0;
  auto quantized_values__ = quantized_values ? _fbb.CreateVector<uint8_t>(*quantized_values) : 0;
  auto scales__ = scales ? _fbb.CreateVector<uint16_t>(*scales) : 0;
  return libtextclassifier3::saft_fbs::CreateMatrix(
      _fbb,
      rows,
      cols,
      quantization_type,
      values__,
      quantized_values__,
      scales__);
}

flatbuffers::Offset<Matrix> CreateMatrix(flatbuffers::FlatBufferBuilder &_fbb, const MatrixT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct InputChunkT : public flatbuffers::NativeTable {
  typedef InputChunk TableType;
  std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT> embedding;
  int32_t num_features;
  InputChunkT()
      : num_features(0) {
  }
};

struct InputChunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputChunkT NativeTableType;
  typedef InputChunkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EMBEDDING = 4,
    VT_NUM_FEATURES = 6
  };
  const libtextclassifier3::saft_fbs::Matrix *embedding() const {
    return GetPointer<const libtextclassifier3::saft_fbs::Matrix *>(VT_EMBEDDING);
  }
  int32_t num_features() const {
    return GetField<int32_t>(VT_NUM_FEATURES, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EMBEDDING) &&
           verifier.VerifyTable(embedding()) &&
           VerifyField<int32_t>(verifier, VT_NUM_FEATURES) &&
           verifier.EndTable();
  }
  InputChunkT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InputChunkT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<InputChunk> Pack(flatbuffers::FlatBufferBuilder &_fbb, const InputChunkT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InputChunkBuilder {
  typedef InputChunk Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_embedding(flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> embedding) {
    fbb_.AddOffset(InputChunk::VT_EMBEDDING, embedding);
  }
  void add_num_features(int32_t num_features) {
    fbb_.AddElement<int32_t>(InputChunk::VT_NUM_FEATURES, num_features, 0);
  }
  explicit InputChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InputChunkBuilder &operator=(const InputChunkBuilder &);
  flatbuffers::Offset<InputChunk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InputChunk>(end);
    return o;
  }
};

inline flatbuffers::Offset<InputChunk> CreateInputChunk(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> embedding = 0,
    int32_t num_features = 0) {
  InputChunkBuilder builder_(_fbb);
  builder_.add_num_features(num_features);
  builder_.add_embedding(embedding);
  return builder_.Finish();
}

flatbuffers::Offset<InputChunk> CreateInputChunk(flatbuffers::FlatBufferBuilder &_fbb, const InputChunkT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NeuralLayerT : public flatbuffers::NativeTable {
  typedef NeuralLayer TableType;
  std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT> weights;
  std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT> bias;
  NeuralLayerT() {
  }
};

struct NeuralLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NeuralLayerT NativeTableType;
  typedef NeuralLayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WEIGHTS = 4,
    VT_BIAS = 6
  };
  const libtextclassifier3::saft_fbs::Matrix *weights() const {
    return GetPointer<const libtextclassifier3::saft_fbs::Matrix *>(VT_WEIGHTS);
  }
  const libtextclassifier3::saft_fbs::Matrix *bias() const {
    return GetPointer<const libtextclassifier3::saft_fbs::Matrix *>(VT_BIAS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WEIGHTS) &&
           verifier.VerifyTable(weights()) &&
           VerifyOffset(verifier, VT_BIAS) &&
           verifier.VerifyTable(bias()) &&
           verifier.EndTable();
  }
  NeuralLayerT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NeuralLayerT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NeuralLayer> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NeuralLayerT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NeuralLayerBuilder {
  typedef NeuralLayer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_weights(flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> weights) {
    fbb_.AddOffset(NeuralLayer::VT_WEIGHTS, weights);
  }
  void add_bias(flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> bias) {
    fbb_.AddOffset(NeuralLayer::VT_BIAS, bias);
  }
  explicit NeuralLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NeuralLayerBuilder &operator=(const NeuralLayerBuilder &);
  flatbuffers::Offset<NeuralLayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NeuralLayer>(end);
    return o;
  }
};

inline flatbuffers::Offset<NeuralLayer> CreateNeuralLayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> weights = 0,
    flatbuffers::Offset<libtextclassifier3::saft_fbs::Matrix> bias = 0) {
  NeuralLayerBuilder builder_(_fbb);
  builder_.add_bias(bias);
  builder_.add_weights(weights);
  return builder_.Finish();
}

flatbuffers::Offset<NeuralLayer> CreateNeuralLayer(flatbuffers::FlatBufferBuilder &_fbb, const NeuralLayerT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct EmbeddingNetworkT : public flatbuffers::NativeTable {
  typedef EmbeddingNetwork TableType;
  std::vector<std::unique_ptr<libtextclassifier3::saft_fbs::InputChunkT>> input_chunks;
  std::vector<std::unique_ptr<libtextclassifier3::saft_fbs::NeuralLayerT>> layers;
  EmbeddingNetworkT() {
  }
};

struct EmbeddingNetwork FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EmbeddingNetworkT NativeTableType;
  typedef EmbeddingNetworkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT_CHUNKS = 4,
    VT_LAYERS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>> *input_chunks() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>> *>(VT_INPUT_CHUNKS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>> *layers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>> *>(VT_LAYERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT_CHUNKS) &&
           verifier.VerifyVector(input_chunks()) &&
           verifier.VerifyVectorOfTables(input_chunks()) &&
           VerifyOffset(verifier, VT_LAYERS) &&
           verifier.VerifyVector(layers()) &&
           verifier.VerifyVectorOfTables(layers()) &&
           verifier.EndTable();
  }
  EmbeddingNetworkT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(EmbeddingNetworkT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<EmbeddingNetwork> Pack(flatbuffers::FlatBufferBuilder &_fbb, const EmbeddingNetworkT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct EmbeddingNetworkBuilder {
  typedef EmbeddingNetwork Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_input_chunks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>>> input_chunks) {
    fbb_.AddOffset(EmbeddingNetwork::VT_INPUT_CHUNKS, input_chunks);
  }
  void add_layers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>>> layers) {
    fbb_.AddOffset(EmbeddingNetwork::VT_LAYERS, layers);
  }
  explicit EmbeddingNetworkBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EmbeddingNetworkBuilder &operator=(const EmbeddingNetworkBuilder &);
  flatbuffers::Offset<EmbeddingNetwork> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EmbeddingNetwork>(end);
    return o;
  }
};

inline flatbuffers::Offset<EmbeddingNetwork> CreateEmbeddingNetwork(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>>> input_chunks = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>>> layers = 0) {
  EmbeddingNetworkBuilder builder_(_fbb);
  builder_.add_layers(layers);
  builder_.add_input_chunks(input_chunks);
  return builder_.Finish();
}

inline flatbuffers::Offset<EmbeddingNetwork> CreateEmbeddingNetworkDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>> *input_chunks = nullptr,
    const std::vector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>> *layers = nullptr) {
  auto input_chunks__ = input_chunks ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>>(*input_chunks) : 0;
  auto layers__ = layers ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>>(*layers) : 0;
  return libtextclassifier3::saft_fbs::CreateEmbeddingNetwork(
      _fbb,
      input_chunks__,
      layers__);
}

flatbuffers::Offset<EmbeddingNetwork> CreateEmbeddingNetwork(flatbuffers::FlatBufferBuilder &_fbb, const EmbeddingNetworkT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MatrixT *Matrix::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT> _o = std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT>(new MatrixT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Matrix::UnPackTo(MatrixT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = rows(); _o->rows = _e; }
  { auto _e = cols(); _o->cols = _e; }
  { auto _e = quantization_type(); _o->quantization_type = _e; }
  { auto _e = values(); if (_e) { _o->values.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->values[_i] = _e->Get(_i); } } }
  { auto _e = quantized_values(); if (_e) { _o->quantized_values.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->quantized_values[_i] = _e->Get(_i); } } }
  { auto _e = scales(); if (_e) { _o->scales.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->scales[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<Matrix> Matrix::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MatrixT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMatrix(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Matrix> CreateMatrix(flatbuffers::FlatBufferBuilder &_fbb, const MatrixT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MatrixT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _rows = _o->rows;
  auto _cols = _o->cols;
  auto _quantization_type = _o->quantization_type;
  auto _values = _o->values.size() ? _fbb.CreateVector(_o->values) : 0;
  auto _quantized_values = _o->quantized_values.size() ? _fbb.CreateVector(_o->quantized_values) : 0;
  auto _scales = _o->scales.size() ? _fbb.CreateVector(_o->scales) : 0;
  return libtextclassifier3::saft_fbs::CreateMatrix(
      _fbb,
      _rows,
      _cols,
      _quantization_type,
      _values,
      _quantized_values,
      _scales);
}

inline InputChunkT *InputChunk::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::saft_fbs::InputChunkT> _o = std::unique_ptr<libtextclassifier3::saft_fbs::InputChunkT>(new InputChunkT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InputChunk::UnPackTo(InputChunkT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = embedding(); if (_e) _o->embedding = std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT>(_e->UnPack(_resolver)); }
  { auto _e = num_features(); _o->num_features = _e; }
}

inline flatbuffers::Offset<InputChunk> InputChunk::Pack(flatbuffers::FlatBufferBuilder &_fbb, const InputChunkT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInputChunk(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<InputChunk> CreateInputChunk(flatbuffers::FlatBufferBuilder &_fbb, const InputChunkT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const InputChunkT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _embedding = _o->embedding ? CreateMatrix(_fbb, _o->embedding.get(), _rehasher) : 0;
  auto _num_features = _o->num_features;
  return libtextclassifier3::saft_fbs::CreateInputChunk(
      _fbb,
      _embedding,
      _num_features);
}

inline NeuralLayerT *NeuralLayer::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::saft_fbs::NeuralLayerT> _o = std::unique_ptr<libtextclassifier3::saft_fbs::NeuralLayerT>(new NeuralLayerT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NeuralLayer::UnPackTo(NeuralLayerT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = weights(); if (_e) _o->weights = std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT>(_e->UnPack(_resolver)); }
  { auto _e = bias(); if (_e) _o->bias = std::unique_ptr<libtextclassifier3::saft_fbs::MatrixT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<NeuralLayer> NeuralLayer::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NeuralLayerT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNeuralLayer(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NeuralLayer> CreateNeuralLayer(flatbuffers::FlatBufferBuilder &_fbb, const NeuralLayerT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NeuralLayerT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _weights = _o->weights ? CreateMatrix(_fbb, _o->weights.get(), _rehasher) : 0;
  auto _bias = _o->bias ? CreateMatrix(_fbb, _o->bias.get(), _rehasher) : 0;
  return libtextclassifier3::saft_fbs::CreateNeuralLayer(
      _fbb,
      _weights,
      _bias);
}

inline EmbeddingNetworkT *EmbeddingNetwork::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT> _o = std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT>(new EmbeddingNetworkT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void EmbeddingNetwork::UnPackTo(EmbeddingNetworkT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = input_chunks(); if (_e) { _o->input_chunks.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->input_chunks[_i] = std::unique_ptr<libtextclassifier3::saft_fbs::InputChunkT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = layers(); if (_e) { _o->layers.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->layers[_i] = std::unique_ptr<libtextclassifier3::saft_fbs::NeuralLayerT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<EmbeddingNetwork> EmbeddingNetwork::Pack(flatbuffers::FlatBufferBuilder &_fbb, const EmbeddingNetworkT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEmbeddingNetwork(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<EmbeddingNetwork> CreateEmbeddingNetwork(flatbuffers::FlatBufferBuilder &_fbb, const EmbeddingNetworkT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const EmbeddingNetworkT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _input_chunks = _o->input_chunks.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::saft_fbs::InputChunk>> (_o->input_chunks.size(), [](size_t i, _VectorArgs *__va) { return CreateInputChunk(*__va->__fbb, __va->__o->input_chunks[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _layers = _o->layers.size() ? _fbb.CreateVector<flatbuffers::Offset<libtextclassifier3::saft_fbs::NeuralLayer>> (_o->layers.size(), [](size_t i, _VectorArgs *__va) { return CreateNeuralLayer(*__va->__fbb, __va->__o->layers[i].get(), __va->__rehasher); }, &_va ) : 0;
  return libtextclassifier3::saft_fbs::CreateEmbeddingNetwork(
      _fbb,
      _input_chunks,
      _layers);
}

inline const libtextclassifier3::saft_fbs::EmbeddingNetwork *GetEmbeddingNetwork(const void *buf) {
  return flatbuffers::GetRoot<libtextclassifier3::saft_fbs::EmbeddingNetwork>(buf);
}

inline const libtextclassifier3::saft_fbs::EmbeddingNetwork *GetSizePrefixedEmbeddingNetwork(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<libtextclassifier3::saft_fbs::EmbeddingNetwork>(buf);
}

inline const char *EmbeddingNetworkIdentifier() {
  return "NS00";
}

inline bool EmbeddingNetworkBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, EmbeddingNetworkIdentifier());
}

inline bool VerifyEmbeddingNetworkBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<libtextclassifier3::saft_fbs::EmbeddingNetwork>(EmbeddingNetworkIdentifier());
}

inline bool VerifySizePrefixedEmbeddingNetworkBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<libtextclassifier3::saft_fbs::EmbeddingNetwork>(EmbeddingNetworkIdentifier());
}

inline void FinishEmbeddingNetworkBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtextclassifier3::saft_fbs::EmbeddingNetwork> root) {
  fbb.Finish(root, EmbeddingNetworkIdentifier());
}

inline void FinishSizePrefixedEmbeddingNetworkBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtextclassifier3::saft_fbs::EmbeddingNetwork> root) {
  fbb.FinishSizePrefixed(root, EmbeddingNetworkIdentifier());
}

inline std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT> UnPackEmbeddingNetwork(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT>(GetEmbeddingNetwork(buf)->UnPack(res));
}

inline std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT> UnPackSizePrefixedEmbeddingNetwork(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<libtextclassifier3::saft_fbs::EmbeddingNetworkT>(GetSizePrefixedEmbeddingNetwork(buf)->UnPack(res));
}

}  // namespace saft_fbs
}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_EMBEDDINGNETWORK_LIBTEXTCLASSIFIER3_SAFT_FBS_H_
