// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LANGUAGETAG_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_LANGUAGETAG_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {

struct LanguageTag;
struct LanguageTagBuilder;
struct LanguageTagT;

struct LanguageTagT : public flatbuffers::NativeTable {
  typedef LanguageTag TableType;
  std::string language;
  std::string script;
  std::string region;
  LanguageTagT() {
  }
};

struct LanguageTag FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LanguageTagT NativeTableType;
  typedef LanguageTagBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANGUAGE = 4,
    VT_SCRIPT = 6,
    VT_REGION = 8
  };
  const flatbuffers::String *language() const {
    return GetPointer<const flatbuffers::String *>(VT_LANGUAGE);
  }
  const flatbuffers::String *script() const {
    return GetPointer<const flatbuffers::String *>(VT_SCRIPT);
  }
  const flatbuffers::String *region() const {
    return GetPointer<const flatbuffers::String *>(VT_REGION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANGUAGE) &&
           verifier.VerifyString(language()) &&
           VerifyOffset(verifier, VT_SCRIPT) &&
           verifier.VerifyString(script()) &&
           VerifyOffset(verifier, VT_REGION) &&
           verifier.VerifyString(region()) &&
           verifier.EndTable();
  }
  LanguageTagT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LanguageTagT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LanguageTag> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LanguageTagT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LanguageTagBuilder {
  typedef LanguageTag Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_language(flatbuffers::Offset<flatbuffers::String> language) {
    fbb_.AddOffset(LanguageTag::VT_LANGUAGE, language);
  }
  void add_script(flatbuffers::Offset<flatbuffers::String> script) {
    fbb_.AddOffset(LanguageTag::VT_SCRIPT, script);
  }
  void add_region(flatbuffers::Offset<flatbuffers::String> region) {
    fbb_.AddOffset(LanguageTag::VT_REGION, region);
  }
  explicit LanguageTagBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LanguageTagBuilder &operator=(const LanguageTagBuilder &);
  flatbuffers::Offset<LanguageTag> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LanguageTag>(end);
    return o;
  }
};

inline flatbuffers::Offset<LanguageTag> CreateLanguageTag(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> language = 0,
    flatbuffers::Offset<flatbuffers::String> script = 0,
    flatbuffers::Offset<flatbuffers::String> region = 0) {
  LanguageTagBuilder builder_(_fbb);
  builder_.add_region(region);
  builder_.add_script(script);
  builder_.add_language(language);
  return builder_.Finish();
}

inline flatbuffers::Offset<LanguageTag> CreateLanguageTagDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *language = nullptr,
    const char *script = nullptr,
    const char *region = nullptr) {
  auto language__ = language ? _fbb.CreateSharedString(language) : 0;
  auto script__ = script ? _fbb.CreateSharedString(script) : 0;
  auto region__ = region ? _fbb.CreateSharedString(region) : 0;
  return libtextclassifier3::CreateLanguageTag(
      _fbb,
      language__,
      script__,
      region__);
}

flatbuffers::Offset<LanguageTag> CreateLanguageTag(flatbuffers::FlatBufferBuilder &_fbb, const LanguageTagT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline LanguageTagT *LanguageTag::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::LanguageTagT> _o = std::unique_ptr<libtextclassifier3::LanguageTagT>(new LanguageTagT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void LanguageTag::UnPackTo(LanguageTagT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = language(); if (_e) _o->language = _e->str(); }
  { auto _e = script(); if (_e) _o->script = _e->str(); }
  { auto _e = region(); if (_e) _o->region = _e->str(); }
}

inline flatbuffers::Offset<LanguageTag> LanguageTag::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LanguageTagT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLanguageTag(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LanguageTag> CreateLanguageTag(flatbuffers::FlatBufferBuilder &_fbb, const LanguageTagT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LanguageTagT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _language = _o->language.empty() ? 0 : _fbb.CreateSharedString(_o->language);
  auto _script = _o->script.empty() ? 0 : _fbb.CreateSharedString(_o->script);
  auto _region = _o->region.empty() ? 0 : _fbb.CreateSharedString(_o->region);
  return libtextclassifier3::CreateLanguageTag(
      _fbb,
      _language,
      _script,
      _region);
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_LANGUAGETAG_LIBTEXTCLASSIFIER3_H_
