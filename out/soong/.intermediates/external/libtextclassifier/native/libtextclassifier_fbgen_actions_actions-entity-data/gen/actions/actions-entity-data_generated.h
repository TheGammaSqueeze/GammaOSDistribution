// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTIONSENTITYDATA_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_ACTIONSENTITYDATA_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {

struct ActionsEntityData;
struct ActionsEntityDataBuilder;
struct ActionsEntityDataT;

struct ActionsEntityDataT : public flatbuffers::NativeTable {
  typedef ActionsEntityData TableType;
  std::string text;
  ActionsEntityDataT() {
  }
};

struct ActionsEntityData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ActionsEntityDataT NativeTableType;
  typedef ActionsEntityDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
  ActionsEntityDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ActionsEntityDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ActionsEntityData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ActionsEntityDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ActionsEntityDataBuilder {
  typedef ActionsEntityData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(ActionsEntityData::VT_TEXT, text);
  }
  explicit ActionsEntityDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ActionsEntityDataBuilder &operator=(const ActionsEntityDataBuilder &);
  flatbuffers::Offset<ActionsEntityData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ActionsEntityData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ActionsEntityData> CreateActionsEntityData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  ActionsEntityDataBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<ActionsEntityData> CreateActionsEntityDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateSharedString(text) : 0;
  return libtextclassifier3::CreateActionsEntityData(
      _fbb,
      text__);
}

flatbuffers::Offset<ActionsEntityData> CreateActionsEntityData(flatbuffers::FlatBufferBuilder &_fbb, const ActionsEntityDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ActionsEntityDataT *ActionsEntityData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::ActionsEntityDataT> _o = std::unique_ptr<libtextclassifier3::ActionsEntityDataT>(new ActionsEntityDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ActionsEntityData::UnPackTo(ActionsEntityDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); }
}

inline flatbuffers::Offset<ActionsEntityData> ActionsEntityData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ActionsEntityDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateActionsEntityData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ActionsEntityData> CreateActionsEntityData(flatbuffers::FlatBufferBuilder &_fbb, const ActionsEntityDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ActionsEntityDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _text = _o->text.empty() ? 0 : _fbb.CreateSharedString(_o->text);
  return libtextclassifier3::CreateActionsEntityData(
      _fbb,
      _text);
}

inline const libtextclassifier3::ActionsEntityData *GetActionsEntityData(const void *buf) {
  return flatbuffers::GetRoot<libtextclassifier3::ActionsEntityData>(buf);
}

inline const libtextclassifier3::ActionsEntityData *GetSizePrefixedActionsEntityData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<libtextclassifier3::ActionsEntityData>(buf);
}

inline bool VerifyActionsEntityDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<libtextclassifier3::ActionsEntityData>(nullptr);
}

inline bool VerifySizePrefixedActionsEntityDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<libtextclassifier3::ActionsEntityData>(nullptr);
}

inline void FinishActionsEntityDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtextclassifier3::ActionsEntityData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActionsEntityDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<libtextclassifier3::ActionsEntityData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<libtextclassifier3::ActionsEntityDataT> UnPackActionsEntityData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<libtextclassifier3::ActionsEntityDataT>(GetActionsEntityData(buf)->UnPack(res));
}

inline std::unique_ptr<libtextclassifier3::ActionsEntityDataT> UnPackSizePrefixedActionsEntityData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<libtextclassifier3::ActionsEntityDataT>(GetSizePrefixedActionsEntityData(buf)->UnPack(res));
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_ACTIONSENTITYDATA_LIBTEXTCLASSIFIER3_H_
