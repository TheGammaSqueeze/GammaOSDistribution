// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXPERIMENTAL_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_EXPERIMENTAL_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {

struct ExperimentalModel;
struct ExperimentalModelBuilder;
struct ExperimentalModelT;

struct ExperimentalModelT : public flatbuffers::NativeTable {
  typedef ExperimentalModel TableType;
  ExperimentalModelT() {
  }
};

struct ExperimentalModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExperimentalModelT NativeTableType;
  typedef ExperimentalModelBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  ExperimentalModelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ExperimentalModelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ExperimentalModel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExperimentalModelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ExperimentalModelBuilder {
  typedef ExperimentalModel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ExperimentalModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ExperimentalModelBuilder &operator=(const ExperimentalModelBuilder &);
  flatbuffers::Offset<ExperimentalModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExperimentalModel>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExperimentalModel> CreateExperimentalModel(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ExperimentalModelBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<ExperimentalModel> CreateExperimentalModel(flatbuffers::FlatBufferBuilder &_fbb, const ExperimentalModelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ExperimentalModelT *ExperimentalModel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::ExperimentalModelT> _o = std::unique_ptr<libtextclassifier3::ExperimentalModelT>(new ExperimentalModelT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ExperimentalModel::UnPackTo(ExperimentalModelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<ExperimentalModel> ExperimentalModel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExperimentalModelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateExperimentalModel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ExperimentalModel> CreateExperimentalModel(flatbuffers::FlatBufferBuilder &_fbb, const ExperimentalModelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ExperimentalModelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return libtextclassifier3::CreateExperimentalModel(
      _fbb);
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_EXPERIMENTAL_LIBTEXTCLASSIFIER3_H_
