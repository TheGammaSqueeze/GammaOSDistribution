// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BUFFER_LIBTEXTCLASSIFIER3_H_
#define FLATBUFFERS_GENERATED_BUFFER_LIBTEXTCLASSIFIER3_H_

#include "flatbuffers/flatbuffers.h"

namespace libtextclassifier3 {

struct CompressedBuffer;
struct CompressedBufferBuilder;
struct CompressedBufferT;

struct CompressedBufferT : public flatbuffers::NativeTable {
  typedef CompressedBuffer TableType;
  std::vector<uint8_t> buffer;
  int32_t uncompressed_size;
  CompressedBufferT()
      : uncompressed_size(0) {
  }
};

struct CompressedBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CompressedBufferT NativeTableType;
  typedef CompressedBufferBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFER = 4,
    VT_UNCOMPRESSED_SIZE = 6
  };
  const flatbuffers::Vector<uint8_t> *buffer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BUFFER);
  }
  int32_t uncompressed_size() const {
    return GetField<int32_t>(VT_UNCOMPRESSED_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           VerifyField<int32_t>(verifier, VT_UNCOMPRESSED_SIZE) &&
           verifier.EndTable();
  }
  CompressedBufferT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CompressedBufferT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CompressedBuffer> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CompressedBufferT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CompressedBufferBuilder {
  typedef CompressedBuffer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer) {
    fbb_.AddOffset(CompressedBuffer::VT_BUFFER, buffer);
  }
  void add_uncompressed_size(int32_t uncompressed_size) {
    fbb_.AddElement<int32_t>(CompressedBuffer::VT_UNCOMPRESSED_SIZE, uncompressed_size, 0);
  }
  explicit CompressedBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CompressedBufferBuilder &operator=(const CompressedBufferBuilder &);
  flatbuffers::Offset<CompressedBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CompressedBuffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<CompressedBuffer> CreateCompressedBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer = 0,
    int32_t uncompressed_size = 0) {
  CompressedBufferBuilder builder_(_fbb);
  builder_.add_uncompressed_size(uncompressed_size);
  builder_.add_buffer(buffer);
  return builder_.Finish();
}

inline flatbuffers::Offset<CompressedBuffer> CreateCompressedBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *buffer = nullptr,
    int32_t uncompressed_size = 0) {
  auto buffer__ = buffer ? _fbb.CreateVector<uint8_t>(*buffer) : 0;
  return libtextclassifier3::CreateCompressedBuffer(
      _fbb,
      buffer__,
      uncompressed_size);
}

flatbuffers::Offset<CompressedBuffer> CreateCompressedBuffer(flatbuffers::FlatBufferBuilder &_fbb, const CompressedBufferT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CompressedBufferT *CompressedBuffer::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<libtextclassifier3::CompressedBufferT> _o = std::unique_ptr<libtextclassifier3::CompressedBufferT>(new CompressedBufferT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CompressedBuffer::UnPackTo(CompressedBufferT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = buffer(); if (_e) { _o->buffer.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->buffer[_i] = _e->Get(_i); } } }
  { auto _e = uncompressed_size(); _o->uncompressed_size = _e; }
}

inline flatbuffers::Offset<CompressedBuffer> CompressedBuffer::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CompressedBufferT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCompressedBuffer(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CompressedBuffer> CreateCompressedBuffer(flatbuffers::FlatBufferBuilder &_fbb, const CompressedBufferT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CompressedBufferT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _buffer = _o->buffer.size() ? _fbb.CreateVector(_o->buffer) : 0;
  auto _uncompressed_size = _o->uncompressed_size;
  return libtextclassifier3::CreateCompressedBuffer(
      _fbb,
      _buffer,
      _uncompressed_size);
}

}  // namespace libtextclassifier3

#endif  // FLATBUFFERS_GENERATED_BUFFER_LIBTEXTCLASSIFIER3_H_
