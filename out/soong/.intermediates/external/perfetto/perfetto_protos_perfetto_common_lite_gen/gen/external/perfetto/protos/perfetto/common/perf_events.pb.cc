// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/perf_events.proto

#include "protos/perfetto/common/perf_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
namespace perfetto {
namespace protos {
class PerfEvents_TimebaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEvents_Timebase> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  int counter_;
  const ::perfetto::protos::PerfEvents_Tracepoint* tracepoint_;
} _PerfEvents_Timebase_default_instance_;
class PerfEvents_TracepointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEvents_Tracepoint> _instance;
} _PerfEvents_Tracepoint_default_instance_;
class PerfEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEvents> _instance;
} _PerfEvents_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PerfEvents_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEvents_default_instance_;
    new (ptr) ::perfetto::protos::PerfEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEvents_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfEvents_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEvents_Timebase_default_instance_;
    new (ptr) ::perfetto::protos::PerfEvents_Timebase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEvents_Timebase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto}, {
      &scc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEvents_Tracepoint_default_instance_;
    new (ptr) ::perfetto::protos::PerfEvents_Tracepoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEvents_Tracepoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto}, {}};

namespace perfetto {
namespace protos {
bool PerfEvents_Counter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEvents_Counter_strings[5] = {};

static const char PerfEvents_Counter_names[] =
  "HW_CPU_CYCLES"
  "HW_INSTRUCTIONS"
  "SW_CPU_CLOCK"
  "SW_PAGE_FAULTS"
  "UNKNOWN_COUNTER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEvents_Counter_entries[] = {
  { {PerfEvents_Counter_names + 0, 13}, 10 },
  { {PerfEvents_Counter_names + 13, 15}, 11 },
  { {PerfEvents_Counter_names + 28, 12}, 1 },
  { {PerfEvents_Counter_names + 40, 14}, 2 },
  { {PerfEvents_Counter_names + 54, 15}, 0 },
};

static const int PerfEvents_Counter_entries_by_number[] = {
  4, // 0 -> UNKNOWN_COUNTER
  2, // 1 -> SW_CPU_CLOCK
  3, // 2 -> SW_PAGE_FAULTS
  0, // 10 -> HW_CPU_CYCLES
  1, // 11 -> HW_INSTRUCTIONS
};

const std::string& PerfEvents_Counter_Name(
    PerfEvents_Counter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEvents_Counter_entries,
          PerfEvents_Counter_entries_by_number,
          5, PerfEvents_Counter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEvents_Counter_entries,
      PerfEvents_Counter_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEvents_Counter_strings[idx].get();
}
bool PerfEvents_Counter_Parse(
    const std::string& name, PerfEvents_Counter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEvents_Counter_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<PerfEvents_Counter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerfEvents_Counter PerfEvents::UNKNOWN_COUNTER;
constexpr PerfEvents_Counter PerfEvents::SW_CPU_CLOCK;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS;
constexpr PerfEvents_Counter PerfEvents::HW_CPU_CYCLES;
constexpr PerfEvents_Counter PerfEvents::HW_INSTRUCTIONS;
constexpr PerfEvents_Counter PerfEvents::Counter_MIN;
constexpr PerfEvents_Counter PerfEvents::Counter_MAX;
constexpr int PerfEvents::Counter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PerfEvents_Timebase::InitAsDefaultInstance() {
}
class PerfEvents_Timebase::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Timebase>()._has_bits_);
  static const ::perfetto::protos::PerfEvents_Tracepoint& tracepoint(const PerfEvents_Timebase* msg);
};

const ::perfetto::protos::PerfEvents_Tracepoint&
PerfEvents_Timebase::_Internal::tracepoint(const PerfEvents_Timebase* msg) {
  return *msg->event_.tracepoint_;
}
void PerfEvents_Timebase::set_allocated_tracepoint(::perfetto::protos::PerfEvents_Tracepoint* tracepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (tracepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracepoint, submessage_arena);
    }
    set_has_tracepoint();
    event_.tracepoint_ = tracepoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Timebase.tracepoint)
}
PerfEvents_Timebase::PerfEvents_Timebase()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEvents.Timebase)
}
PerfEvents_Timebase::PerfEvents_Timebase(const PerfEvents_Timebase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_interval();
  switch (from.interval_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  clear_has_event();
  switch (from.event_case()) {
    case kCounter: {
      set_counter(from.counter());
      break;
    }
    case kTracepoint: {
      mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(from.tracepoint());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Timebase)
}

void PerfEvents_Timebase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base);
  clear_has_interval();
  clear_has_event();
}

PerfEvents_Timebase::~PerfEvents_Timebase() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Timebase)
  SharedDtor();
}

void PerfEvents_Timebase::SharedDtor() {
  if (has_interval()) {
    clear_interval();
  }
  if (has_event()) {
    clear_event();
  }
}

void PerfEvents_Timebase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEvents_Timebase& PerfEvents_Timebase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base);
  return *internal_default_instance();
}


void PerfEvents_Timebase::clear_interval() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (interval_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case kPeriod: {
      // No need to clear
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERVAL_NOT_SET;
}

void PerfEvents_Timebase::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (event_case()) {
    case kCounter: {
      // No need to clear
      break;
    }
    case kTracepoint: {
      delete event_.tracepoint_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EVENT_NOT_SET;
}


void PerfEvents_Timebase::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Timebase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_interval();
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEvents_Timebase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_period(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tracepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.Counter counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEvents_Counter_IsValid(val))) {
            set_counter(static_cast<::perfetto::protos::PerfEvents_Counter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEvents_Timebase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEvents.Timebase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 period = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_interval();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_.period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 frequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_interval();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_.frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tracepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEvents.Counter counter = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::PerfEvents_Counter_IsValid(value)) {
            set_counter(static_cast< ::perfetto::protos::PerfEvents_Counter >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEvents.Timebase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEvents.Timebase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEvents_Timebase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEvents.Timebase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (interval_case()) {
    case kPeriod:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->period(), output);
      break;
    case kFrequency:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->frequency(), output);
      break;
    default: ;
  }
  switch (event_case()) {
    case kTracepoint:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::tracepoint(this), output);
      break;
    case kCounter:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        4, this->counter(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEvents.Timebase)
}

size_t PerfEvents_Timebase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Timebase)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (interval_case()) {
    // optional uint64 frequency = 2;
    case kFrequency: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->frequency());
      break;
    }
    // optional uint64 period = 1;
    case kPeriod: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (event_case()) {
    // optional .perfetto.protos.PerfEvents.Counter counter = 4;
    case kCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->counter());
      break;
    }
    // optional .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
    case kTracepoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.tracepoint_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents_Timebase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEvents_Timebase*>(
      &from));
}

void PerfEvents_Timebase::MergeFrom(const PerfEvents_Timebase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Timebase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.interval_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (from.event_case()) {
    case kCounter: {
      set_counter(from.counter());
      break;
    }
    case kTracepoint: {
      mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(from.tracepoint());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void PerfEvents_Timebase::CopyFrom(const PerfEvents_Timebase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Timebase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Timebase::IsInitialized() const {
  return true;
}

void PerfEvents_Timebase::InternalSwap(PerfEvents_Timebase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interval_, other->interval_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string PerfEvents_Timebase::GetTypeName() const {
  return "perfetto.protos.PerfEvents.Timebase";
}


// ===================================================================

void PerfEvents_Tracepoint::InitAsDefaultInstance() {
}
class PerfEvents_Tracepoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Tracepoint>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfEvents_Tracepoint::PerfEvents_Tracepoint()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEvents.Tracepoint)
}
PerfEvents_Tracepoint::PerfEvents_Tracepoint(const PerfEvents_Tracepoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Tracepoint)
}

void PerfEvents_Tracepoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PerfEvents_Tracepoint::~PerfEvents_Tracepoint() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Tracepoint)
  SharedDtor();
}

void PerfEvents_Tracepoint::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerfEvents_Tracepoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEvents_Tracepoint& PerfEvents_Tracepoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEvents_Tracepoint_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base);
  return *internal_default_instance();
}


void PerfEvents_Tracepoint::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Tracepoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filter_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEvents_Tracepoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_filter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEvents_Tracepoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEvents.Tracepoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEvents.Tracepoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEvents.Tracepoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEvents_Tracepoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEvents.Tracepoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEvents.Tracepoint)
}

size_t PerfEvents_Tracepoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Tracepoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string filter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents_Tracepoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEvents_Tracepoint*>(
      &from));
}

void PerfEvents_Tracepoint::MergeFrom(const PerfEvents_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Tracepoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
  }
}

void PerfEvents_Tracepoint::CopyFrom(const PerfEvents_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Tracepoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Tracepoint::IsInitialized() const {
  return true;
}

void PerfEvents_Tracepoint::InternalSwap(PerfEvents_Tracepoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PerfEvents_Tracepoint::GetTypeName() const {
  return "perfetto.protos.PerfEvents.Tracepoint";
}


// ===================================================================

void PerfEvents::InitAsDefaultInstance() {
}
class PerfEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents>()._has_bits_);
};

PerfEvents::PerfEvents()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEvents)
}
PerfEvents::PerfEvents(const PerfEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents)
}

void PerfEvents::SharedCtor() {
}

PerfEvents::~PerfEvents() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents)
  SharedDtor();
}

void PerfEvents::SharedDtor() {
}

void PerfEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEvents& PerfEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEvents_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base);
  return *internal_default_instance();
}


void PerfEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEvents)
}

size_t PerfEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEvents*>(
      &from));
}

void PerfEvents::MergeFrom(const PerfEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PerfEvents::CopyFrom(const PerfEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents::IsInitialized() const {
  return true;
}

void PerfEvents::InternalSwap(PerfEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PerfEvents::GetTypeName() const {
  return "perfetto.protos.PerfEvents";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Timebase* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Timebase >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEvents_Timebase >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Tracepoint* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Tracepoint >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEvents_Tracepoint >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEvents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
