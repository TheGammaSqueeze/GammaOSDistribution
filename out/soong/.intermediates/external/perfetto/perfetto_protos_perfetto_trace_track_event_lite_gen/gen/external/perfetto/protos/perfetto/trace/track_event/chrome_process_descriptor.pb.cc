// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_process_descriptor.proto

#include "protos/perfetto/trace/track_event/chrome_process_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class ChromeProcessDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeProcessDescriptor> _instance;
} _ChromeProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeProcessDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::ChromeProcessDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::ChromeProcessDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ChromeProcessDescriptor_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeProcessDescriptor_ProcessType_strings[40] = {};

static const char ChromeProcessDescriptor_ProcessType_names[] =
  "PROCESS_BROWSER"
  "PROCESS_GPU"
  "PROCESS_PPAPI_BROKER"
  "PROCESS_PPAPI_PLUGIN"
  "PROCESS_RENDERER"
  "PROCESS_SANDBOX_HELPER"
  "PROCESS_SERVICE_AUDIO"
  "PROCESS_SERVICE_CDM"
  "PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER"
  "PROCESS_SERVICE_CROS_LOCALSEARCH"
  "PROCESS_SERVICE_DATA_DECODER"
  "PROCESS_SERVICE_FILEPATCHER"
  "PROCESS_SERVICE_FILEUTIL"
  "PROCESS_SERVICE_IME"
  "PROCESS_SERVICE_LANGUAGEDETECTION"
  "PROCESS_SERVICE_MEDIAPARSER"
  "PROCESS_SERVICE_MIRRORING"
  "PROCESS_SERVICE_NETWORK"
  "PROCESS_SERVICE_PAINTPREVIEW"
  "PROCESS_SERVICE_PRINTCOMPOSITOR"
  "PROCESS_SERVICE_PRINTING"
  "PROCESS_SERVICE_PROFILEIMPORT"
  "PROCESS_SERVICE_PROXY_RESOLVER"
  "PROCESS_SERVICE_QRCODEGENERATOR"
  "PROCESS_SERVICE_QUARANTINE"
  "PROCESS_SERVICE_READICON"
  "PROCESS_SERVICE_RECORDING"
  "PROCESS_SERVICE_SHAPEDETECTION"
  "PROCESS_SERVICE_SHARING"
  "PROCESS_SERVICE_SPEECHRECOGNITION"
  "PROCESS_SERVICE_STORAGE"
  "PROCESS_SERVICE_TRACING"
  "PROCESS_SERVICE_TTS"
  "PROCESS_SERVICE_UNZIPPER"
  "PROCESS_SERVICE_UTIL_WIN"
  "PROCESS_SERVICE_VIDEO_CAPTURE"
  "PROCESS_SERVICE_XRDEVICE"
  "PROCESS_UNSPECIFIED"
  "PROCESS_UTILITY"
  "PROCESS_ZYGOTE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeProcessDescriptor_ProcessType_entries[] = {
  { {ChromeProcessDescriptor_ProcessType_names + 0, 15}, 1 },
  { {ChromeProcessDescriptor_ProcessType_names + 15, 11}, 6 },
  { {ChromeProcessDescriptor_ProcessType_names + 26, 20}, 8 },
  { {ChromeProcessDescriptor_ProcessType_names + 46, 20}, 7 },
  { {ChromeProcessDescriptor_ProcessType_names + 66, 16}, 2 },
  { {ChromeProcessDescriptor_ProcessType_names + 82, 22}, 5 },
  { {ChromeProcessDescriptor_ProcessType_names + 104, 21}, 12 },
  { {ChromeProcessDescriptor_ProcessType_names + 125, 19}, 16 },
  { {ChromeProcessDescriptor_ProcessType_names + 144, 44}, 25 },
  { {ChromeProcessDescriptor_ProcessType_names + 188, 32}, 24 },
  { {ChromeProcessDescriptor_ProcessType_names + 220, 28}, 13 },
  { {ChromeProcessDescriptor_ProcessType_names + 248, 27}, 20 },
  { {ChromeProcessDescriptor_ProcessType_names + 275, 24}, 26 },
  { {ChromeProcessDescriptor_ProcessType_names + 299, 19}, 37 },
  { {ChromeProcessDescriptor_ProcessType_names + 318, 33}, 32 },
  { {ChromeProcessDescriptor_ProcessType_names + 351, 27}, 34 },
  { {ChromeProcessDescriptor_ProcessType_names + 378, 25}, 19 },
  { {ChromeProcessDescriptor_ProcessType_names + 403, 23}, 9 },
  { {ChromeProcessDescriptor_ProcessType_names + 426, 28}, 28 },
  { {ChromeProcessDescriptor_ProcessType_names + 454, 31}, 27 },
  { {ChromeProcessDescriptor_ProcessType_names + 485, 24}, 22 },
  { {ChromeProcessDescriptor_ProcessType_names + 509, 29}, 36 },
  { {ChromeProcessDescriptor_ProcessType_names + 538, 30}, 15 },
  { {ChromeProcessDescriptor_ProcessType_names + 568, 31}, 35 },
  { {ChromeProcessDescriptor_ProcessType_names + 599, 26}, 23 },
  { {ChromeProcessDescriptor_ProcessType_names + 625, 24}, 31 },
  { {ChromeProcessDescriptor_ProcessType_names + 649, 25}, 38 },
  { {ChromeProcessDescriptor_ProcessType_names + 674, 30}, 39 },
  { {ChromeProcessDescriptor_ProcessType_names + 704, 23}, 33 },
  { {ChromeProcessDescriptor_ProcessType_names + 727, 33}, 29 },
  { {ChromeProcessDescriptor_ProcessType_names + 760, 23}, 11 },
  { {ChromeProcessDescriptor_ProcessType_names + 783, 23}, 10 },
  { {ChromeProcessDescriptor_ProcessType_names + 806, 19}, 21 },
  { {ChromeProcessDescriptor_ProcessType_names + 825, 24}, 18 },
  { {ChromeProcessDescriptor_ProcessType_names + 849, 24}, 14 },
  { {ChromeProcessDescriptor_ProcessType_names + 873, 29}, 17 },
  { {ChromeProcessDescriptor_ProcessType_names + 902, 24}, 30 },
  { {ChromeProcessDescriptor_ProcessType_names + 926, 19}, 0 },
  { {ChromeProcessDescriptor_ProcessType_names + 945, 15}, 3 },
  { {ChromeProcessDescriptor_ProcessType_names + 960, 14}, 4 },
};

static const int ChromeProcessDescriptor_ProcessType_entries_by_number[] = {
  37, // 0 -> PROCESS_UNSPECIFIED
  0, // 1 -> PROCESS_BROWSER
  4, // 2 -> PROCESS_RENDERER
  38, // 3 -> PROCESS_UTILITY
  39, // 4 -> PROCESS_ZYGOTE
  5, // 5 -> PROCESS_SANDBOX_HELPER
  1, // 6 -> PROCESS_GPU
  3, // 7 -> PROCESS_PPAPI_PLUGIN
  2, // 8 -> PROCESS_PPAPI_BROKER
  17, // 9 -> PROCESS_SERVICE_NETWORK
  31, // 10 -> PROCESS_SERVICE_TRACING
  30, // 11 -> PROCESS_SERVICE_STORAGE
  6, // 12 -> PROCESS_SERVICE_AUDIO
  10, // 13 -> PROCESS_SERVICE_DATA_DECODER
  34, // 14 -> PROCESS_SERVICE_UTIL_WIN
  22, // 15 -> PROCESS_SERVICE_PROXY_RESOLVER
  7, // 16 -> PROCESS_SERVICE_CDM
  35, // 17 -> PROCESS_SERVICE_VIDEO_CAPTURE
  33, // 18 -> PROCESS_SERVICE_UNZIPPER
  16, // 19 -> PROCESS_SERVICE_MIRRORING
  11, // 20 -> PROCESS_SERVICE_FILEPATCHER
  32, // 21 -> PROCESS_SERVICE_TTS
  20, // 22 -> PROCESS_SERVICE_PRINTING
  24, // 23 -> PROCESS_SERVICE_QUARANTINE
  9, // 24 -> PROCESS_SERVICE_CROS_LOCALSEARCH
  8, // 25 -> PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER
  12, // 26 -> PROCESS_SERVICE_FILEUTIL
  19, // 27 -> PROCESS_SERVICE_PRINTCOMPOSITOR
  18, // 28 -> PROCESS_SERVICE_PAINTPREVIEW
  29, // 29 -> PROCESS_SERVICE_SPEECHRECOGNITION
  36, // 30 -> PROCESS_SERVICE_XRDEVICE
  25, // 31 -> PROCESS_SERVICE_READICON
  14, // 32 -> PROCESS_SERVICE_LANGUAGEDETECTION
  28, // 33 -> PROCESS_SERVICE_SHARING
  15, // 34 -> PROCESS_SERVICE_MEDIAPARSER
  23, // 35 -> PROCESS_SERVICE_QRCODEGENERATOR
  21, // 36 -> PROCESS_SERVICE_PROFILEIMPORT
  13, // 37 -> PROCESS_SERVICE_IME
  26, // 38 -> PROCESS_SERVICE_RECORDING
  27, // 39 -> PROCESS_SERVICE_SHAPEDETECTION
};

const std::string& ChromeProcessDescriptor_ProcessType_Name(
    ChromeProcessDescriptor_ProcessType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeProcessDescriptor_ProcessType_entries,
          ChromeProcessDescriptor_ProcessType_entries_by_number,
          40, ChromeProcessDescriptor_ProcessType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeProcessDescriptor_ProcessType_entries,
      ChromeProcessDescriptor_ProcessType_entries_by_number,
      40, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeProcessDescriptor_ProcessType_strings[idx].get();
}
bool ChromeProcessDescriptor_ProcessType_Parse(
    const std::string& name, ChromeProcessDescriptor_ProcessType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeProcessDescriptor_ProcessType_entries, 40, name, &int_value);
  if (success) {
    *value = static_cast<ChromeProcessDescriptor_ProcessType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UNSPECIFIED;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_BROWSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_RENDERER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UTILITY;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_ZYGOTE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SANDBOX_HELPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_GPU;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_PLUGIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_BROKER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_NETWORK;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TRACING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_STORAGE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_AUDIO;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_DATA_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UTIL_WIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROXY_RESOLVER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CDM;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_VIDEO_CAPTURE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UNZIPPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MIRRORING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEPATCHER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TTS;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QUARANTINE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_LOCALSEARCH;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEUTIL;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTCOMPOSITOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PAINTPREVIEW;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SPEECHRECOGNITION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_XRDEVICE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_READICON;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_LANGUAGEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHARING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MEDIAPARSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QRCODEGENERATOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROFILEIMPORT;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_IME;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_RECORDING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHAPEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MAX;
constexpr int ChromeProcessDescriptor::ProcessType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChromeProcessDescriptor::InitAsDefaultInstance() {
}
class ChromeProcessDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeProcessDescriptor>()._has_bits_);
  static void set_has_process_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_app_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeProcessDescriptor::ChromeProcessDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.ChromeProcessDescriptor)
}
ChromeProcessDescriptor::ChromeProcessDescriptor(const ChromeProcessDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_app_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_app_package_name()) {
    host_app_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_app_package_name_);
  }
  ::memcpy(&process_type_, &from.process_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&legacy_sort_index_) -
    reinterpret_cast<char*>(&process_type_)) + sizeof(legacy_sort_index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeProcessDescriptor)
}

void ChromeProcessDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto.base);
  host_app_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&process_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&legacy_sort_index_) -
      reinterpret_cast<char*>(&process_type_)) + sizeof(legacy_sort_index_));
}

ChromeProcessDescriptor::~ChromeProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeProcessDescriptor)
  SharedDtor();
}

void ChromeProcessDescriptor::SharedDtor() {
  host_app_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeProcessDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeProcessDescriptor& ChromeProcessDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeProcessDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void ChromeProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeProcessDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_app_package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&process_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&legacy_sort_index_) -
        reinterpret_cast<char*>(&process_type_)) + sizeof(legacy_sort_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeProcessDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeProcessDescriptor_ProcessType_IsValid(val))) {
            set_process_type(static_cast<::perfetto::protos::ChromeProcessDescriptor_ProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 process_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_process_priority(&has_bits);
          process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 legacy_sort_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_legacy_sort_index(&has_bits);
          legacy_sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string host_app_package_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_host_app_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 crash_trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crash_trace_id(&has_bits);
          crash_trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeProcessDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.ChromeProcessDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::perfetto::protos::ChromeProcessDescriptor_ProcessType_IsValid(value)) {
            set_process_type(static_cast< ::perfetto::protos::ChromeProcessDescriptor_ProcessType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 process_priority = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_process_priority(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 legacy_sort_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_legacy_sort_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacy_sort_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host_app_package_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host_app_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 crash_trace_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_crash_trace_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crash_trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.ChromeProcessDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.ChromeProcessDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeProcessDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.ChromeProcessDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->process_type(), output);
  }

  // optional int32 process_priority = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->process_priority(), output);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->legacy_sort_index(), output);
  }

  // optional string host_app_package_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host_app_package_name(), output);
  }

  // optional uint64 crash_trace_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->crash_trace_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.ChromeProcessDescriptor)
}

size_t ChromeProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeProcessDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string host_app_package_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->host_app_package_name());
    }

    // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process_type());
    }

    // optional int32 process_priority = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->process_priority());
    }

    // optional uint64 crash_trace_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->crash_trace_id());
    }

    // optional int32 legacy_sort_index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->legacy_sort_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeProcessDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeProcessDescriptor*>(
      &from));
}

void ChromeProcessDescriptor::MergeFrom(const ChromeProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeProcessDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_app_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_app_package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      process_type_ = from.process_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      process_priority_ = from.process_priority_;
    }
    if (cached_has_bits & 0x00000008u) {
      crash_trace_id_ = from.crash_trace_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_sort_index_ = from.legacy_sort_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeProcessDescriptor::CopyFrom(const ChromeProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeProcessDescriptor::IsInitialized() const {
  return true;
}

void ChromeProcessDescriptor::InternalSwap(ChromeProcessDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_app_package_name_.Swap(&other->host_app_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(process_type_, other->process_type_);
  swap(process_priority_, other->process_priority_);
  swap(crash_trace_id_, other->crash_trace_id_);
  swap(legacy_sort_index_, other->legacy_sort_index_);
}

std::string ChromeProcessDescriptor::GetTypeName() const {
  return "perfetto.protos.ChromeProcessDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeProcessDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeProcessDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::ChromeProcessDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
