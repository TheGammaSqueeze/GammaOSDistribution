// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#include "protos/perfetto/trace/ftrace/sde.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class SdeTracingMarkWriteFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeTracingMarkWriteFtraceEvent> _instance;
} _SdeTracingMarkWriteFtraceEvent_default_instance_;
class SdeSdeEvtlogFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeSdeEvtlogFtraceEvent> _instance;
} _SdeSdeEvtlogFtraceEvent_default_instance_;
class SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeSdePerfCalcCrtcFtraceEvent> _instance;
} _SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
class SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeSdePerfCrtcUpdateFtraceEvent> _instance;
} _SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
class SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeSdePerfSetQosLutsFtraceEvent> _instance;
} _SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
class SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdeSdePerfUpdateBusFtraceEvent> _instance;
} _SdeSdePerfUpdateBusFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_SdeSdeEvtlogFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeSdeEvtlogFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeSdeEvtlogFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeSdeEvtlogFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeSdeEvtlogFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeSdeEvtlogFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

static void InitDefaultsscc_info_SdeSdePerfCalcCrtcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeSdePerfCalcCrtcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeSdePerfCalcCrtcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

static void InitDefaultsscc_info_SdeSdePerfCrtcUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeSdePerfCrtcUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeSdePerfCrtcUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

static void InitDefaultsscc_info_SdeSdePerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeSdePerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeSdePerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

static void InitDefaultsscc_info_SdeSdePerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeSdePerfUpdateBusFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeSdePerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeSdePerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

static void InitDefaultsscc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_SdeTracingMarkWriteFtraceEvent_default_instance_;
    new (ptr) ::perfetto::protos::SdeTracingMarkWriteFtraceEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void SdeTracingMarkWriteFtraceEvent::InitAsDefaultInstance() {
}
class SdeTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeTracingMarkWriteFtraceEvent>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trace_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}
SdeTracingMarkWriteFtraceEvent::SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_name()) {
    trace_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_begin_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}

void SdeTracingMarkWriteFtraceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  trace_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_begin_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
}

SdeTracingMarkWriteFtraceEvent::~SdeTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  SharedDtor();
}

void SdeTracingMarkWriteFtraceEvent::SharedDtor() {
  trace_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdeTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeTracingMarkWriteFtraceEvent& SdeTracingMarkWriteFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeTracingMarkWriteFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trace_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_begin_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(trace_begin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trace_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_trace_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trace_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trace_type(&has_bits);
          trace_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trace_begin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_trace_begin(&has_bits);
          trace_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeTracingMarkWriteFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trace_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_trace_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trace_begin = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_trace_begin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trace_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeTracingMarkWriteFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string trace_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace_name(), output);
  }

  // optional uint32 trace_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->trace_type(), output);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  // optional uint32 trace_begin = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->trace_begin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
}

size_t SdeTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->trace_name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional uint32 trace_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trace_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional uint32 trace_begin = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->trace_begin());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeTracingMarkWriteFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeTracingMarkWriteFtraceEvent*>(
      &from));
}

void SdeTracingMarkWriteFtraceEvent::MergeFrom(const SdeTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trace_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_type_ = from.trace_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      trace_begin_ = from.trace_begin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeTracingMarkWriteFtraceEvent::CopyFrom(const SdeTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void SdeTracingMarkWriteFtraceEvent::InternalSwap(SdeTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_name_.Swap(&other->trace_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(trace_type_, other->trace_type_);
  swap(value_, other->value_);
  swap(trace_begin_, other->trace_begin_);
}

std::string SdeTracingMarkWriteFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeTracingMarkWriteFtraceEvent";
}


// ===================================================================

void SdeSdeEvtlogFtraceEvent::InitAsDefaultInstance() {
}
class SdeSdeEvtlogFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdeEvtlogFtraceEvent>()._has_bits_);
  static void set_has_evtlog_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}
SdeSdeEvtlogFtraceEvent::SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  evtlog_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_evtlog_tag()) {
    evtlog_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.evtlog_tag_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_id_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}

void SdeSdeEvtlogFtraceEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SdeSdeEvtlogFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  evtlog_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_id_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
}

SdeSdeEvtlogFtraceEvent::~SdeSdeEvtlogFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  SharedDtor();
}

void SdeSdeEvtlogFtraceEvent::SharedDtor() {
  evtlog_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdeSdeEvtlogFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeSdeEvtlogFtraceEvent& SdeSdeEvtlogFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeSdeEvtlogFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeSdeEvtlogFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    evtlog_tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_id_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tag_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeSdeEvtlogFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string evtlog_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_evtlog_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tag_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tag_id(&has_bits);
          tag_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeSdeEvtlogFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string evtlog_tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_evtlog_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tag_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_tag_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeSdeEvtlogFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string evtlog_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->evtlog_tag(), output);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  // optional uint32 tag_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->tag_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeSdeEvtlogFtraceEvent)
}

size_t SdeSdeEvtlogFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string evtlog_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->evtlog_tag());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional uint32 tag_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tag_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdeEvtlogFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeSdeEvtlogFtraceEvent*>(
      &from));
}

void SdeSdeEvtlogFtraceEvent::MergeFrom(const SdeSdeEvtlogFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      evtlog_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.evtlog_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag_id_ = from.tag_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeSdeEvtlogFtraceEvent::CopyFrom(const SdeSdeEvtlogFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdeEvtlogFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdeEvtlogFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdeEvtlogFtraceEvent::InternalSwap(SdeSdeEvtlogFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  evtlog_tag_.Swap(&other->evtlog_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(tag_id_, other->tag_id_);
}

std::string SdeSdeEvtlogFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdeEvtlogFtraceEvent";
}


// ===================================================================

void SdeSdePerfCalcCrtcFtraceEvent::InitAsDefaultInstance() {
}
class SdeSdePerfCalcCrtcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCalcCrtcFtraceEvent>()._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}
SdeSdePerfCalcCrtcFtraceEvent::SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bw_ctl_ebi_, &from.bw_ctl_ebi_,
    static_cast<size_t>(reinterpret_cast<char*>(&ib_mnoc_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}

void SdeSdePerfCalcCrtcFtraceEvent::SharedCtor() {
  ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ib_mnoc_) -
      reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
}

SdeSdePerfCalcCrtcFtraceEvent::~SdeSdePerfCalcCrtcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  SharedDtor();
}

void SdeSdePerfCalcCrtcFtraceEvent::SharedDtor() {
}

void SdeSdePerfCalcCrtcFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeSdePerfCalcCrtcFtraceEvent& SdeSdePerfCalcCrtcFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeSdePerfCalcCrtcFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeSdePerfCalcCrtcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ib_mnoc_) -
        reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(ib_mnoc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeSdePerfCalcCrtcFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ib_ebi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ib_ebi(&has_bits);
          ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ib_llcc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ib_llcc(&has_bits);
          ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ib_mnoc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ib_mnoc(&has_bits);
          ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeSdePerfCalcCrtcFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_bw_ctl_ebi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_ebi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bw_ctl_llcc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bw_ctl_llcc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_llcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bw_ctl_mnoc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bw_ctl_mnoc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_mnoc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 core_clk_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_core_clk_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_clk_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crtc = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_crtc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ib_ebi = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_ib_ebi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ib_ebi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ib_llcc = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_ib_llcc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ib_llcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ib_mnoc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ib_mnoc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ib_mnoc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeSdePerfCalcCrtcFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->bw_ctl_ebi(), output);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->bw_ctl_llcc(), output);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->bw_ctl_mnoc(), output);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->core_clk_rate(), output);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->crtc(), output);
  }

  // optional uint64 ib_ebi = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->ib_ebi(), output);
  }

  // optional uint64 ib_llcc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->ib_llcc(), output);
  }

  // optional uint64 ib_mnoc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->ib_mnoc(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
}

size_t SdeSdePerfCalcCrtcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->crtc());
    }

    // optional uint64 ib_ebi = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ib_ebi());
    }

    // optional uint64 ib_llcc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ib_llcc());
    }

    // optional uint64 ib_mnoc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ib_mnoc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfCalcCrtcFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeSdePerfCalcCrtcFtraceEvent*>(
      &from));
}

void SdeSdePerfCalcCrtcFtraceEvent::MergeFrom(const SdeSdePerfCalcCrtcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bw_ctl_ebi_ = from.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      bw_ctl_llcc_ = from.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      bw_ctl_mnoc_ = from.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      core_clk_rate_ = from.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      crtc_ = from.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      ib_ebi_ = from.ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      ib_llcc_ = from.ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      ib_mnoc_ = from.ib_mnoc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeSdePerfCalcCrtcFtraceEvent::CopyFrom(const SdeSdePerfCalcCrtcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCalcCrtcFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCalcCrtcFtraceEvent::InternalSwap(SdeSdePerfCalcCrtcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bw_ctl_ebi_, other->bw_ctl_ebi_);
  swap(bw_ctl_llcc_, other->bw_ctl_llcc_);
  swap(bw_ctl_mnoc_, other->bw_ctl_mnoc_);
  swap(core_clk_rate_, other->core_clk_rate_);
  swap(crtc_, other->crtc_);
  swap(ib_ebi_, other->ib_ebi_);
  swap(ib_llcc_, other->ib_llcc_);
  swap(ib_mnoc_, other->ib_mnoc_);
}

std::string SdeSdePerfCalcCrtcFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent";
}


// ===================================================================

void SdeSdePerfCrtcUpdateFtraceEvent::InitAsDefaultInstance() {
}
class SdeSdePerfCrtcUpdateFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfCrtcUpdateFtraceEvent>()._has_bits_);
  static void set_has_bw_ctl_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bw_ctl_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bw_ctl_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_core_clk_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crtc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_per_pipe_ib_ebi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_per_pipe_ib_llcc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_per_pipe_ib_mnoc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stop_req(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_update_bus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_update_clk(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}
SdeSdePerfCrtcUpdateFtraceEvent::SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bw_ctl_ebi_, &from.bw_ctl_ebi_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_clk_) -
    reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(update_clk_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}

void SdeSdePerfCrtcUpdateFtraceEvent::SharedCtor() {
  ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_clk_) -
      reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(update_clk_));
}

SdeSdePerfCrtcUpdateFtraceEvent::~SdeSdePerfCrtcUpdateFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  SharedDtor();
}

void SdeSdePerfCrtcUpdateFtraceEvent::SharedDtor() {
}

void SdeSdePerfCrtcUpdateFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeSdePerfCrtcUpdateFtraceEvent& SdeSdePerfCrtcUpdateFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeSdePerfCrtcUpdateFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeSdePerfCrtcUpdateFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bw_ctl_ebi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&params_) -
        reinterpret_cast<char*>(&bw_ctl_ebi_)) + sizeof(params_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&stop_req_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_clk_) -
        reinterpret_cast<char*>(&stop_req_)) + sizeof(update_clk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeSdePerfCrtcUpdateFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bw_ctl_ebi(&has_bits);
          bw_ctl_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_llcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bw_ctl_llcc(&has_bits);
          bw_ctl_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bw_ctl_mnoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bw_ctl_mnoc(&has_bits);
          bw_ctl_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 core_clk_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_core_clk_rate(&has_bits);
          core_clk_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crtc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crtc(&has_bits);
          crtc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_params(&has_bits);
          params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_ebi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_per_pipe_ib_ebi(&has_bits);
          per_pipe_ib_ebi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_llcc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_per_pipe_ib_llcc(&has_bits);
          per_pipe_ib_llcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 per_pipe_ib_mnoc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_per_pipe_ib_mnoc(&has_bits);
          per_pipe_ib_mnoc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stop_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_stop_req(&has_bits);
          stop_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 update_bus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_update_bus(&has_bits);
          update_bus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 update_clk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_update_clk(&has_bits);
          update_clk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeSdePerfCrtcUpdateFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bw_ctl_ebi = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_bw_ctl_ebi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_ebi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bw_ctl_llcc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bw_ctl_llcc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_llcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bw_ctl_mnoc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_bw_ctl_mnoc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bw_ctl_mnoc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 core_clk_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_core_clk_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &core_clk_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crtc = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_crtc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crtc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 params = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_params(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &params_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 per_pipe_ib_ebi = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_per_pipe_ib_ebi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &per_pipe_ib_ebi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 per_pipe_ib_llcc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_per_pipe_ib_llcc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &per_pipe_ib_llcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 per_pipe_ib_mnoc = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_per_pipe_ib_mnoc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &per_pipe_ib_mnoc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stop_req = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_stop_req(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_bus = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_update_bus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_bus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_clk = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_update_clk(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_clk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeSdePerfCrtcUpdateFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 bw_ctl_ebi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->bw_ctl_ebi(), output);
  }

  // optional uint64 bw_ctl_llcc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->bw_ctl_llcc(), output);
  }

  // optional uint64 bw_ctl_mnoc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->bw_ctl_mnoc(), output);
  }

  // optional uint32 core_clk_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->core_clk_rate(), output);
  }

  // optional uint32 crtc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->crtc(), output);
  }

  // optional int32 params = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->params(), output);
  }

  // optional uint64 per_pipe_ib_ebi = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->per_pipe_ib_ebi(), output);
  }

  // optional uint64 per_pipe_ib_llcc = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->per_pipe_ib_llcc(), output);
  }

  // optional uint64 per_pipe_ib_mnoc = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->per_pipe_ib_mnoc(), output);
  }

  // optional uint32 stop_req = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->stop_req(), output);
  }

  // optional uint32 update_bus = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->update_bus(), output);
  }

  // optional uint32 update_clk = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->update_clk(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
}

size_t SdeSdePerfCrtcUpdateFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bw_ctl_ebi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_ebi());
    }

    // optional uint64 bw_ctl_llcc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_llcc());
    }

    // optional uint64 bw_ctl_mnoc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bw_ctl_mnoc());
    }

    // optional uint32 core_clk_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->core_clk_rate());
    }

    // optional uint32 crtc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->crtc());
    }

    // optional uint64 per_pipe_ib_ebi = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->per_pipe_ib_ebi());
    }

    // optional uint64 per_pipe_ib_llcc = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->per_pipe_ib_llcc());
    }

    // optional int32 params = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->params());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 stop_req = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stop_req());
    }

    // optional uint64 per_pipe_ib_mnoc = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->per_pipe_ib_mnoc());
    }

    // optional uint32 update_bus = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->update_bus());
    }

    // optional uint32 update_clk = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->update_clk());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfCrtcUpdateFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeSdePerfCrtcUpdateFtraceEvent*>(
      &from));
}

void SdeSdePerfCrtcUpdateFtraceEvent::MergeFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bw_ctl_ebi_ = from.bw_ctl_ebi_;
    }
    if (cached_has_bits & 0x00000002u) {
      bw_ctl_llcc_ = from.bw_ctl_llcc_;
    }
    if (cached_has_bits & 0x00000004u) {
      bw_ctl_mnoc_ = from.bw_ctl_mnoc_;
    }
    if (cached_has_bits & 0x00000008u) {
      core_clk_rate_ = from.core_clk_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      crtc_ = from.crtc_;
    }
    if (cached_has_bits & 0x00000020u) {
      per_pipe_ib_ebi_ = from.per_pipe_ib_ebi_;
    }
    if (cached_has_bits & 0x00000040u) {
      per_pipe_ib_llcc_ = from.per_pipe_ib_llcc_;
    }
    if (cached_has_bits & 0x00000080u) {
      params_ = from.params_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      stop_req_ = from.stop_req_;
    }
    if (cached_has_bits & 0x00000200u) {
      per_pipe_ib_mnoc_ = from.per_pipe_ib_mnoc_;
    }
    if (cached_has_bits & 0x00000400u) {
      update_bus_ = from.update_bus_;
    }
    if (cached_has_bits & 0x00000800u) {
      update_clk_ = from.update_clk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeSdePerfCrtcUpdateFtraceEvent::CopyFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfCrtcUpdateFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfCrtcUpdateFtraceEvent::InternalSwap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bw_ctl_ebi_, other->bw_ctl_ebi_);
  swap(bw_ctl_llcc_, other->bw_ctl_llcc_);
  swap(bw_ctl_mnoc_, other->bw_ctl_mnoc_);
  swap(core_clk_rate_, other->core_clk_rate_);
  swap(crtc_, other->crtc_);
  swap(per_pipe_ib_ebi_, other->per_pipe_ib_ebi_);
  swap(per_pipe_ib_llcc_, other->per_pipe_ib_llcc_);
  swap(params_, other->params_);
  swap(stop_req_, other->stop_req_);
  swap(per_pipe_ib_mnoc_, other->per_pipe_ib_mnoc_);
  swap(update_bus_, other->update_bus_);
  swap(update_clk_, other->update_clk_);
}

std::string SdeSdePerfCrtcUpdateFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent";
}


// ===================================================================

void SdeSdePerfSetQosLutsFtraceEvent::InitAsDefaultInstance() {
}
class SdeSdePerfSetQosLutsFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfSetQosLutsFtraceEvent>()._has_bits_);
  static void set_has_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fmt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lut(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lut_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}
SdeSdePerfSetQosLutsFtraceEvent::SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_, &from.fl_,
    static_cast<size_t>(reinterpret_cast<char*>(&rt_) -
    reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}

void SdeSdePerfSetQosLutsFtraceEvent::SharedCtor() {
  ::memset(&fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rt_) -
      reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
}

SdeSdePerfSetQosLutsFtraceEvent::~SdeSdePerfSetQosLutsFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  SharedDtor();
}

void SdeSdePerfSetQosLutsFtraceEvent::SharedDtor() {
}

void SdeSdePerfSetQosLutsFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeSdePerfSetQosLutsFtraceEvent& SdeSdePerfSetQosLutsFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeSdePerfSetQosLutsFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeSdePerfSetQosLutsFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_) -
        reinterpret_cast<char*>(&fl_)) + sizeof(rt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeSdePerfSetQosLutsFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fl(&has_bits);
          fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fmt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fmt(&has_bits);
          fmt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lut(&has_bits);
          lut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lut_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lut_usage(&has_bits);
          lut_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pnum(&has_bits);
          pnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rt(&has_bits);
          rt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeSdePerfSetQosLutsFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fl = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_fl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fmt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_fmt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lut = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_lut(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lut_usage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_lut_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lut_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pnum = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_pnum(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rt = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_rt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeSdePerfSetQosLutsFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->fl(), output);
  }

  // optional uint32 fmt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->fmt(), output);
  }

  // optional uint64 lut = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->lut(), output);
  }

  // optional uint32 lut_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->lut_usage(), output);
  }

  // optional uint32 pnum = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->pnum(), output);
  }

  // optional uint32 rt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->rt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
}

size_t SdeSdePerfSetQosLutsFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 fl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fl());
    }

    // optional uint32 fmt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fmt());
    }

    // optional uint64 lut = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->lut());
    }

    // optional uint32 lut_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->lut_usage());
    }

    // optional uint32 pnum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pnum());
    }

    // optional uint32 rt = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->rt());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfSetQosLutsFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeSdePerfSetQosLutsFtraceEvent*>(
      &from));
}

void SdeSdePerfSetQosLutsFtraceEvent::MergeFrom(const SdeSdePerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      fl_ = from.fl_;
    }
    if (cached_has_bits & 0x00000002u) {
      fmt_ = from.fmt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lut_ = from.lut_;
    }
    if (cached_has_bits & 0x00000008u) {
      lut_usage_ = from.lut_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      pnum_ = from.pnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      rt_ = from.rt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeSdePerfSetQosLutsFtraceEvent::CopyFrom(const SdeSdePerfSetQosLutsFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfSetQosLutsFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfSetQosLutsFtraceEvent::InternalSwap(SdeSdePerfSetQosLutsFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fl_, other->fl_);
  swap(fmt_, other->fmt_);
  swap(lut_, other->lut_);
  swap(lut_usage_, other->lut_usage_);
  swap(pnum_, other->pnum_);
  swap(rt_, other->rt_);
}

std::string SdeSdePerfSetQosLutsFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent";
}


// ===================================================================

void SdeSdePerfUpdateBusFtraceEvent::InitAsDefaultInstance() {
}
class SdeSdePerfUpdateBusFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SdeSdePerfUpdateBusFtraceEvent>()._has_bits_);
  static void set_has_ab_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bus_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ib_quota(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}
SdeSdePerfUpdateBusFtraceEvent::SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ab_quota_, &from.ab_quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&ib_quota_) -
    reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}

void SdeSdePerfUpdateBusFtraceEvent::SharedCtor() {
  ::memset(&ab_quota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ib_quota_) -
      reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
}

SdeSdePerfUpdateBusFtraceEvent::~SdeSdePerfUpdateBusFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  SharedDtor();
}

void SdeSdePerfUpdateBusFtraceEvent::SharedDtor() {
}

void SdeSdePerfUpdateBusFtraceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdeSdePerfUpdateBusFtraceEvent& SdeSdePerfUpdateBusFtraceEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdeSdePerfUpdateBusFtraceEvent_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto.base);
  return *internal_default_instance();
}


void SdeSdePerfUpdateBusFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ab_quota_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ib_quota_) -
        reinterpret_cast<char*>(&ab_quota_)) + sizeof(ib_quota_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdeSdePerfUpdateBusFtraceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 ab_quota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ab_quota(&has_bits);
          ab_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bus_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bus_id(&has_bits);
          bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client(&has_bits);
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ib_quota = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ib_quota(&has_bits);
          ib_quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdeSdePerfUpdateBusFtraceEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ab_quota = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ab_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ab_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_bus_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_client(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ib_quota = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ib_quota(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ib_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdeSdePerfUpdateBusFtraceEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ab_quota = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ab_quota(), output);
  }

  // optional uint32 bus_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  // optional int32 client = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->client(), output);
  }

  // optional uint64 ib_quota = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ib_quota(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
}

size_t SdeSdePerfUpdateBusFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 ab_quota = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ab_quota());
    }

    // optional uint32 bus_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

    // optional int32 client = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->client());
    }

    // optional uint64 ib_quota = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ib_quota());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdeSdePerfUpdateBusFtraceEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdeSdePerfUpdateBusFtraceEvent*>(
      &from));
}

void SdeSdePerfUpdateBusFtraceEvent::MergeFrom(const SdeSdePerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ab_quota_ = from.ab_quota_;
    }
    if (cached_has_bits & 0x00000002u) {
      bus_id_ = from.bus_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ = from.client_;
    }
    if (cached_has_bits & 0x00000008u) {
      ib_quota_ = from.ib_quota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SdeSdePerfUpdateBusFtraceEvent::CopyFrom(const SdeSdePerfUpdateBusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdeSdePerfUpdateBusFtraceEvent::IsInitialized() const {
  return true;
}

void SdeSdePerfUpdateBusFtraceEvent::InternalSwap(SdeSdePerfUpdateBusFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ab_quota_, other->ab_quota_);
  swap(bus_id_, other->bus_id_);
  swap(client_, other->client_);
  swap(ib_quota_, other->ib_quota_);
}

std::string SdeSdePerfUpdateBusFtraceEvent::GetTypeName() const {
  return "perfetto.protos.SdeSdePerfUpdateBusFtraceEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdeEvtlogFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
