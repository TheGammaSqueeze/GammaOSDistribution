// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/perf_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class PerfEvents;
class PerfEventsDefaultTypeInternal;
extern PerfEventsDefaultTypeInternal _PerfEvents_default_instance_;
class PerfEvents_Timebase;
class PerfEvents_TimebaseDefaultTypeInternal;
extern PerfEvents_TimebaseDefaultTypeInternal _PerfEvents_Timebase_default_instance_;
class PerfEvents_Tracepoint;
class PerfEvents_TracepointDefaultTypeInternal;
extern PerfEvents_TracepointDefaultTypeInternal _PerfEvents_Tracepoint_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::PerfEvents* Arena::CreateMaybeMessage<::perfetto::protos::PerfEvents>(Arena*);
template<> ::perfetto::protos::PerfEvents_Timebase* Arena::CreateMaybeMessage<::perfetto::protos::PerfEvents_Timebase>(Arena*);
template<> ::perfetto::protos::PerfEvents_Tracepoint* Arena::CreateMaybeMessage<::perfetto::protos::PerfEvents_Tracepoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

enum PerfEvents_Counter : int {
  PerfEvents_Counter_UNKNOWN_COUNTER = 0,
  PerfEvents_Counter_SW_CPU_CLOCK = 1,
  PerfEvents_Counter_SW_PAGE_FAULTS = 2,
  PerfEvents_Counter_HW_CPU_CYCLES = 10,
  PerfEvents_Counter_HW_INSTRUCTIONS = 11
};
bool PerfEvents_Counter_IsValid(int value);
constexpr PerfEvents_Counter PerfEvents_Counter_Counter_MIN = PerfEvents_Counter_UNKNOWN_COUNTER;
constexpr PerfEvents_Counter PerfEvents_Counter_Counter_MAX = PerfEvents_Counter_HW_INSTRUCTIONS;
constexpr int PerfEvents_Counter_Counter_ARRAYSIZE = PerfEvents_Counter_Counter_MAX + 1;

const std::string& PerfEvents_Counter_Name(PerfEvents_Counter value);
template<typename T>
inline const std::string& PerfEvents_Counter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerfEvents_Counter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerfEvents_Counter_Name.");
  return PerfEvents_Counter_Name(static_cast<PerfEvents_Counter>(enum_t_value));
}
bool PerfEvents_Counter_Parse(
    const std::string& name, PerfEvents_Counter* value);
// ===================================================================

class PerfEvents_Timebase :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEvents.Timebase) */ {
 public:
  PerfEvents_Timebase();
  virtual ~PerfEvents_Timebase();

  PerfEvents_Timebase(const PerfEvents_Timebase& from);
  PerfEvents_Timebase(PerfEvents_Timebase&& from) noexcept
    : PerfEvents_Timebase() {
    *this = ::std::move(from);
  }

  inline PerfEvents_Timebase& operator=(const PerfEvents_Timebase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEvents_Timebase& operator=(PerfEvents_Timebase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEvents_Timebase& default_instance();

  enum IntervalCase {
    kFrequency = 2,
    kPeriod = 1,
    INTERVAL_NOT_SET = 0,
  };

  enum EventCase {
    kCounter = 4,
    kTracepoint = 3,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEvents_Timebase* internal_default_instance() {
    return reinterpret_cast<const PerfEvents_Timebase*>(
               &_PerfEvents_Timebase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfEvents_Timebase& a, PerfEvents_Timebase& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEvents_Timebase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEvents_Timebase* New() const final {
    return CreateMaybeMessage<PerfEvents_Timebase>(nullptr);
  }

  PerfEvents_Timebase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEvents_Timebase>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEvents_Timebase& from);
  void MergeFrom(const PerfEvents_Timebase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEvents_Timebase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEvents.Timebase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 2,
    kPeriodFieldNumber = 1,
    kCounterFieldNumber = 4,
    kTracepointFieldNumber = 3,
  };
  // optional uint64 frequency = 2;
  bool has_frequency() const;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint64 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 period = 1;
  bool has_period() const;
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .perfetto.protos.PerfEvents.Counter counter = 4;
  bool has_counter() const;
  void clear_counter();
  ::perfetto::protos::PerfEvents_Counter counter() const;
  void set_counter(::perfetto::protos::PerfEvents_Counter value);

  // optional .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
  bool has_tracepoint() const;
  void clear_tracepoint();
  const ::perfetto::protos::PerfEvents_Tracepoint& tracepoint() const;
  ::perfetto::protos::PerfEvents_Tracepoint* release_tracepoint();
  ::perfetto::protos::PerfEvents_Tracepoint* mutable_tracepoint();
  void set_allocated_tracepoint(::perfetto::protos::PerfEvents_Tracepoint* tracepoint);

  void clear_interval();
  IntervalCase interval_case() const;
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents.Timebase)
 private:
  class _Internal;
  void set_has_frequency();
  void set_has_period();
  void set_has_counter();
  void set_has_tracepoint();

  inline bool has_interval() const;
  inline void clear_has_interval();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union IntervalUnion {
    IntervalUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 frequency_;
    ::PROTOBUF_NAMESPACE_ID::uint64 period_;
  } interval_;
  union EventUnion {
    EventUnion() {}
    int counter_;
    ::perfetto::protos::PerfEvents_Tracepoint* tracepoint_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
};
// -------------------------------------------------------------------

class PerfEvents_Tracepoint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEvents.Tracepoint) */ {
 public:
  PerfEvents_Tracepoint();
  virtual ~PerfEvents_Tracepoint();

  PerfEvents_Tracepoint(const PerfEvents_Tracepoint& from);
  PerfEvents_Tracepoint(PerfEvents_Tracepoint&& from) noexcept
    : PerfEvents_Tracepoint() {
    *this = ::std::move(from);
  }

  inline PerfEvents_Tracepoint& operator=(const PerfEvents_Tracepoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEvents_Tracepoint& operator=(PerfEvents_Tracepoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEvents_Tracepoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEvents_Tracepoint* internal_default_instance() {
    return reinterpret_cast<const PerfEvents_Tracepoint*>(
               &_PerfEvents_Tracepoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfEvents_Tracepoint& a, PerfEvents_Tracepoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEvents_Tracepoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEvents_Tracepoint* New() const final {
    return CreateMaybeMessage<PerfEvents_Tracepoint>(nullptr);
  }

  PerfEvents_Tracepoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEvents_Tracepoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEvents_Tracepoint& from);
  void MergeFrom(const PerfEvents_Tracepoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEvents_Tracepoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEvents.Tracepoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string filter = 2;
  bool has_filter() const;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents.Tracepoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
};
// -------------------------------------------------------------------

class PerfEvents :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfEvents) */ {
 public:
  PerfEvents();
  virtual ~PerfEvents();

  PerfEvents(const PerfEvents& from);
  PerfEvents(PerfEvents&& from) noexcept
    : PerfEvents() {
    *this = ::std::move(from);
  }

  inline PerfEvents& operator=(const PerfEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfEvents& operator=(PerfEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfEvents* internal_default_instance() {
    return reinterpret_cast<const PerfEvents*>(
               &_PerfEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfEvents& a, PerfEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfEvents* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfEvents* New() const final {
    return CreateMaybeMessage<PerfEvents>(nullptr);
  }

  PerfEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfEvents>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfEvents& from);
  void MergeFrom(const PerfEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.PerfEvents";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PerfEvents_Timebase Timebase;
  typedef PerfEvents_Tracepoint Tracepoint;

  typedef PerfEvents_Counter Counter;
  static constexpr Counter UNKNOWN_COUNTER =
    PerfEvents_Counter_UNKNOWN_COUNTER;
  static constexpr Counter SW_CPU_CLOCK =
    PerfEvents_Counter_SW_CPU_CLOCK;
  static constexpr Counter SW_PAGE_FAULTS =
    PerfEvents_Counter_SW_PAGE_FAULTS;
  static constexpr Counter HW_CPU_CYCLES =
    PerfEvents_Counter_HW_CPU_CYCLES;
  static constexpr Counter HW_INSTRUCTIONS =
    PerfEvents_Counter_HW_INSTRUCTIONS;
  static inline bool Counter_IsValid(int value) {
    return PerfEvents_Counter_IsValid(value);
  }
  static constexpr Counter Counter_MIN =
    PerfEvents_Counter_Counter_MIN;
  static constexpr Counter Counter_MAX =
    PerfEvents_Counter_Counter_MAX;
  static constexpr int Counter_ARRAYSIZE =
    PerfEvents_Counter_Counter_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Counter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Counter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Counter_Name.");
    return PerfEvents_Counter_Name(enum_t_value);
  }
  static inline bool Counter_Parse(const std::string& name,
      Counter* value) {
    return PerfEvents_Counter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfEvents)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfEvents_Timebase

// optional uint64 frequency = 2;
inline bool PerfEvents_Timebase::has_frequency() const {
  return interval_case() == kFrequency;
}
inline void PerfEvents_Timebase::set_has_frequency() {
  _oneof_case_[0] = kFrequency;
}
inline void PerfEvents_Timebase::clear_frequency() {
  if (has_frequency()) {
    interval_.frequency_ = PROTOBUF_ULONGLONG(0);
    clear_has_interval();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfEvents_Timebase::frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Timebase.frequency)
  if (has_frequency()) {
    return interval_.frequency_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void PerfEvents_Timebase::set_frequency(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_frequency()) {
    clear_interval();
    set_has_frequency();
  }
  interval_.frequency_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEvents.Timebase.frequency)
}

// optional uint64 period = 1;
inline bool PerfEvents_Timebase::has_period() const {
  return interval_case() == kPeriod;
}
inline void PerfEvents_Timebase::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline void PerfEvents_Timebase::clear_period() {
  if (has_period()) {
    interval_.period_ = PROTOBUF_ULONGLONG(0);
    clear_has_interval();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerfEvents_Timebase::period() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Timebase.period)
  if (has_period()) {
    return interval_.period_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void PerfEvents_Timebase::set_period(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_period()) {
    clear_interval();
    set_has_period();
  }
  interval_.period_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEvents.Timebase.period)
}

// optional .perfetto.protos.PerfEvents.Counter counter = 4;
inline bool PerfEvents_Timebase::has_counter() const {
  return event_case() == kCounter;
}
inline void PerfEvents_Timebase::set_has_counter() {
  _oneof_case_[1] = kCounter;
}
inline void PerfEvents_Timebase::clear_counter() {
  if (has_counter()) {
    event_.counter_ = 0;
    clear_has_event();
  }
}
inline ::perfetto::protos::PerfEvents_Counter PerfEvents_Timebase::counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Timebase.counter)
  if (has_counter()) {
    return static_cast< ::perfetto::protos::PerfEvents_Counter >(event_.counter_);
  }
  return static_cast< ::perfetto::protos::PerfEvents_Counter >(0);
}
inline void PerfEvents_Timebase::set_counter(::perfetto::protos::PerfEvents_Counter value) {
  assert(::perfetto::protos::PerfEvents_Counter_IsValid(value));
  if (!has_counter()) {
    clear_event();
    set_has_counter();
  }
  event_.counter_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEvents.Timebase.counter)
}

// optional .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
inline bool PerfEvents_Timebase::has_tracepoint() const {
  return event_case() == kTracepoint;
}
inline void PerfEvents_Timebase::set_has_tracepoint() {
  _oneof_case_[1] = kTracepoint;
}
inline void PerfEvents_Timebase::clear_tracepoint() {
  if (has_tracepoint()) {
    delete event_.tracepoint_;
    clear_has_event();
  }
}
inline ::perfetto::protos::PerfEvents_Tracepoint* PerfEvents_Timebase::release_tracepoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEvents.Timebase.tracepoint)
  if (has_tracepoint()) {
    clear_has_event();
      ::perfetto::protos::PerfEvents_Tracepoint* temp = event_.tracepoint_;
    event_.tracepoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfEvents_Tracepoint& PerfEvents_Timebase::tracepoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Timebase.tracepoint)
  return has_tracepoint()
      ? *event_.tracepoint_
      : *reinterpret_cast< ::perfetto::protos::PerfEvents_Tracepoint*>(&::perfetto::protos::_PerfEvents_Tracepoint_default_instance_);
}
inline ::perfetto::protos::PerfEvents_Tracepoint* PerfEvents_Timebase::mutable_tracepoint() {
  if (!has_tracepoint()) {
    clear_event();
    set_has_tracepoint();
    event_.tracepoint_ = CreateMaybeMessage< ::perfetto::protos::PerfEvents_Tracepoint >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEvents.Timebase.tracepoint)
  return event_.tracepoint_;
}

inline bool PerfEvents_Timebase::has_interval() const {
  return interval_case() != INTERVAL_NOT_SET;
}
inline void PerfEvents_Timebase::clear_has_interval() {
  _oneof_case_[0] = INTERVAL_NOT_SET;
}
inline bool PerfEvents_Timebase::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void PerfEvents_Timebase::clear_has_event() {
  _oneof_case_[1] = EVENT_NOT_SET;
}
inline PerfEvents_Timebase::IntervalCase PerfEvents_Timebase::interval_case() const {
  return PerfEvents_Timebase::IntervalCase(_oneof_case_[0]);
}
inline PerfEvents_Timebase::EventCase PerfEvents_Timebase::event_case() const {
  return PerfEvents_Timebase::EventCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// PerfEvents_Tracepoint

// optional string name = 1;
inline bool PerfEvents_Tracepoint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfEvents_Tracepoint::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfEvents_Tracepoint::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Tracepoint.name)
  return name_.GetNoArena();
}
inline void PerfEvents_Tracepoint::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEvents.Tracepoint.name)
}
inline void PerfEvents_Tracepoint::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfEvents.Tracepoint.name)
}
inline void PerfEvents_Tracepoint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEvents.Tracepoint.name)
}
inline void PerfEvents_Tracepoint::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEvents.Tracepoint.name)
}
inline std::string* PerfEvents_Tracepoint::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEvents.Tracepoint.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfEvents_Tracepoint::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEvents.Tracepoint.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfEvents_Tracepoint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Tracepoint.name)
}

// optional string filter = 2;
inline bool PerfEvents_Tracepoint::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerfEvents_Tracepoint::clear_filter() {
  filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerfEvents_Tracepoint::filter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfEvents.Tracepoint.filter)
  return filter_.GetNoArena();
}
inline void PerfEvents_Tracepoint::set_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfEvents.Tracepoint.filter)
}
inline void PerfEvents_Tracepoint::set_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.PerfEvents.Tracepoint.filter)
}
inline void PerfEvents_Tracepoint::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.PerfEvents.Tracepoint.filter)
}
inline void PerfEvents_Tracepoint::set_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.PerfEvents.Tracepoint.filter)
}
inline std::string* PerfEvents_Tracepoint::mutable_filter() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfEvents.Tracepoint.filter)
  return filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfEvents_Tracepoint::release_filter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfEvents.Tracepoint.filter)
  if (!has_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfEvents_Tracepoint::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Tracepoint.filter)
}

// -------------------------------------------------------------------

// PerfEvents

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfetto::protos::PerfEvents_Counter> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto
