// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/sde.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SdeSdeEvtlogFtraceEvent;
class SdeSdeEvtlogFtraceEventDefaultTypeInternal;
extern SdeSdeEvtlogFtraceEventDefaultTypeInternal _SdeSdeEvtlogFtraceEvent_default_instance_;
class SdeSdePerfCalcCrtcFtraceEvent;
class SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal;
extern SdeSdePerfCalcCrtcFtraceEventDefaultTypeInternal _SdeSdePerfCalcCrtcFtraceEvent_default_instance_;
class SdeSdePerfCrtcUpdateFtraceEvent;
class SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal;
extern SdeSdePerfCrtcUpdateFtraceEventDefaultTypeInternal _SdeSdePerfCrtcUpdateFtraceEvent_default_instance_;
class SdeSdePerfSetQosLutsFtraceEvent;
class SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal;
extern SdeSdePerfSetQosLutsFtraceEventDefaultTypeInternal _SdeSdePerfSetQosLutsFtraceEvent_default_instance_;
class SdeSdePerfUpdateBusFtraceEvent;
class SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal;
extern SdeSdePerfUpdateBusFtraceEventDefaultTypeInternal _SdeSdePerfUpdateBusFtraceEvent_default_instance_;
class SdeTracingMarkWriteFtraceEvent;
class SdeTracingMarkWriteFtraceEventDefaultTypeInternal;
extern SdeTracingMarkWriteFtraceEventDefaultTypeInternal _SdeTracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SdeSdeEvtlogFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdeEvtlogFtraceEvent>(Arena*);
template<> ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent>(Arena*);
template<> ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent>(Arena*);
template<> ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent>(Arena*);
template<> ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent>(Arena*);
template<> ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SdeTracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SdeTracingMarkWriteFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeTracingMarkWriteFtraceEvent) */ {
 public:
  SdeTracingMarkWriteFtraceEvent();
  virtual ~SdeTracingMarkWriteFtraceEvent();

  SdeTracingMarkWriteFtraceEvent(const SdeTracingMarkWriteFtraceEvent& from);
  SdeTracingMarkWriteFtraceEvent(SdeTracingMarkWriteFtraceEvent&& from) noexcept
    : SdeTracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeTracingMarkWriteFtraceEvent& operator=(const SdeTracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeTracingMarkWriteFtraceEvent& operator=(SdeTracingMarkWriteFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeTracingMarkWriteFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeTracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeTracingMarkWriteFtraceEvent*>(
               &_SdeTracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SdeTracingMarkWriteFtraceEvent& a, SdeTracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeTracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeTracingMarkWriteFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeTracingMarkWriteFtraceEvent>(nullptr);
  }

  SdeTracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeTracingMarkWriteFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeTracingMarkWriteFtraceEvent& from);
  void MergeFrom(const SdeTracingMarkWriteFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeTracingMarkWriteFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeTracingMarkWriteFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kTraceTypeFieldNumber = 3,
    kValueFieldNumber = 4,
    kTraceBeginFieldNumber = 5,
  };
  // optional string trace_name = 2;
  bool has_trace_name() const;
  void clear_trace_name();
  const std::string& trace_name() const;
  void set_trace_name(const std::string& value);
  void set_trace_name(std::string&& value);
  void set_trace_name(const char* value);
  void set_trace_name(const char* value, size_t size);
  std::string* mutable_trace_name();
  std::string* release_trace_name();
  void set_allocated_trace_name(std::string* trace_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trace_type = 3;
  bool has_trace_type() const;
  void clear_trace_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_type() const;
  void set_trace_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 value = 4;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 trace_begin = 5;
  bool has_trace_begin() const;
  void clear_trace_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin() const;
  void set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeTracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_begin_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// -------------------------------------------------------------------

class SdeSdeEvtlogFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdeEvtlogFtraceEvent) */ {
 public:
  SdeSdeEvtlogFtraceEvent();
  virtual ~SdeSdeEvtlogFtraceEvent();

  SdeSdeEvtlogFtraceEvent(const SdeSdeEvtlogFtraceEvent& from);
  SdeSdeEvtlogFtraceEvent(SdeSdeEvtlogFtraceEvent&& from) noexcept
    : SdeSdeEvtlogFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdeEvtlogFtraceEvent& operator=(const SdeSdeEvtlogFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdeEvtlogFtraceEvent& operator=(SdeSdeEvtlogFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeSdeEvtlogFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeSdeEvtlogFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdeEvtlogFtraceEvent*>(
               &_SdeSdeEvtlogFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SdeSdeEvtlogFtraceEvent& a, SdeSdeEvtlogFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdeEvtlogFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeSdeEvtlogFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeSdeEvtlogFtraceEvent>(nullptr);
  }

  SdeSdeEvtlogFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeSdeEvtlogFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeSdeEvtlogFtraceEvent& from);
  void MergeFrom(const SdeSdeEvtlogFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeSdeEvtlogFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeSdeEvtlogFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvtlogTagFieldNumber = 1,
    kPidFieldNumber = 2,
    kTagIdFieldNumber = 3,
  };
  // optional string evtlog_tag = 1;
  bool has_evtlog_tag() const;
  void clear_evtlog_tag();
  const std::string& evtlog_tag() const;
  void set_evtlog_tag(const std::string& value);
  void set_evtlog_tag(std::string&& value);
  void set_evtlog_tag(const char* value);
  void set_evtlog_tag(const char* value, size_t size);
  std::string* mutable_evtlog_tag();
  std::string* release_evtlog_tag();
  void set_allocated_evtlog_tag(std::string* evtlog_tag);

  // optional int32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 tag_id = 3;
  bool has_tag_id() const;
  void clear_tag_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_id() const;
  void set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdeEvtlogFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evtlog_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// -------------------------------------------------------------------

class SdeSdePerfCalcCrtcFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent) */ {
 public:
  SdeSdePerfCalcCrtcFtraceEvent();
  virtual ~SdeSdePerfCalcCrtcFtraceEvent();

  SdeSdePerfCalcCrtcFtraceEvent(const SdeSdePerfCalcCrtcFtraceEvent& from);
  SdeSdePerfCalcCrtcFtraceEvent(SdeSdePerfCalcCrtcFtraceEvent&& from) noexcept
    : SdeSdePerfCalcCrtcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfCalcCrtcFtraceEvent& operator=(const SdeSdePerfCalcCrtcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfCalcCrtcFtraceEvent& operator=(SdeSdePerfCalcCrtcFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeSdePerfCalcCrtcFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeSdePerfCalcCrtcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfCalcCrtcFtraceEvent*>(
               &_SdeSdePerfCalcCrtcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SdeSdePerfCalcCrtcFtraceEvent& a, SdeSdePerfCalcCrtcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfCalcCrtcFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeSdePerfCalcCrtcFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeSdePerfCalcCrtcFtraceEvent>(nullptr);
  }

  SdeSdePerfCalcCrtcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeSdePerfCalcCrtcFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeSdePerfCalcCrtcFtraceEvent& from);
  void MergeFrom(const SdeSdePerfCalcCrtcFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeSdePerfCalcCrtcFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kIbEbiFieldNumber = 6,
    kIbLlccFieldNumber = 7,
    kIbMnocFieldNumber = 8,
  };
  // optional uint64 bw_ctl_ebi = 1;
  bool has_bw_ctl_ebi() const;
  void clear_bw_ctl_ebi();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_ebi() const;
  void set_bw_ctl_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bw_ctl_llcc = 2;
  bool has_bw_ctl_llcc() const;
  void clear_bw_ctl_llcc();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_llcc() const;
  void set_bw_ctl_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bw_ctl_mnoc = 3;
  bool has_bw_ctl_mnoc() const;
  void clear_bw_ctl_mnoc();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_mnoc() const;
  void set_bw_ctl_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 core_clk_rate = 4;
  bool has_core_clk_rate() const;
  void clear_core_clk_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 core_clk_rate() const;
  void set_core_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 crtc = 5;
  bool has_crtc() const;
  void clear_crtc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crtc() const;
  void set_crtc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 ib_ebi = 6;
  bool has_ib_ebi() const;
  void clear_ib_ebi();
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_ebi() const;
  void set_ib_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ib_llcc = 7;
  bool has_ib_llcc() const;
  void clear_ib_llcc();
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_llcc() const;
  void set_ib_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 ib_mnoc = 8;
  bool has_ib_mnoc() const;
  void clear_ib_mnoc();
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_mnoc() const;
  void set_ib_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_ebi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_llcc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_mnoc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 core_clk_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crtc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_ebi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_llcc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_mnoc_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// -------------------------------------------------------------------

class SdeSdePerfCrtcUpdateFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent) */ {
 public:
  SdeSdePerfCrtcUpdateFtraceEvent();
  virtual ~SdeSdePerfCrtcUpdateFtraceEvent();

  SdeSdePerfCrtcUpdateFtraceEvent(const SdeSdePerfCrtcUpdateFtraceEvent& from);
  SdeSdePerfCrtcUpdateFtraceEvent(SdeSdePerfCrtcUpdateFtraceEvent&& from) noexcept
    : SdeSdePerfCrtcUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfCrtcUpdateFtraceEvent& operator=(const SdeSdePerfCrtcUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfCrtcUpdateFtraceEvent& operator=(SdeSdePerfCrtcUpdateFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeSdePerfCrtcUpdateFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeSdePerfCrtcUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfCrtcUpdateFtraceEvent*>(
               &_SdeSdePerfCrtcUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SdeSdePerfCrtcUpdateFtraceEvent& a, SdeSdePerfCrtcUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfCrtcUpdateFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeSdePerfCrtcUpdateFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeSdePerfCrtcUpdateFtraceEvent>(nullptr);
  }

  SdeSdePerfCrtcUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeSdePerfCrtcUpdateFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from);
  void MergeFrom(const SdeSdePerfCrtcUpdateFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeSdePerfCrtcUpdateFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBwCtlEbiFieldNumber = 1,
    kBwCtlLlccFieldNumber = 2,
    kBwCtlMnocFieldNumber = 3,
    kCoreClkRateFieldNumber = 4,
    kCrtcFieldNumber = 5,
    kPerPipeIbEbiFieldNumber = 7,
    kPerPipeIbLlccFieldNumber = 8,
    kParamsFieldNumber = 6,
    kStopReqFieldNumber = 10,
    kPerPipeIbMnocFieldNumber = 9,
    kUpdateBusFieldNumber = 11,
    kUpdateClkFieldNumber = 12,
  };
  // optional uint64 bw_ctl_ebi = 1;
  bool has_bw_ctl_ebi() const;
  void clear_bw_ctl_ebi();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_ebi() const;
  void set_bw_ctl_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bw_ctl_llcc = 2;
  bool has_bw_ctl_llcc() const;
  void clear_bw_ctl_llcc();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_llcc() const;
  void set_bw_ctl_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 bw_ctl_mnoc = 3;
  bool has_bw_ctl_mnoc() const;
  void clear_bw_ctl_mnoc();
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_mnoc() const;
  void set_bw_ctl_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 core_clk_rate = 4;
  bool has_core_clk_rate() const;
  void clear_core_clk_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 core_clk_rate() const;
  void set_core_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 crtc = 5;
  bool has_crtc() const;
  void clear_crtc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crtc() const;
  void set_crtc(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 per_pipe_ib_ebi = 7;
  bool has_per_pipe_ib_ebi() const;
  void clear_per_pipe_ib_ebi();
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_ebi() const;
  void set_per_pipe_ib_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 per_pipe_ib_llcc = 8;
  bool has_per_pipe_ib_llcc() const;
  void clear_per_pipe_ib_llcc();
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_llcc() const;
  void set_per_pipe_ib_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 params = 6;
  bool has_params() const;
  void clear_params();
  ::PROTOBUF_NAMESPACE_ID::int32 params() const;
  void set_params(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 stop_req = 10;
  bool has_stop_req() const;
  void clear_stop_req();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_req() const;
  void set_stop_req(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 per_pipe_ib_mnoc = 9;
  bool has_per_pipe_ib_mnoc() const;
  void clear_per_pipe_ib_mnoc();
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_mnoc() const;
  void set_per_pipe_ib_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 update_bus = 11;
  bool has_update_bus() const;
  void clear_update_bus();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_bus() const;
  void set_update_bus(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 update_clk = 12;
  bool has_update_clk() const;
  void clear_update_clk();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_clk() const;
  void set_update_clk(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_ebi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_llcc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bw_ctl_mnoc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 core_clk_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crtc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_ebi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_llcc_;
  ::PROTOBUF_NAMESPACE_ID::int32 params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_req_;
  ::PROTOBUF_NAMESPACE_ID::uint64 per_pipe_ib_mnoc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_bus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_clk_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// -------------------------------------------------------------------

class SdeSdePerfSetQosLutsFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent) */ {
 public:
  SdeSdePerfSetQosLutsFtraceEvent();
  virtual ~SdeSdePerfSetQosLutsFtraceEvent();

  SdeSdePerfSetQosLutsFtraceEvent(const SdeSdePerfSetQosLutsFtraceEvent& from);
  SdeSdePerfSetQosLutsFtraceEvent(SdeSdePerfSetQosLutsFtraceEvent&& from) noexcept
    : SdeSdePerfSetQosLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfSetQosLutsFtraceEvent& operator=(const SdeSdePerfSetQosLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfSetQosLutsFtraceEvent& operator=(SdeSdePerfSetQosLutsFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeSdePerfSetQosLutsFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeSdePerfSetQosLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfSetQosLutsFtraceEvent*>(
               &_SdeSdePerfSetQosLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SdeSdePerfSetQosLutsFtraceEvent& a, SdeSdePerfSetQosLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeSdePerfSetQosLutsFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeSdePerfSetQosLutsFtraceEvent>(nullptr);
  }

  SdeSdePerfSetQosLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeSdePerfSetQosLutsFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeSdePerfSetQosLutsFtraceEvent& from);
  void MergeFrom(const SdeSdePerfSetQosLutsFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeSdePerfSetQosLutsFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlFieldNumber = 1,
    kFmtFieldNumber = 2,
    kLutFieldNumber = 3,
    kLutUsageFieldNumber = 4,
    kPnumFieldNumber = 5,
    kRtFieldNumber = 6,
  };
  // optional uint32 fl = 1;
  bool has_fl() const;
  void clear_fl();
  ::PROTOBUF_NAMESPACE_ID::uint32 fl() const;
  void set_fl(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt();
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt() const;
  void set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 lut = 3;
  bool has_lut() const;
  void clear_lut();
  ::PROTOBUF_NAMESPACE_ID::uint64 lut() const;
  void set_lut(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 lut_usage = 4;
  bool has_lut_usage() const;
  void clear_lut_usage();
  ::PROTOBUF_NAMESPACE_ID::uint32 lut_usage() const;
  void set_lut_usage(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 pnum = 5;
  bool has_pnum() const;
  void clear_pnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum() const;
  void set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rt = 6;
  bool has_rt() const;
  void clear_rt();
  ::PROTOBUF_NAMESPACE_ID::uint32 rt() const;
  void set_rt(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fmt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lut_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lut_usage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rt_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// -------------------------------------------------------------------

class SdeSdePerfUpdateBusFtraceEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent) */ {
 public:
  SdeSdePerfUpdateBusFtraceEvent();
  virtual ~SdeSdePerfUpdateBusFtraceEvent();

  SdeSdePerfUpdateBusFtraceEvent(const SdeSdePerfUpdateBusFtraceEvent& from);
  SdeSdePerfUpdateBusFtraceEvent(SdeSdePerfUpdateBusFtraceEvent&& from) noexcept
    : SdeSdePerfUpdateBusFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SdeSdePerfUpdateBusFtraceEvent& operator=(const SdeSdePerfUpdateBusFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdeSdePerfUpdateBusFtraceEvent& operator=(SdeSdePerfUpdateBusFtraceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SdeSdePerfUpdateBusFtraceEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdeSdePerfUpdateBusFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SdeSdePerfUpdateBusFtraceEvent*>(
               &_SdeSdePerfUpdateBusFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SdeSdePerfUpdateBusFtraceEvent& a, SdeSdePerfUpdateBusFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SdeSdePerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdeSdePerfUpdateBusFtraceEvent* New() const final {
    return CreateMaybeMessage<SdeSdePerfUpdateBusFtraceEvent>(nullptr);
  }

  SdeSdePerfUpdateBusFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdeSdePerfUpdateBusFtraceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SdeSdePerfUpdateBusFtraceEvent& from);
  void MergeFrom(const SdeSdePerfUpdateBusFtraceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SdeSdePerfUpdateBusFtraceEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SdeSdePerfUpdateBusFtraceEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbQuotaFieldNumber = 1,
    kBusIdFieldNumber = 2,
    kClientFieldNumber = 3,
    kIbQuotaFieldNumber = 4,
  };
  // optional uint64 ab_quota = 1;
  bool has_ab_quota() const;
  void clear_ab_quota();
  ::PROTOBUF_NAMESPACE_ID::uint64 ab_quota() const;
  void set_ab_quota(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 bus_id = 2;
  bool has_bus_id() const;
  void clear_bus_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_id() const;
  void set_bus_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 client = 3;
  bool has_client() const;
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 ib_quota = 4;
  bool has_ib_quota() const;
  void clear_ib_quota();
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_quota() const;
  void set_ib_quota(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ab_quota_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ib_quota_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SdeTracingMarkWriteFtraceEvent

// optional int32 pid = 1;
inline bool SdeTracingMarkWriteFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeTracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
  return pid_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.pid)
}

// optional string trace_name = 2;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_name() {
  trace_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdeTracingMarkWriteFtraceEvent::trace_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.GetNoArena();
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}
inline std::string* SdeTracingMarkWriteFtraceEvent::mutable_trace_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  return trace_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SdeTracingMarkWriteFtraceEvent::release_trace_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
  if (!has_trace_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SdeTracingMarkWriteFtraceEvent::set_allocated_trace_name(std::string* trace_name) {
  if (trace_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_name);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_name)
}

// optional uint32 trace_type = 3;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_type() {
  trace_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeTracingMarkWriteFtraceEvent::trace_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
  return trace_type_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  trace_type_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_type)
}

// optional int32 value = 4;
inline bool SdeTracingMarkWriteFtraceEvent::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeTracingMarkWriteFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
  return value_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.value)
}

// optional uint32 trace_begin = 5;
inline bool SdeTracingMarkWriteFtraceEvent::has_trace_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdeTracingMarkWriteFtraceEvent::clear_trace_begin() {
  trace_begin_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeTracingMarkWriteFtraceEvent::trace_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
  return trace_begin_;
}
inline void SdeTracingMarkWriteFtraceEvent::set_trace_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  trace_begin_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeTracingMarkWriteFtraceEvent.trace_begin)
}

// -------------------------------------------------------------------

// SdeSdeEvtlogFtraceEvent

// optional string evtlog_tag = 1;
inline bool SdeSdeEvtlogFtraceEvent::has_evtlog_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeSdeEvtlogFtraceEvent::clear_evtlog_tag() {
  evtlog_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdeSdeEvtlogFtraceEvent::evtlog_tag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  return evtlog_tag_.GetNoArena();
}
inline void SdeSdeEvtlogFtraceEvent::set_evtlog_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  evtlog_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}
inline void SdeSdeEvtlogFtraceEvent::set_evtlog_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  evtlog_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}
inline void SdeSdeEvtlogFtraceEvent::set_evtlog_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  evtlog_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}
inline void SdeSdeEvtlogFtraceEvent::set_evtlog_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  evtlog_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}
inline std::string* SdeSdeEvtlogFtraceEvent::mutable_evtlog_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  return evtlog_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SdeSdeEvtlogFtraceEvent::release_evtlog_tag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
  if (!has_evtlog_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return evtlog_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SdeSdeEvtlogFtraceEvent::set_allocated_evtlog_tag(std::string* evtlog_tag) {
  if (evtlog_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  evtlog_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evtlog_tag);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SdeSdeEvtlogFtraceEvent.evtlog_tag)
}

// optional int32 pid = 2;
inline bool SdeSdeEvtlogFtraceEvent::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeSdeEvtlogFtraceEvent::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeSdeEvtlogFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.pid)
  return pid_;
}
inline void SdeSdeEvtlogFtraceEvent::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.pid)
}

// optional uint32 tag_id = 3;
inline bool SdeSdeEvtlogFtraceEvent::has_tag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeSdeEvtlogFtraceEvent::clear_tag_id() {
  tag_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdeEvtlogFtraceEvent::tag_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdeEvtlogFtraceEvent.tag_id)
  return tag_id_;
}
inline void SdeSdeEvtlogFtraceEvent::set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdeEvtlogFtraceEvent.tag_id)
}

// -------------------------------------------------------------------

// SdeSdePerfCalcCrtcFtraceEvent

// optional uint64 bw_ctl_ebi = 1;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_ebi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_ebi() {
  bw_ctl_ebi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_ebi)
  return bw_ctl_ebi_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bw_ctl_ebi_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_ebi)
}

// optional uint64 bw_ctl_llcc = 2;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_llcc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_llcc() {
  bw_ctl_llcc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_llcc)
  return bw_ctl_llcc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  bw_ctl_llcc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_llcc)
}

// optional uint64 bw_ctl_mnoc = 3;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_bw_ctl_mnoc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_bw_ctl_mnoc() {
  bw_ctl_mnoc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::bw_ctl_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_mnoc)
  return bw_ctl_mnoc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_bw_ctl_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bw_ctl_mnoc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.bw_ctl_mnoc)
}

// optional uint32 core_clk_rate = 4;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_core_clk_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_core_clk_rate() {
  core_clk_rate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCalcCrtcFtraceEvent::core_clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.core_clk_rate)
  return core_clk_rate_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_core_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  core_clk_rate_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.core_clk_rate)
}

// optional uint32 crtc = 5;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_crtc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_crtc() {
  crtc_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCalcCrtcFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.crtc)
  return crtc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_crtc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  crtc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.crtc)
}

// optional uint64 ib_ebi = 6;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_ebi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_ebi() {
  ib_ebi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::ib_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_ebi)
  return ib_ebi_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  ib_ebi_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_ebi)
}

// optional uint64 ib_llcc = 7;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_llcc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_llcc() {
  ib_llcc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::ib_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_llcc)
  return ib_llcc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  ib_llcc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_llcc)
}

// optional uint64 ib_mnoc = 8;
inline bool SdeSdePerfCalcCrtcFtraceEvent::has_ib_mnoc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::clear_ib_mnoc() {
  ib_mnoc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCalcCrtcFtraceEvent::ib_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_mnoc)
  return ib_mnoc_;
}
inline void SdeSdePerfCalcCrtcFtraceEvent::set_ib_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  ib_mnoc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent.ib_mnoc)
}

// -------------------------------------------------------------------

// SdeSdePerfCrtcUpdateFtraceEvent

// optional uint64 bw_ctl_ebi = 1;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_ebi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_ebi() {
  bw_ctl_ebi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_ebi)
  return bw_ctl_ebi_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  bw_ctl_ebi_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_ebi)
}

// optional uint64 bw_ctl_llcc = 2;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_llcc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_llcc() {
  bw_ctl_llcc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_llcc)
  return bw_ctl_llcc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  bw_ctl_llcc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_llcc)
}

// optional uint64 bw_ctl_mnoc = 3;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_bw_ctl_mnoc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_bw_ctl_mnoc() {
  bw_ctl_mnoc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::bw_ctl_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_mnoc)
  return bw_ctl_mnoc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_bw_ctl_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  bw_ctl_mnoc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.bw_ctl_mnoc)
}

// optional uint32 core_clk_rate = 4;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_core_clk_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_core_clk_rate() {
  core_clk_rate_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCrtcUpdateFtraceEvent::core_clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.core_clk_rate)
  return core_clk_rate_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_core_clk_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  core_clk_rate_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.core_clk_rate)
}

// optional uint32 crtc = 5;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_crtc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_crtc() {
  crtc_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCrtcUpdateFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.crtc)
  return crtc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_crtc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  crtc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.crtc)
}

// optional int32 params = 6;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_params() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_params() {
  params_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeSdePerfCrtcUpdateFtraceEvent::params() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.params)
  return params_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_params(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  params_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.params)
}

// optional uint64 per_pipe_ib_ebi = 7;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_ebi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_ebi() {
  per_pipe_ib_ebi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_ebi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_ebi)
  return per_pipe_ib_ebi_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_ebi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  per_pipe_ib_ebi_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_ebi)
}

// optional uint64 per_pipe_ib_llcc = 8;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_llcc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_llcc() {
  per_pipe_ib_llcc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_llcc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_llcc)
  return per_pipe_ib_llcc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_llcc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  per_pipe_ib_llcc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_llcc)
}

// optional uint64 per_pipe_ib_mnoc = 9;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_per_pipe_ib_mnoc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_per_pipe_ib_mnoc() {
  per_pipe_ib_mnoc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfCrtcUpdateFtraceEvent::per_pipe_ib_mnoc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_mnoc)
  return per_pipe_ib_mnoc_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_per_pipe_ib_mnoc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  per_pipe_ib_mnoc_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.per_pipe_ib_mnoc)
}

// optional uint32 stop_req = 10;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_stop_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_stop_req() {
  stop_req_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCrtcUpdateFtraceEvent::stop_req() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.stop_req)
  return stop_req_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_stop_req(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  stop_req_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.stop_req)
}

// optional uint32 update_bus = 11;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_update_bus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_update_bus() {
  update_bus_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCrtcUpdateFtraceEvent::update_bus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_bus)
  return update_bus_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_update_bus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  update_bus_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_bus)
}

// optional uint32 update_clk = 12;
inline bool SdeSdePerfCrtcUpdateFtraceEvent::has_update_clk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::clear_update_clk() {
  update_clk_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfCrtcUpdateFtraceEvent::update_clk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_clk)
  return update_clk_;
}
inline void SdeSdePerfCrtcUpdateFtraceEvent::set_update_clk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  update_clk_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent.update_clk)
}

// -------------------------------------------------------------------

// SdeSdePerfSetQosLutsFtraceEvent

// optional uint32 fl = 1;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_fl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_fl() {
  fl_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfSetQosLutsFtraceEvent::fl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fl)
  return fl_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_fl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fl_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fl)
}

// optional uint32 fmt = 2;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_fmt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_fmt() {
  fmt_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfSetQosLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fmt)
  return fmt_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_fmt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fmt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.fmt)
}

// optional uint64 lut = 3;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_lut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_lut() {
  lut_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfSetQosLutsFtraceEvent::lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut)
  return lut_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_lut(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lut_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut)
}

// optional uint32 lut_usage = 4;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_lut_usage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_lut_usage() {
  lut_usage_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfSetQosLutsFtraceEvent::lut_usage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut_usage)
  return lut_usage_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_lut_usage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  lut_usage_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.lut_usage)
}

// optional uint32 pnum = 5;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_pnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_pnum() {
  pnum_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfSetQosLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.pnum)
  return pnum_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_pnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pnum_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.pnum)
}

// optional uint32 rt = 6;
inline bool SdeSdePerfSetQosLutsFtraceEvent::has_rt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::clear_rt() {
  rt_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfSetQosLutsFtraceEvent::rt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.rt)
  return rt_;
}
inline void SdeSdePerfSetQosLutsFtraceEvent::set_rt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rt_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent.rt)
}

// -------------------------------------------------------------------

// SdeSdePerfUpdateBusFtraceEvent

// optional uint64 ab_quota = 1;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_ab_quota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_ab_quota() {
  ab_quota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfUpdateBusFtraceEvent::ab_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ab_quota)
  return ab_quota_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_ab_quota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ab_quota_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ab_quota)
}

// optional uint32 bus_id = 2;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_bus_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_bus_id() {
  bus_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SdeSdePerfUpdateBusFtraceEvent::bus_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.bus_id)
  return bus_id_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_bus_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.bus_id)
}

// optional int32 client = 3;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SdeSdePerfUpdateBusFtraceEvent::client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.client)
  return client_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.client)
}

// optional uint64 ib_quota = 4;
inline bool SdeSdePerfUpdateBusFtraceEvent::has_ib_quota() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SdeSdePerfUpdateBusFtraceEvent::clear_ib_quota() {
  ib_quota_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SdeSdePerfUpdateBusFtraceEvent::ib_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ib_quota)
  return ib_quota_;
}
inline void SdeSdePerfUpdateBusFtraceEvent::set_ib_quota(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  ib_quota_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SdeSdePerfUpdateBusFtraceEvent.ib_quota)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fsde_2eproto
