// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/perf_event_config.proto

#include "protos/perfetto/config/profiling/perf_event_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
namespace perfetto {
namespace protos {
class PerfEventConfig_CallstackSamplingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_CallstackSampling> _instance;
} _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_ScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_Scope> _instance;
} _PerfEventConfig_Scope_default_instance_;
class PerfEventConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig> _instance;
} _PerfEventConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {
      &scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base,
      &scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_CallstackSampling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_CallstackSampling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {
      &scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_Scope_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_Scope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::PerfEventConfig_Scope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void PerfEventConfig_CallstackSampling::InitAsDefaultInstance() {
  ::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_._instance.get_mutable()->scope_ = const_cast< ::perfetto::protos::PerfEventConfig_Scope*>(
      ::perfetto::protos::PerfEventConfig_Scope::internal_default_instance());
}
class PerfEventConfig_CallstackSampling::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_CallstackSampling>()._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Scope& scope(const PerfEventConfig_CallstackSampling* msg);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::PerfEventConfig_Scope&
PerfEventConfig_CallstackSampling::_Internal::scope(const PerfEventConfig_CallstackSampling* msg) {
  return *msg->scope_;
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scope()) {
    scope_ = new ::perfetto::protos::PerfEventConfig_Scope(*from.scope_);
  } else {
    scope_ = nullptr;
  }
  kernel_frames_ = from.kernel_frames_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}

void PerfEventConfig_CallstackSampling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_frames_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(kernel_frames_));
}

PerfEventConfig_CallstackSampling::~PerfEventConfig_CallstackSampling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.CallstackSampling)
  SharedDtor();
}

void PerfEventConfig_CallstackSampling::SharedDtor() {
  if (this != internal_default_instance()) delete scope_;
}

void PerfEventConfig_CallstackSampling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_CallstackSampling& PerfEventConfig_CallstackSampling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_CallstackSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scope_ != nullptr);
    scope_->Clear();
  }
  kernel_frames_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_CallstackSampling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_scope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_CallstackSampling::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kernel_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_kernel_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kernel_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.CallstackSampling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.CallstackSampling)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_CallstackSampling::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::scope(this), output);
  }

  // optional bool kernel_frames = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->kernel_frames(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.CallstackSampling)
}

size_t PerfEventConfig_CallstackSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_);
    }

    // optional bool kernel_frames = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_CallstackSampling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_CallstackSampling*>(
      &from));
}

void PerfEventConfig_CallstackSampling::MergeFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scope()->::perfetto::protos::PerfEventConfig_Scope::MergeFrom(from.scope());
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_frames_ = from.kernel_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig_CallstackSampling::CopyFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_CallstackSampling::IsInitialized() const {
  return true;
}

void PerfEventConfig_CallstackSampling::InternalSwap(PerfEventConfig_CallstackSampling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scope_, other->scope_);
  swap(kernel_frames_, other->kernel_frames_);
}

std::string PerfEventConfig_CallstackSampling::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.CallstackSampling";
}


// ===================================================================

void PerfEventConfig_Scope::InitAsDefaultInstance() {
}
class PerfEventConfig_Scope::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Scope>()._has_bits_);
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfEventConfig_Scope::PerfEventConfig_Scope()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig.Scope)
}
PerfEventConfig_Scope::PerfEventConfig_Scope(const PerfEventConfig_Scope& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  additional_cmdline_count_ = from.additional_cmdline_count_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Scope)
}

void PerfEventConfig_Scope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  additional_cmdline_count_ = 0u;
}

PerfEventConfig_Scope::~PerfEventConfig_Scope() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Scope)
  SharedDtor();
}

void PerfEventConfig_Scope::SharedDtor() {
}

void PerfEventConfig_Scope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_Scope& PerfEventConfig_Scope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  additional_cmdline_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig_Scope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 target_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_target_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_exclude_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig_Scope::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig.Scope)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 target_pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_target_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_cmdline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exclude_pid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_exclude_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exclude_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_cmdline = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 additional_cmdline_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_additional_cmdline_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_cmdline_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig.Scope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig.Scope)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig_Scope::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  for (int i = 0, n = this->target_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->target_pid(i), output);
  }

  // repeated string target_cmdline = 2;
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->target_cmdline(i), output);
  }

  // repeated int32 exclude_pid = 3;
  for (int i = 0, n = this->exclude_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->exclude_pid(i), output);
  }

  // repeated string exclude_cmdline = 4;
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->exclude_cmdline(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_cmdline_count = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->additional_cmdline_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig.Scope)
}

size_t PerfEventConfig_Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Scope)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_cmdline_size());
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_cmdline(i));
  }

  // repeated int32 exclude_pid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_cmdline_size());
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_cmdline(i));
  }

  // optional uint32 additional_cmdline_count = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->additional_cmdline_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Scope::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_Scope*>(
      &from));
}

void PerfEventConfig_Scope::MergeFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  if (from.has_additional_cmdline_count()) {
    set_additional_cmdline_count(from.additional_cmdline_count());
  }
}

void PerfEventConfig_Scope::CopyFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Scope::IsInitialized() const {
  return true;
}

void PerfEventConfig_Scope::InternalSwap(PerfEventConfig_Scope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(CastToBase(&other->target_cmdline_));
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(CastToBase(&other->exclude_cmdline_));
  swap(additional_cmdline_count_, other->additional_cmdline_count_);
}

std::string PerfEventConfig_Scope::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Scope";
}


// ===================================================================

void PerfEventConfig::InitAsDefaultInstance() {
  ::perfetto::protos::_PerfEventConfig_default_instance_._instance.get_mutable()->timebase_ = const_cast< ::perfetto::protos::PerfEvents_Timebase*>(
      ::perfetto::protos::PerfEvents_Timebase::internal_default_instance());
  ::perfetto::protos::_PerfEventConfig_default_instance_._instance.get_mutable()->callstack_sampling_ = const_cast< ::perfetto::protos::PerfEventConfig_CallstackSampling*>(
      ::perfetto::protos::PerfEventConfig_CallstackSampling::internal_default_instance());
}
class PerfEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig>()._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfEventConfig* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling(const PerfEventConfig* msg);
  static void set_has_callstack_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ring_buffer_read_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ring_buffer_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_enqueued_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_daemon_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remote_descriptor_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unwind_state_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfEventConfig::_Internal::timebase(const PerfEventConfig* msg) {
  return *msg->timebase_;
}
const ::perfetto::protos::PerfEventConfig_CallstackSampling&
PerfEventConfig::_Internal::callstack_sampling(const PerfEventConfig* msg) {
  return *msg->callstack_sampling_;
}
void PerfEventConfig::clear_timebase() {
  if (timebase_ != nullptr) timebase_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PerfEventConfig::PerfEventConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.PerfEventConfig)
}
PerfEventConfig::PerfEventConfig(const PerfEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_),
      target_installed_by_(from.target_installed_by_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timebase()) {
    timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from.timebase_);
  } else {
    timebase_ = nullptr;
  }
  if (from.has_callstack_sampling()) {
    callstack_sampling_ = new ::perfetto::protos::PerfEventConfig_CallstackSampling(*from.callstack_sampling_);
  } else {
    callstack_sampling_ = nullptr;
  }
  ::memcpy(&sampling_frequency_, &from.sampling_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
    reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(max_enqueued_footprint_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig)
}

void PerfEventConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  ::memset(&timebase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
      reinterpret_cast<char*>(&timebase_)) + sizeof(max_enqueued_footprint_kb_));
}

PerfEventConfig::~PerfEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig)
  SharedDtor();
}

void PerfEventConfig::SharedDtor() {
  if (this != internal_default_instance()) delete timebase_;
  if (this != internal_default_instance()) delete callstack_sampling_;
}

void PerfEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig& PerfEventConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  target_installed_by_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timebase_ != nullptr);
      timebase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(callstack_sampling_ != nullptr);
      callstack_sampling_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sampling_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_descriptor_timeout_ms_) -
        reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(remote_descriptor_timeout_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&unwind_state_clear_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
        reinterpret_cast<char*>(&unwind_state_clear_period_ms_)) + sizeof(max_enqueued_footprint_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_cpus(&has_bits);
          all_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sampling_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sampling_frequency(&has_bits);
          sampling_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ring_buffer_pages(&has_bits);
          ring_buffer_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 target_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_target_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_exclude_cmdline(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ring_buffer_read_period_ms(&has_bits);
          ring_buffer_read_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&has_bits);
          remote_descriptor_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_unwind_state_clear_period_ms(&has_bits);
          unwind_state_clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_daemon_memory_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_daemon_memory_kb(&has_bits);
          max_daemon_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_timebase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_callstack_sampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_enqueued_footprint_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_enqueued_footprint_kb(&has_bits);
          max_enqueued_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_installed_by = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_target_installed_by(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfEventConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.PerfEventConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all_cpus = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_all_cpus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_cpus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sampling_frequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sampling_frequency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ring_buffer_pages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ring_buffer_pages(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_buffer_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 target_pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_target_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_target_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_cmdline = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exclude_pid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_exclude_pid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exclude_pid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_cmdline = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_cmdline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ring_buffer_read_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ring_buffer_read_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_descriptor_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_unwind_state_clear_period_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unwind_state_clear_period_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 additional_cmdline_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_additional_cmdline_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_cmdline_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool kernel_frames = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_kernel_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kernel_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_daemon_memory_kb = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_max_daemon_memory_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_daemon_memory_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timebase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_callstack_sampling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_enqueued_footprint_kb = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_max_enqueued_footprint_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_enqueued_footprint_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string target_installed_by = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_target_installed_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.PerfEventConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.PerfEventConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfEventConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_cpus = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->all_cpus(), output);
  }

  // optional uint32 sampling_frequency = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sampling_frequency(), output);
  }

  // optional uint32 ring_buffer_pages = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ring_buffer_pages(), output);
  }

  // repeated int32 target_pid = 4;
  for (int i = 0, n = this->target_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->target_pid(i), output);
  }

  // repeated string target_cmdline = 5;
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->target_cmdline(i), output);
  }

  // repeated int32 exclude_pid = 6;
  for (int i = 0, n = this->exclude_pid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->exclude_pid(i), output);
  }

  // repeated string exclude_cmdline = 7;
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->exclude_cmdline(i), output);
  }

  // optional uint32 ring_buffer_read_period_ms = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->ring_buffer_read_period_ms(), output);
  }

  // optional uint32 remote_descriptor_timeout_ms = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->remote_descriptor_timeout_ms(), output);
  }

  // optional uint32 unwind_state_clear_period_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->unwind_state_clear_period_ms(), output);
  }

  // optional uint32 additional_cmdline_count = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->additional_cmdline_count(), output);
  }

  // optional bool kernel_frames = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->kernel_frames(), output);
  }

  // optional uint32 max_daemon_memory_kb = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->max_daemon_memory_kb(), output);
  }

  // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::timebase(this), output);
  }

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::callstack_sampling(this), output);
  }

  // optional uint64 max_enqueued_footprint_kb = 17;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->max_enqueued_footprint_kb(), output);
  }

  // repeated string target_installed_by = 18;
  for (int i = 0, n = this->target_installed_by_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      18, this->target_installed_by(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.PerfEventConfig)
}

size_t PerfEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_cmdline_size());
  for (int i = 0, n = this->target_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_cmdline(i));
  }

  // repeated int32 exclude_pid = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_cmdline_size());
  for (int i = 0, n = this->exclude_cmdline_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_cmdline(i));
  }

  // repeated string target_installed_by = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_installed_by_size());
  for (int i = 0, n = this->target_installed_by_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->target_installed_by(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timebase_);
    }

    // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callstack_sampling_);
    }

    // optional uint32 sampling_frequency = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sampling_frequency());
    }

    // optional uint32 ring_buffer_pages = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ring_buffer_pages());
    }

    // optional bool all_cpus = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool kernel_frames = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 ring_buffer_read_period_ms = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ring_buffer_read_period_ms());
    }

    // optional uint32 remote_descriptor_timeout_ms = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->remote_descriptor_timeout_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 unwind_state_clear_period_ms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->unwind_state_clear_period_ms());
    }

    // optional uint32 additional_cmdline_count = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->additional_cmdline_count());
    }

    // optional uint32 max_daemon_memory_kb = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_daemon_memory_kb());
    }

    // optional uint64 max_enqueued_footprint_kb = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_enqueued_footprint_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig*>(
      &from));
}

void PerfEventConfig::MergeFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  target_installed_by_.MergeFrom(from.target_installed_by_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(from.timebase());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_callstack_sampling()->::perfetto::protos::PerfEventConfig_CallstackSampling::MergeFrom(from.callstack_sampling());
    }
    if (cached_has_bits & 0x00000004u) {
      sampling_frequency_ = from.sampling_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      ring_buffer_pages_ = from.ring_buffer_pages_;
    }
    if (cached_has_bits & 0x00000010u) {
      all_cpus_ = from.all_cpus_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_frames_ = from.kernel_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      ring_buffer_read_period_ms_ = from.ring_buffer_read_period_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      remote_descriptor_timeout_ms_ = from.remote_descriptor_timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      unwind_state_clear_period_ms_ = from.unwind_state_clear_period_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      additional_cmdline_count_ = from.additional_cmdline_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_daemon_memory_kb_ = from.max_daemon_memory_kb_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_enqueued_footprint_kb_ = from.max_enqueued_footprint_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig::CopyFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig::IsInitialized() const {
  return true;
}

void PerfEventConfig::InternalSwap(PerfEventConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(CastToBase(&other->target_cmdline_));
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(CastToBase(&other->exclude_cmdline_));
  target_installed_by_.InternalSwap(CastToBase(&other->target_installed_by_));
  swap(timebase_, other->timebase_);
  swap(callstack_sampling_, other->callstack_sampling_);
  swap(sampling_frequency_, other->sampling_frequency_);
  swap(ring_buffer_pages_, other->ring_buffer_pages_);
  swap(all_cpus_, other->all_cpus_);
  swap(kernel_frames_, other->kernel_frames_);
  swap(ring_buffer_read_period_ms_, other->ring_buffer_read_period_ms_);
  swap(remote_descriptor_timeout_ms_, other->remote_descriptor_timeout_ms_);
  swap(unwind_state_clear_period_ms_, other->unwind_state_clear_period_ms_);
  swap(additional_cmdline_count_, other->additional_cmdline_count_);
  swap(max_daemon_memory_kb_, other->max_daemon_memory_kb_);
  swap(max_enqueued_footprint_kb_, other->max_enqueued_footprint_kb_);
}

std::string PerfEventConfig::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_CallstackSampling >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_CallstackSampling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Scope >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig_Scope >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::PerfEventConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
