// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/test_extensions.proto

#include "protos/perfetto/trace/test_extensions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto;
namespace perfetto {
namespace protos {
class TestExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtension> _instance;
} _TestExtension_default_instance_;
class TestExtensionChildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestExtensionChild> _instance;
} _TestExtensionChild_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TestExtension_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestExtension_default_instance_;
    new (ptr) ::perfetto::protos::TestExtension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestExtension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtension_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestExtension_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto}, {}};

static void InitDefaultsscc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TestExtensionChild_default_instance_;
    new (ptr) ::perfetto::protos::TestExtensionChild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfetto::protos::TestExtensionChild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

void TestExtension::InitAsDefaultInstance() {
}
class TestExtension::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtension>()._has_bits_);
};

TestExtension::TestExtension()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestExtension)
}
TestExtension::TestExtension(const TestExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestExtension)
}

void TestExtension::SharedCtor() {
}

TestExtension::~TestExtension() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestExtension)
  SharedDtor();
}

void TestExtension::SharedDtor() {
}

void TestExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtension& TestExtension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtension_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto.base);
  return *internal_default_instance();
}


void TestExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestExtension::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestExtension)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestExtension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestExtension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestExtension::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestExtension)
}

size_t TestExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestExtension)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestExtension*>(
      &from));
}

void TestExtension::MergeFrom(const TestExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestExtension::CopyFrom(const TestExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtension::IsInitialized() const {
  return true;
}

void TestExtension::InternalSwap(TestExtension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string TestExtension::GetTypeName() const {
  return "perfetto.protos.TestExtension";
}


// ===================================================================

void TestExtensionChild::InitAsDefaultInstance() {
}
class TestExtensionChild::_Internal {
 public:
  using HasBits = decltype(std::declval<TestExtensionChild>()._has_bits_);
  static void set_has_child_field_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestExtensionChild::TestExtensionChild()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perfetto.protos.TestExtensionChild)
}
TestExtensionChild::TestExtensionChild(const TestExtensionChild& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  child_field_for_testing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_child_field_for_testing()) {
    child_field_for_testing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.child_field_for_testing_);
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TestExtensionChild)
}

void TestExtensionChild::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto.base);
  child_field_for_testing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestExtensionChild::~TestExtensionChild() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TestExtensionChild)
  SharedDtor();
}

void TestExtensionChild::SharedDtor() {
  child_field_for_testing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestExtensionChild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestExtensionChild& TestExtensionChild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestExtensionChild_protos_2fperfetto_2ftrace_2ftest_5fextensions_2eproto.base);
  return *internal_default_instance();
}


void TestExtensionChild::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TestExtensionChild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    child_field_for_testing_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TestExtensionChild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string child_field_for_testing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_child_field_for_testing(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TestExtensionChild::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:perfetto.protos.TestExtensionChild)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string child_field_for_testing = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_child_field_for_testing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perfetto.protos.TestExtensionChild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perfetto.protos.TestExtensionChild)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TestExtensionChild::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perfetto.protos.TestExtensionChild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string child_field_for_testing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->child_field_for_testing(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:perfetto.protos.TestExtensionChild)
}

size_t TestExtensionChild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TestExtensionChild)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string child_field_for_testing = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->child_field_for_testing());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestExtensionChild::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TestExtensionChild*>(
      &from));
}

void TestExtensionChild::MergeFrom(const TestExtensionChild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TestExtensionChild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child_field_for_testing()) {
    _has_bits_[0] |= 0x00000001u;
    child_field_for_testing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.child_field_for_testing_);
  }
}

void TestExtensionChild::CopyFrom(const TestExtensionChild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TestExtensionChild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestExtensionChild::IsInitialized() const {
  return true;
}

void TestExtensionChild::InternalSwap(TestExtensionChild* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_field_for_testing_.Swap(&other->child_field_for_testing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TestExtensionChild::GetTypeName() const {
  return "perfetto.protos.TestExtensionChild";
}

const std::string TestExtension_string_extension_for_testing_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtension::kStringExtensionForTestingFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  TestExtension::string_extension_for_testing(kStringExtensionForTestingFieldNumber, TestExtension_string_extension_for_testing_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtension::kIntExtensionForTestingFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedPrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::int32 >, 5, false >
  TestExtension::int_extension_for_testing(kIntExtensionForTestingFieldNumber, 0);
const std::string TestExtension_omitted_extension_for_testing_default("");
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtension::kOmittedExtensionForTestingFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  TestExtension::omitted_extension_for_testing(kOmittedExtensionForTestingFieldNumber, TestExtension_omitted_extension_for_testing_default);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestExtension::kNestedMessageExtensionForTestingFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::perfetto::protos::TrackEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::perfetto::protos::TestExtensionChild >, 11, false >
  TestExtension::nested_message_extension_for_testing(kNestedMessageExtensionForTestingFieldNumber, *::perfetto::protos::TestExtensionChild::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestExtension* Arena::CreateMaybeMessage< ::perfetto::protos::TestExtension >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TestExtensionChild* Arena::CreateMaybeMessage< ::perfetto::protos::TestExtensionChild >(Arena* arena) {
  return Arena::CreateInternal< ::perfetto::protos::TestExtensionChild >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
