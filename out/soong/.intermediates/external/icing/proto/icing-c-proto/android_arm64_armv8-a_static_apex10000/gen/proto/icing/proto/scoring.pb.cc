// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/scoring.proto

#include "icing/proto/scoring.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace icing {
namespace lib {
class ScoringSpecProto_RankingStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoringSpecProto_RankingStrategy> _instance;
} _ScoringSpecProto_RankingStrategy_default_instance_;
class ScoringSpecProto_OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoringSpecProto_Order> _instance;
} _ScoringSpecProto_Order_default_instance_;
class ScoringSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoringSpecProto> _instance;
} _ScoringSpecProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_ScoringSpecProto_icing_2fproto_2fscoring_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ScoringSpecProto_default_instance_;
    new (ptr) ::icing::lib::ScoringSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ScoringSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScoringSpecProto_icing_2fproto_2fscoring_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScoringSpecProto_icing_2fproto_2fscoring_2eproto}, {}};

static void InitDefaultsscc_info_ScoringSpecProto_Order_icing_2fproto_2fscoring_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ScoringSpecProto_Order_default_instance_;
    new (ptr) ::icing::lib::ScoringSpecProto_Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ScoringSpecProto_Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScoringSpecProto_Order_icing_2fproto_2fscoring_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScoringSpecProto_Order_icing_2fproto_2fscoring_2eproto}, {}};

static void InitDefaultsscc_info_ScoringSpecProto_RankingStrategy_icing_2fproto_2fscoring_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ScoringSpecProto_RankingStrategy_default_instance_;
    new (ptr) ::icing::lib::ScoringSpecProto_RankingStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ScoringSpecProto_RankingStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScoringSpecProto_RankingStrategy_icing_2fproto_2fscoring_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScoringSpecProto_RankingStrategy_icing_2fproto_2fscoring_2eproto}, {}};

namespace icing {
namespace lib {
bool ScoringSpecProto_RankingStrategy_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScoringSpecProto_RankingStrategy_Code_strings[10] = {};

static const char ScoringSpecProto_RankingStrategy_Code_names[] =
  "CREATION_TIMESTAMP"
  "DOCUMENT_SCORE"
  "NONE"
  "RELEVANCE_SCORE"
  "USAGE_TYPE1_COUNT"
  "USAGE_TYPE1_LAST_USED_TIMESTAMP"
  "USAGE_TYPE2_COUNT"
  "USAGE_TYPE2_LAST_USED_TIMESTAMP"
  "USAGE_TYPE3_COUNT"
  "USAGE_TYPE3_LAST_USED_TIMESTAMP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScoringSpecProto_RankingStrategy_Code_entries[] = {
  { {ScoringSpecProto_RankingStrategy_Code_names + 0, 18}, 2 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 18, 14}, 1 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 32, 4}, 0 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 36, 15}, 9 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 51, 17}, 3 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 68, 31}, 6 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 99, 17}, 4 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 116, 31}, 7 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 147, 17}, 5 },
  { {ScoringSpecProto_RankingStrategy_Code_names + 164, 31}, 8 },
};

static const int ScoringSpecProto_RankingStrategy_Code_entries_by_number[] = {
  2, // 0 -> NONE
  1, // 1 -> DOCUMENT_SCORE
  0, // 2 -> CREATION_TIMESTAMP
  4, // 3 -> USAGE_TYPE1_COUNT
  6, // 4 -> USAGE_TYPE2_COUNT
  8, // 5 -> USAGE_TYPE3_COUNT
  5, // 6 -> USAGE_TYPE1_LAST_USED_TIMESTAMP
  7, // 7 -> USAGE_TYPE2_LAST_USED_TIMESTAMP
  9, // 8 -> USAGE_TYPE3_LAST_USED_TIMESTAMP
  3, // 9 -> RELEVANCE_SCORE
};

const std::string& ScoringSpecProto_RankingStrategy_Code_Name(
    ScoringSpecProto_RankingStrategy_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScoringSpecProto_RankingStrategy_Code_entries,
          ScoringSpecProto_RankingStrategy_Code_entries_by_number,
          10, ScoringSpecProto_RankingStrategy_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScoringSpecProto_RankingStrategy_Code_entries,
      ScoringSpecProto_RankingStrategy_Code_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScoringSpecProto_RankingStrategy_Code_strings[idx].get();
}
bool ScoringSpecProto_RankingStrategy_Code_Parse(
    const std::string& name, ScoringSpecProto_RankingStrategy_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScoringSpecProto_RankingStrategy_Code_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<ScoringSpecProto_RankingStrategy_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::NONE;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::DOCUMENT_SCORE;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::CREATION_TIMESTAMP;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE1_COUNT;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE2_COUNT;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE3_COUNT;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE1_LAST_USED_TIMESTAMP;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE2_LAST_USED_TIMESTAMP;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::USAGE_TYPE3_LAST_USED_TIMESTAMP;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::RELEVANCE_SCORE;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::Code_MIN;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy::Code_MAX;
constexpr int ScoringSpecProto_RankingStrategy::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ScoringSpecProto_Order_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScoringSpecProto_Order_Code_strings[2] = {};

static const char ScoringSpecProto_Order_Code_names[] =
  "ASC"
  "DESC";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScoringSpecProto_Order_Code_entries[] = {
  { {ScoringSpecProto_Order_Code_names + 0, 3}, 1 },
  { {ScoringSpecProto_Order_Code_names + 3, 4}, 0 },
};

static const int ScoringSpecProto_Order_Code_entries_by_number[] = {
  1, // 0 -> DESC
  0, // 1 -> ASC
};

const std::string& ScoringSpecProto_Order_Code_Name(
    ScoringSpecProto_Order_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScoringSpecProto_Order_Code_entries,
          ScoringSpecProto_Order_Code_entries_by_number,
          2, ScoringSpecProto_Order_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScoringSpecProto_Order_Code_entries,
      ScoringSpecProto_Order_Code_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScoringSpecProto_Order_Code_strings[idx].get();
}
bool ScoringSpecProto_Order_Code_Parse(
    const std::string& name, ScoringSpecProto_Order_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScoringSpecProto_Order_Code_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ScoringSpecProto_Order_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order::DESC;
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order::ASC;
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order::Code_MIN;
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order::Code_MAX;
constexpr int ScoringSpecProto_Order::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ScoringSpecProto_RankingStrategy::InitAsDefaultInstance() {
}
class ScoringSpecProto_RankingStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoringSpecProto_RankingStrategy>()._has_bits_);
};

ScoringSpecProto_RankingStrategy::ScoringSpecProto_RankingStrategy()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ScoringSpecProto.RankingStrategy)
}
ScoringSpecProto_RankingStrategy::ScoringSpecProto_RankingStrategy(const ScoringSpecProto_RankingStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.ScoringSpecProto.RankingStrategy)
}

void ScoringSpecProto_RankingStrategy::SharedCtor() {
}

ScoringSpecProto_RankingStrategy::~ScoringSpecProto_RankingStrategy() {
  // @@protoc_insertion_point(destructor:icing.lib.ScoringSpecProto.RankingStrategy)
  SharedDtor();
}

void ScoringSpecProto_RankingStrategy::SharedDtor() {
}

void ScoringSpecProto_RankingStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoringSpecProto_RankingStrategy& ScoringSpecProto_RankingStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoringSpecProto_RankingStrategy_icing_2fproto_2fscoring_2eproto.base);
  return *internal_default_instance();
}


void ScoringSpecProto_RankingStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ScoringSpecProto.RankingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoringSpecProto_RankingStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoringSpecProto_RankingStrategy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ScoringSpecProto.RankingStrategy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ScoringSpecProto.RankingStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ScoringSpecProto.RankingStrategy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoringSpecProto_RankingStrategy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ScoringSpecProto.RankingStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ScoringSpecProto.RankingStrategy)
}

size_t ScoringSpecProto_RankingStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ScoringSpecProto.RankingStrategy)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoringSpecProto_RankingStrategy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScoringSpecProto_RankingStrategy*>(
      &from));
}

void ScoringSpecProto_RankingStrategy::MergeFrom(const ScoringSpecProto_RankingStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ScoringSpecProto.RankingStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScoringSpecProto_RankingStrategy::CopyFrom(const ScoringSpecProto_RankingStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ScoringSpecProto.RankingStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoringSpecProto_RankingStrategy::IsInitialized() const {
  return true;
}

void ScoringSpecProto_RankingStrategy::InternalSwap(ScoringSpecProto_RankingStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ScoringSpecProto_RankingStrategy::GetTypeName() const {
  return "icing.lib.ScoringSpecProto.RankingStrategy";
}


// ===================================================================

void ScoringSpecProto_Order::InitAsDefaultInstance() {
}
class ScoringSpecProto_Order::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoringSpecProto_Order>()._has_bits_);
};

ScoringSpecProto_Order::ScoringSpecProto_Order()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ScoringSpecProto.Order)
}
ScoringSpecProto_Order::ScoringSpecProto_Order(const ScoringSpecProto_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.ScoringSpecProto.Order)
}

void ScoringSpecProto_Order::SharedCtor() {
}

ScoringSpecProto_Order::~ScoringSpecProto_Order() {
  // @@protoc_insertion_point(destructor:icing.lib.ScoringSpecProto.Order)
  SharedDtor();
}

void ScoringSpecProto_Order::SharedDtor() {
}

void ScoringSpecProto_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoringSpecProto_Order& ScoringSpecProto_Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoringSpecProto_Order_icing_2fproto_2fscoring_2eproto.base);
  return *internal_default_instance();
}


void ScoringSpecProto_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ScoringSpecProto.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoringSpecProto_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoringSpecProto_Order::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ScoringSpecProto.Order)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ScoringSpecProto.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ScoringSpecProto.Order)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoringSpecProto_Order::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ScoringSpecProto.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ScoringSpecProto.Order)
}

size_t ScoringSpecProto_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ScoringSpecProto.Order)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoringSpecProto_Order::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScoringSpecProto_Order*>(
      &from));
}

void ScoringSpecProto_Order::MergeFrom(const ScoringSpecProto_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ScoringSpecProto.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScoringSpecProto_Order::CopyFrom(const ScoringSpecProto_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ScoringSpecProto.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoringSpecProto_Order::IsInitialized() const {
  return true;
}

void ScoringSpecProto_Order::InternalSwap(ScoringSpecProto_Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ScoringSpecProto_Order::GetTypeName() const {
  return "icing.lib.ScoringSpecProto.Order";
}


// ===================================================================

void ScoringSpecProto::InitAsDefaultInstance() {
}
class ScoringSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoringSpecProto>()._has_bits_);
  static void set_has_rank_by(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order_by(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScoringSpecProto::ScoringSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ScoringSpecProto)
}
ScoringSpecProto::ScoringSpecProto(const ScoringSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rank_by_, &from.rank_by_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_by_) -
    reinterpret_cast<char*>(&rank_by_)) + sizeof(order_by_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.ScoringSpecProto)
}

void ScoringSpecProto::SharedCtor() {
  ::memset(&rank_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_by_) -
      reinterpret_cast<char*>(&rank_by_)) + sizeof(order_by_));
}

ScoringSpecProto::~ScoringSpecProto() {
  // @@protoc_insertion_point(destructor:icing.lib.ScoringSpecProto)
  SharedDtor();
}

void ScoringSpecProto::SharedDtor() {
}

void ScoringSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoringSpecProto& ScoringSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoringSpecProto_icing_2fproto_2fscoring_2eproto.base);
  return *internal_default_instance();
}


void ScoringSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ScoringSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&rank_by_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_by_) -
        reinterpret_cast<char*>(&rank_by_)) + sizeof(order_by_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoringSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(val))) {
            set_rank_by(static_cast<::icing::lib::ScoringSpecProto_RankingStrategy_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::ScoringSpecProto_Order_Code_IsValid(val))) {
            set_order_by(static_cast<::icing::lib::ScoringSpecProto_Order_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoringSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ScoringSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(value)) {
            set_rank_by(static_cast< ::icing::lib::ScoringSpecProto_RankingStrategy_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::ScoringSpecProto_Order_Code_IsValid(value)) {
            set_order_by(static_cast< ::icing::lib::ScoringSpecProto_Order_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ScoringSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ScoringSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoringSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ScoringSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rank_by(), output);
  }

  // optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->order_by(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ScoringSpecProto)
}

size_t ScoringSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ScoringSpecProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rank_by());
    }

    // optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->order_by());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoringSpecProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScoringSpecProto*>(
      &from));
}

void ScoringSpecProto::MergeFrom(const ScoringSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ScoringSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rank_by_ = from.rank_by_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_by_ = from.order_by_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoringSpecProto::CopyFrom(const ScoringSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ScoringSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoringSpecProto::IsInitialized() const {
  return true;
}

void ScoringSpecProto::InternalSwap(ScoringSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rank_by_, other->rank_by_);
  swap(order_by_, other->order_by_);
}

std::string ScoringSpecProto::GetTypeName() const {
  return "icing.lib.ScoringSpecProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::ScoringSpecProto_RankingStrategy* Arena::CreateMaybeMessage< ::icing::lib::ScoringSpecProto_RankingStrategy >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ScoringSpecProto_RankingStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::ScoringSpecProto_Order* Arena::CreateMaybeMessage< ::icing::lib::ScoringSpecProto_Order >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ScoringSpecProto_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::ScoringSpecProto* Arena::CreateMaybeMessage< ::icing::lib::ScoringSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ScoringSpecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
