// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/initialize.proto

#include "icing/proto/initialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
namespace icing {
namespace lib {
class IcingSearchEngineOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IcingSearchEngineOptions> _instance;
} _IcingSearchEngineOptions_default_instance_;
class InitializeResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitializeResultProto> _instance;
} _InitializeResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_IcingSearchEngineOptions_icing_2fproto_2finitialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_IcingSearchEngineOptions_default_instance_;
    new (ptr) ::icing::lib::IcingSearchEngineOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::IcingSearchEngineOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IcingSearchEngineOptions_icing_2fproto_2finitialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IcingSearchEngineOptions_icing_2fproto_2finitialize_2eproto}, {}};

static void InitDefaultsscc_info_InitializeResultProto_icing_2fproto_2finitialize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_InitializeResultProto_default_instance_;
    new (ptr) ::icing::lib::InitializeResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::InitializeResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitializeResultProto_icing_2fproto_2finitialize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InitializeResultProto_icing_2fproto_2finitialize_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto.base,}};

namespace icing {
namespace lib {

// ===================================================================

void IcingSearchEngineOptions::InitAsDefaultInstance() {
}
class IcingSearchEngineOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<IcingSearchEngineOptions>()._has_bits_);
  static void set_has_base_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_tokens_per_doc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_token_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index_merge_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IcingSearchEngineOptions::IcingSearchEngineOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.IcingSearchEngineOptions)
}
IcingSearchEngineOptions::IcingSearchEngineOptions(const IcingSearchEngineOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_dir()) {
    base_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_dir_);
  }
  ::memcpy(&index_merge_size_, &from.index_merge_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_token_length_) -
    reinterpret_cast<char*>(&index_merge_size_)) + sizeof(max_token_length_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.IcingSearchEngineOptions)
}

void IcingSearchEngineOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IcingSearchEngineOptions_icing_2fproto_2finitialize_2eproto.base);
  base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_merge_size_ = 1048576;
  max_tokens_per_doc_ = 13107;
  max_token_length_ = 30;
}

IcingSearchEngineOptions::~IcingSearchEngineOptions() {
  // @@protoc_insertion_point(destructor:icing.lib.IcingSearchEngineOptions)
  SharedDtor();
}

void IcingSearchEngineOptions::SharedDtor() {
  base_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IcingSearchEngineOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IcingSearchEngineOptions& IcingSearchEngineOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IcingSearchEngineOptions_icing_2fproto_2finitialize_2eproto.base);
  return *internal_default_instance();
}


void IcingSearchEngineOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.IcingSearchEngineOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      base_dir_.ClearNonDefaultToEmptyNoArena();
    }
    index_merge_size_ = 1048576;
    max_tokens_per_doc_ = 13107;
    max_token_length_ = 30;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IcingSearchEngineOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string base_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_base_dir(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_tokens_per_doc = 2 [default = 13107];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_tokens_per_doc(&has_bits);
          max_tokens_per_doc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_token_length = 3 [default = 30];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_token_length(&has_bits);
          max_token_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index_merge_size = 4 [default = 1048576];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_index_merge_size(&has_bits);
          index_merge_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IcingSearchEngineOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.IcingSearchEngineOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string base_dir = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_base_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_tokens_per_doc = 2 [default = 13107];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_tokens_per_doc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_tokens_per_doc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_token_length = 3 [default = 30];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_token_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_token_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_merge_size = 4 [default = 1048576];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_index_merge_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_merge_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.IcingSearchEngineOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.IcingSearchEngineOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IcingSearchEngineOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.IcingSearchEngineOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string base_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->base_dir(), output);
  }

  // optional int32 max_tokens_per_doc = 2 [default = 13107];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_tokens_per_doc(), output);
  }

  // optional int32 max_token_length = 3 [default = 30];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_token_length(), output);
  }

  // optional int32 index_merge_size = 4 [default = 1048576];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->index_merge_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.IcingSearchEngineOptions)
}

size_t IcingSearchEngineOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.IcingSearchEngineOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string base_dir = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->base_dir());
    }

    // optional int32 index_merge_size = 4 [default = 1048576];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index_merge_size());
    }

    // optional int32 max_tokens_per_doc = 2 [default = 13107];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_tokens_per_doc());
    }

    // optional int32 max_token_length = 3 [default = 30];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_token_length());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IcingSearchEngineOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IcingSearchEngineOptions*>(
      &from));
}

void IcingSearchEngineOptions::MergeFrom(const IcingSearchEngineOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.IcingSearchEngineOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      base_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      index_merge_size_ = from.index_merge_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_tokens_per_doc_ = from.max_tokens_per_doc_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_token_length_ = from.max_token_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IcingSearchEngineOptions::CopyFrom(const IcingSearchEngineOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.IcingSearchEngineOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IcingSearchEngineOptions::IsInitialized() const {
  return true;
}

void IcingSearchEngineOptions::InternalSwap(IcingSearchEngineOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_dir_.Swap(&other->base_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_merge_size_, other->index_merge_size_);
  swap(max_tokens_per_doc_, other->max_tokens_per_doc_);
  swap(max_token_length_, other->max_token_length_);
}

std::string IcingSearchEngineOptions::GetTypeName() const {
  return "icing.lib.IcingSearchEngineOptions";
}


// ===================================================================

void InitializeResultProto::InitAsDefaultInstance() {
  ::icing::lib::_InitializeResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_InitializeResultProto_default_instance_._instance.get_mutable()->initialize_stats_ = const_cast< ::icing::lib::InitializeStatsProto*>(
      ::icing::lib::InitializeStatsProto::internal_default_instance());
}
class InitializeResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InitializeResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const InitializeResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::InitializeStatsProto& initialize_stats(const InitializeResultProto* msg);
  static void set_has_initialize_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
InitializeResultProto::_Internal::status(const InitializeResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::InitializeStatsProto&
InitializeResultProto::_Internal::initialize_stats(const InitializeResultProto* msg) {
  return *msg->initialize_stats_;
}
void InitializeResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeResultProto::clear_initialize_stats() {
  if (initialize_stats_ != nullptr) initialize_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
InitializeResultProto::InitializeResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.InitializeResultProto)
}
InitializeResultProto::InitializeResultProto(const InitializeResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_initialize_stats()) {
    initialize_stats_ = new ::icing::lib::InitializeStatsProto(*from.initialize_stats_);
  } else {
    initialize_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.InitializeResultProto)
}

void InitializeResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitializeResultProto_icing_2fproto_2finitialize_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initialize_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(initialize_stats_));
}

InitializeResultProto::~InitializeResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.InitializeResultProto)
  SharedDtor();
}

void InitializeResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete initialize_stats_;
}

void InitializeResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitializeResultProto& InitializeResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitializeResultProto_icing_2fproto_2finitialize_2eproto.base);
  return *internal_default_instance();
}


void InitializeResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.InitializeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(initialize_stats_ != nullptr);
      initialize_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitializeResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.InitializeStatsProto initialize_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_initialize_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitializeResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.InitializeResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.InitializeStatsProto initialize_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initialize_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.InitializeResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.InitializeResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitializeResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.InitializeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.InitializeStatsProto initialize_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::initialize_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.InitializeResultProto)
}

size_t InitializeResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.InitializeResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.InitializeStatsProto initialize_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *initialize_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitializeResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InitializeResultProto*>(
      &from));
}

void InitializeResultProto::MergeFrom(const InitializeResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.InitializeResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_initialize_stats()->::icing::lib::InitializeStatsProto::MergeFrom(from.initialize_stats());
    }
  }
}

void InitializeResultProto::CopyFrom(const InitializeResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.InitializeResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeResultProto::IsInitialized() const {
  return true;
}

void InitializeResultProto::InternalSwap(InitializeResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(initialize_stats_, other->initialize_stats_);
}

std::string InitializeResultProto::GetTypeName() const {
  return "icing.lib.InitializeResultProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::IcingSearchEngineOptions* Arena::CreateMaybeMessage< ::icing::lib::IcingSearchEngineOptions >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::IcingSearchEngineOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::InitializeResultProto* Arena::CreateMaybeMessage< ::icing::lib::InitializeResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::InitializeResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
