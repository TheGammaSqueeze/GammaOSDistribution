// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/persist.proto

#include "icing/proto/persist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
namespace icing {
namespace lib {
class PersistTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistType> _instance;
} _PersistType_default_instance_;
class PersistToDiskResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistToDiskResultProto> _instance;
} _PersistToDiskResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_PersistToDiskResultProto_icing_2fproto_2fpersist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PersistToDiskResultProto_default_instance_;
    new (ptr) ::icing::lib::PersistToDiskResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PersistToDiskResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersistToDiskResultProto_icing_2fproto_2fpersist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PersistToDiskResultProto_icing_2fproto_2fpersist_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PersistType_icing_2fproto_2fpersist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PersistType_default_instance_;
    new (ptr) ::icing::lib::PersistType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PersistType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PersistType_icing_2fproto_2fpersist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PersistType_icing_2fproto_2fpersist_2eproto}, {}};

namespace icing {
namespace lib {
bool PersistType_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PersistType_Code_strings[3] = {};

static const char PersistType_Code_names[] =
  "FULL"
  "LITE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PersistType_Code_entries[] = {
  { {PersistType_Code_names + 0, 4}, 2 },
  { {PersistType_Code_names + 4, 4}, 1 },
  { {PersistType_Code_names + 8, 7}, 0 },
};

static const int PersistType_Code_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> LITE
  0, // 2 -> FULL
};

const std::string& PersistType_Code_Name(
    PersistType_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PersistType_Code_entries,
          PersistType_Code_entries_by_number,
          3, PersistType_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PersistType_Code_entries,
      PersistType_Code_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PersistType_Code_strings[idx].get();
}
bool PersistType_Code_Parse(
    const std::string& name, PersistType_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PersistType_Code_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PersistType_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PersistType_Code PersistType::UNKNOWN;
constexpr PersistType_Code PersistType::LITE;
constexpr PersistType_Code PersistType::FULL;
constexpr PersistType_Code PersistType::Code_MIN;
constexpr PersistType_Code PersistType::Code_MAX;
constexpr int PersistType::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PersistType::InitAsDefaultInstance() {
}
class PersistType::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistType>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PersistType::PersistType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PersistType)
}
PersistType::PersistType(const PersistType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.PersistType)
}

void PersistType::SharedCtor() {
  code_ = 0;
}

PersistType::~PersistType() {
  // @@protoc_insertion_point(destructor:icing.lib.PersistType)
  SharedDtor();
}

void PersistType::SharedDtor() {
}

void PersistType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistType& PersistType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistType_icing_2fproto_2fpersist_2eproto.base);
  return *internal_default_instance();
}


void PersistType::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PersistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.PersistType.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::PersistType_Code_IsValid(val))) {
            set_code(static_cast<::icing::lib::PersistType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PersistType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.PersistType.Code code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::PersistType_Code_IsValid(value)) {
            set_code(static_cast< ::icing::lib::PersistType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PersistType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PersistType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PersistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.PersistType.Code code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PersistType)
}

size_t PersistType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PersistType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .icing.lib.PersistType.Code code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PersistType*>(
      &from));
}

void PersistType::MergeFrom(const PersistType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PersistType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    set_code(from.code());
  }
}

void PersistType::CopyFrom(const PersistType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PersistType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistType::IsInitialized() const {
  return true;
}

void PersistType::InternalSwap(PersistType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
}

std::string PersistType::GetTypeName() const {
  return "icing.lib.PersistType";
}


// ===================================================================

void PersistToDiskResultProto::InitAsDefaultInstance() {
  ::icing::lib::_PersistToDiskResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
}
class PersistToDiskResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistToDiskResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const PersistToDiskResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::icing::lib::StatusProto&
PersistToDiskResultProto::_Internal::status(const PersistToDiskResultProto* msg) {
  return *msg->status_;
}
void PersistToDiskResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PersistToDiskResultProto::PersistToDiskResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PersistToDiskResultProto)
}
PersistToDiskResultProto::PersistToDiskResultProto(const PersistToDiskResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.PersistToDiskResultProto)
}

void PersistToDiskResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistToDiskResultProto_icing_2fproto_2fpersist_2eproto.base);
  status_ = nullptr;
}

PersistToDiskResultProto::~PersistToDiskResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.PersistToDiskResultProto)
  SharedDtor();
}

void PersistToDiskResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void PersistToDiskResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistToDiskResultProto& PersistToDiskResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistToDiskResultProto_icing_2fproto_2fpersist_2eproto.base);
  return *internal_default_instance();
}


void PersistToDiskResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PersistToDiskResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistToDiskResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistToDiskResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PersistToDiskResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PersistToDiskResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PersistToDiskResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistToDiskResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PersistToDiskResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PersistToDiskResultProto)
}

size_t PersistToDiskResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PersistToDiskResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .icing.lib.StatusProto status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistToDiskResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PersistToDiskResultProto*>(
      &from));
}

void PersistToDiskResultProto::MergeFrom(const PersistToDiskResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PersistToDiskResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
  }
}

void PersistToDiskResultProto::CopyFrom(const PersistToDiskResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PersistToDiskResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistToDiskResultProto::IsInitialized() const {
  return true;
}

void PersistToDiskResultProto::InternalSwap(PersistToDiskResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

std::string PersistToDiskResultProto::GetTypeName() const {
  return "icing.lib.PersistToDiskResultProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::PersistType* Arena::CreateMaybeMessage< ::icing::lib::PersistType >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PersistType >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PersistToDiskResultProto* Arena::CreateMaybeMessage< ::icing::lib::PersistToDiskResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PersistToDiskResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
