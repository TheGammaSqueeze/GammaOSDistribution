// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/optimize.proto

#include "icing/proto/optimize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2foptimize_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
namespace icing {
namespace lib {
class OptimizeResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptimizeResultProto> _instance;
} _OptimizeResultProto_default_instance_;
class GetOptimizeInfoResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOptimizeInfoResultProto> _instance;
} _GetOptimizeInfoResultProto_default_instance_;
class OptimizeStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptimizeStatsProto> _instance;
} _OptimizeStatsProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_GetOptimizeInfoResultProto_icing_2fproto_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetOptimizeInfoResultProto_default_instance_;
    new (ptr) ::icing::lib::GetOptimizeInfoResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetOptimizeInfoResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOptimizeInfoResultProto_icing_2fproto_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetOptimizeInfoResultProto_icing_2fproto_2foptimize_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_OptimizeResultProto_icing_2fproto_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_OptimizeResultProto_default_instance_;
    new (ptr) ::icing::lib::OptimizeResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::OptimizeResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OptimizeResultProto_icing_2fproto_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OptimizeResultProto_icing_2fproto_2foptimize_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto.base,}};

static void InitDefaultsscc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_OptimizeStatsProto_default_instance_;
    new (ptr) ::icing::lib::OptimizeStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::OptimizeStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto}, {}};

namespace icing {
namespace lib {

// ===================================================================

void OptimizeResultProto::InitAsDefaultInstance() {
  ::icing::lib::_OptimizeResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_OptimizeResultProto_default_instance_._instance.get_mutable()->optimize_stats_ = const_cast< ::icing::lib::OptimizeStatsProto*>(
      ::icing::lib::OptimizeStatsProto::internal_default_instance());
}
class OptimizeResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OptimizeResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const OptimizeResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::OptimizeStatsProto& optimize_stats(const OptimizeResultProto* msg);
  static void set_has_optimize_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
OptimizeResultProto::_Internal::status(const OptimizeResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::OptimizeStatsProto&
OptimizeResultProto::_Internal::optimize_stats(const OptimizeResultProto* msg) {
  return *msg->optimize_stats_;
}
void OptimizeResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OptimizeResultProto::OptimizeResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.OptimizeResultProto)
}
OptimizeResultProto::OptimizeResultProto(const OptimizeResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_optimize_stats()) {
    optimize_stats_ = new ::icing::lib::OptimizeStatsProto(*from.optimize_stats_);
  } else {
    optimize_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.OptimizeResultProto)
}

void OptimizeResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OptimizeResultProto_icing_2fproto_2foptimize_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimize_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(optimize_stats_));
}

OptimizeResultProto::~OptimizeResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.OptimizeResultProto)
  SharedDtor();
}

void OptimizeResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete optimize_stats_;
}

void OptimizeResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptimizeResultProto& OptimizeResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptimizeResultProto_icing_2fproto_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void OptimizeResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.OptimizeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(optimize_stats_ != nullptr);
      optimize_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptimizeResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_optimize_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptimizeResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.OptimizeResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_optimize_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.OptimizeResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.OptimizeResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptimizeResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.OptimizeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::optimize_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.OptimizeResultProto)
}

size_t OptimizeResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.OptimizeResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimize_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizeResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OptimizeResultProto*>(
      &from));
}

void OptimizeResultProto::MergeFrom(const OptimizeResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.OptimizeResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_optimize_stats()->::icing::lib::OptimizeStatsProto::MergeFrom(from.optimize_stats());
    }
  }
}

void OptimizeResultProto::CopyFrom(const OptimizeResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.OptimizeResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizeResultProto::IsInitialized() const {
  return true;
}

void OptimizeResultProto::InternalSwap(OptimizeResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(optimize_stats_, other->optimize_stats_);
}

std::string OptimizeResultProto::GetTypeName() const {
  return "icing.lib.OptimizeResultProto";
}


// ===================================================================

void GetOptimizeInfoResultProto::InitAsDefaultInstance() {
  ::icing::lib::_GetOptimizeInfoResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
}
class GetOptimizeInfoResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOptimizeInfoResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const GetOptimizeInfoResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optimizable_docs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_estimated_optimizable_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_since_last_optimize_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::icing::lib::StatusProto&
GetOptimizeInfoResultProto::_Internal::status(const GetOptimizeInfoResultProto* msg) {
  return *msg->status_;
}
void GetOptimizeInfoResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetOptimizeInfoResultProto::GetOptimizeInfoResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetOptimizeInfoResultProto)
}
GetOptimizeInfoResultProto::GetOptimizeInfoResultProto(const GetOptimizeInfoResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&optimizable_docs_, &from.optimizable_docs_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_since_last_optimize_ms_) -
    reinterpret_cast<char*>(&optimizable_docs_)) + sizeof(time_since_last_optimize_ms_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetOptimizeInfoResultProto)
}

void GetOptimizeInfoResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOptimizeInfoResultProto_icing_2fproto_2foptimize_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_since_last_optimize_ms_) -
      reinterpret_cast<char*>(&status_)) + sizeof(time_since_last_optimize_ms_));
}

GetOptimizeInfoResultProto::~GetOptimizeInfoResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetOptimizeInfoResultProto)
  SharedDtor();
}

void GetOptimizeInfoResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetOptimizeInfoResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOptimizeInfoResultProto& GetOptimizeInfoResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOptimizeInfoResultProto_icing_2fproto_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void GetOptimizeInfoResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetOptimizeInfoResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&optimizable_docs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_since_last_optimize_ms_) -
        reinterpret_cast<char*>(&optimizable_docs_)) + sizeof(time_since_last_optimize_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOptimizeInfoResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 optimizable_docs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optimizable_docs(&has_bits);
          optimizable_docs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 estimated_optimizable_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_estimated_optimizable_bytes(&has_bits);
          estimated_optimizable_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_optimize_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_since_last_optimize_ms(&has_bits);
          time_since_last_optimize_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOptimizeInfoResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetOptimizeInfoResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 optimizable_docs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_optimizable_docs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &optimizable_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 estimated_optimizable_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_estimated_optimizable_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &estimated_optimizable_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_optimize_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_time_since_last_optimize_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_optimize_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetOptimizeInfoResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetOptimizeInfoResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOptimizeInfoResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetOptimizeInfoResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional int64 optimizable_docs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->optimizable_docs(), output);
  }

  // optional int64 estimated_optimizable_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->estimated_optimizable_bytes(), output);
  }

  // optional int64 time_since_last_optimize_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->time_since_last_optimize_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetOptimizeInfoResultProto)
}

size_t GetOptimizeInfoResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetOptimizeInfoResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 optimizable_docs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->optimizable_docs());
    }

    // optional int64 estimated_optimizable_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->estimated_optimizable_bytes());
    }

    // optional int64 time_since_last_optimize_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_since_last_optimize_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOptimizeInfoResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetOptimizeInfoResultProto*>(
      &from));
}

void GetOptimizeInfoResultProto::MergeFrom(const GetOptimizeInfoResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetOptimizeInfoResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      optimizable_docs_ = from.optimizable_docs_;
    }
    if (cached_has_bits & 0x00000004u) {
      estimated_optimizable_bytes_ = from.estimated_optimizable_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_since_last_optimize_ms_ = from.time_since_last_optimize_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetOptimizeInfoResultProto::CopyFrom(const GetOptimizeInfoResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetOptimizeInfoResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOptimizeInfoResultProto::IsInitialized() const {
  return true;
}

void GetOptimizeInfoResultProto::InternalSwap(GetOptimizeInfoResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(optimizable_docs_, other->optimizable_docs_);
  swap(estimated_optimizable_bytes_, other->estimated_optimizable_bytes_);
  swap(time_since_last_optimize_ms_, other->time_since_last_optimize_ms_);
}

std::string GetOptimizeInfoResultProto::GetTypeName() const {
  return "icing.lib.GetOptimizeInfoResultProto";
}


// ===================================================================

void OptimizeStatsProto::InitAsDefaultInstance() {
}
class OptimizeStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OptimizeStatsProto>()._has_bits_);
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_document_store_optimize_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index_restoration_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_original_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_deleted_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_expired_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_storage_size_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_storage_size_after(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_since_last_optimize_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

OptimizeStatsProto::OptimizeStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.OptimizeStatsProto)
}
OptimizeStatsProto::OptimizeStatsProto(const OptimizeStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_since_last_optimize_ms_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(time_since_last_optimize_ms_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.OptimizeStatsProto)
}

void OptimizeStatsProto::SharedCtor() {
  ::memset(&latency_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_since_last_optimize_ms_) -
      reinterpret_cast<char*>(&latency_ms_)) + sizeof(time_since_last_optimize_ms_));
}

OptimizeStatsProto::~OptimizeStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.OptimizeStatsProto)
  SharedDtor();
}

void OptimizeStatsProto::SharedDtor() {
}

void OptimizeStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptimizeStatsProto& OptimizeStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptimizeStatsProto_icing_2fproto_2foptimize_2eproto.base);
  return *internal_default_instance();
}


void OptimizeStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.OptimizeStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&storage_size_after_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(storage_size_after_));
  }
  time_since_last_optimize_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptimizeStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 latency_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_store_optimize_latency_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_document_store_optimize_latency_ms(&has_bits);
          document_store_optimize_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index_restoration_latency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index_restoration_latency_ms(&has_bits);
          index_restoration_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_original_documents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_original_documents(&has_bits);
          num_original_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_deleted_documents = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_deleted_documents(&has_bits);
          num_deleted_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_expired_documents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_expired_documents(&has_bits);
          num_expired_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 storage_size_before = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_storage_size_before(&has_bits);
          storage_size_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 storage_size_after = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_storage_size_after(&has_bits);
          storage_size_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_since_last_optimize_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_time_since_last_optimize_ms(&has_bits);
          time_since_last_optimize_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptimizeStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.OptimizeStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latency_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_store_optimize_latency_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_document_store_optimize_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_store_optimize_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_restoration_latency_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_index_restoration_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_restoration_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_original_documents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_original_documents(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_original_documents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_deleted_documents = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_deleted_documents(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_deleted_documents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_expired_documents = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_expired_documents(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_expired_documents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_size_before = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_storage_size_before(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_size_before_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 storage_size_after = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_storage_size_after(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_size_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_since_last_optimize_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_time_since_last_optimize_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_since_last_optimize_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.OptimizeStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.OptimizeStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptimizeStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.OptimizeStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 latency_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->latency_ms(), output);
  }

  // optional int32 document_store_optimize_latency_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->document_store_optimize_latency_ms(), output);
  }

  // optional int32 index_restoration_latency_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->index_restoration_latency_ms(), output);
  }

  // optional int32 num_original_documents = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_original_documents(), output);
  }

  // optional int32 num_deleted_documents = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_deleted_documents(), output);
  }

  // optional int32 num_expired_documents = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_expired_documents(), output);
  }

  // optional int64 storage_size_before = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->storage_size_before(), output);
  }

  // optional int64 storage_size_after = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->storage_size_after(), output);
  }

  // optional int64 time_since_last_optimize_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->time_since_last_optimize_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.OptimizeStatsProto)
}

size_t OptimizeStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.OptimizeStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 latency_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional int32 document_store_optimize_latency_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_store_optimize_latency_ms());
    }

    // optional int32 index_restoration_latency_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index_restoration_latency_ms());
    }

    // optional int32 num_original_documents = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_original_documents());
    }

    // optional int32 num_deleted_documents = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_deleted_documents());
    }

    // optional int32 num_expired_documents = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_expired_documents());
    }

    // optional int64 storage_size_before = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->storage_size_before());
    }

    // optional int64 storage_size_after = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->storage_size_after());
    }

  }
  // optional int64 time_since_last_optimize_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time_since_last_optimize_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizeStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OptimizeStatsProto*>(
      &from));
}

void OptimizeStatsProto::MergeFrom(const OptimizeStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.OptimizeStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      document_store_optimize_latency_ms_ = from.document_store_optimize_latency_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_restoration_latency_ms_ = from.index_restoration_latency_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_original_documents_ = from.num_original_documents_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_deleted_documents_ = from.num_deleted_documents_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_expired_documents_ = from.num_expired_documents_;
    }
    if (cached_has_bits & 0x00000040u) {
      storage_size_before_ = from.storage_size_before_;
    }
    if (cached_has_bits & 0x00000080u) {
      storage_size_after_ = from.storage_size_after_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_time_since_last_optimize_ms(from.time_since_last_optimize_ms());
  }
}

void OptimizeStatsProto::CopyFrom(const OptimizeStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.OptimizeStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizeStatsProto::IsInitialized() const {
  return true;
}

void OptimizeStatsProto::InternalSwap(OptimizeStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latency_ms_, other->latency_ms_);
  swap(document_store_optimize_latency_ms_, other->document_store_optimize_latency_ms_);
  swap(index_restoration_latency_ms_, other->index_restoration_latency_ms_);
  swap(num_original_documents_, other->num_original_documents_);
  swap(num_deleted_documents_, other->num_deleted_documents_);
  swap(num_expired_documents_, other->num_expired_documents_);
  swap(storage_size_before_, other->storage_size_before_);
  swap(storage_size_after_, other->storage_size_after_);
  swap(time_since_last_optimize_ms_, other->time_since_last_optimize_ms_);
}

std::string OptimizeStatsProto::GetTypeName() const {
  return "icing.lib.OptimizeStatsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::OptimizeResultProto* Arena::CreateMaybeMessage< ::icing::lib::OptimizeResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::OptimizeResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetOptimizeInfoResultProto* Arena::CreateMaybeMessage< ::icing::lib::GetOptimizeInfoResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetOptimizeInfoResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::OptimizeStatsProto* Arena::CreateMaybeMessage< ::icing::lib::OptimizeStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::OptimizeStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
