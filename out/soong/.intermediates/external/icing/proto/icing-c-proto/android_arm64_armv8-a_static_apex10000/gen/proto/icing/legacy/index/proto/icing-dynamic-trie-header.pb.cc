// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/legacy/index/proto/icing-dynamic-trie-header.proto

#include "icing/legacy/index/proto/icing-dynamic-trie-header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace icing {
class IcingDynamicTrieHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IcingDynamicTrieHeader> _instance;
} _IcingDynamicTrieHeader_default_instance_;
}  // namespace icing
static void InitDefaultsscc_info_IcingDynamicTrieHeader_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::_IcingDynamicTrieHeader_default_instance_;
    new (ptr) ::icing::IcingDynamicTrieHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::IcingDynamicTrieHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IcingDynamicTrieHeader_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IcingDynamicTrieHeader_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto}, {}};

namespace icing {

// ===================================================================

void IcingDynamicTrieHeader::InitAsDefaultInstance() {
}
class IcingDynamicTrieHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<IcingDynamicTrieHeader>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_nexts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_suffixes_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_nexts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_suffixes_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deprecated_is_flushing(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

IcingDynamicTrieHeader::IcingDynamicTrieHeader()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.IcingDynamicTrieHeader)
}
IcingDynamicTrieHeader::IcingDynamicTrieHeader(const IcingDynamicTrieHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      free_lists_(from.free_lists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&deprecated_is_flushing_) -
    reinterpret_cast<char*>(&version_)) + sizeof(deprecated_is_flushing_));
  // @@protoc_insertion_point(copy_constructor:icing.IcingDynamicTrieHeader)
}

void IcingDynamicTrieHeader::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_is_flushing_) -
      reinterpret_cast<char*>(&version_)) + sizeof(deprecated_is_flushing_));
}

IcingDynamicTrieHeader::~IcingDynamicTrieHeader() {
  // @@protoc_insertion_point(destructor:icing.IcingDynamicTrieHeader)
  SharedDtor();
}

void IcingDynamicTrieHeader::SharedDtor() {
}

void IcingDynamicTrieHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IcingDynamicTrieHeader& IcingDynamicTrieHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IcingDynamicTrieHeader_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto.base);
  return *internal_default_instance();
}


void IcingDynamicTrieHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.IcingDynamicTrieHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  free_lists_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suffixes_size_) -
        reinterpret_cast<char*>(&version_)) + sizeof(suffixes_size_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&num_keys_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_is_flushing_) -
        reinterpret_cast<char*>(&num_keys_)) + sizeof(deprecated_is_flushing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IcingDynamicTrieHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value_size(&has_bits);
          value_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_nodes(&has_bits);
          max_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_nexts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_nexts(&has_bits);
          max_nexts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_suffixes_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_suffixes_size(&has_bits);
          max_suffixes_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_nodes(&has_bits);
          num_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_nexts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_nexts(&has_bits);
          num_nexts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suffixes_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_suffixes_size(&has_bits);
          suffixes_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 free_lists = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_free_lists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_free_lists(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_keys = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_keys(&has_bits);
          num_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deprecated_is_flushing = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_deprecated_is_flushing(&has_bits);
          deprecated_is_flushing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IcingDynamicTrieHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.IcingDynamicTrieHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_nodes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_nodes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_nexts = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_nexts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_nexts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_suffixes_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_max_suffixes_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_suffixes_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_nodes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_nodes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_nexts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_nexts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_nexts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suffixes_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_suffixes_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suffixes_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 free_lists = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_free_lists())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_free_lists())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_keys = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_num_keys(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deprecated_is_flushing = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_deprecated_is_flushing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_is_flushing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.IcingDynamicTrieHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.IcingDynamicTrieHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IcingDynamicTrieHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.IcingDynamicTrieHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 value_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->value_size(), output);
  }

  // optional uint32 max_nodes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->max_nodes(), output);
  }

  // optional uint32 max_nexts = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->max_nexts(), output);
  }

  // optional uint32 max_suffixes_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->max_suffixes_size(), output);
  }

  // optional uint32 num_nodes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->num_nodes(), output);
  }

  // optional uint32 num_nexts = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->num_nexts(), output);
  }

  // optional uint32 suffixes_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->suffixes_size(), output);
  }

  // repeated uint32 free_lists = 9;
  for (int i = 0, n = this->free_lists_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      9, this->free_lists(i), output);
  }

  // optional uint32 num_keys = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->num_keys(), output);
  }

  // optional bool deprecated_is_flushing = 11 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->deprecated_is_flushing(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.IcingDynamicTrieHeader)
}

size_t IcingDynamicTrieHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.IcingDynamicTrieHeader)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 free_lists = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->free_lists_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->free_lists_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 value_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->value_size());
    }

    // optional uint32 max_nodes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_nodes());
    }

    // optional uint32 max_nexts = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_nexts());
    }

    // optional uint32 max_suffixes_size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_suffixes_size());
    }

    // optional uint32 num_nodes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_nodes());
    }

    // optional uint32 num_nexts = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_nexts());
    }

    // optional uint32 suffixes_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->suffixes_size());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 num_keys = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->num_keys());
    }

    // optional bool deprecated_is_flushing = 11 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IcingDynamicTrieHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IcingDynamicTrieHeader*>(
      &from));
}

void IcingDynamicTrieHeader::MergeFrom(const IcingDynamicTrieHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.IcingDynamicTrieHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  free_lists_.MergeFrom(from.free_lists_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_size_ = from.value_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_nodes_ = from.max_nodes_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_nexts_ = from.max_nexts_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_suffixes_size_ = from.max_suffixes_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_nodes_ = from.num_nodes_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_nexts_ = from.num_nexts_;
    }
    if (cached_has_bits & 0x00000080u) {
      suffixes_size_ = from.suffixes_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      num_keys_ = from.num_keys_;
    }
    if (cached_has_bits & 0x00000200u) {
      deprecated_is_flushing_ = from.deprecated_is_flushing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IcingDynamicTrieHeader::CopyFrom(const IcingDynamicTrieHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.IcingDynamicTrieHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IcingDynamicTrieHeader::IsInitialized() const {
  return true;
}

void IcingDynamicTrieHeader::InternalSwap(IcingDynamicTrieHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  free_lists_.InternalSwap(&other->free_lists_);
  swap(version_, other->version_);
  swap(value_size_, other->value_size_);
  swap(max_nodes_, other->max_nodes_);
  swap(max_nexts_, other->max_nexts_);
  swap(max_suffixes_size_, other->max_suffixes_size_);
  swap(num_nodes_, other->num_nodes_);
  swap(num_nexts_, other->num_nexts_);
  swap(suffixes_size_, other->suffixes_size_);
  swap(num_keys_, other->num_keys_);
  swap(deprecated_is_flushing_, other->deprecated_is_flushing_);
}

std::string IcingDynamicTrieHeader::GetTypeName() const {
  return "icing.IcingDynamicTrieHeader";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::IcingDynamicTrieHeader* Arena::CreateMaybeMessage< ::icing::IcingDynamicTrieHeader >(Arena* arena) {
  return Arena::CreateInternal< ::icing::IcingDynamicTrieHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
