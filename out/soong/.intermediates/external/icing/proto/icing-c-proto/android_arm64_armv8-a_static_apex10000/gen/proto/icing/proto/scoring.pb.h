// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/scoring.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fscoring_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fscoring_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fscoring_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2fscoring_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class ScoringSpecProto;
class ScoringSpecProtoDefaultTypeInternal;
extern ScoringSpecProtoDefaultTypeInternal _ScoringSpecProto_default_instance_;
class ScoringSpecProto_Order;
class ScoringSpecProto_OrderDefaultTypeInternal;
extern ScoringSpecProto_OrderDefaultTypeInternal _ScoringSpecProto_Order_default_instance_;
class ScoringSpecProto_RankingStrategy;
class ScoringSpecProto_RankingStrategyDefaultTypeInternal;
extern ScoringSpecProto_RankingStrategyDefaultTypeInternal _ScoringSpecProto_RankingStrategy_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::ScoringSpecProto* Arena::CreateMaybeMessage<::icing::lib::ScoringSpecProto>(Arena*);
template<> ::icing::lib::ScoringSpecProto_Order* Arena::CreateMaybeMessage<::icing::lib::ScoringSpecProto_Order>(Arena*);
template<> ::icing::lib::ScoringSpecProto_RankingStrategy* Arena::CreateMaybeMessage<::icing::lib::ScoringSpecProto_RankingStrategy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

enum ScoringSpecProto_RankingStrategy_Code : int {
  ScoringSpecProto_RankingStrategy_Code_NONE = 0,
  ScoringSpecProto_RankingStrategy_Code_DOCUMENT_SCORE = 1,
  ScoringSpecProto_RankingStrategy_Code_CREATION_TIMESTAMP = 2,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE1_COUNT = 3,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE2_COUNT = 4,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE3_COUNT = 5,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE1_LAST_USED_TIMESTAMP = 6,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE2_LAST_USED_TIMESTAMP = 7,
  ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE3_LAST_USED_TIMESTAMP = 8,
  ScoringSpecProto_RankingStrategy_Code_RELEVANCE_SCORE = 9
};
bool ScoringSpecProto_RankingStrategy_Code_IsValid(int value);
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy_Code_Code_MIN = ScoringSpecProto_RankingStrategy_Code_NONE;
constexpr ScoringSpecProto_RankingStrategy_Code ScoringSpecProto_RankingStrategy_Code_Code_MAX = ScoringSpecProto_RankingStrategy_Code_RELEVANCE_SCORE;
constexpr int ScoringSpecProto_RankingStrategy_Code_Code_ARRAYSIZE = ScoringSpecProto_RankingStrategy_Code_Code_MAX + 1;

const std::string& ScoringSpecProto_RankingStrategy_Code_Name(ScoringSpecProto_RankingStrategy_Code value);
template<typename T>
inline const std::string& ScoringSpecProto_RankingStrategy_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScoringSpecProto_RankingStrategy_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScoringSpecProto_RankingStrategy_Code_Name.");
  return ScoringSpecProto_RankingStrategy_Code_Name(static_cast<ScoringSpecProto_RankingStrategy_Code>(enum_t_value));
}
bool ScoringSpecProto_RankingStrategy_Code_Parse(
    const std::string& name, ScoringSpecProto_RankingStrategy_Code* value);
enum ScoringSpecProto_Order_Code : int {
  ScoringSpecProto_Order_Code_DESC = 0,
  ScoringSpecProto_Order_Code_ASC = 1
};
bool ScoringSpecProto_Order_Code_IsValid(int value);
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order_Code_Code_MIN = ScoringSpecProto_Order_Code_DESC;
constexpr ScoringSpecProto_Order_Code ScoringSpecProto_Order_Code_Code_MAX = ScoringSpecProto_Order_Code_ASC;
constexpr int ScoringSpecProto_Order_Code_Code_ARRAYSIZE = ScoringSpecProto_Order_Code_Code_MAX + 1;

const std::string& ScoringSpecProto_Order_Code_Name(ScoringSpecProto_Order_Code value);
template<typename T>
inline const std::string& ScoringSpecProto_Order_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScoringSpecProto_Order_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScoringSpecProto_Order_Code_Name.");
  return ScoringSpecProto_Order_Code_Name(static_cast<ScoringSpecProto_Order_Code>(enum_t_value));
}
bool ScoringSpecProto_Order_Code_Parse(
    const std::string& name, ScoringSpecProto_Order_Code* value);
// ===================================================================

class ScoringSpecProto_RankingStrategy :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.ScoringSpecProto.RankingStrategy) */ {
 public:
  ScoringSpecProto_RankingStrategy();
  virtual ~ScoringSpecProto_RankingStrategy();

  ScoringSpecProto_RankingStrategy(const ScoringSpecProto_RankingStrategy& from);
  ScoringSpecProto_RankingStrategy(ScoringSpecProto_RankingStrategy&& from) noexcept
    : ScoringSpecProto_RankingStrategy() {
    *this = ::std::move(from);
  }

  inline ScoringSpecProto_RankingStrategy& operator=(const ScoringSpecProto_RankingStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoringSpecProto_RankingStrategy& operator=(ScoringSpecProto_RankingStrategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScoringSpecProto_RankingStrategy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoringSpecProto_RankingStrategy* internal_default_instance() {
    return reinterpret_cast<const ScoringSpecProto_RankingStrategy*>(
               &_ScoringSpecProto_RankingStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScoringSpecProto_RankingStrategy& a, ScoringSpecProto_RankingStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoringSpecProto_RankingStrategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoringSpecProto_RankingStrategy* New() const final {
    return CreateMaybeMessage<ScoringSpecProto_RankingStrategy>(nullptr);
  }

  ScoringSpecProto_RankingStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoringSpecProto_RankingStrategy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScoringSpecProto_RankingStrategy& from);
  void MergeFrom(const ScoringSpecProto_RankingStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoringSpecProto_RankingStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.ScoringSpecProto.RankingStrategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ScoringSpecProto_RankingStrategy_Code Code;
  static constexpr Code NONE =
    ScoringSpecProto_RankingStrategy_Code_NONE;
  static constexpr Code DOCUMENT_SCORE =
    ScoringSpecProto_RankingStrategy_Code_DOCUMENT_SCORE;
  static constexpr Code CREATION_TIMESTAMP =
    ScoringSpecProto_RankingStrategy_Code_CREATION_TIMESTAMP;
  static constexpr Code USAGE_TYPE1_COUNT =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE1_COUNT;
  static constexpr Code USAGE_TYPE2_COUNT =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE2_COUNT;
  static constexpr Code USAGE_TYPE3_COUNT =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE3_COUNT;
  static constexpr Code USAGE_TYPE1_LAST_USED_TIMESTAMP =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE1_LAST_USED_TIMESTAMP;
  static constexpr Code USAGE_TYPE2_LAST_USED_TIMESTAMP =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE2_LAST_USED_TIMESTAMP;
  static constexpr Code USAGE_TYPE3_LAST_USED_TIMESTAMP =
    ScoringSpecProto_RankingStrategy_Code_USAGE_TYPE3_LAST_USED_TIMESTAMP;
  static constexpr Code RELEVANCE_SCORE =
    ScoringSpecProto_RankingStrategy_Code_RELEVANCE_SCORE;
  static inline bool Code_IsValid(int value) {
    return ScoringSpecProto_RankingStrategy_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    ScoringSpecProto_RankingStrategy_Code_Code_MIN;
  static constexpr Code Code_MAX =
    ScoringSpecProto_RankingStrategy_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    ScoringSpecProto_RankingStrategy_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return ScoringSpecProto_RankingStrategy_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(const std::string& name,
      Code* value) {
    return ScoringSpecProto_RankingStrategy_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:icing.lib.ScoringSpecProto.RankingStrategy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_icing_2fproto_2fscoring_2eproto;
};
// -------------------------------------------------------------------

class ScoringSpecProto_Order :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.ScoringSpecProto.Order) */ {
 public:
  ScoringSpecProto_Order();
  virtual ~ScoringSpecProto_Order();

  ScoringSpecProto_Order(const ScoringSpecProto_Order& from);
  ScoringSpecProto_Order(ScoringSpecProto_Order&& from) noexcept
    : ScoringSpecProto_Order() {
    *this = ::std::move(from);
  }

  inline ScoringSpecProto_Order& operator=(const ScoringSpecProto_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoringSpecProto_Order& operator=(ScoringSpecProto_Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScoringSpecProto_Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoringSpecProto_Order* internal_default_instance() {
    return reinterpret_cast<const ScoringSpecProto_Order*>(
               &_ScoringSpecProto_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScoringSpecProto_Order& a, ScoringSpecProto_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoringSpecProto_Order* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoringSpecProto_Order* New() const final {
    return CreateMaybeMessage<ScoringSpecProto_Order>(nullptr);
  }

  ScoringSpecProto_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoringSpecProto_Order>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScoringSpecProto_Order& from);
  void MergeFrom(const ScoringSpecProto_Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoringSpecProto_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.ScoringSpecProto.Order";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ScoringSpecProto_Order_Code Code;
  static constexpr Code DESC =
    ScoringSpecProto_Order_Code_DESC;
  static constexpr Code ASC =
    ScoringSpecProto_Order_Code_ASC;
  static inline bool Code_IsValid(int value) {
    return ScoringSpecProto_Order_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    ScoringSpecProto_Order_Code_Code_MIN;
  static constexpr Code Code_MAX =
    ScoringSpecProto_Order_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    ScoringSpecProto_Order_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return ScoringSpecProto_Order_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(const std::string& name,
      Code* value) {
    return ScoringSpecProto_Order_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:icing.lib.ScoringSpecProto.Order)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_icing_2fproto_2fscoring_2eproto;
};
// -------------------------------------------------------------------

class ScoringSpecProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.ScoringSpecProto) */ {
 public:
  ScoringSpecProto();
  virtual ~ScoringSpecProto();

  ScoringSpecProto(const ScoringSpecProto& from);
  ScoringSpecProto(ScoringSpecProto&& from) noexcept
    : ScoringSpecProto() {
    *this = ::std::move(from);
  }

  inline ScoringSpecProto& operator=(const ScoringSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoringSpecProto& operator=(ScoringSpecProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScoringSpecProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoringSpecProto* internal_default_instance() {
    return reinterpret_cast<const ScoringSpecProto*>(
               &_ScoringSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScoringSpecProto& a, ScoringSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoringSpecProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoringSpecProto* New() const final {
    return CreateMaybeMessage<ScoringSpecProto>(nullptr);
  }

  ScoringSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoringSpecProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScoringSpecProto& from);
  void MergeFrom(const ScoringSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoringSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.ScoringSpecProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ScoringSpecProto_RankingStrategy RankingStrategy;
  typedef ScoringSpecProto_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kRankByFieldNumber = 1,
    kOrderByFieldNumber = 2,
  };
  // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
  bool has_rank_by() const;
  void clear_rank_by();
  ::icing::lib::ScoringSpecProto_RankingStrategy_Code rank_by() const;
  void set_rank_by(::icing::lib::ScoringSpecProto_RankingStrategy_Code value);

  // optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
  bool has_order_by() const;
  void clear_order_by();
  ::icing::lib::ScoringSpecProto_Order_Code order_by() const;
  void set_order_by(::icing::lib::ScoringSpecProto_Order_Code value);

  // @@protoc_insertion_point(class_scope:icing.lib.ScoringSpecProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int rank_by_;
  int order_by_;
  friend struct ::TableStruct_icing_2fproto_2fscoring_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScoringSpecProto_RankingStrategy

// -------------------------------------------------------------------

// ScoringSpecProto_Order

// -------------------------------------------------------------------

// ScoringSpecProto

// optional .icing.lib.ScoringSpecProto.RankingStrategy.Code rank_by = 1;
inline bool ScoringSpecProto::has_rank_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoringSpecProto::clear_rank_by() {
  rank_by_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::icing::lib::ScoringSpecProto_RankingStrategy_Code ScoringSpecProto::rank_by() const {
  // @@protoc_insertion_point(field_get:icing.lib.ScoringSpecProto.rank_by)
  return static_cast< ::icing::lib::ScoringSpecProto_RankingStrategy_Code >(rank_by_);
}
inline void ScoringSpecProto::set_rank_by(::icing::lib::ScoringSpecProto_RankingStrategy_Code value) {
  assert(::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  rank_by_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.ScoringSpecProto.rank_by)
}

// optional .icing.lib.ScoringSpecProto.Order.Code order_by = 2;
inline bool ScoringSpecProto::has_order_by() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoringSpecProto::clear_order_by() {
  order_by_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::icing::lib::ScoringSpecProto_Order_Code ScoringSpecProto::order_by() const {
  // @@protoc_insertion_point(field_get:icing.lib.ScoringSpecProto.order_by)
  return static_cast< ::icing::lib::ScoringSpecProto_Order_Code >(order_by_);
}
inline void ScoringSpecProto::set_order_by(::icing::lib::ScoringSpecProto_Order_Code value) {
  assert(::icing::lib::ScoringSpecProto_Order_Code_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  order_by_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.ScoringSpecProto.order_by)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::icing::lib::ScoringSpecProto_RankingStrategy_Code> : ::std::true_type {};
template <> struct is_proto_enum< ::icing::lib::ScoringSpecProto_Order_Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fscoring_2eproto
