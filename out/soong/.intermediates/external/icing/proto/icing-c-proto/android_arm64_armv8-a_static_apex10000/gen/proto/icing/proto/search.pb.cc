// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/search.proto

#include "icing/proto/search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fdocument_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnippetProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fsearch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto;
namespace icing {
namespace lib {
class SearchSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchSpecProto> _instance;
} _SearchSpecProto_default_instance_;
class ResultSpecProto_SnippetSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultSpecProto_SnippetSpecProto> _instance;
} _ResultSpecProto_SnippetSpecProto_default_instance_;
class ResultSpecProto_ResultGroupingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultSpecProto_ResultGrouping> _instance;
} _ResultSpecProto_ResultGrouping_default_instance_;
class ResultSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultSpecProto> _instance;
} _ResultSpecProto_default_instance_;
class SnippetMatchProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnippetMatchProto> _instance;
} _SnippetMatchProto_default_instance_;
class SnippetProto_EntryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnippetProto_EntryProto> _instance;
} _SnippetProto_EntryProto_default_instance_;
class SnippetProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnippetProto> _instance;
} _SnippetProto_default_instance_;
class SearchResultProto_ResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResultProto_ResultProto> _instance;
} _SearchResultProto_ResultProto_default_instance_;
class SearchResultProto_DebugInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResultProto_DebugInfoProto> _instance;
} _SearchResultProto_DebugInfoProto_default_instance_;
class SearchResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResultProto> _instance;
} _SearchResultProto_default_instance_;
class TypePropertyMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypePropertyMask> _instance;
} _TypePropertyMask_default_instance_;
class GetResultSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResultSpecProto> _instance;
} _GetResultSpecProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_GetResultSpecProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetResultSpecProto_default_instance_;
    new (ptr) ::icing::lib::GetResultSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetResultSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResultSpecProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetResultSpecProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto.base,}};

static void InitDefaultsscc_info_ResultSpecProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ResultSpecProto_default_instance_;
    new (ptr) ::icing::lib::ResultSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ResultSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResultSpecProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ResultSpecProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto.base,
      &scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto.base,
      &scc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto.base,}};

static void InitDefaultsscc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ResultSpecProto_ResultGrouping_default_instance_;
    new (ptr) ::icing::lib::ResultSpecProto_ResultGrouping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ResultSpecProto_ResultGrouping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto}, {}};

static void InitDefaultsscc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ResultSpecProto_SnippetSpecProto_default_instance_;
    new (ptr) ::icing::lib::ResultSpecProto_SnippetSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ResultSpecProto_SnippetSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto}, {}};

static void InitDefaultsscc_info_SearchResultProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SearchResultProto_default_instance_;
    new (ptr) ::icing::lib::SearchResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SearchResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SearchResultProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_SearchResultProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto.base,
      &scc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto.base,
      &scc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SearchResultProto_DebugInfoProto_default_instance_;
    new (ptr) ::icing::lib::SearchResultProto_DebugInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SearchResultProto_DebugInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto}, {}};

static void InitDefaultsscc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SearchResultProto_ResultProto_default_instance_;
    new (ptr) ::icing::lib::SearchResultProto_ResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SearchResultProto_ResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base,
      &scc_info_SnippetProto_icing_2fproto_2fsearch_2eproto.base,}};

static void InitDefaultsscc_info_SearchSpecProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SearchSpecProto_default_instance_;
    new (ptr) ::icing::lib::SearchSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SearchSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchSpecProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SearchSpecProto_icing_2fproto_2fsearch_2eproto}, {}};

static void InitDefaultsscc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SnippetMatchProto_default_instance_;
    new (ptr) ::icing::lib::SnippetMatchProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SnippetMatchProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto}, {}};

static void InitDefaultsscc_info_SnippetProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SnippetProto_default_instance_;
    new (ptr) ::icing::lib::SnippetProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SnippetProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnippetProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SnippetProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto.base,}};

static void InitDefaultsscc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SnippetProto_EntryProto_default_instance_;
    new (ptr) ::icing::lib::SnippetProto_EntryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SnippetProto_EntryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto}, {
      &scc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto.base,}};

static void InitDefaultsscc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_TypePropertyMask_default_instance_;
    new (ptr) ::icing::lib::TypePropertyMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::TypePropertyMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto}, {}};

namespace icing {
namespace lib {

// ===================================================================

void SearchSpecProto::InitAsDefaultInstance() {
}
class SearchSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchSpecProto>()._has_bits_);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SearchSpecProto::SearchSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SearchSpecProto)
}
SearchSpecProto::SearchSpecProto(const SearchSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      namespace_filters_(from.namespace_filters_),
      schema_type_filters_(from.schema_type_filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  term_match_type_ = from.term_match_type_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.SearchSpecProto)
}

void SearchSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchSpecProto_icing_2fproto_2fsearch_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  term_match_type_ = 0;
}

SearchSpecProto::~SearchSpecProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SearchSpecProto)
  SharedDtor();
}

void SearchSpecProto::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchSpecProto& SearchSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchSpecProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SearchSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SearchSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace_filters_.Clear();
  schema_type_filters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmptyNoArena();
  }
  term_match_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.TermMatchType.Code term_match_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::TermMatchType_Code_IsValid(val))) {
            set_term_match_type(static_cast<::icing::lib::TermMatchType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string namespace_filters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_namespace_filters(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string schema_type_filters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_schema_type_filters(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SearchSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string query = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.TermMatchType.Code term_match_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::TermMatchType_Code_IsValid(value)) {
            set_term_match_type(static_cast< ::icing::lib::TermMatchType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string namespace_filters = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_namespace_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string schema_type_filters = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_schema_type_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SearchSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SearchSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SearchSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // optional .icing.lib.TermMatchType.Code term_match_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->term_match_type(), output);
  }

  // repeated string namespace_filters = 3;
  for (int i = 0, n = this->namespace_filters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->namespace_filters(i), output);
  }

  // repeated string schema_type_filters = 4;
  for (int i = 0, n = this->schema_type_filters_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->schema_type_filters(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SearchSpecProto)
}

size_t SearchSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SearchSpecProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string namespace_filters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->namespace_filters_size());
  for (int i = 0, n = this->namespace_filters_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->namespace_filters(i));
  }

  // repeated string schema_type_filters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->schema_type_filters_size());
  for (int i = 0, n = this->schema_type_filters_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->schema_type_filters(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional .icing.lib.TermMatchType.Code term_match_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->term_match_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchSpecProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SearchSpecProto*>(
      &from));
}

void SearchSpecProto::MergeFrom(const SearchSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SearchSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespace_filters_.MergeFrom(from.namespace_filters_);
  schema_type_filters_.MergeFrom(from.schema_type_filters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      term_match_type_ = from.term_match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchSpecProto::CopyFrom(const SearchSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SearchSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchSpecProto::IsInitialized() const {
  return true;
}

void SearchSpecProto::InternalSwap(SearchSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace_filters_.InternalSwap(CastToBase(&other->namespace_filters_));
  schema_type_filters_.InternalSwap(CastToBase(&other->schema_type_filters_));
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_match_type_, other->term_match_type_);
}

std::string SearchSpecProto::GetTypeName() const {
  return "icing.lib.SearchSpecProto";
}


// ===================================================================

void ResultSpecProto_SnippetSpecProto::InitAsDefaultInstance() {
}
class ResultSpecProto_SnippetSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultSpecProto_SnippetSpecProto>()._has_bits_);
  static void set_has_num_to_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_matches_per_property(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_window_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ResultSpecProto_SnippetSpecProto::ResultSpecProto_SnippetSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ResultSpecProto.SnippetSpecProto)
}
ResultSpecProto_SnippetSpecProto::ResultSpecProto_SnippetSpecProto(const ResultSpecProto_SnippetSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_to_snippet_, &from.num_to_snippet_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_window_bytes_) -
    reinterpret_cast<char*>(&num_to_snippet_)) + sizeof(max_window_bytes_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.ResultSpecProto.SnippetSpecProto)
}

void ResultSpecProto_SnippetSpecProto::SharedCtor() {
  ::memset(&num_to_snippet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_window_bytes_) -
      reinterpret_cast<char*>(&num_to_snippet_)) + sizeof(max_window_bytes_));
}

ResultSpecProto_SnippetSpecProto::~ResultSpecProto_SnippetSpecProto() {
  // @@protoc_insertion_point(destructor:icing.lib.ResultSpecProto.SnippetSpecProto)
  SharedDtor();
}

void ResultSpecProto_SnippetSpecProto::SharedDtor() {
}

void ResultSpecProto_SnippetSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultSpecProto_SnippetSpecProto& ResultSpecProto_SnippetSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultSpecProto_SnippetSpecProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void ResultSpecProto_SnippetSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_to_snippet_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_window_bytes_) -
        reinterpret_cast<char*>(&num_to_snippet_)) + sizeof(max_window_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResultSpecProto_SnippetSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_to_snippet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_to_snippet(&has_bits);
          num_to_snippet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_matches_per_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_matches_per_property(&has_bits);
          num_matches_per_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_window_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_window_bytes(&has_bits);
          max_window_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResultSpecProto_SnippetSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_to_snippet = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_to_snippet(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_to_snippet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_matches_per_property = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_matches_per_property(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_matches_per_property_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_window_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_window_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_window_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ResultSpecProto.SnippetSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ResultSpecProto.SnippetSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResultSpecProto_SnippetSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_to_snippet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_to_snippet(), output);
  }

  // optional int32 num_matches_per_property = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_matches_per_property(), output);
  }

  // optional int32 max_window_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_window_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ResultSpecProto.SnippetSpecProto)
}

size_t ResultSpecProto_SnippetSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 num_to_snippet = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_to_snippet());
    }

    // optional int32 num_matches_per_property = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_matches_per_property());
    }

    // optional int32 max_window_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_window_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultSpecProto_SnippetSpecProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResultSpecProto_SnippetSpecProto*>(
      &from));
}

void ResultSpecProto_SnippetSpecProto::MergeFrom(const ResultSpecProto_SnippetSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_to_snippet_ = from.num_to_snippet_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_matches_per_property_ = from.num_matches_per_property_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_window_bytes_ = from.max_window_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultSpecProto_SnippetSpecProto::CopyFrom(const ResultSpecProto_SnippetSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ResultSpecProto.SnippetSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSpecProto_SnippetSpecProto::IsInitialized() const {
  return true;
}

void ResultSpecProto_SnippetSpecProto::InternalSwap(ResultSpecProto_SnippetSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_to_snippet_, other->num_to_snippet_);
  swap(num_matches_per_property_, other->num_matches_per_property_);
  swap(max_window_bytes_, other->max_window_bytes_);
}

std::string ResultSpecProto_SnippetSpecProto::GetTypeName() const {
  return "icing.lib.ResultSpecProto.SnippetSpecProto";
}


// ===================================================================

void ResultSpecProto_ResultGrouping::InitAsDefaultInstance() {
}
class ResultSpecProto_ResultGrouping::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultSpecProto_ResultGrouping>()._has_bits_);
  static void set_has_max_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResultSpecProto_ResultGrouping::ResultSpecProto_ResultGrouping()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ResultSpecProto.ResultGrouping)
}
ResultSpecProto_ResultGrouping::ResultSpecProto_ResultGrouping(const ResultSpecProto_ResultGrouping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      namespaces_(from.namespaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_results_ = from.max_results_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.ResultSpecProto.ResultGrouping)
}

void ResultSpecProto_ResultGrouping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto.base);
  max_results_ = 0;
}

ResultSpecProto_ResultGrouping::~ResultSpecProto_ResultGrouping() {
  // @@protoc_insertion_point(destructor:icing.lib.ResultSpecProto.ResultGrouping)
  SharedDtor();
}

void ResultSpecProto_ResultGrouping::SharedDtor() {
}

void ResultSpecProto_ResultGrouping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultSpecProto_ResultGrouping& ResultSpecProto_ResultGrouping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultSpecProto_ResultGrouping_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void ResultSpecProto_ResultGrouping::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ResultSpecProto.ResultGrouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespaces_.Clear();
  max_results_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResultSpecProto_ResultGrouping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string namespaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_namespaces(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 max_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_results(&has_bits);
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResultSpecProto_ResultGrouping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ResultSpecProto.ResultGrouping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string namespaces = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_namespaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_results(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ResultSpecProto.ResultGrouping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ResultSpecProto.ResultGrouping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResultSpecProto_ResultGrouping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ResultSpecProto.ResultGrouping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string namespaces = 1;
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->namespaces(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 max_results = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_results(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ResultSpecProto.ResultGrouping)
}

size_t ResultSpecProto_ResultGrouping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ResultSpecProto.ResultGrouping)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string namespaces = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->namespaces_size());
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->namespaces(i));
  }

  // optional int32 max_results = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_results());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultSpecProto_ResultGrouping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResultSpecProto_ResultGrouping*>(
      &from));
}

void ResultSpecProto_ResultGrouping::MergeFrom(const ResultSpecProto_ResultGrouping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ResultSpecProto.ResultGrouping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespaces_.MergeFrom(from.namespaces_);
  if (from.has_max_results()) {
    set_max_results(from.max_results());
  }
}

void ResultSpecProto_ResultGrouping::CopyFrom(const ResultSpecProto_ResultGrouping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ResultSpecProto.ResultGrouping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSpecProto_ResultGrouping::IsInitialized() const {
  return true;
}

void ResultSpecProto_ResultGrouping::InternalSwap(ResultSpecProto_ResultGrouping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespaces_.InternalSwap(CastToBase(&other->namespaces_));
  swap(max_results_, other->max_results_);
}

std::string ResultSpecProto_ResultGrouping::GetTypeName() const {
  return "icing.lib.ResultSpecProto.ResultGrouping";
}


// ===================================================================

void ResultSpecProto::InitAsDefaultInstance() {
  ::icing::lib::_ResultSpecProto_default_instance_._instance.get_mutable()->snippet_spec_ = const_cast< ::icing::lib::ResultSpecProto_SnippetSpecProto*>(
      ::icing::lib::ResultSpecProto_SnippetSpecProto::internal_default_instance());
}
class ResultSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResultSpecProto>()._has_bits_);
  static void set_has_num_per_page(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::icing::lib::ResultSpecProto_SnippetSpecProto& snippet_spec(const ResultSpecProto* msg);
  static void set_has_snippet_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::icing::lib::ResultSpecProto_SnippetSpecProto&
ResultSpecProto::_Internal::snippet_spec(const ResultSpecProto* msg) {
  return *msg->snippet_spec_;
}
ResultSpecProto::ResultSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ResultSpecProto)
}
ResultSpecProto::ResultSpecProto(const ResultSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      type_property_masks_(from.type_property_masks_),
      result_groupings_(from.result_groupings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snippet_spec()) {
    snippet_spec_ = new ::icing::lib::ResultSpecProto_SnippetSpecProto(*from.snippet_spec_);
  } else {
    snippet_spec_ = nullptr;
  }
  ::memcpy(&debug_info_, &from.debug_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_per_page_) -
    reinterpret_cast<char*>(&debug_info_)) + sizeof(num_per_page_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.ResultSpecProto)
}

void ResultSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultSpecProto_icing_2fproto_2fsearch_2eproto.base);
  ::memset(&snippet_spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&snippet_spec_)) + sizeof(debug_info_));
  num_per_page_ = 10;
}

ResultSpecProto::~ResultSpecProto() {
  // @@protoc_insertion_point(destructor:icing.lib.ResultSpecProto)
  SharedDtor();
}

void ResultSpecProto::SharedDtor() {
  if (this != internal_default_instance()) delete snippet_spec_;
}

void ResultSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultSpecProto& ResultSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultSpecProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void ResultSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ResultSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_property_masks_.Clear();
  result_groupings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(snippet_spec_ != nullptr);
    snippet_spec_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    debug_info_ = false;
    num_per_page_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResultSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_per_page = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_per_page(&has_bits);
          num_per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_debug_info(&has_bits);
          debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.ResultSpecProto.SnippetSpecProto snippet_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_snippet_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.TypePropertyMask type_property_masks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_type_property_masks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.ResultSpecProto.ResultGrouping result_groupings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_result_groupings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResultSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ResultSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_per_page = 1 [default = 10];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_per_page(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_per_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_debug_info(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.ResultSpecProto.SnippetSpecProto snippet_spec = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snippet_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.TypePropertyMask type_property_masks = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_type_property_masks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.ResultSpecProto.ResultGrouping result_groupings = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_result_groupings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ResultSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ResultSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResultSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ResultSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_per_page = 1 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_per_page(), output);
  }

  // optional bool debug_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->debug_info(), output);
  }

  // optional .icing.lib.ResultSpecProto.SnippetSpecProto snippet_spec = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::snippet_spec(this), output);
  }

  // repeated .icing.lib.TypePropertyMask type_property_masks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_property_masks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->type_property_masks(static_cast<int>(i)),
      output);
  }

  // repeated .icing.lib.ResultSpecProto.ResultGrouping result_groupings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_groupings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->result_groupings(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ResultSpecProto)
}

size_t ResultSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ResultSpecProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.TypePropertyMask type_property_masks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->type_property_masks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->type_property_masks(static_cast<int>(i)));
    }
  }

  // repeated .icing.lib.ResultSpecProto.ResultGrouping result_groupings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->result_groupings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->result_groupings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .icing.lib.ResultSpecProto.SnippetSpecProto snippet_spec = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *snippet_spec_);
    }

    // optional bool debug_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 num_per_page = 1 [default = 10];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_per_page());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultSpecProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResultSpecProto*>(
      &from));
}

void ResultSpecProto::MergeFrom(const ResultSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ResultSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_property_masks_.MergeFrom(from.type_property_masks_);
  result_groupings_.MergeFrom(from.result_groupings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_snippet_spec()->::icing::lib::ResultSpecProto_SnippetSpecProto::MergeFrom(from.snippet_spec());
    }
    if (cached_has_bits & 0x00000002u) {
      debug_info_ = from.debug_info_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_per_page_ = from.num_per_page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResultSpecProto::CopyFrom(const ResultSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ResultSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSpecProto::IsInitialized() const {
  return true;
}

void ResultSpecProto::InternalSwap(ResultSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&type_property_masks_)->InternalSwap(CastToBase(&other->type_property_masks_));
  CastToBase(&result_groupings_)->InternalSwap(CastToBase(&other->result_groupings_));
  swap(snippet_spec_, other->snippet_spec_);
  swap(debug_info_, other->debug_info_);
  swap(num_per_page_, other->num_per_page_);
}

std::string ResultSpecProto::GetTypeName() const {
  return "icing.lib.ResultSpecProto";
}


// ===================================================================

void SnippetMatchProto::InitAsDefaultInstance() {
}
class SnippetMatchProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SnippetMatchProto>()._has_bits_);
  static void set_has_exact_match_byte_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exact_match_byte_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exact_match_utf16_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exact_match_utf16_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_window_byte_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_byte_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_window_utf16_position(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_window_utf16_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SnippetMatchProto::SnippetMatchProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SnippetMatchProto)
}
SnippetMatchProto::SnippetMatchProto(const SnippetMatchProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exact_match_byte_position_, &from.exact_match_byte_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_utf16_length_) -
    reinterpret_cast<char*>(&exact_match_byte_position_)) + sizeof(window_utf16_length_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.SnippetMatchProto)
}

void SnippetMatchProto::SharedCtor() {
  ::memset(&exact_match_byte_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_utf16_length_) -
      reinterpret_cast<char*>(&exact_match_byte_position_)) + sizeof(window_utf16_length_));
}

SnippetMatchProto::~SnippetMatchProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SnippetMatchProto)
  SharedDtor();
}

void SnippetMatchProto::SharedDtor() {
}

void SnippetMatchProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnippetMatchProto& SnippetMatchProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnippetMatchProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SnippetMatchProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SnippetMatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&exact_match_byte_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_utf16_length_) -
        reinterpret_cast<char*>(&exact_match_byte_position_)) + sizeof(window_utf16_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnippetMatchProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 exact_match_byte_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exact_match_byte_position(&has_bits);
          exact_match_byte_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exact_match_byte_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exact_match_byte_length(&has_bits);
          exact_match_byte_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_byte_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_byte_position(&has_bits);
          window_byte_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_byte_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_window_byte_length(&has_bits);
          window_byte_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exact_match_utf16_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_exact_match_utf16_position(&has_bits);
          exact_match_utf16_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exact_match_utf16_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_exact_match_utf16_length(&has_bits);
          exact_match_utf16_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_utf16_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_window_utf16_position(&has_bits);
          window_utf16_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_utf16_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_window_utf16_length(&has_bits);
          window_utf16_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnippetMatchProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SnippetMatchProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exact_match_byte_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_exact_match_byte_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exact_match_byte_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exact_match_byte_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_exact_match_byte_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exact_match_byte_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_byte_position = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_window_byte_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_byte_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_byte_length = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_window_byte_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_byte_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exact_match_utf16_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_exact_match_utf16_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exact_match_utf16_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 exact_match_utf16_length = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_exact_match_utf16_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exact_match_utf16_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_utf16_position = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_window_utf16_position(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_utf16_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_utf16_length = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_window_utf16_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_utf16_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SnippetMatchProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SnippetMatchProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnippetMatchProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SnippetMatchProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 exact_match_byte_position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->exact_match_byte_position(), output);
  }

  // optional int32 exact_match_byte_length = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exact_match_byte_length(), output);
  }

  // optional int32 window_byte_position = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->window_byte_position(), output);
  }

  // optional int32 window_byte_length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->window_byte_length(), output);
  }

  // optional int32 exact_match_utf16_position = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->exact_match_utf16_position(), output);
  }

  // optional int32 exact_match_utf16_length = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->exact_match_utf16_length(), output);
  }

  // optional int32 window_utf16_position = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->window_utf16_position(), output);
  }

  // optional int32 window_utf16_length = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->window_utf16_length(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SnippetMatchProto)
}

size_t SnippetMatchProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SnippetMatchProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 exact_match_byte_position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exact_match_byte_position());
    }

    // optional int32 exact_match_byte_length = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exact_match_byte_length());
    }

    // optional int32 window_byte_position = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->window_byte_position());
    }

    // optional int32 window_byte_length = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->window_byte_length());
    }

    // optional int32 exact_match_utf16_position = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exact_match_utf16_position());
    }

    // optional int32 exact_match_utf16_length = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->exact_match_utf16_length());
    }

    // optional int32 window_utf16_position = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->window_utf16_position());
    }

    // optional int32 window_utf16_length = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->window_utf16_length());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnippetMatchProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnippetMatchProto*>(
      &from));
}

void SnippetMatchProto::MergeFrom(const SnippetMatchProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SnippetMatchProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      exact_match_byte_position_ = from.exact_match_byte_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      exact_match_byte_length_ = from.exact_match_byte_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      window_byte_position_ = from.window_byte_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      window_byte_length_ = from.window_byte_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      exact_match_utf16_position_ = from.exact_match_utf16_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      exact_match_utf16_length_ = from.exact_match_utf16_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      window_utf16_position_ = from.window_utf16_position_;
    }
    if (cached_has_bits & 0x00000080u) {
      window_utf16_length_ = from.window_utf16_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnippetMatchProto::CopyFrom(const SnippetMatchProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SnippetMatchProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetMatchProto::IsInitialized() const {
  return true;
}

void SnippetMatchProto::InternalSwap(SnippetMatchProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(exact_match_byte_position_, other->exact_match_byte_position_);
  swap(exact_match_byte_length_, other->exact_match_byte_length_);
  swap(window_byte_position_, other->window_byte_position_);
  swap(window_byte_length_, other->window_byte_length_);
  swap(exact_match_utf16_position_, other->exact_match_utf16_position_);
  swap(exact_match_utf16_length_, other->exact_match_utf16_length_);
  swap(window_utf16_position_, other->window_utf16_position_);
  swap(window_utf16_length_, other->window_utf16_length_);
}

std::string SnippetMatchProto::GetTypeName() const {
  return "icing.lib.SnippetMatchProto";
}


// ===================================================================

void SnippetProto_EntryProto::InitAsDefaultInstance() {
}
class SnippetProto_EntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SnippetProto_EntryProto>()._has_bits_);
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SnippetProto_EntryProto::SnippetProto_EntryProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SnippetProto.EntryProto)
}
SnippetProto_EntryProto::SnippetProto_EntryProto(const SnippetProto_EntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      snippet_matches_(from.snippet_matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.SnippetProto.EntryProto)
}

void SnippetProto_EntryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SnippetProto_EntryProto::~SnippetProto_EntryProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SnippetProto.EntryProto)
  SharedDtor();
}

void SnippetProto_EntryProto::SharedDtor() {
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetProto_EntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnippetProto_EntryProto& SnippetProto_EntryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnippetProto_EntryProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SnippetProto_EntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SnippetProto.EntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snippet_matches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    property_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnippetProto_EntryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_property_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.SnippetMatchProto snippet_matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_snippet_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnippetProto_EntryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SnippetProto.EntryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string property_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.SnippetMatchProto snippet_matches = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_snippet_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SnippetProto.EntryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SnippetProto.EntryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnippetProto_EntryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SnippetProto.EntryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property_name(), output);
  }

  // repeated .icing.lib.SnippetMatchProto snippet_matches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snippet_matches_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->snippet_matches(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SnippetProto.EntryProto)
}

size_t SnippetProto_EntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SnippetProto.EntryProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.SnippetMatchProto snippet_matches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->snippet_matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->snippet_matches(static_cast<int>(i)));
    }
  }

  // optional string property_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->property_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnippetProto_EntryProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnippetProto_EntryProto*>(
      &from));
}

void SnippetProto_EntryProto::MergeFrom(const SnippetProto_EntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SnippetProto.EntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snippet_matches_.MergeFrom(from.snippet_matches_);
  if (from.has_property_name()) {
    _has_bits_[0] |= 0x00000001u;
    property_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
}

void SnippetProto_EntryProto::CopyFrom(const SnippetProto_EntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SnippetProto.EntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetProto_EntryProto::IsInitialized() const {
  return true;
}

void SnippetProto_EntryProto::InternalSwap(SnippetProto_EntryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&snippet_matches_)->InternalSwap(CastToBase(&other->snippet_matches_));
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SnippetProto_EntryProto::GetTypeName() const {
  return "icing.lib.SnippetProto.EntryProto";
}


// ===================================================================

void SnippetProto::InitAsDefaultInstance() {
}
class SnippetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SnippetProto>()._has_bits_);
};

SnippetProto::SnippetProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SnippetProto)
}
SnippetProto::SnippetProto(const SnippetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.SnippetProto)
}

void SnippetProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnippetProto_icing_2fproto_2fsearch_2eproto.base);
}

SnippetProto::~SnippetProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SnippetProto)
  SharedDtor();
}

void SnippetProto::SharedDtor() {
}

void SnippetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnippetProto& SnippetProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnippetProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SnippetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SnippetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnippetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .icing.lib.SnippetProto.EntryProto entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnippetProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SnippetProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .icing.lib.SnippetProto.EntryProto entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SnippetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SnippetProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnippetProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SnippetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .icing.lib.SnippetProto.EntryProto entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SnippetProto)
}

size_t SnippetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SnippetProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.SnippetProto.EntryProto entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnippetProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SnippetProto*>(
      &from));
}

void SnippetProto::MergeFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SnippetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void SnippetProto::CopyFrom(const SnippetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SnippetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetProto::IsInitialized() const {
  return true;
}

void SnippetProto::InternalSwap(SnippetProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

std::string SnippetProto::GetTypeName() const {
  return "icing.lib.SnippetProto";
}


// ===================================================================

void SearchResultProto_ResultProto::InitAsDefaultInstance() {
  ::icing::lib::_SearchResultProto_ResultProto_default_instance_._instance.get_mutable()->document_ = const_cast< ::icing::lib::DocumentProto*>(
      ::icing::lib::DocumentProto::internal_default_instance());
  ::icing::lib::_SearchResultProto_ResultProto_default_instance_._instance.get_mutable()->snippet_ = const_cast< ::icing::lib::SnippetProto*>(
      ::icing::lib::SnippetProto::internal_default_instance());
}
class SearchResultProto_ResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchResultProto_ResultProto>()._has_bits_);
  static const ::icing::lib::DocumentProto& document(const SearchResultProto_ResultProto* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::SnippetProto& snippet(const SearchResultProto_ResultProto* msg);
  static void set_has_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::icing::lib::DocumentProto&
SearchResultProto_ResultProto::_Internal::document(const SearchResultProto_ResultProto* msg) {
  return *msg->document_;
}
const ::icing::lib::SnippetProto&
SearchResultProto_ResultProto::_Internal::snippet(const SearchResultProto_ResultProto* msg) {
  return *msg->snippet_;
}
void SearchResultProto_ResultProto::clear_document() {
  if (document_ != nullptr) document_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SearchResultProto_ResultProto::SearchResultProto_ResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SearchResultProto.ResultProto)
}
SearchResultProto_ResultProto::SearchResultProto_ResultProto(const SearchResultProto_ResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::icing::lib::DocumentProto(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from.has_snippet()) {
    snippet_ = new ::icing::lib::SnippetProto(*from.snippet_);
  } else {
    snippet_ = nullptr;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.SearchResultProto.ResultProto)
}

void SearchResultProto_ResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto.base);
  ::memset(&document_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&document_)) + sizeof(score_));
}

SearchResultProto_ResultProto::~SearchResultProto_ResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SearchResultProto.ResultProto)
  SharedDtor();
}

void SearchResultProto_ResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete snippet_;
}

void SearchResultProto_ResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResultProto_ResultProto& SearchResultProto_ResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResultProto_ResultProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SearchResultProto_ResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SearchResultProto.ResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(document_ != nullptr);
      document_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(snippet_ != nullptr);
      snippet_->Clear();
    }
  }
  score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchResultProto_ResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.DocumentProto document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.SnippetProto snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_snippet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchResultProto_ResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SearchResultProto.ResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.DocumentProto document = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.SnippetProto snippet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snippet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double score = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SearchResultProto.ResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SearchResultProto.ResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchResultProto_ResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SearchResultProto.ResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.DocumentProto document = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::document(this), output);
  }

  // optional .icing.lib.SnippetProto snippet = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::snippet(this), output);
  }

  // optional double score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->score(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SearchResultProto.ResultProto)
}

size_t SearchResultProto_ResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SearchResultProto.ResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .icing.lib.DocumentProto document = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *document_);
    }

    // optional .icing.lib.SnippetProto snippet = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *snippet_);
    }

    // optional double score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResultProto_ResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SearchResultProto_ResultProto*>(
      &from));
}

void SearchResultProto_ResultProto::MergeFrom(const SearchResultProto_ResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SearchResultProto.ResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_document()->::icing::lib::DocumentProto::MergeFrom(from.document());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_snippet()->::icing::lib::SnippetProto::MergeFrom(from.snippet());
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchResultProto_ResultProto::CopyFrom(const SearchResultProto_ResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SearchResultProto.ResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultProto_ResultProto::IsInitialized() const {
  return true;
}

void SearchResultProto_ResultProto::InternalSwap(SearchResultProto_ResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(document_, other->document_);
  swap(snippet_, other->snippet_);
  swap(score_, other->score_);
}

std::string SearchResultProto_ResultProto::GetTypeName() const {
  return "icing.lib.SearchResultProto.ResultProto";
}


// ===================================================================

void SearchResultProto_DebugInfoProto::InitAsDefaultInstance() {
}
class SearchResultProto_DebugInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchResultProto_DebugInfoProto>()._has_bits_);
  static void set_has_executed_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SearchResultProto_DebugInfoProto::SearchResultProto_DebugInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SearchResultProto.DebugInfoProto)
}
SearchResultProto_DebugInfoProto::SearchResultProto_DebugInfoProto(const SearchResultProto_DebugInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  executed_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_executed_query()) {
    executed_query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executed_query_);
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.SearchResultProto.DebugInfoProto)
}

void SearchResultProto_DebugInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto.base);
  executed_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SearchResultProto_DebugInfoProto::~SearchResultProto_DebugInfoProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SearchResultProto.DebugInfoProto)
  SharedDtor();
}

void SearchResultProto_DebugInfoProto::SharedDtor() {
  executed_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchResultProto_DebugInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResultProto_DebugInfoProto& SearchResultProto_DebugInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResultProto_DebugInfoProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SearchResultProto_DebugInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SearchResultProto.DebugInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    executed_query_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchResultProto_DebugInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string executed_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_executed_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchResultProto_DebugInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SearchResultProto.DebugInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string executed_query = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_executed_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SearchResultProto.DebugInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SearchResultProto.DebugInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchResultProto_DebugInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SearchResultProto.DebugInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string executed_query = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->executed_query(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SearchResultProto.DebugInfoProto)
}

size_t SearchResultProto_DebugInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SearchResultProto.DebugInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string executed_query = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->executed_query());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResultProto_DebugInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SearchResultProto_DebugInfoProto*>(
      &from));
}

void SearchResultProto_DebugInfoProto::MergeFrom(const SearchResultProto_DebugInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SearchResultProto.DebugInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_executed_query()) {
    _has_bits_[0] |= 0x00000001u;
    executed_query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executed_query_);
  }
}

void SearchResultProto_DebugInfoProto::CopyFrom(const SearchResultProto_DebugInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SearchResultProto.DebugInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultProto_DebugInfoProto::IsInitialized() const {
  return true;
}

void SearchResultProto_DebugInfoProto::InternalSwap(SearchResultProto_DebugInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  executed_query_.Swap(&other->executed_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SearchResultProto_DebugInfoProto::GetTypeName() const {
  return "icing.lib.SearchResultProto.DebugInfoProto";
}


// ===================================================================

void SearchResultProto::InitAsDefaultInstance() {
  ::icing::lib::_SearchResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_SearchResultProto_default_instance_._instance.get_mutable()->debug_info_ = const_cast< ::icing::lib::SearchResultProto_DebugInfoProto*>(
      ::icing::lib::SearchResultProto_DebugInfoProto::internal_default_instance());
  ::icing::lib::_SearchResultProto_default_instance_._instance.get_mutable()->query_stats_ = const_cast< ::icing::lib::QueryStatsProto*>(
      ::icing::lib::QueryStatsProto::internal_default_instance());
}
class SearchResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const SearchResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::SearchResultProto_DebugInfoProto& debug_info(const SearchResultProto* msg);
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next_page_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::icing::lib::QueryStatsProto& query_stats(const SearchResultProto* msg);
  static void set_has_query_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::icing::lib::StatusProto&
SearchResultProto::_Internal::status(const SearchResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::SearchResultProto_DebugInfoProto&
SearchResultProto::_Internal::debug_info(const SearchResultProto* msg) {
  return *msg->debug_info_;
}
const ::icing::lib::QueryStatsProto&
SearchResultProto::_Internal::query_stats(const SearchResultProto* msg) {
  return *msg->query_stats_;
}
void SearchResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SearchResultProto::clear_query_stats() {
  if (query_stats_ != nullptr) query_stats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SearchResultProto::SearchResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SearchResultProto)
}
SearchResultProto::SearchResultProto(const SearchResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::icing::lib::SearchResultProto_DebugInfoProto(*from.debug_info_);
  } else {
    debug_info_ = nullptr;
  }
  if (from.has_query_stats()) {
    query_stats_ = new ::icing::lib::QueryStatsProto(*from.query_stats_);
  } else {
    query_stats_ = nullptr;
  }
  next_page_token_ = from.next_page_token_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.SearchResultProto)
}

void SearchResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResultProto_icing_2fproto_2fsearch_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_page_token_) -
      reinterpret_cast<char*>(&status_)) + sizeof(next_page_token_));
}

SearchResultProto::~SearchResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SearchResultProto)
  SharedDtor();
}

void SearchResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete debug_info_;
  if (this != internal_default_instance()) delete query_stats_;
}

void SearchResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResultProto& SearchResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResultProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void SearchResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SearchResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debug_info_ != nullptr);
      debug_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(query_stats_ != nullptr);
      query_stats_->Clear();
    }
  }
  next_page_token_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SearchResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.SearchResultProto.ResultProto results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.SearchResultProto.DebugInfoProto debug_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_debug_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 next_page_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_next_page_token(&has_bits);
          next_page_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.QueryStatsProto query_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_query_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SearchResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SearchResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.SearchResultProto.ResultProto results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.SearchResultProto.DebugInfoProto debug_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_page_token = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_next_page_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_page_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.QueryStatsProto query_stats = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SearchResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SearchResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SearchResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SearchResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // repeated .icing.lib.SearchResultProto.ResultProto results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  // optional .icing.lib.SearchResultProto.DebugInfoProto debug_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::debug_info(this), output);
  }

  // optional uint64 next_page_token = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->next_page_token(), output);
  }

  // optional .icing.lib.QueryStatsProto query_stats = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::query_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SearchResultProto)
}

size_t SearchResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SearchResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.SearchResultProto.ResultProto results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.SearchResultProto.DebugInfoProto debug_info = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_info_);
    }

    // optional .icing.lib.QueryStatsProto query_stats = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_stats_);
    }

    // optional uint64 next_page_token = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->next_page_token());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SearchResultProto*>(
      &from));
}

void SearchResultProto::MergeFrom(const SearchResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SearchResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_debug_info()->::icing::lib::SearchResultProto_DebugInfoProto::MergeFrom(from.debug_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_query_stats()->::icing::lib::QueryStatsProto::MergeFrom(from.query_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      next_page_token_ = from.next_page_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchResultProto::CopyFrom(const SearchResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SearchResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultProto::IsInitialized() const {
  return true;
}

void SearchResultProto::InternalSwap(SearchResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  swap(status_, other->status_);
  swap(debug_info_, other->debug_info_);
  swap(query_stats_, other->query_stats_);
  swap(next_page_token_, other->next_page_token_);
}

std::string SearchResultProto::GetTypeName() const {
  return "icing.lib.SearchResultProto";
}


// ===================================================================

void TypePropertyMask::InitAsDefaultInstance() {
}
class TypePropertyMask::_Internal {
 public:
  using HasBits = decltype(std::declval<TypePropertyMask>()._has_bits_);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TypePropertyMask::TypePropertyMask()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.TypePropertyMask)
}
TypePropertyMask::TypePropertyMask(const TypePropertyMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_type()) {
    schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.TypePropertyMask)
}

void TypePropertyMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto.base);
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TypePropertyMask::~TypePropertyMask() {
  // @@protoc_insertion_point(destructor:icing.lib.TypePropertyMask)
  SharedDtor();
}

void TypePropertyMask::SharedDtor() {
  schema_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TypePropertyMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypePropertyMask& TypePropertyMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TypePropertyMask_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void TypePropertyMask::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.TypePropertyMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_type_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TypePropertyMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string schema_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_schema_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_paths(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TypePropertyMask::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.TypePropertyMask)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string schema_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string paths = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.TypePropertyMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.TypePropertyMask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TypePropertyMask::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.TypePropertyMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string schema_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->schema_type(), output);
  }

  // repeated string paths = 2;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->paths(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.TypePropertyMask)
}

size_t TypePropertyMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.TypePropertyMask)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->paths_size());
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->paths(i));
  }

  // optional string schema_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->schema_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypePropertyMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TypePropertyMask*>(
      &from));
}

void TypePropertyMask::MergeFrom(const TypePropertyMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.TypePropertyMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.has_schema_type()) {
    _has_bits_[0] |= 0x00000001u;
    schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
  }
}

void TypePropertyMask::CopyFrom(const TypePropertyMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.TypePropertyMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypePropertyMask::IsInitialized() const {
  return true;
}

void TypePropertyMask::InternalSwap(TypePropertyMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paths_.InternalSwap(CastToBase(&other->paths_));
  schema_type_.Swap(&other->schema_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TypePropertyMask::GetTypeName() const {
  return "icing.lib.TypePropertyMask";
}


// ===================================================================

void GetResultSpecProto::InitAsDefaultInstance() {
}
class GetResultSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResultSpecProto>()._has_bits_);
};

GetResultSpecProto::GetResultSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetResultSpecProto)
}
GetResultSpecProto::GetResultSpecProto(const GetResultSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      type_property_masks_(from.type_property_masks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetResultSpecProto)
}

void GetResultSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResultSpecProto_icing_2fproto_2fsearch_2eproto.base);
}

GetResultSpecProto::~GetResultSpecProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetResultSpecProto)
  SharedDtor();
}

void GetResultSpecProto::SharedDtor() {
}

void GetResultSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResultSpecProto& GetResultSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResultSpecProto_icing_2fproto_2fsearch_2eproto.base);
  return *internal_default_instance();
}


void GetResultSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetResultSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_property_masks_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResultSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .icing.lib.TypePropertyMask type_property_masks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_type_property_masks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResultSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetResultSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .icing.lib.TypePropertyMask type_property_masks = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_type_property_masks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetResultSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetResultSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResultSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetResultSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .icing.lib.TypePropertyMask type_property_masks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_property_masks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->type_property_masks(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetResultSpecProto)
}

size_t GetResultSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetResultSpecProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.TypePropertyMask type_property_masks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->type_property_masks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->type_property_masks(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResultSpecProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResultSpecProto*>(
      &from));
}

void GetResultSpecProto::MergeFrom(const GetResultSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetResultSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_property_masks_.MergeFrom(from.type_property_masks_);
}

void GetResultSpecProto::CopyFrom(const GetResultSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetResultSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResultSpecProto::IsInitialized() const {
  return true;
}

void GetResultSpecProto::InternalSwap(GetResultSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&type_property_masks_)->InternalSwap(CastToBase(&other->type_property_masks_));
}

std::string GetResultSpecProto::GetTypeName() const {
  return "icing.lib.GetResultSpecProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::SearchSpecProto* Arena::CreateMaybeMessage< ::icing::lib::SearchSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SearchSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::ResultSpecProto_SnippetSpecProto* Arena::CreateMaybeMessage< ::icing::lib::ResultSpecProto_SnippetSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ResultSpecProto_SnippetSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::ResultSpecProto_ResultGrouping* Arena::CreateMaybeMessage< ::icing::lib::ResultSpecProto_ResultGrouping >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ResultSpecProto_ResultGrouping >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::ResultSpecProto* Arena::CreateMaybeMessage< ::icing::lib::ResultSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ResultSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SnippetMatchProto* Arena::CreateMaybeMessage< ::icing::lib::SnippetMatchProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SnippetMatchProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SnippetProto_EntryProto* Arena::CreateMaybeMessage< ::icing::lib::SnippetProto_EntryProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SnippetProto_EntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SnippetProto* Arena::CreateMaybeMessage< ::icing::lib::SnippetProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SnippetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SearchResultProto_ResultProto* Arena::CreateMaybeMessage< ::icing::lib::SearchResultProto_ResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SearchResultProto_ResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SearchResultProto_DebugInfoProto* Arena::CreateMaybeMessage< ::icing::lib::SearchResultProto_DebugInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SearchResultProto_DebugInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SearchResultProto* Arena::CreateMaybeMessage< ::icing::lib::SearchResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SearchResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::TypePropertyMask* Arena::CreateMaybeMessage< ::icing::lib::TypePropertyMask >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::TypePropertyMask >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetResultSpecProto* Arena::CreateMaybeMessage< ::icing::lib::GetResultSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetResultSpecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
