// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/legacy/index/proto/icing-dynamic-trie-header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
class IcingDynamicTrieHeader;
class IcingDynamicTrieHeaderDefaultTypeInternal;
extern IcingDynamicTrieHeaderDefaultTypeInternal _IcingDynamicTrieHeader_default_instance_;
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::IcingDynamicTrieHeader* Arena::CreateMaybeMessage<::icing::IcingDynamicTrieHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {

// ===================================================================

class IcingDynamicTrieHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.IcingDynamicTrieHeader) */ {
 public:
  IcingDynamicTrieHeader();
  virtual ~IcingDynamicTrieHeader();

  IcingDynamicTrieHeader(const IcingDynamicTrieHeader& from);
  IcingDynamicTrieHeader(IcingDynamicTrieHeader&& from) noexcept
    : IcingDynamicTrieHeader() {
    *this = ::std::move(from);
  }

  inline IcingDynamicTrieHeader& operator=(const IcingDynamicTrieHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline IcingDynamicTrieHeader& operator=(IcingDynamicTrieHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IcingDynamicTrieHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IcingDynamicTrieHeader* internal_default_instance() {
    return reinterpret_cast<const IcingDynamicTrieHeader*>(
               &_IcingDynamicTrieHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IcingDynamicTrieHeader& a, IcingDynamicTrieHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(IcingDynamicTrieHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IcingDynamicTrieHeader* New() const final {
    return CreateMaybeMessage<IcingDynamicTrieHeader>(nullptr);
  }

  IcingDynamicTrieHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IcingDynamicTrieHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IcingDynamicTrieHeader& from);
  void MergeFrom(const IcingDynamicTrieHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IcingDynamicTrieHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.IcingDynamicTrieHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreeListsFieldNumber = 9,
    kVersionFieldNumber = 1,
    kValueSizeFieldNumber = 2,
    kMaxNodesFieldNumber = 3,
    kMaxNextsFieldNumber = 4,
    kMaxSuffixesSizeFieldNumber = 5,
    kNumNodesFieldNumber = 6,
    kNumNextsFieldNumber = 7,
    kSuffixesSizeFieldNumber = 8,
    kNumKeysFieldNumber = 10,
    kDeprecatedIsFlushingFieldNumber = 11,
  };
  // repeated uint32 free_lists = 9;
  int free_lists_size() const;
  void clear_free_lists();
  ::PROTOBUF_NAMESPACE_ID::uint32 free_lists(int index) const;
  void set_free_lists(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_free_lists(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      free_lists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_free_lists();

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 value_size = 2;
  bool has_value_size() const;
  void clear_value_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_size() const;
  void set_value_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_nodes = 3;
  bool has_max_nodes() const;
  void clear_max_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nodes() const;
  void set_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_nexts = 4;
  bool has_max_nexts() const;
  void clear_max_nexts();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nexts() const;
  void set_max_nexts(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 max_suffixes_size = 5;
  bool has_max_suffixes_size() const;
  void clear_max_suffixes_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_suffixes_size() const;
  void set_max_suffixes_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_nodes = 6;
  bool has_num_nodes() const;
  void clear_num_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nodes() const;
  void set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_nexts = 7;
  bool has_num_nexts() const;
  void clear_num_nexts();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nexts() const;
  void set_num_nexts(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 suffixes_size = 8;
  bool has_suffixes_size() const;
  void clear_suffixes_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 suffixes_size() const;
  void set_suffixes_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 num_keys = 10;
  bool has_num_keys() const;
  void clear_num_keys();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keys() const;
  void set_num_keys(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool deprecated_is_flushing = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_is_flushing() const;
  PROTOBUF_DEPRECATED void clear_deprecated_is_flushing();
  PROTOBUF_DEPRECATED bool deprecated_is_flushing() const;
  PROTOBUF_DEPRECATED void set_deprecated_is_flushing(bool value);

  // @@protoc_insertion_point(class_scope:icing.IcingDynamicTrieHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > free_lists_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_nexts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_suffixes_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nexts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suffixes_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_keys_;
  bool deprecated_is_flushing_;
  friend struct ::TableStruct_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IcingDynamicTrieHeader

// optional uint32 version = 1;
inline bool IcingDynamicTrieHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IcingDynamicTrieHeader::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::version() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.version)
  return version_;
}
inline void IcingDynamicTrieHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.version)
}

// optional uint32 value_size = 2;
inline bool IcingDynamicTrieHeader::has_value_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IcingDynamicTrieHeader::clear_value_size() {
  value_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::value_size() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.value_size)
  return value_size_;
}
inline void IcingDynamicTrieHeader::set_value_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_size_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.value_size)
}

// optional uint32 max_nodes = 3;
inline bool IcingDynamicTrieHeader::has_max_nodes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IcingDynamicTrieHeader::clear_max_nodes() {
  max_nodes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::max_nodes() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.max_nodes)
  return max_nodes_;
}
inline void IcingDynamicTrieHeader::set_max_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_nodes_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.max_nodes)
}

// optional uint32 max_nexts = 4;
inline bool IcingDynamicTrieHeader::has_max_nexts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IcingDynamicTrieHeader::clear_max_nexts() {
  max_nexts_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::max_nexts() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.max_nexts)
  return max_nexts_;
}
inline void IcingDynamicTrieHeader::set_max_nexts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_nexts_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.max_nexts)
}

// optional uint32 max_suffixes_size = 5;
inline bool IcingDynamicTrieHeader::has_max_suffixes_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IcingDynamicTrieHeader::clear_max_suffixes_size() {
  max_suffixes_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::max_suffixes_size() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.max_suffixes_size)
  return max_suffixes_size_;
}
inline void IcingDynamicTrieHeader::set_max_suffixes_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_suffixes_size_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.max_suffixes_size)
}

// optional uint32 num_nodes = 6;
inline bool IcingDynamicTrieHeader::has_num_nodes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IcingDynamicTrieHeader::clear_num_nodes() {
  num_nodes_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::num_nodes() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.num_nodes)
  return num_nodes_;
}
inline void IcingDynamicTrieHeader::set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_nodes_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.num_nodes)
}

// optional uint32 num_nexts = 7;
inline bool IcingDynamicTrieHeader::has_num_nexts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IcingDynamicTrieHeader::clear_num_nexts() {
  num_nexts_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::num_nexts() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.num_nexts)
  return num_nexts_;
}
inline void IcingDynamicTrieHeader::set_num_nexts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_nexts_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.num_nexts)
}

// optional uint32 suffixes_size = 8;
inline bool IcingDynamicTrieHeader::has_suffixes_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IcingDynamicTrieHeader::clear_suffixes_size() {
  suffixes_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::suffixes_size() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.suffixes_size)
  return suffixes_size_;
}
inline void IcingDynamicTrieHeader::set_suffixes_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  suffixes_size_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.suffixes_size)
}

// repeated uint32 free_lists = 9;
inline int IcingDynamicTrieHeader::free_lists_size() const {
  return free_lists_.size();
}
inline void IcingDynamicTrieHeader::clear_free_lists() {
  free_lists_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::free_lists(int index) const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.free_lists)
  return free_lists_.Get(index);
}
inline void IcingDynamicTrieHeader::set_free_lists(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  free_lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.free_lists)
}
inline void IcingDynamicTrieHeader::add_free_lists(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  free_lists_.Add(value);
  // @@protoc_insertion_point(field_add:icing.IcingDynamicTrieHeader.free_lists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IcingDynamicTrieHeader::free_lists() const {
  // @@protoc_insertion_point(field_list:icing.IcingDynamicTrieHeader.free_lists)
  return free_lists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IcingDynamicTrieHeader::mutable_free_lists() {
  // @@protoc_insertion_point(field_mutable_list:icing.IcingDynamicTrieHeader.free_lists)
  return &free_lists_;
}

// optional uint32 num_keys = 10;
inline bool IcingDynamicTrieHeader::has_num_keys() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IcingDynamicTrieHeader::clear_num_keys() {
  num_keys_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IcingDynamicTrieHeader::num_keys() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.num_keys)
  return num_keys_;
}
inline void IcingDynamicTrieHeader::set_num_keys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_keys_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.num_keys)
}

// optional bool deprecated_is_flushing = 11 [deprecated = true];
inline bool IcingDynamicTrieHeader::has_deprecated_is_flushing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IcingDynamicTrieHeader::clear_deprecated_is_flushing() {
  deprecated_is_flushing_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool IcingDynamicTrieHeader::deprecated_is_flushing() const {
  // @@protoc_insertion_point(field_get:icing.IcingDynamicTrieHeader.deprecated_is_flushing)
  return deprecated_is_flushing_;
}
inline void IcingDynamicTrieHeader::set_deprecated_is_flushing(bool value) {
  _has_bits_[0] |= 0x00000200u;
  deprecated_is_flushing_ = value;
  // @@protoc_insertion_point(field_set:icing.IcingDynamicTrieHeader.deprecated_is_flushing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace icing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2flegacy_2findex_2fproto_2ficing_2ddynamic_2dtrie_2dheader_2eproto
