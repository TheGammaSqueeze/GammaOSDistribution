// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/term.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fterm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fterm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fterm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2fterm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class TermMatchType;
class TermMatchTypeDefaultTypeInternal;
extern TermMatchTypeDefaultTypeInternal _TermMatchType_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::TermMatchType* Arena::CreateMaybeMessage<::icing::lib::TermMatchType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

enum TermMatchType_Code : int {
  TermMatchType_Code_UNKNOWN = 0,
  TermMatchType_Code_EXACT_ONLY = 1,
  TermMatchType_Code_PREFIX = 2
};
bool TermMatchType_Code_IsValid(int value);
constexpr TermMatchType_Code TermMatchType_Code_Code_MIN = TermMatchType_Code_UNKNOWN;
constexpr TermMatchType_Code TermMatchType_Code_Code_MAX = TermMatchType_Code_PREFIX;
constexpr int TermMatchType_Code_Code_ARRAYSIZE = TermMatchType_Code_Code_MAX + 1;

const std::string& TermMatchType_Code_Name(TermMatchType_Code value);
template<typename T>
inline const std::string& TermMatchType_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TermMatchType_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TermMatchType_Code_Name.");
  return TermMatchType_Code_Name(static_cast<TermMatchType_Code>(enum_t_value));
}
bool TermMatchType_Code_Parse(
    const std::string& name, TermMatchType_Code* value);
// ===================================================================

class TermMatchType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.TermMatchType) */ {
 public:
  TermMatchType();
  virtual ~TermMatchType();

  TermMatchType(const TermMatchType& from);
  TermMatchType(TermMatchType&& from) noexcept
    : TermMatchType() {
    *this = ::std::move(from);
  }

  inline TermMatchType& operator=(const TermMatchType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TermMatchType& operator=(TermMatchType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TermMatchType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermMatchType* internal_default_instance() {
    return reinterpret_cast<const TermMatchType*>(
               &_TermMatchType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TermMatchType& a, TermMatchType& b) {
    a.Swap(&b);
  }
  inline void Swap(TermMatchType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TermMatchType* New() const final {
    return CreateMaybeMessage<TermMatchType>(nullptr);
  }

  TermMatchType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TermMatchType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TermMatchType& from);
  void MergeFrom(const TermMatchType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TermMatchType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.TermMatchType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TermMatchType_Code Code;
  static constexpr Code UNKNOWN =
    TermMatchType_Code_UNKNOWN;
  static constexpr Code EXACT_ONLY =
    TermMatchType_Code_EXACT_ONLY;
  static constexpr Code PREFIX =
    TermMatchType_Code_PREFIX;
  static inline bool Code_IsValid(int value) {
    return TermMatchType_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    TermMatchType_Code_Code_MIN;
  static constexpr Code Code_MAX =
    TermMatchType_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    TermMatchType_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return TermMatchType_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(const std::string& name,
      Code* value) {
    return TermMatchType_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:icing.lib.TermMatchType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_icing_2fproto_2fterm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TermMatchType

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::icing::lib::TermMatchType_Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fterm_2eproto
