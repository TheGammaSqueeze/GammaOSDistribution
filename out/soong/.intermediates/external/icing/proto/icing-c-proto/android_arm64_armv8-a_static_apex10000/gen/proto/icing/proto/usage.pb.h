// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/usage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fusage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fusage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "icing/proto/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fusage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2fusage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class ReportUsageResultProto;
class ReportUsageResultProtoDefaultTypeInternal;
extern ReportUsageResultProtoDefaultTypeInternal _ReportUsageResultProto_default_instance_;
class UsageReport;
class UsageReportDefaultTypeInternal;
extern UsageReportDefaultTypeInternal _UsageReport_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::ReportUsageResultProto* Arena::CreateMaybeMessage<::icing::lib::ReportUsageResultProto>(Arena*);
template<> ::icing::lib::UsageReport* Arena::CreateMaybeMessage<::icing::lib::UsageReport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

enum UsageReport_UsageType : int {
  UsageReport_UsageType_USAGE_TYPE1 = 0,
  UsageReport_UsageType_USAGE_TYPE2 = 1,
  UsageReport_UsageType_USAGE_TYPE3 = 2
};
bool UsageReport_UsageType_IsValid(int value);
constexpr UsageReport_UsageType UsageReport_UsageType_UsageType_MIN = UsageReport_UsageType_USAGE_TYPE1;
constexpr UsageReport_UsageType UsageReport_UsageType_UsageType_MAX = UsageReport_UsageType_USAGE_TYPE3;
constexpr int UsageReport_UsageType_UsageType_ARRAYSIZE = UsageReport_UsageType_UsageType_MAX + 1;

const std::string& UsageReport_UsageType_Name(UsageReport_UsageType value);
template<typename T>
inline const std::string& UsageReport_UsageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsageReport_UsageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsageReport_UsageType_Name.");
  return UsageReport_UsageType_Name(static_cast<UsageReport_UsageType>(enum_t_value));
}
bool UsageReport_UsageType_Parse(
    const std::string& name, UsageReport_UsageType* value);
// ===================================================================

class UsageReport :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.UsageReport) */ {
 public:
  UsageReport();
  virtual ~UsageReport();

  UsageReport(const UsageReport& from);
  UsageReport(UsageReport&& from) noexcept
    : UsageReport() {
    *this = ::std::move(from);
  }

  inline UsageReport& operator=(const UsageReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageReport& operator=(UsageReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UsageReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsageReport* internal_default_instance() {
    return reinterpret_cast<const UsageReport*>(
               &_UsageReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsageReport& a, UsageReport& b) {
    a.Swap(&b);
  }
  inline void Swap(UsageReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsageReport* New() const final {
    return CreateMaybeMessage<UsageReport>(nullptr);
  }

  UsageReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsageReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UsageReport& from);
  void MergeFrom(const UsageReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UsageReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.UsageReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UsageReport_UsageType UsageType;
  static constexpr UsageType USAGE_TYPE1 =
    UsageReport_UsageType_USAGE_TYPE1;
  static constexpr UsageType USAGE_TYPE2 =
    UsageReport_UsageType_USAGE_TYPE2;
  static constexpr UsageType USAGE_TYPE3 =
    UsageReport_UsageType_USAGE_TYPE3;
  static inline bool UsageType_IsValid(int value) {
    return UsageReport_UsageType_IsValid(value);
  }
  static constexpr UsageType UsageType_MIN =
    UsageReport_UsageType_UsageType_MIN;
  static constexpr UsageType UsageType_MAX =
    UsageReport_UsageType_UsageType_MAX;
  static constexpr int UsageType_ARRAYSIZE =
    UsageReport_UsageType_UsageType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UsageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UsageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UsageType_Name.");
    return UsageReport_UsageType_Name(enum_t_value);
  }
  static inline bool UsageType_Parse(const std::string& name,
      UsageType* value) {
    return UsageReport_UsageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentNamespaceFieldNumber = 1,
    kDocumentUriFieldNumber = 2,
    kUsageTimestampMsFieldNumber = 3,
    kUsageTypeFieldNumber = 4,
  };
  // optional string document_namespace = 1;
  bool has_document_namespace() const;
  void clear_document_namespace();
  const std::string& document_namespace() const;
  void set_document_namespace(const std::string& value);
  void set_document_namespace(std::string&& value);
  void set_document_namespace(const char* value);
  void set_document_namespace(const char* value, size_t size);
  std::string* mutable_document_namespace();
  std::string* release_document_namespace();
  void set_allocated_document_namespace(std::string* document_namespace);

  // optional string document_uri = 2;
  bool has_document_uri() const;
  void clear_document_uri();
  const std::string& document_uri() const;
  void set_document_uri(const std::string& value);
  void set_document_uri(std::string&& value);
  void set_document_uri(const char* value);
  void set_document_uri(const char* value, size_t size);
  std::string* mutable_document_uri();
  std::string* release_document_uri();
  void set_allocated_document_uri(std::string* document_uri);

  // optional int64 usage_timestamp_ms = 3;
  bool has_usage_timestamp_ms() const;
  void clear_usage_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 usage_timestamp_ms() const;
  void set_usage_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .icing.lib.UsageReport.UsageType usage_type = 4;
  bool has_usage_type() const;
  void clear_usage_type();
  ::icing::lib::UsageReport_UsageType usage_type() const;
  void set_usage_type(::icing::lib::UsageReport_UsageType value);

  // @@protoc_insertion_point(class_scope:icing.lib.UsageReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_uri_;
  ::PROTOBUF_NAMESPACE_ID::int64 usage_timestamp_ms_;
  int usage_type_;
  friend struct ::TableStruct_icing_2fproto_2fusage_2eproto;
};
// -------------------------------------------------------------------

class ReportUsageResultProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.ReportUsageResultProto) */ {
 public:
  ReportUsageResultProto();
  virtual ~ReportUsageResultProto();

  ReportUsageResultProto(const ReportUsageResultProto& from);
  ReportUsageResultProto(ReportUsageResultProto&& from) noexcept
    : ReportUsageResultProto() {
    *this = ::std::move(from);
  }

  inline ReportUsageResultProto& operator=(const ReportUsageResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportUsageResultProto& operator=(ReportUsageResultProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReportUsageResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportUsageResultProto* internal_default_instance() {
    return reinterpret_cast<const ReportUsageResultProto*>(
               &_ReportUsageResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportUsageResultProto& a, ReportUsageResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportUsageResultProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportUsageResultProto* New() const final {
    return CreateMaybeMessage<ReportUsageResultProto>(nullptr);
  }

  ReportUsageResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportUsageResultProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReportUsageResultProto& from);
  void MergeFrom(const ReportUsageResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportUsageResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.ReportUsageResultProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .icing.lib.StatusProto status = 1;
  bool has_status() const;
  void clear_status();
  const ::icing::lib::StatusProto& status() const;
  ::icing::lib::StatusProto* release_status();
  ::icing::lib::StatusProto* mutable_status();
  void set_allocated_status(::icing::lib::StatusProto* status);

  // @@protoc_insertion_point(class_scope:icing.lib.ReportUsageResultProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::icing::lib::StatusProto* status_;
  friend struct ::TableStruct_icing_2fproto_2fusage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsageReport

// optional string document_namespace = 1;
inline bool UsageReport::has_document_namespace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UsageReport::clear_document_namespace() {
  document_namespace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UsageReport::document_namespace() const {
  // @@protoc_insertion_point(field_get:icing.lib.UsageReport.document_namespace)
  return document_namespace_.GetNoArena();
}
inline void UsageReport::set_document_namespace(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  document_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:icing.lib.UsageReport.document_namespace)
}
inline void UsageReport::set_document_namespace(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  document_namespace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:icing.lib.UsageReport.document_namespace)
}
inline void UsageReport::set_document_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  document_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:icing.lib.UsageReport.document_namespace)
}
inline void UsageReport::set_document_namespace(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  document_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:icing.lib.UsageReport.document_namespace)
}
inline std::string* UsageReport::mutable_document_namespace() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:icing.lib.UsageReport.document_namespace)
  return document_namespace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsageReport::release_document_namespace() {
  // @@protoc_insertion_point(field_release:icing.lib.UsageReport.document_namespace)
  if (!has_document_namespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return document_namespace_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsageReport::set_allocated_document_namespace(std::string* document_namespace) {
  if (document_namespace != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_namespace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_namespace);
  // @@protoc_insertion_point(field_set_allocated:icing.lib.UsageReport.document_namespace)
}

// optional string document_uri = 2;
inline bool UsageReport::has_document_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UsageReport::clear_document_uri() {
  document_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UsageReport::document_uri() const {
  // @@protoc_insertion_point(field_get:icing.lib.UsageReport.document_uri)
  return document_uri_.GetNoArena();
}
inline void UsageReport::set_document_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  document_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:icing.lib.UsageReport.document_uri)
}
inline void UsageReport::set_document_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  document_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:icing.lib.UsageReport.document_uri)
}
inline void UsageReport::set_document_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  document_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:icing.lib.UsageReport.document_uri)
}
inline void UsageReport::set_document_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  document_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:icing.lib.UsageReport.document_uri)
}
inline std::string* UsageReport::mutable_document_uri() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:icing.lib.UsageReport.document_uri)
  return document_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UsageReport::release_document_uri() {
  // @@protoc_insertion_point(field_release:icing.lib.UsageReport.document_uri)
  if (!has_document_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return document_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UsageReport::set_allocated_document_uri(std::string* document_uri) {
  if (document_uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  document_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_uri);
  // @@protoc_insertion_point(field_set_allocated:icing.lib.UsageReport.document_uri)
}

// optional int64 usage_timestamp_ms = 3;
inline bool UsageReport::has_usage_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UsageReport::clear_usage_timestamp_ms() {
  usage_timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UsageReport::usage_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.UsageReport.usage_timestamp_ms)
  return usage_timestamp_ms_;
}
inline void UsageReport::set_usage_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  usage_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.UsageReport.usage_timestamp_ms)
}

// optional .icing.lib.UsageReport.UsageType usage_type = 4;
inline bool UsageReport::has_usage_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UsageReport::clear_usage_type() {
  usage_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::icing::lib::UsageReport_UsageType UsageReport::usage_type() const {
  // @@protoc_insertion_point(field_get:icing.lib.UsageReport.usage_type)
  return static_cast< ::icing::lib::UsageReport_UsageType >(usage_type_);
}
inline void UsageReport::set_usage_type(::icing::lib::UsageReport_UsageType value) {
  assert(::icing::lib::UsageReport_UsageType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  usage_type_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.UsageReport.usage_type)
}

// -------------------------------------------------------------------

// ReportUsageResultProto

// optional .icing.lib.StatusProto status = 1;
inline bool ReportUsageResultProto::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::icing::lib::StatusProto& ReportUsageResultProto::status() const {
  const ::icing::lib::StatusProto* p = status_;
  // @@protoc_insertion_point(field_get:icing.lib.ReportUsageResultProto.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::StatusProto*>(
      &::icing::lib::_StatusProto_default_instance_);
}
inline ::icing::lib::StatusProto* ReportUsageResultProto::release_status() {
  // @@protoc_insertion_point(field_release:icing.lib.ReportUsageResultProto.status)
  _has_bits_[0] &= ~0x00000001u;
  ::icing::lib::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::icing::lib::StatusProto* ReportUsageResultProto::mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::StatusProto>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.ReportUsageResultProto.status)
  return status_;
}
inline void ReportUsageResultProto::set_allocated_status(::icing::lib::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.ReportUsageResultProto.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::icing::lib::UsageReport_UsageType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fusage_2eproto
