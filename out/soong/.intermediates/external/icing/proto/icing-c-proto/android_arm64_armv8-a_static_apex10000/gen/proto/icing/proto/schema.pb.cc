// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/schema.proto

#include "icing/proto/schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SchemaProto_icing_2fproto_2fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto;
namespace icing {
namespace lib {
class SchemaTypeConfigProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SchemaTypeConfigProto> _instance;
} _SchemaTypeConfigProto_default_instance_;
class StringIndexingConfig_TokenizerTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringIndexingConfig_TokenizerType> _instance;
} _StringIndexingConfig_TokenizerType_default_instance_;
class StringIndexingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringIndexingConfig> _instance;
} _StringIndexingConfig_default_instance_;
class DocumentIndexingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentIndexingConfig> _instance;
} _DocumentIndexingConfig_default_instance_;
class PropertyConfigProto_DataTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyConfigProto_DataType> _instance;
} _PropertyConfigProto_DataType_default_instance_;
class PropertyConfigProto_CardinalityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyConfigProto_Cardinality> _instance;
} _PropertyConfigProto_Cardinality_default_instance_;
class PropertyConfigProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyConfigProto> _instance;
} _PropertyConfigProto_default_instance_;
class SchemaProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SchemaProto> _instance;
} _SchemaProto_default_instance_;
class SetSchemaResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSchemaResultProto> _instance;
} _SetSchemaResultProto_default_instance_;
class GetSchemaResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSchemaResultProto> _instance;
} _GetSchemaResultProto_default_instance_;
class GetSchemaTypeResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSchemaTypeResultProto> _instance;
} _GetSchemaTypeResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DocumentIndexingConfig_default_instance_;
    new (ptr) ::icing::lib::DocumentIndexingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DocumentIndexingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto}, {}};

static void InitDefaultsscc_info_GetSchemaResultProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetSchemaResultProto_default_instance_;
    new (ptr) ::icing::lib::GetSchemaResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetSchemaResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetSchemaResultProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetSchemaResultProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_SchemaProto_icing_2fproto_2fschema_2eproto.base,}};

static void InitDefaultsscc_info_GetSchemaTypeResultProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetSchemaTypeResultProto_default_instance_;
    new (ptr) ::icing::lib::GetSchemaTypeResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetSchemaTypeResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetSchemaTypeResultProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetSchemaTypeResultProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto.base,}};

static void InitDefaultsscc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PropertyConfigProto_default_instance_;
    new (ptr) ::icing::lib::PropertyConfigProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PropertyConfigProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto.base,
      &scc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto.base,}};

static void InitDefaultsscc_info_PropertyConfigProto_Cardinality_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PropertyConfigProto_Cardinality_default_instance_;
    new (ptr) ::icing::lib::PropertyConfigProto_Cardinality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PropertyConfigProto_Cardinality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyConfigProto_Cardinality_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyConfigProto_Cardinality_icing_2fproto_2fschema_2eproto}, {}};

static void InitDefaultsscc_info_PropertyConfigProto_DataType_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PropertyConfigProto_DataType_default_instance_;
    new (ptr) ::icing::lib::PropertyConfigProto_DataType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PropertyConfigProto_DataType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyConfigProto_DataType_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PropertyConfigProto_DataType_icing_2fproto_2fschema_2eproto}, {}};

static void InitDefaultsscc_info_SchemaProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SchemaProto_default_instance_;
    new (ptr) ::icing::lib::SchemaProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SchemaProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SchemaProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SchemaProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto.base,}};

static void InitDefaultsscc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SchemaTypeConfigProto_default_instance_;
    new (ptr) ::icing::lib::SchemaTypeConfigProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SchemaTypeConfigProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto.base,}};

static void InitDefaultsscc_info_SetSchemaResultProto_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_SetSchemaResultProto_default_instance_;
    new (ptr) ::icing::lib::SetSchemaResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::SetSchemaResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetSchemaResultProto_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetSchemaResultProto_icing_2fproto_2fschema_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_StringIndexingConfig_default_instance_;
    new (ptr) ::icing::lib::StringIndexingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::StringIndexingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto}, {}};

static void InitDefaultsscc_info_StringIndexingConfig_TokenizerType_icing_2fproto_2fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_StringIndexingConfig_TokenizerType_default_instance_;
    new (ptr) ::icing::lib::StringIndexingConfig_TokenizerType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::StringIndexingConfig_TokenizerType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringIndexingConfig_TokenizerType_icing_2fproto_2fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringIndexingConfig_TokenizerType_icing_2fproto_2fschema_2eproto}, {}};

namespace icing {
namespace lib {
bool StringIndexingConfig_TokenizerType_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StringIndexingConfig_TokenizerType_Code_strings[2] = {};

static const char StringIndexingConfig_TokenizerType_Code_names[] =
  "NONE"
  "PLAIN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StringIndexingConfig_TokenizerType_Code_entries[] = {
  { {StringIndexingConfig_TokenizerType_Code_names + 0, 4}, 0 },
  { {StringIndexingConfig_TokenizerType_Code_names + 4, 5}, 1 },
};

static const int StringIndexingConfig_TokenizerType_Code_entries_by_number[] = {
  0, // 0 -> NONE
  1, // 1 -> PLAIN
};

const std::string& StringIndexingConfig_TokenizerType_Code_Name(
    StringIndexingConfig_TokenizerType_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StringIndexingConfig_TokenizerType_Code_entries,
          StringIndexingConfig_TokenizerType_Code_entries_by_number,
          2, StringIndexingConfig_TokenizerType_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StringIndexingConfig_TokenizerType_Code_entries,
      StringIndexingConfig_TokenizerType_Code_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StringIndexingConfig_TokenizerType_Code_strings[idx].get();
}
bool StringIndexingConfig_TokenizerType_Code_Parse(
    const std::string& name, StringIndexingConfig_TokenizerType_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StringIndexingConfig_TokenizerType_Code_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StringIndexingConfig_TokenizerType_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StringIndexingConfig_TokenizerType_Code StringIndexingConfig_TokenizerType::NONE;
constexpr StringIndexingConfig_TokenizerType_Code StringIndexingConfig_TokenizerType::PLAIN;
constexpr StringIndexingConfig_TokenizerType_Code StringIndexingConfig_TokenizerType::Code_MIN;
constexpr StringIndexingConfig_TokenizerType_Code StringIndexingConfig_TokenizerType::Code_MAX;
constexpr int StringIndexingConfig_TokenizerType::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PropertyConfigProto_DataType_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PropertyConfigProto_DataType_Code_strings[7] = {};

static const char PropertyConfigProto_DataType_Code_names[] =
  "BOOLEAN"
  "BYTES"
  "DOCUMENT"
  "DOUBLE"
  "INT64"
  "STRING"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PropertyConfigProto_DataType_Code_entries[] = {
  { {PropertyConfigProto_DataType_Code_names + 0, 7}, 4 },
  { {PropertyConfigProto_DataType_Code_names + 7, 5}, 5 },
  { {PropertyConfigProto_DataType_Code_names + 12, 8}, 6 },
  { {PropertyConfigProto_DataType_Code_names + 20, 6}, 3 },
  { {PropertyConfigProto_DataType_Code_names + 26, 5}, 2 },
  { {PropertyConfigProto_DataType_Code_names + 31, 6}, 1 },
  { {PropertyConfigProto_DataType_Code_names + 37, 7}, 0 },
};

static const int PropertyConfigProto_DataType_Code_entries_by_number[] = {
  6, // 0 -> UNKNOWN
  5, // 1 -> STRING
  4, // 2 -> INT64
  3, // 3 -> DOUBLE
  0, // 4 -> BOOLEAN
  1, // 5 -> BYTES
  2, // 6 -> DOCUMENT
};

const std::string& PropertyConfigProto_DataType_Code_Name(
    PropertyConfigProto_DataType_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PropertyConfigProto_DataType_Code_entries,
          PropertyConfigProto_DataType_Code_entries_by_number,
          7, PropertyConfigProto_DataType_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PropertyConfigProto_DataType_Code_entries,
      PropertyConfigProto_DataType_Code_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PropertyConfigProto_DataType_Code_strings[idx].get();
}
bool PropertyConfigProto_DataType_Code_Parse(
    const std::string& name, PropertyConfigProto_DataType_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PropertyConfigProto_DataType_Code_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<PropertyConfigProto_DataType_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::UNKNOWN;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::STRING;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::INT64;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::DOUBLE;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::BOOLEAN;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::BYTES;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::DOCUMENT;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::Code_MIN;
constexpr PropertyConfigProto_DataType_Code PropertyConfigProto_DataType::Code_MAX;
constexpr int PropertyConfigProto_DataType::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PropertyConfigProto_Cardinality_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PropertyConfigProto_Cardinality_Code_strings[4] = {};

static const char PropertyConfigProto_Cardinality_Code_names[] =
  "OPTIONAL"
  "REPEATED"
  "REQUIRED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PropertyConfigProto_Cardinality_Code_entries[] = {
  { {PropertyConfigProto_Cardinality_Code_names + 0, 8}, 2 },
  { {PropertyConfigProto_Cardinality_Code_names + 8, 8}, 1 },
  { {PropertyConfigProto_Cardinality_Code_names + 16, 8}, 3 },
  { {PropertyConfigProto_Cardinality_Code_names + 24, 7}, 0 },
};

static const int PropertyConfigProto_Cardinality_Code_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> REPEATED
  0, // 2 -> OPTIONAL
  2, // 3 -> REQUIRED
};

const std::string& PropertyConfigProto_Cardinality_Code_Name(
    PropertyConfigProto_Cardinality_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PropertyConfigProto_Cardinality_Code_entries,
          PropertyConfigProto_Cardinality_Code_entries_by_number,
          4, PropertyConfigProto_Cardinality_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PropertyConfigProto_Cardinality_Code_entries,
      PropertyConfigProto_Cardinality_Code_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PropertyConfigProto_Cardinality_Code_strings[idx].get();
}
bool PropertyConfigProto_Cardinality_Code_Parse(
    const std::string& name, PropertyConfigProto_Cardinality_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PropertyConfigProto_Cardinality_Code_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PropertyConfigProto_Cardinality_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::UNKNOWN;
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::REPEATED;
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::OPTIONAL;
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::REQUIRED;
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::Code_MIN;
constexpr PropertyConfigProto_Cardinality_Code PropertyConfigProto_Cardinality::Code_MAX;
constexpr int PropertyConfigProto_Cardinality::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SchemaTypeConfigProto::InitAsDefaultInstance() {
}
class SchemaTypeConfigProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaTypeConfigProto>()._has_bits_);
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SchemaTypeConfigProto::SchemaTypeConfigProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SchemaTypeConfigProto)
}
SchemaTypeConfigProto::SchemaTypeConfigProto(const SchemaTypeConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_type()) {
    schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.SchemaTypeConfigProto)
}

void SchemaTypeConfigProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto.base);
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

SchemaTypeConfigProto::~SchemaTypeConfigProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SchemaTypeConfigProto)
  SharedDtor();
}

void SchemaTypeConfigProto::SharedDtor() {
  schema_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaTypeConfigProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SchemaTypeConfigProto& SchemaTypeConfigProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SchemaTypeConfigProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void SchemaTypeConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SchemaTypeConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_type_.ClearNonDefaultToEmptyNoArena();
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SchemaTypeConfigProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string schema_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_schema_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.PropertyConfigProto properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SchemaTypeConfigProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SchemaTypeConfigProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string schema_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.PropertyConfigProto properties = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SchemaTypeConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SchemaTypeConfigProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SchemaTypeConfigProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SchemaTypeConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string schema_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->schema_type(), output);
  }

  // repeated .icing.lib.PropertyConfigProto properties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->properties(static_cast<int>(i)),
      output);
  }

  // optional int32 version = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SchemaTypeConfigProto)
}

size_t SchemaTypeConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SchemaTypeConfigProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.PropertyConfigProto properties = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->properties(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string schema_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->schema_type());
    }

    // optional int32 version = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaTypeConfigProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SchemaTypeConfigProto*>(
      &from));
}

void SchemaTypeConfigProto::MergeFrom(const SchemaTypeConfigProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SchemaTypeConfigProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchemaTypeConfigProto::CopyFrom(const SchemaTypeConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SchemaTypeConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaTypeConfigProto::IsInitialized() const {
  return true;
}

void SchemaTypeConfigProto::InternalSwap(SchemaTypeConfigProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&properties_)->InternalSwap(CastToBase(&other->properties_));
  schema_type_.Swap(&other->schema_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
}

std::string SchemaTypeConfigProto::GetTypeName() const {
  return "icing.lib.SchemaTypeConfigProto";
}


// ===================================================================

void StringIndexingConfig_TokenizerType::InitAsDefaultInstance() {
}
class StringIndexingConfig_TokenizerType::_Internal {
 public:
  using HasBits = decltype(std::declval<StringIndexingConfig_TokenizerType>()._has_bits_);
};

StringIndexingConfig_TokenizerType::StringIndexingConfig_TokenizerType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.StringIndexingConfig.TokenizerType)
}
StringIndexingConfig_TokenizerType::StringIndexingConfig_TokenizerType(const StringIndexingConfig_TokenizerType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.StringIndexingConfig.TokenizerType)
}

void StringIndexingConfig_TokenizerType::SharedCtor() {
}

StringIndexingConfig_TokenizerType::~StringIndexingConfig_TokenizerType() {
  // @@protoc_insertion_point(destructor:icing.lib.StringIndexingConfig.TokenizerType)
  SharedDtor();
}

void StringIndexingConfig_TokenizerType::SharedDtor() {
}

void StringIndexingConfig_TokenizerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringIndexingConfig_TokenizerType& StringIndexingConfig_TokenizerType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringIndexingConfig_TokenizerType_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void StringIndexingConfig_TokenizerType::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.StringIndexingConfig.TokenizerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringIndexingConfig_TokenizerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringIndexingConfig_TokenizerType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.StringIndexingConfig.TokenizerType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.StringIndexingConfig.TokenizerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.StringIndexingConfig.TokenizerType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringIndexingConfig_TokenizerType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.StringIndexingConfig.TokenizerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.StringIndexingConfig.TokenizerType)
}

size_t StringIndexingConfig_TokenizerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.StringIndexingConfig.TokenizerType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringIndexingConfig_TokenizerType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringIndexingConfig_TokenizerType*>(
      &from));
}

void StringIndexingConfig_TokenizerType::MergeFrom(const StringIndexingConfig_TokenizerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.StringIndexingConfig.TokenizerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StringIndexingConfig_TokenizerType::CopyFrom(const StringIndexingConfig_TokenizerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.StringIndexingConfig.TokenizerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringIndexingConfig_TokenizerType::IsInitialized() const {
  return true;
}

void StringIndexingConfig_TokenizerType::InternalSwap(StringIndexingConfig_TokenizerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string StringIndexingConfig_TokenizerType::GetTypeName() const {
  return "icing.lib.StringIndexingConfig.TokenizerType";
}


// ===================================================================

void StringIndexingConfig::InitAsDefaultInstance() {
}
class StringIndexingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StringIndexingConfig>()._has_bits_);
  static void set_has_term_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokenizer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StringIndexingConfig::StringIndexingConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.StringIndexingConfig)
}
StringIndexingConfig::StringIndexingConfig(const StringIndexingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_match_type_, &from.term_match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tokenizer_type_) -
    reinterpret_cast<char*>(&term_match_type_)) + sizeof(tokenizer_type_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.StringIndexingConfig)
}

void StringIndexingConfig::SharedCtor() {
  ::memset(&term_match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokenizer_type_) -
      reinterpret_cast<char*>(&term_match_type_)) + sizeof(tokenizer_type_));
}

StringIndexingConfig::~StringIndexingConfig() {
  // @@protoc_insertion_point(destructor:icing.lib.StringIndexingConfig)
  SharedDtor();
}

void StringIndexingConfig::SharedDtor() {
}

void StringIndexingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringIndexingConfig& StringIndexingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringIndexingConfig_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void StringIndexingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.StringIndexingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_match_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tokenizer_type_) -
        reinterpret_cast<char*>(&term_match_type_)) + sizeof(tokenizer_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringIndexingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.TermMatchType.Code term_match_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::TermMatchType_Code_IsValid(val))) {
            set_term_match_type(static_cast<::icing::lib::TermMatchType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.StringIndexingConfig.TokenizerType.Code tokenizer_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::StringIndexingConfig_TokenizerType_Code_IsValid(val))) {
            set_tokenizer_type(static_cast<::icing::lib::StringIndexingConfig_TokenizerType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringIndexingConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.StringIndexingConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.TermMatchType.Code term_match_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::TermMatchType_Code_IsValid(value)) {
            set_term_match_type(static_cast< ::icing::lib::TermMatchType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.StringIndexingConfig.TokenizerType.Code tokenizer_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::StringIndexingConfig_TokenizerType_Code_IsValid(value)) {
            set_tokenizer_type(static_cast< ::icing::lib::StringIndexingConfig_TokenizerType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.StringIndexingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.StringIndexingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringIndexingConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.StringIndexingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.TermMatchType.Code term_match_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->term_match_type(), output);
  }

  // optional .icing.lib.StringIndexingConfig.TokenizerType.Code tokenizer_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->tokenizer_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.StringIndexingConfig)
}

size_t StringIndexingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.StringIndexingConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.TermMatchType.Code term_match_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->term_match_type());
    }

    // optional .icing.lib.StringIndexingConfig.TokenizerType.Code tokenizer_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tokenizer_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringIndexingConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringIndexingConfig*>(
      &from));
}

void StringIndexingConfig::MergeFrom(const StringIndexingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.StringIndexingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_match_type_ = from.term_match_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      tokenizer_type_ = from.tokenizer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StringIndexingConfig::CopyFrom(const StringIndexingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.StringIndexingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringIndexingConfig::IsInitialized() const {
  return true;
}

void StringIndexingConfig::InternalSwap(StringIndexingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(term_match_type_, other->term_match_type_);
  swap(tokenizer_type_, other->tokenizer_type_);
}

std::string StringIndexingConfig::GetTypeName() const {
  return "icing.lib.StringIndexingConfig";
}


// ===================================================================

void DocumentIndexingConfig::InitAsDefaultInstance() {
}
class DocumentIndexingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentIndexingConfig>()._has_bits_);
  static void set_has_index_nested_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DocumentIndexingConfig::DocumentIndexingConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DocumentIndexingConfig)
}
DocumentIndexingConfig::DocumentIndexingConfig(const DocumentIndexingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_nested_properties_ = from.index_nested_properties_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.DocumentIndexingConfig)
}

void DocumentIndexingConfig::SharedCtor() {
  index_nested_properties_ = false;
}

DocumentIndexingConfig::~DocumentIndexingConfig() {
  // @@protoc_insertion_point(destructor:icing.lib.DocumentIndexingConfig)
  SharedDtor();
}

void DocumentIndexingConfig::SharedDtor() {
}

void DocumentIndexingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentIndexingConfig& DocumentIndexingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentIndexingConfig_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void DocumentIndexingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DocumentIndexingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_nested_properties_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DocumentIndexingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool index_nested_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index_nested_properties(&has_bits);
          index_nested_properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DocumentIndexingConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DocumentIndexingConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool index_nested_properties = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_index_nested_properties(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &index_nested_properties_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DocumentIndexingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DocumentIndexingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DocumentIndexingConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DocumentIndexingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool index_nested_properties = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->index_nested_properties(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DocumentIndexingConfig)
}

size_t DocumentIndexingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DocumentIndexingConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool index_nested_properties = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentIndexingConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DocumentIndexingConfig*>(
      &from));
}

void DocumentIndexingConfig::MergeFrom(const DocumentIndexingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DocumentIndexingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index_nested_properties()) {
    set_index_nested_properties(from.index_nested_properties());
  }
}

void DocumentIndexingConfig::CopyFrom(const DocumentIndexingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DocumentIndexingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentIndexingConfig::IsInitialized() const {
  return true;
}

void DocumentIndexingConfig::InternalSwap(DocumentIndexingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_nested_properties_, other->index_nested_properties_);
}

std::string DocumentIndexingConfig::GetTypeName() const {
  return "icing.lib.DocumentIndexingConfig";
}


// ===================================================================

void PropertyConfigProto_DataType::InitAsDefaultInstance() {
}
class PropertyConfigProto_DataType::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyConfigProto_DataType>()._has_bits_);
};

PropertyConfigProto_DataType::PropertyConfigProto_DataType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PropertyConfigProto.DataType)
}
PropertyConfigProto_DataType::PropertyConfigProto_DataType(const PropertyConfigProto_DataType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.PropertyConfigProto.DataType)
}

void PropertyConfigProto_DataType::SharedCtor() {
}

PropertyConfigProto_DataType::~PropertyConfigProto_DataType() {
  // @@protoc_insertion_point(destructor:icing.lib.PropertyConfigProto.DataType)
  SharedDtor();
}

void PropertyConfigProto_DataType::SharedDtor() {
}

void PropertyConfigProto_DataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyConfigProto_DataType& PropertyConfigProto_DataType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyConfigProto_DataType_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void PropertyConfigProto_DataType::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PropertyConfigProto.DataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyConfigProto_DataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyConfigProto_DataType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PropertyConfigProto.DataType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PropertyConfigProto.DataType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PropertyConfigProto.DataType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyConfigProto_DataType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PropertyConfigProto.DataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PropertyConfigProto.DataType)
}

size_t PropertyConfigProto_DataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PropertyConfigProto.DataType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyConfigProto_DataType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PropertyConfigProto_DataType*>(
      &from));
}

void PropertyConfigProto_DataType::MergeFrom(const PropertyConfigProto_DataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PropertyConfigProto.DataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PropertyConfigProto_DataType::CopyFrom(const PropertyConfigProto_DataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PropertyConfigProto.DataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyConfigProto_DataType::IsInitialized() const {
  return true;
}

void PropertyConfigProto_DataType::InternalSwap(PropertyConfigProto_DataType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PropertyConfigProto_DataType::GetTypeName() const {
  return "icing.lib.PropertyConfigProto.DataType";
}


// ===================================================================

void PropertyConfigProto_Cardinality::InitAsDefaultInstance() {
}
class PropertyConfigProto_Cardinality::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyConfigProto_Cardinality>()._has_bits_);
};

PropertyConfigProto_Cardinality::PropertyConfigProto_Cardinality()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PropertyConfigProto.Cardinality)
}
PropertyConfigProto_Cardinality::PropertyConfigProto_Cardinality(const PropertyConfigProto_Cardinality& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.PropertyConfigProto.Cardinality)
}

void PropertyConfigProto_Cardinality::SharedCtor() {
}

PropertyConfigProto_Cardinality::~PropertyConfigProto_Cardinality() {
  // @@protoc_insertion_point(destructor:icing.lib.PropertyConfigProto.Cardinality)
  SharedDtor();
}

void PropertyConfigProto_Cardinality::SharedDtor() {
}

void PropertyConfigProto_Cardinality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyConfigProto_Cardinality& PropertyConfigProto_Cardinality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyConfigProto_Cardinality_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void PropertyConfigProto_Cardinality::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PropertyConfigProto.Cardinality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyConfigProto_Cardinality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyConfigProto_Cardinality::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PropertyConfigProto.Cardinality)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PropertyConfigProto.Cardinality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PropertyConfigProto.Cardinality)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyConfigProto_Cardinality::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PropertyConfigProto.Cardinality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PropertyConfigProto.Cardinality)
}

size_t PropertyConfigProto_Cardinality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PropertyConfigProto.Cardinality)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyConfigProto_Cardinality::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PropertyConfigProto_Cardinality*>(
      &from));
}

void PropertyConfigProto_Cardinality::MergeFrom(const PropertyConfigProto_Cardinality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PropertyConfigProto.Cardinality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PropertyConfigProto_Cardinality::CopyFrom(const PropertyConfigProto_Cardinality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PropertyConfigProto.Cardinality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyConfigProto_Cardinality::IsInitialized() const {
  return true;
}

void PropertyConfigProto_Cardinality::InternalSwap(PropertyConfigProto_Cardinality* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PropertyConfigProto_Cardinality::GetTypeName() const {
  return "icing.lib.PropertyConfigProto.Cardinality";
}


// ===================================================================

void PropertyConfigProto::InitAsDefaultInstance() {
  ::icing::lib::_PropertyConfigProto_default_instance_._instance.get_mutable()->string_indexing_config_ = const_cast< ::icing::lib::StringIndexingConfig*>(
      ::icing::lib::StringIndexingConfig::internal_default_instance());
  ::icing::lib::_PropertyConfigProto_default_instance_._instance.get_mutable()->document_indexing_config_ = const_cast< ::icing::lib::DocumentIndexingConfig*>(
      ::icing::lib::DocumentIndexingConfig::internal_default_instance());
}
class PropertyConfigProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyConfigProto>()._has_bits_);
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_schema_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cardinality(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::icing::lib::StringIndexingConfig& string_indexing_config(const PropertyConfigProto* msg);
  static void set_has_string_indexing_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::icing::lib::DocumentIndexingConfig& document_indexing_config(const PropertyConfigProto* msg);
  static void set_has_document_indexing_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::icing::lib::StringIndexingConfig&
PropertyConfigProto::_Internal::string_indexing_config(const PropertyConfigProto* msg) {
  return *msg->string_indexing_config_;
}
const ::icing::lib::DocumentIndexingConfig&
PropertyConfigProto::_Internal::document_indexing_config(const PropertyConfigProto* msg) {
  return *msg->document_indexing_config_;
}
PropertyConfigProto::PropertyConfigProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PropertyConfigProto)
}
PropertyConfigProto::PropertyConfigProto(const PropertyConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_type()) {
    schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
  }
  if (from.has_string_indexing_config()) {
    string_indexing_config_ = new ::icing::lib::StringIndexingConfig(*from.string_indexing_config_);
  } else {
    string_indexing_config_ = nullptr;
  }
  if (from.has_document_indexing_config()) {
    document_indexing_config_ = new ::icing::lib::DocumentIndexingConfig(*from.document_indexing_config_);
  } else {
    document_indexing_config_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardinality_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(cardinality_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.PropertyConfigProto)
}

void PropertyConfigProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&string_indexing_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardinality_) -
      reinterpret_cast<char*>(&string_indexing_config_)) + sizeof(cardinality_));
}

PropertyConfigProto::~PropertyConfigProto() {
  // @@protoc_insertion_point(destructor:icing.lib.PropertyConfigProto)
  SharedDtor();
}

void PropertyConfigProto::SharedDtor() {
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete string_indexing_config_;
  if (this != internal_default_instance()) delete document_indexing_config_;
}

void PropertyConfigProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyConfigProto& PropertyConfigProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyConfigProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void PropertyConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PropertyConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      schema_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(string_indexing_config_ != nullptr);
      string_indexing_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(document_indexing_config_ != nullptr);
      document_indexing_config_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&data_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardinality_) -
        reinterpret_cast<char*>(&data_type_)) + sizeof(cardinality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyConfigProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_property_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.PropertyConfigProto.DataType.Code data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::PropertyConfigProto_DataType_Code_IsValid(val))) {
            set_data_type(static_cast<::icing::lib::PropertyConfigProto_DataType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string schema_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_schema_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.PropertyConfigProto.Cardinality.Code cardinality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::PropertyConfigProto_Cardinality_Code_IsValid(val))) {
            set_cardinality(static_cast<::icing::lib::PropertyConfigProto_Cardinality_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.StringIndexingConfig string_indexing_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_string_indexing_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DocumentIndexingConfig document_indexing_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_document_indexing_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyConfigProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PropertyConfigProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string property_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.PropertyConfigProto.DataType.Code data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::PropertyConfigProto_DataType_Code_IsValid(value)) {
            set_data_type(static_cast< ::icing::lib::PropertyConfigProto_DataType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.PropertyConfigProto.Cardinality.Code cardinality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::PropertyConfigProto_Cardinality_Code_IsValid(value)) {
            set_cardinality(static_cast< ::icing::lib::PropertyConfigProto_Cardinality_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.StringIndexingConfig string_indexing_config = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_string_indexing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DocumentIndexingConfig document_indexing_config = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_document_indexing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PropertyConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PropertyConfigProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyConfigProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PropertyConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property_name(), output);
  }

  // optional .icing.lib.PropertyConfigProto.DataType.Code data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // optional string schema_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->schema_type(), output);
  }

  // optional .icing.lib.PropertyConfigProto.Cardinality.Code cardinality = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->cardinality(), output);
  }

  // optional .icing.lib.StringIndexingConfig string_indexing_config = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::string_indexing_config(this), output);
  }

  // optional .icing.lib.DocumentIndexingConfig document_indexing_config = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::document_indexing_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PropertyConfigProto)
}

size_t PropertyConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PropertyConfigProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string property_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->property_name());
    }

    // optional string schema_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->schema_type());
    }

    // optional .icing.lib.StringIndexingConfig string_indexing_config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *string_indexing_config_);
    }

    // optional .icing.lib.DocumentIndexingConfig document_indexing_config = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *document_indexing_config_);
    }

    // optional .icing.lib.PropertyConfigProto.DataType.Code data_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional .icing.lib.PropertyConfigProto.Cardinality.Code cardinality = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cardinality());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyConfigProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PropertyConfigProto*>(
      &from));
}

void PropertyConfigProto::MergeFrom(const PropertyConfigProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PropertyConfigProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      property_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      schema_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_string_indexing_config()->::icing::lib::StringIndexingConfig::MergeFrom(from.string_indexing_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_document_indexing_config()->::icing::lib::DocumentIndexingConfig::MergeFrom(from.document_indexing_config());
    }
    if (cached_has_bits & 0x00000010u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      cardinality_ = from.cardinality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PropertyConfigProto::CopyFrom(const PropertyConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PropertyConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyConfigProto::IsInitialized() const {
  return true;
}

void PropertyConfigProto::InternalSwap(PropertyConfigProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_type_.Swap(&other->schema_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(string_indexing_config_, other->string_indexing_config_);
  swap(document_indexing_config_, other->document_indexing_config_);
  swap(data_type_, other->data_type_);
  swap(cardinality_, other->cardinality_);
}

std::string PropertyConfigProto::GetTypeName() const {
  return "icing.lib.PropertyConfigProto";
}


// ===================================================================

void SchemaProto::InitAsDefaultInstance() {
}
class SchemaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SchemaProto>()._has_bits_);
};

SchemaProto::SchemaProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SchemaProto)
}
SchemaProto::SchemaProto(const SchemaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.SchemaProto)
}

void SchemaProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SchemaProto_icing_2fproto_2fschema_2eproto.base);
}

SchemaProto::~SchemaProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SchemaProto)
  SharedDtor();
}

void SchemaProto::SharedDtor() {
}

void SchemaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SchemaProto& SchemaProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SchemaProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void SchemaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SchemaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SchemaProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .icing.lib.SchemaTypeConfigProto types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SchemaProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SchemaProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .icing.lib.SchemaTypeConfigProto types = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SchemaProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SchemaProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SchemaProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SchemaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .icing.lib.SchemaTypeConfigProto types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->types_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->types(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SchemaProto)
}

size_t SchemaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SchemaProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.SchemaTypeConfigProto types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->types(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SchemaProto*>(
      &from));
}

void SchemaProto::MergeFrom(const SchemaProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SchemaProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void SchemaProto::CopyFrom(const SchemaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SchemaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaProto::IsInitialized() const {
  return true;
}

void SchemaProto::InternalSwap(SchemaProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&types_)->InternalSwap(CastToBase(&other->types_));
}

std::string SchemaProto::GetTypeName() const {
  return "icing.lib.SchemaProto";
}


// ===================================================================

void SetSchemaResultProto::InitAsDefaultInstance() {
  ::icing::lib::_SetSchemaResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
}
class SetSchemaResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSchemaResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const SetSchemaResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
SetSchemaResultProto::_Internal::status(const SetSchemaResultProto* msg) {
  return *msg->status_;
}
void SetSchemaResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SetSchemaResultProto::SetSchemaResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.SetSchemaResultProto)
}
SetSchemaResultProto::SetSchemaResultProto(const SetSchemaResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      deleted_schema_types_(from.deleted_schema_types_),
      incompatible_schema_types_(from.incompatible_schema_types_),
      new_schema_types_(from.new_schema_types_),
      fully_compatible_changed_schema_types_(from.fully_compatible_changed_schema_types_),
      index_incompatible_changed_schema_types_(from.index_incompatible_changed_schema_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  latency_ms_ = from.latency_ms_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.SetSchemaResultProto)
}

void SetSchemaResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetSchemaResultProto_icing_2fproto_2fschema_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&status_)) + sizeof(latency_ms_));
}

SetSchemaResultProto::~SetSchemaResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.SetSchemaResultProto)
  SharedDtor();
}

void SetSchemaResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void SetSchemaResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSchemaResultProto& SetSchemaResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSchemaResultProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void SetSchemaResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.SetSchemaResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_schema_types_.Clear();
  incompatible_schema_types_.Clear();
  new_schema_types_.Clear();
  fully_compatible_changed_schema_types_.Clear();
  index_incompatible_changed_schema_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  latency_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSchemaResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string deleted_schema_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_deleted_schema_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string incompatible_schema_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_incompatible_schema_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string new_schema_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_new_schema_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string fully_compatible_changed_schema_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_fully_compatible_changed_schema_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string index_incompatible_changed_schema_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_index_incompatible_changed_schema_types(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSchemaResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.SetSchemaResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string deleted_schema_types = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_deleted_schema_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string incompatible_schema_types = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_incompatible_schema_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_schema_types = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_new_schema_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fully_compatible_changed_schema_types = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_fully_compatible_changed_schema_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string index_incompatible_changed_schema_types = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_index_incompatible_changed_schema_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.SetSchemaResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.SetSchemaResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSchemaResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.SetSchemaResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // repeated string deleted_schema_types = 2;
  for (int i = 0, n = this->deleted_schema_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->deleted_schema_types(i), output);
  }

  // repeated string incompatible_schema_types = 3;
  for (int i = 0, n = this->incompatible_schema_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->incompatible_schema_types(i), output);
  }

  // repeated string new_schema_types = 4;
  for (int i = 0, n = this->new_schema_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->new_schema_types(i), output);
  }

  // repeated string fully_compatible_changed_schema_types = 5;
  for (int i = 0, n = this->fully_compatible_changed_schema_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->fully_compatible_changed_schema_types(i), output);
  }

  // repeated string index_incompatible_changed_schema_types = 6;
  for (int i = 0, n = this->index_incompatible_changed_schema_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->index_incompatible_changed_schema_types(i), output);
  }

  // optional int32 latency_ms = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->latency_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.SetSchemaResultProto)
}

size_t SetSchemaResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.SetSchemaResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deleted_schema_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->deleted_schema_types_size());
  for (int i = 0, n = this->deleted_schema_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->deleted_schema_types(i));
  }

  // repeated string incompatible_schema_types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->incompatible_schema_types_size());
  for (int i = 0, n = this->incompatible_schema_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->incompatible_schema_types(i));
  }

  // repeated string new_schema_types = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->new_schema_types_size());
  for (int i = 0, n = this->new_schema_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->new_schema_types(i));
  }

  // repeated string fully_compatible_changed_schema_types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fully_compatible_changed_schema_types_size());
  for (int i = 0, n = this->fully_compatible_changed_schema_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->fully_compatible_changed_schema_types(i));
  }

  // repeated string index_incompatible_changed_schema_types = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->index_incompatible_changed_schema_types_size());
  for (int i = 0, n = this->index_incompatible_changed_schema_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->index_incompatible_changed_schema_types(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int32 latency_ms = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSchemaResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetSchemaResultProto*>(
      &from));
}

void SetSchemaResultProto::MergeFrom(const SetSchemaResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.SetSchemaResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_schema_types_.MergeFrom(from.deleted_schema_types_);
  incompatible_schema_types_.MergeFrom(from.incompatible_schema_types_);
  new_schema_types_.MergeFrom(from.new_schema_types_);
  fully_compatible_changed_schema_types_.MergeFrom(from.fully_compatible_changed_schema_types_);
  index_incompatible_changed_schema_types_.MergeFrom(from.index_incompatible_changed_schema_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetSchemaResultProto::CopyFrom(const SetSchemaResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.SetSchemaResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSchemaResultProto::IsInitialized() const {
  return true;
}

void SetSchemaResultProto::InternalSwap(SetSchemaResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deleted_schema_types_.InternalSwap(CastToBase(&other->deleted_schema_types_));
  incompatible_schema_types_.InternalSwap(CastToBase(&other->incompatible_schema_types_));
  new_schema_types_.InternalSwap(CastToBase(&other->new_schema_types_));
  fully_compatible_changed_schema_types_.InternalSwap(CastToBase(&other->fully_compatible_changed_schema_types_));
  index_incompatible_changed_schema_types_.InternalSwap(CastToBase(&other->index_incompatible_changed_schema_types_));
  swap(status_, other->status_);
  swap(latency_ms_, other->latency_ms_);
}

std::string SetSchemaResultProto::GetTypeName() const {
  return "icing.lib.SetSchemaResultProto";
}


// ===================================================================

void GetSchemaResultProto::InitAsDefaultInstance() {
  ::icing::lib::_GetSchemaResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_GetSchemaResultProto_default_instance_._instance.get_mutable()->schema_ = const_cast< ::icing::lib::SchemaProto*>(
      ::icing::lib::SchemaProto::internal_default_instance());
}
class GetSchemaResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSchemaResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const GetSchemaResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::SchemaProto& schema(const GetSchemaResultProto* msg);
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
GetSchemaResultProto::_Internal::status(const GetSchemaResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::SchemaProto&
GetSchemaResultProto::_Internal::schema(const GetSchemaResultProto* msg) {
  return *msg->schema_;
}
void GetSchemaResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSchemaResultProto::GetSchemaResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetSchemaResultProto)
}
GetSchemaResultProto::GetSchemaResultProto(const GetSchemaResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_schema()) {
    schema_ = new ::icing::lib::SchemaProto(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetSchemaResultProto)
}

void GetSchemaResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSchemaResultProto_icing_2fproto_2fschema_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_) -
      reinterpret_cast<char*>(&status_)) + sizeof(schema_));
}

GetSchemaResultProto::~GetSchemaResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetSchemaResultProto)
  SharedDtor();
}

void GetSchemaResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_;
}

void GetSchemaResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSchemaResultProto& GetSchemaResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSchemaResultProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void GetSchemaResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetSchemaResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_ != nullptr);
      schema_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSchemaResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.SchemaProto schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSchemaResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetSchemaResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.SchemaProto schema = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetSchemaResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetSchemaResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSchemaResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetSchemaResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.SchemaProto schema = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::schema(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetSchemaResultProto)
}

size_t GetSchemaResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetSchemaResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.SchemaProto schema = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schema_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemaResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetSchemaResultProto*>(
      &from));
}

void GetSchemaResultProto::MergeFrom(const GetSchemaResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetSchemaResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema()->::icing::lib::SchemaProto::MergeFrom(from.schema());
    }
  }
}

void GetSchemaResultProto::CopyFrom(const GetSchemaResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetSchemaResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaResultProto::IsInitialized() const {
  return true;
}

void GetSchemaResultProto::InternalSwap(GetSchemaResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(schema_, other->schema_);
}

std::string GetSchemaResultProto::GetTypeName() const {
  return "icing.lib.GetSchemaResultProto";
}


// ===================================================================

void GetSchemaTypeResultProto::InitAsDefaultInstance() {
  ::icing::lib::_GetSchemaTypeResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_GetSchemaTypeResultProto_default_instance_._instance.get_mutable()->schema_type_config_ = const_cast< ::icing::lib::SchemaTypeConfigProto*>(
      ::icing::lib::SchemaTypeConfigProto::internal_default_instance());
}
class GetSchemaTypeResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSchemaTypeResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const GetSchemaTypeResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::SchemaTypeConfigProto& schema_type_config(const GetSchemaTypeResultProto* msg);
  static void set_has_schema_type_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
GetSchemaTypeResultProto::_Internal::status(const GetSchemaTypeResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::SchemaTypeConfigProto&
GetSchemaTypeResultProto::_Internal::schema_type_config(const GetSchemaTypeResultProto* msg) {
  return *msg->schema_type_config_;
}
void GetSchemaTypeResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetSchemaTypeResultProto::GetSchemaTypeResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetSchemaTypeResultProto)
}
GetSchemaTypeResultProto::GetSchemaTypeResultProto(const GetSchemaTypeResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_schema_type_config()) {
    schema_type_config_ = new ::icing::lib::SchemaTypeConfigProto(*from.schema_type_config_);
  } else {
    schema_type_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetSchemaTypeResultProto)
}

void GetSchemaTypeResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSchemaTypeResultProto_icing_2fproto_2fschema_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schema_type_config_) -
      reinterpret_cast<char*>(&status_)) + sizeof(schema_type_config_));
}

GetSchemaTypeResultProto::~GetSchemaTypeResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetSchemaTypeResultProto)
  SharedDtor();
}

void GetSchemaTypeResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete schema_type_config_;
}

void GetSchemaTypeResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSchemaTypeResultProto& GetSchemaTypeResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSchemaTypeResultProto_icing_2fproto_2fschema_2eproto.base);
  return *internal_default_instance();
}


void GetSchemaTypeResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetSchemaTypeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_type_config_ != nullptr);
      schema_type_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSchemaTypeResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.SchemaTypeConfigProto schema_type_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_schema_type_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSchemaTypeResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetSchemaTypeResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.SchemaTypeConfigProto schema_type_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schema_type_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetSchemaTypeResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetSchemaTypeResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSchemaTypeResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetSchemaTypeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.SchemaTypeConfigProto schema_type_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::schema_type_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetSchemaTypeResultProto)
}

size_t GetSchemaTypeResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetSchemaTypeResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.SchemaTypeConfigProto schema_type_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schema_type_config_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemaTypeResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetSchemaTypeResultProto*>(
      &from));
}

void GetSchemaTypeResultProto::MergeFrom(const GetSchemaTypeResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetSchemaTypeResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema_type_config()->::icing::lib::SchemaTypeConfigProto::MergeFrom(from.schema_type_config());
    }
  }
}

void GetSchemaTypeResultProto::CopyFrom(const GetSchemaTypeResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetSchemaTypeResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaTypeResultProto::IsInitialized() const {
  return true;
}

void GetSchemaTypeResultProto::InternalSwap(GetSchemaTypeResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(schema_type_config_, other->schema_type_config_);
}

std::string GetSchemaTypeResultProto::GetTypeName() const {
  return "icing.lib.GetSchemaTypeResultProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::SchemaTypeConfigProto* Arena::CreateMaybeMessage< ::icing::lib::SchemaTypeConfigProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SchemaTypeConfigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::StringIndexingConfig_TokenizerType* Arena::CreateMaybeMessage< ::icing::lib::StringIndexingConfig_TokenizerType >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::StringIndexingConfig_TokenizerType >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::StringIndexingConfig* Arena::CreateMaybeMessage< ::icing::lib::StringIndexingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::StringIndexingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DocumentIndexingConfig* Arena::CreateMaybeMessage< ::icing::lib::DocumentIndexingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DocumentIndexingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PropertyConfigProto_DataType* Arena::CreateMaybeMessage< ::icing::lib::PropertyConfigProto_DataType >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PropertyConfigProto_DataType >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PropertyConfigProto_Cardinality* Arena::CreateMaybeMessage< ::icing::lib::PropertyConfigProto_Cardinality >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PropertyConfigProto_Cardinality >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PropertyConfigProto* Arena::CreateMaybeMessage< ::icing::lib::PropertyConfigProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PropertyConfigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SchemaProto* Arena::CreateMaybeMessage< ::icing::lib::SchemaProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SchemaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::SetSchemaResultProto* Arena::CreateMaybeMessage< ::icing::lib::SetSchemaResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::SetSchemaResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetSchemaResultProto* Arena::CreateMaybeMessage< ::icing::lib::GetSchemaResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetSchemaResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetSchemaTypeResultProto* Arena::CreateMaybeMessage< ::icing::lib::GetSchemaTypeResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetSchemaTypeResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
