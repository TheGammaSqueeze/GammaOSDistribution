// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/document.proto

#include "icing/proto/document.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fdocument_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fdocument_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
namespace icing {
namespace lib {
class DocumentProto_InternalFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentProto_InternalFields> _instance;
} _DocumentProto_InternalFields_default_instance_;
class DocumentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentProto> _instance;
} _DocumentProto_default_instance_;
class PropertyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyProto> _instance;
} _PropertyProto_default_instance_;
class PutResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutResultProto> _instance;
} _PutResultProto_default_instance_;
class GetResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResultProto> _instance;
} _GetResultProto_default_instance_;
class GetAllNamespacesResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllNamespacesResultProto> _instance;
} _GetAllNamespacesResultProto_default_instance_;
class DeleteResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResultProto> _instance;
} _DeleteResultProto_default_instance_;
class DeleteByNamespaceResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteByNamespaceResultProto> _instance;
} _DeleteByNamespaceResultProto_default_instance_;
class DeleteBySchemaTypeResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBySchemaTypeResultProto> _instance;
} _DeleteBySchemaTypeResultProto_default_instance_;
class DeleteByQueryResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteByQueryResultProto> _instance;
} _DeleteByQueryResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_DeleteByNamespaceResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteByNamespaceResultProto_default_instance_;
    new (ptr) ::icing::lib::DeleteByNamespaceResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteByNamespaceResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteByNamespaceResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeleteByNamespaceResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_DeleteByQueryResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteByQueryResultProto_default_instance_;
    new (ptr) ::icing::lib::DeleteByQueryResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteByQueryResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteByQueryResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeleteByQueryResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_DeleteBySchemaTypeResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteBySchemaTypeResultProto_default_instance_;
    new (ptr) ::icing::lib::DeleteBySchemaTypeResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteBySchemaTypeResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteBySchemaTypeResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeleteBySchemaTypeResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteResultProto_default_instance_;
    new (ptr) ::icing::lib::DeleteResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeleteResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_DocumentProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DocumentProto_default_instance_;
    new (ptr) ::icing::lib::DocumentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::icing::lib::_PropertyProto_default_instance_;
    new (ptr) ::icing::lib::PropertyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DocumentProto::InitAsDefaultInstance();
  ::icing::lib::PropertyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DocumentProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto.base,}};

static void InitDefaultsscc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DocumentProto_InternalFields_default_instance_;
    new (ptr) ::icing::lib::DocumentProto_InternalFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DocumentProto_InternalFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto}, {}};

static void InitDefaultsscc_info_GetAllNamespacesResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetAllNamespacesResultProto_default_instance_;
    new (ptr) ::icing::lib::GetAllNamespacesResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetAllNamespacesResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllNamespacesResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetAllNamespacesResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,}};

static void InitDefaultsscc_info_GetResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_GetResultProto_default_instance_;
    new (ptr) ::icing::lib::GetResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::GetResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base,}};

static void InitDefaultsscc_info_PutResultProto_icing_2fproto_2fdocument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PutResultProto_default_instance_;
    new (ptr) ::icing::lib::PutResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PutResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutResultProto_icing_2fproto_2fdocument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PutResultProto_icing_2fproto_2fdocument_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,
      &scc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto.base,}};

namespace icing {
namespace lib {

// ===================================================================

void DocumentProto_InternalFields::InitAsDefaultInstance() {
}
class DocumentProto_InternalFields::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentProto_InternalFields>()._has_bits_);
  static void set_has_length_in_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DocumentProto_InternalFields::DocumentProto_InternalFields()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DocumentProto.InternalFields)
}
DocumentProto_InternalFields::DocumentProto_InternalFields(const DocumentProto_InternalFields& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  length_in_tokens_ = from.length_in_tokens_;
  // @@protoc_insertion_point(copy_constructor:icing.lib.DocumentProto.InternalFields)
}

void DocumentProto_InternalFields::SharedCtor() {
  length_in_tokens_ = 0;
}

DocumentProto_InternalFields::~DocumentProto_InternalFields() {
  // @@protoc_insertion_point(destructor:icing.lib.DocumentProto.InternalFields)
  SharedDtor();
}

void DocumentProto_InternalFields::SharedDtor() {
}

void DocumentProto_InternalFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentProto_InternalFields& DocumentProto_InternalFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentProto_InternalFields_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DocumentProto_InternalFields::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DocumentProto.InternalFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_in_tokens_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DocumentProto_InternalFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 length_in_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_length_in_tokens(&has_bits);
          length_in_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DocumentProto_InternalFields::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DocumentProto.InternalFields)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length_in_tokens = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_length_in_tokens(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_in_tokens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DocumentProto.InternalFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DocumentProto.InternalFields)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DocumentProto_InternalFields::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DocumentProto.InternalFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 length_in_tokens = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->length_in_tokens(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DocumentProto.InternalFields)
}

size_t DocumentProto_InternalFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DocumentProto.InternalFields)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 length_in_tokens = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->length_in_tokens());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentProto_InternalFields::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DocumentProto_InternalFields*>(
      &from));
}

void DocumentProto_InternalFields::MergeFrom(const DocumentProto_InternalFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DocumentProto.InternalFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_length_in_tokens()) {
    set_length_in_tokens(from.length_in_tokens());
  }
}

void DocumentProto_InternalFields::CopyFrom(const DocumentProto_InternalFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DocumentProto.InternalFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentProto_InternalFields::IsInitialized() const {
  return true;
}

void DocumentProto_InternalFields::InternalSwap(DocumentProto_InternalFields* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(length_in_tokens_, other->length_in_tokens_);
}

std::string DocumentProto_InternalFields::GetTypeName() const {
  return "icing.lib.DocumentProto.InternalFields";
}


// ===================================================================

void DocumentProto::InitAsDefaultInstance() {
  ::icing::lib::_DocumentProto_default_instance_._instance.get_mutable()->internal_fields_ = const_cast< ::icing::lib::DocumentProto_InternalFields*>(
      ::icing::lib::DocumentProto_InternalFields::internal_default_instance());
}
class DocumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentProto>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ttl_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::icing::lib::DocumentProto_InternalFields& internal_fields(const DocumentProto* msg);
  static void set_has_internal_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::icing::lib::DocumentProto_InternalFields&
DocumentProto::_Internal::internal_fields(const DocumentProto* msg) {
  return *msg->internal_fields_;
}
DocumentProto::DocumentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DocumentProto)
}
DocumentProto::DocumentProto(const DocumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_namespace_()) {
    namespace__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema()) {
    schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
  }
  if (from.has_internal_fields()) {
    internal_fields_ = new ::icing::lib::DocumentProto_InternalFields(*from.internal_fields_);
  } else {
    internal_fields_ = nullptr;
  }
  ::memcpy(&creation_timestamp_ms_, &from.creation_timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&creation_timestamp_ms_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.DocumentProto)
}

void DocumentProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&internal_fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&internal_fields_)) + sizeof(score_));
}

DocumentProto::~DocumentProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DocumentProto)
  SharedDtor();
}

void DocumentProto::SharedDtor() {
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete internal_fields_;
}

void DocumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentProto& DocumentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DocumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DocumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      uri_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      schema_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(internal_fields_ != nullptr);
      internal_fields_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&creation_timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&creation_timestamp_ms_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DocumentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_namespace_(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_uri(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string schema = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_schema(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 creation_timestamp_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_creation_timestamp_ms(&has_bits);
          creation_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.PropertyProto properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional int32 score = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ttl_ms = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ttl_ms(&has_bits);
          ttl_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DocumentProto.InternalFields internal_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_internal_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DocumentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DocumentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string namespace = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uri = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schema = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 creation_timestamp_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_creation_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.PropertyProto properties = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score = 7 [default = 0];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ttl_ms = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ttl_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DocumentProto.InternalFields internal_fields = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_internal_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DocumentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DocumentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DocumentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DocumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_(), output);
  }

  // optional string uri = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // optional string schema = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->schema(), output);
  }

  // optional int64 creation_timestamp_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->creation_timestamp_ms(), output);
  }

  // repeated .icing.lib.PropertyProto properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->properties_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->properties(static_cast<int>(i)),
      output);
  }

  // optional int32 score = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  // optional int64 ttl_ms = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->ttl_ms(), output);
  }

  // optional .icing.lib.DocumentProto.InternalFields internal_fields = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::internal_fields(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DocumentProto)
}

size_t DocumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DocumentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .icing.lib.PropertyProto properties = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->properties_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->properties(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // optional string uri = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string schema = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->schema());
    }

    // optional .icing.lib.DocumentProto.InternalFields internal_fields = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *internal_fields_);
    }

    // optional int64 creation_timestamp_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->creation_timestamp_ms());
    }

    // optional int64 ttl_ms = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ttl_ms());
    }

    // optional int32 score = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DocumentProto*>(
      &from));
}

void DocumentProto::MergeFrom(const DocumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DocumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      namespace__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace__);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      schema_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.schema_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_internal_fields()->::icing::lib::DocumentProto_InternalFields::MergeFrom(from.internal_fields());
    }
    if (cached_has_bits & 0x00000010u) {
      creation_timestamp_ms_ = from.creation_timestamp_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      ttl_ms_ = from.ttl_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentProto::CopyFrom(const DocumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DocumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentProto::IsInitialized() const {
  return true;
}

void DocumentProto::InternalSwap(DocumentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&properties_)->InternalSwap(CastToBase(&other->properties_));
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  schema_.Swap(&other->schema_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(internal_fields_, other->internal_fields_);
  swap(creation_timestamp_ms_, other->creation_timestamp_ms_);
  swap(ttl_ms_, other->ttl_ms_);
  swap(score_, other->score_);
}

std::string DocumentProto::GetTypeName() const {
  return "icing.lib.DocumentProto";
}


// ===================================================================

void PropertyProto::InitAsDefaultInstance() {
}
class PropertyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PropertyProto::PropertyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PropertyProto)
}
PropertyProto::PropertyProto(const PropertyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      string_values_(from.string_values_),
      int64_values_(from.int64_values_),
      double_values_(from.double_values_),
      boolean_values_(from.boolean_values_),
      bytes_values_(from.bytes_values_),
      document_values_(from.document_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.PropertyProto)
}

void PropertyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PropertyProto::~PropertyProto() {
  // @@protoc_insertion_point(destructor:icing.lib.PropertyProto)
  SharedDtor();
}

void PropertyProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyProto& PropertyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void PropertyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PropertyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_values_.Clear();
  int64_values_.Clear();
  double_values_.Clear();
  boolean_values_.Clear();
  bytes_values_.Clear();
  document_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_string_values(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_int64_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_int64_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double double_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_double_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 33);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_double_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool boolean_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_boolean_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 40);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_boolean_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes bytes_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_bytes_values(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .icing.lib.DocumentProto document_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_document_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PropertyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_string_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 int64_values = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_int64_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double double_values = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_double_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool boolean_values = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40u, input, this->mutable_boolean_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_boolean_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes bytes_values = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_bytes_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .icing.lib.DocumentProto document_values = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_document_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PropertyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PropertyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PropertyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string string_values = 2;
  for (int i = 0, n = this->string_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->string_values(i), output);
  }

  // repeated int64 int64_values = 3;
  for (int i = 0, n = this->int64_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      3, this->int64_values(i), output);
  }

  // repeated double double_values = 4;
  for (int i = 0, n = this->double_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      4, this->double_values(i), output);
  }

  // repeated bool boolean_values = 5;
  for (int i = 0, n = this->boolean_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(
      5, this->boolean_values(i), output);
  }

  // repeated bytes bytes_values = 6;
  for (int i = 0, n = this->bytes_values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->bytes_values(i), output);
  }

  // repeated .icing.lib.DocumentProto document_values = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_values_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->document_values(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PropertyProto)
}

size_t PropertyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PropertyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string string_values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->string_values_size());
  for (int i = 0, n = this->string_values_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->string_values(i));
  }

  // repeated int64 int64_values = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->int64_values_size());
    total_size += data_size;
  }

  // repeated double double_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->double_values_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->double_values_size());
    total_size += data_size;
  }

  // repeated bool boolean_values = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->boolean_values_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->boolean_values_size());
    total_size += data_size;
  }

  // repeated bytes bytes_values = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bytes_values_size());
  for (int i = 0, n = this->bytes_values_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->bytes_values(i));
  }

  // repeated .icing.lib.DocumentProto document_values = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->document_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->document_values(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PropertyProto*>(
      &from));
}

void PropertyProto::MergeFrom(const PropertyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PropertyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_values_.MergeFrom(from.string_values_);
  int64_values_.MergeFrom(from.int64_values_);
  double_values_.MergeFrom(from.double_values_);
  boolean_values_.MergeFrom(from.boolean_values_);
  bytes_values_.MergeFrom(from.bytes_values_);
  document_values_.MergeFrom(from.document_values_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void PropertyProto::CopyFrom(const PropertyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PropertyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyProto::IsInitialized() const {
  return true;
}

void PropertyProto::InternalSwap(PropertyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_values_.InternalSwap(CastToBase(&other->string_values_));
  int64_values_.InternalSwap(&other->int64_values_);
  double_values_.InternalSwap(&other->double_values_);
  boolean_values_.InternalSwap(&other->boolean_values_);
  bytes_values_.InternalSwap(CastToBase(&other->bytes_values_));
  CastToBase(&document_values_)->InternalSwap(CastToBase(&other->document_values_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PropertyProto::GetTypeName() const {
  return "icing.lib.PropertyProto";
}


// ===================================================================

void PutResultProto::InitAsDefaultInstance() {
  ::icing::lib::_PutResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_PutResultProto_default_instance_._instance.get_mutable()->put_document_stats_ = const_cast< ::icing::lib::PutDocumentStatsProto*>(
      ::icing::lib::PutDocumentStatsProto::internal_default_instance());
}
class PutResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PutResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const PutResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::PutDocumentStatsProto& put_document_stats(const PutResultProto* msg);
  static void set_has_put_document_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
PutResultProto::_Internal::status(const PutResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::PutDocumentStatsProto&
PutResultProto::_Internal::put_document_stats(const PutResultProto* msg) {
  return *msg->put_document_stats_;
}
void PutResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PutResultProto::clear_put_document_stats() {
  if (put_document_stats_ != nullptr) put_document_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PutResultProto::PutResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PutResultProto)
}
PutResultProto::PutResultProto(const PutResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_put_document_stats()) {
    put_document_stats_ = new ::icing::lib::PutDocumentStatsProto(*from.put_document_stats_);
  } else {
    put_document_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.PutResultProto)
}

void PutResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&put_document_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(put_document_stats_));
}

PutResultProto::~PutResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.PutResultProto)
  SharedDtor();
}

void PutResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete put_document_stats_;
}

void PutResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutResultProto& PutResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void PutResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PutResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(put_document_stats_ != nullptr);
      put_document_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.PutDocumentStatsProto put_document_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_put_document_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PutResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.PutDocumentStatsProto put_document_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_put_document_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PutResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PutResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PutResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.PutDocumentStatsProto put_document_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::put_document_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PutResultProto)
}

size_t PutResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PutResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.PutDocumentStatsProto put_document_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *put_document_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PutResultProto*>(
      &from));
}

void PutResultProto::MergeFrom(const PutResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PutResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_put_document_stats()->::icing::lib::PutDocumentStatsProto::MergeFrom(from.put_document_stats());
    }
  }
}

void PutResultProto::CopyFrom(const PutResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PutResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResultProto::IsInitialized() const {
  return true;
}

void PutResultProto::InternalSwap(PutResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(put_document_stats_, other->put_document_stats_);
}

std::string PutResultProto::GetTypeName() const {
  return "icing.lib.PutResultProto";
}


// ===================================================================

void GetResultProto::InitAsDefaultInstance() {
  ::icing::lib::_GetResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_GetResultProto_default_instance_._instance.get_mutable()->document_ = const_cast< ::icing::lib::DocumentProto*>(
      ::icing::lib::DocumentProto::internal_default_instance());
}
class GetResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const GetResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::DocumentProto& document(const GetResultProto* msg);
  static void set_has_document(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
GetResultProto::_Internal::status(const GetResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::DocumentProto&
GetResultProto::_Internal::document(const GetResultProto* msg) {
  return *msg->document_;
}
void GetResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetResultProto::GetResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetResultProto)
}
GetResultProto::GetResultProto(const GetResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_document()) {
    document_ = new ::icing::lib::DocumentProto(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetResultProto)
}

void GetResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&document_) -
      reinterpret_cast<char*>(&status_)) + sizeof(document_));
}

GetResultProto::~GetResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetResultProto)
  SharedDtor();
}

void GetResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete document_;
}

void GetResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResultProto& GetResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void GetResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(document_ != nullptr);
      document_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DocumentProto document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DocumentProto document = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.DocumentProto document = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::document(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetResultProto)
}

size_t GetResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.DocumentProto document = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *document_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResultProto*>(
      &from));
}

void GetResultProto::MergeFrom(const GetResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_document()->::icing::lib::DocumentProto::MergeFrom(from.document());
    }
  }
}

void GetResultProto::CopyFrom(const GetResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResultProto::IsInitialized() const {
  return true;
}

void GetResultProto::InternalSwap(GetResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(document_, other->document_);
}

std::string GetResultProto::GetTypeName() const {
  return "icing.lib.GetResultProto";
}


// ===================================================================

void GetAllNamespacesResultProto::InitAsDefaultInstance() {
  ::icing::lib::_GetAllNamespacesResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
}
class GetAllNamespacesResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAllNamespacesResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const GetAllNamespacesResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::icing::lib::StatusProto&
GetAllNamespacesResultProto::_Internal::status(const GetAllNamespacesResultProto* msg) {
  return *msg->status_;
}
void GetAllNamespacesResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GetAllNamespacesResultProto::GetAllNamespacesResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.GetAllNamespacesResultProto)
}
GetAllNamespacesResultProto::GetAllNamespacesResultProto(const GetAllNamespacesResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      namespaces_(from.namespaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.GetAllNamespacesResultProto)
}

void GetAllNamespacesResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllNamespacesResultProto_icing_2fproto_2fdocument_2eproto.base);
  status_ = nullptr;
}

GetAllNamespacesResultProto::~GetAllNamespacesResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.GetAllNamespacesResultProto)
  SharedDtor();
}

void GetAllNamespacesResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetAllNamespacesResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllNamespacesResultProto& GetAllNamespacesResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllNamespacesResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void GetAllNamespacesResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.GetAllNamespacesResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespaces_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllNamespacesResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string namespaces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_namespaces(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllNamespacesResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.GetAllNamespacesResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string namespaces = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_namespaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.GetAllNamespacesResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.GetAllNamespacesResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllNamespacesResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.GetAllNamespacesResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // repeated string namespaces = 2;
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->namespaces(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.GetAllNamespacesResultProto)
}

size_t GetAllNamespacesResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.GetAllNamespacesResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string namespaces = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->namespaces_size());
  for (int i = 0, n = this->namespaces_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->namespaces(i));
  }

  // optional .icing.lib.StatusProto status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllNamespacesResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllNamespacesResultProto*>(
      &from));
}

void GetAllNamespacesResultProto::MergeFrom(const GetAllNamespacesResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.GetAllNamespacesResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespaces_.MergeFrom(from.namespaces_);
  if (from.has_status()) {
    mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
  }
}

void GetAllNamespacesResultProto::CopyFrom(const GetAllNamespacesResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.GetAllNamespacesResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllNamespacesResultProto::IsInitialized() const {
  return true;
}

void GetAllNamespacesResultProto::InternalSwap(GetAllNamespacesResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespaces_.InternalSwap(CastToBase(&other->namespaces_));
  swap(status_, other->status_);
}

std::string GetAllNamespacesResultProto::GetTypeName() const {
  return "icing.lib.GetAllNamespacesResultProto";
}


// ===================================================================

void DeleteResultProto::InitAsDefaultInstance() {
  ::icing::lib::_DeleteResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_DeleteResultProto_default_instance_._instance.get_mutable()->delete_stats_ = const_cast< ::icing::lib::DeleteStatsProto*>(
      ::icing::lib::DeleteStatsProto::internal_default_instance());
}
class DeleteResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const DeleteResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::DeleteStatsProto& delete_stats(const DeleteResultProto* msg);
  static void set_has_delete_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
DeleteResultProto::_Internal::status(const DeleteResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::DeleteStatsProto&
DeleteResultProto::_Internal::delete_stats(const DeleteResultProto* msg) {
  return *msg->delete_stats_;
}
void DeleteResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteResultProto::clear_delete_stats() {
  if (delete_stats_ != nullptr) delete_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeleteResultProto::DeleteResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteResultProto)
}
DeleteResultProto::DeleteResultProto(const DeleteResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_delete_stats()) {
    delete_stats_ = new ::icing::lib::DeleteStatsProto(*from.delete_stats_);
  } else {
    delete_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteResultProto)
}

void DeleteResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(delete_stats_));
}

DeleteResultProto::~DeleteResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteResultProto)
  SharedDtor();
}

void DeleteResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete delete_stats_;
}

void DeleteResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResultProto& DeleteResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DeleteResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delete_stats_ != nullptr);
      delete_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_delete_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.DeleteStatsProto delete_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::delete_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteResultProto)
}

size_t DeleteResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.DeleteStatsProto delete_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delete_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteResultProto*>(
      &from));
}

void DeleteResultProto::MergeFrom(const DeleteResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delete_stats()->::icing::lib::DeleteStatsProto::MergeFrom(from.delete_stats());
    }
  }
}

void DeleteResultProto::CopyFrom(const DeleteResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResultProto::IsInitialized() const {
  return true;
}

void DeleteResultProto::InternalSwap(DeleteResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(delete_stats_, other->delete_stats_);
}

std::string DeleteResultProto::GetTypeName() const {
  return "icing.lib.DeleteResultProto";
}


// ===================================================================

void DeleteByNamespaceResultProto::InitAsDefaultInstance() {
  ::icing::lib::_DeleteByNamespaceResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_DeleteByNamespaceResultProto_default_instance_._instance.get_mutable()->delete_stats_ = const_cast< ::icing::lib::DeleteStatsProto*>(
      ::icing::lib::DeleteStatsProto::internal_default_instance());
}
class DeleteByNamespaceResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteByNamespaceResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const DeleteByNamespaceResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::DeleteStatsProto& delete_stats(const DeleteByNamespaceResultProto* msg);
  static void set_has_delete_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
DeleteByNamespaceResultProto::_Internal::status(const DeleteByNamespaceResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::DeleteStatsProto&
DeleteByNamespaceResultProto::_Internal::delete_stats(const DeleteByNamespaceResultProto* msg) {
  return *msg->delete_stats_;
}
void DeleteByNamespaceResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteByNamespaceResultProto::clear_delete_stats() {
  if (delete_stats_ != nullptr) delete_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeleteByNamespaceResultProto::DeleteByNamespaceResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteByNamespaceResultProto)
}
DeleteByNamespaceResultProto::DeleteByNamespaceResultProto(const DeleteByNamespaceResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_delete_stats()) {
    delete_stats_ = new ::icing::lib::DeleteStatsProto(*from.delete_stats_);
  } else {
    delete_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteByNamespaceResultProto)
}

void DeleteByNamespaceResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteByNamespaceResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(delete_stats_));
}

DeleteByNamespaceResultProto::~DeleteByNamespaceResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteByNamespaceResultProto)
  SharedDtor();
}

void DeleteByNamespaceResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete delete_stats_;
}

void DeleteByNamespaceResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteByNamespaceResultProto& DeleteByNamespaceResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteByNamespaceResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DeleteByNamespaceResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteByNamespaceResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delete_stats_ != nullptr);
      delete_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteByNamespaceResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_delete_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteByNamespaceResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteByNamespaceResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteByNamespaceResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteByNamespaceResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteByNamespaceResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteByNamespaceResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.DeleteStatsProto delete_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::delete_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteByNamespaceResultProto)
}

size_t DeleteByNamespaceResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteByNamespaceResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.DeleteStatsProto delete_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delete_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteByNamespaceResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteByNamespaceResultProto*>(
      &from));
}

void DeleteByNamespaceResultProto::MergeFrom(const DeleteByNamespaceResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteByNamespaceResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delete_stats()->::icing::lib::DeleteStatsProto::MergeFrom(from.delete_stats());
    }
  }
}

void DeleteByNamespaceResultProto::CopyFrom(const DeleteByNamespaceResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteByNamespaceResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteByNamespaceResultProto::IsInitialized() const {
  return true;
}

void DeleteByNamespaceResultProto::InternalSwap(DeleteByNamespaceResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(delete_stats_, other->delete_stats_);
}

std::string DeleteByNamespaceResultProto::GetTypeName() const {
  return "icing.lib.DeleteByNamespaceResultProto";
}


// ===================================================================

void DeleteBySchemaTypeResultProto::InitAsDefaultInstance() {
  ::icing::lib::_DeleteBySchemaTypeResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_DeleteBySchemaTypeResultProto_default_instance_._instance.get_mutable()->delete_stats_ = const_cast< ::icing::lib::DeleteStatsProto*>(
      ::icing::lib::DeleteStatsProto::internal_default_instance());
}
class DeleteBySchemaTypeResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteBySchemaTypeResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const DeleteBySchemaTypeResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::DeleteStatsProto& delete_stats(const DeleteBySchemaTypeResultProto* msg);
  static void set_has_delete_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
DeleteBySchemaTypeResultProto::_Internal::status(const DeleteBySchemaTypeResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::DeleteStatsProto&
DeleteBySchemaTypeResultProto::_Internal::delete_stats(const DeleteBySchemaTypeResultProto* msg) {
  return *msg->delete_stats_;
}
void DeleteBySchemaTypeResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteBySchemaTypeResultProto::clear_delete_stats() {
  if (delete_stats_ != nullptr) delete_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeleteBySchemaTypeResultProto::DeleteBySchemaTypeResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteBySchemaTypeResultProto)
}
DeleteBySchemaTypeResultProto::DeleteBySchemaTypeResultProto(const DeleteBySchemaTypeResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_delete_stats()) {
    delete_stats_ = new ::icing::lib::DeleteStatsProto(*from.delete_stats_);
  } else {
    delete_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteBySchemaTypeResultProto)
}

void DeleteBySchemaTypeResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteBySchemaTypeResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(delete_stats_));
}

DeleteBySchemaTypeResultProto::~DeleteBySchemaTypeResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteBySchemaTypeResultProto)
  SharedDtor();
}

void DeleteBySchemaTypeResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete delete_stats_;
}

void DeleteBySchemaTypeResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBySchemaTypeResultProto& DeleteBySchemaTypeResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBySchemaTypeResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DeleteBySchemaTypeResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteBySchemaTypeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delete_stats_ != nullptr);
      delete_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteBySchemaTypeResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_delete_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteBySchemaTypeResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteBySchemaTypeResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DeleteStatsProto delete_stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteBySchemaTypeResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteBySchemaTypeResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteBySchemaTypeResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteBySchemaTypeResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.DeleteStatsProto delete_stats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::delete_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteBySchemaTypeResultProto)
}

size_t DeleteBySchemaTypeResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteBySchemaTypeResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.DeleteStatsProto delete_stats = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delete_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBySchemaTypeResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteBySchemaTypeResultProto*>(
      &from));
}

void DeleteBySchemaTypeResultProto::MergeFrom(const DeleteBySchemaTypeResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteBySchemaTypeResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delete_stats()->::icing::lib::DeleteStatsProto::MergeFrom(from.delete_stats());
    }
  }
}

void DeleteBySchemaTypeResultProto::CopyFrom(const DeleteBySchemaTypeResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteBySchemaTypeResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBySchemaTypeResultProto::IsInitialized() const {
  return true;
}

void DeleteBySchemaTypeResultProto::InternalSwap(DeleteBySchemaTypeResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(delete_stats_, other->delete_stats_);
}

std::string DeleteBySchemaTypeResultProto::GetTypeName() const {
  return "icing.lib.DeleteBySchemaTypeResultProto";
}


// ===================================================================

void DeleteByQueryResultProto::InitAsDefaultInstance() {
  ::icing::lib::_DeleteByQueryResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
  ::icing::lib::_DeleteByQueryResultProto_default_instance_._instance.get_mutable()->delete_by_query_stats_ = const_cast< ::icing::lib::DeleteByQueryStatsProto*>(
      ::icing::lib::DeleteByQueryStatsProto::internal_default_instance());
}
class DeleteByQueryResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteByQueryResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const DeleteByQueryResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::icing::lib::DeleteByQueryStatsProto& delete_by_query_stats(const DeleteByQueryResultProto* msg);
  static void set_has_delete_by_query_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::icing::lib::StatusProto&
DeleteByQueryResultProto::_Internal::status(const DeleteByQueryResultProto* msg) {
  return *msg->status_;
}
const ::icing::lib::DeleteByQueryStatsProto&
DeleteByQueryResultProto::_Internal::delete_by_query_stats(const DeleteByQueryResultProto* msg) {
  return *msg->delete_by_query_stats_;
}
void DeleteByQueryResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteByQueryResultProto::clear_delete_by_query_stats() {
  if (delete_by_query_stats_ != nullptr) delete_by_query_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeleteByQueryResultProto::DeleteByQueryResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteByQueryResultProto)
}
DeleteByQueryResultProto::DeleteByQueryResultProto(const DeleteByQueryResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from.has_delete_by_query_stats()) {
    delete_by_query_stats_ = new ::icing::lib::DeleteByQueryStatsProto(*from.delete_by_query_stats_);
  } else {
    delete_by_query_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteByQueryResultProto)
}

void DeleteByQueryResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteByQueryResultProto_icing_2fproto_2fdocument_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delete_by_query_stats_) -
      reinterpret_cast<char*>(&status_)) + sizeof(delete_by_query_stats_));
}

DeleteByQueryResultProto::~DeleteByQueryResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteByQueryResultProto)
  SharedDtor();
}

void DeleteByQueryResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete delete_by_query_stats_;
}

void DeleteByQueryResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteByQueryResultProto& DeleteByQueryResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteByQueryResultProto_icing_2fproto_2fdocument_2eproto.base);
  return *internal_default_instance();
}


void DeleteByQueryResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteByQueryResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delete_by_query_stats_ != nullptr);
      delete_by_query_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteByQueryResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DeleteByQueryStatsProto delete_by_query_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_delete_by_query_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteByQueryResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteByQueryResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DeleteByQueryStatsProto delete_by_query_stats = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_by_query_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteByQueryResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteByQueryResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteByQueryResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteByQueryResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  // optional .icing.lib.DeleteByQueryStatsProto delete_by_query_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::delete_by_query_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteByQueryResultProto)
}

size_t DeleteByQueryResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteByQueryResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .icing.lib.StatusProto status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .icing.lib.DeleteByQueryStatsProto delete_by_query_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delete_by_query_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteByQueryResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteByQueryResultProto*>(
      &from));
}

void DeleteByQueryResultProto::MergeFrom(const DeleteByQueryResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteByQueryResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delete_by_query_stats()->::icing::lib::DeleteByQueryStatsProto::MergeFrom(from.delete_by_query_stats());
    }
  }
}

void DeleteByQueryResultProto::CopyFrom(const DeleteByQueryResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteByQueryResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteByQueryResultProto::IsInitialized() const {
  return true;
}

void DeleteByQueryResultProto::InternalSwap(DeleteByQueryResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(delete_by_query_stats_, other->delete_by_query_stats_);
}

std::string DeleteByQueryResultProto::GetTypeName() const {
  return "icing.lib.DeleteByQueryResultProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::DocumentProto_InternalFields* Arena::CreateMaybeMessage< ::icing::lib::DocumentProto_InternalFields >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DocumentProto_InternalFields >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DocumentProto* Arena::CreateMaybeMessage< ::icing::lib::DocumentProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DocumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PropertyProto* Arena::CreateMaybeMessage< ::icing::lib::PropertyProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PropertyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PutResultProto* Arena::CreateMaybeMessage< ::icing::lib::PutResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PutResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetResultProto* Arena::CreateMaybeMessage< ::icing::lib::GetResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::GetAllNamespacesResultProto* Arena::CreateMaybeMessage< ::icing::lib::GetAllNamespacesResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::GetAllNamespacesResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteResultProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteByNamespaceResultProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteByNamespaceResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteByNamespaceResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteBySchemaTypeResultProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteBySchemaTypeResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteBySchemaTypeResultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteByQueryResultProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteByQueryResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteByQueryResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
