// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "icing/proto/scoring.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2flogging_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class DeleteByQueryStatsProto;
class DeleteByQueryStatsProtoDefaultTypeInternal;
extern DeleteByQueryStatsProtoDefaultTypeInternal _DeleteByQueryStatsProto_default_instance_;
class DeleteStatsProto;
class DeleteStatsProtoDefaultTypeInternal;
extern DeleteStatsProtoDefaultTypeInternal _DeleteStatsProto_default_instance_;
class DeleteStatsProto_DeleteType;
class DeleteStatsProto_DeleteTypeDefaultTypeInternal;
extern DeleteStatsProto_DeleteTypeDefaultTypeInternal _DeleteStatsProto_DeleteType_default_instance_;
class InitializeStatsProto;
class InitializeStatsProtoDefaultTypeInternal;
extern InitializeStatsProtoDefaultTypeInternal _InitializeStatsProto_default_instance_;
class PutDocumentStatsProto;
class PutDocumentStatsProtoDefaultTypeInternal;
extern PutDocumentStatsProtoDefaultTypeInternal _PutDocumentStatsProto_default_instance_;
class PutDocumentStatsProto_TokenizationStats;
class PutDocumentStatsProto_TokenizationStatsDefaultTypeInternal;
extern PutDocumentStatsProto_TokenizationStatsDefaultTypeInternal _PutDocumentStatsProto_TokenizationStats_default_instance_;
class QueryStatsProto;
class QueryStatsProtoDefaultTypeInternal;
extern QueryStatsProtoDefaultTypeInternal _QueryStatsProto_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::DeleteByQueryStatsProto* Arena::CreateMaybeMessage<::icing::lib::DeleteByQueryStatsProto>(Arena*);
template<> ::icing::lib::DeleteStatsProto* Arena::CreateMaybeMessage<::icing::lib::DeleteStatsProto>(Arena*);
template<> ::icing::lib::DeleteStatsProto_DeleteType* Arena::CreateMaybeMessage<::icing::lib::DeleteStatsProto_DeleteType>(Arena*);
template<> ::icing::lib::InitializeStatsProto* Arena::CreateMaybeMessage<::icing::lib::InitializeStatsProto>(Arena*);
template<> ::icing::lib::PutDocumentStatsProto* Arena::CreateMaybeMessage<::icing::lib::PutDocumentStatsProto>(Arena*);
template<> ::icing::lib::PutDocumentStatsProto_TokenizationStats* Arena::CreateMaybeMessage<::icing::lib::PutDocumentStatsProto_TokenizationStats>(Arena*);
template<> ::icing::lib::QueryStatsProto* Arena::CreateMaybeMessage<::icing::lib::QueryStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

enum InitializeStatsProto_RecoveryCause : int {
  InitializeStatsProto_RecoveryCause_NONE = 0,
  InitializeStatsProto_RecoveryCause_DATA_LOSS = 1,
  InitializeStatsProto_RecoveryCause_INCONSISTENT_WITH_GROUND_TRUTH = 2,
  InitializeStatsProto_RecoveryCause_SCHEMA_CHANGES_OUT_OF_SYNC = 3,
  InitializeStatsProto_RecoveryCause_IO_ERROR = 4
};
bool InitializeStatsProto_RecoveryCause_IsValid(int value);
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto_RecoveryCause_RecoveryCause_MIN = InitializeStatsProto_RecoveryCause_NONE;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto_RecoveryCause_RecoveryCause_MAX = InitializeStatsProto_RecoveryCause_IO_ERROR;
constexpr int InitializeStatsProto_RecoveryCause_RecoveryCause_ARRAYSIZE = InitializeStatsProto_RecoveryCause_RecoveryCause_MAX + 1;

const std::string& InitializeStatsProto_RecoveryCause_Name(InitializeStatsProto_RecoveryCause value);
template<typename T>
inline const std::string& InitializeStatsProto_RecoveryCause_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitializeStatsProto_RecoveryCause>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitializeStatsProto_RecoveryCause_Name.");
  return InitializeStatsProto_RecoveryCause_Name(static_cast<InitializeStatsProto_RecoveryCause>(enum_t_value));
}
bool InitializeStatsProto_RecoveryCause_Parse(
    const std::string& name, InitializeStatsProto_RecoveryCause* value);
enum InitializeStatsProto_DocumentStoreDataStatus : int {
  InitializeStatsProto_DocumentStoreDataStatus_NO_DATA_LOSS = 0,
  InitializeStatsProto_DocumentStoreDataStatus_PARTIAL_LOSS = 1,
  InitializeStatsProto_DocumentStoreDataStatus_COMPLETE_LOSS = 2
};
bool InitializeStatsProto_DocumentStoreDataStatus_IsValid(int value);
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_MIN = InitializeStatsProto_DocumentStoreDataStatus_NO_DATA_LOSS;
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_MAX = InitializeStatsProto_DocumentStoreDataStatus_COMPLETE_LOSS;
constexpr int InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_ARRAYSIZE = InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_MAX + 1;

const std::string& InitializeStatsProto_DocumentStoreDataStatus_Name(InitializeStatsProto_DocumentStoreDataStatus value);
template<typename T>
inline const std::string& InitializeStatsProto_DocumentStoreDataStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitializeStatsProto_DocumentStoreDataStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitializeStatsProto_DocumentStoreDataStatus_Name.");
  return InitializeStatsProto_DocumentStoreDataStatus_Name(static_cast<InitializeStatsProto_DocumentStoreDataStatus>(enum_t_value));
}
bool InitializeStatsProto_DocumentStoreDataStatus_Parse(
    const std::string& name, InitializeStatsProto_DocumentStoreDataStatus* value);
enum DeleteStatsProto_DeleteType_Code : int {
  DeleteStatsProto_DeleteType_Code_UNKNOWN = 0,
  DeleteStatsProto_DeleteType_Code_SINGLE = 1,
  DeleteStatsProto_DeleteType_Code_DEPRECATED_QUERY PROTOBUF_DEPRECATED = 2,
  DeleteStatsProto_DeleteType_Code_NAMESPACE = 3,
  DeleteStatsProto_DeleteType_Code_SCHEMA_TYPE = 4
};
bool DeleteStatsProto_DeleteType_Code_IsValid(int value);
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType_Code_Code_MIN = DeleteStatsProto_DeleteType_Code_UNKNOWN;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType_Code_Code_MAX = DeleteStatsProto_DeleteType_Code_SCHEMA_TYPE;
constexpr int DeleteStatsProto_DeleteType_Code_Code_ARRAYSIZE = DeleteStatsProto_DeleteType_Code_Code_MAX + 1;

const std::string& DeleteStatsProto_DeleteType_Code_Name(DeleteStatsProto_DeleteType_Code value);
template<typename T>
inline const std::string& DeleteStatsProto_DeleteType_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeleteStatsProto_DeleteType_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeleteStatsProto_DeleteType_Code_Name.");
  return DeleteStatsProto_DeleteType_Code_Name(static_cast<DeleteStatsProto_DeleteType_Code>(enum_t_value));
}
bool DeleteStatsProto_DeleteType_Code_Parse(
    const std::string& name, DeleteStatsProto_DeleteType_Code* value);
// ===================================================================

class InitializeStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.InitializeStatsProto) */ {
 public:
  InitializeStatsProto();
  virtual ~InitializeStatsProto();

  InitializeStatsProto(const InitializeStatsProto& from);
  InitializeStatsProto(InitializeStatsProto&& from) noexcept
    : InitializeStatsProto() {
    *this = ::std::move(from);
  }

  inline InitializeStatsProto& operator=(const InitializeStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeStatsProto& operator=(InitializeStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InitializeStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitializeStatsProto* internal_default_instance() {
    return reinterpret_cast<const InitializeStatsProto*>(
               &_InitializeStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitializeStatsProto& a, InitializeStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializeStatsProto* New() const final {
    return CreateMaybeMessage<InitializeStatsProto>(nullptr);
  }

  InitializeStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializeStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InitializeStatsProto& from);
  void MergeFrom(const InitializeStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitializeStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.InitializeStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InitializeStatsProto_RecoveryCause RecoveryCause;
  static constexpr RecoveryCause NONE =
    InitializeStatsProto_RecoveryCause_NONE;
  static constexpr RecoveryCause DATA_LOSS =
    InitializeStatsProto_RecoveryCause_DATA_LOSS;
  static constexpr RecoveryCause INCONSISTENT_WITH_GROUND_TRUTH =
    InitializeStatsProto_RecoveryCause_INCONSISTENT_WITH_GROUND_TRUTH;
  static constexpr RecoveryCause SCHEMA_CHANGES_OUT_OF_SYNC =
    InitializeStatsProto_RecoveryCause_SCHEMA_CHANGES_OUT_OF_SYNC;
  static constexpr RecoveryCause IO_ERROR =
    InitializeStatsProto_RecoveryCause_IO_ERROR;
  static inline bool RecoveryCause_IsValid(int value) {
    return InitializeStatsProto_RecoveryCause_IsValid(value);
  }
  static constexpr RecoveryCause RecoveryCause_MIN =
    InitializeStatsProto_RecoveryCause_RecoveryCause_MIN;
  static constexpr RecoveryCause RecoveryCause_MAX =
    InitializeStatsProto_RecoveryCause_RecoveryCause_MAX;
  static constexpr int RecoveryCause_ARRAYSIZE =
    InitializeStatsProto_RecoveryCause_RecoveryCause_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RecoveryCause_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecoveryCause>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecoveryCause_Name.");
    return InitializeStatsProto_RecoveryCause_Name(enum_t_value);
  }
  static inline bool RecoveryCause_Parse(const std::string& name,
      RecoveryCause* value) {
    return InitializeStatsProto_RecoveryCause_Parse(name, value);
  }

  typedef InitializeStatsProto_DocumentStoreDataStatus DocumentStoreDataStatus;
  static constexpr DocumentStoreDataStatus NO_DATA_LOSS =
    InitializeStatsProto_DocumentStoreDataStatus_NO_DATA_LOSS;
  static constexpr DocumentStoreDataStatus PARTIAL_LOSS =
    InitializeStatsProto_DocumentStoreDataStatus_PARTIAL_LOSS;
  static constexpr DocumentStoreDataStatus COMPLETE_LOSS =
    InitializeStatsProto_DocumentStoreDataStatus_COMPLETE_LOSS;
  static inline bool DocumentStoreDataStatus_IsValid(int value) {
    return InitializeStatsProto_DocumentStoreDataStatus_IsValid(value);
  }
  static constexpr DocumentStoreDataStatus DocumentStoreDataStatus_MIN =
    InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_MIN;
  static constexpr DocumentStoreDataStatus DocumentStoreDataStatus_MAX =
    InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_MAX;
  static constexpr int DocumentStoreDataStatus_ARRAYSIZE =
    InitializeStatsProto_DocumentStoreDataStatus_DocumentStoreDataStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DocumentStoreDataStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DocumentStoreDataStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DocumentStoreDataStatus_Name.");
    return InitializeStatsProto_DocumentStoreDataStatus_Name(enum_t_value);
  }
  static inline bool DocumentStoreDataStatus_Parse(const std::string& name,
      DocumentStoreDataStatus* value) {
    return InitializeStatsProto_DocumentStoreDataStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyMsFieldNumber = 1,
    kDocumentStoreRecoveryCauseFieldNumber = 2,
    kIndexRestorationCauseFieldNumber = 3,
    kSchemaStoreRecoveryCauseFieldNumber = 4,
    kDocumentStoreRecoveryLatencyMsFieldNumber = 5,
    kIndexRestorationLatencyMsFieldNumber = 6,
    kSchemaStoreRecoveryLatencyMsFieldNumber = 7,
    kDocumentStoreDataStatusFieldNumber = 8,
    kNumDocumentsFieldNumber = 9,
    kNumSchemaTypesFieldNumber = 10,
  };
  // optional int32 latency_ms = 1;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
  bool has_document_store_recovery_cause() const;
  void clear_document_store_recovery_cause();
  ::icing::lib::InitializeStatsProto_RecoveryCause document_store_recovery_cause() const;
  void set_document_store_recovery_cause(::icing::lib::InitializeStatsProto_RecoveryCause value);

  // optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
  bool has_index_restoration_cause() const;
  void clear_index_restoration_cause();
  ::icing::lib::InitializeStatsProto_RecoveryCause index_restoration_cause() const;
  void set_index_restoration_cause(::icing::lib::InitializeStatsProto_RecoveryCause value);

  // optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
  bool has_schema_store_recovery_cause() const;
  void clear_schema_store_recovery_cause();
  ::icing::lib::InitializeStatsProto_RecoveryCause schema_store_recovery_cause() const;
  void set_schema_store_recovery_cause(::icing::lib::InitializeStatsProto_RecoveryCause value);

  // optional int32 document_store_recovery_latency_ms = 5;
  bool has_document_store_recovery_latency_ms() const;
  void clear_document_store_recovery_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_recovery_latency_ms() const;
  void set_document_store_recovery_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 index_restoration_latency_ms = 6;
  bool has_index_restoration_latency_ms() const;
  void clear_index_restoration_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 index_restoration_latency_ms() const;
  void set_index_restoration_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 schema_store_recovery_latency_ms = 7;
  bool has_schema_store_recovery_latency_ms() const;
  void clear_schema_store_recovery_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 schema_store_recovery_latency_ms() const;
  void set_schema_store_recovery_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
  bool has_document_store_data_status() const;
  void clear_document_store_data_status();
  ::icing::lib::InitializeStatsProto_DocumentStoreDataStatus document_store_data_status() const;
  void set_document_store_data_status(::icing::lib::InitializeStatsProto_DocumentStoreDataStatus value);

  // optional int32 num_documents = 9;
  bool has_num_documents() const;
  void clear_num_documents();
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents() const;
  void set_num_documents(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_schema_types = 10;
  bool has_num_schema_types() const;
  void clear_num_schema_types();
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types() const;
  void set_num_schema_types(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.InitializeStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  int document_store_recovery_cause_;
  int index_restoration_cause_;
  int schema_store_recovery_cause_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_recovery_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_restoration_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 schema_store_recovery_latency_ms_;
  int document_store_data_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class PutDocumentStatsProto_TokenizationStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.PutDocumentStatsProto.TokenizationStats) */ {
 public:
  PutDocumentStatsProto_TokenizationStats();
  virtual ~PutDocumentStatsProto_TokenizationStats();

  PutDocumentStatsProto_TokenizationStats(const PutDocumentStatsProto_TokenizationStats& from);
  PutDocumentStatsProto_TokenizationStats(PutDocumentStatsProto_TokenizationStats&& from) noexcept
    : PutDocumentStatsProto_TokenizationStats() {
    *this = ::std::move(from);
  }

  inline PutDocumentStatsProto_TokenizationStats& operator=(const PutDocumentStatsProto_TokenizationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutDocumentStatsProto_TokenizationStats& operator=(PutDocumentStatsProto_TokenizationStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PutDocumentStatsProto_TokenizationStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutDocumentStatsProto_TokenizationStats* internal_default_instance() {
    return reinterpret_cast<const PutDocumentStatsProto_TokenizationStats*>(
               &_PutDocumentStatsProto_TokenizationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PutDocumentStatsProto_TokenizationStats& a, PutDocumentStatsProto_TokenizationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PutDocumentStatsProto_TokenizationStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutDocumentStatsProto_TokenizationStats* New() const final {
    return CreateMaybeMessage<PutDocumentStatsProto_TokenizationStats>(nullptr);
  }

  PutDocumentStatsProto_TokenizationStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutDocumentStatsProto_TokenizationStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PutDocumentStatsProto_TokenizationStats& from);
  void MergeFrom(const PutDocumentStatsProto_TokenizationStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutDocumentStatsProto_TokenizationStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.PutDocumentStatsProto.TokenizationStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumTokensIndexedFieldNumber = 1,
    kExceededMaxTokenNumFieldNumber = 2,
  };
  // optional int32 num_tokens_indexed = 1;
  bool has_num_tokens_indexed() const;
  void clear_num_tokens_indexed();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_indexed() const;
  void set_num_tokens_indexed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool exceeded_max_token_num = 2;
  bool has_exceeded_max_token_num() const;
  void clear_exceeded_max_token_num();
  bool exceeded_max_token_num() const;
  void set_exceeded_max_token_num(bool value);

  // @@protoc_insertion_point(class_scope:icing.lib.PutDocumentStatsProto.TokenizationStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_indexed_;
  bool exceeded_max_token_num_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class PutDocumentStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.PutDocumentStatsProto) */ {
 public:
  PutDocumentStatsProto();
  virtual ~PutDocumentStatsProto();

  PutDocumentStatsProto(const PutDocumentStatsProto& from);
  PutDocumentStatsProto(PutDocumentStatsProto&& from) noexcept
    : PutDocumentStatsProto() {
    *this = ::std::move(from);
  }

  inline PutDocumentStatsProto& operator=(const PutDocumentStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutDocumentStatsProto& operator=(PutDocumentStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PutDocumentStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutDocumentStatsProto* internal_default_instance() {
    return reinterpret_cast<const PutDocumentStatsProto*>(
               &_PutDocumentStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutDocumentStatsProto& a, PutDocumentStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PutDocumentStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutDocumentStatsProto* New() const final {
    return CreateMaybeMessage<PutDocumentStatsProto>(nullptr);
  }

  PutDocumentStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutDocumentStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PutDocumentStatsProto& from);
  void MergeFrom(const PutDocumentStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutDocumentStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.PutDocumentStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PutDocumentStatsProto_TokenizationStats TokenizationStats;

  // accessors -------------------------------------------------------

  enum : int {
    kTokenizationStatsFieldNumber = 6,
    kLatencyMsFieldNumber = 1,
    kDocumentStoreLatencyMsFieldNumber = 2,
    kIndexLatencyMsFieldNumber = 3,
    kIndexMergeLatencyMsFieldNumber = 4,
    kDocumentSizeFieldNumber = 5,
  };
  // optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
  bool has_tokenization_stats() const;
  void clear_tokenization_stats();
  const ::icing::lib::PutDocumentStatsProto_TokenizationStats& tokenization_stats() const;
  ::icing::lib::PutDocumentStatsProto_TokenizationStats* release_tokenization_stats();
  ::icing::lib::PutDocumentStatsProto_TokenizationStats* mutable_tokenization_stats();
  void set_allocated_tokenization_stats(::icing::lib::PutDocumentStatsProto_TokenizationStats* tokenization_stats);

  // optional int32 latency_ms = 1;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 document_store_latency_ms = 2;
  bool has_document_store_latency_ms() const;
  void clear_document_store_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_latency_ms() const;
  void set_document_store_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 index_latency_ms = 3;
  bool has_index_latency_ms() const;
  void clear_index_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 index_latency_ms() const;
  void set_index_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 index_merge_latency_ms = 4;
  bool has_index_merge_latency_ms() const;
  void clear_index_merge_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 index_merge_latency_ms() const;
  void set_index_merge_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 document_size = 5;
  bool has_document_size() const;
  void clear_document_size();
  ::PROTOBUF_NAMESPACE_ID::int32 document_size() const;
  void set_document_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.PutDocumentStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::icing::lib::PutDocumentStatsProto_TokenizationStats* tokenization_stats_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_merge_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_size_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class QueryStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.QueryStatsProto) */ {
 public:
  QueryStatsProto();
  virtual ~QueryStatsProto();

  QueryStatsProto(const QueryStatsProto& from);
  QueryStatsProto(QueryStatsProto&& from) noexcept
    : QueryStatsProto() {
    *this = ::std::move(from);
  }

  inline QueryStatsProto& operator=(const QueryStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStatsProto& operator=(QueryStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const QueryStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryStatsProto* internal_default_instance() {
    return reinterpret_cast<const QueryStatsProto*>(
               &_QueryStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryStatsProto& a, QueryStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryStatsProto* New() const final {
    return CreateMaybeMessage<QueryStatsProto>(nullptr);
  }

  QueryStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryStatsProto& from);
  void MergeFrom(const QueryStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.QueryStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumTermsFieldNumber = 1,
    kNumNamespacesFilteredFieldNumber = 2,
    kNumSchemaTypesFilteredFieldNumber = 3,
    kRankingStrategyFieldNumber = 4,
    kIsFirstPageFieldNumber = 5,
    kRequestedPageSizeFieldNumber = 6,
    kNumResultsReturnedCurrentPageFieldNumber = 7,
    kNumDocumentsScoredFieldNumber = 8,
    kLatencyMsFieldNumber = 10,
    kParseQueryLatencyMsFieldNumber = 11,
    kScoringLatencyMsFieldNumber = 12,
    kRankingLatencyMsFieldNumber = 13,
    kDocumentRetrievalLatencyMsFieldNumber = 14,
    kNumResultsWithSnippetsFieldNumber = 15,
    kQueryLengthFieldNumber = 16,
  };
  // optional int32 num_terms = 1;
  bool has_num_terms() const;
  void clear_num_terms();
  ::PROTOBUF_NAMESPACE_ID::int32 num_terms() const;
  void set_num_terms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_namespaces_filtered = 2;
  bool has_num_namespaces_filtered() const;
  void clear_num_namespaces_filtered();
  ::PROTOBUF_NAMESPACE_ID::int32 num_namespaces_filtered() const;
  void set_num_namespaces_filtered(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_schema_types_filtered = 3;
  bool has_num_schema_types_filtered() const;
  void clear_num_schema_types_filtered();
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types_filtered() const;
  void set_num_schema_types_filtered(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
  bool has_ranking_strategy() const;
  void clear_ranking_strategy();
  ::icing::lib::ScoringSpecProto_RankingStrategy_Code ranking_strategy() const;
  void set_ranking_strategy(::icing::lib::ScoringSpecProto_RankingStrategy_Code value);

  // optional bool is_first_page = 5;
  bool has_is_first_page() const;
  void clear_is_first_page();
  bool is_first_page() const;
  void set_is_first_page(bool value);

  // optional int32 requested_page_size = 6;
  bool has_requested_page_size() const;
  void clear_requested_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 requested_page_size() const;
  void set_requested_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_results_returned_current_page = 7;
  bool has_num_results_returned_current_page() const;
  void clear_num_results_returned_current_page();
  ::PROTOBUF_NAMESPACE_ID::int32 num_results_returned_current_page() const;
  void set_num_results_returned_current_page(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_documents_scored = 8;
  bool has_num_documents_scored() const;
  void clear_num_documents_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_scored() const;
  void set_num_documents_scored(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 latency_ms = 10;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 parse_query_latency_ms = 11;
  bool has_parse_query_latency_ms() const;
  void clear_parse_query_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 parse_query_latency_ms() const;
  void set_parse_query_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 scoring_latency_ms = 12;
  bool has_scoring_latency_ms() const;
  void clear_scoring_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 scoring_latency_ms() const;
  void set_scoring_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ranking_latency_ms = 13;
  bool has_ranking_latency_ms() const;
  void clear_ranking_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 ranking_latency_ms() const;
  void set_ranking_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 document_retrieval_latency_ms = 14;
  bool has_document_retrieval_latency_ms() const;
  void clear_document_retrieval_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 document_retrieval_latency_ms() const;
  void set_document_retrieval_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_results_with_snippets = 15;
  bool has_num_results_with_snippets() const;
  void clear_num_results_with_snippets();
  ::PROTOBUF_NAMESPACE_ID::int32 num_results_with_snippets() const;
  void set_num_results_with_snippets(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 query_length = 16;
  bool has_query_length() const;
  void clear_query_length();
  ::PROTOBUF_NAMESPACE_ID::int32 query_length() const;
  void set_query_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.QueryStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_terms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_namespaces_filtered_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types_filtered_;
  int ranking_strategy_;
  bool is_first_page_;
  ::PROTOBUF_NAMESPACE_ID::int32 requested_page_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_results_returned_current_page_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_scored_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 parse_query_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 scoring_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 ranking_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_retrieval_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_results_with_snippets_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_length_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class DeleteStatsProto_DeleteType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.DeleteStatsProto.DeleteType) */ {
 public:
  DeleteStatsProto_DeleteType();
  virtual ~DeleteStatsProto_DeleteType();

  DeleteStatsProto_DeleteType(const DeleteStatsProto_DeleteType& from);
  DeleteStatsProto_DeleteType(DeleteStatsProto_DeleteType&& from) noexcept
    : DeleteStatsProto_DeleteType() {
    *this = ::std::move(from);
  }

  inline DeleteStatsProto_DeleteType& operator=(const DeleteStatsProto_DeleteType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStatsProto_DeleteType& operator=(DeleteStatsProto_DeleteType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeleteStatsProto_DeleteType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStatsProto_DeleteType* internal_default_instance() {
    return reinterpret_cast<const DeleteStatsProto_DeleteType*>(
               &_DeleteStatsProto_DeleteType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteStatsProto_DeleteType& a, DeleteStatsProto_DeleteType& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStatsProto_DeleteType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStatsProto_DeleteType* New() const final {
    return CreateMaybeMessage<DeleteStatsProto_DeleteType>(nullptr);
  }

  DeleteStatsProto_DeleteType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStatsProto_DeleteType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteStatsProto_DeleteType& from);
  void MergeFrom(const DeleteStatsProto_DeleteType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteStatsProto_DeleteType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.DeleteStatsProto.DeleteType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteStatsProto_DeleteType_Code Code;
  static constexpr Code UNKNOWN =
    DeleteStatsProto_DeleteType_Code_UNKNOWN;
  static constexpr Code SINGLE =
    DeleteStatsProto_DeleteType_Code_SINGLE;
  PROTOBUF_DEPRECATED static constexpr Code DEPRECATED_QUERY =
    DeleteStatsProto_DeleteType_Code_DEPRECATED_QUERY;
  static constexpr Code NAMESPACE =
    DeleteStatsProto_DeleteType_Code_NAMESPACE;
  static constexpr Code SCHEMA_TYPE =
    DeleteStatsProto_DeleteType_Code_SCHEMA_TYPE;
  static inline bool Code_IsValid(int value) {
    return DeleteStatsProto_DeleteType_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    DeleteStatsProto_DeleteType_Code_Code_MIN;
  static constexpr Code Code_MAX =
    DeleteStatsProto_DeleteType_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    DeleteStatsProto_DeleteType_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return DeleteStatsProto_DeleteType_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(const std::string& name,
      Code* value) {
    return DeleteStatsProto_DeleteType_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:icing.lib.DeleteStatsProto.DeleteType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class DeleteStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.DeleteStatsProto) */ {
 public:
  DeleteStatsProto();
  virtual ~DeleteStatsProto();

  DeleteStatsProto(const DeleteStatsProto& from);
  DeleteStatsProto(DeleteStatsProto&& from) noexcept
    : DeleteStatsProto() {
    *this = ::std::move(from);
  }

  inline DeleteStatsProto& operator=(const DeleteStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStatsProto& operator=(DeleteStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeleteStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStatsProto* internal_default_instance() {
    return reinterpret_cast<const DeleteStatsProto*>(
               &_DeleteStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteStatsProto& a, DeleteStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStatsProto* New() const final {
    return CreateMaybeMessage<DeleteStatsProto>(nullptr);
  }

  DeleteStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteStatsProto& from);
  void MergeFrom(const DeleteStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.DeleteStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteStatsProto_DeleteType DeleteType;

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyMsFieldNumber = 1,
    kDeleteTypeFieldNumber = 2,
    kNumDocumentsDeletedFieldNumber = 3,
  };
  // optional int32 latency_ms = 1;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
  bool has_delete_type() const;
  void clear_delete_type();
  ::icing::lib::DeleteStatsProto_DeleteType_Code delete_type() const;
  void set_delete_type(::icing::lib::DeleteStatsProto_DeleteType_Code value);

  // optional int32 num_documents_deleted = 3;
  bool has_num_documents_deleted() const;
  void clear_num_documents_deleted();
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_deleted() const;
  void set_num_documents_deleted(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.DeleteStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  int delete_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_deleted_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// -------------------------------------------------------------------

class DeleteByQueryStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.DeleteByQueryStatsProto) */ {
 public:
  DeleteByQueryStatsProto();
  virtual ~DeleteByQueryStatsProto();

  DeleteByQueryStatsProto(const DeleteByQueryStatsProto& from);
  DeleteByQueryStatsProto(DeleteByQueryStatsProto&& from) noexcept
    : DeleteByQueryStatsProto() {
    *this = ::std::move(from);
  }

  inline DeleteByQueryStatsProto& operator=(const DeleteByQueryStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteByQueryStatsProto& operator=(DeleteByQueryStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeleteByQueryStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteByQueryStatsProto* internal_default_instance() {
    return reinterpret_cast<const DeleteByQueryStatsProto*>(
               &_DeleteByQueryStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteByQueryStatsProto& a, DeleteByQueryStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteByQueryStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteByQueryStatsProto* New() const final {
    return CreateMaybeMessage<DeleteByQueryStatsProto>(nullptr);
  }

  DeleteByQueryStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteByQueryStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteByQueryStatsProto& from);
  void MergeFrom(const DeleteByQueryStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteByQueryStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.DeleteByQueryStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyMsFieldNumber = 1,
    kNumDocumentsDeletedFieldNumber = 2,
    kQueryLengthFieldNumber = 3,
    kNumTermsFieldNumber = 4,
    kNumNamespacesFilteredFieldNumber = 5,
    kNumSchemaTypesFilteredFieldNumber = 6,
    kParseQueryLatencyMsFieldNumber = 7,
    kDocumentRemovalLatencyMsFieldNumber = 8,
  };
  // optional int32 latency_ms = 1;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_documents_deleted = 2;
  bool has_num_documents_deleted() const;
  void clear_num_documents_deleted();
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_deleted() const;
  void set_num_documents_deleted(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 query_length = 3;
  bool has_query_length() const;
  void clear_query_length();
  ::PROTOBUF_NAMESPACE_ID::int32 query_length() const;
  void set_query_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_terms = 4;
  bool has_num_terms() const;
  void clear_num_terms();
  ::PROTOBUF_NAMESPACE_ID::int32 num_terms() const;
  void set_num_terms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_namespaces_filtered = 5;
  bool has_num_namespaces_filtered() const;
  void clear_num_namespaces_filtered();
  ::PROTOBUF_NAMESPACE_ID::int32 num_namespaces_filtered() const;
  void set_num_namespaces_filtered(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_schema_types_filtered = 6;
  bool has_num_schema_types_filtered() const;
  void clear_num_schema_types_filtered();
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types_filtered() const;
  void set_num_schema_types_filtered(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 parse_query_latency_ms = 7;
  bool has_parse_query_latency_ms() const;
  void clear_parse_query_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 parse_query_latency_ms() const;
  void set_parse_query_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 document_removal_latency_ms = 8;
  bool has_document_removal_latency_ms() const;
  void clear_document_removal_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 document_removal_latency_ms() const;
  void set_document_removal_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.DeleteByQueryStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_documents_deleted_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_terms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_namespaces_filtered_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_schema_types_filtered_;
  ::PROTOBUF_NAMESPACE_ID::int32 parse_query_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_removal_latency_ms_;
  friend struct ::TableStruct_icing_2fproto_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitializeStatsProto

// optional int32 latency_ms = 1;
inline bool InitializeStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitializeStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.latency_ms)
  return latency_ms_;
}
inline void InitializeStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.latency_ms)
}

// optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
inline bool InitializeStatsProto::has_document_store_recovery_cause() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitializeStatsProto::clear_document_store_recovery_cause() {
  document_store_recovery_cause_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::icing::lib::InitializeStatsProto_RecoveryCause InitializeStatsProto::document_store_recovery_cause() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.document_store_recovery_cause)
  return static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(document_store_recovery_cause_);
}
inline void InitializeStatsProto::set_document_store_recovery_cause(::icing::lib::InitializeStatsProto_RecoveryCause value) {
  assert(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  document_store_recovery_cause_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.document_store_recovery_cause)
}

// optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
inline bool InitializeStatsProto::has_index_restoration_cause() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitializeStatsProto::clear_index_restoration_cause() {
  index_restoration_cause_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::icing::lib::InitializeStatsProto_RecoveryCause InitializeStatsProto::index_restoration_cause() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.index_restoration_cause)
  return static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(index_restoration_cause_);
}
inline void InitializeStatsProto::set_index_restoration_cause(::icing::lib::InitializeStatsProto_RecoveryCause value) {
  assert(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  index_restoration_cause_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.index_restoration_cause)
}

// optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
inline bool InitializeStatsProto::has_schema_store_recovery_cause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitializeStatsProto::clear_schema_store_recovery_cause() {
  schema_store_recovery_cause_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::icing::lib::InitializeStatsProto_RecoveryCause InitializeStatsProto::schema_store_recovery_cause() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.schema_store_recovery_cause)
  return static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(schema_store_recovery_cause_);
}
inline void InitializeStatsProto::set_schema_store_recovery_cause(::icing::lib::InitializeStatsProto_RecoveryCause value) {
  assert(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  schema_store_recovery_cause_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.schema_store_recovery_cause)
}

// optional int32 document_store_recovery_latency_ms = 5;
inline bool InitializeStatsProto::has_document_store_recovery_latency_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitializeStatsProto::clear_document_store_recovery_latency_ms() {
  document_store_recovery_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::document_store_recovery_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.document_store_recovery_latency_ms)
  return document_store_recovery_latency_ms_;
}
inline void InitializeStatsProto::set_document_store_recovery_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  document_store_recovery_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.document_store_recovery_latency_ms)
}

// optional int32 index_restoration_latency_ms = 6;
inline bool InitializeStatsProto::has_index_restoration_latency_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InitializeStatsProto::clear_index_restoration_latency_ms() {
  index_restoration_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::index_restoration_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.index_restoration_latency_ms)
  return index_restoration_latency_ms_;
}
inline void InitializeStatsProto::set_index_restoration_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  index_restoration_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.index_restoration_latency_ms)
}

// optional int32 schema_store_recovery_latency_ms = 7;
inline bool InitializeStatsProto::has_schema_store_recovery_latency_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InitializeStatsProto::clear_schema_store_recovery_latency_ms() {
  schema_store_recovery_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::schema_store_recovery_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.schema_store_recovery_latency_ms)
  return schema_store_recovery_latency_ms_;
}
inline void InitializeStatsProto::set_schema_store_recovery_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  schema_store_recovery_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.schema_store_recovery_latency_ms)
}

// optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
inline bool InitializeStatsProto::has_document_store_data_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InitializeStatsProto::clear_document_store_data_status() {
  document_store_data_status_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::icing::lib::InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::document_store_data_status() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.document_store_data_status)
  return static_cast< ::icing::lib::InitializeStatsProto_DocumentStoreDataStatus >(document_store_data_status_);
}
inline void InitializeStatsProto::set_document_store_data_status(::icing::lib::InitializeStatsProto_DocumentStoreDataStatus value) {
  assert(::icing::lib::InitializeStatsProto_DocumentStoreDataStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  document_store_data_status_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.document_store_data_status)
}

// optional int32 num_documents = 9;
inline bool InitializeStatsProto::has_num_documents() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InitializeStatsProto::clear_num_documents() {
  num_documents_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::num_documents() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.num_documents)
  return num_documents_;
}
inline void InitializeStatsProto::set_num_documents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_documents_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.num_documents)
}

// optional int32 num_schema_types = 10;
inline bool InitializeStatsProto::has_num_schema_types() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InitializeStatsProto::clear_num_schema_types() {
  num_schema_types_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitializeStatsProto::num_schema_types() const {
  // @@protoc_insertion_point(field_get:icing.lib.InitializeStatsProto.num_schema_types)
  return num_schema_types_;
}
inline void InitializeStatsProto::set_num_schema_types(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_schema_types_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.InitializeStatsProto.num_schema_types)
}

// -------------------------------------------------------------------

// PutDocumentStatsProto_TokenizationStats

// optional bool exceeded_max_token_num = 2;
inline bool PutDocumentStatsProto_TokenizationStats::has_exceeded_max_token_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutDocumentStatsProto_TokenizationStats::clear_exceeded_max_token_num() {
  exceeded_max_token_num_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PutDocumentStatsProto_TokenizationStats::exceeded_max_token_num() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.TokenizationStats.exceeded_max_token_num)
  return exceeded_max_token_num_;
}
inline void PutDocumentStatsProto_TokenizationStats::set_exceeded_max_token_num(bool value) {
  _has_bits_[0] |= 0x00000002u;
  exceeded_max_token_num_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.TokenizationStats.exceeded_max_token_num)
}

// optional int32 num_tokens_indexed = 1;
inline bool PutDocumentStatsProto_TokenizationStats::has_num_tokens_indexed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutDocumentStatsProto_TokenizationStats::clear_num_tokens_indexed() {
  num_tokens_indexed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto_TokenizationStats::num_tokens_indexed() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.TokenizationStats.num_tokens_indexed)
  return num_tokens_indexed_;
}
inline void PutDocumentStatsProto_TokenizationStats::set_num_tokens_indexed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_tokens_indexed_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.TokenizationStats.num_tokens_indexed)
}

// -------------------------------------------------------------------

// PutDocumentStatsProto

// optional int32 latency_ms = 1;
inline bool PutDocumentStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutDocumentStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.latency_ms)
  return latency_ms_;
}
inline void PutDocumentStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.latency_ms)
}

// optional int32 document_store_latency_ms = 2;
inline bool PutDocumentStatsProto::has_document_store_latency_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutDocumentStatsProto::clear_document_store_latency_ms() {
  document_store_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto::document_store_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.document_store_latency_ms)
  return document_store_latency_ms_;
}
inline void PutDocumentStatsProto::set_document_store_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  document_store_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.document_store_latency_ms)
}

// optional int32 index_latency_ms = 3;
inline bool PutDocumentStatsProto::has_index_latency_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutDocumentStatsProto::clear_index_latency_ms() {
  index_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto::index_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.index_latency_ms)
  return index_latency_ms_;
}
inline void PutDocumentStatsProto::set_index_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.index_latency_ms)
}

// optional int32 index_merge_latency_ms = 4;
inline bool PutDocumentStatsProto::has_index_merge_latency_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PutDocumentStatsProto::clear_index_merge_latency_ms() {
  index_merge_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto::index_merge_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.index_merge_latency_ms)
  return index_merge_latency_ms_;
}
inline void PutDocumentStatsProto::set_index_merge_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_merge_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.index_merge_latency_ms)
}

// optional int32 document_size = 5;
inline bool PutDocumentStatsProto::has_document_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PutDocumentStatsProto::clear_document_size() {
  document_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutDocumentStatsProto::document_size() const {
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.document_size)
  return document_size_;
}
inline void PutDocumentStatsProto::set_document_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  document_size_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.PutDocumentStatsProto.document_size)
}

// optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
inline bool PutDocumentStatsProto::has_tokenization_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutDocumentStatsProto::clear_tokenization_stats() {
  if (tokenization_stats_ != nullptr) tokenization_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::icing::lib::PutDocumentStatsProto_TokenizationStats& PutDocumentStatsProto::tokenization_stats() const {
  const ::icing::lib::PutDocumentStatsProto_TokenizationStats* p = tokenization_stats_;
  // @@protoc_insertion_point(field_get:icing.lib.PutDocumentStatsProto.tokenization_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::PutDocumentStatsProto_TokenizationStats*>(
      &::icing::lib::_PutDocumentStatsProto_TokenizationStats_default_instance_);
}
inline ::icing::lib::PutDocumentStatsProto_TokenizationStats* PutDocumentStatsProto::release_tokenization_stats() {
  // @@protoc_insertion_point(field_release:icing.lib.PutDocumentStatsProto.tokenization_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::icing::lib::PutDocumentStatsProto_TokenizationStats* temp = tokenization_stats_;
  tokenization_stats_ = nullptr;
  return temp;
}
inline ::icing::lib::PutDocumentStatsProto_TokenizationStats* PutDocumentStatsProto::mutable_tokenization_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (tokenization_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::PutDocumentStatsProto_TokenizationStats>(GetArenaNoVirtual());
    tokenization_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.PutDocumentStatsProto.tokenization_stats)
  return tokenization_stats_;
}
inline void PutDocumentStatsProto::set_allocated_tokenization_stats(::icing::lib::PutDocumentStatsProto_TokenizationStats* tokenization_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokenization_stats_;
  }
  if (tokenization_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokenization_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenization_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tokenization_stats_ = tokenization_stats;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.PutDocumentStatsProto.tokenization_stats)
}

// -------------------------------------------------------------------

// QueryStatsProto

// optional int32 query_length = 16;
inline bool QueryStatsProto::has_query_length() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QueryStatsProto::clear_query_length() {
  query_length_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::query_length() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.query_length)
  return query_length_;
}
inline void QueryStatsProto::set_query_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  query_length_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.query_length)
}

// optional int32 num_terms = 1;
inline bool QueryStatsProto::has_num_terms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStatsProto::clear_num_terms() {
  num_terms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_terms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_terms)
  return num_terms_;
}
inline void QueryStatsProto::set_num_terms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_terms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_terms)
}

// optional int32 num_namespaces_filtered = 2;
inline bool QueryStatsProto::has_num_namespaces_filtered() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryStatsProto::clear_num_namespaces_filtered() {
  num_namespaces_filtered_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_namespaces_filtered() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_namespaces_filtered)
  return num_namespaces_filtered_;
}
inline void QueryStatsProto::set_num_namespaces_filtered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_namespaces_filtered_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_namespaces_filtered)
}

// optional int32 num_schema_types_filtered = 3;
inline bool QueryStatsProto::has_num_schema_types_filtered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryStatsProto::clear_num_schema_types_filtered() {
  num_schema_types_filtered_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_schema_types_filtered() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_schema_types_filtered)
  return num_schema_types_filtered_;
}
inline void QueryStatsProto::set_num_schema_types_filtered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_schema_types_filtered_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_schema_types_filtered)
}

// optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
inline bool QueryStatsProto::has_ranking_strategy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryStatsProto::clear_ranking_strategy() {
  ranking_strategy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::icing::lib::ScoringSpecProto_RankingStrategy_Code QueryStatsProto::ranking_strategy() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.ranking_strategy)
  return static_cast< ::icing::lib::ScoringSpecProto_RankingStrategy_Code >(ranking_strategy_);
}
inline void QueryStatsProto::set_ranking_strategy(::icing::lib::ScoringSpecProto_RankingStrategy_Code value) {
  assert(::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  ranking_strategy_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.ranking_strategy)
}

// optional bool is_first_page = 5;
inline bool QueryStatsProto::has_is_first_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryStatsProto::clear_is_first_page() {
  is_first_page_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool QueryStatsProto::is_first_page() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.is_first_page)
  return is_first_page_;
}
inline void QueryStatsProto::set_is_first_page(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_first_page_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.is_first_page)
}

// optional int32 requested_page_size = 6;
inline bool QueryStatsProto::has_requested_page_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryStatsProto::clear_requested_page_size() {
  requested_page_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::requested_page_size() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.requested_page_size)
  return requested_page_size_;
}
inline void QueryStatsProto::set_requested_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  requested_page_size_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.requested_page_size)
}

// optional int32 num_results_returned_current_page = 7;
inline bool QueryStatsProto::has_num_results_returned_current_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryStatsProto::clear_num_results_returned_current_page() {
  num_results_returned_current_page_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_results_returned_current_page() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_results_returned_current_page)
  return num_results_returned_current_page_;
}
inline void QueryStatsProto::set_num_results_returned_current_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_results_returned_current_page_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_results_returned_current_page)
}

// optional int32 num_documents_scored = 8;
inline bool QueryStatsProto::has_num_documents_scored() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryStatsProto::clear_num_documents_scored() {
  num_documents_scored_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_documents_scored() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_documents_scored)
  return num_documents_scored_;
}
inline void QueryStatsProto::set_num_documents_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_documents_scored_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_documents_scored)
}

// optional int32 num_results_with_snippets = 15;
inline bool QueryStatsProto::has_num_results_with_snippets() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QueryStatsProto::clear_num_results_with_snippets() {
  num_results_with_snippets_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::num_results_with_snippets() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.num_results_with_snippets)
  return num_results_with_snippets_;
}
inline void QueryStatsProto::set_num_results_with_snippets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  num_results_with_snippets_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.num_results_with_snippets)
}

// optional int32 latency_ms = 10;
inline bool QueryStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.latency_ms)
  return latency_ms_;
}
inline void QueryStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.latency_ms)
}

// optional int32 parse_query_latency_ms = 11;
inline bool QueryStatsProto::has_parse_query_latency_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryStatsProto::clear_parse_query_latency_ms() {
  parse_query_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::parse_query_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.parse_query_latency_ms)
  return parse_query_latency_ms_;
}
inline void QueryStatsProto::set_parse_query_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  parse_query_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.parse_query_latency_ms)
}

// optional int32 scoring_latency_ms = 12;
inline bool QueryStatsProto::has_scoring_latency_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryStatsProto::clear_scoring_latency_ms() {
  scoring_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::scoring_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.scoring_latency_ms)
  return scoring_latency_ms_;
}
inline void QueryStatsProto::set_scoring_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  scoring_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.scoring_latency_ms)
}

// optional int32 ranking_latency_ms = 13;
inline bool QueryStatsProto::has_ranking_latency_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryStatsProto::clear_ranking_latency_ms() {
  ranking_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::ranking_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.ranking_latency_ms)
  return ranking_latency_ms_;
}
inline void QueryStatsProto::set_ranking_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  ranking_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.ranking_latency_ms)
}

// optional int32 document_retrieval_latency_ms = 14;
inline bool QueryStatsProto::has_document_retrieval_latency_ms() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QueryStatsProto::clear_document_retrieval_latency_ms() {
  document_retrieval_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryStatsProto::document_retrieval_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.QueryStatsProto.document_retrieval_latency_ms)
  return document_retrieval_latency_ms_;
}
inline void QueryStatsProto::set_document_retrieval_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  document_retrieval_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.QueryStatsProto.document_retrieval_latency_ms)
}

// -------------------------------------------------------------------

// DeleteStatsProto_DeleteType

// -------------------------------------------------------------------

// DeleteStatsProto

// optional int32 latency_ms = 1;
inline bool DeleteStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteStatsProto.latency_ms)
  return latency_ms_;
}
inline void DeleteStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteStatsProto.latency_ms)
}

// optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
inline bool DeleteStatsProto::has_delete_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteStatsProto::clear_delete_type() {
  delete_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::icing::lib::DeleteStatsProto_DeleteType_Code DeleteStatsProto::delete_type() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteStatsProto.delete_type)
  return static_cast< ::icing::lib::DeleteStatsProto_DeleteType_Code >(delete_type_);
}
inline void DeleteStatsProto::set_delete_type(::icing::lib::DeleteStatsProto_DeleteType_Code value) {
  assert(::icing::lib::DeleteStatsProto_DeleteType_Code_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  delete_type_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteStatsProto.delete_type)
}

// optional int32 num_documents_deleted = 3;
inline bool DeleteStatsProto::has_num_documents_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteStatsProto::clear_num_documents_deleted() {
  num_documents_deleted_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStatsProto::num_documents_deleted() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteStatsProto.num_documents_deleted)
  return num_documents_deleted_;
}
inline void DeleteStatsProto::set_num_documents_deleted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_documents_deleted_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteStatsProto.num_documents_deleted)
}

// -------------------------------------------------------------------

// DeleteByQueryStatsProto

// optional int32 latency_ms = 1;
inline bool DeleteByQueryStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteByQueryStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.latency_ms)
  return latency_ms_;
}
inline void DeleteByQueryStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.latency_ms)
}

// optional int32 num_documents_deleted = 2;
inline bool DeleteByQueryStatsProto::has_num_documents_deleted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteByQueryStatsProto::clear_num_documents_deleted() {
  num_documents_deleted_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::num_documents_deleted() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.num_documents_deleted)
  return num_documents_deleted_;
}
inline void DeleteByQueryStatsProto::set_num_documents_deleted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_documents_deleted_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.num_documents_deleted)
}

// optional int32 query_length = 3;
inline bool DeleteByQueryStatsProto::has_query_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteByQueryStatsProto::clear_query_length() {
  query_length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::query_length() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.query_length)
  return query_length_;
}
inline void DeleteByQueryStatsProto::set_query_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  query_length_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.query_length)
}

// optional int32 num_terms = 4;
inline bool DeleteByQueryStatsProto::has_num_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeleteByQueryStatsProto::clear_num_terms() {
  num_terms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::num_terms() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.num_terms)
  return num_terms_;
}
inline void DeleteByQueryStatsProto::set_num_terms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_terms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.num_terms)
}

// optional int32 num_namespaces_filtered = 5;
inline bool DeleteByQueryStatsProto::has_num_namespaces_filtered() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeleteByQueryStatsProto::clear_num_namespaces_filtered() {
  num_namespaces_filtered_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::num_namespaces_filtered() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.num_namespaces_filtered)
  return num_namespaces_filtered_;
}
inline void DeleteByQueryStatsProto::set_num_namespaces_filtered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_namespaces_filtered_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.num_namespaces_filtered)
}

// optional int32 num_schema_types_filtered = 6;
inline bool DeleteByQueryStatsProto::has_num_schema_types_filtered() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeleteByQueryStatsProto::clear_num_schema_types_filtered() {
  num_schema_types_filtered_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::num_schema_types_filtered() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.num_schema_types_filtered)
  return num_schema_types_filtered_;
}
inline void DeleteByQueryStatsProto::set_num_schema_types_filtered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_schema_types_filtered_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.num_schema_types_filtered)
}

// optional int32 parse_query_latency_ms = 7;
inline bool DeleteByQueryStatsProto::has_parse_query_latency_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeleteByQueryStatsProto::clear_parse_query_latency_ms() {
  parse_query_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::parse_query_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.parse_query_latency_ms)
  return parse_query_latency_ms_;
}
inline void DeleteByQueryStatsProto::set_parse_query_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  parse_query_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.parse_query_latency_ms)
}

// optional int32 document_removal_latency_ms = 8;
inline bool DeleteByQueryStatsProto::has_document_removal_latency_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeleteByQueryStatsProto::clear_document_removal_latency_ms() {
  document_removal_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteByQueryStatsProto::document_removal_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.DeleteByQueryStatsProto.document_removal_latency_ms)
  return document_removal_latency_ms_;
}
inline void DeleteByQueryStatsProto::set_document_removal_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  document_removal_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.DeleteByQueryStatsProto.document_removal_latency_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::icing::lib::InitializeStatsProto_RecoveryCause> : ::std::true_type {};
template <> struct is_proto_enum< ::icing::lib::InitializeStatsProto_DocumentStoreDataStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::icing::lib::DeleteStatsProto_DeleteType_Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2flogging_2eproto
