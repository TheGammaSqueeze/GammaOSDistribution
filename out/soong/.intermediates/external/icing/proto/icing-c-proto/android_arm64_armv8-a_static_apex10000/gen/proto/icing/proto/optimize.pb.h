// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/optimize.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2foptimize_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2foptimize_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "icing/proto/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2foptimize_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2foptimize_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class GetOptimizeInfoResultProto;
class GetOptimizeInfoResultProtoDefaultTypeInternal;
extern GetOptimizeInfoResultProtoDefaultTypeInternal _GetOptimizeInfoResultProto_default_instance_;
class OptimizeResultProto;
class OptimizeResultProtoDefaultTypeInternal;
extern OptimizeResultProtoDefaultTypeInternal _OptimizeResultProto_default_instance_;
class OptimizeStatsProto;
class OptimizeStatsProtoDefaultTypeInternal;
extern OptimizeStatsProtoDefaultTypeInternal _OptimizeStatsProto_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::GetOptimizeInfoResultProto* Arena::CreateMaybeMessage<::icing::lib::GetOptimizeInfoResultProto>(Arena*);
template<> ::icing::lib::OptimizeResultProto* Arena::CreateMaybeMessage<::icing::lib::OptimizeResultProto>(Arena*);
template<> ::icing::lib::OptimizeStatsProto* Arena::CreateMaybeMessage<::icing::lib::OptimizeStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

// ===================================================================

class OptimizeResultProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.OptimizeResultProto) */ {
 public:
  OptimizeResultProto();
  virtual ~OptimizeResultProto();

  OptimizeResultProto(const OptimizeResultProto& from);
  OptimizeResultProto(OptimizeResultProto&& from) noexcept
    : OptimizeResultProto() {
    *this = ::std::move(from);
  }

  inline OptimizeResultProto& operator=(const OptimizeResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizeResultProto& operator=(OptimizeResultProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OptimizeResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptimizeResultProto* internal_default_instance() {
    return reinterpret_cast<const OptimizeResultProto*>(
               &_OptimizeResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptimizeResultProto& a, OptimizeResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizeResultProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizeResultProto* New() const final {
    return CreateMaybeMessage<OptimizeResultProto>(nullptr);
  }

  OptimizeResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizeResultProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OptimizeResultProto& from);
  void MergeFrom(const OptimizeResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizeResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.OptimizeResultProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kOptimizeStatsFieldNumber = 2,
  };
  // optional .icing.lib.StatusProto status = 1;
  bool has_status() const;
  void clear_status();
  const ::icing::lib::StatusProto& status() const;
  ::icing::lib::StatusProto* release_status();
  ::icing::lib::StatusProto* mutable_status();
  void set_allocated_status(::icing::lib::StatusProto* status);

  // optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
  bool has_optimize_stats() const;
  void clear_optimize_stats();
  const ::icing::lib::OptimizeStatsProto& optimize_stats() const;
  ::icing::lib::OptimizeStatsProto* release_optimize_stats();
  ::icing::lib::OptimizeStatsProto* mutable_optimize_stats();
  void set_allocated_optimize_stats(::icing::lib::OptimizeStatsProto* optimize_stats);

  // @@protoc_insertion_point(class_scope:icing.lib.OptimizeResultProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::icing::lib::StatusProto* status_;
  ::icing::lib::OptimizeStatsProto* optimize_stats_;
  friend struct ::TableStruct_icing_2fproto_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class GetOptimizeInfoResultProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.GetOptimizeInfoResultProto) */ {
 public:
  GetOptimizeInfoResultProto();
  virtual ~GetOptimizeInfoResultProto();

  GetOptimizeInfoResultProto(const GetOptimizeInfoResultProto& from);
  GetOptimizeInfoResultProto(GetOptimizeInfoResultProto&& from) noexcept
    : GetOptimizeInfoResultProto() {
    *this = ::std::move(from);
  }

  inline GetOptimizeInfoResultProto& operator=(const GetOptimizeInfoResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOptimizeInfoResultProto& operator=(GetOptimizeInfoResultProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GetOptimizeInfoResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOptimizeInfoResultProto* internal_default_instance() {
    return reinterpret_cast<const GetOptimizeInfoResultProto*>(
               &_GetOptimizeInfoResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetOptimizeInfoResultProto& a, GetOptimizeInfoResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOptimizeInfoResultProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOptimizeInfoResultProto* New() const final {
    return CreateMaybeMessage<GetOptimizeInfoResultProto>(nullptr);
  }

  GetOptimizeInfoResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOptimizeInfoResultProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetOptimizeInfoResultProto& from);
  void MergeFrom(const GetOptimizeInfoResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetOptimizeInfoResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.GetOptimizeInfoResultProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kOptimizableDocsFieldNumber = 2,
    kEstimatedOptimizableBytesFieldNumber = 3,
    kTimeSinceLastOptimizeMsFieldNumber = 4,
  };
  // optional .icing.lib.StatusProto status = 1;
  bool has_status() const;
  void clear_status();
  const ::icing::lib::StatusProto& status() const;
  ::icing::lib::StatusProto* release_status();
  ::icing::lib::StatusProto* mutable_status();
  void set_allocated_status(::icing::lib::StatusProto* status);

  // optional int64 optimizable_docs = 2;
  bool has_optimizable_docs() const;
  void clear_optimizable_docs();
  ::PROTOBUF_NAMESPACE_ID::int64 optimizable_docs() const;
  void set_optimizable_docs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 estimated_optimizable_bytes = 3;
  bool has_estimated_optimizable_bytes() const;
  void clear_estimated_optimizable_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_optimizable_bytes() const;
  void set_estimated_optimizable_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 time_since_last_optimize_ms = 4;
  bool has_time_since_last_optimize_ms() const;
  void clear_time_since_last_optimize_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 time_since_last_optimize_ms() const;
  void set_time_since_last_optimize_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:icing.lib.GetOptimizeInfoResultProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::icing::lib::StatusProto* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 optimizable_docs_;
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_optimizable_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_since_last_optimize_ms_;
  friend struct ::TableStruct_icing_2fproto_2foptimize_2eproto;
};
// -------------------------------------------------------------------

class OptimizeStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.OptimizeStatsProto) */ {
 public:
  OptimizeStatsProto();
  virtual ~OptimizeStatsProto();

  OptimizeStatsProto(const OptimizeStatsProto& from);
  OptimizeStatsProto(OptimizeStatsProto&& from) noexcept
    : OptimizeStatsProto() {
    *this = ::std::move(from);
  }

  inline OptimizeStatsProto& operator=(const OptimizeStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizeStatsProto& operator=(OptimizeStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OptimizeStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptimizeStatsProto* internal_default_instance() {
    return reinterpret_cast<const OptimizeStatsProto*>(
               &_OptimizeStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptimizeStatsProto& a, OptimizeStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OptimizeStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptimizeStatsProto* New() const final {
    return CreateMaybeMessage<OptimizeStatsProto>(nullptr);
  }

  OptimizeStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptimizeStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OptimizeStatsProto& from);
  void MergeFrom(const OptimizeStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizeStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.OptimizeStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyMsFieldNumber = 1,
    kDocumentStoreOptimizeLatencyMsFieldNumber = 2,
    kIndexRestorationLatencyMsFieldNumber = 3,
    kNumOriginalDocumentsFieldNumber = 4,
    kNumDeletedDocumentsFieldNumber = 5,
    kNumExpiredDocumentsFieldNumber = 6,
    kStorageSizeBeforeFieldNumber = 7,
    kStorageSizeAfterFieldNumber = 8,
    kTimeSinceLastOptimizeMsFieldNumber = 9,
  };
  // optional int32 latency_ms = 1;
  bool has_latency_ms() const;
  void clear_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms() const;
  void set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 document_store_optimize_latency_ms = 2;
  bool has_document_store_optimize_latency_ms() const;
  void clear_document_store_optimize_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_optimize_latency_ms() const;
  void set_document_store_optimize_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 index_restoration_latency_ms = 3;
  bool has_index_restoration_latency_ms() const;
  void clear_index_restoration_latency_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 index_restoration_latency_ms() const;
  void set_index_restoration_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_original_documents = 4;
  bool has_num_original_documents() const;
  void clear_num_original_documents();
  ::PROTOBUF_NAMESPACE_ID::int32 num_original_documents() const;
  void set_num_original_documents(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_deleted_documents = 5;
  bool has_num_deleted_documents() const;
  void clear_num_deleted_documents();
  ::PROTOBUF_NAMESPACE_ID::int32 num_deleted_documents() const;
  void set_num_deleted_documents(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_expired_documents = 6;
  bool has_num_expired_documents() const;
  void clear_num_expired_documents();
  ::PROTOBUF_NAMESPACE_ID::int32 num_expired_documents() const;
  void set_num_expired_documents(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 storage_size_before = 7;
  bool has_storage_size_before() const;
  void clear_storage_size_before();
  ::PROTOBUF_NAMESPACE_ID::int64 storage_size_before() const;
  void set_storage_size_before(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 storage_size_after = 8;
  bool has_storage_size_after() const;
  void clear_storage_size_after();
  ::PROTOBUF_NAMESPACE_ID::int64 storage_size_after() const;
  void set_storage_size_after(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 time_since_last_optimize_ms = 9;
  bool has_time_since_last_optimize_ms() const;
  void clear_time_since_last_optimize_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 time_since_last_optimize_ms() const;
  void set_time_since_last_optimize_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:icing.lib.OptimizeStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_store_optimize_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_restoration_latency_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_original_documents_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_deleted_documents_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_expired_documents_;
  ::PROTOBUF_NAMESPACE_ID::int64 storage_size_before_;
  ::PROTOBUF_NAMESPACE_ID::int64 storage_size_after_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_since_last_optimize_ms_;
  friend struct ::TableStruct_icing_2fproto_2foptimize_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptimizeResultProto

// optional .icing.lib.StatusProto status = 1;
inline bool OptimizeResultProto::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::icing::lib::StatusProto& OptimizeResultProto::status() const {
  const ::icing::lib::StatusProto* p = status_;
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeResultProto.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::StatusProto*>(
      &::icing::lib::_StatusProto_default_instance_);
}
inline ::icing::lib::StatusProto* OptimizeResultProto::release_status() {
  // @@protoc_insertion_point(field_release:icing.lib.OptimizeResultProto.status)
  _has_bits_[0] &= ~0x00000001u;
  ::icing::lib::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::icing::lib::StatusProto* OptimizeResultProto::mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::StatusProto>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.OptimizeResultProto.status)
  return status_;
}
inline void OptimizeResultProto::set_allocated_status(::icing::lib::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.OptimizeResultProto.status)
}

// optional .icing.lib.OptimizeStatsProto optimize_stats = 2;
inline bool OptimizeResultProto::has_optimize_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizeResultProto::clear_optimize_stats() {
  if (optimize_stats_ != nullptr) optimize_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::icing::lib::OptimizeStatsProto& OptimizeResultProto::optimize_stats() const {
  const ::icing::lib::OptimizeStatsProto* p = optimize_stats_;
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeResultProto.optimize_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::OptimizeStatsProto*>(
      &::icing::lib::_OptimizeStatsProto_default_instance_);
}
inline ::icing::lib::OptimizeStatsProto* OptimizeResultProto::release_optimize_stats() {
  // @@protoc_insertion_point(field_release:icing.lib.OptimizeResultProto.optimize_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::icing::lib::OptimizeStatsProto* temp = optimize_stats_;
  optimize_stats_ = nullptr;
  return temp;
}
inline ::icing::lib::OptimizeStatsProto* OptimizeResultProto::mutable_optimize_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (optimize_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::OptimizeStatsProto>(GetArenaNoVirtual());
    optimize_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.OptimizeResultProto.optimize_stats)
  return optimize_stats_;
}
inline void OptimizeResultProto::set_allocated_optimize_stats(::icing::lib::OptimizeStatsProto* optimize_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete optimize_stats_;
  }
  if (optimize_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optimize_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimize_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  optimize_stats_ = optimize_stats;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.OptimizeResultProto.optimize_stats)
}

// -------------------------------------------------------------------

// GetOptimizeInfoResultProto

// optional .icing.lib.StatusProto status = 1;
inline bool GetOptimizeInfoResultProto::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::icing::lib::StatusProto& GetOptimizeInfoResultProto::status() const {
  const ::icing::lib::StatusProto* p = status_;
  // @@protoc_insertion_point(field_get:icing.lib.GetOptimizeInfoResultProto.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::StatusProto*>(
      &::icing::lib::_StatusProto_default_instance_);
}
inline ::icing::lib::StatusProto* GetOptimizeInfoResultProto::release_status() {
  // @@protoc_insertion_point(field_release:icing.lib.GetOptimizeInfoResultProto.status)
  _has_bits_[0] &= ~0x00000001u;
  ::icing::lib::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::icing::lib::StatusProto* GetOptimizeInfoResultProto::mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::StatusProto>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.GetOptimizeInfoResultProto.status)
  return status_;
}
inline void GetOptimizeInfoResultProto::set_allocated_status(::icing::lib::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.GetOptimizeInfoResultProto.status)
}

// optional int64 optimizable_docs = 2;
inline bool GetOptimizeInfoResultProto::has_optimizable_docs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOptimizeInfoResultProto::clear_optimizable_docs() {
  optimizable_docs_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOptimizeInfoResultProto::optimizable_docs() const {
  // @@protoc_insertion_point(field_get:icing.lib.GetOptimizeInfoResultProto.optimizable_docs)
  return optimizable_docs_;
}
inline void GetOptimizeInfoResultProto::set_optimizable_docs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  optimizable_docs_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.GetOptimizeInfoResultProto.optimizable_docs)
}

// optional int64 estimated_optimizable_bytes = 3;
inline bool GetOptimizeInfoResultProto::has_estimated_optimizable_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetOptimizeInfoResultProto::clear_estimated_optimizable_bytes() {
  estimated_optimizable_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOptimizeInfoResultProto::estimated_optimizable_bytes() const {
  // @@protoc_insertion_point(field_get:icing.lib.GetOptimizeInfoResultProto.estimated_optimizable_bytes)
  return estimated_optimizable_bytes_;
}
inline void GetOptimizeInfoResultProto::set_estimated_optimizable_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  estimated_optimizable_bytes_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.GetOptimizeInfoResultProto.estimated_optimizable_bytes)
}

// optional int64 time_since_last_optimize_ms = 4;
inline bool GetOptimizeInfoResultProto::has_time_since_last_optimize_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetOptimizeInfoResultProto::clear_time_since_last_optimize_ms() {
  time_since_last_optimize_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOptimizeInfoResultProto::time_since_last_optimize_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.GetOptimizeInfoResultProto.time_since_last_optimize_ms)
  return time_since_last_optimize_ms_;
}
inline void GetOptimizeInfoResultProto::set_time_since_last_optimize_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_since_last_optimize_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.GetOptimizeInfoResultProto.time_since_last_optimize_ms)
}

// -------------------------------------------------------------------

// OptimizeStatsProto

// optional int32 latency_ms = 1;
inline bool OptimizeStatsProto::has_latency_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptimizeStatsProto::clear_latency_ms() {
  latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.latency_ms)
  return latency_ms_;
}
inline void OptimizeStatsProto::set_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.latency_ms)
}

// optional int32 document_store_optimize_latency_ms = 2;
inline bool OptimizeStatsProto::has_document_store_optimize_latency_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptimizeStatsProto::clear_document_store_optimize_latency_ms() {
  document_store_optimize_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::document_store_optimize_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.document_store_optimize_latency_ms)
  return document_store_optimize_latency_ms_;
}
inline void OptimizeStatsProto::set_document_store_optimize_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  document_store_optimize_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.document_store_optimize_latency_ms)
}

// optional int32 index_restoration_latency_ms = 3;
inline bool OptimizeStatsProto::has_index_restoration_latency_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OptimizeStatsProto::clear_index_restoration_latency_ms() {
  index_restoration_latency_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::index_restoration_latency_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.index_restoration_latency_ms)
  return index_restoration_latency_ms_;
}
inline void OptimizeStatsProto::set_index_restoration_latency_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_restoration_latency_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.index_restoration_latency_ms)
}

// optional int32 num_original_documents = 4;
inline bool OptimizeStatsProto::has_num_original_documents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OptimizeStatsProto::clear_num_original_documents() {
  num_original_documents_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::num_original_documents() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.num_original_documents)
  return num_original_documents_;
}
inline void OptimizeStatsProto::set_num_original_documents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_original_documents_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.num_original_documents)
}

// optional int32 num_deleted_documents = 5;
inline bool OptimizeStatsProto::has_num_deleted_documents() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OptimizeStatsProto::clear_num_deleted_documents() {
  num_deleted_documents_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::num_deleted_documents() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.num_deleted_documents)
  return num_deleted_documents_;
}
inline void OptimizeStatsProto::set_num_deleted_documents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_deleted_documents_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.num_deleted_documents)
}

// optional int32 num_expired_documents = 6;
inline bool OptimizeStatsProto::has_num_expired_documents() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OptimizeStatsProto::clear_num_expired_documents() {
  num_expired_documents_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptimizeStatsProto::num_expired_documents() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.num_expired_documents)
  return num_expired_documents_;
}
inline void OptimizeStatsProto::set_num_expired_documents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_expired_documents_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.num_expired_documents)
}

// optional int64 storage_size_before = 7;
inline bool OptimizeStatsProto::has_storage_size_before() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OptimizeStatsProto::clear_storage_size_before() {
  storage_size_before_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OptimizeStatsProto::storage_size_before() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.storage_size_before)
  return storage_size_before_;
}
inline void OptimizeStatsProto::set_storage_size_before(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  storage_size_before_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.storage_size_before)
}

// optional int64 storage_size_after = 8;
inline bool OptimizeStatsProto::has_storage_size_after() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OptimizeStatsProto::clear_storage_size_after() {
  storage_size_after_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OptimizeStatsProto::storage_size_after() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.storage_size_after)
  return storage_size_after_;
}
inline void OptimizeStatsProto::set_storage_size_after(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  storage_size_after_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.storage_size_after)
}

// optional int64 time_since_last_optimize_ms = 9;
inline bool OptimizeStatsProto::has_time_since_last_optimize_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OptimizeStatsProto::clear_time_since_last_optimize_ms() {
  time_since_last_optimize_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OptimizeStatsProto::time_since_last_optimize_ms() const {
  // @@protoc_insertion_point(field_get:icing.lib.OptimizeStatsProto.time_since_last_optimize_ms)
  return time_since_last_optimize_ms_;
}
inline void OptimizeStatsProto::set_time_since_last_optimize_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  time_since_last_optimize_ms_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.OptimizeStatsProto.time_since_last_optimize_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2foptimize_2eproto
