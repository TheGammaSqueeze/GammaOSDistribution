// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class StatusProto;
class StatusProtoDefaultTypeInternal;
extern StatusProtoDefaultTypeInternal _StatusProto_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::StatusProto* Arena::CreateMaybeMessage<::icing::lib::StatusProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

enum StatusProto_Code : int {
  StatusProto_Code_UNKNOWN = 0,
  StatusProto_Code_OK = 1,
  StatusProto_Code_WARNING_DATA_LOSS = 2,
  StatusProto_Code_INVALID_ARGUMENT = 3,
  StatusProto_Code_NOT_FOUND = 4,
  StatusProto_Code_FAILED_PRECONDITION = 5,
  StatusProto_Code_ABORTED = 6,
  StatusProto_Code_INTERNAL = 7,
  StatusProto_Code_OUT_OF_SPACE = 8,
  StatusProto_Code_ALREADY_EXISTS = 9
};
bool StatusProto_Code_IsValid(int value);
constexpr StatusProto_Code StatusProto_Code_Code_MIN = StatusProto_Code_UNKNOWN;
constexpr StatusProto_Code StatusProto_Code_Code_MAX = StatusProto_Code_ALREADY_EXISTS;
constexpr int StatusProto_Code_Code_ARRAYSIZE = StatusProto_Code_Code_MAX + 1;

const std::string& StatusProto_Code_Name(StatusProto_Code value);
template<typename T>
inline const std::string& StatusProto_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusProto_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusProto_Code_Name.");
  return StatusProto_Code_Name(static_cast<StatusProto_Code>(enum_t_value));
}
bool StatusProto_Code_Parse(
    const std::string& name, StatusProto_Code* value);
// ===================================================================

class StatusProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.StatusProto) */ {
 public:
  StatusProto();
  virtual ~StatusProto();

  StatusProto(const StatusProto& from);
  StatusProto(StatusProto&& from) noexcept
    : StatusProto() {
    *this = ::std::move(from);
  }

  inline StatusProto& operator=(const StatusProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusProto& operator=(StatusProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StatusProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusProto* internal_default_instance() {
    return reinterpret_cast<const StatusProto*>(
               &_StatusProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusProto& a, StatusProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusProto* New() const final {
    return CreateMaybeMessage<StatusProto>(nullptr);
  }

  StatusProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StatusProto& from);
  void MergeFrom(const StatusProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatusProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.StatusProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StatusProto_Code Code;
  static constexpr Code UNKNOWN =
    StatusProto_Code_UNKNOWN;
  static constexpr Code OK =
    StatusProto_Code_OK;
  static constexpr Code WARNING_DATA_LOSS =
    StatusProto_Code_WARNING_DATA_LOSS;
  static constexpr Code INVALID_ARGUMENT =
    StatusProto_Code_INVALID_ARGUMENT;
  static constexpr Code NOT_FOUND =
    StatusProto_Code_NOT_FOUND;
  static constexpr Code FAILED_PRECONDITION =
    StatusProto_Code_FAILED_PRECONDITION;
  static constexpr Code ABORTED =
    StatusProto_Code_ABORTED;
  static constexpr Code INTERNAL =
    StatusProto_Code_INTERNAL;
  static constexpr Code OUT_OF_SPACE =
    StatusProto_Code_OUT_OF_SPACE;
  static constexpr Code ALREADY_EXISTS =
    StatusProto_Code_ALREADY_EXISTS;
  static inline bool Code_IsValid(int value) {
    return StatusProto_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    StatusProto_Code_Code_MIN;
  static constexpr Code Code_MAX =
    StatusProto_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    StatusProto_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return StatusProto_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(const std::string& name,
      Code* value) {
    return StatusProto_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // optional .icing.lib.StatusProto.Code code = 1;
  bool has_code() const;
  void clear_code();
  ::icing::lib::StatusProto_Code code() const;
  void set_code(::icing::lib::StatusProto_Code value);

  // @@protoc_insertion_point(class_scope:icing.lib.StatusProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  friend struct ::TableStruct_icing_2fproto_2fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusProto

// optional .icing.lib.StatusProto.Code code = 1;
inline bool StatusProto::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusProto::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::icing::lib::StatusProto_Code StatusProto::code() const {
  // @@protoc_insertion_point(field_get:icing.lib.StatusProto.code)
  return static_cast< ::icing::lib::StatusProto_Code >(code_);
}
inline void StatusProto::set_code(::icing::lib::StatusProto_Code value) {
  assert(::icing::lib::StatusProto_Code_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.StatusProto.code)
}

// optional string message = 2;
inline bool StatusProto::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusProto::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StatusProto::message() const {
  // @@protoc_insertion_point(field_get:icing.lib.StatusProto.message)
  return message_.GetNoArena();
}
inline void StatusProto::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:icing.lib.StatusProto.message)
}
inline void StatusProto::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:icing.lib.StatusProto.message)
}
inline void StatusProto::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:icing.lib.StatusProto.message)
}
inline void StatusProto::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:icing.lib.StatusProto.message)
}
inline std::string* StatusProto::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:icing.lib.StatusProto.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatusProto::release_message() {
  // @@protoc_insertion_point(field_release:icing.lib.StatusProto.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatusProto::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:icing.lib.StatusProto.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::icing::lib::StatusProto_Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2fstatus_2eproto
