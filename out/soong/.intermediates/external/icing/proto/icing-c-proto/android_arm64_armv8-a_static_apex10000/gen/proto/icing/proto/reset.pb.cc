// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/reset.proto

#include "icing/proto/reset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusProto_icing_2fproto_2fstatus_2eproto;
namespace icing {
namespace lib {
class ResetResultProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetResultProto> _instance;
} _ResetResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_ResetResultProto_icing_2fproto_2freset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_ResetResultProto_default_instance_;
    new (ptr) ::icing::lib::ResetResultProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::ResetResultProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetResultProto_icing_2fproto_2freset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResetResultProto_icing_2fproto_2freset_2eproto}, {
      &scc_info_StatusProto_icing_2fproto_2fstatus_2eproto.base,}};

namespace icing {
namespace lib {

// ===================================================================

void ResetResultProto::InitAsDefaultInstance() {
  ::icing::lib::_ResetResultProto_default_instance_._instance.get_mutable()->status_ = const_cast< ::icing::lib::StatusProto*>(
      ::icing::lib::StatusProto::internal_default_instance());
}
class ResetResultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResetResultProto>()._has_bits_);
  static const ::icing::lib::StatusProto& status(const ResetResultProto* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::icing::lib::StatusProto&
ResetResultProto::_Internal::status(const ResetResultProto* msg) {
  return *msg->status_;
}
void ResetResultProto::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResetResultProto::ResetResultProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.ResetResultProto)
}
ResetResultProto::ResetResultProto(const ResetResultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::icing::lib::StatusProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:icing.lib.ResetResultProto)
}

void ResetResultProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetResultProto_icing_2fproto_2freset_2eproto.base);
  status_ = nullptr;
}

ResetResultProto::~ResetResultProto() {
  // @@protoc_insertion_point(destructor:icing.lib.ResetResultProto)
  SharedDtor();
}

void ResetResultProto::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ResetResultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetResultProto& ResetResultProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetResultProto_icing_2fproto_2freset_2eproto.base);
  return *internal_default_instance();
}


void ResetResultProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.ResetResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResetResultProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .icing.lib.StatusProto status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResetResultProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.ResetResultProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .icing.lib.StatusProto status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.ResetResultProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.ResetResultProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResetResultProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.ResetResultProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .icing.lib.StatusProto status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::status(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.ResetResultProto)
}

size_t ResetResultProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.ResetResultProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .icing.lib.StatusProto status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetResultProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResetResultProto*>(
      &from));
}

void ResetResultProto::MergeFrom(const ResetResultProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.ResetResultProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::icing::lib::StatusProto::MergeFrom(from.status());
  }
}

void ResetResultProto::CopyFrom(const ResetResultProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.ResetResultProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResultProto::IsInitialized() const {
  return true;
}

void ResetResultProto::InternalSwap(ResetResultProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

std::string ResetResultProto::GetTypeName() const {
  return "icing.lib.ResetResultProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::ResetResultProto* Arena::CreateMaybeMessage< ::icing::lib::ResetResultProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::ResetResultProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
