// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/initialize.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2finitialize_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2finitialize_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "icing/proto/logging.pb.h"
#include "icing/proto/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2finitialize_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_icing_2fproto_2finitialize_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace icing {
namespace lib {
class IcingSearchEngineOptions;
class IcingSearchEngineOptionsDefaultTypeInternal;
extern IcingSearchEngineOptionsDefaultTypeInternal _IcingSearchEngineOptions_default_instance_;
class InitializeResultProto;
class InitializeResultProtoDefaultTypeInternal;
extern InitializeResultProtoDefaultTypeInternal _InitializeResultProto_default_instance_;
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> ::icing::lib::IcingSearchEngineOptions* Arena::CreateMaybeMessage<::icing::lib::IcingSearchEngineOptions>(Arena*);
template<> ::icing::lib::InitializeResultProto* Arena::CreateMaybeMessage<::icing::lib::InitializeResultProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace icing {
namespace lib {

// ===================================================================

class IcingSearchEngineOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.IcingSearchEngineOptions) */ {
 public:
  IcingSearchEngineOptions();
  virtual ~IcingSearchEngineOptions();

  IcingSearchEngineOptions(const IcingSearchEngineOptions& from);
  IcingSearchEngineOptions(IcingSearchEngineOptions&& from) noexcept
    : IcingSearchEngineOptions() {
    *this = ::std::move(from);
  }

  inline IcingSearchEngineOptions& operator=(const IcingSearchEngineOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline IcingSearchEngineOptions& operator=(IcingSearchEngineOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IcingSearchEngineOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IcingSearchEngineOptions* internal_default_instance() {
    return reinterpret_cast<const IcingSearchEngineOptions*>(
               &_IcingSearchEngineOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IcingSearchEngineOptions& a, IcingSearchEngineOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(IcingSearchEngineOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IcingSearchEngineOptions* New() const final {
    return CreateMaybeMessage<IcingSearchEngineOptions>(nullptr);
  }

  IcingSearchEngineOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IcingSearchEngineOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IcingSearchEngineOptions& from);
  void MergeFrom(const IcingSearchEngineOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IcingSearchEngineOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.IcingSearchEngineOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDirFieldNumber = 1,
    kIndexMergeSizeFieldNumber = 4,
    kMaxTokensPerDocFieldNumber = 2,
    kMaxTokenLengthFieldNumber = 3,
  };
  // optional string base_dir = 1;
  bool has_base_dir() const;
  void clear_base_dir();
  const std::string& base_dir() const;
  void set_base_dir(const std::string& value);
  void set_base_dir(std::string&& value);
  void set_base_dir(const char* value);
  void set_base_dir(const char* value, size_t size);
  std::string* mutable_base_dir();
  std::string* release_base_dir();
  void set_allocated_base_dir(std::string* base_dir);

  // optional int32 index_merge_size = 4 [default = 1048576];
  bool has_index_merge_size() const;
  void clear_index_merge_size();
  ::PROTOBUF_NAMESPACE_ID::int32 index_merge_size() const;
  void set_index_merge_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_tokens_per_doc = 2 [default = 13107];
  bool has_max_tokens_per_doc() const;
  void clear_max_tokens_per_doc();
  ::PROTOBUF_NAMESPACE_ID::int32 max_tokens_per_doc() const;
  void set_max_tokens_per_doc(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_token_length = 3 [default = 30];
  bool has_max_token_length() const;
  void clear_max_token_length();
  ::PROTOBUF_NAMESPACE_ID::int32 max_token_length() const;
  void set_max_token_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:icing.lib.IcingSearchEngineOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_merge_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_tokens_per_doc_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_token_length_;
  friend struct ::TableStruct_icing_2fproto_2finitialize_2eproto;
};
// -------------------------------------------------------------------

class InitializeResultProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:icing.lib.InitializeResultProto) */ {
 public:
  InitializeResultProto();
  virtual ~InitializeResultProto();

  InitializeResultProto(const InitializeResultProto& from);
  InitializeResultProto(InitializeResultProto&& from) noexcept
    : InitializeResultProto() {
    *this = ::std::move(from);
  }

  inline InitializeResultProto& operator=(const InitializeResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeResultProto& operator=(InitializeResultProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InitializeResultProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitializeResultProto* internal_default_instance() {
    return reinterpret_cast<const InitializeResultProto*>(
               &_InitializeResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitializeResultProto& a, InitializeResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeResultProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializeResultProto* New() const final {
    return CreateMaybeMessage<InitializeResultProto>(nullptr);
  }

  InitializeResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializeResultProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InitializeResultProto& from);
  void MergeFrom(const InitializeResultProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitializeResultProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "icing.lib.InitializeResultProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kInitializeStatsFieldNumber = 2,
  };
  // optional .icing.lib.StatusProto status = 1;
  bool has_status() const;
  void clear_status();
  const ::icing::lib::StatusProto& status() const;
  ::icing::lib::StatusProto* release_status();
  ::icing::lib::StatusProto* mutable_status();
  void set_allocated_status(::icing::lib::StatusProto* status);

  // optional .icing.lib.InitializeStatsProto initialize_stats = 2;
  bool has_initialize_stats() const;
  void clear_initialize_stats();
  const ::icing::lib::InitializeStatsProto& initialize_stats() const;
  ::icing::lib::InitializeStatsProto* release_initialize_stats();
  ::icing::lib::InitializeStatsProto* mutable_initialize_stats();
  void set_allocated_initialize_stats(::icing::lib::InitializeStatsProto* initialize_stats);

  // @@protoc_insertion_point(class_scope:icing.lib.InitializeResultProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::icing::lib::StatusProto* status_;
  ::icing::lib::InitializeStatsProto* initialize_stats_;
  friend struct ::TableStruct_icing_2fproto_2finitialize_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IcingSearchEngineOptions

// optional string base_dir = 1;
inline bool IcingSearchEngineOptions::has_base_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IcingSearchEngineOptions::clear_base_dir() {
  base_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IcingSearchEngineOptions::base_dir() const {
  // @@protoc_insertion_point(field_get:icing.lib.IcingSearchEngineOptions.base_dir)
  return base_dir_.GetNoArena();
}
inline void IcingSearchEngineOptions::set_base_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:icing.lib.IcingSearchEngineOptions.base_dir)
}
inline void IcingSearchEngineOptions::set_base_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:icing.lib.IcingSearchEngineOptions.base_dir)
}
inline void IcingSearchEngineOptions::set_base_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:icing.lib.IcingSearchEngineOptions.base_dir)
}
inline void IcingSearchEngineOptions::set_base_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:icing.lib.IcingSearchEngineOptions.base_dir)
}
inline std::string* IcingSearchEngineOptions::mutable_base_dir() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:icing.lib.IcingSearchEngineOptions.base_dir)
  return base_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IcingSearchEngineOptions::release_base_dir() {
  // @@protoc_insertion_point(field_release:icing.lib.IcingSearchEngineOptions.base_dir)
  if (!has_base_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IcingSearchEngineOptions::set_allocated_base_dir(std::string* base_dir) {
  if (base_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_dir);
  // @@protoc_insertion_point(field_set_allocated:icing.lib.IcingSearchEngineOptions.base_dir)
}

// optional int32 max_tokens_per_doc = 2 [default = 13107];
inline bool IcingSearchEngineOptions::has_max_tokens_per_doc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IcingSearchEngineOptions::clear_max_tokens_per_doc() {
  max_tokens_per_doc_ = 13107;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IcingSearchEngineOptions::max_tokens_per_doc() const {
  // @@protoc_insertion_point(field_get:icing.lib.IcingSearchEngineOptions.max_tokens_per_doc)
  return max_tokens_per_doc_;
}
inline void IcingSearchEngineOptions::set_max_tokens_per_doc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_tokens_per_doc_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.IcingSearchEngineOptions.max_tokens_per_doc)
}

// optional int32 max_token_length = 3 [default = 30];
inline bool IcingSearchEngineOptions::has_max_token_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IcingSearchEngineOptions::clear_max_token_length() {
  max_token_length_ = 30;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IcingSearchEngineOptions::max_token_length() const {
  // @@protoc_insertion_point(field_get:icing.lib.IcingSearchEngineOptions.max_token_length)
  return max_token_length_;
}
inline void IcingSearchEngineOptions::set_max_token_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_token_length_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.IcingSearchEngineOptions.max_token_length)
}

// optional int32 index_merge_size = 4 [default = 1048576];
inline bool IcingSearchEngineOptions::has_index_merge_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IcingSearchEngineOptions::clear_index_merge_size() {
  index_merge_size_ = 1048576;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IcingSearchEngineOptions::index_merge_size() const {
  // @@protoc_insertion_point(field_get:icing.lib.IcingSearchEngineOptions.index_merge_size)
  return index_merge_size_;
}
inline void IcingSearchEngineOptions::set_index_merge_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_merge_size_ = value;
  // @@protoc_insertion_point(field_set:icing.lib.IcingSearchEngineOptions.index_merge_size)
}

// -------------------------------------------------------------------

// InitializeResultProto

// optional .icing.lib.StatusProto status = 1;
inline bool InitializeResultProto::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::icing::lib::StatusProto& InitializeResultProto::status() const {
  const ::icing::lib::StatusProto* p = status_;
  // @@protoc_insertion_point(field_get:icing.lib.InitializeResultProto.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::StatusProto*>(
      &::icing::lib::_StatusProto_default_instance_);
}
inline ::icing::lib::StatusProto* InitializeResultProto::release_status() {
  // @@protoc_insertion_point(field_release:icing.lib.InitializeResultProto.status)
  _has_bits_[0] &= ~0x00000001u;
  ::icing::lib::StatusProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::icing::lib::StatusProto* InitializeResultProto::mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::StatusProto>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.InitializeResultProto.status)
  return status_;
}
inline void InitializeResultProto::set_allocated_status(::icing::lib::StatusProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.InitializeResultProto.status)
}

// optional .icing.lib.InitializeStatsProto initialize_stats = 2;
inline bool InitializeResultProto::has_initialize_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::icing::lib::InitializeStatsProto& InitializeResultProto::initialize_stats() const {
  const ::icing::lib::InitializeStatsProto* p = initialize_stats_;
  // @@protoc_insertion_point(field_get:icing.lib.InitializeResultProto.initialize_stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::icing::lib::InitializeStatsProto*>(
      &::icing::lib::_InitializeStatsProto_default_instance_);
}
inline ::icing::lib::InitializeStatsProto* InitializeResultProto::release_initialize_stats() {
  // @@protoc_insertion_point(field_release:icing.lib.InitializeResultProto.initialize_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::icing::lib::InitializeStatsProto* temp = initialize_stats_;
  initialize_stats_ = nullptr;
  return temp;
}
inline ::icing::lib::InitializeStatsProto* InitializeResultProto::mutable_initialize_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (initialize_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::icing::lib::InitializeStatsProto>(GetArenaNoVirtual());
    initialize_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:icing.lib.InitializeResultProto.initialize_stats)
  return initialize_stats_;
}
inline void InitializeResultProto::set_allocated_initialize_stats(::icing::lib::InitializeStatsProto* initialize_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialize_stats_);
  }
  if (initialize_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initialize_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialize_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  initialize_stats_ = initialize_stats;
  // @@protoc_insertion_point(field_set_allocated:icing.lib.InitializeResultProto.initialize_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lib
}  // namespace icing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_icing_2fproto_2finitialize_2eproto
