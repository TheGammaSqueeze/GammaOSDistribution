// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icing/proto/logging.proto

#include "icing/proto/logging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_icing_2fproto_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto;
namespace icing {
namespace lib {
class InitializeStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitializeStatsProto> _instance;
} _InitializeStatsProto_default_instance_;
class PutDocumentStatsProto_TokenizationStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutDocumentStatsProto_TokenizationStats> _instance;
} _PutDocumentStatsProto_TokenizationStats_default_instance_;
class PutDocumentStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutDocumentStatsProto> _instance;
} _PutDocumentStatsProto_default_instance_;
class QueryStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryStatsProto> _instance;
} _QueryStatsProto_default_instance_;
class DeleteStatsProto_DeleteTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStatsProto_DeleteType> _instance;
} _DeleteStatsProto_DeleteType_default_instance_;
class DeleteStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStatsProto> _instance;
} _DeleteStatsProto_default_instance_;
class DeleteByQueryStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteByQueryStatsProto> _instance;
} _DeleteByQueryStatsProto_default_instance_;
}  // namespace lib
}  // namespace icing
static void InitDefaultsscc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteByQueryStatsProto_default_instance_;
    new (ptr) ::icing::lib::DeleteByQueryStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteByQueryStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteStatsProto_default_instance_;
    new (ptr) ::icing::lib::DeleteStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStatsProto_DeleteType_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_DeleteStatsProto_DeleteType_default_instance_;
    new (ptr) ::icing::lib::DeleteStatsProto_DeleteType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::DeleteStatsProto_DeleteType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStatsProto_DeleteType_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteStatsProto_DeleteType_icing_2fproto_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_InitializeStatsProto_default_instance_;
    new (ptr) ::icing::lib::InitializeStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::InitializeStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PutDocumentStatsProto_default_instance_;
    new (ptr) ::icing::lib::PutDocumentStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PutDocumentStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto}, {
      &scc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_PutDocumentStatsProto_TokenizationStats_default_instance_;
    new (ptr) ::icing::lib::PutDocumentStatsProto_TokenizationStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::PutDocumentStatsProto_TokenizationStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::icing::lib::_QueryStatsProto_default_instance_;
    new (ptr) ::icing::lib::QueryStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::icing::lib::QueryStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto}, {}};

namespace icing {
namespace lib {
bool InitializeStatsProto_RecoveryCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InitializeStatsProto_RecoveryCause_strings[5] = {};

static const char InitializeStatsProto_RecoveryCause_names[] =
  "DATA_LOSS"
  "INCONSISTENT_WITH_GROUND_TRUTH"
  "IO_ERROR"
  "NONE"
  "SCHEMA_CHANGES_OUT_OF_SYNC";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InitializeStatsProto_RecoveryCause_entries[] = {
  { {InitializeStatsProto_RecoveryCause_names + 0, 9}, 1 },
  { {InitializeStatsProto_RecoveryCause_names + 9, 30}, 2 },
  { {InitializeStatsProto_RecoveryCause_names + 39, 8}, 4 },
  { {InitializeStatsProto_RecoveryCause_names + 47, 4}, 0 },
  { {InitializeStatsProto_RecoveryCause_names + 51, 26}, 3 },
};

static const int InitializeStatsProto_RecoveryCause_entries_by_number[] = {
  3, // 0 -> NONE
  0, // 1 -> DATA_LOSS
  1, // 2 -> INCONSISTENT_WITH_GROUND_TRUTH
  4, // 3 -> SCHEMA_CHANGES_OUT_OF_SYNC
  2, // 4 -> IO_ERROR
};

const std::string& InitializeStatsProto_RecoveryCause_Name(
    InitializeStatsProto_RecoveryCause value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InitializeStatsProto_RecoveryCause_entries,
          InitializeStatsProto_RecoveryCause_entries_by_number,
          5, InitializeStatsProto_RecoveryCause_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InitializeStatsProto_RecoveryCause_entries,
      InitializeStatsProto_RecoveryCause_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InitializeStatsProto_RecoveryCause_strings[idx].get();
}
bool InitializeStatsProto_RecoveryCause_Parse(
    const std::string& name, InitializeStatsProto_RecoveryCause* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InitializeStatsProto_RecoveryCause_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<InitializeStatsProto_RecoveryCause>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::NONE;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::DATA_LOSS;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::INCONSISTENT_WITH_GROUND_TRUTH;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::SCHEMA_CHANGES_OUT_OF_SYNC;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::IO_ERROR;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::RecoveryCause_MIN;
constexpr InitializeStatsProto_RecoveryCause InitializeStatsProto::RecoveryCause_MAX;
constexpr int InitializeStatsProto::RecoveryCause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool InitializeStatsProto_DocumentStoreDataStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InitializeStatsProto_DocumentStoreDataStatus_strings[3] = {};

static const char InitializeStatsProto_DocumentStoreDataStatus_names[] =
  "COMPLETE_LOSS"
  "NO_DATA_LOSS"
  "PARTIAL_LOSS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InitializeStatsProto_DocumentStoreDataStatus_entries[] = {
  { {InitializeStatsProto_DocumentStoreDataStatus_names + 0, 13}, 2 },
  { {InitializeStatsProto_DocumentStoreDataStatus_names + 13, 12}, 0 },
  { {InitializeStatsProto_DocumentStoreDataStatus_names + 25, 12}, 1 },
};

static const int InitializeStatsProto_DocumentStoreDataStatus_entries_by_number[] = {
  1, // 0 -> NO_DATA_LOSS
  2, // 1 -> PARTIAL_LOSS
  0, // 2 -> COMPLETE_LOSS
};

const std::string& InitializeStatsProto_DocumentStoreDataStatus_Name(
    InitializeStatsProto_DocumentStoreDataStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InitializeStatsProto_DocumentStoreDataStatus_entries,
          InitializeStatsProto_DocumentStoreDataStatus_entries_by_number,
          3, InitializeStatsProto_DocumentStoreDataStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InitializeStatsProto_DocumentStoreDataStatus_entries,
      InitializeStatsProto_DocumentStoreDataStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InitializeStatsProto_DocumentStoreDataStatus_strings[idx].get();
}
bool InitializeStatsProto_DocumentStoreDataStatus_Parse(
    const std::string& name, InitializeStatsProto_DocumentStoreDataStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InitializeStatsProto_DocumentStoreDataStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<InitializeStatsProto_DocumentStoreDataStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::NO_DATA_LOSS;
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::PARTIAL_LOSS;
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::COMPLETE_LOSS;
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::DocumentStoreDataStatus_MIN;
constexpr InitializeStatsProto_DocumentStoreDataStatus InitializeStatsProto::DocumentStoreDataStatus_MAX;
constexpr int InitializeStatsProto::DocumentStoreDataStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DeleteStatsProto_DeleteType_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeleteStatsProto_DeleteType_Code_strings[5] = {};

static const char DeleteStatsProto_DeleteType_Code_names[] =
  "DEPRECATED_QUERY"
  "NAMESPACE"
  "SCHEMA_TYPE"
  "SINGLE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeleteStatsProto_DeleteType_Code_entries[] = {
  { {DeleteStatsProto_DeleteType_Code_names + 0, 16}, 2 },
  { {DeleteStatsProto_DeleteType_Code_names + 16, 9}, 3 },
  { {DeleteStatsProto_DeleteType_Code_names + 25, 11}, 4 },
  { {DeleteStatsProto_DeleteType_Code_names + 36, 6}, 1 },
  { {DeleteStatsProto_DeleteType_Code_names + 42, 7}, 0 },
};

static const int DeleteStatsProto_DeleteType_Code_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  3, // 1 -> SINGLE
  0, // 2 -> DEPRECATED_QUERY
  1, // 3 -> NAMESPACE
  2, // 4 -> SCHEMA_TYPE
};

const std::string& DeleteStatsProto_DeleteType_Code_Name(
    DeleteStatsProto_DeleteType_Code value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeleteStatsProto_DeleteType_Code_entries,
          DeleteStatsProto_DeleteType_Code_entries_by_number,
          5, DeleteStatsProto_DeleteType_Code_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeleteStatsProto_DeleteType_Code_entries,
      DeleteStatsProto_DeleteType_Code_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeleteStatsProto_DeleteType_Code_strings[idx].get();
}
bool DeleteStatsProto_DeleteType_Code_Parse(
    const std::string& name, DeleteStatsProto_DeleteType_Code* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeleteStatsProto_DeleteType_Code_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DeleteStatsProto_DeleteType_Code>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::UNKNOWN;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::SINGLE;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::DEPRECATED_QUERY;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::NAMESPACE;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::SCHEMA_TYPE;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::Code_MIN;
constexpr DeleteStatsProto_DeleteType_Code DeleteStatsProto_DeleteType::Code_MAX;
constexpr int DeleteStatsProto_DeleteType::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void InitializeStatsProto::InitAsDefaultInstance() {
}
class InitializeStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<InitializeStatsProto>()._has_bits_);
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_document_store_recovery_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index_restoration_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_schema_store_recovery_cause(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_document_store_recovery_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_index_restoration_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_schema_store_recovery_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_document_store_data_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_documents(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_schema_types(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

InitializeStatsProto::InitializeStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.InitializeStatsProto)
}
InitializeStatsProto::InitializeStatsProto(const InitializeStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_schema_types_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(num_schema_types_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.InitializeStatsProto)
}

void InitializeStatsProto::SharedCtor() {
  ::memset(&latency_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_schema_types_) -
      reinterpret_cast<char*>(&latency_ms_)) + sizeof(num_schema_types_));
}

InitializeStatsProto::~InitializeStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.InitializeStatsProto)
  SharedDtor();
}

void InitializeStatsProto::SharedDtor() {
}

void InitializeStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitializeStatsProto& InitializeStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitializeStatsProto_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void InitializeStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.InitializeStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&document_store_data_status_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_store_data_status_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&num_documents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_schema_types_) -
        reinterpret_cast<char*>(&num_documents_)) + sizeof(num_schema_types_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitializeStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 latency_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(val))) {
            set_document_store_recovery_cause(static_cast<::icing::lib::InitializeStatsProto_RecoveryCause>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(val))) {
            set_index_restoration_cause(static_cast<::icing::lib::InitializeStatsProto_RecoveryCause>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(val))) {
            set_schema_store_recovery_cause(static_cast<::icing::lib::InitializeStatsProto_RecoveryCause>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 document_store_recovery_latency_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_document_store_recovery_latency_ms(&has_bits);
          document_store_recovery_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index_restoration_latency_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_index_restoration_latency_ms(&has_bits);
          index_restoration_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 schema_store_recovery_latency_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_schema_store_recovery_latency_ms(&has_bits);
          schema_store_recovery_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::InitializeStatsProto_DocumentStoreDataStatus_IsValid(val))) {
            set_document_store_data_status(static_cast<::icing::lib::InitializeStatsProto_DocumentStoreDataStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_documents = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_num_documents(&has_bits);
          num_documents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_schema_types = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_schema_types(&has_bits);
          num_schema_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitializeStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.InitializeStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latency_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value)) {
            set_document_store_recovery_cause(static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value)) {
            set_index_restoration_cause(static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::InitializeStatsProto_RecoveryCause_IsValid(value)) {
            set_schema_store_recovery_cause(static_cast< ::icing::lib::InitializeStatsProto_RecoveryCause >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_store_recovery_latency_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_document_store_recovery_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_store_recovery_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_restoration_latency_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_index_restoration_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_restoration_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 schema_store_recovery_latency_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_schema_store_recovery_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_store_recovery_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::InitializeStatsProto_DocumentStoreDataStatus_IsValid(value)) {
            set_document_store_data_status(static_cast< ::icing::lib::InitializeStatsProto_DocumentStoreDataStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_documents = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_num_documents(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_documents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_schema_types = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_num_schema_types(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_schema_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.InitializeStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.InitializeStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitializeStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.InitializeStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 latency_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->latency_ms(), output);
  }

  // optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->document_store_recovery_cause(), output);
  }

  // optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->index_restoration_cause(), output);
  }

  // optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->schema_store_recovery_cause(), output);
  }

  // optional int32 document_store_recovery_latency_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->document_store_recovery_latency_ms(), output);
  }

  // optional int32 index_restoration_latency_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->index_restoration_latency_ms(), output);
  }

  // optional int32 schema_store_recovery_latency_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->schema_store_recovery_latency_ms(), output);
  }

  // optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->document_store_data_status(), output);
  }

  // optional int32 num_documents = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->num_documents(), output);
  }

  // optional int32 num_schema_types = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->num_schema_types(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.InitializeStatsProto)
}

size_t InitializeStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.InitializeStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 latency_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional .icing.lib.InitializeStatsProto.RecoveryCause document_store_recovery_cause = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->document_store_recovery_cause());
    }

    // optional .icing.lib.InitializeStatsProto.RecoveryCause index_restoration_cause = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->index_restoration_cause());
    }

    // optional .icing.lib.InitializeStatsProto.RecoveryCause schema_store_recovery_cause = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->schema_store_recovery_cause());
    }

    // optional int32 document_store_recovery_latency_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_store_recovery_latency_ms());
    }

    // optional int32 index_restoration_latency_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index_restoration_latency_ms());
    }

    // optional int32 schema_store_recovery_latency_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->schema_store_recovery_latency_ms());
    }

    // optional .icing.lib.InitializeStatsProto.DocumentStoreDataStatus document_store_data_status = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->document_store_data_status());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 num_documents = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_documents());
    }

    // optional int32 num_schema_types = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_schema_types());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitializeStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InitializeStatsProto*>(
      &from));
}

void InitializeStatsProto::MergeFrom(const InitializeStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.InitializeStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      document_store_recovery_cause_ = from.document_store_recovery_cause_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_restoration_cause_ = from.index_restoration_cause_;
    }
    if (cached_has_bits & 0x00000008u) {
      schema_store_recovery_cause_ = from.schema_store_recovery_cause_;
    }
    if (cached_has_bits & 0x00000010u) {
      document_store_recovery_latency_ms_ = from.document_store_recovery_latency_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      index_restoration_latency_ms_ = from.index_restoration_latency_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      schema_store_recovery_latency_ms_ = from.schema_store_recovery_latency_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      document_store_data_status_ = from.document_store_data_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      num_documents_ = from.num_documents_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_schema_types_ = from.num_schema_types_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitializeStatsProto::CopyFrom(const InitializeStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.InitializeStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeStatsProto::IsInitialized() const {
  return true;
}

void InitializeStatsProto::InternalSwap(InitializeStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latency_ms_, other->latency_ms_);
  swap(document_store_recovery_cause_, other->document_store_recovery_cause_);
  swap(index_restoration_cause_, other->index_restoration_cause_);
  swap(schema_store_recovery_cause_, other->schema_store_recovery_cause_);
  swap(document_store_recovery_latency_ms_, other->document_store_recovery_latency_ms_);
  swap(index_restoration_latency_ms_, other->index_restoration_latency_ms_);
  swap(schema_store_recovery_latency_ms_, other->schema_store_recovery_latency_ms_);
  swap(document_store_data_status_, other->document_store_data_status_);
  swap(num_documents_, other->num_documents_);
  swap(num_schema_types_, other->num_schema_types_);
}

std::string InitializeStatsProto::GetTypeName() const {
  return "icing.lib.InitializeStatsProto";
}


// ===================================================================

void PutDocumentStatsProto_TokenizationStats::InitAsDefaultInstance() {
}
class PutDocumentStatsProto_TokenizationStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PutDocumentStatsProto_TokenizationStats>()._has_bits_);
  static void set_has_exceeded_max_token_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_tokens_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PutDocumentStatsProto_TokenizationStats::PutDocumentStatsProto_TokenizationStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PutDocumentStatsProto.TokenizationStats)
}
PutDocumentStatsProto_TokenizationStats::PutDocumentStatsProto_TokenizationStats(const PutDocumentStatsProto_TokenizationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_tokens_indexed_, &from.num_tokens_indexed_,
    static_cast<size_t>(reinterpret_cast<char*>(&exceeded_max_token_num_) -
    reinterpret_cast<char*>(&num_tokens_indexed_)) + sizeof(exceeded_max_token_num_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.PutDocumentStatsProto.TokenizationStats)
}

void PutDocumentStatsProto_TokenizationStats::SharedCtor() {
  ::memset(&num_tokens_indexed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exceeded_max_token_num_) -
      reinterpret_cast<char*>(&num_tokens_indexed_)) + sizeof(exceeded_max_token_num_));
}

PutDocumentStatsProto_TokenizationStats::~PutDocumentStatsProto_TokenizationStats() {
  // @@protoc_insertion_point(destructor:icing.lib.PutDocumentStatsProto.TokenizationStats)
  SharedDtor();
}

void PutDocumentStatsProto_TokenizationStats::SharedDtor() {
}

void PutDocumentStatsProto_TokenizationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutDocumentStatsProto_TokenizationStats& PutDocumentStatsProto_TokenizationStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutDocumentStatsProto_TokenizationStats_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void PutDocumentStatsProto_TokenizationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_tokens_indexed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exceeded_max_token_num_) -
        reinterpret_cast<char*>(&num_tokens_indexed_)) + sizeof(exceeded_max_token_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutDocumentStatsProto_TokenizationStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_tokens_indexed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_tokens_indexed(&has_bits);
          num_tokens_indexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exceeded_max_token_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exceeded_max_token_num(&has_bits);
          exceeded_max_token_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutDocumentStatsProto_TokenizationStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_tokens_indexed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_tokens_indexed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tokens_indexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exceeded_max_token_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_exceeded_max_token_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exceeded_max_token_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PutDocumentStatsProto.TokenizationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PutDocumentStatsProto.TokenizationStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutDocumentStatsProto_TokenizationStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_tokens_indexed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_tokens_indexed(), output);
  }

  // optional bool exceeded_max_token_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->exceeded_max_token_num(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PutDocumentStatsProto.TokenizationStats)
}

size_t PutDocumentStatsProto_TokenizationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 num_tokens_indexed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_tokens_indexed());
    }

    // optional bool exceeded_max_token_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutDocumentStatsProto_TokenizationStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PutDocumentStatsProto_TokenizationStats*>(
      &from));
}

void PutDocumentStatsProto_TokenizationStats::MergeFrom(const PutDocumentStatsProto_TokenizationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_tokens_indexed_ = from.num_tokens_indexed_;
    }
    if (cached_has_bits & 0x00000002u) {
      exceeded_max_token_num_ = from.exceeded_max_token_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PutDocumentStatsProto_TokenizationStats::CopyFrom(const PutDocumentStatsProto_TokenizationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PutDocumentStatsProto.TokenizationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentStatsProto_TokenizationStats::IsInitialized() const {
  return true;
}

void PutDocumentStatsProto_TokenizationStats::InternalSwap(PutDocumentStatsProto_TokenizationStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_tokens_indexed_, other->num_tokens_indexed_);
  swap(exceeded_max_token_num_, other->exceeded_max_token_num_);
}

std::string PutDocumentStatsProto_TokenizationStats::GetTypeName() const {
  return "icing.lib.PutDocumentStatsProto.TokenizationStats";
}


// ===================================================================

void PutDocumentStatsProto::InitAsDefaultInstance() {
  ::icing::lib::_PutDocumentStatsProto_default_instance_._instance.get_mutable()->tokenization_stats_ = const_cast< ::icing::lib::PutDocumentStatsProto_TokenizationStats*>(
      ::icing::lib::PutDocumentStatsProto_TokenizationStats::internal_default_instance());
}
class PutDocumentStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PutDocumentStatsProto>()._has_bits_);
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_store_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index_merge_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_document_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::icing::lib::PutDocumentStatsProto_TokenizationStats& tokenization_stats(const PutDocumentStatsProto* msg);
  static void set_has_tokenization_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::icing::lib::PutDocumentStatsProto_TokenizationStats&
PutDocumentStatsProto::_Internal::tokenization_stats(const PutDocumentStatsProto* msg) {
  return *msg->tokenization_stats_;
}
PutDocumentStatsProto::PutDocumentStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.PutDocumentStatsProto)
}
PutDocumentStatsProto::PutDocumentStatsProto(const PutDocumentStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tokenization_stats()) {
    tokenization_stats_ = new ::icing::lib::PutDocumentStatsProto_TokenizationStats(*from.tokenization_stats_);
  } else {
    tokenization_stats_ = nullptr;
  }
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&document_size_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_size_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.PutDocumentStatsProto)
}

void PutDocumentStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto.base);
  ::memset(&tokenization_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&document_size_) -
      reinterpret_cast<char*>(&tokenization_stats_)) + sizeof(document_size_));
}

PutDocumentStatsProto::~PutDocumentStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.PutDocumentStatsProto)
  SharedDtor();
}

void PutDocumentStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete tokenization_stats_;
}

void PutDocumentStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutDocumentStatsProto& PutDocumentStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutDocumentStatsProto_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void PutDocumentStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.PutDocumentStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tokenization_stats_ != nullptr);
    tokenization_stats_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&document_size_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutDocumentStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 latency_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_store_latency_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_document_store_latency_ms(&has_bits);
          document_store_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index_latency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index_latency_ms(&has_bits);
          index_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 index_merge_latency_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_index_merge_latency_ms(&has_bits);
          index_merge_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_document_size(&has_bits);
          document_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_tokenization_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutDocumentStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.PutDocumentStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latency_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_store_latency_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_document_store_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_store_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_latency_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_index_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_merge_latency_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_index_merge_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_merge_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_document_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tokenization_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.PutDocumentStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.PutDocumentStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutDocumentStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.PutDocumentStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 latency_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->latency_ms(), output);
  }

  // optional int32 document_store_latency_ms = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->document_store_latency_ms(), output);
  }

  // optional int32 index_latency_ms = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->index_latency_ms(), output);
  }

  // optional int32 index_merge_latency_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->index_merge_latency_ms(), output);
  }

  // optional int32 document_size = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->document_size(), output);
  }

  // optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::tokenization_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.PutDocumentStatsProto)
}

size_t PutDocumentStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.PutDocumentStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .icing.lib.PutDocumentStatsProto.TokenizationStats tokenization_stats = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tokenization_stats_);
    }

    // optional int32 latency_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional int32 document_store_latency_ms = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_store_latency_ms());
    }

    // optional int32 index_latency_ms = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index_latency_ms());
    }

    // optional int32 index_merge_latency_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->index_merge_latency_ms());
    }

    // optional int32 document_size = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutDocumentStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PutDocumentStatsProto*>(
      &from));
}

void PutDocumentStatsProto::MergeFrom(const PutDocumentStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.PutDocumentStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tokenization_stats()->::icing::lib::PutDocumentStatsProto_TokenizationStats::MergeFrom(from.tokenization_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      document_store_latency_ms_ = from.document_store_latency_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_latency_ms_ = from.index_latency_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_merge_latency_ms_ = from.index_merge_latency_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      document_size_ = from.document_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PutDocumentStatsProto::CopyFrom(const PutDocumentStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.PutDocumentStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutDocumentStatsProto::IsInitialized() const {
  return true;
}

void PutDocumentStatsProto::InternalSwap(PutDocumentStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tokenization_stats_, other->tokenization_stats_);
  swap(latency_ms_, other->latency_ms_);
  swap(document_store_latency_ms_, other->document_store_latency_ms_);
  swap(index_latency_ms_, other->index_latency_ms_);
  swap(index_merge_latency_ms_, other->index_merge_latency_ms_);
  swap(document_size_, other->document_size_);
}

std::string PutDocumentStatsProto::GetTypeName() const {
  return "icing.lib.PutDocumentStatsProto";
}


// ===================================================================

void QueryStatsProto::InitAsDefaultInstance() {
}
class QueryStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryStatsProto>()._has_bits_);
  static void set_has_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_namespaces_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_schema_types_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ranking_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_first_page(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requested_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_results_returned_current_page(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_documents_scored(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_results_with_snippets(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parse_query_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_scoring_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ranking_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_document_retrieval_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

QueryStatsProto::QueryStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.QueryStatsProto)
}
QueryStatsProto::QueryStatsProto(const QueryStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_terms_, &from.num_terms_,
    static_cast<size_t>(reinterpret_cast<char*>(&query_length_) -
    reinterpret_cast<char*>(&num_terms_)) + sizeof(query_length_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.QueryStatsProto)
}

void QueryStatsProto::SharedCtor() {
  ::memset(&num_terms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_length_) -
      reinterpret_cast<char*>(&num_terms_)) + sizeof(query_length_));
}

QueryStatsProto::~QueryStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.QueryStatsProto)
  SharedDtor();
}

void QueryStatsProto::SharedDtor() {
}

void QueryStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryStatsProto& QueryStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryStatsProto_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void QueryStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.QueryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&num_terms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_documents_scored_) -
        reinterpret_cast<char*>(&num_terms_)) + sizeof(num_documents_scored_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&query_length_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(query_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_terms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_terms(&has_bits);
          num_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_namespaces_filtered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_namespaces_filtered(&has_bits);
          num_namespaces_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_schema_types_filtered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_schema_types_filtered(&has_bits);
          num_schema_types_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(val))) {
            set_ranking_strategy(static_cast<::icing::lib::ScoringSpecProto_RankingStrategy_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_first_page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_first_page(&has_bits);
          is_first_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 requested_page_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_requested_page_size(&has_bits);
          requested_page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_results_returned_current_page = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_results_returned_current_page(&has_bits);
          num_results_returned_current_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_documents_scored = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_documents_scored(&has_bits);
          num_documents_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parse_query_latency_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_parse_query_latency_ms(&has_bits);
          parse_query_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scoring_latency_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_scoring_latency_ms(&has_bits);
          scoring_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ranking_latency_ms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ranking_latency_ms(&has_bits);
          ranking_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_retrieval_latency_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_document_retrieval_latency_ms(&has_bits);
          document_retrieval_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_results_with_snippets = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_num_results_with_snippets(&has_bits);
          num_results_with_snippets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 query_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_query_length(&has_bits);
          query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.QueryStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_terms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_terms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_terms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_namespaces_filtered = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_namespaces_filtered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_namespaces_filtered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_schema_types_filtered = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_schema_types_filtered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_schema_types_filtered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::ScoringSpecProto_RankingStrategy_Code_IsValid(value)) {
            set_ranking_strategy(static_cast< ::icing::lib::ScoringSpecProto_RankingStrategy_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_first_page = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_is_first_page(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 requested_page_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_requested_page_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &requested_page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_results_returned_current_page = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_num_results_returned_current_page(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_results_returned_current_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_documents_scored = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_num_documents_scored(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_documents_scored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parse_query_latency_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_parse_query_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parse_query_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scoring_latency_ms = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_scoring_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoring_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ranking_latency_ms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_ranking_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_retrieval_latency_ms = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_document_retrieval_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_retrieval_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_results_with_snippets = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_num_results_with_snippets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_results_with_snippets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 query_length = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_query_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.QueryStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.QueryStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.QueryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_terms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_terms(), output);
  }

  // optional int32 num_namespaces_filtered = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_namespaces_filtered(), output);
  }

  // optional int32 num_schema_types_filtered = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_schema_types_filtered(), output);
  }

  // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ranking_strategy(), output);
  }

  // optional bool is_first_page = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_first_page(), output);
  }

  // optional int32 requested_page_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->requested_page_size(), output);
  }

  // optional int32 num_results_returned_current_page = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->num_results_returned_current_page(), output);
  }

  // optional int32 num_documents_scored = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->num_documents_scored(), output);
  }

  // optional int32 latency_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->latency_ms(), output);
  }

  // optional int32 parse_query_latency_ms = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->parse_query_latency_ms(), output);
  }

  // optional int32 scoring_latency_ms = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->scoring_latency_ms(), output);
  }

  // optional int32 ranking_latency_ms = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->ranking_latency_ms(), output);
  }

  // optional int32 document_retrieval_latency_ms = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->document_retrieval_latency_ms(), output);
  }

  // optional int32 num_results_with_snippets = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->num_results_with_snippets(), output);
  }

  // optional int32 query_length = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->query_length(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.QueryStatsProto)
}

size_t QueryStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.QueryStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 num_terms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_terms());
    }

    // optional int32 num_namespaces_filtered = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_namespaces_filtered());
    }

    // optional int32 num_schema_types_filtered = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_schema_types_filtered());
    }

    // optional .icing.lib.ScoringSpecProto.RankingStrategy.Code ranking_strategy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ranking_strategy());
    }

    // optional bool is_first_page = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 requested_page_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->requested_page_size());
    }

    // optional int32 num_results_returned_current_page = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_results_returned_current_page());
    }

    // optional int32 num_documents_scored = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_documents_scored());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 latency_ms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional int32 parse_query_latency_ms = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->parse_query_latency_ms());
    }

    // optional int32 scoring_latency_ms = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->scoring_latency_ms());
    }

    // optional int32 ranking_latency_ms = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ranking_latency_ms());
    }

    // optional int32 document_retrieval_latency_ms = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_retrieval_latency_ms());
    }

    // optional int32 num_results_with_snippets = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_results_with_snippets());
    }

    // optional int32 query_length = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->query_length());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryStatsProto*>(
      &from));
}

void QueryStatsProto::MergeFrom(const QueryStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.QueryStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      num_terms_ = from.num_terms_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_namespaces_filtered_ = from.num_namespaces_filtered_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_schema_types_filtered_ = from.num_schema_types_filtered_;
    }
    if (cached_has_bits & 0x00000008u) {
      ranking_strategy_ = from.ranking_strategy_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_first_page_ = from.is_first_page_;
    }
    if (cached_has_bits & 0x00000020u) {
      requested_page_size_ = from.requested_page_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_results_returned_current_page_ = from.num_results_returned_current_page_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_documents_scored_ = from.num_documents_scored_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      parse_query_latency_ms_ = from.parse_query_latency_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      scoring_latency_ms_ = from.scoring_latency_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      ranking_latency_ms_ = from.ranking_latency_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      document_retrieval_latency_ms_ = from.document_retrieval_latency_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      num_results_with_snippets_ = from.num_results_with_snippets_;
    }
    if (cached_has_bits & 0x00004000u) {
      query_length_ = from.query_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryStatsProto::CopyFrom(const QueryStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.QueryStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStatsProto::IsInitialized() const {
  return true;
}

void QueryStatsProto::InternalSwap(QueryStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_terms_, other->num_terms_);
  swap(num_namespaces_filtered_, other->num_namespaces_filtered_);
  swap(num_schema_types_filtered_, other->num_schema_types_filtered_);
  swap(ranking_strategy_, other->ranking_strategy_);
  swap(is_first_page_, other->is_first_page_);
  swap(requested_page_size_, other->requested_page_size_);
  swap(num_results_returned_current_page_, other->num_results_returned_current_page_);
  swap(num_documents_scored_, other->num_documents_scored_);
  swap(latency_ms_, other->latency_ms_);
  swap(parse_query_latency_ms_, other->parse_query_latency_ms_);
  swap(scoring_latency_ms_, other->scoring_latency_ms_);
  swap(ranking_latency_ms_, other->ranking_latency_ms_);
  swap(document_retrieval_latency_ms_, other->document_retrieval_latency_ms_);
  swap(num_results_with_snippets_, other->num_results_with_snippets_);
  swap(query_length_, other->query_length_);
}

std::string QueryStatsProto::GetTypeName() const {
  return "icing.lib.QueryStatsProto";
}


// ===================================================================

void DeleteStatsProto_DeleteType::InitAsDefaultInstance() {
}
class DeleteStatsProto_DeleteType::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteStatsProto_DeleteType>()._has_bits_);
};

DeleteStatsProto_DeleteType::DeleteStatsProto_DeleteType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteStatsProto.DeleteType)
}
DeleteStatsProto_DeleteType::DeleteStatsProto_DeleteType(const DeleteStatsProto_DeleteType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteStatsProto.DeleteType)
}

void DeleteStatsProto_DeleteType::SharedCtor() {
}

DeleteStatsProto_DeleteType::~DeleteStatsProto_DeleteType() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteStatsProto.DeleteType)
  SharedDtor();
}

void DeleteStatsProto_DeleteType::SharedDtor() {
}

void DeleteStatsProto_DeleteType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStatsProto_DeleteType& DeleteStatsProto_DeleteType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStatsProto_DeleteType_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DeleteStatsProto_DeleteType::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteStatsProto.DeleteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteStatsProto_DeleteType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteStatsProto_DeleteType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteStatsProto.DeleteType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteStatsProto.DeleteType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteStatsProto.DeleteType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteStatsProto_DeleteType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteStatsProto.DeleteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteStatsProto.DeleteType)
}

size_t DeleteStatsProto_DeleteType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteStatsProto.DeleteType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStatsProto_DeleteType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteStatsProto_DeleteType*>(
      &from));
}

void DeleteStatsProto_DeleteType::MergeFrom(const DeleteStatsProto_DeleteType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteStatsProto.DeleteType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteStatsProto_DeleteType::CopyFrom(const DeleteStatsProto_DeleteType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteStatsProto.DeleteType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatsProto_DeleteType::IsInitialized() const {
  return true;
}

void DeleteStatsProto_DeleteType::InternalSwap(DeleteStatsProto_DeleteType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DeleteStatsProto_DeleteType::GetTypeName() const {
  return "icing.lib.DeleteStatsProto.DeleteType";
}


// ===================================================================

void DeleteStatsProto::InitAsDefaultInstance() {
}
class DeleteStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteStatsProto>()._has_bits_);
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delete_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_documents_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeleteStatsProto::DeleteStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteStatsProto)
}
DeleteStatsProto::DeleteStatsProto(const DeleteStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_documents_deleted_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(num_documents_deleted_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteStatsProto)
}

void DeleteStatsProto::SharedCtor() {
  ::memset(&latency_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_documents_deleted_) -
      reinterpret_cast<char*>(&latency_ms_)) + sizeof(num_documents_deleted_));
}

DeleteStatsProto::~DeleteStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteStatsProto)
  SharedDtor();
}

void DeleteStatsProto::SharedDtor() {
}

void DeleteStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStatsProto& DeleteStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStatsProto_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DeleteStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_documents_deleted_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(num_documents_deleted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 latency_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::icing::lib::DeleteStatsProto_DeleteType_Code_IsValid(val))) {
            set_delete_type(static_cast<::icing::lib::DeleteStatsProto_DeleteType_Code>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_documents_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_documents_deleted(&has_bits);
          num_documents_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latency_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::icing::lib::DeleteStatsProto_DeleteType_Code_IsValid(value)) {
            set_delete_type(static_cast< ::icing::lib::DeleteStatsProto_DeleteType_Code >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_documents_deleted = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_documents_deleted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_documents_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 latency_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->latency_ms(), output);
  }

  // optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->delete_type(), output);
  }

  // optional int32 num_documents_deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_documents_deleted(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteStatsProto)
}

size_t DeleteStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 latency_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional .icing.lib.DeleteStatsProto.DeleteType.Code delete_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->delete_type());
    }

    // optional int32 num_documents_deleted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_documents_deleted());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteStatsProto*>(
      &from));
}

void DeleteStatsProto::MergeFrom(const DeleteStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      delete_type_ = from.delete_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_documents_deleted_ = from.num_documents_deleted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteStatsProto::CopyFrom(const DeleteStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatsProto::IsInitialized() const {
  return true;
}

void DeleteStatsProto::InternalSwap(DeleteStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latency_ms_, other->latency_ms_);
  swap(delete_type_, other->delete_type_);
  swap(num_documents_deleted_, other->num_documents_deleted_);
}

std::string DeleteStatsProto::GetTypeName() const {
  return "icing.lib.DeleteStatsProto";
}


// ===================================================================

void DeleteByQueryStatsProto::InitAsDefaultInstance() {
}
class DeleteByQueryStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteByQueryStatsProto>()._has_bits_);
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_documents_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_query_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_namespaces_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_schema_types_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parse_query_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_document_removal_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

DeleteByQueryStatsProto::DeleteByQueryStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:icing.lib.DeleteByQueryStatsProto)
}
DeleteByQueryStatsProto::DeleteByQueryStatsProto(const DeleteByQueryStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&document_removal_latency_ms_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_removal_latency_ms_));
  // @@protoc_insertion_point(copy_constructor:icing.lib.DeleteByQueryStatsProto)
}

void DeleteByQueryStatsProto::SharedCtor() {
  ::memset(&latency_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&document_removal_latency_ms_) -
      reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_removal_latency_ms_));
}

DeleteByQueryStatsProto::~DeleteByQueryStatsProto() {
  // @@protoc_insertion_point(destructor:icing.lib.DeleteByQueryStatsProto)
  SharedDtor();
}

void DeleteByQueryStatsProto::SharedDtor() {
}

void DeleteByQueryStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteByQueryStatsProto& DeleteByQueryStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteByQueryStatsProto_icing_2fproto_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DeleteByQueryStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:icing.lib.DeleteByQueryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&document_removal_latency_ms_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(document_removal_latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteByQueryStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 latency_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_documents_deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_documents_deleted(&has_bits);
          num_documents_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 query_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_query_length(&has_bits);
          query_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_terms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_terms(&has_bits);
          num_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_namespaces_filtered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_namespaces_filtered(&has_bits);
          num_namespaces_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_schema_types_filtered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_schema_types_filtered(&has_bits);
          num_schema_types_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parse_query_latency_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_parse_query_latency_ms(&has_bits);
          parse_query_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_removal_latency_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_document_removal_latency_ms(&has_bits);
          document_removal_latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteByQueryStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:icing.lib.DeleteByQueryStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latency_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_documents_deleted = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_documents_deleted(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_documents_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 query_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_query_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_terms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_terms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_terms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_namespaces_filtered = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_num_namespaces_filtered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_namespaces_filtered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_schema_types_filtered = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_num_schema_types_filtered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_schema_types_filtered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parse_query_latency_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_parse_query_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parse_query_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 document_removal_latency_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_document_removal_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &document_removal_latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:icing.lib.DeleteByQueryStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:icing.lib.DeleteByQueryStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteByQueryStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:icing.lib.DeleteByQueryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 latency_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->latency_ms(), output);
  }

  // optional int32 num_documents_deleted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_documents_deleted(), output);
  }

  // optional int32 query_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->query_length(), output);
  }

  // optional int32 num_terms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_terms(), output);
  }

  // optional int32 num_namespaces_filtered = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_namespaces_filtered(), output);
  }

  // optional int32 num_schema_types_filtered = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_schema_types_filtered(), output);
  }

  // optional int32 parse_query_latency_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->parse_query_latency_ms(), output);
  }

  // optional int32 document_removal_latency_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->document_removal_latency_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:icing.lib.DeleteByQueryStatsProto)
}

size_t DeleteByQueryStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:icing.lib.DeleteByQueryStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 latency_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional int32 num_documents_deleted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_documents_deleted());
    }

    // optional int32 query_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->query_length());
    }

    // optional int32 num_terms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_terms());
    }

    // optional int32 num_namespaces_filtered = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_namespaces_filtered());
    }

    // optional int32 num_schema_types_filtered = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_schema_types_filtered());
    }

    // optional int32 parse_query_latency_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->parse_query_latency_ms());
    }

    // optional int32 document_removal_latency_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->document_removal_latency_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteByQueryStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteByQueryStatsProto*>(
      &from));
}

void DeleteByQueryStatsProto::MergeFrom(const DeleteByQueryStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:icing.lib.DeleteByQueryStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_documents_deleted_ = from.num_documents_deleted_;
    }
    if (cached_has_bits & 0x00000004u) {
      query_length_ = from.query_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_terms_ = from.num_terms_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_namespaces_filtered_ = from.num_namespaces_filtered_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_schema_types_filtered_ = from.num_schema_types_filtered_;
    }
    if (cached_has_bits & 0x00000040u) {
      parse_query_latency_ms_ = from.parse_query_latency_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      document_removal_latency_ms_ = from.document_removal_latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteByQueryStatsProto::CopyFrom(const DeleteByQueryStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:icing.lib.DeleteByQueryStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteByQueryStatsProto::IsInitialized() const {
  return true;
}

void DeleteByQueryStatsProto::InternalSwap(DeleteByQueryStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latency_ms_, other->latency_ms_);
  swap(num_documents_deleted_, other->num_documents_deleted_);
  swap(query_length_, other->query_length_);
  swap(num_terms_, other->num_terms_);
  swap(num_namespaces_filtered_, other->num_namespaces_filtered_);
  swap(num_schema_types_filtered_, other->num_schema_types_filtered_);
  swap(parse_query_latency_ms_, other->parse_query_latency_ms_);
  swap(document_removal_latency_ms_, other->document_removal_latency_ms_);
}

std::string DeleteByQueryStatsProto::GetTypeName() const {
  return "icing.lib.DeleteByQueryStatsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lib
}  // namespace icing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::icing::lib::InitializeStatsProto* Arena::CreateMaybeMessage< ::icing::lib::InitializeStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::InitializeStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PutDocumentStatsProto_TokenizationStats* Arena::CreateMaybeMessage< ::icing::lib::PutDocumentStatsProto_TokenizationStats >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PutDocumentStatsProto_TokenizationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::PutDocumentStatsProto* Arena::CreateMaybeMessage< ::icing::lib::PutDocumentStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::PutDocumentStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::QueryStatsProto* Arena::CreateMaybeMessage< ::icing::lib::QueryStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::QueryStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteStatsProto_DeleteType* Arena::CreateMaybeMessage< ::icing::lib::DeleteStatsProto_DeleteType >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteStatsProto_DeleteType >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteStatsProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::icing::lib::DeleteByQueryStatsProto* Arena::CreateMaybeMessage< ::icing::lib::DeleteByQueryStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::icing::lib::DeleteByQueryStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
