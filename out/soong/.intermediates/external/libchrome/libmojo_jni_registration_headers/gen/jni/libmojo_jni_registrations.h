// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_registration_generator.py
// Please do not change its content.

#ifndef HEADER_GUARD
#define HEADER_GUARD

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"
#include "base/android/jni_int_wrapper.h"


// Step 1: Forward declarations (classes).

extern const char kClassPath_org_chromium_base_JavaExceptionReporter[];
extern base::subtle::AtomicWord g_org_chromium_base_JavaExceptionReporter_clazz;
#ifndef org_chromium_base_JavaExceptionReporter_clazz_defined
#define org_chromium_base_JavaExceptionReporter_clazz_defined
inline jclass org_chromium_base_JavaExceptionReporter_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_JavaExceptionReporter,
      &g_org_chromium_base_JavaExceptionReporter_clazz);
}
#endif

extern const char kClassPath_org_chromium_mojo_system_impl_BaseRunLoop[];
extern base::subtle::AtomicWord g_org_chromium_mojo_system_impl_BaseRunLoop_clazz;
#ifndef org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
#define org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
inline jclass org_chromium_mojo_system_impl_BaseRunLoop_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_BaseRunLoop,
      &g_org_chromium_mojo_system_impl_BaseRunLoop_clazz);
}
#endif

extern const char kClassPath_org_chromium_mojo_system_impl_CoreImpl[];
extern base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_clazz;
#ifndef org_chromium_mojo_system_impl_CoreImpl_clazz_defined
#define org_chromium_mojo_system_impl_CoreImpl_clazz_defined
inline jclass org_chromium_mojo_system_impl_CoreImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_CoreImpl,
      &g_org_chromium_mojo_system_impl_CoreImpl_clazz);
}
#endif

extern const char kClassPath_org_chromium_mojo_system_impl_WatcherImpl[];
extern base::subtle::AtomicWord g_org_chromium_mojo_system_impl_WatcherImpl_clazz;
#ifndef org_chromium_mojo_system_impl_WatcherImpl_clazz_defined
#define org_chromium_mojo_system_impl_WatcherImpl_clazz_defined
inline jclass org_chromium_mojo_system_impl_WatcherImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_WatcherImpl,
      &g_org_chromium_mojo_system_impl_WatcherImpl_clazz);
}
#endif


// Step 2: Forward declarations (methods).

JNI_GENERATOR_EXPORT void Java_org_chromium_base_JavaExceptionReporter_nativeReportJavaException(
    JNIEnv* env,
    jclass jcaller,
    jboolean crashAfterReport,
    jthrowable e);
JNI_GENERATOR_EXPORT void Java_org_chromium_base_JavaExceptionReporter_nativeReportJavaStackTrace(
    JNIEnv* env,
    jclass jcaller,
    jstring stackTrace);
JNI_GENERATOR_EXPORT jlong Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeCreateBaseRunLoop(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRun(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRunUntilIdle(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeQuit(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativePostDelayedTask(
    JNIEnv* env,
    jobject jcaller,
    jlong runLoopID,
    jobject runnable,
    jlong delay);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeDeleteMessageLoop(
    JNIEnv* env,
    jobject jcaller,
    jlong runLoopID);
JNI_GENERATOR_EXPORT jlong Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetTimeTicksNow(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateMessagePipe(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateDataPipe(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateSharedBuffer(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer,
    jlong numBytes);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeClose(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeQueryHandleSignalsState(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject signalsStateBuffer);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteMessage(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject bytes,
    jint numBytes,
    jobject handlesBuffer,
    jint flags);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadMessage(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint flags);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject elements,
    jint elementsSize,
    jint flags);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytesRead);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject elements,
    jint limit,
    jint flags);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytesWritten);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeDuplicate(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject optionsBuffer);
JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeMap(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jlong offset,
    jlong numBytes,
    jint flags);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeUnmap(
    JNIEnv* env,
    jobject jcaller,
    jobject buffer);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetNativeBufferOffset(
    JNIEnv* env,
    jobject jcaller,
    jobject buffer,
    jint alignment);
JNI_GENERATOR_EXPORT jlong Java_org_chromium_mojo_system_impl_WatcherImpl_nativeCreateWatcher(
    JNIEnv* env,
    jobject jcaller);
JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_WatcherImpl_nativeStart(
    JNIEnv* env,
    jobject jcaller,
    jlong implPtr,
    jint mojoHandle,
    jint flags);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_WatcherImpl_nativeCancel(
    JNIEnv* env,
    jobject jcaller,
    jlong implPtr);
JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_WatcherImpl_nativeDelete(
    JNIEnv* env,
    jobject jcaller,
    jlong implPtr);


// Step 3: Method declarations.

namespace base {
namespace android {
static const JNINativeMethod kMethods_org_chromium_base_JavaExceptionReporter[] = {
    { "nativeReportJavaException", "(ZLjava/lang/Throwable;)V",
        reinterpret_cast<void*>(Java_org_chromium_base_JavaExceptionReporter_nativeReportJavaException)
        },
    { "nativeReportJavaStackTrace", "(Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_org_chromium_base_JavaExceptionReporter_nativeReportJavaStackTrace)
        },
};

}  // namespace android
}  // namespace base

namespace mojo {
namespace android {
static const JNINativeMethod kMethods_org_chromium_mojo_system_impl_BaseRunLoop[] = {
    { "nativeCreateBaseRunLoop", "()J",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeCreateBaseRunLoop)
        },
    { "nativeRun", "()V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRun) },
    { "nativeRunUntilIdle", "()V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRunUntilIdle)
        },
    { "nativeQuit", "()V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeQuit) },
    { "nativePostDelayedTask", "(JLjava/lang/Runnable;J)V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativePostDelayedTask)
        },
    { "nativeDeleteMessageLoop", "(J)V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeDeleteMessageLoop)
        },
};

}  // namespace android
}  // namespace mojo

namespace mojo {
namespace android {
static const JNINativeMethod kMethods_org_chromium_mojo_system_impl_CoreImpl[] = {
    { "nativeGetTimeTicksNow", "()J",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetTimeTicksNow)
        },
    { "nativeCreateMessagePipe", "(Ljava/nio/ByteBuffer;)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateMessagePipe)
        },
    { "nativeCreateDataPipe", "(Ljava/nio/ByteBuffer;)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateDataPipe) },
    { "nativeCreateSharedBuffer", "(Ljava/nio/ByteBuffer;J)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateSharedBuffer)
        },
    { "nativeClose", "(I)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeClose) },
    { "nativeQueryHandleSignalsState", "(ILjava/nio/ByteBuffer;)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeQueryHandleSignalsState)
        },
    { "nativeWriteMessage", "(ILjava/nio/ByteBuffer;ILjava/nio/ByteBuffer;I)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteMessage) },
    { "nativeReadMessage", "(II)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadMessage) },
    { "nativeReadData", "(ILjava/nio/ByteBuffer;II)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadData) },
    { "nativeBeginReadData", "(III)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginReadData) },
    { "nativeEndReadData", "(II)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndReadData) },
    { "nativeWriteData", "(ILjava/nio/ByteBuffer;II)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteData) },
    { "nativeBeginWriteData", "(III)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginWriteData) },
    { "nativeEndWriteData", "(II)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndWriteData) },
    { "nativeDuplicate", "(ILjava/nio/ByteBuffer;)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeDuplicate) },
    { "nativeMap", "(IJJI)Lorg/chromium/mojo/system/ResultAnd;",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeMap) },
    { "nativeUnmap", "(Ljava/nio/ByteBuffer;)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeUnmap) },
    { "nativeGetNativeBufferOffset", "(Ljava/nio/ByteBuffer;I)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetNativeBufferOffset)
        },
};

}  // namespace android
}  // namespace mojo

namespace mojo {
namespace android {
static const JNINativeMethod kMethods_org_chromium_mojo_system_impl_WatcherImpl[] = {
    { "nativeCreateWatcher", "()J",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_WatcherImpl_nativeCreateWatcher)
        },
    { "nativeStart", "(JII)I",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_WatcherImpl_nativeStart) },
    { "nativeCancel", "(J)V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_WatcherImpl_nativeCancel) },
    { "nativeDelete", "(J)V",
        reinterpret_cast<void*>(Java_org_chromium_mojo_system_impl_WatcherImpl_nativeDelete) },
};

}  // namespace android
}  // namespace mojo


JNI_REGISTRATION_EXPORT bool RegisterNative_org_chromium_base_JavaExceptionReporter(JNIEnv* env) {
  const int kMethods_org_chromium_base_JavaExceptionReporterSize =
      arraysize(base::android::kMethods_org_chromium_base_JavaExceptionReporter);
  if (env->RegisterNatives(
      org_chromium_base_JavaExceptionReporter_clazz(env),
      base::android::kMethods_org_chromium_base_JavaExceptionReporter,
      kMethods_org_chromium_base_JavaExceptionReporterSize) < 0) {
    jni_generator::HandleRegistrationError(env,
        org_chromium_base_JavaExceptionReporter_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}

JNI_REGISTRATION_EXPORT bool RegisterNative_org_chromium_mojo_system_impl_BaseRunLoop(JNIEnv* env) {
  const int kMethods_org_chromium_mojo_system_impl_BaseRunLoopSize =
      arraysize(mojo::android::kMethods_org_chromium_mojo_system_impl_BaseRunLoop);
  if (env->RegisterNatives(
      org_chromium_mojo_system_impl_BaseRunLoop_clazz(env),
      mojo::android::kMethods_org_chromium_mojo_system_impl_BaseRunLoop,
      kMethods_org_chromium_mojo_system_impl_BaseRunLoopSize) < 0) {
    jni_generator::HandleRegistrationError(env,
        org_chromium_mojo_system_impl_BaseRunLoop_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}

JNI_REGISTRATION_EXPORT bool RegisterNative_org_chromium_mojo_system_impl_CoreImpl(JNIEnv* env) {
  const int kMethods_org_chromium_mojo_system_impl_CoreImplSize =
      arraysize(mojo::android::kMethods_org_chromium_mojo_system_impl_CoreImpl);
  if (env->RegisterNatives(
      org_chromium_mojo_system_impl_CoreImpl_clazz(env),
      mojo::android::kMethods_org_chromium_mojo_system_impl_CoreImpl,
      kMethods_org_chromium_mojo_system_impl_CoreImplSize) < 0) {
    jni_generator::HandleRegistrationError(env,
        org_chromium_mojo_system_impl_CoreImpl_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}

JNI_REGISTRATION_EXPORT bool RegisterNative_org_chromium_mojo_system_impl_WatcherImpl(JNIEnv* env) {
  const int kMethods_org_chromium_mojo_system_impl_WatcherImplSize =
      arraysize(mojo::android::kMethods_org_chromium_mojo_system_impl_WatcherImpl);
  if (env->RegisterNatives(
      org_chromium_mojo_system_impl_WatcherImpl_clazz(env),
      mojo::android::kMethods_org_chromium_mojo_system_impl_WatcherImpl,
      kMethods_org_chromium_mojo_system_impl_WatcherImplSize) < 0) {
    jni_generator::HandleRegistrationError(env,
        org_chromium_mojo_system_impl_WatcherImpl_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}


// Step 4: Main dex and non-main dex registration functions.

bool RegisterMainDexNatives(JNIEnv* env) {
  if (!RegisterNative_org_chromium_base_JavaExceptionReporter(env))
    return false;
  if (!RegisterNative_org_chromium_mojo_system_impl_CoreImpl(env))
    return false;

  return true;
}

bool RegisterNonMainDexNatives(JNIEnv* env) {
  if (!RegisterNative_org_chromium_mojo_system_impl_BaseRunLoop(env))
    return false;
  if (!RegisterNative_org_chromium_mojo_system_impl_WatcherImpl(env))
    return false;

  return true;
}

#endif  // HEADER_GUARD
