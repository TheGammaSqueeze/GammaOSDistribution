// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/BaseRunLoop

#ifndef org_chromium_mojo_system_impl_BaseRunLoop_JNI
#define org_chromium_mojo_system_impl_BaseRunLoop_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_mojo_system_impl_BaseRunLoop[];
const char kClassPath_org_chromium_mojo_system_impl_BaseRunLoop[] =
    "org/chromium/mojo/system/impl/BaseRunLoop";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_mojo_system_impl_BaseRunLoop_clazz =
    0;
#ifndef org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
#define org_chromium_mojo_system_impl_BaseRunLoop_clazz_defined
inline jclass org_chromium_mojo_system_impl_BaseRunLoop_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_BaseRunLoop,
      &g_org_chromium_mojo_system_impl_BaseRunLoop_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mojo {
namespace android {

static jlong JNI_BaseRunLoop_CreateBaseRunLoop(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeCreateBaseRunLoop(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_BaseRunLoop_CreateBaseRunLoop(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void JNI_BaseRunLoop_Run(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRun(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_BaseRunLoop_Run(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void JNI_BaseRunLoop_RunUntilIdle(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeRunUntilIdle(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_BaseRunLoop_RunUntilIdle(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void JNI_BaseRunLoop_Quit(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeQuit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_BaseRunLoop_Quit(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static void JNI_BaseRunLoop_PostDelayedTask(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jlong runLoopID,
    const base::android::JavaParamRef<jobject>& runnable,
    jlong delay);

JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativePostDelayedTask(
    JNIEnv* env,
    jobject jcaller,
    jlong runLoopID,
    jobject runnable,
    jlong delay) {
  return JNI_BaseRunLoop_PostDelayedTask(env, base::android::JavaParamRef<jobject>(env, jcaller),
      runLoopID, base::android::JavaParamRef<jobject>(env, runnable), delay);
}

static void JNI_BaseRunLoop_DeleteMessageLoop(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jlong runLoopID);

JNI_GENERATOR_EXPORT void Java_org_chromium_mojo_system_impl_BaseRunLoop_nativeDeleteMessageLoop(
    JNIEnv* env,
    jobject jcaller,
    jlong runLoopID) {
  return JNI_BaseRunLoop_DeleteMessageLoop(env, base::android::JavaParamRef<jobject>(env, jcaller),
      runLoopID);
}


static base::subtle::AtomicWord g_org_chromium_mojo_system_impl_BaseRunLoop_runRunnable = 0;
static void Java_BaseRunLoop_runRunnable(JNIEnv* env, const base::android::JavaRef<jobject>&
    runnable) {
  CHECK_CLAZZ(env, org_chromium_mojo_system_impl_BaseRunLoop_clazz(env),
      org_chromium_mojo_system_impl_BaseRunLoop_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_mojo_system_impl_BaseRunLoop_clazz(env),
          "runRunnable",
          "(Ljava/lang/Runnable;)V",
          &g_org_chromium_mojo_system_impl_BaseRunLoop_runRunnable);

     env->CallStaticVoidMethod(org_chromium_mojo_system_impl_BaseRunLoop_clazz(env),
          method_id, runnable.obj());
  jni_generator::CheckException(env);
}

}  // namespace android
}  // namespace mojo

#endif  // org_chromium_mojo_system_impl_BaseRunLoop_JNI
