// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/mojo/system/impl/CoreImpl

#ifndef org_chromium_mojo_system_impl_CoreImpl_JNI
#define org_chromium_mojo_system_impl_CoreImpl_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_mojo_system_impl_CoreImpl[];
const char kClassPath_org_chromium_mojo_system_impl_CoreImpl[] =
    "org/chromium/mojo/system/impl/CoreImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_clazz = 0;
#ifndef org_chromium_mojo_system_impl_CoreImpl_clazz_defined
#define org_chromium_mojo_system_impl_CoreImpl_clazz_defined
inline jclass org_chromium_mojo_system_impl_CoreImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_mojo_system_impl_CoreImpl,
      &g_org_chromium_mojo_system_impl_CoreImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace mojo {
namespace android {

static jlong JNI_CoreImpl_GetTimeTicksNow(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jlong Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetTimeTicksNow(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_CoreImpl_GetTimeTicksNow(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_CreateMessagePipe(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& optionsBuffer);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateMessagePipe(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer) {
  return JNI_CoreImpl_CreateMessagePipe(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, optionsBuffer)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_CreateDataPipe(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& optionsBuffer);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateDataPipe(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer) {
  return JNI_CoreImpl_CreateDataPipe(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, optionsBuffer)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_CreateSharedBuffer(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& optionsBuffer,
    jlong numBytes);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeCreateSharedBuffer(
    JNIEnv* env,
    jobject jcaller,
    jobject optionsBuffer,
    jlong numBytes) {
  return JNI_CoreImpl_CreateSharedBuffer(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, optionsBuffer), numBytes).Release();
}

static jint JNI_CoreImpl_Close(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeClose(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle) {
  return JNI_CoreImpl_Close(env, base::android::JavaParamRef<jobject>(env, jcaller), mojoHandle);
}

static jint JNI_CoreImpl_QueryHandleSignalsState(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    const base::android::JavaParamRef<jobject>& signalsStateBuffer);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeQueryHandleSignalsState(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject signalsStateBuffer) {
  return JNI_CoreImpl_QueryHandleSignalsState(env, base::android::JavaParamRef<jobject>(env,
      jcaller), mojoHandle, base::android::JavaParamRef<jobject>(env, signalsStateBuffer));
}

static jint JNI_CoreImpl_WriteMessage(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint mojoHandle,
    const base::android::JavaParamRef<jobject>& bytes,
    jint numBytes,
    const base::android::JavaParamRef<jobject>& handlesBuffer,
    jint flags);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteMessage(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject bytes,
    jint numBytes,
    jobject handlesBuffer,
    jint flags) {
  return JNI_CoreImpl_WriteMessage(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, base::android::JavaParamRef<jobject>(env, bytes), numBytes,
      base::android::JavaParamRef<jobject>(env, handlesBuffer), flags);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadMessage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadMessage(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint flags) {
  return JNI_CoreImpl_ReadMessage(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, flags).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    const base::android::JavaParamRef<jobject>& elements,
    jint elementsSize,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject elements,
    jint elementsSize,
    jint flags) {
  return JNI_CoreImpl_ReadData(env, base::android::JavaParamRef<jobject>(env, jcaller), mojoHandle,
      base::android::JavaParamRef<jobject>(env, elements), elementsSize, flags).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginReadData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags) {
  return JNI_CoreImpl_BeginReadData(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, numBytes, flags).Release();
}

static jint JNI_CoreImpl_EndReadData(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint mojoHandle,
    jint numBytesRead);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndReadData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytesRead) {
  return JNI_CoreImpl_EndReadData(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, numBytesRead);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_WriteData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    const base::android::JavaParamRef<jobject>& elements,
    jint limit,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject elements,
    jint limit,
    jint flags) {
  return JNI_CoreImpl_WriteData(env, base::android::JavaParamRef<jobject>(env, jcaller), mojoHandle,
      base::android::JavaParamRef<jobject>(env, elements), limit, flags).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginWriteData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeBeginWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytes,
    jint flags) {
  return JNI_CoreImpl_BeginWriteData(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, numBytes, flags).Release();
}

static jint JNI_CoreImpl_EndWriteData(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint mojoHandle,
    jint numBytesWritten);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeEndWriteData(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jint numBytesWritten) {
  return JNI_CoreImpl_EndWriteData(env, base::android::JavaParamRef<jobject>(env, jcaller),
      mojoHandle, numBytesWritten);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_Duplicate(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    const base::android::JavaParamRef<jobject>& optionsBuffer);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeDuplicate(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jobject optionsBuffer) {
  return JNI_CoreImpl_Duplicate(env, base::android::JavaParamRef<jobject>(env, jcaller), mojoHandle,
      base::android::JavaParamRef<jobject>(env, optionsBuffer)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_CoreImpl_Map(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint mojoHandle,
    jlong offset,
    jlong numBytes,
    jint flags);

JNI_GENERATOR_EXPORT jobject Java_org_chromium_mojo_system_impl_CoreImpl_nativeMap(
    JNIEnv* env,
    jobject jcaller,
    jint mojoHandle,
    jlong offset,
    jlong numBytes,
    jint flags) {
  return JNI_CoreImpl_Map(env, base::android::JavaParamRef<jobject>(env, jcaller), mojoHandle,
      offset, numBytes, flags).Release();
}

static jint JNI_CoreImpl_Unmap(JNIEnv* env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& buffer);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeUnmap(
    JNIEnv* env,
    jobject jcaller,
    jobject buffer) {
  return JNI_CoreImpl_Unmap(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, buffer));
}

static jint JNI_CoreImpl_GetNativeBufferOffset(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& buffer,
    jint alignment);

JNI_GENERATOR_EXPORT jint Java_org_chromium_mojo_system_impl_CoreImpl_nativeGetNativeBufferOffset(
    JNIEnv* env,
    jobject jcaller,
    jobject buffer,
    jint alignment) {
  return JNI_CoreImpl_GetNativeBufferOffset(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, buffer), alignment);
}


static base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_newResultAndBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_CoreImpl_newResultAndBuffer(JNIEnv* env,
    JniIntWrapper mojoResult,
    const base::android::JavaRef<jobject>& buffer) {
  CHECK_CLAZZ(env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
      org_chromium_mojo_system_impl_CoreImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          "newResultAndBuffer",
          "(ILjava/nio/ByteBuffer;)Lorg/chromium/mojo/system/ResultAnd;",
          &g_org_chromium_mojo_system_impl_CoreImpl_newResultAndBuffer);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          method_id, as_jint(mojoResult), buffer.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_newReadMessageResult = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_CoreImpl_newReadMessageResult(JNIEnv* env,
    JniIntWrapper mojoResult,
    const base::android::JavaRef<jbyteArray>& data,
    const base::android::JavaRef<jintArray>& rawHandles) {
  CHECK_CLAZZ(env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
      org_chromium_mojo_system_impl_CoreImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          "newReadMessageResult",
          "(I[B[I)Lorg/chromium/mojo/system/ResultAnd;",
          &g_org_chromium_mojo_system_impl_CoreImpl_newReadMessageResult);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          method_id, as_jint(mojoResult), data.obj(), rawHandles.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_newResultAndInteger = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_CoreImpl_newResultAndInteger(JNIEnv* env,
    JniIntWrapper mojoResult,
    JniIntWrapper numBytesRead) {
  CHECK_CLAZZ(env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
      org_chromium_mojo_system_impl_CoreImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          "newResultAndInteger",
          "(II)Lorg/chromium/mojo/system/ResultAnd;",
          &g_org_chromium_mojo_system_impl_CoreImpl_newResultAndInteger);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          method_id, as_jint(mojoResult), as_jint(numBytesRead));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_mojo_system_impl_CoreImpl_newNativeCreationResult =
    0;
static base::android::ScopedJavaLocalRef<jobject> Java_CoreImpl_newNativeCreationResult(JNIEnv* env,
    JniIntWrapper mojoResult,
    JniIntWrapper mojoHandle1,
    JniIntWrapper mojoHandle2) {
  CHECK_CLAZZ(env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
      org_chromium_mojo_system_impl_CoreImpl_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          "newNativeCreationResult",
          "(III)Lorg/chromium/mojo/system/ResultAnd;",
          &g_org_chromium_mojo_system_impl_CoreImpl_newNativeCreationResult);

  jobject ret =
      env->CallStaticObjectMethod(org_chromium_mojo_system_impl_CoreImpl_clazz(env),
          method_id, as_jint(mojoResult), as_jint(mojoHandle1), as_jint(mojoHandle2));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace mojo

#endif  // org_chromium_mojo_system_impl_CoreImpl_JNI
