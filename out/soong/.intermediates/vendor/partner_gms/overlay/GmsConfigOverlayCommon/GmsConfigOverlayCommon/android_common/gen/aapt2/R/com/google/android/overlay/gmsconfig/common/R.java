/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.google.android.overlay.gmsconfig.common;

public final class R {
  public static final class array {
    /**
     * List containing the allowed install sources for accessibility service.
     */
    public static final int config_accessibility_allowed_install_source=0x7f010000;
    /**
     * Sets the Ephemeral Resolver [DO NOT TRANSLATE]
     */
    public static final int config_ephemeralResolverPackage=0x7f010001;
    /**
     * The set of system packages on device that are queryable regardless of the contents of their
     * manifest.
     */
    public static final int config_forceQueryablePackages=0x7f010002;
    public static final int config_integrityRuleProviderPackages=0x7f010003;
    /**
     * Sets the package name for location extra packages
     */
    public static final int config_locationExtraPackageNames=0x7f010004;
    /**
     * Sets the package names whose certificates should be used to
     * verify location providers are allowed to be loaded.
     */
    public static final int config_locationProviderPackageNames=0x7f010005;
    /**
     * An array of packages for which notifications cannot be blocked.
     */
    public static final int config_nonBlockableNotificationPackages=0x7f010006;
    /**
     * Names of packages that should not be suspended when personal use is blocked by policy.
     */
    public static final int config_packagesExemptFromSuspension=0x7f010007;
    /**
     * An array of packages that can make sound on the ringer stream in priority-only DND mode
     */
    public static final int config_priorityOnlyDndExemptPackages=0x7f010008;
    /**
     * A collection of apps that have been pre-approved for cross-profile communication.
     * These will not require admin or user consent.
     */
    public static final int vendor_cross_profile_apps=0x7f010009;
    /**
     * A list of apps to be retained on the managed device.
     */
    public static final int vendor_required_apps_managed_device=0x7f01000a;
    /**
     * A list of apps to be retained in the managed profile. This includes any Google experience apps required.
     */
    public static final int vendor_required_apps_managed_profile=0x7f01000b;
    /**
     * A list of apps to be retained in the managed user. This includes any
     * Google experience apps required.
     */
    public static final int vendor_required_apps_managed_user=0x7f01000c;
  }
  public static final class bool {
    /**
     * Enable doze mode
     */
    public static final int config_enableAutoPowerModes=0x7f020000;
    public static final int config_enableFusedLocationOverlay=0x7f020001;
    public static final int config_enableGeocoderOverlay=0x7f020002;
    public static final int config_enableGeofenceOverlay=0x7f020003;
    /**
     * Enable overlay for all location components.
     */
    public static final int config_enableNetworkLocationOverlay=0x7f020004;
    /**
     * Whether the setting to change long press on power behaviour from default to assistant (5)
     * is available in Settings.
     */
    public static final int config_longPressOnPowerForAssistantSettingAvailable=0x7f020005;
  }
  public static final class integer {
    /**
     * Control the behavior when the user presses the power and volume up buttons together.
     * 0 - Nothing
     * 1 - Mute toggle
     * 2 - Global actions menu
     */
    public static final int config_keyChordPowerVolumeUp=0x7f030000;
    /**
     * Control the behavior when the user long presses the power button.
     * 0 - Nothing
     * 1 - Global actions menu
     * 2 - Power off (with confirmation)
     * 3 - Power off (without confirmation)
     * 4 - Go to voice assist
     * 5 - Go to assistant (Settings.Secure.ASSISTANT)
     */
    public static final int config_longPressOnPowerBehavior=0x7f030001;
    /**
     * Whether to only install system packages on a user if they're whitelisted for that user
     * type. These are flags and can be freely combined.
     * 0  - disable whitelist (install all system packages; no logging)
     * 1  - enforce (only install system packages if they are whitelisted)
     * 2  - log (log non-whitelisted packages)
     * 4  - any package not mentioned in the whitelist file is implicitly whitelisted on all users
     * 8  - same as 4, but just for the SYSTEM user
     * 16 - ignore OTAs (don't install system packages during OTAs)
     * Common scenarios:
     * - to enable feature (fully enforced) for a complete whitelist: 1
     * - to enable feature for an incomplete whitelist (so use implicit whitelist mode): 5
     * - to enable feature but implicitly whitelist for SYSTEM user to ease local development: 9
     * - to disable feature completely if it had never been enabled: 16
     * - to henceforth disable feature and try to undo its previous effects: 0
     * Note: This list must be kept current with PACKAGE_WHITELIST_MODE_PROP in
     * frameworks/base/services/core/java/com/android/server/pm/UserSystemPackageInstaller.java
     */
    public static final int config_userTypePackageWhitelistMode=0x7f030002;
  }
  public static final class string {
    /**
     * Default service to enable with accessibility shortcut [DO NOT TRANSLATE]
     */
    public static final int config_defaultAccessibilityService=0x7f040000;
    /**
     * Default autofill service to enable [DO NOT TRANSLATE]
     */
    public static final int config_defaultAutofillService=0x7f040001;
    /**
     * Colon separated list of package names that should be granted DND access
     */
    public static final int config_defaultDndAccessPackages=0x7f040002;
    /**
     * Colon separated list of package names that should be granted Notification Listener access
     */
    public static final int config_defaultListenerAccessPackages=0x7f040003;
    /**
     * The name of the package that will hold the music role by default.
     */
    public static final int config_defaultMusic=0x7f040004;
    /**
     * Component name that accepts ACTION_SEND intents for nearby (proximity-based) sharing.
     * Used by ChooserActivity.
     */
    public static final int config_defaultNearbySharingComponent=0x7f040005;
    /**
     * The package name of the default network recommendation app.
     */
    public static final int config_defaultNetworkRecommendationProviderPackage=0x7f040006;
    /**
     * The component to be the default supervisor profile owner [DO NOT TRANSLATE]
     */
    public static final int config_defaultSupervisionProfileOwnerComponent=0x7f040007;
    /**
     * The package name for the default wellbeing application. [DO NOT TRANSLATE]
     */
    public static final int config_defaultWellbeingPackage=0x7f040008;
    /**
     * Flag indicating which package name can access DeviceConfig table [DO NOT TRANSLATE]
     */
    public static final int config_deviceConfiguratorPackageName=0x7f040009;
    /**
     * For Factory Reset Protection
     */
    public static final int config_persistentDataPackageName=0x7f04000a;
    /**
     * The name of the package that will hold the system activity recognizer role.
     */
    public static final int config_systemActivityRecognizer=0x7f04000b;
    /**
     * The names of the packages that will hold the system automotive projection role.
     */
    public static final int config_systemAutomotiveProjection=0x7f04000c;
    /**
     * The package name for the fast pair provider application. [DO NOT TRANSLATE]
     */
    public static final int config_systemCompanionDeviceProvider=0x7f04000d;
    /**
     * The name of the package that will hold the speech recognizer role by default.
     */
    public static final int config_systemSpeechRecognizer=0x7f04000e;
    /**
     * The name of the package that will hold the wellbeing role.
     */
    public static final int config_systemWellbeing=0x7f04000f;
    /**
     * Title for the harmful app warning dialog. Play Protect is a brand name. [CHAR LIMIT=40]
     */
    public static final int harmful_app_warning_title=0x7f040010;
  }
  public static final class xml {
    public static final int config_webview_packages=0x7f050000;
  }
}