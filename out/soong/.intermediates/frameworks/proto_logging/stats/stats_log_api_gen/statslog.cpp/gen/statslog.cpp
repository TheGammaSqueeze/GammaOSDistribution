// This file is autogenerated

#include <statslog.h>
#include <stats_event.h>
#include <stats_annotations.h>
#include <stats_pull_atom_callback.h>

namespace android {
namespace util {

int stats_write(int32_t code) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int32_t arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    if (BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int32_t arg2, char const* arg3, char const* arg4, char const* arg5, char const* arg6, char const* arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int64_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, int64_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const BytesField& arg1, float arg2, int32_t arg3, int32_t arg4, int32_t arg5, float arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeFloat(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeFloat(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    if (MOBILE_RADIO_POWER_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    if (AUDIO_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, bool arg3, bool arg4, bool arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, true);
        if (arg2 == 2) {
            AStatsEvent_addInt32Annotation(event, ASTATSLOG_ANNOTATION_ID_TRIGGER_STATE_RESET, 0);
        }
    }
    AStatsEvent_writeBool(event, arg3);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeBool(event, arg4);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeBool(event, arg5);
    if (BLE_SCAN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, int32_t arg3, char const* arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, int64_t arg3, float arg4, char const* arg5, bool arg6, int32_t arg7, const BytesField& arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, char const* arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    if (WAKELOCK_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (WAKELOCK_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeString(event, arg3);
    if (WAKELOCK_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    if (WAKELOCK_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    if (TIF_TUNE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (TIF_TUNE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    AStatsEvent_writeString(event, arg3);
    if (TIF_TUNE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    if (TIF_TUNE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeInt32(event, arg6);
    if (TIF_TUNE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, char const* arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, char const* arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, bool arg7, bool arg8, bool arg9, bool arg10, bool arg11, bool arg12, bool arg13, bool arg14, bool arg15, bool arg16, int32_t arg17) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeBool(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeBool(event, arg15);
    AStatsEvent_writeBool(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, const int32_t* uid, size_t uid_length, const std::vector<char const*>& tag, char const* arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeAttributionChain(event, reinterpret_cast<const uint32_t*>(uid), tag.data(), static_cast<uint8_t>(uid_length));
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, bool arg2, bool arg3, bool arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, bool arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, bool arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, char const* arg2, int64_t arg3, int32_t arg4, int64_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    if (PACKAGE_INSTALLER_V2_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, char const* arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, bool arg1, char const* arg2, char const* arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    if (PHONE_SIGNAL_STRENGTH_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    if (ACTIVITY_MANAGER_SLEEP_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (MEMORY_FACTOR_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
    }
    if (BATTERY_SAVER_MODE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (DEVICE_IDLE_MODE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (DEVICE_IDLING_MODE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (SCREEN_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (CHARGING_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (PLUGGED_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (PRIVACY_INDICATORS_INTERACTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, const BytesField& arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (DEVICE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    AStatsEvent_writeBool(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2, bool arg3, bool arg4, bool arg5, bool arg6, int32_t arg7, bool arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ALARM_SCHEDULED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2, bool arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (HOTWORD_DETECTOR_CREATE_REQUESTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, bool arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (UID_PROCESS_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    if (GENERIC_ATOM == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (VMS_CLIENT_CONNECTION_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (TV_TUNER_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (APP_COMPAT_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (CAMERA_COMPAT_CONTROL_EVENT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (UID_PROCESS_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    if (APP_COMPAT_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, const BytesField& arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg3.arg), arg3.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, bool arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    if (CALL_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, bool arg4, bool arg5, int32_t arg6, int64_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, bool arg5, int32_t arg6, int64_t arg7, bool arg8, int32_t arg9, float arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeFloat(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, bool arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, bool arg8, int64_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_BREADCRUMB_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (TV_CAS_SESSION_OPEN_STATUS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (REBOOT_ESCROW_PREPARATION_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (REBOOT_ESCROW_LSKF_CAPTURE_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    if (MEDIA_CONTENT_DELETED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg3);
    if (HOTWORD_DETECTOR_EVENTS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, const BytesField& arg5, const BytesField& arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, bool arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, char const* arg10, char const* arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, bool arg19, int32_t arg20, int32_t arg21, int32_t arg22, char const* arg23, int32_t arg24, int32_t arg25) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    if (LAUNCHER_EVENT == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeBool(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt32(event, arg22);
    AStatsEvent_writeString(event, arg23);
    AStatsEvent_writeInt32(event, arg24);
    AStatsEvent_writeInt32(event, arg25);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, const BytesField& arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, bool arg4, bool arg5, bool arg6, int32_t arg7, int32_t arg8, char const* arg9, char const* arg10, int32_t arg11, int32_t arg12, bool arg13, bool arg14, int32_t arg15) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeString(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (MEDIA_PROVIDER_PERMISSION_REQUESTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, const BytesField& arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CAR_WATCHDOG_KILL_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    if (DEVICE_CONTROL_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, bool arg6, int32_t arg7, bool arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, bool arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (REBOOT_ESCROW_REBOOT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (FOREGROUND_SERVICE_APP_OP_SESSION_ENDED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (TV_TUNER_DVR_STATUS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, bool arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, bool arg19, int32_t arg20) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_SEARCH_INITIALIZE_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeBool(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, const BytesField& arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, bool arg8, bool arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (HDMI_CEC_MESSAGE_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_SEARCH_REMOVE_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_SEARCH_CALL_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, const BytesField& arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    if (SMARTSPACE_CARD_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg12.arg), arg12.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, bool arg13, int32_t arg14) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, bool arg15) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeBool(event, arg15);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, bool arg17, int32_t arg18, int32_t arg19, int32_t arg20, int32_t arg21, int32_t arg22, int32_t arg23, int32_t arg24) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_SEARCH_QUERY_STATS_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeBool(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt32(event, arg22);
    AStatsEvent_writeInt32(event, arg23);
    AStatsEvent_writeInt32(event, arg24);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int64_t arg11, int64_t arg12, int64_t arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeInt64(event, arg18);
    AStatsEvent_writeInt64(event, arg19);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, float arg10, char const* arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeFloat(event, arg10);
    AStatsEvent_writeString(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, char const* arg8, int64_t arg9, int64_t arg10, int64_t arg11, bool arg12, bool arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeBool(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int64_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, const BytesField& arg12, int32_t arg13, int32_t arg14, char const* arg15, int32_t arg16, int32_t arg17, int32_t arg18) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg12.arg), arg12.arg_length);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeString(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, char const* arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, bool arg12, int32_t arg13, int32_t arg14, char const* arg15, bool arg16) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (MEDIA_TRANSCODING_SESSION_ENDED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeBool(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeString(event, arg15);
    AStatsEvent_writeBool(event, arg16);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int64_t arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, char const* arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, char const* arg6, char const* arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, char const* arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, char const* arg5, char const* arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, bool arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, int32_t arg19) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    if (LAUNCHER_SNAPSHOT == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int64_t arg4, bool arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int64_t arg4, int32_t arg5, const BytesField& arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int64_t arg4, float arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int64_t arg4, float arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, float arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    if (SPLITSCREEN_UI_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    if (SPLITSCREEN_UI_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, char const* arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, char const* arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, char const* arg4, char const* arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, char const* arg4, char const* arg5, bool arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, bool arg4, int32_t arg5, float arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeFloat(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, float arg4, float arg5, float arg6, float arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    AStatsEvent_writeFloat(event, arg6);
    AStatsEvent_writeFloat(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, char const* arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, float arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeFloat(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, float arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeFloat(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, float arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeFloat(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (UI_EVENT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, bool arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (ASSISTANT_INVOCATION_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, bool arg7, int32_t arg8, bool arg9, bool arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (NOTIFICATION_CHANNEL_MODIFIED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, bool arg9, char const* arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, int32_t arg19, int32_t arg20, float arg21) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (NOTIFICATION_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    AStatsEvent_writeFloat(event, arg21);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int64_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, char const* arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeString(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int32_t arg4, int64_t arg5, int32_t arg6, int32_t arg7, char const* arg8, char const* arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_START_TIME == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeString(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int32_t arg2, char const* arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (DAVEY_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int32_t arg3, bool arg4, int64_t arg5, bool arg6, bool arg7, int64_t arg8, int64_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, char const* arg13, char const* arg14) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeString(event, arg13);
    AStatsEvent_writeString(event, arg14);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_COMPATIBILITY_CHANGE_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ANOMALY_DETECTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (BLOB_COMMITTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (BLOB_LEASED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (BLOB_OPENED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, char const* arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, float arg3, float arg4, float arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeFloat(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, bool arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (OVERLAY_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeString(event, arg2);
    if (OVERLAY_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    if (OVERLAY_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_LIFE_CYCLE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (PICTURE_IN_PICTURE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, bool arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (HIDDEN_API_USED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, bool arg10, bool arg11, int32_t arg12, int32_t arg13, int32_t arg14) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (FOREGROUND_SERVICE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, bool arg4, int64_t arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_PROCESS_DIED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, char const* arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (LMK_KILL_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int32_t arg13, int64_t arg14, int32_t arg15, int32_t arg16, int64_t arg17, int64_t arg18) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeInt64(event, arg18);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_START_CANCELED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, bool arg5, int64_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, bool arg11, bool arg12, int32_t arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_START_FULLY_DRAWN == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeBool(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, int32_t arg5, int32_t arg6, bool arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, char const* arg5, bool arg6, int64_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, char const* arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, bool arg18, bool arg19, bool arg20, int32_t arg21, int64_t arg22) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_START_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeString(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeBool(event, arg18);
    AStatsEvent_writeBool(event, arg19);
    AStatsEvent_writeBool(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt64(event, arg22);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, char const* arg5, char const* arg6, int32_t arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PACKET_WAKEUP_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (USB_CONNECTOR_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_STATE_NESTED, false);
    }
    AStatsEvent_writeString(event, arg2);
    if (USB_CONNECTOR_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_PRIMARY_FIELD, true);
    }
    AStatsEvent_writeInt64(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, char const* arg9, char const* arg10, const BytesField& arg11, int32_t arg12, int32_t arg13, int32_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, char const* arg18) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (MEDIAMETRICS_PLAYBACK_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeString(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg11.arg), arg11.arg_length);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeString(event, arg18);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (SERVICE_LAUNCH_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ACTIVITY_FOREGROUND_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (SERVICE_STATE_CHANGED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (APP_USAGE_EVENT_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (WTF_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int32_t arg5, char const* arg6, int32_t arg7, char const* arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, char const* arg5, int32_t arg6, int32_t arg7, int32_t arg8, bool arg9, float arg10, int64_t arg11, int32_t arg12, int32_t arg13, bool arg14, int64_t arg15, int64_t arg16, int32_t arg17, int32_t arg18, int32_t arg19, int64_t arg20, int32_t arg21, int64_t arg22) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_CRASH_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeFloat(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt64(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt64(event, arg22);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5, int64_t arg6, int32_t arg7, int64_t arg8, int64_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_START_MEMORY_STATE_CAPTURED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int32_t arg5, int32_t arg6, int32_t arg7, char const* arg8, bool arg9, float arg10, int64_t arg11, int32_t arg12, int32_t arg13, bool arg14, int64_t arg15, int64_t arg16, int32_t arg17, int32_t arg18, int32_t arg19, int64_t arg20, int32_t arg21, int64_t arg22) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ANR_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeFloat(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt64(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt64(event, arg22);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, char const* arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    if (APP_DIED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_EXCLUSIVE_STATE, true);
    }
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int32_t arg6, int32_t arg7, int64_t arg8, int32_t arg9, int32_t arg10, int32_t arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (ART_DATUM_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (AUTO_REVOKED_APP_INTERACTION == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, int32_t arg4, char const* arg5, int32_t arg6, bool arg7, int32_t arg8, int32_t arg9, int32_t arg10, int64_t arg11, int64_t arg12, bool arg13, int32_t arg14, const BytesField& arg15, const BytesField& arg16, const BytesField& arg17, const BytesField& arg18, const BytesField& arg19) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg15.arg), arg15.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg16.arg), arg16.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg17.arg), arg17.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg18.arg), arg18.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg19.arg), arg19.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, char const* arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (APP_PERMISSION_FRAGMENT_VIEWED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, char const* arg4, bool arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, char const* arg4, bool arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (PERMISSION_GRANT_REQUEST_RESULT_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int32_t arg2, char const* arg3, char const* arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (AUTO_REVOKE_FRAGMENT_APP_VIEWED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int64_t arg2, int32_t arg3, bool arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int64_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int64_t arg2, int32_t arg3, char const* arg4, char const* arg5, bool arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    if (APP_PERMISSION_FRAGMENT_ACTION_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, int64_t arg2, char const* arg3, int32_t arg4, char const* arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    if (APP_PERMISSIONS_FRAGMENT_VIEWED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (PERMISSION_APPS_FRAGMENT_VIEWED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, int64_t arg4, const BytesField& arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, int64_t arg4, const BytesField& arg5, char const* arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeString(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, int64_t arg4, char const* arg5, char const* arg6, const BytesField& arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, int64_t arg4, char const* arg5, char const* arg6, int32_t arg7, char const* arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeInt64(event, arg18);
    AStatsEvent_writeInt64(event, arg19);
    AStatsEvent_writeInt64(event, arg20);
    AStatsEvent_writeInt64(event, arg21);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, int64_t arg4, char const* arg5, char const* arg6, char const* arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, char const* arg19, int64_t arg20, int64_t arg21, int64_t arg22, int64_t arg23, int64_t arg24, int32_t arg25, int32_t arg26, char const* arg27, int32_t arg28, int64_t arg29, int64_t arg30, char const* arg31, int32_t arg32, int32_t arg33, int64_t arg34, int64_t arg35, int64_t arg36, int64_t arg37, int64_t arg38, int32_t arg39, float arg40, float arg41, float arg42, int32_t arg43, int32_t arg44, int32_t arg45, int32_t arg46, int32_t arg47, int32_t arg48, int32_t arg49, int32_t arg50, int32_t arg51, int32_t arg52, int32_t arg53, int32_t arg54, int32_t arg55, int32_t arg56, int32_t arg57) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeString(event, arg19);
    AStatsEvent_writeInt64(event, arg20);
    AStatsEvent_writeInt64(event, arg21);
    AStatsEvent_writeInt64(event, arg22);
    AStatsEvent_writeInt64(event, arg23);
    AStatsEvent_writeInt64(event, arg24);
    AStatsEvent_writeInt32(event, arg25);
    AStatsEvent_writeInt32(event, arg26);
    AStatsEvent_writeString(event, arg27);
    AStatsEvent_writeInt32(event, arg28);
    AStatsEvent_writeInt64(event, arg29);
    AStatsEvent_writeInt64(event, arg30);
    AStatsEvent_writeString(event, arg31);
    AStatsEvent_writeInt32(event, arg32);
    AStatsEvent_writeInt32(event, arg33);
    AStatsEvent_writeInt64(event, arg34);
    AStatsEvent_writeInt64(event, arg35);
    AStatsEvent_writeInt64(event, arg36);
    AStatsEvent_writeInt64(event, arg37);
    AStatsEvent_writeInt64(event, arg38);
    AStatsEvent_writeInt32(event, arg39);
    AStatsEvent_writeFloat(event, arg40);
    AStatsEvent_writeFloat(event, arg41);
    AStatsEvent_writeFloat(event, arg42);
    AStatsEvent_writeInt32(event, arg43);
    AStatsEvent_writeInt32(event, arg44);
    AStatsEvent_writeInt32(event, arg45);
    AStatsEvent_writeInt32(event, arg46);
    AStatsEvent_writeInt32(event, arg47);
    AStatsEvent_writeInt32(event, arg48);
    AStatsEvent_writeInt32(event, arg49);
    AStatsEvent_writeInt32(event, arg50);
    AStatsEvent_writeInt32(event, arg51);
    AStatsEvent_writeInt32(event, arg52);
    AStatsEvent_writeInt32(event, arg53);
    AStatsEvent_writeInt32(event, arg54);
    AStatsEvent_writeInt32(event, arg55);
    AStatsEvent_writeInt32(event, arg56);
    AStatsEvent_writeInt32(event, arg57);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, int64_t arg3, char const* arg4, int32_t arg5, char const* arg6, char const* arg7, int64_t arg8, int64_t arg9, char const* arg10, char const* arg11, char const* arg12, int32_t arg13, int32_t arg14, char const* arg15) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeString(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeString(event, arg15);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int64_t arg1, char const* arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, float arg1, float arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeFloat(event, arg1);
    AStatsEvent_writeFloat(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, float arg1, float arg2, float arg3, float arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeFloat(event, arg1);
    AStatsEvent_writeFloat(event, arg2);
    AStatsEvent_writeFloat(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, bool arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, bool arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, bool arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, char const* arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3, float arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int32_t arg3, char const* arg4, char const* arg5, char const* arg6, int32_t arg7, int64_t arg8, int32_t arg9, char const* arg10, char const* arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, float arg16) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeFloat(event, arg16);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, int64_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int32_t arg8, int64_t arg9, int64_t arg10, bool arg11, int32_t arg12, int64_t arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (RUNTIME_PERMISSIONS_UPGRADE_RESULT == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, bool arg7, int32_t arg8, int32_t arg9, bool arg10, int32_t arg11, int32_t arg12, char const* arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeString(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int64_t arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, char const* arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, char const* arg11, char const* arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeString(event, arg12);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, char const* arg6, int32_t arg7, int32_t arg8, int32_t arg9, int64_t arg10, char const* arg11, char const* arg12) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeString(event, arg12);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, char const* arg5, int32_t arg6, bool arg7, bool arg8, bool arg9) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, char const* arg5, float arg6, int32_t arg7, char const* arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeFloat(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int32_t arg2, char const* arg3, int32_t arg4, char const* arg5, char const* arg6, char const* arg7, float arg8, char const* arg9, char const* arg10, char const* arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeFloat(event, arg8);
    AStatsEvent_writeString(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeString(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int64_t arg2, bool arg3, bool arg4, bool arg5, int32_t arg6, const BytesField& arg7, int32_t arg8, int32_t arg9, bool arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int64_t arg2, int64_t arg3, bool arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, bool arg3, bool arg4) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, float arg7, float arg8, bool arg9, bool arg10, bool arg11) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeFloat(event, arg7);
    AStatsEvent_writeFloat(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int32_t arg3, int32_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int64_t arg3, char const* arg4, int32_t arg5, bool arg6, bool arg7) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int64_t arg3, char const* arg4, int32_t arg5, int32_t arg6, int32_t arg7, char const* arg8, int32_t arg9, char const* arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeString(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int64_t arg3, char const* arg4, int32_t arg5, int32_t arg6, int32_t arg7, char const* arg8, int32_t arg9, char const* arg10, float arg11, float arg12, float arg13, int32_t arg14, char const* arg15, char const* arg16, char const* arg17, char const* arg18, char const* arg19, char const* arg20) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeString(event, arg10);
    AStatsEvent_writeFloat(event, arg11);
    AStatsEvent_writeFloat(event, arg12);
    AStatsEvent_writeFloat(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeString(event, arg15);
    AStatsEvent_writeString(event, arg16);
    AStatsEvent_writeString(event, arg17);
    AStatsEvent_writeString(event, arg18);
    AStatsEvent_writeString(event, arg19);
    AStatsEvent_writeString(event, arg20);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, int64_t arg3, char const* arg4, int32_t arg5, int32_t arg6, int32_t arg7, char const* arg8, char const* arg9, int32_t arg10, char const* arg11, char const* arg12, char const* arg13) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeString(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeString(event, arg11);
    AStatsEvent_writeString(event, arg12);
    AStatsEvent_writeString(event, arg13);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, char const* arg3, int32_t arg4, float arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, char const* arg2, char const* arg3, char const* arg4, char const* arg5, bool arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}


int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, bool arg4, bool arg5, bool arg6) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, char const* arg5) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4, float arg5, char const* arg6, bool arg7, int32_t arg8, const BytesField& arg9) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, int32_t arg5) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, char const* arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6, arg7);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int32_t arg5) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, bool arg8, bool arg9, bool arg10, bool arg11, bool arg12, bool arg13, bool arg14, bool arg15, bool arg16, bool arg17, int32_t arg18) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18);
}

int stats_write_non_chained(int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int32_t arg5) {
    const int32_t* uid = &arg1;
    const size_t uid_length = 1;
    const std::vector<char const*> tag(1, arg2);
    return stats_write(code,  uid,  uid_length, tag, arg3, arg4, arg5);
}


void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, const BytesField& arg1) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, const BytesField& arg1, const BytesField& arg2, const BytesField& arg3, const BytesField& arg4, const BytesField& arg5, const BytesField& arg6, const BytesField& arg7, const BytesField& arg8, const BytesField& arg9, const BytesField& arg10, const BytesField& arg11, const BytesField& arg12, const BytesField& arg13, const BytesField& arg14) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg3.arg), arg3.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg9.arg), arg9.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg10.arg), arg10.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg11.arg), arg11.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg12.arg), arg12.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg13.arg), arg13.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg14.arg), arg14.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, const BytesField& arg1, int32_t arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, const BytesField& arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg1.arg), arg1.arg_length);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, bool arg1, bool arg2, bool arg3, bool arg4, bool arg5, bool arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, bool arg1, bool arg2, bool arg3, bool arg4, bool arg5, int32_t arg6, int32_t arg7, const BytesField& arg8, const BytesField& arg9, const BytesField& arg10) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeBool(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg9.arg), arg9.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg10.arg), arg10.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (INSTALLED_INCREMENTAL_PACKAGE == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, const BytesField& arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CAR_WATCHDOG_UID_IO_USAGE_SUMMARY == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, bool arg3, int32_t arg4, int32_t arg5, int32_t arg6, bool arg7, int32_t arg8, bool arg9, int64_t arg10, bool arg11, int32_t arg12, bool arg13, int32_t arg14, int32_t arg15, int32_t arg16, int64_t arg17, bool arg18, int32_t arg19) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt64(event, arg17);
    AStatsEvent_writeBool(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, bool arg3, int32_t arg4, char const* arg5, int32_t arg6, const BytesField& arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    if (DND_MODE_RULE == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6, char const* arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, int32_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (OEM_MANAGED_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    if (BYTES_TRANSFER_BY_TAG_AND_METERED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    if (BYTES_TRANSFER_BY_TAG_AND_METERED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, bool arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    if (MOBILE_BYTES_TRANSFER_BY_FG_BG == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    if (WIFI_BYTES_TRANSFER_BY_FG_BG == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (MOBILE_BYTES_TRANSFER_BY_FG_BG == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, bool arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, bool arg3, float arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, bool arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PACKAGE_NOTIFICATION_PREFERENCES == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, const BytesField& arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (GENERAL_EXTERNAL_STORAGE_ACCESS_STATS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, int32_t arg6, bool arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, int32_t arg6, int32_t arg7, char const* arg8, int32_t arg9, int32_t arg10, int64_t arg11, int64_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, bool arg16, bool arg17, int32_t arg18, bool arg19, int64_t arg20, int64_t arg21, bool arg22, bool arg23, bool arg24, int32_t arg25, int32_t arg26, int32_t arg27, int32_t arg28, int32_t arg29, bool arg30, int32_t arg31, bool arg32) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeBool(event, arg16);
    AStatsEvent_writeBool(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeBool(event, arg19);
    AStatsEvent_writeInt64(event, arg20);
    AStatsEvent_writeInt64(event, arg21);
    AStatsEvent_writeBool(event, arg22);
    AStatsEvent_writeBool(event, arg23);
    AStatsEvent_writeBool(event, arg24);
    AStatsEvent_writeInt32(event, arg25);
    AStatsEvent_writeInt32(event, arg26);
    AStatsEvent_writeInt32(event, arg27);
    AStatsEvent_writeInt32(event, arg28);
    AStatsEvent_writeInt32(event, arg29);
    AStatsEvent_writeBool(event, arg30);
    AStatsEvent_writeInt32(event, arg31);
    AStatsEvent_writeBool(event, arg32);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, bool arg6, bool arg7, bool arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, bool arg6, bool arg7, int32_t arg8, bool arg9, bool arg10, int32_t arg11, int64_t arg12, int32_t arg13) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, bool arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, bool arg7, int32_t arg8, bool arg9, int32_t arg10, bool arg11, bool arg12, int32_t arg13, int64_t arg14) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeBool(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (VMS_CLIENT_STATS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, char const* arg5, char const* arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, bool arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    if (LAUNCHER_LAYOUT_SNAPSHOT == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeBool(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, float arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeFloat(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, char const* arg4, char const* arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, int32_t arg19, int32_t arg20, int32_t arg21) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CPU_TIME_PER_THREAD_FREQ == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CPU_TIME_PER_UID_FREQ == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (CPU_CLUSTER_TIME == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CPU_CYCLES_PER_UID_CLUSTER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CPU_ACTIVE_TIME == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (DEVICE_CALCULATED_POWER_BLAME_UID == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2, const BytesField& arg3, const BytesField& arg4, const BytesField& arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg3.arg), arg3.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (BLUETOOTH_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (CPU_TIME_PER_UID == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    if (MOBILE_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    if (WIFI_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    if (MOBILE_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t arg6, char const* arg7, char const* arg8, int32_t arg9, int32_t arg10, bool arg11) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    if (DATA_USAGE_BYTES_TRANSFER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_TRUNCATE_TIMESTAMP, true);
    }
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (DISK_IO == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_SYSTEM_ION_HEAP_SIZE == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_DMABUF_MEMORY == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_MEMORY_SNAPSHOT == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, bool arg10) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_OPS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int32_t arg11) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_MEMORY_STATE == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int64_t arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_MEMORY_HIGH_WATER_MARK == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PROCESS_CPU_TIME == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ROLE_HOLDER == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, int32_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, bool arg11, int32_t arg12) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ATTRIBUTED_APP_OPS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeBool(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, bool arg13, int32_t arg14) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (BINDER_CALLS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, bool arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int32_t arg5, int32_t arg6, bool arg7, bool arg8, bool arg9, bool arg10) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_writeBool(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, bool arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (LOOPER_STATS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, char const* arg5, int32_t arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (RUNTIME_APP_OP_ACCESS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, const BytesField& arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, bool arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeBool(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int32_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, const BytesField& arg4, const BytesField& arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t arg6, const BytesField& arg7, const BytesField& arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, const BytesField& arg19, const BytesField& arg20, int32_t arg21) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg19.arg), arg19.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg20.arg), arg20.arg_length);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeInt64(event, arg16);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int32_t arg2, bool arg3, int32_t arg4, int32_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (DANGEROUS_PERMISSION_STATE_SAMPLED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int32_t arg2, bool arg3, int32_t arg4, float arg5, char const* arg6, int32_t arg7) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeFloat(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int32_t arg2, int32_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int32_t arg2, char const* arg3, bool arg4, int32_t arg5, int32_t arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt32(event, arg2);
    if (DANGEROUS_PERMISSION_STATE == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2, const BytesField& arg3, const BytesField& arg4, const BytesField& arg5, bool arg6, bool arg7, bool arg8) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg3.arg), arg3.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeBool(event, arg6);
    AStatsEvent_writeBool(event, arg7);
    AStatsEvent_writeBool(event, arg8);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2, int64_t arg3, const BytesField& arg4, const BytesField& arg5, const BytesField& arg6, const BytesField& arg7, const BytesField& arg8, const BytesField& arg9, int64_t arg10, int64_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, int32_t arg15, int32_t arg16, int32_t arg17, int32_t arg18, int32_t arg19, int32_t arg20, int32_t arg21, int32_t arg22, int32_t arg23, const BytesField& arg24, const BytesField& arg25, int32_t arg26) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg4.arg), arg4.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg8.arg), arg8.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg9.arg), arg9.arg_length);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    if (SURFACEFLINGER_STATS_LAYER_INFO == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_writeInt32(event, arg15);
    AStatsEvent_writeInt32(event, arg16);
    AStatsEvent_writeInt32(event, arg17);
    AStatsEvent_writeInt32(event, arg18);
    AStatsEvent_writeInt32(event, arg19);
    AStatsEvent_writeInt32(event, arg20);
    AStatsEvent_writeInt32(event, arg21);
    AStatsEvent_writeInt32(event, arg22);
    AStatsEvent_writeInt32(event, arg23);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg24.arg), arg24.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg25.arg), arg25.arg_length);
    AStatsEvent_writeInt32(event, arg26);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, const BytesField& arg13, const BytesField& arg14, int64_t arg15, bool arg16) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt32(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeInt32(event, arg7);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt32(event, arg12);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg13.arg), arg13.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg14.arg), arg14.arg_length);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_writeBool(event, arg16);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, int64_t arg2, char const* arg3, char const* arg4, const BytesField& arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg5.arg), arg5.arg_length);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, char const* arg2, int64_t arg3, int64_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, char const* arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int64_t arg12, int64_t arg13) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeInt32(event, arg10);
    AStatsEvent_writeInt32(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, char const* arg1, char const* arg2, char const* arg3, char const* arg4, char const* arg5, char const* arg6, char const* arg7, char const* arg8, char const* arg9) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeString(event, arg6);
    AStatsEvent_writeString(event, arg7);
    AStatsEvent_writeString(event, arg8);
    AStatsEvent_writeString(event, arg9);
    AStatsEvent_build(event);
}


} // namespace util
} // namespace android
