// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/os/enums.proto

#include "frameworks/proto_logging/stats/enums/os/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace os {
}  // namespace os
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3frameworks/proto_logging/stats/enums/o"
  "s/enums.proto\022\nandroid.os*\374\001\n\021BatteryHea"
  "lthEnum\022\032\n\026BATTERY_HEALTH_INVALID\020\000\022\032\n\026B"
  "ATTERY_HEALTH_UNKNOWN\020\001\022\027\n\023BATTERY_HEALT"
  "H_GOOD\020\002\022\033\n\027BATTERY_HEALTH_OVERHEAT\020\003\022\027\n"
  "\023BATTERY_HEALTH_DEAD\020\004\022\037\n\033BATTERY_HEALTH"
  "_OVER_VOLTAGE\020\005\022&\n\"BATTERY_HEALTH_UNSPEC"
  "IFIED_FAILURE\020\006\022\027\n\023BATTERY_HEALTH_COLD\020\007"
  "*\202\001\n\027BatteryPluggedStateEnum\022\030\n\024BATTERY_"
  "PLUGGED_NONE\020\000\022\026\n\022BATTERY_PLUGGED_AC\020\001\022\027"
  "\n\023BATTERY_PLUGGED_USB\020\002\022\034\n\030BATTERY_PLUGG"
  "ED_WIRELESS\020\004*\302\001\n\021BatteryStatusEnum\022\032\n\026B"
  "ATTERY_STATUS_INVALID\020\000\022\032\n\026BATTERY_STATU"
  "S_UNKNOWN\020\001\022\033\n\027BATTERY_STATUS_CHARGING\020\002"
  "\022\036\n\032BATTERY_STATUS_DISCHARGING\020\003\022\037\n\033BATT"
  "ERY_STATUS_NOT_CHARGING\020\004\022\027\n\023BATTERY_STA"
  "TUS_FULL\020\005*\273\004\n\022PowerComponentEnum\022\032\n\026POW"
  "ER_COMPONENT_SCREEN\020\000\022\027\n\023POWER_COMPONENT"
  "_CPU\020\001\022\035\n\031POWER_COMPONENT_BLUETOOTH\020\002\022\032\n"
  "\026POWER_COMPONENT_CAMERA\020\003\022\031\n\025POWER_COMPO"
  "NENT_AUDIO\020\004\022\031\n\025POWER_COMPONENT_VIDEO\020\005\022"
  "\036\n\032POWER_COMPONENT_FLASHLIGHT\020\006\022#\n\037POWER"
  "_COMPONENT_SYSTEM_SERVICES\020\007\022 \n\034POWER_CO"
  "MPONENT_MOBILE_RADIO\020\010\022\033\n\027POWER_COMPONEN"
  "T_SENSORS\020\t\022\030\n\024POWER_COMPONENT_GNSS\020\n\022\030\n"
  "\024POWER_COMPONENT_WIFI\020\013\022\034\n\030POWER_COMPONE"
  "NT_WAKELOCK\020\014\022\032\n\026POWER_COMPONENT_MEMORY\020"
  "\r\022\031\n\025POWER_COMPONENT_PHONE\020\016\022#\n\037POWER_CO"
  "MPONENT_AMBIENT_DISPLAY\020\017\022\030\n\024POWER_COMPO"
  "NENT_IDLE\020\020\0223\n/POWER_COMPONENT_REATTRIBU"
  "TED_TO_OTHER_CONSUMERS\020\021*\361\002\n\023Temperature"
  "TypeEnum\022%\n\030TEMPERATURE_TYPE_UNKNOWN\020\377\377\377"
  "\377\377\377\377\377\377\001\022\030\n\024TEMPERATURE_TYPE_CPU\020\000\022\030\n\024TEM"
  "PERATURE_TYPE_GPU\020\001\022\034\n\030TEMPERATURE_TYPE_"
  "BATTERY\020\002\022\031\n\025TEMPERATURE_TYPE_SKIN\020\003\022\035\n\031"
  "TEMPERATURE_TYPE_USB_PORT\020\004\022$\n TEMPERATU"
  "RE_TYPE_POWER_AMPLIFIER\020\005\022 \n\034TEMPERATURE"
  "_TYPE_BCL_VOLTAGE\020\006\022 \n\034TEMPERATURE_TYPE_"
  "BCL_CURRENT\020\007\022#\n\037TEMPERATURE_TYPE_BCL_PE"
  "RCENTAGE\020\010\022\030\n\024TEMPERATURE_TYPE_NPU\020\t*r\n\026"
  "ThrottlingSeverityEnum\022\010\n\004NONE\020\000\022\t\n\005LIGH"
  "T\020\001\022\014\n\010MODERATE\020\002\022\n\n\006SEVERE\020\003\022\014\n\010CRITICA"
  "L\020\004\022\r\n\tEMERGENCY\020\005\022\014\n\010SHUTDOWN\020\006*\\\n\017Cool"
  "ingTypeEnum\022\007\n\003FAN\020\000\022\013\n\007BATTERY\020\001\022\007\n\003CPU"
  "\020\002\022\007\n\003GPU\020\003\022\t\n\005MODEM\020\004\022\007\n\003NPU\020\005\022\r\n\tCOMPO"
  "NENT\020\006*\316\001\n\021WakeLockLevelEnum\022\025\n\021PARTIAL_"
  "WAKE_LOCK\020\001\022\034\n\024SCREEN_DIM_WAKE_LOCK\020\006\032\002\010"
  "\001\022\037\n\027SCREEN_BRIGHT_WAKE_LOCK\020\n\032\002\010\001\022\026\n\016FU"
  "LL_WAKE_LOCK\020\032\032\002\010\001\022\"\n\036PROXIMITY_SCREEN_O"
  "FF_WAKE_LOCK\020 \022\022\n\016DOZE_WAKE_LOCK\020@\022\023\n\016DR"
  "AW_WAKE_LOCK\020\200\001B\020B\014OsProtoEnumsP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto, "frameworks/proto_logging/stats/enums/os/enums.proto", 2033,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto), true);
namespace android {
namespace os {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryHealthEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[0];
}
bool BatteryHealthEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryPluggedStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[1];
}
bool BatteryPluggedStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryStatusEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[2];
}
bool BatteryStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerComponentEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[3];
}
bool PowerComponentEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TemperatureTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[4];
}
bool TemperatureTypeEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThrottlingSeverityEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[5];
}
bool ThrottlingSeverityEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoolingTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[6];
}
bool CoolingTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WakeLockLevelEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fos_2fenums_2eproto[7];
}
bool WakeLockLevelEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 6:
    case 10:
    case 26:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
