// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/dnsresolver/dns_resolver.proto

#include "frameworks/proto_logging/stats/enums/stats/dnsresolver/dns_resolver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto;
namespace android {
namespace stats {
namespace dnsresolver {
class DnsQueryEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsQueryEvent> _instance;
} _DnsQueryEvent_default_instance_;
class DnsQueryEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsQueryEvents> _instance;
} _DnsQueryEvents_default_instance_;
}  // namespace dnsresolver
}  // namespace stats
}  // namespace android
static void InitDefaultsscc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::stats::dnsresolver::_DnsQueryEvent_default_instance_;
    new (ptr) ::android::stats::dnsresolver::DnsQueryEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::stats::dnsresolver::DnsQueryEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto}, {}};

static void InitDefaultsscc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::stats::dnsresolver::_DnsQueryEvents_default_instance_;
    new (ptr) ::android::stats::dnsresolver::DnsQueryEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::stats::dnsresolver::DnsQueryEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto}, {
      &scc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, rcode_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, type_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, cache_hit_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, ip_version_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, protocol_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, retry_times_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, dns_server_index_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, connected_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, latency_micros_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvent, linux_errno_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::android::stats::dnsresolver::DnsQueryEvents, dns_query_event_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::android::stats::dnsresolver::DnsQueryEvent)},
  { 25, 31, sizeof(::android::stats::dnsresolver::DnsQueryEvents)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::stats::dnsresolver::_DnsQueryEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::stats::dnsresolver::_DnsQueryEvents_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nIframeworks/proto_logging/stats/enums/s"
  "tats/dnsresolver/dns_resolver.proto\022\031and"
  "roid.stats.dnsresolver\"\265\003\n\rDnsQueryEvent"
  "\0221\n\005rcode\030\001 \001(\0162\".android.stats.dnsresol"
  "ver.NsRcode\022/\n\004type\030\002 \001(\0162!.android.stat"
  "s.dnsresolver.NsType\0229\n\tcache_hit\030\003 \001(\0162"
  "&.android.stats.dnsresolver.CacheStatus\022"
  "8\n\nip_version\030\004 \001(\0162$.android.stats.dnsr"
  "esolver.IpVersion\0225\n\010protocol\030\005 \001(\0162#.an"
  "droid.stats.dnsresolver.Protocol\022\023\n\013retr"
  "y_times\030\006 \001(\005\022\030\n\020dns_server_index\030\007 \001(\005\022"
  "\021\n\tconnected\030\010 \001(\010\022\026\n\016latency_micros\030\t \001"
  "(\005\022:\n\013linux_errno\030\n \001(\0162%.android.stats."
  "dnsresolver.LinuxErrno\"S\n\016DnsQueryEvents"
  "\022A\n\017dns_query_event\030\001 \003(\0132(.android.stat"
  "s.dnsresolver.DnsQueryEvent*|\n\tEventType"
  "\022\021\n\rEVENT_UNKNOWN\020\000\022\025\n\021EVENT_GETADDRINFO"
  "\020\001\022\027\n\023EVENT_GETHOSTBYNAME\020\002\022\027\n\023EVENT_GET"
  "HOSTBYADDR\020\003\022\023\n\017EVENT_RES_NSEND\020\004*\377\002\n\nRe"
  "turnCode\022\023\n\017RC_EAI_NO_ERROR\020\000\022\025\n\021RC_EAI_"
  "ADDRFAMILY\020\001\022\020\n\014RC_EAI_AGAIN\020\002\022\023\n\017RC_EAI"
  "_BADFLAGS\020\003\022\017\n\013RC_EAI_FAIL\020\004\022\021\n\rRC_EAI_F"
  "AMILY\020\005\022\021\n\rRC_EAI_MEMORY\020\006\022\021\n\rRC_EAI_NOD"
  "ATA\020\007\022\021\n\rRC_EAI_NONAME\020\010\022\022\n\016RC_EAI_SERVI"
  "CE\020\t\022\023\n\017RC_EAI_SOCKTYPE\020\n\022\021\n\rRC_EAI_SYST"
  "EM\020\013\022\023\n\017RC_EAI_BADHINTS\020\014\022\023\n\017RC_EAI_PROT"
  "OCOL\020\r\022\023\n\017RC_EAI_OVERFLOW\020\016\022\035\n\030RC_RESOLV"
  "_INTERNAL_ERROR\020\376\001\022\026\n\021RC_RESOLV_TIMEOUT\020"
  "\377\001\022\017\n\nRC_EAI_MAX\020\200\002*\237\003\n\007NsRcode\022\021\n\rNS_R_"
  "NO_ERROR\020\000\022\020\n\014NS_R_FORMERR\020\001\022\021\n\rNS_R_SER"
  "VFAIL\020\002\022\021\n\rNS_R_NXDOMAIN\020\003\022\020\n\014NS_R_NOTIM"
  "PL\020\004\022\020\n\014NS_R_REFUSED\020\005\022\021\n\rNS_R_YXDOMAIN\020"
  "\006\022\020\n\014NS_R_YXRRSET\020\007\022\020\n\014NS_R_NXRRSET\020\010\022\020\n"
  "\014NS_R_NOTAUTH\020\t\022\020\n\014NS_R_NOTZONE\020\n\022\014\n\010NS_"
  "R_MAX\020\013\022\025\n\021NS_R_UNASSIGNED12\020\014\022\025\n\021NS_R_U"
  "NASSIGNED13\020\r\022\025\n\021NS_R_UNASSIGNED14\020\016\022\025\n\021"
  "NS_R_UNASSIGNED15\020\017\022\020\n\014NS_R_BADVERS\020\020\022\017\n"
  "\013NS_R_BADKEY\020\021\022\020\n\014NS_R_BADTIME\020\022\022\030\n\023NS_R"
  "_INTERNAL_ERROR\020\376\001\022\021\n\014NS_R_TIMEOUT\020\377\001*\306\007"
  "\n\006NsType\022\020\n\014NS_T_INVALID\020\000\022\n\n\006NS_T_A\020\001\022\013"
  "\n\007NS_T_NS\020\002\022\013\n\007NS_T_MD\020\003\022\013\n\007NS_T_MF\020\004\022\016\n"
  "\nNS_T_CNAME\020\005\022\014\n\010NS_T_SOA\020\006\022\013\n\007NS_T_MB\020\007"
  "\022\013\n\007NS_T_MG\020\010\022\013\n\007NS_T_MR\020\t\022\r\n\tNS_T_NULL\020"
  "\n\022\014\n\010NS_T_WKS\020\013\022\014\n\010NS_T_PTR\020\014\022\016\n\nNS_T_HI"
  "NFO\020\r\022\016\n\nNS_T_MINFO\020\016\022\013\n\007NS_T_MX\020\017\022\014\n\010NS"
  "_T_TXT\020\020\022\013\n\007NS_T_RP\020\021\022\016\n\nNS_T_AFSDB\020\022\022\014\n"
  "\010NS_T_X25\020\023\022\r\n\tNS_T_ISDN\020\024\022\013\n\007NS_T_RT\020\025\022"
  "\r\n\tNS_T_NSAP\020\026\022\021\n\rNS_T_NSAP_PTR\020\027\022\014\n\010NS_"
  "T_SIG\020\030\022\014\n\010NS_T_KEY\020\031\022\013\n\007NS_T_PX\020\032\022\r\n\tNS"
  "_T_GPOS\020\033\022\r\n\tNS_T_AAAA\020\034\022\014\n\010NS_T_LOC\020\035\022\014"
  "\n\010NS_T_NXT\020\036\022\014\n\010NS_T_EID\020\037\022\017\n\013NS_T_NIMLO"
  "C\020 \022\014\n\010NS_T_SRV\020!\022\r\n\tNS_T_ATMA\020\"\022\016\n\nNS_T"
  "_NAPTR\020#\022\013\n\007NS_T_KX\020$\022\r\n\tNS_T_CERT\020%\022\013\n\007"
  "NS_T_A6\020&\022\016\n\nNS_T_DNAME\020\'\022\r\n\tNS_T_SINK\020("
  "\022\014\n\010NS_T_OPT\020)\022\014\n\010NS_T_APL\020*\022\013\n\007NS_T_DS\020"
  "+\022\016\n\nNS_T_SSHFP\020,\022\021\n\rNS_T_IPSECKEY\020-\022\016\n\n"
  "NS_T_RRSIG\020.\022\r\n\tNS_T_NSEC\020/\022\017\n\013NS_T_DNSK"
  "EY\0200\022\016\n\nNS_T_DHCID\0201\022\016\n\nNS_T_NSEC3\0202\022\023\n\017"
  "NS_T_NSEC3PARAM\0203\022\014\n\010NS_T_HIP\0207\022\014\n\010NS_T_"
  "SPF\020c\022\016\n\tNS_T_TKEY\020\371\001\022\016\n\tNS_T_TSIG\020\372\001\022\016\n"
  "\tNS_T_IXFR\020\373\001\022\016\n\tNS_T_AXFR\020\374\001\022\017\n\nNS_T_MA"
  "ILB\020\375\001\022\017\n\nNS_T_MAILA\020\376\001\022\r\n\010NS_T_ANY\020\377\001\022\016"
  "\n\tNS_T_ZXFR\020\200\002\022\016\n\010NS_T_DLV\020\201\200\002\022\016\n\010NS_T_M"
  "AX\020\200\200\004*5\n\tIpVersion\022\016\n\nIV_UNKNOWN\020\000\022\013\n\007I"
  "V_IPV4\020\001\022\013\n\007IV_IPV6\020\002*Y\n\010Protocol\022\021\n\rPRO"
  "TO_UNKNOWN\020\000\022\r\n\tPROTO_UDP\020\001\022\r\n\tPROTO_TCP"
  "\020\002\022\r\n\tPROTO_DOT\020\003\022\r\n\tPROTO_DOH\020\004*V\n\017Priv"
  "ateDnsModes\022\017\n\013PDM_UNKNOWN\020\000\022\013\n\007PDM_OFF\020"
  "\001\022\025\n\021PDM_OPPORTUNISTIC\020\002\022\016\n\nPDM_STRICT\020\003"
  "*\373\001\n\013NetworkType\022\016\n\nNT_UNKNOWN\020\000\022\017\n\013NT_C"
  "ELLULAR\020\001\022\013\n\007NT_WIFI\020\002\022\020\n\014NT_BLUETOOTH\020\003"
  "\022\017\n\013NT_ETHERNET\020\004\022\016\n\006NT_VPN\020\005\032\002\010\001\022\021\n\rNT_"
  "WIFI_AWARE\020\006\022\r\n\tNT_LOWPAN\020\007\022\023\n\017NT_CELLUL"
  "AR_VPN\020\010\022\017\n\013NT_WIFI_VPN\020\t\022\024\n\020NT_BLUETOOT"
  "H_VPN\020\n\022\023\n\017NT_ETHERNET_VPN\020\013\022\030\n\024NT_WIFI_"
  "CELLULAR_VPN\020\014*M\n\013CacheStatus\022\022\n\016CS_UNSU"
  "PPORTED\020\000\022\017\n\013CS_NOTFOUND\020\001\022\014\n\010CS_FOUND\020\002"
  "\022\013\n\007CS_SKIP\020\003*\224\022\n\nLinuxErrno\022\020\n\014SYS_NO_E"
  "RROR\020\000\022\r\n\tSYS_EPERM\020\001\022\016\n\nSYS_ENOENT\020\002\022\r\n"
  "\tSYS_ESRCH\020\003\022\r\n\tSYS_EINTR\020\004\022\013\n\007SYS_EIO\020\005"
  "\022\r\n\tSYS_ENXIO\020\006\022\r\n\tSYS_E2BIG\020\007\022\017\n\013SYS_EN"
  "OEXEC\020\010\022\r\n\tSYS_EBADF\020\t\022\016\n\nSYS_ECHILD\020\n\022\016"
  "\n\nSYS_EAGAIN\020\013\022\016\n\nSYS_ENOMEM\020\014\022\016\n\nSYS_EA"
  "CCES\020\r\022\016\n\nSYS_EFAULT\020\016\022\017\n\013SYS_ENOTBLK\020\017\022"
  "\r\n\tSYS_EBUSY\020\020\022\016\n\nSYS_EEXIST\020\021\022\r\n\tSYS_EX"
  "DEV\020\022\022\016\n\nSYS_ENODEV\020\023\022\017\n\013SYS_ENOTDIR\020\024\022\016"
  "\n\nSYS_EISDIR\020\025\022\016\n\nSYS_EINVAL\020\026\022\016\n\nSYS_EN"
  "FILE\020\027\022\016\n\nSYS_EMFILE\020\030\022\016\n\nSYS_ENOTTY\020\031\022\017"
  "\n\013SYS_ETXTBSY\020\032\022\r\n\tSYS_EFBIG\020\033\022\016\n\nSYS_EN"
  "OSPC\020\034\022\016\n\nSYS_ESPIPE\020\035\022\r\n\tSYS_EROFS\020\036\022\016\n"
  "\nSYS_EMLINK\020\037\022\r\n\tSYS_EPIPE\020 \022\014\n\010SYS_EDOM"
  "\020!\022\016\n\nSYS_ERANGE\020\"\022\021\n\rSYS_EDEADLOCK\020#\022\024\n"
  "\020SYS_ENAMETOOLONG\020$\022\016\n\nSYS_ENOLCK\020%\022\016\n\nS"
  "YS_ENOSYS\020&\022\021\n\rSYS_ENOTEMPTY\020\'\022\r\n\tSYS_EL"
  "OOP\020(\022\016\n\nSYS_ENOMSG\020*\022\r\n\tSYS_EIDRM\020+\022\016\n\n"
  "SYS_ECHRNG\020,\022\020\n\014SYS_EL2NSYNC\020-\022\016\n\nSYS_EL"
  "3HLT\020.\022\016\n\nSYS_EL3RST\020/\022\016\n\nSYS_ELNRNG\0200\022\017"
  "\n\013SYS_EUNATCH\0201\022\016\n\nSYS_ENOCSI\0202\022\016\n\nSYS_E"
  "L2HLT\0203\022\r\n\tSYS_EBADE\0204\022\r\n\tSYS_EBADR\0205\022\016\n"
  "\nSYS_EXFULL\0206\022\016\n\nSYS_ENOANO\0207\022\017\n\013SYS_EBA"
  "DRQC\0208\022\017\n\013SYS_EBADSLT\0209\022\016\n\nSYS_EBFONT\020;\022"
  "\016\n\nSYS_ENOSTR\020<\022\017\n\013SYS_ENODATA\020=\022\r\n\tSYS_"
  "ETIME\020>\022\r\n\tSYS_ENOSR\020\?\022\016\n\nSYS_ENONET\020@\022\016"
  "\n\nSYS_ENOPKG\020A\022\017\n\013SYS_EREMOTE\020B\022\017\n\013SYS_E"
  "NOLINK\020C\022\014\n\010SYS_EADV\020D\022\016\n\nSYS_ESRMNT\020E\022\r"
  "\n\tSYS_ECOMM\020F\022\016\n\nSYS_EPROTO\020G\022\021\n\rSYS_EMU"
  "LTIHOP\020H\022\017\n\013SYS_EDOTDOT\020I\022\017\n\013SYS_EBADMSG"
  "\020J\022\021\n\rSYS_EOVERFLOW\020K\022\020\n\014SYS_ENOTUNIQ\020L\022"
  "\016\n\nSYS_EBADFD\020M\022\017\n\013SYS_EREMCHG\020N\022\017\n\013SYS_"
  "ELIBACC\020O\022\017\n\013SYS_ELIBBAD\020P\022\017\n\013SYS_ELIBSC"
  "N\020Q\022\017\n\013SYS_ELIBMAX\020R\022\020\n\014SYS_ELIBEXEC\020S\022\016"
  "\n\nSYS_EILSEQ\020T\022\020\n\014SYS_ERESTART\020U\022\020\n\014SYS_"
  "ESTRPIPE\020V\022\016\n\nSYS_EUSERS\020W\022\020\n\014SYS_ENOTSO"
  "CK\020X\022\024\n\020SYS_EDESTADDRREQ\020Y\022\020\n\014SYS_EMSGSI"
  "ZE\020Z\022\022\n\016SYS_EPROTOTYPE\020[\022\023\n\017SYS_ENOPROTO"
  "OPT\020\\\022\027\n\023SYS_EPROTONOSUPPORT\020]\022\027\n\023SYS_ES"
  "OCKTNOSUPPORT\020^\022\022\n\016SYS_EOPNOTSUPP\020_\022\024\n\020S"
  "YS_EPFNOSUPPORT\020`\022\024\n\020SYS_EAFNOSUPPORT\020a\022"
  "\022\n\016SYS_EADDRINUSE\020b\022\025\n\021SYS_EADDRNOTAVAIL"
  "\020c\022\020\n\014SYS_ENETDOWN\020d\022\023\n\017SYS_ENETUNREACH\020"
  "e\022\021\n\rSYS_ENETRESET\020f\022\024\n\020SYS_ECONNABORTED"
  "\020g\022\022\n\016SYS_ECONNRESET\020h\022\017\n\013SYS_ENOBUFS\020i\022"
  "\017\n\013SYS_EISCONN\020j\022\020\n\014SYS_ENOTCONN\020k\022\021\n\rSY"
  "S_ESHUTDOWN\020l\022\024\n\020SYS_ETOOMANYREFS\020m\022\021\n\rS"
  "YS_ETIMEDOUT\020n\022\024\n\020SYS_ECONNREFUSED\020o\022\021\n\r"
  "SYS_EHOSTDOWN\020p\022\024\n\020SYS_EHOSTUNREACH\020q\022\020\n"
  "\014SYS_EALREADY\020r\022\023\n\017SYS_EINPROGRESS\020s\022\016\n\n"
  "SYS_ESTALE\020t\022\017\n\013SYS_EUCLEAN\020u\022\017\n\013SYS_ENO"
  "TNAM\020v\022\017\n\013SYS_ENAVAIL\020w\022\016\n\nSYS_EISNAM\020x\022"
  "\021\n\rSYS_EREMOTEIO\020y\022\016\n\nSYS_EDQUOT\020z\022\021\n\rSY"
  "S_ENOMEDIUM\020{\022\023\n\017SYS_EMEDIUMTYPE\020|\022\021\n\rSY"
  "S_ECANCELED\020}\022\016\n\nSYS_ENOKEY\020~\022\023\n\017SYS_EKE"
  "YEXPIRED\020\177\022\024\n\017SYS_EKEYREVOKED\020\200\001\022\025\n\020SYS_"
  "EKEYREJECTED\020\201\001\022\023\n\016SYS_EOWNERDEAD\020\202\001\022\030\n\023"
  "SYS_ENOTRECOVERABLE\020\203\001\022\020\n\013SYS_ERFKILL\020\204\001"
  "\022\022\n\rSYS_EHWPOISON\020\205\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_sccs[2] = {
  &scc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base,
  &scc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto, "frameworks/proto_logging/stats/enums/stats/dnsresolver/dns_resolver.proto", 5420,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto, 2, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto), true);
namespace android {
namespace stats {
namespace dnsresolver {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[1];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 254:
    case 255:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NsRcode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[2];
}
bool NsRcode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[3];
}
bool NsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 99:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 32769:
    case 65536:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[4];
}
bool IpVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[5];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrivateDnsModes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[6];
}
bool PrivateDnsModes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[7];
}
bool NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CacheStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[8];
}
bool CacheStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinuxErrno_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto[9];
}
bool LinuxErrno_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DnsQueryEvent::InitAsDefaultInstance() {
}
class DnsQueryEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DnsQueryEvent>()._has_bits_);
  static void set_has_rcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cache_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ip_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_retry_times(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dns_server_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_latency_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_linux_errno(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

DnsQueryEvent::DnsQueryEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.stats.dnsresolver.DnsQueryEvent)
}
DnsQueryEvent::DnsQueryEvent(const DnsQueryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rcode_, &from.rcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&linux_errno_) -
    reinterpret_cast<char*>(&rcode_)) + sizeof(linux_errno_));
  // @@protoc_insertion_point(copy_constructor:android.stats.dnsresolver.DnsQueryEvent)
}

void DnsQueryEvent::SharedCtor() {
  ::memset(&rcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linux_errno_) -
      reinterpret_cast<char*>(&rcode_)) + sizeof(linux_errno_));
}

DnsQueryEvent::~DnsQueryEvent() {
  // @@protoc_insertion_point(destructor:android.stats.dnsresolver.DnsQueryEvent)
  SharedDtor();
}

void DnsQueryEvent::SharedDtor() {
}

void DnsQueryEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsQueryEvent& DnsQueryEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsQueryEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base);
  return *internal_default_instance();
}


void DnsQueryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:android.stats.dnsresolver.DnsQueryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connected_) -
        reinterpret_cast<char*>(&rcode_)) + sizeof(connected_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&latency_micros_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&linux_errno_) -
        reinterpret_cast<char*>(&latency_micros_)) + sizeof(linux_errno_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DnsQueryEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.stats.dnsresolver.NsRcode rcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::NsRcode_IsValid(val))) {
            set_rcode(static_cast<::android::stats::dnsresolver::NsRcode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.stats.dnsresolver.NsType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::NsType_IsValid(val))) {
            set_type(static_cast<::android::stats::dnsresolver::NsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::CacheStatus_IsValid(val))) {
            set_cache_hit(static_cast<::android::stats::dnsresolver::CacheStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::IpVersion_IsValid(val))) {
            set_ip_version(static_cast<::android::stats::dnsresolver::IpVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.stats.dnsresolver.Protocol protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::Protocol_IsValid(val))) {
            set_protocol(static_cast<::android::stats::dnsresolver::Protocol>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 retry_times = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_retry_times(&has_bits);
          retry_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dns_server_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dns_server_index(&has_bits);
          dns_server_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connected = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_micros = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_latency_micros(&has_bits);
          latency_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::stats::dnsresolver::LinuxErrno_IsValid(val))) {
            set_linux_errno(static_cast<::android::stats::dnsresolver::LinuxErrno>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DnsQueryEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.stats.dnsresolver.DnsQueryEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.stats.dnsresolver.NsRcode rcode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::NsRcode_IsValid(value)) {
            set_rcode(static_cast< ::android::stats::dnsresolver::NsRcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.stats.dnsresolver.NsType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::NsType_IsValid(value)) {
            set_type(static_cast< ::android::stats::dnsresolver::NsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::CacheStatus_IsValid(value)) {
            set_cache_hit(static_cast< ::android::stats::dnsresolver::CacheStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::IpVersion_IsValid(value)) {
            set_ip_version(static_cast< ::android::stats::dnsresolver::IpVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.stats.dnsresolver.Protocol protocol = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::Protocol_IsValid(value)) {
            set_protocol(static_cast< ::android::stats::dnsresolver::Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 retry_times = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_retry_times(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &retry_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dns_server_index = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_dns_server_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dns_server_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connected = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_connected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_micros = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_latency_micros(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::stats::dnsresolver::LinuxErrno_IsValid(value)) {
            set_linux_errno(static_cast< ::android::stats::dnsresolver::LinuxErrno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.stats.dnsresolver.DnsQueryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.stats.dnsresolver.DnsQueryEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DnsQueryEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.stats.dnsresolver.DnsQueryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.stats.dnsresolver.NsRcode rcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rcode(), output);
  }

  // optional .android.stats.dnsresolver.NsType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->cache_hit(), output);
  }

  // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ip_version(), output);
  }

  // optional .android.stats.dnsresolver.Protocol protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->protocol(), output);
  }

  // optional int32 retry_times = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->retry_times(), output);
  }

  // optional int32 dns_server_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->dns_server_index(), output);
  }

  // optional bool connected = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->connected(), output);
  }

  // optional int32 latency_micros = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->latency_micros(), output);
  }

  // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->linux_errno(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.stats.dnsresolver.DnsQueryEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsQueryEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.stats.dnsresolver.DnsQueryEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.stats.dnsresolver.NsRcode rcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->rcode(), target);
  }

  // optional .android.stats.dnsresolver.NsType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->cache_hit(), target);
  }

  // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ip_version(), target);
  }

  // optional .android.stats.dnsresolver.Protocol protocol = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->protocol(), target);
  }

  // optional int32 retry_times = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->retry_times(), target);
  }

  // optional int32 dns_server_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->dns_server_index(), target);
  }

  // optional bool connected = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->connected(), target);
  }

  // optional int32 latency_micros = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->latency_micros(), target);
  }

  // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->linux_errno(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.stats.dnsresolver.DnsQueryEvent)
  return target;
}

size_t DnsQueryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.stats.dnsresolver.DnsQueryEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.stats.dnsresolver.NsRcode rcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rcode());
    }

    // optional .android.stats.dnsresolver.NsType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cache_hit());
    }

    // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ip_version());
    }

    // optional .android.stats.dnsresolver.Protocol protocol = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 retry_times = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->retry_times());
    }

    // optional int32 dns_server_index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dns_server_index());
    }

    // optional bool connected = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 latency_micros = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_micros());
    }

    // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->linux_errno());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsQueryEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.stats.dnsresolver.DnsQueryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsQueryEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsQueryEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.stats.dnsresolver.DnsQueryEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.stats.dnsresolver.DnsQueryEvent)
    MergeFrom(*source);
  }
}

void DnsQueryEvent::MergeFrom(const DnsQueryEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.stats.dnsresolver.DnsQueryEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rcode_ = from.rcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cache_hit_ = from.cache_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      ip_version_ = from.ip_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      protocol_ = from.protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      retry_times_ = from.retry_times_;
    }
    if (cached_has_bits & 0x00000040u) {
      dns_server_index_ = from.dns_server_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      connected_ = from.connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      latency_micros_ = from.latency_micros_;
    }
    if (cached_has_bits & 0x00000200u) {
      linux_errno_ = from.linux_errno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DnsQueryEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.stats.dnsresolver.DnsQueryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsQueryEvent::CopyFrom(const DnsQueryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.stats.dnsresolver.DnsQueryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsQueryEvent::IsInitialized() const {
  return true;
}

void DnsQueryEvent::InternalSwap(DnsQueryEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rcode_, other->rcode_);
  swap(type_, other->type_);
  swap(cache_hit_, other->cache_hit_);
  swap(ip_version_, other->ip_version_);
  swap(protocol_, other->protocol_);
  swap(retry_times_, other->retry_times_);
  swap(dns_server_index_, other->dns_server_index_);
  swap(connected_, other->connected_);
  swap(latency_micros_, other->latency_micros_);
  swap(linux_errno_, other->linux_errno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsQueryEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnsQueryEvents::InitAsDefaultInstance() {
}
class DnsQueryEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<DnsQueryEvents>()._has_bits_);
};

DnsQueryEvents::DnsQueryEvents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.stats.dnsresolver.DnsQueryEvents)
}
DnsQueryEvents::DnsQueryEvents(const DnsQueryEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dns_query_event_(from.dns_query_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.stats.dnsresolver.DnsQueryEvents)
}

void DnsQueryEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base);
}

DnsQueryEvents::~DnsQueryEvents() {
  // @@protoc_insertion_point(destructor:android.stats.dnsresolver.DnsQueryEvents)
  SharedDtor();
}

void DnsQueryEvents::SharedDtor() {
}

void DnsQueryEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsQueryEvents& DnsQueryEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsQueryEvents_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fdnsresolver_2fdns_5fresolver_2eproto.base);
  return *internal_default_instance();
}


void DnsQueryEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:android.stats.dnsresolver.DnsQueryEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dns_query_event_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DnsQueryEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dns_query_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DnsQueryEvents::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.stats.dnsresolver.DnsQueryEvents)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dns_query_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.stats.dnsresolver.DnsQueryEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.stats.dnsresolver.DnsQueryEvents)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DnsQueryEvents::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.stats.dnsresolver.DnsQueryEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dns_query_event_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dns_query_event(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.stats.dnsresolver.DnsQueryEvents)
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsQueryEvents::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.stats.dnsresolver.DnsQueryEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dns_query_event_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dns_query_event(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.stats.dnsresolver.DnsQueryEvents)
  return target;
}

size_t DnsQueryEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.stats.dnsresolver.DnsQueryEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dns_query_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dns_query_event(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsQueryEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.stats.dnsresolver.DnsQueryEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsQueryEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsQueryEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.stats.dnsresolver.DnsQueryEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.stats.dnsresolver.DnsQueryEvents)
    MergeFrom(*source);
  }
}

void DnsQueryEvents::MergeFrom(const DnsQueryEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.stats.dnsresolver.DnsQueryEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dns_query_event_.MergeFrom(from.dns_query_event_);
}

void DnsQueryEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.stats.dnsresolver.DnsQueryEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsQueryEvents::CopyFrom(const DnsQueryEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.stats.dnsresolver.DnsQueryEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsQueryEvents::IsInitialized() const {
  return true;
}

void DnsQueryEvents::InternalSwap(DnsQueryEvents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&dns_query_event_)->InternalSwap(CastToBase(&other->dns_query_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsQueryEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dnsresolver
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::stats::dnsresolver::DnsQueryEvent* Arena::CreateMaybeMessage< ::android::stats::dnsresolver::DnsQueryEvent >(Arena* arena) {
  return Arena::CreateInternal< ::android::stats::dnsresolver::DnsQueryEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::android::stats::dnsresolver::DnsQueryEvents* Arena::CreateMaybeMessage< ::android::stats::dnsresolver::DnsQueryEvents >(Arena* arena) {
  return Arena::CreateInternal< ::android::stats::dnsresolver::DnsQueryEvents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
