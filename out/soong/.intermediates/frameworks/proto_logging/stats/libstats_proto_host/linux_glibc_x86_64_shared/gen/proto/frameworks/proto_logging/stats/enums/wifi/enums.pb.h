// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/wifi/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace net {
namespace wifi {

enum WifiModeEnum : int {
  WIFI_MODE_FULL PROTOBUF_DEPRECATED = 1,
  WIFI_MODE_SCAN_ONLY PROTOBUF_DEPRECATED = 2,
  WIFI_MODE_FULL_HIGH_PERF = 3,
  WIFI_MODE_FULL_LOW_LATENCY = 4
};
bool WifiModeEnum_IsValid(int value);
constexpr WifiModeEnum WifiModeEnum_MIN = WIFI_MODE_FULL;
constexpr WifiModeEnum WifiModeEnum_MAX = WIFI_MODE_FULL_LOW_LATENCY;
constexpr int WifiModeEnum_ARRAYSIZE = WifiModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiModeEnum_descriptor();
template<typename T>
inline const std::string& WifiModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WifiModeEnum_descriptor(), enum_t_value);
}
inline bool WifiModeEnum_Parse(
    const std::string& name, WifiModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WifiModeEnum>(
    WifiModeEnum_descriptor(), name, value);
}
enum WifiAuthType : int {
  AUTH_TYPE_NONE = 0,
  AUTH_TYPE_WPA_PSK = 1,
  AUTH_TYPE_WPA_EAP = 2,
  AUTH_TYPE_IEEE8021X = 3,
  AUTH_TYPE_WPA2_PSK = 4,
  AUTH_TYPE_OSEN = 5,
  AUTH_TYPE_FT_PSK = 6,
  AUTH_TYPE_FT_EAP = 7,
  AUTH_TYPE_SAE = 8,
  AUTH_TYPE_OWE = 9,
  AUTH_TYPE_SUITE_B_192 = 10,
  AUTH_TYPE_WPA_PSK_SHA256 = 11,
  AUTH_TYPE_WPA_EAP_SHA256 = 12,
  AUTH_TYPE_WAPI_PSK = 13,
  AUTH_TYPE_WAPI_CERT = 14,
  AUTH_TYPE_FILS_SHA256 = 15,
  AUTH_TYPE_FILS_SHA384 = 16
};
bool WifiAuthType_IsValid(int value);
constexpr WifiAuthType WifiAuthType_MIN = AUTH_TYPE_NONE;
constexpr WifiAuthType WifiAuthType_MAX = AUTH_TYPE_FILS_SHA384;
constexpr int WifiAuthType_ARRAYSIZE = WifiAuthType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiAuthType_descriptor();
template<typename T>
inline const std::string& WifiAuthType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiAuthType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiAuthType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WifiAuthType_descriptor(), enum_t_value);
}
inline bool WifiAuthType_Parse(
    const std::string& name, WifiAuthType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WifiAuthType>(
    WifiAuthType_descriptor(), name, value);
}
enum WifiBandBucket : int {
  BAND_UNKNOWN = 0,
  BAND_2G = 1,
  BAND_5G_LOW = 2,
  BAND_5G_MIDDLE = 3,
  BAND_5G_HIGH = 4,
  BAND_6G_LOW = 5,
  BAND_6G_MIDDLE = 6,
  BAND_6G_HIGH = 7
};
bool WifiBandBucket_IsValid(int value);
constexpr WifiBandBucket WifiBandBucket_MIN = BAND_UNKNOWN;
constexpr WifiBandBucket WifiBandBucket_MAX = BAND_6G_HIGH;
constexpr int WifiBandBucket_ARRAYSIZE = WifiBandBucket_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WifiBandBucket_descriptor();
template<typename T>
inline const std::string& WifiBandBucket_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiBandBucket>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiBandBucket_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WifiBandBucket_descriptor(), enum_t_value);
}
inline bool WifiBandBucket_Parse(
    const std::string& name, WifiBandBucket* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WifiBandBucket>(
    WifiBandBucket_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace wifi
}  // namespace net
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::net::wifi::WifiModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::net::wifi::WifiModeEnum>() {
  return ::android::net::wifi::WifiModeEnum_descriptor();
}
template <> struct is_proto_enum< ::android::net::wifi::WifiAuthType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::net::wifi::WifiAuthType>() {
  return ::android::net::wifi::WifiAuthType_descriptor();
}
template <> struct is_proto_enum< ::android::net::wifi::WifiBandBucket> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::net::wifi::WifiBandBucket>() {
  return ::android::net::wifi::WifiBandBucket_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fwifi_2fenums_2eproto
