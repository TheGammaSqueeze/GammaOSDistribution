// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/mediametrics/mediametrics.proto

#include "frameworks/proto_logging/stats/enums/stats/mediametrics/mediametrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace mediametrics {
}  // namespace mediametrics
}  // namespace stats
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nJframeworks/proto_logging/stats/enums/s"
  "tats/mediametrics/mediametrics.proto\022\032an"
  "droid.stats.mediametrics*\230\001\n\nStreamType\022"
  "\027\n\023STREAM_TYPE_UNKNOWN\020\000\022\025\n\021STREAM_TYPE_"
  "OTHER\020\001\022\033\n\027STREAM_TYPE_PROGRESSIVE\020\002\022\024\n\020"
  "STREAM_TYPE_DASH\020\003\022\023\n\017STREAM_TYPE_HLS\020\004\022"
  "\022\n\016STREAM_TYPE_SS\020\005*q\n\007DrmType\022\021\n\rDRM_TY"
  "PE_NONE\020\000\022\022\n\016DRM_TYPE_OTHER\020\001\022\027\n\023DRM_TYP"
  "E_PLAY_READY\020\002\022\022\n\016DRM_TYPE_WV_L1\020\003\022\022\n\016DR"
  "M_TYPE_WV_L3\020\004*q\n\014PlaybackType\022\031\n\025PLAYBA"
  "CK_TYPE_UNKNOWN\020\000\022\025\n\021PLAYBACK_TYPE_VOD\020\001"
  "\022\026\n\022PLAYBACK_TYPE_LIVE\020\002\022\027\n\023PLAYBACK_TYP"
  "E_OTHER\020\003*k\n\013ContentType\022\030\n\024CONTENT_TYPE"
  "_UNKNOWN\020\000\022\025\n\021CONTENT_TYPE_MAIN\020\001\022\023\n\017CON"
  "TENT_TYPE_AD\020\002\022\026\n\022CONTENT_TYPE_OTHER\020\003*{"
  "\n\020StreamSourceType\022\031\n\025STREAM_SOURCE_UNKN"
  "OWN\020\000\022\031\n\025STREAM_SOURCE_NETWORK\020\001\022\030\n\024STRE"
  "AM_SOURCE_DEVICE\020\002\022\027\n\023STREAM_SOURCE_MIXE"
  "D\020\003*\373\001\n\013NetworkType\022\030\n\024NETWORK_TYPE_UNKN"
  "OWN\020\000\022\026\n\022NETWORK_TYPE_OTHER\020\001\022\025\n\021NETWORK"
  "_TYPE_WIFI\020\002\022\031\n\025NETWORK_TYPE_ETHERNET\020\003\022"
  "\023\n\017NETWORK_TYPE_2G\020\004\022\023\n\017NETWORK_TYPE_3G\020"
  "\005\022\023\n\017NETWORK_TYPE_4G\020\006\022\027\n\023NETWORK_TYPE_5"
  "G_NSA\020\007\022\026\n\022NETWORK_TYPE_5G_SA\020\010\022\030\n\024NETWO"
  "RK_TYPE_OFFLINE\020\t*\217\002\n\rPlaybackState\022\017\n\013N"
  "OT_STARTED\020\000\022\026\n\022JOINING_BACKGROUND\020\001\022\026\n\022"
  "JOINING_FOREGROUND\020\002\022\013\n\007PLAYING\020\003\022\n\n\006PAU"
  "SED\020\004\022\013\n\007SEEKING\020\005\022\r\n\tBUFFERING\020\006\022\024\n\020PAU"
  "SED_BUFFERING\020\007\022\016\n\nSUPPRESSED\020\010\022\030\n\024SUPPR"
  "ESSED_BUFFERING\020\t\022\t\n\005ENDED\020\n\022\013\n\007STOPPED\020"
  "\013\022\n\n\006FAILED\020\014\022\025\n\021INTERRUPTED_BY_AD\020\r\022\r\n\t"
  "ABANDONED\020\016*\313\007\n\021PlaybackErrorCode\022\026\n\022ERR"
  "OR_CODE_UNKNOWN\020\000\022\024\n\020ERROR_CODE_OTHER\020\001\022"
  "\026\n\022ERROR_CODE_RUNTIME\020\002\022\036\n\032ERROR_CODE_NE"
  "TWORK_OFFLINE\020\003\022\036\n\032ERROR_CODE_NETWORK_CO"
  "NNECT\020\004\022!\n\035ERROR_CODE_NETWORK_BAD_STATUS"
  "\020\005\022\032\n\026ERROR_CODE_NETWORK_DNS\020\006\022\036\n\032ERROR_"
  "CODE_NETWORK_TIMEOUT\020\007\022\035\n\031ERROR_CODE_NET"
  "WORK_CLOSED\020\010\022\034\n\030ERROR_CODE_NETWORK_OTHE"
  "R\020\t\022\034\n\030ERROR_CODE_MEDIA_MANIFET\020\n\022\033\n\027ERR"
  "OR_CODE_MEDIA_PARSER\020\013\022\032\n\026ERROR_CODE_MED"
  "IA_OTHER\020\014\022\033\n\027ERROR_CODE_DECODER_INIT\020\r\022"
  "\035\n\031ERROR_CODE_DECODER_DECODE\020\016\022\032\n\026ERROR_"
  "CODE_DECODER_OOM\020\017\022\034\n\030ERROR_CODE_DECODER"
  "_OTHER\020\020\022\036\n\032ERROR_CODE_AUDIOTRACK_INIT\020\021"
  "\022\037\n\033ERROR_CODE_AUDIOTRACK_WRITE\020\022\022\037\n\033ERR"
  "OR_CODE_AUDIOTRACK_OTHER\020\023\022\034\n\030ERROR_CODE"
  "_PLAYER_REMOTE\020\024\022(\n$ERROR_CODE_PLAYER_BE"
  "HIND_LIVE_WINDOW\020\025\022\033\n\027ERROR_CODE_PLAYER_"
  "OTHER\020\026\022\036\n\032ERROR_CODE_DRM_UNAVAILABLE\020\027\022"
  "&\n\"ERROR_CODE_DRM_PROVISIONING_FAILED\020\030\022"
  " \n\034ERROR_CODE_DRM_LICENSE_ERROR\020\031\022\035\n\031ERR"
  "OR_CODE_DRM_DISALLOWED\020\032\022\037\n\033ERROR_CODE_D"
  "RM_SYSTEM_ERROR\020\033\022 \n\034ERROR_CODE_DRM_CONT"
  "ENT_ERROR\020\034\022\032\n\026ERROR_CODE_DRM_REVOKED\020\'\022"
  "\030\n\024ERROR_CODE_DRM_OTHER\020\036*+\n\tTrackType\022\t"
  "\n\005AUDIO\020\000\022\t\n\005VIDEO\020\001\022\010\n\004TEXT\020\002*\035\n\nTrackS"
  "tate\022\007\n\003OFF\020\000\022\006\n\002ON\020\001*u\n\021TrackChangeReas"
  "on\022\022\n\016REASON_UNKNOWN\020\000\022\020\n\014REASON_OTHER\020\001"
  "\022\022\n\016REASON_INITIAL\020\002\022\021\n\rREASON_MANUAL\020\003\022"
  "\023\n\017REASON_ADAPTIVE\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto, "frameworks/proto_logging/stats/enums/stats/mediametrics/mediametrics.proto", 2420,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto), true);
namespace android {
namespace stats {
namespace mediametrics {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[0];
}
bool StreamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[1];
}
bool DrmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[2];
}
bool PlaybackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[3];
}
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[4];
}
bool StreamSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[5];
}
bool NetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[6];
}
bool PlaybackState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaybackErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[7];
}
bool PlaybackErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[8];
}
bool TrackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[9];
}
bool TrackState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackChangeReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fmediametrics_2fmediametrics_2eproto[10];
}
bool TrackChangeReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediametrics
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
