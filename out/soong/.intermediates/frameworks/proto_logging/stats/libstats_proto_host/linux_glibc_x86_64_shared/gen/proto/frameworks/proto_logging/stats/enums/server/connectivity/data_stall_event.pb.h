// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/server/connectivity/data_stall_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto;
namespace com {
namespace android {
namespace server {
namespace connectivity {
class CellularData;
class CellularDataDefaultTypeInternal;
extern CellularDataDefaultTypeInternal _CellularData_default_instance_;
class DnsEvent;
class DnsEventDefaultTypeInternal;
extern DnsEventDefaultTypeInternal _DnsEvent_default_instance_;
class WifiData;
class WifiDataDefaultTypeInternal;
extern WifiDataDefaultTypeInternal _WifiData_default_instance_;
}  // namespace connectivity
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::connectivity::CellularData* Arena::CreateMaybeMessage<::com::android::server::connectivity::CellularData>(Arena*);
template<> ::com::android::server::connectivity::DnsEvent* Arena::CreateMaybeMessage<::com::android::server::connectivity::DnsEvent>(Arena*);
template<> ::com::android::server::connectivity::WifiData* Arena::CreateMaybeMessage<::com::android::server::connectivity::WifiData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace connectivity {

enum ProbeResult : int {
  UNKNOWN = 0,
  VALID = 1,
  INVALID = 2,
  PORTAL = 3,
  PARTIAL = 4
};
bool ProbeResult_IsValid(int value);
constexpr ProbeResult ProbeResult_MIN = UNKNOWN;
constexpr ProbeResult ProbeResult_MAX = PARTIAL;
constexpr int ProbeResult_ARRAYSIZE = ProbeResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProbeResult_descriptor();
template<typename T>
inline const std::string& ProbeResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProbeResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProbeResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProbeResult_descriptor(), enum_t_value);
}
inline bool ProbeResult_Parse(
    const std::string& name, ProbeResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProbeResult>(
    ProbeResult_descriptor(), name, value);
}
enum ApBand : int {
  AP_BAND_UNKNOWN = 0,
  AP_BAND_2GHZ = 1,
  AP_BAND_5GHZ = 2,
  AP_BAND_6GHZ = 3
};
bool ApBand_IsValid(int value);
constexpr ApBand ApBand_MIN = AP_BAND_UNKNOWN;
constexpr ApBand ApBand_MAX = AP_BAND_6GHZ;
constexpr int ApBand_ARRAYSIZE = ApBand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApBand_descriptor();
template<typename T>
inline const std::string& ApBand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApBand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApBand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApBand_descriptor(), enum_t_value);
}
inline bool ApBand_Parse(
    const std::string& name, ApBand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApBand>(
    ApBand_descriptor(), name, value);
}
enum RadioTech : int {
  RADIO_TECHNOLOGY_UNKNOWN = 0,
  RADIO_TECHNOLOGY_GPRS = 1,
  RADIO_TECHNOLOGY_EDGE = 2,
  RADIO_TECHNOLOGY_UMTS = 3,
  RADIO_TECHNOLOGY_IS95A = 4,
  RADIO_TECHNOLOGY_IS95B = 5,
  RADIO_TECHNOLOGY_1XRTT = 6,
  RADIO_TECHNOLOGY_EVDO_0 = 7,
  RADIO_TECHNOLOGY_EVDO_A = 8,
  RADIO_TECHNOLOGY_HSDPA = 9,
  RADIO_TECHNOLOGY_HSUPA = 10,
  RADIO_TECHNOLOGY_HSPA = 11,
  RADIO_TECHNOLOGY_EVDO_B = 12,
  RADIO_TECHNOLOGY_LTE = 13,
  RADIO_TECHNOLOGY_EHRPD = 14,
  RADIO_TECHNOLOGY_HSPAP = 15,
  RADIO_TECHNOLOGY_GSM = 16,
  RADIO_TECHNOLOGY_TD_SCDMA = 17,
  RADIO_TECHNOLOGY_IWLAN = 18,
  RADIO_TECHNOLOGY_LTE_CA = 19,
  RADIO_TECHNOLOGY_NR = 20
};
bool RadioTech_IsValid(int value);
constexpr RadioTech RadioTech_MIN = RADIO_TECHNOLOGY_UNKNOWN;
constexpr RadioTech RadioTech_MAX = RADIO_TECHNOLOGY_NR;
constexpr int RadioTech_ARRAYSIZE = RadioTech_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadioTech_descriptor();
template<typename T>
inline const std::string& RadioTech_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RadioTech>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RadioTech_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RadioTech_descriptor(), enum_t_value);
}
inline bool RadioTech_Parse(
    const std::string& name, RadioTech* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadioTech>(
    RadioTech_descriptor(), name, value);
}
// ===================================================================

class CellularData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.connectivity.CellularData) */ {
 public:
  CellularData();
  virtual ~CellularData();

  CellularData(const CellularData& from);
  CellularData(CellularData&& from) noexcept
    : CellularData() {
    *this = ::std::move(from);
  }

  inline CellularData& operator=(const CellularData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellularData& operator=(CellularData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellularData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellularData* internal_default_instance() {
    return reinterpret_cast<const CellularData*>(
               &_CellularData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CellularData& a, CellularData& b) {
    a.Swap(&b);
  }
  inline void Swap(CellularData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellularData* New() const final {
    return CreateMaybeMessage<CellularData>(nullptr);
  }

  CellularData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellularData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellularData& from);
  void MergeFrom(const CellularData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellularData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.connectivity.CellularData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
    return ::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkMccmncFieldNumber = 3,
    kSimMccmncFieldNumber = 4,
    kRatTypeFieldNumber = 1,
    kIsRoamingFieldNumber = 2,
    kSignalStrengthFieldNumber = 5,
  };
  // optional string network_mccmnc = 3;
  bool has_network_mccmnc() const;
  void clear_network_mccmnc();
  const std::string& network_mccmnc() const;
  void set_network_mccmnc(const std::string& value);
  void set_network_mccmnc(std::string&& value);
  void set_network_mccmnc(const char* value);
  void set_network_mccmnc(const char* value, size_t size);
  std::string* mutable_network_mccmnc();
  std::string* release_network_mccmnc();
  void set_allocated_network_mccmnc(std::string* network_mccmnc);

  // optional string sim_mccmnc = 4;
  bool has_sim_mccmnc() const;
  void clear_sim_mccmnc();
  const std::string& sim_mccmnc() const;
  void set_sim_mccmnc(const std::string& value);
  void set_sim_mccmnc(std::string&& value);
  void set_sim_mccmnc(const char* value);
  void set_sim_mccmnc(const char* value, size_t size);
  std::string* mutable_sim_mccmnc();
  std::string* release_sim_mccmnc();
  void set_allocated_sim_mccmnc(std::string* sim_mccmnc);

  // optional .com.android.server.connectivity.RadioTech rat_type = 1;
  bool has_rat_type() const;
  void clear_rat_type();
  ::com::android::server::connectivity::RadioTech rat_type() const;
  void set_rat_type(::com::android::server::connectivity::RadioTech value);

  // optional bool is_roaming = 2;
  bool has_is_roaming() const;
  void clear_is_roaming();
  bool is_roaming() const;
  void set_is_roaming(bool value);

  // optional int32 signal_strength = 5;
  bool has_signal_strength() const;
  void clear_signal_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength() const;
  void set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.connectivity.CellularData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_mccmnc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim_mccmnc_;
  int rat_type_;
  bool is_roaming_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto;
};
// -------------------------------------------------------------------

class WifiData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.connectivity.WifiData) */ {
 public:
  WifiData();
  virtual ~WifiData();

  WifiData(const WifiData& from);
  WifiData(WifiData&& from) noexcept
    : WifiData() {
    *this = ::std::move(from);
  }

  inline WifiData& operator=(const WifiData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiData& operator=(WifiData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WifiData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiData* internal_default_instance() {
    return reinterpret_cast<const WifiData*>(
               &_WifiData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WifiData& a, WifiData& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiData* New() const final {
    return CreateMaybeMessage<WifiData>(nullptr);
  }

  WifiData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WifiData& from);
  void MergeFrom(const WifiData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WifiData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.connectivity.WifiData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
    return ::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalStrengthFieldNumber = 1,
    kWifiBandFieldNumber = 2,
  };
  // optional int32 signal_strength = 1;
  bool has_signal_strength() const;
  void clear_signal_strength();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength() const;
  void set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .com.android.server.connectivity.ApBand wifi_band = 2;
  bool has_wifi_band() const;
  void clear_wifi_band();
  ::com::android::server::connectivity::ApBand wifi_band() const;
  void set_wifi_band(::com::android::server::connectivity::ApBand value);

  // @@protoc_insertion_point(class_scope:com.android.server.connectivity.WifiData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_strength_;
  int wifi_band_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto;
};
// -------------------------------------------------------------------

class DnsEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.connectivity.DnsEvent) */ {
 public:
  DnsEvent();
  virtual ~DnsEvent();

  DnsEvent(const DnsEvent& from);
  DnsEvent(DnsEvent&& from) noexcept
    : DnsEvent() {
    *this = ::std::move(from);
  }

  inline DnsEvent& operator=(const DnsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnsEvent& operator=(DnsEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DnsEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DnsEvent* internal_default_instance() {
    return reinterpret_cast<const DnsEvent*>(
               &_DnsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DnsEvent& a, DnsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DnsEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DnsEvent* New() const final {
    return CreateMaybeMessage<DnsEvent>(nullptr);
  }

  DnsEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DnsEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DnsEvent& from);
  void MergeFrom(const DnsEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.connectivity.DnsEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
    return ::descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDnsReturnCodeFieldNumber = 1,
    kDnsTimeFieldNumber = 2,
  };
  // repeated int32 dns_return_code = 1;
  int dns_return_code_size() const;
  void clear_dns_return_code();
  ::PROTOBUF_NAMESPACE_ID::int32 dns_return_code(int index) const;
  void set_dns_return_code(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dns_return_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dns_return_code() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dns_return_code();

  // repeated int64 dns_time = 2;
  int dns_time_size() const;
  void clear_dns_time();
  ::PROTOBUF_NAMESPACE_ID::int64 dns_time(int index) const;
  void set_dns_time(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dns_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dns_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dns_time();

  // @@protoc_insertion_point(class_scope:com.android.server.connectivity.DnsEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dns_return_code_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dns_time_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CellularData

// optional .com.android.server.connectivity.RadioTech rat_type = 1;
inline bool CellularData::has_rat_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CellularData::clear_rat_type() {
  rat_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::com::android::server::connectivity::RadioTech CellularData::rat_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.CellularData.rat_type)
  return static_cast< ::com::android::server::connectivity::RadioTech >(rat_type_);
}
inline void CellularData::set_rat_type(::com::android::server::connectivity::RadioTech value) {
  assert(::com::android::server::connectivity::RadioTech_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  rat_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.CellularData.rat_type)
}

// optional bool is_roaming = 2;
inline bool CellularData::has_is_roaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CellularData::clear_is_roaming() {
  is_roaming_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CellularData::is_roaming() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.CellularData.is_roaming)
  return is_roaming_;
}
inline void CellularData::set_is_roaming(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_roaming_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.CellularData.is_roaming)
}

// optional string network_mccmnc = 3;
inline bool CellularData::has_network_mccmnc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CellularData::clear_network_mccmnc() {
  network_mccmnc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CellularData::network_mccmnc() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.CellularData.network_mccmnc)
  return network_mccmnc_.GetNoArena();
}
inline void CellularData::set_network_mccmnc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  network_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.CellularData.network_mccmnc)
}
inline void CellularData::set_network_mccmnc(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  network_mccmnc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.connectivity.CellularData.network_mccmnc)
}
inline void CellularData::set_network_mccmnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  network_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.connectivity.CellularData.network_mccmnc)
}
inline void CellularData::set_network_mccmnc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  network_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.connectivity.CellularData.network_mccmnc)
}
inline std::string* CellularData::mutable_network_mccmnc() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.connectivity.CellularData.network_mccmnc)
  return network_mccmnc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellularData::release_network_mccmnc() {
  // @@protoc_insertion_point(field_release:com.android.server.connectivity.CellularData.network_mccmnc)
  if (!has_network_mccmnc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return network_mccmnc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellularData::set_allocated_network_mccmnc(std::string* network_mccmnc) {
  if (network_mccmnc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  network_mccmnc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network_mccmnc);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.connectivity.CellularData.network_mccmnc)
}

// optional string sim_mccmnc = 4;
inline bool CellularData::has_sim_mccmnc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CellularData::clear_sim_mccmnc() {
  sim_mccmnc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CellularData::sim_mccmnc() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.CellularData.sim_mccmnc)
  return sim_mccmnc_.GetNoArena();
}
inline void CellularData::set_sim_mccmnc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sim_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.CellularData.sim_mccmnc)
}
inline void CellularData::set_sim_mccmnc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sim_mccmnc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.connectivity.CellularData.sim_mccmnc)
}
inline void CellularData::set_sim_mccmnc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sim_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.connectivity.CellularData.sim_mccmnc)
}
inline void CellularData::set_sim_mccmnc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sim_mccmnc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.connectivity.CellularData.sim_mccmnc)
}
inline std::string* CellularData::mutable_sim_mccmnc() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.connectivity.CellularData.sim_mccmnc)
  return sim_mccmnc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellularData::release_sim_mccmnc() {
  // @@protoc_insertion_point(field_release:com.android.server.connectivity.CellularData.sim_mccmnc)
  if (!has_sim_mccmnc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sim_mccmnc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellularData::set_allocated_sim_mccmnc(std::string* sim_mccmnc) {
  if (sim_mccmnc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sim_mccmnc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim_mccmnc);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.connectivity.CellularData.sim_mccmnc)
}

// optional int32 signal_strength = 5;
inline bool CellularData::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CellularData::clear_signal_strength() {
  signal_strength_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellularData::signal_strength() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.CellularData.signal_strength)
  return signal_strength_;
}
inline void CellularData::set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.CellularData.signal_strength)
}

// -------------------------------------------------------------------

// WifiData

// optional int32 signal_strength = 1;
inline bool WifiData::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiData::clear_signal_strength() {
  signal_strength_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiData::signal_strength() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.WifiData.signal_strength)
  return signal_strength_;
}
inline void WifiData::set_signal_strength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.WifiData.signal_strength)
}

// optional .com.android.server.connectivity.ApBand wifi_band = 2;
inline bool WifiData::has_wifi_band() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WifiData::clear_wifi_band() {
  wifi_band_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::com::android::server::connectivity::ApBand WifiData::wifi_band() const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.WifiData.wifi_band)
  return static_cast< ::com::android::server::connectivity::ApBand >(wifi_band_);
}
inline void WifiData::set_wifi_band(::com::android::server::connectivity::ApBand value) {
  assert(::com::android::server::connectivity::ApBand_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  wifi_band_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.WifiData.wifi_band)
}

// -------------------------------------------------------------------

// DnsEvent

// repeated int32 dns_return_code = 1;
inline int DnsEvent::dns_return_code_size() const {
  return dns_return_code_.size();
}
inline void DnsEvent::clear_dns_return_code() {
  dns_return_code_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DnsEvent::dns_return_code(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.DnsEvent.dns_return_code)
  return dns_return_code_.Get(index);
}
inline void DnsEvent::set_dns_return_code(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dns_return_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.DnsEvent.dns_return_code)
}
inline void DnsEvent::add_dns_return_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dns_return_code_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.connectivity.DnsEvent.dns_return_code)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DnsEvent::dns_return_code() const {
  // @@protoc_insertion_point(field_list:com.android.server.connectivity.DnsEvent.dns_return_code)
  return dns_return_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DnsEvent::mutable_dns_return_code() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.connectivity.DnsEvent.dns_return_code)
  return &dns_return_code_;
}

// repeated int64 dns_time = 2;
inline int DnsEvent::dns_time_size() const {
  return dns_time_.size();
}
inline void DnsEvent::clear_dns_time() {
  dns_time_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DnsEvent::dns_time(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.connectivity.DnsEvent.dns_time)
  return dns_time_.Get(index);
}
inline void DnsEvent::set_dns_time(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dns_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.connectivity.DnsEvent.dns_time)
}
inline void DnsEvent::add_dns_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dns_time_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.connectivity.DnsEvent.dns_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DnsEvent::dns_time() const {
  // @@protoc_insertion_point(field_list:com.android.server.connectivity.DnsEvent.dns_time)
  return dns_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DnsEvent::mutable_dns_time() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.connectivity.DnsEvent.dns_time)
  return &dns_time_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace connectivity
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::connectivity::ProbeResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::connectivity::ProbeResult>() {
  return ::com::android::server::connectivity::ProbeResult_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::connectivity::ApBand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::connectivity::ApBand>() {
  return ::com::android::server::connectivity::ApBand_descriptor();
}
template <> struct is_proto_enum< ::com::android::server::connectivity::RadioTech> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::android::server::connectivity::RadioTech>() {
  return ::com::android::server::connectivity::RadioTech_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto
