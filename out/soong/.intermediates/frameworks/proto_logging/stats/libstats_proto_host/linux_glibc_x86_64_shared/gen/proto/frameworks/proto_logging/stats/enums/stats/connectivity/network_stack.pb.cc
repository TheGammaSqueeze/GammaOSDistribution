// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.proto

#include "frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace connectivity {
class NetworkStackEventDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStackEventData> _instance;
} _NetworkStackEventData_default_instance_;
}  // namespace connectivity
}  // namespace stats
}  // namespace android
static void InitDefaultsscc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::stats::connectivity::_NetworkStackEventData_default_instance_;
    new (ptr) ::android::stats::connectivity::NetworkStackEventData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::stats::connectivity::NetworkStackEventData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::android::stats::connectivity::NetworkStackEventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::android::stats::connectivity::NetworkStackEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::android::stats::connectivity::NetworkStackEventData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::android::stats::connectivity::_NetworkStackEventData_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nKframeworks/proto_logging/stats/enums/s"
  "tats/connectivity/network_stack.proto\022\032a"
  "ndroid.stats.connectivity\"\027\n\025NetworkStac"
  "kEventData*u\n\017DhcpRenewResult\022\016\n\nRR_UNKN"
  "OWN\020\000\022\016\n\nRR_SUCCESS\020\001\022\020\n\014RR_ERROR_NAK\020\002\022"
  "\030\n\024RR_ERROR_IP_MISMATCH\020\003\022\026\n\022RR_ERROR_IP"
  "_EXPIRE\020\004*\215\002\n\016DisconnectCode\022\013\n\007DC_NONE\020"
  "\000\022\031\n\025DC_NORMAL_TERMINATION\020\001\022\030\n\024DC_PROVI"
  "SIONING_FAIL\020\002\022\032\n\026DC_ERROR_STARTING_IPV4"
  "\020\004\022\032\n\026DC_ERROR_STARTING_IPV6\020\005\022+\n\'DC_ERR"
  "OR_STARTING_IPREACHABILITYMONITOR\020\006\022\033\n\027D"
  "C_INVALID_PROVISIONING\020\007\022\032\n\026DC_INTERFACE"
  "_NOT_FOUND\020\010\022\033\n\027DC_PROVISIONING_TIMEOUT\020"
  "\t*\372\001\n\rTransportType\022\016\n\nTT_UNKNOWN\020\000\022\017\n\013T"
  "T_CELLULAR\020\001\022\013\n\007TT_WIFI\020\002\022\020\n\014TT_BLUETOOT"
  "H\020\003\022\017\n\013TT_ETHERNET\020\004\022\021\n\rTT_WIFI_AWARE\020\005\022"
  "\r\n\tTT_LOWPAN\020\006\022\023\n\017TT_CELLULAR_VPN\020\007\022\017\n\013T"
  "T_WIFI_VPN\020\010\022\024\n\020TT_BLUETOOTH_VPN\020\t\022\023\n\017TT"
  "_ETHERNET_VPN\020\n\022\030\n\024TT_WIFI_CELLULAR_VPN\020"
  "\013\022\013\n\007TT_TEST\020\014*]\n\013DhcpFeature\022\016\n\nDF_UNKN"
  "OWN\020\000\022\021\n\rDF_INITREBOOT\020\001\022\022\n\016DF_RAPIDCOMM"
  "IT\020\002\022\n\n\006DF_DAD\020\003\022\013\n\007DF_FILS\020\004*Y\n\023Hostnam"
  "eTransResult\022\017\n\013HTR_UNKNOWN\020\000\022\017\n\013HTR_SUC"
  "CESS\020\001\022\017\n\013HTR_FAILURE\020\002\022\017\n\013HTR_DISABLE\020\003"
  "*c\n\013ProbeResult\022\016\n\nPR_UNKNOWN\020\000\022\016\n\nPR_SU"
  "CCESS\020\001\022\016\n\nPR_FAILURE\020\002\022\r\n\tPR_PORTAL\020\003\022\025"
  "\n\021PR_PRIVATE_IP_DNS\020\004*a\n\020ValidationResul"
  "t\022\016\n\nVR_UNKNOWN\020\000\022\016\n\nVR_SUCCESS\020\001\022\016\n\nVR_"
  "FAILURE\020\002\022\r\n\tVR_PORTAL\020\003\022\016\n\nVR_PARTIAL\020\004"
  "*\203\001\n\tProbeType\022\016\n\nPT_UNKNOWN\020\000\022\n\n\006PT_DNS"
  "\020\001\022\013\n\007PT_HTTP\020\002\022\014\n\010PT_HTTPS\020\003\022\n\n\006PT_PAC\020"
  "\004\022\017\n\013PT_FALLBACK\020\005\022\016\n\nPT_PRIVDNS\020\006\022\022\n\016PT"
  "_CAPPORT_API\020\007*\253\004\n\rDhcpErrorCode\022\016\n\nET_U"
  "NKNOWN\020\000\022\017\n\013ET_L2_ERROR\020\001\022\017\n\013ET_L3_ERROR"
  "\020\002\022\017\n\013ET_L4_ERROR\020\003\022\021\n\rET_DHCP_ERROR\020\004\022\021"
  "\n\rET_MISC_ERROR\020\005\022\026\n\017ET_L2_TOO_SHORT\020\200\200\204"
  "\010\022\033\n\024ET_L2_WRONG_ETH_TYPE\020\200\200\210\010\022\026\n\017ET_L3_"
  "TOO_SHORT\020\200\200\204\020\022\025\n\016ET_L3_NOT_IPV4\020\200\200\210\020\022\027\n"
  "\020ET_L3_INVALID_IP\020\200\200\214\020\022\024\n\rET_L4_NOT_UDP\020"
  "\200\200\204\030\022\027\n\020ET_L4_WRONG_PORT\020\200\200\210\030\022\031\n\022ET_BOOT"
  "P_TOO_SHORT\020\200\200\204 \022\037\n\030ET_DHCP_BAD_MAGIC_CO"
  "OKIE\020\200\200\210 \022$\n\035ET_DHCP_INVALID_OPTION_LENG"
  "TH\020\200\200\214 \022\032\n\023ET_DHCP_NO_MSG_TYPE\020\200\200\220 \022\037\n\030E"
  "T_DHCP_UNKNOWN_MSG_TYPE\020\200\200\224 \022\030\n\021ET_DHCP_"
  "NO_COOKIE\020\200\200\230 \022\032\n\023ET_BUFFER_UNDERFLOW\020\200\200"
  "\204(\022\027\n\020ET_RECEIVE_ERROR\020\200\200\210(\022\027\n\020ET_PARSIN"
  "G_ERROR\020\200\200\214(*I\n\021NetworkQuirkEvent\022\016\n\nQE_"
  "UNKNOWN\020\000\022$\n QE_IPV6_PROVISIONING_ROUTER"
  "_LOST\020\001*)\n\006IpType\022\013\n\007UNKNOWN\020\000\022\010\n\004IPV4\020\004"
  "\022\010\n\004IPV6\020\006*\367\001\n\014NudEventType\022\025\n\021NUD_EVENT"
  "_UNKNOWN\020\000\022\033\n\027NUD_POST_ROAMING_FAILED\020\001\022"
  "$\n NUD_POST_ROAMING_FAILED_CRITICAL\020\002\022\026\n"
  "\022NUD_CONFIRM_FAILED\020\003\022\037\n\033NUD_CONFIRM_FAI"
  "LED_CRITICAL\020\004\022\026\n\022NUD_ORGANIC_FAILED\020\005\022\037"
  "\n\033NUD_ORGANIC_FAILED_CRITICAL\020\006\022\033\n\027NUD_M"
  "AC_ADDRESS_CHANGED\020\007*r\n\017NudNeighborType\022"
  "\030\n\024NUD_NEIGHBOR_UNKNOWN\020\000\022\030\n\024NUD_NEIGHBO"
  "R_GATEWAY\020\001\022\024\n\020NUD_NEIGHBOR_DNS\020\002\022\025\n\021NUD"
  "_NEIGHBOR_BOTH\020\003B\025B\021NetworkStackProtoP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_sccs[1] = {
  &scc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto, "frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.proto", 2359,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto, 1, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto), true);
namespace android {
namespace stats {
namespace connectivity {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DhcpRenewResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[0];
}
bool DhcpRenewResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisconnectCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[1];
}
bool DisconnectCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[2];
}
bool TransportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DhcpFeature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[3];
}
bool DhcpFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostnameTransResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[4];
}
bool HostnameTransResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProbeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[5];
}
bool ProbeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValidationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[6];
}
bool ValidationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProbeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[7];
}
bool ProbeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DhcpErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[8];
}
bool DhcpErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 16842752:
    case 16908288:
    case 33619968:
    case 33685504:
    case 33751040:
    case 50397184:
    case 50462720:
    case 67174400:
    case 67239936:
    case 67305472:
    case 67371008:
    case 67436544:
    case 67502080:
    case 83951616:
    case 84017152:
    case 84082688:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkQuirkEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[9];
}
bool NetworkQuirkEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[10];
}
bool IpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NudEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[11];
}
bool NudEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NudNeighborType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto[12];
}
bool NudNeighborType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NetworkStackEventData::InitAsDefaultInstance() {
}
class NetworkStackEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStackEventData>()._has_bits_);
};

NetworkStackEventData::NetworkStackEventData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.stats.connectivity.NetworkStackEventData)
}
NetworkStackEventData::NetworkStackEventData(const NetworkStackEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.stats.connectivity.NetworkStackEventData)
}

void NetworkStackEventData::SharedCtor() {
}

NetworkStackEventData::~NetworkStackEventData() {
  // @@protoc_insertion_point(destructor:android.stats.connectivity.NetworkStackEventData)
  SharedDtor();
}

void NetworkStackEventData::SharedDtor() {
}

void NetworkStackEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStackEventData& NetworkStackEventData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto.base);
  return *internal_default_instance();
}


void NetworkStackEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:android.stats.connectivity.NetworkStackEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStackEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStackEventData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:android.stats.connectivity.NetworkStackEventData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:android.stats.connectivity.NetworkStackEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.stats.connectivity.NetworkStackEventData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStackEventData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.stats.connectivity.NetworkStackEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:android.stats.connectivity.NetworkStackEventData)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkStackEventData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:android.stats.connectivity.NetworkStackEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:android.stats.connectivity.NetworkStackEventData)
  return target;
}

size_t NetworkStackEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.stats.connectivity.NetworkStackEventData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStackEventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:android.stats.connectivity.NetworkStackEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkStackEventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkStackEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:android.stats.connectivity.NetworkStackEventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:android.stats.connectivity.NetworkStackEventData)
    MergeFrom(*source);
  }
}

void NetworkStackEventData::MergeFrom(const NetworkStackEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.stats.connectivity.NetworkStackEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkStackEventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:android.stats.connectivity.NetworkStackEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkStackEventData::CopyFrom(const NetworkStackEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.stats.connectivity.NetworkStackEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStackEventData::IsInitialized() const {
  return true;
}

void NetworkStackEventData::InternalSwap(NetworkStackEventData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkStackEventData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace connectivity
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::stats::connectivity::NetworkStackEventData* Arena::CreateMaybeMessage< ::android::stats::connectivity::NetworkStackEventData >(Arena* arena) {
  return Arena::CreateInternal< ::android::stats::connectivity::NetworkStackEventData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
