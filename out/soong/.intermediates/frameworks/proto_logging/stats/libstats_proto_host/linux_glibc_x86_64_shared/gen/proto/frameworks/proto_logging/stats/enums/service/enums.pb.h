// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/service/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {

enum UsbEndPointType : int {
  USB_ENDPOINT_TYPE_XFER_CONTROL = 0,
  USB_ENDPOINT_TYPE_XFER_ISOC = 1,
  USB_ENDPOINT_TYPE_XFER_BULK = 2,
  USB_ENDPOINT_TYPE_XFER_INT = 3
};
bool UsbEndPointType_IsValid(int value);
constexpr UsbEndPointType UsbEndPointType_MIN = USB_ENDPOINT_TYPE_XFER_CONTROL;
constexpr UsbEndPointType UsbEndPointType_MAX = USB_ENDPOINT_TYPE_XFER_INT;
constexpr int UsbEndPointType_ARRAYSIZE = UsbEndPointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsbEndPointType_descriptor();
template<typename T>
inline const std::string& UsbEndPointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsbEndPointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsbEndPointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsbEndPointType_descriptor(), enum_t_value);
}
inline bool UsbEndPointType_Parse(
    const std::string& name, UsbEndPointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsbEndPointType>(
    UsbEndPointType_descriptor(), name, value);
}
enum UsbEndPointDirection : int {
  USB_ENDPOINT_DIR_OUT = 0,
  USB_ENDPOINT_DIR_IN = 128
};
bool UsbEndPointDirection_IsValid(int value);
constexpr UsbEndPointDirection UsbEndPointDirection_MIN = USB_ENDPOINT_DIR_OUT;
constexpr UsbEndPointDirection UsbEndPointDirection_MAX = USB_ENDPOINT_DIR_IN;
constexpr int UsbEndPointDirection_ARRAYSIZE = UsbEndPointDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsbEndPointDirection_descriptor();
template<typename T>
inline const std::string& UsbEndPointDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsbEndPointDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsbEndPointDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsbEndPointDirection_descriptor(), enum_t_value);
}
inline bool UsbEndPointDirection_Parse(
    const std::string& name, UsbEndPointDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsbEndPointDirection>(
    UsbEndPointDirection_descriptor(), name, value);
}
enum UsbConnectionRecordMode : int {
  USB_CONNECTION_RECORD_MODE_CONNECT = 0,
  USB_CONNECTION_RECORD_MODE_CONNECT_BADPARSE = 1,
  USB_CONNECTION_RECORD_MODE_CONNECT_BADDEVICE = 2,
  USB_CONNECTION_RECORD_MODE_DISCONNECT = -1
};
bool UsbConnectionRecordMode_IsValid(int value);
constexpr UsbConnectionRecordMode UsbConnectionRecordMode_MIN = USB_CONNECTION_RECORD_MODE_DISCONNECT;
constexpr UsbConnectionRecordMode UsbConnectionRecordMode_MAX = USB_CONNECTION_RECORD_MODE_CONNECT_BADDEVICE;
constexpr int UsbConnectionRecordMode_ARRAYSIZE = UsbConnectionRecordMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsbConnectionRecordMode_descriptor();
template<typename T>
inline const std::string& UsbConnectionRecordMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsbConnectionRecordMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsbConnectionRecordMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsbConnectionRecordMode_descriptor(), enum_t_value);
}
inline bool UsbConnectionRecordMode_Parse(
    const std::string& name, UsbConnectionRecordMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsbConnectionRecordMode>(
    UsbConnectionRecordMode_descriptor(), name, value);
}
enum ContaminantPresenceStatus : int {
  CONTAMINANT_STATUS_UNKNOWN = 0,
  CONTAMINANT_STATUS_NOT_SUPPORTED = 1,
  CONTAMINANT_STATUS_DISABLED = 2,
  CONTAMINANT_STATUS_NOT_DETECTED = 3,
  CONTAMINANT_STATUS_DETECTED = 4
};
bool ContaminantPresenceStatus_IsValid(int value);
constexpr ContaminantPresenceStatus ContaminantPresenceStatus_MIN = CONTAMINANT_STATUS_UNKNOWN;
constexpr ContaminantPresenceStatus ContaminantPresenceStatus_MAX = CONTAMINANT_STATUS_DETECTED;
constexpr int ContaminantPresenceStatus_ARRAYSIZE = ContaminantPresenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContaminantPresenceStatus_descriptor();
template<typename T>
inline const std::string& ContaminantPresenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContaminantPresenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContaminantPresenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContaminantPresenceStatus_descriptor(), enum_t_value);
}
inline bool ContaminantPresenceStatus_Parse(
    const std::string& name, ContaminantPresenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContaminantPresenceStatus>(
    ContaminantPresenceStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::UsbEndPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::UsbEndPointType>() {
  return ::android::service::UsbEndPointType_descriptor();
}
template <> struct is_proto_enum< ::android::service::UsbEndPointDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::UsbEndPointDirection>() {
  return ::android::service::UsbEndPointDirection_descriptor();
}
template <> struct is_proto_enum< ::android::service::UsbConnectionRecordMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::UsbConnectionRecordMode>() {
  return ::android::service::UsbConnectionRecordMode_descriptor();
}
template <> struct is_proto_enum< ::android::service::ContaminantPresenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::service::ContaminantPresenceStatus>() {
  return ::android::service::ContaminantPresenceStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fservice_2fenums_2eproto
