// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/app/media_output_enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {
namespace settings {
namespace mediaoutput {

enum MediumType : int {
  UNKNOWN_TYPE = 0,
  BUILTIN_SPEAKER = 1,
  WIRED_3POINT5_MM_AUDIO = 100,
  WIRED_3POINT5_MM_HEADSET = 101,
  WIRED_3POINT5_MM_HEADPHONES = 102,
  USB_C_AUDIO = 200,
  USB_C_DEVICE = 201,
  USB_C_HEADSET = 202,
  USB_C_ACCESSORY = 203,
  USB_C_DOCK = 204,
  USB_C_HDMI = 205,
  BLUETOOTH = 300,
  BLUETOOTH_HEARING_AID = 301,
  BLUETOOTH_A2DP = 302,
  REMOTE_SINGLE = 400,
  REMOTE_TV = 401,
  REMOTE_SPEAKER = 402,
  REMOTE_GROUP = 500,
  REMOTE_DYNAMIC_GROUP = 501
};
bool MediumType_IsValid(int value);
constexpr MediumType MediumType_MIN = UNKNOWN_TYPE;
constexpr MediumType MediumType_MAX = REMOTE_DYNAMIC_GROUP;
constexpr int MediumType_ARRAYSIZE = MediumType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MediumType_descriptor();
template<typename T>
inline const std::string& MediumType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MediumType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MediumType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MediumType_descriptor(), enum_t_value);
}
inline bool MediumType_Parse(
    const std::string& name, MediumType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MediumType>(
    MediumType_descriptor(), name, value);
}
enum SwitchResult : int {
  ERROR = 0,
  OK = 1
};
bool SwitchResult_IsValid(int value);
constexpr SwitchResult SwitchResult_MIN = ERROR;
constexpr SwitchResult SwitchResult_MAX = OK;
constexpr int SwitchResult_ARRAYSIZE = SwitchResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwitchResult_descriptor();
template<typename T>
inline const std::string& SwitchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwitchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwitchResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwitchResult_descriptor(), enum_t_value);
}
inline bool SwitchResult_Parse(
    const std::string& name, SwitchResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwitchResult>(
    SwitchResult_descriptor(), name, value);
}
enum SubResult : int {
  UNKNOWN_ERROR = 0,
  NO_ERROR = 1,
  REJECTED = 2,
  NETWORK_ERROR = 3,
  ROUTE_NOT_AVAILABLE = 4,
  INVALID_COMMAND = 5
};
bool SubResult_IsValid(int value);
constexpr SubResult SubResult_MIN = UNKNOWN_ERROR;
constexpr SubResult SubResult_MAX = INVALID_COMMAND;
constexpr int SubResult_ARRAYSIZE = SubResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubResult_descriptor();
template<typename T>
inline const std::string& SubResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubResult_descriptor(), enum_t_value);
}
inline bool SubResult_Parse(
    const std::string& name, SubResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubResult>(
    SubResult_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediaoutput
}  // namespace settings
}  // namespace app
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::app::settings::mediaoutput::MediumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::settings::mediaoutput::MediumType>() {
  return ::android::app::settings::mediaoutput::MediumType_descriptor();
}
template <> struct is_proto_enum< ::android::app::settings::mediaoutput::SwitchResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::settings::mediaoutput::SwitchResult>() {
  return ::android::app::settings::mediaoutput::SwitchResult_descriptor();
}
template <> struct is_proto_enum< ::android::app::settings::mediaoutput::SubResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::settings::mediaoutput::SubResult>() {
  return ::android::app::settings::mediaoutput::SubResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fapp_2fmedia_5foutput_5fenum_2eproto
