// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/hardware/biometrics/enums.proto

#include "frameworks/proto_logging/stats/enums/hardware/biometrics/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace hardware {
namespace biometrics {
}  // namespace biometrics
}  // namespace hardware
}  // namespace android
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nDframeworks/proto_logging/stats/enums/h"
  "ardware/biometrics/enums.proto\022\033android."
  "hardware.biometrics*d\n\014ModalityEnum\022\024\n\020M"
  "ODALITY_UNKNOWN\020\000\022\030\n\024MODALITY_FINGERPRIN"
  "T\020\001\022\021\n\rMODALITY_IRIS\020\002\022\021\n\rMODALITY_FACE\020"
  "\004*r\n\nClientEnum\022\022\n\016CLIENT_UNKNOWN\020\000\022\023\n\017C"
  "LIENT_KEYGUARD\020\001\022\033\n\027CLIENT_BIOMETRIC_PRO"
  "MPT\020\002\022\036\n\032CLIENT_FINGERPRINT_MANAGER\020\003*u\n"
  "\nActionEnum\022\022\n\016ACTION_UNKNOWN\020\000\022\021\n\rACTIO"
  "N_ENROLL\020\001\022\027\n\023ACTION_AUTHENTICATE\020\002\022\024\n\020A"
  "CTION_ENUMERATE\020\003\022\021\n\rACTION_REMOVE\020\004*\247\001\n"
  "\tIssueEnum\022\021\n\rISSUE_UNKNOWN\020\000\022\023\n\017ISSUE_H"
  "AL_DEATH\020\001\022-\n)ISSUE_UNKNOWN_TEMPLATE_ENR"
  "OLLED_FRAMEWORK\020\002\022\'\n#ISSUE_UNKNOWN_TEMPL"
  "ATE_ENROLLED_HAL\020\003\022\032\n\026ISSUE_CANCEL_TIMED"
  "_OUT\020\004B\030B\024BiometricsProtoEnumsP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto, "frameworks/proto_logging/stats/enums/hardware/biometrics/enums.proto", 632,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto, 0, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto), true);
namespace android {
namespace hardware {
namespace biometrics {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModalityEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[0];
}
bool ModalityEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[1];
}
bool ClientEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[2];
}
bool ActionEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IssueEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fhardware_2fbiometrics_2fenums_2eproto[3];
}
bool IssueEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace biometrics
}  // namespace hardware
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
