// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/hci/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace bluetooth {
namespace hci {

enum CommandEnum : int {
  CMD_UNKNOWN = 1048575,
  CMD_INQUIRY = 1025,
  CMD_INQUIRY_CANCEL = 1026,
  CMD_PERIODIC_INQUIRY_MODE = 1027,
  CMD_EXIT_PERIODIC_INQUIRY_MODE = 1028,
  CMD_CREATE_CONNECTION = 1029,
  CMD_DISCONNECT = 1030,
  CMD_ADD_SCO_CONNECTION = 1031,
  CMD_CREATE_CONNECTION_CANCEL = 1032,
  CMD_ACCEPT_CONNECTION_REQUEST = 1033,
  CMD_REJECT_CONNECTION_REQUEST = 1034,
  CMD_LINK_KEY_REQUEST_REPLY = 1035,
  CMD_LINK_KEY_REQUEST_NEG_REPLY = 1036,
  CMD_PIN_CODE_REQUEST_REPLY = 1037,
  CMD_PIN_CODE_REQUEST_NEG_REPLY = 1038,
  CMD_CHANGE_CONN_PACKET_TYPE = 1039,
  CMD_AUTHENTICATION_REQUESTED = 1041,
  CMD_SET_CONN_ENCRYPTION = 1043,
  CMD_CHANGE_CONN_LINK_KEY = 1045,
  CMD_MASTER_LINK_KEY = 1047,
  CMD_RMT_NAME_REQUEST = 1049,
  CMD_RMT_NAME_REQUEST_CANCEL = 1050,
  CMD_READ_RMT_FEATURES = 1051,
  CMD_READ_RMT_EXT_FEATURES = 1052,
  CMD_READ_RMT_VERSION_INFO = 1053,
  CMD_READ_RMT_CLOCK_OFFSET = 1055,
  CMD_READ_LMP_HANDLE = 1056,
  CMD_SETUP_ESCO_CONNECTION = 1064,
  CMD_ACCEPT_ESCO_CONNECTION = 1065,
  CMD_REJECT_ESCO_CONNECTION = 1066,
  CMD_IO_CAPABILITY_REQUEST_REPLY = 1067,
  CMD_USER_CONF_REQUEST_REPLY = 1068,
  CMD_USER_CONF_VALUE_NEG_REPLY = 1069,
  CMD_USER_PASSKEY_REQ_REPLY = 1070,
  CMD_USER_PASSKEY_REQ_NEG_REPLY = 1071,
  CMD_REM_OOB_DATA_REQ_REPLY = 1072,
  CMD_REM_OOB_DATA_REQ_NEG_REPLY = 1075,
  CMD_IO_CAP_REQ_NEG_REPLY = 1076,
  CMD_CREATE_PHYSICAL_LINK = 1077,
  CMD_ACCEPT_PHYSICAL_LINK = 1078,
  CMD_DISCONNECT_PHYSICAL_LINK = 1079,
  CMD_CREATE_LOGICAL_LINK = 1080,
  CMD_ACCEPT_LOGICAL_LINK = 1081,
  CMD_DISCONNECT_LOGICAL_LINK = 1082,
  CMD_LOGICAL_LINK_CANCEL = 1083,
  CMD_FLOW_SPEC_MODIFY = 1084,
  CMD_ENH_SETUP_ESCO_CONNECTION = 1085,
  CMD_ENH_ACCEPT_ESCO_CONNECTION = 1086,
  CMD_TRUNCATED_PAGE = 1087,
  CMD_TRUNCATED_PAGE_CANCEL = 1088,
  CMD_SET_CLB = 1089,
  CMD_RECEIVE_CLB = 1090,
  CMD_START_SYNC_TRAIN = 1091,
  CMD_RECEIVE_SYNC_TRAIN = 1092,
  CMD_REM_OOB_EXTENDED_DATA_REQ_REPLY = 1093,
  CMD_HOLD_MODE = 2049,
  CMD_SNIFF_MODE = 2051,
  CMD_EXIT_SNIFF_MODE = 2052,
  CMD_PARK_MODE = 2053,
  CMD_EXIT_PARK_MODE = 2054,
  CMD_QOS_SETUP = 2055,
  CMD_ROLE_DISCOVERY = 2057,
  CMD_SWITCH_ROLE = 2059,
  CMD_READ_POLICY_SETTINGS = 2060,
  CMD_WRITE_POLICY_SETTINGS = 2061,
  CMD_READ_DEF_POLICY_SETTINGS = 2062,
  CMD_WRITE_DEF_POLICY_SETTINGS = 2063,
  CMD_FLOW_SPECIFICATION = 2064,
  CMD_SNIFF_SUB_RATE = 2065,
  CMD_SET_EVENT_MASK = 3073,
  CMD_RESET = 3075,
  CMD_SET_EVENT_FILTER = 3077,
  CMD_FLUSH = 3080,
  CMD_READ_PIN_TYPE = 3081,
  CMD_WRITE_PIN_TYPE = 3082,
  CMD_CREATE_NEW_UNIT_KEY = 3083,
  CMD_GET_MWS_TRANS_LAYER_CFG = 3084,
  CMD_READ_STORED_LINK_KEY = 3085,
  CMD_WRITE_STORED_LINK_KEY = 3089,
  CMD_DELETE_STORED_LINK_KEY = 3090,
  CMD_CHANGE_LOCAL_NAME = 3091,
  CMD_READ_LOCAL_NAME = 3092,
  CMD_READ_CONN_ACCEPT_TOUT = 3093,
  CMD_WRITE_CONN_ACCEPT_TOUT = 3094,
  CMD_READ_PAGE_TOUT = 3095,
  CMD_WRITE_PAGE_TOUT = 3096,
  CMD_READ_SCAN_ENABLE = 3097,
  CMD_WRITE_SCAN_ENABLE = 3098,
  CMD_READ_PAGESCAN_CFG = 3099,
  CMD_WRITE_PAGESCAN_CFG = 3100,
  CMD_READ_INQUIRYSCAN_CFG = 3101,
  CMD_WRITE_INQUIRYSCAN_CFG = 3102,
  CMD_READ_AUTHENTICATION_ENABLE = 3103,
  CMD_WRITE_AUTHENTICATION_ENABLE = 3104,
  CMD_READ_ENCRYPTION_MODE = 3105,
  CMD_WRITE_ENCRYPTION_MODE = 3106,
  CMD_READ_CLASS_OF_DEVICE = 3107,
  CMD_WRITE_CLASS_OF_DEVICE = 3108,
  CMD_READ_VOICE_SETTINGS = 3109,
  CMD_WRITE_VOICE_SETTINGS = 3110,
  CMD_READ_AUTOMATIC_FLUSH_TIMEOUT = 3111,
  CMD_WRITE_AUTOMATIC_FLUSH_TIMEOUT = 3112,
  CMD_READ_NUM_BCAST_REXMITS = 3113,
  CMD_WRITE_NUM_BCAST_REXMITS = 3114,
  CMD_READ_HOLD_MODE_ACTIVITY = 3115,
  CMD_WRITE_HOLD_MODE_ACTIVITY = 3116,
  CMD_READ_TRANSMIT_POWER_LEVEL = 3117,
  CMD_READ_SCO_FLOW_CTRL_ENABLE = 3118,
  CMD_WRITE_SCO_FLOW_CTRL_ENABLE = 3119,
  CMD_SET_HC_TO_HOST_FLOW_CTRL = 3121,
  CMD_HOST_BUFFER_SIZE = 3123,
  CMD_HOST_NUM_PACKETS_DONE = 3125,
  CMD_READ_LINK_SUPER_TOUT = 3126,
  CMD_WRITE_LINK_SUPER_TOUT = 3127,
  CMD_READ_NUM_SUPPORTED_IAC = 3128,
  CMD_READ_CURRENT_IAC_LAP = 3129,
  CMD_WRITE_CURRENT_IAC_LAP = 3130,
  CMD_READ_PAGESCAN_PERIOD_MODE = 3131,
  CMD_WRITE_PAGESCAN_PERIOD_MODE = 3132,
  CMD_READ_PAGESCAN_MODE = 3133,
  CMD_WRITE_PAGESCAN_MODE = 3134,
  CMD_SET_AFH_CHANNELS = 3135,
  CMD_READ_INQSCAN_TYPE = 3138,
  CMD_WRITE_INQSCAN_TYPE = 3139,
  CMD_READ_INQUIRY_MODE = 3140,
  CMD_WRITE_INQUIRY_MODE = 3141,
  CMD_READ_PAGESCAN_TYPE = 3142,
  CMD_WRITE_PAGESCAN_TYPE = 3143,
  CMD_READ_AFH_ASSESSMENT_MODE = 3144,
  CMD_WRITE_AFH_ASSESSMENT_MODE = 3145,
  CMD_READ_EXT_INQ_RESPONSE = 3153,
  CMD_WRITE_EXT_INQ_RESPONSE = 3154,
  CMD_REFRESH_ENCRYPTION_KEY = 3155,
  CMD_READ_SIMPLE_PAIRING_MODE = 3157,
  CMD_WRITE_SIMPLE_PAIRING_MODE = 3158,
  CMD_READ_LOCAL_OOB_DATA = 3159,
  CMD_READ_INQ_TX_POWER_LEVEL = 3160,
  CMD_WRITE_INQ_TX_POWER_LEVEL = 3161,
  CMD_READ_ERRONEOUS_DATA_RPT = 3162,
  CMD_WRITE_ERRONEOUS_DATA_RPT = 3163,
  CMD_ENHANCED_FLUSH = 3167,
  CMD_SEND_KEYPRESS_NOTIF = 3168,
  CMD_READ_LOGICAL_LINK_ACCEPT_TIMEOUT = 3169,
  CMD_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT = 3170,
  CMD_SET_EVENT_MASK_PAGE_2 = 3171,
  CMD_READ_LOCATION_DATA = 3172,
  CMD_WRITE_LOCATION_DATA = 3173,
  CMD_READ_FLOW_CONTROL_MODE = 3174,
  CMD_WRITE_FLOW_CONTROL_MODE = 3175,
  CMD_READ_ENHANCED_TX_PWR_LEVEL = 3176,
  CMD_READ_BE_FLUSH_TOUT = 3177,
  CMD_WRITE_BE_FLUSH_TOUT = 3178,
  CMD_SHORT_RANGE_MODE = 3179,
  CMD_READ_BLE_HOST_SUPPORT = 3180,
  CMD_WRITE_BLE_HOST_SUPPORT = 3181,
  CMD_SET_MWS_CHANNEL_PARAMETERS = 3182,
  CMD_SET_EXTERNAL_FRAME_CONFIGURATION = 3183,
  CMD_SET_MWS_SIGNALING = 3184,
  CMD_SET_MWS_TRANSPORT_LAYER = 3185,
  CMD_SET_MWS_SCAN_FREQUENCY_TABLE = 3186,
  CMD_SET_MWS_PATTERN_CONFIGURATION = 3187,
  CMD_SET_RESERVED_LT_ADDR = 3188,
  CMD_DELETE_RESERVED_LT_ADDR = 3189,
  CMD_WRITE_CLB_DATA = 3190,
  CMD_READ_SYNC_TRAIN_PARAM = 3191,
  CMD_WRITE_SYNC_TRAIN_PARAM = 3192,
  CMD_READ_SECURE_CONNS_SUPPORT = 3193,
  CMD_WRITE_SECURE_CONNS_SUPPORT = 3194,
  CMD_READ_AUTHED_PAYLOAD_TIMEOUT = 3195,
  CMD_WRITE_AUTHED_PAYLOAD_TIMEOUT = 3196,
  CMD_READ_LOCAL_OOB_EXTENDED_DATA = 3197,
  CMD_READ_EXTENDED_PAGE_TIMEOUT = 3198,
  CMD_WRITE_EXTENDED_PAGE_TIMEOUT = 3199,
  CMD_READ_EXTENDED_INQUIRY_LENGTH = 3200,
  CMD_WRITE_EXTENDED_INQUIRY_LENGTH = 3201,
  CMD_READ_LOCAL_VERSION_INFO = 4097,
  CMD_READ_LOCAL_SUPPORTED_CMDS = 4098,
  CMD_READ_LOCAL_FEATURES = 4099,
  CMD_READ_LOCAL_EXT_FEATURES = 4100,
  CMD_READ_BUFFER_SIZE = 4101,
  CMD_READ_COUNTRY_CODE = 4103,
  CMD_READ_BD_ADDR = 4105,
  CMD_READ_DATA_BLOCK_SIZE = 4106,
  CMD_READ_LOCAL_SUPPORTED_CODECS = 4107,
  CMD_READ_FAILED_CONTACT_COUNTER = 5121,
  CMD_RESET_FAILED_CONTACT_COUNTER = 5122,
  CMD_GET_LINK_QUALITY = 5123,
  CMD_READ_RSSI = 5125,
  CMD_READ_AFH_CH_MAP = 5126,
  CMD_READ_CLOCK = 5127,
  CMD_READ_ENCR_KEY_SIZE = 5128,
  CMD_READ_LOCAL_AMP_INFO = 5129,
  CMD_READ_LOCAL_AMP_ASSOC = 5130,
  CMD_WRITE_REMOTE_AMP_ASSOC = 5131,
  CMD_GET_MWS_TRANSPORT_CFG = 5132,
  CMD_SET_TRIGGERED_CLK_CAPTURE = 5133,
  CMD_READ_LOOPBACK_MODE = 6145,
  CMD_WRITE_LOOPBACK_MODE = 6146,
  CMD_ENABLE_DEV_UNDER_TEST_MODE = 6147,
  CMD_WRITE_SIMP_PAIR_DEBUG_MODE = 6148,
  CMD_ENABLE_AMP_RCVR_REPORTS = 6151,
  CMD_AMP_TEST_END = 6152,
  CMD_AMP_TEST = 6153,
  CMD_WRITE_SECURE_CONN_TEST_MODE = 6154,
  CMD_BLE_SET_EVENT_MASK = 8193,
  CMD_BLE_READ_BUFFER_SIZE = 8194,
  CMD_BLE_READ_LOCAL_SPT_FEAT = 8195,
  CMD_BLE_WRITE_LOCAL_SPT_FEAT = 8196,
  CMD_BLE_WRITE_RANDOM_ADDR = 8197,
  CMD_BLE_WRITE_ADV_PARAMS = 8198,
  CMD_BLE_READ_ADV_CHNL_TX_POWER = 8199,
  CMD_BLE_WRITE_ADV_DATA = 8200,
  CMD_BLE_WRITE_SCAN_RSP_DATA = 8201,
  CMD_BLE_WRITE_ADV_ENABLE = 8202,
  CMD_BLE_WRITE_SCAN_PARAMS = 8203,
  CMD_BLE_WRITE_SCAN_ENABLE = 8204,
  CMD_BLE_CREATE_LL_CONN = 8205,
  CMD_BLE_CREATE_CONN_CANCEL = 8206,
  CMD_BLE_READ_WHITE_LIST_SIZE = 8207,
  CMD_BLE_CLEAR_WHITE_LIST = 8208,
  CMD_BLE_ADD_WHITE_LIST = 8209,
  CMD_BLE_REMOVE_WHITE_LIST = 8210,
  CMD_BLE_UPD_LL_CONN_PARAMS = 8211,
  CMD_BLE_SET_HOST_CHNL_CLASS = 8212,
  CMD_BLE_READ_CHNL_MAP = 8213,
  CMD_BLE_READ_REMOTE_FEAT = 8214,
  CMD_BLE_ENCRYPT = 8215,
  CMD_BLE_RAND = 8216,
  CMD_BLE_START_ENC = 8217,
  CMD_BLE_LTK_REQ_REPLY = 8218,
  CMD_BLE_LTK_REQ_NEG_REPLY = 8219,
  CMD_BLE_READ_SUPPORTED_STATES = 8220,
  CMD_BLE_RECEIVER_TEST = 8221,
  CMD_BLE_TRANSMITTER_TEST = 8222,
  CMD_BLE_TEST_END = 8223,
  CMD_BLE_RC_PARAM_REQ_REPLY = 8224,
  CMD_BLE_RC_PARAM_REQ_NEG_REPLY = 8225,
  CMD_BLE_SET_DATA_LENGTH = 8226,
  CMD_BLE_READ_DEFAULT_DATA_LENGTH = 8227,
  CMD_BLE_WRITE_DEFAULT_DATA_LENGTH = 8228,
  CMD_BLE_GENERATE_DHKEY = 8230,
  CMD_BLE_ADD_DEV_RESOLVING_LIST = 8231,
  CMD_BLE_RM_DEV_RESOLVING_LIST = 8232,
  CMD_BLE_CLEAR_RESOLVING_LIST = 8233,
  CMD_BLE_READ_RESOLVING_LIST_SIZE = 8234,
  CMD_BLE_READ_RESOLVABLE_ADDR_PEER = 8235,
  CMD_BLE_READ_RESOLVABLE_ADDR_LOCAL = 8236,
  CMD_BLE_SET_ADDR_RESOLUTION_ENABLE = 8237,
  CMD_BLE_SET_RAND_PRIV_ADDR_TIMOUT = 8238,
  CMD_BLE_READ_MAXIMUM_DATA_LENGTH = 8239,
  CMD_BLE_READ_PHY = 8240,
  CMD_BLE_SET_DEFAULT_PHY = 8241,
  CMD_BLE_SET_PHY = 8242,
  CMD_BLE_ENH_RECEIVER_TEST = 8243,
  CMD_BLE_ENH_TRANSMITTER_TEST = 8244,
  CMD_BLE_SET_EXT_ADVERTISING_RANDOM_ADDRESS = 8245,
  CMD_BLE_SET_EXT_ADVERTISING_PARAM = 8246,
  CMD_BLE_SET_EXT_ADVERTISING_DATA = 8247,
  CMD_BLE_SET_EXT_ADVERTISING_SCAN_RESP = 8248,
  CMD_BLE_SET_EXT_ADVERTISING_ENABLE = 8249,
  CMD_BLE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH = 8250,
  CMD_BLE_READ_NUMBER_OF_SUPPORTED_ADVERTISING_SETS = 8251,
  CMD_BLE_REMOVE_ADVERTISING_SET = 8252,
  CMD_BLE_CLEAR_ADVERTISING_SETS = 8253,
  CMD_BLE_SET_PERIODIC_ADVERTISING_PARAM = 8254,
  CMD_BLE_SET_PERIODIC_ADVERTISING_DATA = 8255,
  CMD_BLE_SET_PERIODIC_ADVERTISING_ENABLE = 8256,
  CMD_BLE_SET_EXTENDED_SCAN_PARAMETERS = 8257,
  CMD_BLE_SET_EXTENDED_SCAN_ENABLE = 8258,
  CMD_BLE_EXTENDED_CREATE_CONNECTION = 8259,
  CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC = 8260,
  CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC_CANCEL = 8261,
  CMD_BLE_PERIODIC_ADVERTISING_TERMINATE_SYNC = 8262,
  CMD_BLE_ADD_DEVICE_TO_PERIODIC_ADVERTISING_LIST = 8263,
  CMD_BLE_RM_DEVICE_FROM_PERIODIC_ADVERTISING_LIST = 8264,
  CMD_BLE_CLEAR_PERIODIC_ADVERTISING_LIST = 8265,
  CMD_BLE_READ_PERIODIC_ADVERTISING_LIST_SIZE = 8266,
  CMD_BLE_READ_TRANSMIT_POWER = 8267,
  CMD_BLE_READ_RF_COMPENS_POWER = 8268,
  CMD_BLE_WRITE_RF_COMPENS_POWER = 8269,
  CMD_BLE_SET_PRIVACY_MODE = 8270,
  CMD_BLE_VENDOR_CAP = 64851,
  CMD_BLE_MULTI_ADV = 64852,
  CMD_BLE_BATCH_SCAN = 64854,
  CMD_BLE_ADV_FILTER = 64855,
  CMD_BLE_TRACK_ADV = 64856,
  CMD_BLE_ENERGY_INFO = 64857,
  CMD_BLE_EXTENDED_SCAN_PARAMS = 64858,
  CMD_CONTROLLER_DEBUG_INFO = 64859,
  CMD_CONTROLLER_A2DP_OPCODE = 64861,
  CMD_BRCM_SET_ACL_PRIORITY = 64599
};
bool CommandEnum_IsValid(int value);
constexpr CommandEnum CommandEnum_MIN = CMD_INQUIRY;
constexpr CommandEnum CommandEnum_MAX = CMD_UNKNOWN;
constexpr int CommandEnum_ARRAYSIZE = CommandEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandEnum_descriptor();
template<typename T>
inline const std::string& CommandEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandEnum_descriptor(), enum_t_value);
}
inline bool CommandEnum_Parse(
    const std::string& name, CommandEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandEnum>(
    CommandEnum_descriptor(), name, value);
}
enum EventEnum : int {
  EVT_UNKNOWN = 4095,
  EVT_INQUIRY_COMP = 1,
  EVT_INQUIRY_RESULT = 2,
  EVT_CONNECTION_COMP = 3,
  EVT_CONNECTION_REQUEST = 4,
  EVT_DISCONNECTION_COMP = 5,
  EVT_AUTHENTICATION_COMP = 6,
  EVT_RMT_NAME_REQUEST_COMP = 7,
  EVT_ENCRYPTION_CHANGE = 8,
  EVT_CHANGE_CONN_LINK_KEY = 9,
  EVT_MASTER_LINK_KEY_COMP = 10,
  EVT_READ_RMT_FEATURES_COMP = 11,
  EVT_READ_RMT_VERSION_COMP = 12,
  EVT_QOS_SETUP_COMP = 13,
  EVT_COMMAND_COMPLETE = 14,
  EVT_COMMAND_STATUS = 15,
  EVT_HARDWARE_ERROR = 16,
  EVT_FLUSH_OCCURRED = 17,
  EVT_ROLE_CHANGE = 18,
  EVT_NUM_COMPL_DATA_PKTS = 19,
  EVT_MODE_CHANGE = 20,
  EVT_RETURN_LINK_KEYS = 21,
  EVT_PIN_CODE_REQUEST = 22,
  EVT_LINK_KEY_REQUEST = 23,
  EVT_LINK_KEY_NOTIFICATION = 24,
  EVT_LOOPBACK_COMMAND = 25,
  EVT_DATA_BUF_OVERFLOW = 26,
  EVT_MAX_SLOTS_CHANGED = 27,
  EVT_READ_CLOCK_OFF_COMP = 28,
  EVT_CONN_PKT_TYPE_CHANGE = 29,
  EVT_QOS_VIOLATION = 30,
  EVT_PAGE_SCAN_MODE_CHANGE = 31,
  EVT_PAGE_SCAN_REP_MODE_CHNG = 32,
  EVT_FLOW_SPECIFICATION_COMP = 33,
  EVT_INQUIRY_RSSI_RESULT = 34,
  EVT_READ_RMT_EXT_FEATURES_COMP = 35,
  EVT_ESCO_CONNECTION_COMP = 44,
  EVT_ESCO_CONNECTION_CHANGED = 45,
  EVT_SNIFF_SUB_RATE = 46,
  EVT_EXTENDED_INQUIRY_RESULT = 47,
  EVT_ENCRYPTION_KEY_REFRESH_COMP = 48,
  EVT_IO_CAPABILITY_REQUEST = 49,
  EVT_IO_CAPABILITY_RESPONSE = 50,
  EVT_USER_CONFIRMATION_REQUEST = 51,
  EVT_USER_PASSKEY_REQUEST = 52,
  EVT_REMOTE_OOB_DATA_REQUEST = 53,
  EVT_SIMPLE_PAIRING_COMPLETE = 54,
  EVT_LINK_SUPER_TOUT_CHANGED = 56,
  EVT_ENHANCED_FLUSH_COMPLETE = 57,
  EVT_USER_PASSKEY_NOTIFY = 59,
  EVT_KEYPRESS_NOTIFY = 60,
  EVT_RMT_HOST_SUP_FEAT_NOTIFY = 61,
  EVT_BLE_META = 62,
  EVT_PHYSICAL_LINK_COMP = 64,
  EVT_CHANNEL_SELECTED = 65,
  EVT_DISC_PHYSICAL_LINK_COMP = 66,
  EVT_PHY_LINK_LOSS_EARLY_WARNING = 67,
  EVT_PHY_LINK_RECOVERY = 68,
  EVT_LOGICAL_LINK_COMP = 69,
  EVT_DISC_LOGICAL_LINK_COMP = 70,
  EVT_FLOW_SPEC_MODIFY_COMP = 71,
  EVT_NUM_COMPL_DATA_BLOCKS = 72,
  EVT_AMP_TEST_START = 73,
  EVT_AMP_TEST_END = 74,
  EVT_AMP_RECEIVER_RPT = 75,
  EVT_SHORT_RANGE_MODE_COMPLETE = 76,
  EVT_AMP_STATUS_CHANGE = 77,
  EVT_SET_TRIGGERED_CLOCK_CAPTURE = 78,
  EVT_SYNC_TRAIN_CMPL = 79,
  EVT_SYNC_TRAIN_RCVD = 80,
  EVT_CONNLESS_SLAVE_BROADCAST_RCVD = 81,
  EVT_CONNLESS_SLAVE_BROADCAST_TIMEOUT = 82,
  EVT_TRUNCATED_PAGE_CMPL = 83,
  EVT_SLAVE_PAGE_RES_TIMEOUT = 84,
  EVT_CONNLESS_SLAVE_BROADCAST_CHNL_MAP_CHANGE = 85,
  EVT_INQUIRY_RES_NOTIFICATION = 86,
  EVT_AUTHED_PAYLOAD_TIMEOUT = 87,
  EVT_SAM_STATUS_CHANGE = 88
};
bool EventEnum_IsValid(int value);
constexpr EventEnum EventEnum_MIN = EVT_INQUIRY_COMP;
constexpr EventEnum EventEnum_MAX = EVT_UNKNOWN;
constexpr int EventEnum_ARRAYSIZE = EventEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventEnum_descriptor();
template<typename T>
inline const std::string& EventEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventEnum_descriptor(), enum_t_value);
}
inline bool EventEnum_Parse(
    const std::string& name, EventEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventEnum>(
    EventEnum_descriptor(), name, value);
}
enum BleMetaEventEnum : int {
  BLE_EVT_UNKNOWN = 4095,
  BLE_EVT_CONN_COMPLETE_EVT = 1,
  BLE_EVT_ADV_PKT_RPT_EVT = 2,
  BLE_EVT_LL_CONN_PARAM_UPD_EVT = 3,
  BLE_EVT_READ_REMOTE_FEAT_CMPL_EVT = 4,
  BLE_EVT_LTK_REQ_EVT = 5,
  BLE_EVT_RC_PARAM_REQ_EVT = 6,
  BLE_EVT_DATA_LENGTH_CHANGE_EVT = 7,
  BLE_EVT_READ_LOCAL_P256_PUB_KEY = 8,
  BLE_EVT_GEN_DHKEY_CMPL = 9,
  BLE_EVT_ENHANCED_CONN_COMPLETE_EVT = 10,
  BLE_EVT_DIRECT_ADV_EVT = 11,
  BLE_EVT_PHY_UPDATE_COMPLETE_EVT = 12,
  BLE_EVT_EXTENDED_ADVERTISING_REPORT_EVT = 13,
  BLE_EVT_PERIODIC_ADV_SYNC_EST_EVT = 14,
  BLE_EVT_PERIODIC_ADV_REPORT_EVT = 15,
  BLE_EVT_PERIODIC_ADV_SYNC_LOST_EVT = 16,
  BLE_EVT_SCAN_TIMEOUT_EVT = 17,
  BLE_EVT_ADVERTISING_SET_TERMINATED_EVT = 18,
  BLE_EVT_SCAN_REQ_RX_EVT = 19,
  BLE_EVT_CHNL_SELECTION_ALGORITHM = 20
};
bool BleMetaEventEnum_IsValid(int value);
constexpr BleMetaEventEnum BleMetaEventEnum_MIN = BLE_EVT_CONN_COMPLETE_EVT;
constexpr BleMetaEventEnum BleMetaEventEnum_MAX = BLE_EVT_UNKNOWN;
constexpr int BleMetaEventEnum_ARRAYSIZE = BleMetaEventEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BleMetaEventEnum_descriptor();
template<typename T>
inline const std::string& BleMetaEventEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BleMetaEventEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BleMetaEventEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BleMetaEventEnum_descriptor(), enum_t_value);
}
inline bool BleMetaEventEnum_Parse(
    const std::string& name, BleMetaEventEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BleMetaEventEnum>(
    BleMetaEventEnum_descriptor(), name, value);
}
enum StatusEnum : int {
  STATUS_UNKNOWN = 4095,
  STATUS_SUCCESS = 0,
  STATUS_ILLEGAL_COMMAND = 1,
  STATUS_NO_CONNECTION = 2,
  STATUS_HW_FAILURE = 3,
  STATUS_PAGE_TIMEOUT = 4,
  STATUS_AUTH_FAILURE = 5,
  STATUS_KEY_MISSING = 6,
  STATUS_MEMORY_FULL = 7,
  STATUS_CONNECTION_TOUT = 8,
  STATUS_MAX_NUM_OF_CONNECTIONS = 9,
  STATUS_MAX_NUM_OF_SCOS = 10,
  STATUS_CONNECTION_EXISTS = 11,
  STATUS_COMMAND_DISALLOWED = 12,
  STATUS_HOST_REJECT_RESOURCES = 13,
  STATUS_HOST_REJECT_SECURITY = 14,
  STATUS_HOST_REJECT_DEVICE = 15,
  STATUS_HOST_TIMEOUT = 16,
  STATUS_UNSUPPORTED_VALUE = 17,
  STATUS_ILLEGAL_PARAMETER_FMT = 18,
  STATUS_PEER_USER = 19,
  STATUS_PEER_LOW_RESOURCES = 20,
  STATUS_PEER_POWER_OFF = 21,
  STATUS_CONN_CAUSE_LOCAL_HOST = 22,
  STATUS_REPEATED_ATTEMPTS = 23,
  STATUS_PAIRING_NOT_ALLOWED = 24,
  STATUS_UNKNOWN_LMP_PDU = 25,
  STATUS_UNSUPPORTED_REM_FEATURE = 26,
  STATUS_SCO_OFFSET_REJECTED = 27,
  STATUS_SCO_INTERVAL_REJECTED = 28,
  STATUS_SCO_AIR_MODE = 29,
  STATUS_INVALID_LMP_PARAM = 30,
  STATUS_UNSPECIFIED = 31,
  STATUS_UNSUPPORTED_LMP_FEATURE = 32,
  STATUS_ROLE_CHANGE_NOT_ALLOWED = 33,
  STATUS_LMP_RESPONSE_TIMEOUT = 34,
  STATUS_LMP_STATUS_TRANS_COLLISION = 35,
  STATUS_LMP_PDU_NOT_ALLOWED = 36,
  STATUS_ENCRY_MODE_NOT_ACCEPTABLE = 37,
  STATUS_UNIT_KEY_USED = 38,
  STATUS_QOS_NOT_SUPPORTED = 39,
  STATUS_INSTANT_PASSED = 40,
  STATUS_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED = 41,
  STATUS_DIFF_TRANSACTION_COLLISION = 42,
  STATUS_UNDEFINED_0x2B = 43,
  STATUS_QOS_UNACCEPTABLE_PARAM = 44,
  STATUS_QOS_REJECTED = 45,
  STATUS_CHAN_CLASSIF_NOT_SUPPORTED = 46,
  STATUS_INSUFFCIENT_SECURITY = 47,
  STATUS_PARAM_OUT_OF_RANGE = 48,
  STATUS_UNDEFINED_0x31 = 49,
  STATUS_ROLE_SWITCH_PENDING = 50,
  STATUS_UNDEFINED_0x33 = 51,
  STATUS_RESERVED_SLOT_VIOLATION = 52,
  STATUS_ROLE_SWITCH_FAILED = 53,
  STATUS_INQ_RSP_DATA_TOO_LARGE = 54,
  STATUS_SIMPLE_PAIRING_NOT_SUPPORTED = 55,
  STATUS_HOST_BUSY_PAIRING = 56,
  STATUS_REJ_NO_SUITABLE_CHANNEL = 57,
  STATUS_CONTROLLER_BUSY = 58,
  STATUS_UNACCEPT_CONN_INTERVAL = 59,
  STATUS_ADVERTISING_TIMEOUT = 60,
  STATUS_CONN_TOUT_DUE_TO_MIC_FAILURE = 61,
  STATUS_CONN_FAILED_ESTABLISHMENT = 62,
  STATUS_MAC_CONNECTION_FAILED = 63,
  STATUS_LT_ADDR_ALREADY_IN_USE = 64,
  STATUS_LT_ADDR_NOT_ALLOCATED = 65,
  STATUS_CLB_NOT_ENABLED = 66,
  STATUS_CLB_DATA_TOO_BIG = 67,
  STATUS_OPERATION_CANCELED_BY_HOST = 68
};
bool StatusEnum_IsValid(int value);
constexpr StatusEnum StatusEnum_MIN = STATUS_SUCCESS;
constexpr StatusEnum StatusEnum_MAX = STATUS_UNKNOWN;
constexpr int StatusEnum_ARRAYSIZE = StatusEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusEnum_descriptor();
template<typename T>
inline const std::string& StatusEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusEnum_descriptor(), enum_t_value);
}
inline bool StatusEnum_Parse(
    const std::string& name, StatusEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusEnum>(
    StatusEnum_descriptor(), name, value);
}
enum BqrIdEnum : int {
  BQR_ID_UNKNOWN = 0,
  BQR_ID_MONITOR_MODE = 1,
  BQR_ID_APPROACH_LSTO = 2,
  BQR_ID_A2DP_AUDIO_CHOPPY = 3,
  BQR_ID_SCO_VOICE_CHOPPY = 4
};
bool BqrIdEnum_IsValid(int value);
constexpr BqrIdEnum BqrIdEnum_MIN = BQR_ID_UNKNOWN;
constexpr BqrIdEnum BqrIdEnum_MAX = BQR_ID_SCO_VOICE_CHOPPY;
constexpr int BqrIdEnum_ARRAYSIZE = BqrIdEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BqrIdEnum_descriptor();
template<typename T>
inline const std::string& BqrIdEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BqrIdEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BqrIdEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BqrIdEnum_descriptor(), enum_t_value);
}
inline bool BqrIdEnum_Parse(
    const std::string& name, BqrIdEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BqrIdEnum>(
    BqrIdEnum_descriptor(), name, value);
}
enum BqrPacketTypeEnum : int {
  BQR_PACKET_TYPE_UNKNOWN = 0,
  BQR_PACKET_TYPE_ID = 1,
  BQR_PACKET_TYPE_NULL = 2,
  BQR_PACKET_TYPE_POLL = 3,
  BQR_PACKET_TYPE_FHS = 4,
  BQR_PACKET_TYPE_HV1 = 5,
  BQR_PACKET_TYPE_HV2 = 6,
  BQR_PACKET_TYPE_HV3 = 7,
  BQR_PACKET_TYPE_DV = 8,
  BQR_PACKET_TYPE_EV3 = 9,
  BQR_PACKET_TYPE_EV4 = 10,
  BQR_PACKET_TYPE_EV5 = 11,
  BQR_PACKET_TYPE_2EV3 = 12,
  BQR_PACKET_TYPE_2EV5 = 13,
  BQR_PACKET_TYPE_3EV3 = 14,
  BQR_PACKET_TYPE_3EV5 = 15,
  BQR_PACKET_TYPE_DM1 = 16,
  BQR_PACKET_TYPE_DH1 = 17,
  BQR_PACKET_TYPE_DM3 = 18,
  BQR_PACKET_TYPE_DH3 = 19,
  BQR_PACKET_TYPE_DM5 = 20,
  BQR_PACKET_TYPE_DH5 = 21,
  BQR_PACKET_TYPE_AUX1 = 22,
  BQR_PACKET_TYPE_2DH1 = 23,
  BQR_PACKET_TYPE_2DH3 = 24,
  BQR_PACKET_TYPE_2DH5 = 25,
  BQR_PACKET_TYPE_3DH1 = 26,
  BQR_PACKET_TYPE_3DH3 = 27,
  BQR_PACKET_TYPE_3DH5 = 28
};
bool BqrPacketTypeEnum_IsValid(int value);
constexpr BqrPacketTypeEnum BqrPacketTypeEnum_MIN = BQR_PACKET_TYPE_UNKNOWN;
constexpr BqrPacketTypeEnum BqrPacketTypeEnum_MAX = BQR_PACKET_TYPE_3DH5;
constexpr int BqrPacketTypeEnum_ARRAYSIZE = BqrPacketTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BqrPacketTypeEnum_descriptor();
template<typename T>
inline const std::string& BqrPacketTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BqrPacketTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BqrPacketTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BqrPacketTypeEnum_descriptor(), enum_t_value);
}
inline bool BqrPacketTypeEnum_Parse(
    const std::string& name, BqrPacketTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BqrPacketTypeEnum>(
    BqrPacketTypeEnum_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hci
}  // namespace bluetooth
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::bluetooth::hci::CommandEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::CommandEnum>() {
  return ::android::bluetooth::hci::CommandEnum_descriptor();
}
template <> struct is_proto_enum< ::android::bluetooth::hci::EventEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::EventEnum>() {
  return ::android::bluetooth::hci::EventEnum_descriptor();
}
template <> struct is_proto_enum< ::android::bluetooth::hci::BleMetaEventEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::BleMetaEventEnum>() {
  return ::android::bluetooth::hci::BleMetaEventEnum_descriptor();
}
template <> struct is_proto_enum< ::android::bluetooth::hci::StatusEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::StatusEnum>() {
  return ::android::bluetooth::hci::StatusEnum_descriptor();
}
template <> struct is_proto_enum< ::android::bluetooth::hci::BqrIdEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::BqrIdEnum>() {
  return ::android::bluetooth::hci::BqrIdEnum_descriptor();
}
template <> struct is_proto_enum< ::android::bluetooth::hci::BqrPacketTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::bluetooth::hci::BqrPacketTypeEnum>() {
  return ::android::bluetooth::hci::BqrPacketTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fbluetooth_2fhci_2fenums_2eproto
