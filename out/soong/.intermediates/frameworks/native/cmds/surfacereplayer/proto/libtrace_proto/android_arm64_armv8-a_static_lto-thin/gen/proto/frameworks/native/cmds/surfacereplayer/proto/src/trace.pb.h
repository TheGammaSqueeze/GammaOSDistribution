// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/cmds/surfacereplayer/proto/src/trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class AlphaChange;
class AlphaChangeDefaultTypeInternal;
extern AlphaChangeDefaultTypeInternal _AlphaChange_default_instance_;
class BackgroundBlurRadiusChange;
class BackgroundBlurRadiusChangeDefaultTypeInternal;
extern BackgroundBlurRadiusChangeDefaultTypeInternal _BackgroundBlurRadiusChange_default_instance_;
class BlurRegionChange;
class BlurRegionChangeDefaultTypeInternal;
extern BlurRegionChangeDefaultTypeInternal _BlurRegionChange_default_instance_;
class BlurRegionsChange;
class BlurRegionsChangeDefaultTypeInternal;
extern BlurRegionsChangeDefaultTypeInternal _BlurRegionsChange_default_instance_;
class BufferUpdate;
class BufferUpdateDefaultTypeInternal;
extern BufferUpdateDefaultTypeInternal _BufferUpdate_default_instance_;
class CornerRadiusChange;
class CornerRadiusChangeDefaultTypeInternal;
extern CornerRadiusChangeDefaultTypeInternal _CornerRadiusChange_default_instance_;
class CropChange;
class CropChangeDefaultTypeInternal;
extern CropChangeDefaultTypeInternal _CropChange_default_instance_;
class DispSurfaceChange;
class DispSurfaceChangeDefaultTypeInternal;
extern DispSurfaceChangeDefaultTypeInternal _DispSurfaceChange_default_instance_;
class DisplayChange;
class DisplayChangeDefaultTypeInternal;
extern DisplayChangeDefaultTypeInternal _DisplayChange_default_instance_;
class DisplayCreation;
class DisplayCreationDefaultTypeInternal;
extern DisplayCreationDefaultTypeInternal _DisplayCreation_default_instance_;
class DisplayDeletion;
class DisplayDeletionDefaultTypeInternal;
extern DisplayDeletionDefaultTypeInternal _DisplayDeletion_default_instance_;
class DisplayFlagsChange;
class DisplayFlagsChangeDefaultTypeInternal;
extern DisplayFlagsChangeDefaultTypeInternal _DisplayFlagsChange_default_instance_;
class HiddenFlagChange;
class HiddenFlagChangeDefaultTypeInternal;
extern HiddenFlagChangeDefaultTypeInternal _HiddenFlagChange_default_instance_;
class Increment;
class IncrementDefaultTypeInternal;
extern IncrementDefaultTypeInternal _Increment_default_instance_;
class LayerChange;
class LayerChangeDefaultTypeInternal;
extern LayerChangeDefaultTypeInternal _LayerChange_default_instance_;
class LayerStackChange;
class LayerStackChangeDefaultTypeInternal;
extern LayerStackChangeDefaultTypeInternal _LayerStackChange_default_instance_;
class MatrixChange;
class MatrixChangeDefaultTypeInternal;
extern MatrixChangeDefaultTypeInternal _MatrixChange_default_instance_;
class OpaqueFlagChange;
class OpaqueFlagChangeDefaultTypeInternal;
extern OpaqueFlagChangeDefaultTypeInternal _OpaqueFlagChange_default_instance_;
class Origin;
class OriginDefaultTypeInternal;
extern OriginDefaultTypeInternal _Origin_default_instance_;
class PositionChange;
class PositionChangeDefaultTypeInternal;
extern PositionChangeDefaultTypeInternal _PositionChange_default_instance_;
class PowerModeUpdate;
class PowerModeUpdateDefaultTypeInternal;
extern PowerModeUpdateDefaultTypeInternal _PowerModeUpdate_default_instance_;
class ProjectionChange;
class ProjectionChangeDefaultTypeInternal;
extern ProjectionChangeDefaultTypeInternal _ProjectionChange_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class RelativeParentChange;
class RelativeParentChangeDefaultTypeInternal;
extern RelativeParentChangeDefaultTypeInternal _RelativeParentChange_default_instance_;
class ReparentChange;
class ReparentChangeDefaultTypeInternal;
extern ReparentChangeDefaultTypeInternal _ReparentChange_default_instance_;
class SecureFlagChange;
class SecureFlagChangeDefaultTypeInternal;
extern SecureFlagChangeDefaultTypeInternal _SecureFlagChange_default_instance_;
class ShadowRadiusChange;
class ShadowRadiusChangeDefaultTypeInternal;
extern ShadowRadiusChangeDefaultTypeInternal _ShadowRadiusChange_default_instance_;
class SizeChange;
class SizeChangeDefaultTypeInternal;
extern SizeChangeDefaultTypeInternal _SizeChange_default_instance_;
class SurfaceChange;
class SurfaceChangeDefaultTypeInternal;
extern SurfaceChangeDefaultTypeInternal _SurfaceChange_default_instance_;
class SurfaceCreation;
class SurfaceCreationDefaultTypeInternal;
extern SurfaceCreationDefaultTypeInternal _SurfaceCreation_default_instance_;
class SurfaceDeletion;
class SurfaceDeletionDefaultTypeInternal;
extern SurfaceDeletionDefaultTypeInternal _SurfaceDeletion_default_instance_;
class Trace;
class TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransparentRegionHintChange;
class TransparentRegionHintChangeDefaultTypeInternal;
extern TransparentRegionHintChangeDefaultTypeInternal _TransparentRegionHintChange_default_instance_;
class TrustedOverlayChange;
class TrustedOverlayChangeDefaultTypeInternal;
extern TrustedOverlayChangeDefaultTypeInternal _TrustedOverlayChange_default_instance_;
class VSyncEvent;
class VSyncEventDefaultTypeInternal;
extern VSyncEventDefaultTypeInternal _VSyncEvent_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::AlphaChange* Arena::CreateMaybeMessage<::android::surfaceflinger::AlphaChange>(Arena*);
template<> ::android::surfaceflinger::BackgroundBlurRadiusChange* Arena::CreateMaybeMessage<::android::surfaceflinger::BackgroundBlurRadiusChange>(Arena*);
template<> ::android::surfaceflinger::BlurRegionChange* Arena::CreateMaybeMessage<::android::surfaceflinger::BlurRegionChange>(Arena*);
template<> ::android::surfaceflinger::BlurRegionsChange* Arena::CreateMaybeMessage<::android::surfaceflinger::BlurRegionsChange>(Arena*);
template<> ::android::surfaceflinger::BufferUpdate* Arena::CreateMaybeMessage<::android::surfaceflinger::BufferUpdate>(Arena*);
template<> ::android::surfaceflinger::CornerRadiusChange* Arena::CreateMaybeMessage<::android::surfaceflinger::CornerRadiusChange>(Arena*);
template<> ::android::surfaceflinger::CropChange* Arena::CreateMaybeMessage<::android::surfaceflinger::CropChange>(Arena*);
template<> ::android::surfaceflinger::DispSurfaceChange* Arena::CreateMaybeMessage<::android::surfaceflinger::DispSurfaceChange>(Arena*);
template<> ::android::surfaceflinger::DisplayChange* Arena::CreateMaybeMessage<::android::surfaceflinger::DisplayChange>(Arena*);
template<> ::android::surfaceflinger::DisplayCreation* Arena::CreateMaybeMessage<::android::surfaceflinger::DisplayCreation>(Arena*);
template<> ::android::surfaceflinger::DisplayDeletion* Arena::CreateMaybeMessage<::android::surfaceflinger::DisplayDeletion>(Arena*);
template<> ::android::surfaceflinger::DisplayFlagsChange* Arena::CreateMaybeMessage<::android::surfaceflinger::DisplayFlagsChange>(Arena*);
template<> ::android::surfaceflinger::HiddenFlagChange* Arena::CreateMaybeMessage<::android::surfaceflinger::HiddenFlagChange>(Arena*);
template<> ::android::surfaceflinger::Increment* Arena::CreateMaybeMessage<::android::surfaceflinger::Increment>(Arena*);
template<> ::android::surfaceflinger::LayerChange* Arena::CreateMaybeMessage<::android::surfaceflinger::LayerChange>(Arena*);
template<> ::android::surfaceflinger::LayerStackChange* Arena::CreateMaybeMessage<::android::surfaceflinger::LayerStackChange>(Arena*);
template<> ::android::surfaceflinger::MatrixChange* Arena::CreateMaybeMessage<::android::surfaceflinger::MatrixChange>(Arena*);
template<> ::android::surfaceflinger::OpaqueFlagChange* Arena::CreateMaybeMessage<::android::surfaceflinger::OpaqueFlagChange>(Arena*);
template<> ::android::surfaceflinger::Origin* Arena::CreateMaybeMessage<::android::surfaceflinger::Origin>(Arena*);
template<> ::android::surfaceflinger::PositionChange* Arena::CreateMaybeMessage<::android::surfaceflinger::PositionChange>(Arena*);
template<> ::android::surfaceflinger::PowerModeUpdate* Arena::CreateMaybeMessage<::android::surfaceflinger::PowerModeUpdate>(Arena*);
template<> ::android::surfaceflinger::ProjectionChange* Arena::CreateMaybeMessage<::android::surfaceflinger::ProjectionChange>(Arena*);
template<> ::android::surfaceflinger::Rectangle* Arena::CreateMaybeMessage<::android::surfaceflinger::Rectangle>(Arena*);
template<> ::android::surfaceflinger::RelativeParentChange* Arena::CreateMaybeMessage<::android::surfaceflinger::RelativeParentChange>(Arena*);
template<> ::android::surfaceflinger::ReparentChange* Arena::CreateMaybeMessage<::android::surfaceflinger::ReparentChange>(Arena*);
template<> ::android::surfaceflinger::SecureFlagChange* Arena::CreateMaybeMessage<::android::surfaceflinger::SecureFlagChange>(Arena*);
template<> ::android::surfaceflinger::ShadowRadiusChange* Arena::CreateMaybeMessage<::android::surfaceflinger::ShadowRadiusChange>(Arena*);
template<> ::android::surfaceflinger::SizeChange* Arena::CreateMaybeMessage<::android::surfaceflinger::SizeChange>(Arena*);
template<> ::android::surfaceflinger::SurfaceChange* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceChange>(Arena*);
template<> ::android::surfaceflinger::SurfaceCreation* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceCreation>(Arena*);
template<> ::android::surfaceflinger::SurfaceDeletion* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceDeletion>(Arena*);
template<> ::android::surfaceflinger::Trace* Arena::CreateMaybeMessage<::android::surfaceflinger::Trace>(Arena*);
template<> ::android::surfaceflinger::Transaction* Arena::CreateMaybeMessage<::android::surfaceflinger::Transaction>(Arena*);
template<> ::android::surfaceflinger::TransparentRegionHintChange* Arena::CreateMaybeMessage<::android::surfaceflinger::TransparentRegionHintChange>(Arena*);
template<> ::android::surfaceflinger::TrustedOverlayChange* Arena::CreateMaybeMessage<::android::surfaceflinger::TrustedOverlayChange>(Arena*);
template<> ::android::surfaceflinger::VSyncEvent* Arena::CreateMaybeMessage<::android::surfaceflinger::VSyncEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

// ===================================================================

class Trace :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.Trace) */ {
 public:
  Trace();
  virtual ~Trace();

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Trace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const final {
    return CreateMaybeMessage<Trace>(nullptr);
  }

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.Trace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncrementFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.Increment increment = 1;
  int increment_size() const;
  void clear_increment();
  ::android::surfaceflinger::Increment* mutable_increment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Increment >*
      mutable_increment();
  const ::android::surfaceflinger::Increment& increment(int index) const;
  ::android::surfaceflinger::Increment* add_increment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Increment >&
      increment() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.Trace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Increment > increment_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Increment :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.Increment) */ {
 public:
  Increment();
  virtual ~Increment();

  Increment(const Increment& from);
  Increment(Increment&& from) noexcept
    : Increment() {
    *this = ::std::move(from);
  }

  inline Increment& operator=(const Increment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Increment& operator=(Increment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Increment& default_instance();

  enum IncrementCase {
    kTransaction = 2,
    kSurfaceCreation = 3,
    kSurfaceDeletion = 4,
    kBufferUpdate = 5,
    kVsyncEvent = 6,
    kDisplayCreation = 7,
    kDisplayDeletion = 8,
    kPowerModeUpdate = 9,
    INCREMENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Increment* internal_default_instance() {
    return reinterpret_cast<const Increment*>(
               &_Increment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Increment& a, Increment& b) {
    a.Swap(&b);
  }
  inline void Swap(Increment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Increment* New() const final {
    return CreateMaybeMessage<Increment>(nullptr);
  }

  Increment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Increment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Increment& from);
  void MergeFrom(const Increment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Increment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.Increment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
    kTransactionFieldNumber = 2,
    kSurfaceCreationFieldNumber = 3,
    kSurfaceDeletionFieldNumber = 4,
    kBufferUpdateFieldNumber = 5,
    kVsyncEventFieldNumber = 6,
    kDisplayCreationFieldNumber = 7,
    kDisplayDeletionFieldNumber = 8,
    kPowerModeUpdateFieldNumber = 9,
  };
  // required int64 time_stamp = 1;
  bool has_time_stamp() const;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.surfaceflinger.Transaction transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  const ::android::surfaceflinger::Transaction& transaction() const;
  ::android::surfaceflinger::Transaction* release_transaction();
  ::android::surfaceflinger::Transaction* mutable_transaction();
  void set_allocated_transaction(::android::surfaceflinger::Transaction* transaction);

  // optional .android.surfaceflinger.SurfaceCreation surface_creation = 3;
  bool has_surface_creation() const;
  void clear_surface_creation();
  const ::android::surfaceflinger::SurfaceCreation& surface_creation() const;
  ::android::surfaceflinger::SurfaceCreation* release_surface_creation();
  ::android::surfaceflinger::SurfaceCreation* mutable_surface_creation();
  void set_allocated_surface_creation(::android::surfaceflinger::SurfaceCreation* surface_creation);

  // optional .android.surfaceflinger.SurfaceDeletion surface_deletion = 4;
  bool has_surface_deletion() const;
  void clear_surface_deletion();
  const ::android::surfaceflinger::SurfaceDeletion& surface_deletion() const;
  ::android::surfaceflinger::SurfaceDeletion* release_surface_deletion();
  ::android::surfaceflinger::SurfaceDeletion* mutable_surface_deletion();
  void set_allocated_surface_deletion(::android::surfaceflinger::SurfaceDeletion* surface_deletion);

  // optional .android.surfaceflinger.BufferUpdate buffer_update = 5;
  bool has_buffer_update() const;
  void clear_buffer_update();
  const ::android::surfaceflinger::BufferUpdate& buffer_update() const;
  ::android::surfaceflinger::BufferUpdate* release_buffer_update();
  ::android::surfaceflinger::BufferUpdate* mutable_buffer_update();
  void set_allocated_buffer_update(::android::surfaceflinger::BufferUpdate* buffer_update);

  // optional .android.surfaceflinger.VSyncEvent vsync_event = 6;
  bool has_vsync_event() const;
  void clear_vsync_event();
  const ::android::surfaceflinger::VSyncEvent& vsync_event() const;
  ::android::surfaceflinger::VSyncEvent* release_vsync_event();
  ::android::surfaceflinger::VSyncEvent* mutable_vsync_event();
  void set_allocated_vsync_event(::android::surfaceflinger::VSyncEvent* vsync_event);

  // optional .android.surfaceflinger.DisplayCreation display_creation = 7;
  bool has_display_creation() const;
  void clear_display_creation();
  const ::android::surfaceflinger::DisplayCreation& display_creation() const;
  ::android::surfaceflinger::DisplayCreation* release_display_creation();
  ::android::surfaceflinger::DisplayCreation* mutable_display_creation();
  void set_allocated_display_creation(::android::surfaceflinger::DisplayCreation* display_creation);

  // optional .android.surfaceflinger.DisplayDeletion display_deletion = 8;
  bool has_display_deletion() const;
  void clear_display_deletion();
  const ::android::surfaceflinger::DisplayDeletion& display_deletion() const;
  ::android::surfaceflinger::DisplayDeletion* release_display_deletion();
  ::android::surfaceflinger::DisplayDeletion* mutable_display_deletion();
  void set_allocated_display_deletion(::android::surfaceflinger::DisplayDeletion* display_deletion);

  // optional .android.surfaceflinger.PowerModeUpdate power_mode_update = 9;
  bool has_power_mode_update() const;
  void clear_power_mode_update();
  const ::android::surfaceflinger::PowerModeUpdate& power_mode_update() const;
  ::android::surfaceflinger::PowerModeUpdate* release_power_mode_update();
  ::android::surfaceflinger::PowerModeUpdate* mutable_power_mode_update();
  void set_allocated_power_mode_update(::android::surfaceflinger::PowerModeUpdate* power_mode_update);

  void clear_increment();
  IncrementCase increment_case() const;
  // @@protoc_insertion_point(class_scope:android.surfaceflinger.Increment)
 private:
  class _Internal;
  void set_has_transaction();
  void set_has_surface_creation();
  void set_has_surface_deletion();
  void set_has_buffer_update();
  void set_has_vsync_event();
  void set_has_display_creation();
  void set_has_display_deletion();
  void set_has_power_mode_update();

  inline bool has_increment() const;
  inline void clear_has_increment();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  union IncrementUnion {
    IncrementUnion() {}
    ::android::surfaceflinger::Transaction* transaction_;
    ::android::surfaceflinger::SurfaceCreation* surface_creation_;
    ::android::surfaceflinger::SurfaceDeletion* surface_deletion_;
    ::android::surfaceflinger::BufferUpdate* buffer_update_;
    ::android::surfaceflinger::VSyncEvent* vsync_event_;
    ::android::surfaceflinger::DisplayCreation* display_creation_;
    ::android::surfaceflinger::DisplayDeletion* display_deletion_;
    ::android::surfaceflinger::PowerModeUpdate* power_mode_update_;
  } increment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurfaceChangeFieldNumber = 1,
    kDisplayChangeFieldNumber = 2,
    kOriginFieldNumber = 5,
    kIdFieldNumber = 6,
    kSynchronousFieldNumber = 3,
    kAnimationFieldNumber = 4,
  };
  // repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
  int surface_change_size() const;
  void clear_surface_change();
  ::android::surfaceflinger::SurfaceChange* mutable_surface_change(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceChange >*
      mutable_surface_change();
  const ::android::surfaceflinger::SurfaceChange& surface_change(int index) const;
  ::android::surfaceflinger::SurfaceChange* add_surface_change();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceChange >&
      surface_change() const;

  // repeated .android.surfaceflinger.DisplayChange display_change = 2;
  int display_change_size() const;
  void clear_display_change();
  ::android::surfaceflinger::DisplayChange* mutable_display_change(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayChange >*
      mutable_display_change();
  const ::android::surfaceflinger::DisplayChange& display_change(int index) const;
  ::android::surfaceflinger::DisplayChange* add_display_change();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayChange >&
      display_change() const;

  // optional .android.surfaceflinger.Origin origin = 5;
  bool has_origin() const;
  void clear_origin();
  const ::android::surfaceflinger::Origin& origin() const;
  ::android::surfaceflinger::Origin* release_origin();
  ::android::surfaceflinger::Origin* mutable_origin();
  void set_allocated_origin(::android::surfaceflinger::Origin* origin);

  // optional uint64 id = 6;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool synchronous = 3;
  bool has_synchronous() const;
  void clear_synchronous();
  bool synchronous() const;
  void set_synchronous(bool value);

  // required bool animation = 4;
  bool has_animation() const;
  void clear_animation();
  bool animation() const;
  void set_animation(bool value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.Transaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceChange > surface_change_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayChange > display_change_;
  ::android::surfaceflinger::Origin* origin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool synchronous_;
  bool animation_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SurfaceChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceChange) */ {
 public:
  SurfaceChange();
  virtual ~SurfaceChange();

  SurfaceChange(const SurfaceChange& from);
  SurfaceChange(SurfaceChange&& from) noexcept
    : SurfaceChange() {
    *this = ::std::move(from);
  }

  inline SurfaceChange& operator=(const SurfaceChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceChange& operator=(SurfaceChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceChange& default_instance();

  enum SurfaceChangeCase {
    kPosition = 2,
    kSize = 3,
    kAlpha = 4,
    kLayer = 5,
    kCrop = 6,
    kMatrix = 8,
    kTransparentRegionHint = 10,
    kLayerStack = 11,
    kHiddenFlag = 12,
    kOpaqueFlag = 13,
    kSecureFlag = 14,
    kCornerRadius = 16,
    kReparent = 17,
    kRelativeParent = 18,
    kBackgroundBlurRadius = 20,
    kShadowRadius = 21,
    kBlurRegions = 22,
    kTrustedOverlay = 23,
    SURFACECHANGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceChange* internal_default_instance() {
    return reinterpret_cast<const SurfaceChange*>(
               &_SurfaceChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SurfaceChange& a, SurfaceChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceChange* New() const final {
    return CreateMaybeMessage<SurfaceChange>(nullptr);
  }

  SurfaceChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceChange& from);
  void MergeFrom(const SurfaceChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAlphaFieldNumber = 4,
    kLayerFieldNumber = 5,
    kCropFieldNumber = 6,
    kMatrixFieldNumber = 8,
    kTransparentRegionHintFieldNumber = 10,
    kLayerStackFieldNumber = 11,
    kHiddenFlagFieldNumber = 12,
    kOpaqueFlagFieldNumber = 13,
    kSecureFlagFieldNumber = 14,
    kCornerRadiusFieldNumber = 16,
    kReparentFieldNumber = 17,
    kRelativeParentFieldNumber = 18,
    kBackgroundBlurRadiusFieldNumber = 20,
    kShadowRadiusFieldNumber = 21,
    kBlurRegionsFieldNumber = 22,
    kTrustedOverlayFieldNumber = 23,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.surfaceflinger.PositionChange position = 2;
  bool has_position() const;
  void clear_position();
  const ::android::surfaceflinger::PositionChange& position() const;
  ::android::surfaceflinger::PositionChange* release_position();
  ::android::surfaceflinger::PositionChange* mutable_position();
  void set_allocated_position(::android::surfaceflinger::PositionChange* position);

  // optional .android.surfaceflinger.SizeChange size = 3;
  bool has_size() const;
  void clear_size();
  const ::android::surfaceflinger::SizeChange& size() const;
  ::android::surfaceflinger::SizeChange* release_size();
  ::android::surfaceflinger::SizeChange* mutable_size();
  void set_allocated_size(::android::surfaceflinger::SizeChange* size);

  // optional .android.surfaceflinger.AlphaChange alpha = 4;
  bool has_alpha() const;
  void clear_alpha();
  const ::android::surfaceflinger::AlphaChange& alpha() const;
  ::android::surfaceflinger::AlphaChange* release_alpha();
  ::android::surfaceflinger::AlphaChange* mutable_alpha();
  void set_allocated_alpha(::android::surfaceflinger::AlphaChange* alpha);

  // optional .android.surfaceflinger.LayerChange layer = 5;
  bool has_layer() const;
  void clear_layer();
  const ::android::surfaceflinger::LayerChange& layer() const;
  ::android::surfaceflinger::LayerChange* release_layer();
  ::android::surfaceflinger::LayerChange* mutable_layer();
  void set_allocated_layer(::android::surfaceflinger::LayerChange* layer);

  // optional .android.surfaceflinger.CropChange crop = 6;
  bool has_crop() const;
  void clear_crop();
  const ::android::surfaceflinger::CropChange& crop() const;
  ::android::surfaceflinger::CropChange* release_crop();
  ::android::surfaceflinger::CropChange* mutable_crop();
  void set_allocated_crop(::android::surfaceflinger::CropChange* crop);

  // optional .android.surfaceflinger.MatrixChange matrix = 8;
  bool has_matrix() const;
  void clear_matrix();
  const ::android::surfaceflinger::MatrixChange& matrix() const;
  ::android::surfaceflinger::MatrixChange* release_matrix();
  ::android::surfaceflinger::MatrixChange* mutable_matrix();
  void set_allocated_matrix(::android::surfaceflinger::MatrixChange* matrix);

  // optional .android.surfaceflinger.TransparentRegionHintChange transparent_region_hint = 10;
  bool has_transparent_region_hint() const;
  void clear_transparent_region_hint();
  const ::android::surfaceflinger::TransparentRegionHintChange& transparent_region_hint() const;
  ::android::surfaceflinger::TransparentRegionHintChange* release_transparent_region_hint();
  ::android::surfaceflinger::TransparentRegionHintChange* mutable_transparent_region_hint();
  void set_allocated_transparent_region_hint(::android::surfaceflinger::TransparentRegionHintChange* transparent_region_hint);

  // optional .android.surfaceflinger.LayerStackChange layer_stack = 11;
  bool has_layer_stack() const;
  void clear_layer_stack();
  const ::android::surfaceflinger::LayerStackChange& layer_stack() const;
  ::android::surfaceflinger::LayerStackChange* release_layer_stack();
  ::android::surfaceflinger::LayerStackChange* mutable_layer_stack();
  void set_allocated_layer_stack(::android::surfaceflinger::LayerStackChange* layer_stack);

  // optional .android.surfaceflinger.HiddenFlagChange hidden_flag = 12;
  bool has_hidden_flag() const;
  void clear_hidden_flag();
  const ::android::surfaceflinger::HiddenFlagChange& hidden_flag() const;
  ::android::surfaceflinger::HiddenFlagChange* release_hidden_flag();
  ::android::surfaceflinger::HiddenFlagChange* mutable_hidden_flag();
  void set_allocated_hidden_flag(::android::surfaceflinger::HiddenFlagChange* hidden_flag);

  // optional .android.surfaceflinger.OpaqueFlagChange opaque_flag = 13;
  bool has_opaque_flag() const;
  void clear_opaque_flag();
  const ::android::surfaceflinger::OpaqueFlagChange& opaque_flag() const;
  ::android::surfaceflinger::OpaqueFlagChange* release_opaque_flag();
  ::android::surfaceflinger::OpaqueFlagChange* mutable_opaque_flag();
  void set_allocated_opaque_flag(::android::surfaceflinger::OpaqueFlagChange* opaque_flag);

  // optional .android.surfaceflinger.SecureFlagChange secure_flag = 14;
  bool has_secure_flag() const;
  void clear_secure_flag();
  const ::android::surfaceflinger::SecureFlagChange& secure_flag() const;
  ::android::surfaceflinger::SecureFlagChange* release_secure_flag();
  ::android::surfaceflinger::SecureFlagChange* mutable_secure_flag();
  void set_allocated_secure_flag(::android::surfaceflinger::SecureFlagChange* secure_flag);

  // optional .android.surfaceflinger.CornerRadiusChange corner_radius = 16;
  bool has_corner_radius() const;
  void clear_corner_radius();
  const ::android::surfaceflinger::CornerRadiusChange& corner_radius() const;
  ::android::surfaceflinger::CornerRadiusChange* release_corner_radius();
  ::android::surfaceflinger::CornerRadiusChange* mutable_corner_radius();
  void set_allocated_corner_radius(::android::surfaceflinger::CornerRadiusChange* corner_radius);

  // optional .android.surfaceflinger.ReparentChange reparent = 17;
  bool has_reparent() const;
  void clear_reparent();
  const ::android::surfaceflinger::ReparentChange& reparent() const;
  ::android::surfaceflinger::ReparentChange* release_reparent();
  ::android::surfaceflinger::ReparentChange* mutable_reparent();
  void set_allocated_reparent(::android::surfaceflinger::ReparentChange* reparent);

  // optional .android.surfaceflinger.RelativeParentChange relative_parent = 18;
  bool has_relative_parent() const;
  void clear_relative_parent();
  const ::android::surfaceflinger::RelativeParentChange& relative_parent() const;
  ::android::surfaceflinger::RelativeParentChange* release_relative_parent();
  ::android::surfaceflinger::RelativeParentChange* mutable_relative_parent();
  void set_allocated_relative_parent(::android::surfaceflinger::RelativeParentChange* relative_parent);

  // optional .android.surfaceflinger.BackgroundBlurRadiusChange background_blur_radius = 20;
  bool has_background_blur_radius() const;
  void clear_background_blur_radius();
  const ::android::surfaceflinger::BackgroundBlurRadiusChange& background_blur_radius() const;
  ::android::surfaceflinger::BackgroundBlurRadiusChange* release_background_blur_radius();
  ::android::surfaceflinger::BackgroundBlurRadiusChange* mutable_background_blur_radius();
  void set_allocated_background_blur_radius(::android::surfaceflinger::BackgroundBlurRadiusChange* background_blur_radius);

  // optional .android.surfaceflinger.ShadowRadiusChange shadow_radius = 21;
  bool has_shadow_radius() const;
  void clear_shadow_radius();
  const ::android::surfaceflinger::ShadowRadiusChange& shadow_radius() const;
  ::android::surfaceflinger::ShadowRadiusChange* release_shadow_radius();
  ::android::surfaceflinger::ShadowRadiusChange* mutable_shadow_radius();
  void set_allocated_shadow_radius(::android::surfaceflinger::ShadowRadiusChange* shadow_radius);

  // optional .android.surfaceflinger.BlurRegionsChange blur_regions = 22;
  bool has_blur_regions() const;
  void clear_blur_regions();
  const ::android::surfaceflinger::BlurRegionsChange& blur_regions() const;
  ::android::surfaceflinger::BlurRegionsChange* release_blur_regions();
  ::android::surfaceflinger::BlurRegionsChange* mutable_blur_regions();
  void set_allocated_blur_regions(::android::surfaceflinger::BlurRegionsChange* blur_regions);

  // optional .android.surfaceflinger.TrustedOverlayChange trusted_overlay = 23;
  bool has_trusted_overlay() const;
  void clear_trusted_overlay();
  const ::android::surfaceflinger::TrustedOverlayChange& trusted_overlay() const;
  ::android::surfaceflinger::TrustedOverlayChange* release_trusted_overlay();
  ::android::surfaceflinger::TrustedOverlayChange* mutable_trusted_overlay();
  void set_allocated_trusted_overlay(::android::surfaceflinger::TrustedOverlayChange* trusted_overlay);

  void clear_SurfaceChange();
  SurfaceChangeCase SurfaceChange_case() const;
  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceChange)
 private:
  class _Internal;
  void set_has_position();
  void set_has_size();
  void set_has_alpha();
  void set_has_layer();
  void set_has_crop();
  void set_has_matrix();
  void set_has_transparent_region_hint();
  void set_has_layer_stack();
  void set_has_hidden_flag();
  void set_has_opaque_flag();
  void set_has_secure_flag();
  void set_has_corner_radius();
  void set_has_reparent();
  void set_has_relative_parent();
  void set_has_background_blur_radius();
  void set_has_shadow_radius();
  void set_has_blur_regions();
  void set_has_trusted_overlay();

  inline bool has_SurfaceChange() const;
  inline void clear_has_SurfaceChange();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  union SurfaceChangeUnion {
    SurfaceChangeUnion() {}
    ::android::surfaceflinger::PositionChange* position_;
    ::android::surfaceflinger::SizeChange* size_;
    ::android::surfaceflinger::AlphaChange* alpha_;
    ::android::surfaceflinger::LayerChange* layer_;
    ::android::surfaceflinger::CropChange* crop_;
    ::android::surfaceflinger::MatrixChange* matrix_;
    ::android::surfaceflinger::TransparentRegionHintChange* transparent_region_hint_;
    ::android::surfaceflinger::LayerStackChange* layer_stack_;
    ::android::surfaceflinger::HiddenFlagChange* hidden_flag_;
    ::android::surfaceflinger::OpaqueFlagChange* opaque_flag_;
    ::android::surfaceflinger::SecureFlagChange* secure_flag_;
    ::android::surfaceflinger::CornerRadiusChange* corner_radius_;
    ::android::surfaceflinger::ReparentChange* reparent_;
    ::android::surfaceflinger::RelativeParentChange* relative_parent_;
    ::android::surfaceflinger::BackgroundBlurRadiusChange* background_blur_radius_;
    ::android::surfaceflinger::ShadowRadiusChange* shadow_radius_;
    ::android::surfaceflinger::BlurRegionsChange* blur_regions_;
    ::android::surfaceflinger::TrustedOverlayChange* trusted_overlay_;
  } SurfaceChange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class PositionChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.PositionChange) */ {
 public:
  PositionChange();
  virtual ~PositionChange();

  PositionChange(const PositionChange& from);
  PositionChange(PositionChange&& from) noexcept
    : PositionChange() {
    *this = ::std::move(from);
  }

  inline PositionChange& operator=(const PositionChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionChange& operator=(PositionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PositionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionChange* internal_default_instance() {
    return reinterpret_cast<const PositionChange*>(
               &_PositionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PositionChange& a, PositionChange& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionChange* New() const final {
    return CreateMaybeMessage<PositionChange>(nullptr);
  }

  PositionChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PositionChange& from);
  void MergeFrom(const PositionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PositionChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.PositionChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.PositionChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SizeChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SizeChange) */ {
 public:
  SizeChange();
  virtual ~SizeChange();

  SizeChange(const SizeChange& from);
  SizeChange(SizeChange&& from) noexcept
    : SizeChange() {
    *this = ::std::move(from);
  }

  inline SizeChange& operator=(const SizeChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SizeChange& operator=(SizeChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SizeChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SizeChange* internal_default_instance() {
    return reinterpret_cast<const SizeChange*>(
               &_SizeChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SizeChange& a, SizeChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SizeChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SizeChange* New() const final {
    return CreateMaybeMessage<SizeChange>(nullptr);
  }

  SizeChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SizeChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SizeChange& from);
  void MergeFrom(const SizeChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SizeChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SizeChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // required uint32 w = 1;
  bool has_w() const;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 h = 2;
  bool has_h() const;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SizeChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class AlphaChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.AlphaChange) */ {
 public:
  AlphaChange();
  virtual ~AlphaChange();

  AlphaChange(const AlphaChange& from);
  AlphaChange(AlphaChange&& from) noexcept
    : AlphaChange() {
    *this = ::std::move(from);
  }

  inline AlphaChange& operator=(const AlphaChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlphaChange& operator=(AlphaChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlphaChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlphaChange* internal_default_instance() {
    return reinterpret_cast<const AlphaChange*>(
               &_AlphaChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AlphaChange& a, AlphaChange& b) {
    a.Swap(&b);
  }
  inline void Swap(AlphaChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlphaChange* New() const final {
    return CreateMaybeMessage<AlphaChange>(nullptr);
  }

  AlphaChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlphaChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AlphaChange& from);
  void MergeFrom(const AlphaChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlphaChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.AlphaChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // required float alpha = 1;
  bool has_alpha() const;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.AlphaChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float alpha_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class CornerRadiusChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.CornerRadiusChange) */ {
 public:
  CornerRadiusChange();
  virtual ~CornerRadiusChange();

  CornerRadiusChange(const CornerRadiusChange& from);
  CornerRadiusChange(CornerRadiusChange&& from) noexcept
    : CornerRadiusChange() {
    *this = ::std::move(from);
  }

  inline CornerRadiusChange& operator=(const CornerRadiusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CornerRadiusChange& operator=(CornerRadiusChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CornerRadiusChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CornerRadiusChange* internal_default_instance() {
    return reinterpret_cast<const CornerRadiusChange*>(
               &_CornerRadiusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CornerRadiusChange& a, CornerRadiusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CornerRadiusChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CornerRadiusChange* New() const final {
    return CreateMaybeMessage<CornerRadiusChange>(nullptr);
  }

  CornerRadiusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CornerRadiusChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CornerRadiusChange& from);
  void MergeFrom(const CornerRadiusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CornerRadiusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.CornerRadiusChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornerRadiusFieldNumber = 1,
  };
  // required float corner_radius = 1;
  bool has_corner_radius() const;
  void clear_corner_radius();
  float corner_radius() const;
  void set_corner_radius(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.CornerRadiusChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float corner_radius_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class BackgroundBlurRadiusChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BackgroundBlurRadiusChange) */ {
 public:
  BackgroundBlurRadiusChange();
  virtual ~BackgroundBlurRadiusChange();

  BackgroundBlurRadiusChange(const BackgroundBlurRadiusChange& from);
  BackgroundBlurRadiusChange(BackgroundBlurRadiusChange&& from) noexcept
    : BackgroundBlurRadiusChange() {
    *this = ::std::move(from);
  }

  inline BackgroundBlurRadiusChange& operator=(const BackgroundBlurRadiusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundBlurRadiusChange& operator=(BackgroundBlurRadiusChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BackgroundBlurRadiusChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackgroundBlurRadiusChange* internal_default_instance() {
    return reinterpret_cast<const BackgroundBlurRadiusChange*>(
               &_BackgroundBlurRadiusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BackgroundBlurRadiusChange& a, BackgroundBlurRadiusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(BackgroundBlurRadiusChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackgroundBlurRadiusChange* New() const final {
    return CreateMaybeMessage<BackgroundBlurRadiusChange>(nullptr);
  }

  BackgroundBlurRadiusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackgroundBlurRadiusChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BackgroundBlurRadiusChange& from);
  void MergeFrom(const BackgroundBlurRadiusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundBlurRadiusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BackgroundBlurRadiusChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundBlurRadiusFieldNumber = 1,
  };
  // required float background_blur_radius = 1;
  bool has_background_blur_radius() const;
  void clear_background_blur_radius();
  float background_blur_radius() const;
  void set_background_blur_radius(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BackgroundBlurRadiusChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float background_blur_radius_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class LayerChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayerChange) */ {
 public:
  LayerChange();
  virtual ~LayerChange();

  LayerChange(const LayerChange& from);
  LayerChange(LayerChange&& from) noexcept
    : LayerChange() {
    *this = ::std::move(from);
  }

  inline LayerChange& operator=(const LayerChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerChange& operator=(LayerChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayerChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerChange* internal_default_instance() {
    return reinterpret_cast<const LayerChange*>(
               &_LayerChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LayerChange& a, LayerChange& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerChange* New() const final {
    return CreateMaybeMessage<LayerChange>(nullptr);
  }

  LayerChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayerChange& from);
  void MergeFrom(const LayerChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayerChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
  };
  // required uint32 layer = 1;
  bool has_layer() const;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayerChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class CropChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.CropChange) */ {
 public:
  CropChange();
  virtual ~CropChange();

  CropChange(const CropChange& from);
  CropChange(CropChange&& from) noexcept
    : CropChange() {
    *this = ::std::move(from);
  }

  inline CropChange& operator=(const CropChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CropChange& operator=(CropChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CropChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropChange* internal_default_instance() {
    return reinterpret_cast<const CropChange*>(
               &_CropChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CropChange& a, CropChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CropChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CropChange* New() const final {
    return CreateMaybeMessage<CropChange>(nullptr);
  }

  CropChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CropChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CropChange& from);
  void MergeFrom(const CropChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CropChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.CropChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectangleFieldNumber = 1,
  };
  // required .android.surfaceflinger.Rectangle rectangle = 1;
  bool has_rectangle() const;
  void clear_rectangle();
  const ::android::surfaceflinger::Rectangle& rectangle() const;
  ::android::surfaceflinger::Rectangle* release_rectangle();
  ::android::surfaceflinger::Rectangle* mutable_rectangle();
  void set_allocated_rectangle(::android::surfaceflinger::Rectangle* rectangle);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.CropChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::surfaceflinger::Rectangle* rectangle_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class MatrixChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.MatrixChange) */ {
 public:
  MatrixChange();
  virtual ~MatrixChange();

  MatrixChange(const MatrixChange& from);
  MatrixChange(MatrixChange&& from) noexcept
    : MatrixChange() {
    *this = ::std::move(from);
  }

  inline MatrixChange& operator=(const MatrixChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixChange& operator=(MatrixChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MatrixChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatrixChange* internal_default_instance() {
    return reinterpret_cast<const MatrixChange*>(
               &_MatrixChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MatrixChange& a, MatrixChange& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatrixChange* New() const final {
    return CreateMaybeMessage<MatrixChange>(nullptr);
  }

  MatrixChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatrixChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MatrixChange& from);
  void MergeFrom(const MatrixChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatrixChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.MatrixChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsdxFieldNumber = 1,
    kDtdxFieldNumber = 2,
    kDsdyFieldNumber = 3,
    kDtdyFieldNumber = 4,
  };
  // required float dsdx = 1;
  bool has_dsdx() const;
  void clear_dsdx();
  float dsdx() const;
  void set_dsdx(float value);

  // required float dtdx = 2;
  bool has_dtdx() const;
  void clear_dtdx();
  float dtdx() const;
  void set_dtdx(float value);

  // required float dsdy = 3;
  bool has_dsdy() const;
  void clear_dsdy();
  float dsdy() const;
  void set_dsdy(float value);

  // required float dtdy = 4;
  bool has_dtdy() const;
  void clear_dtdy();
  float dtdy() const;
  void set_dtdy(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.MatrixChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float dsdx_;
  float dtdx_;
  float dsdy_;
  float dtdy_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class TransparentRegionHintChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.TransparentRegionHintChange) */ {
 public:
  TransparentRegionHintChange();
  virtual ~TransparentRegionHintChange();

  TransparentRegionHintChange(const TransparentRegionHintChange& from);
  TransparentRegionHintChange(TransparentRegionHintChange&& from) noexcept
    : TransparentRegionHintChange() {
    *this = ::std::move(from);
  }

  inline TransparentRegionHintChange& operator=(const TransparentRegionHintChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransparentRegionHintChange& operator=(TransparentRegionHintChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TransparentRegionHintChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransparentRegionHintChange* internal_default_instance() {
    return reinterpret_cast<const TransparentRegionHintChange*>(
               &_TransparentRegionHintChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransparentRegionHintChange& a, TransparentRegionHintChange& b) {
    a.Swap(&b);
  }
  inline void Swap(TransparentRegionHintChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransparentRegionHintChange* New() const final {
    return CreateMaybeMessage<TransparentRegionHintChange>(nullptr);
  }

  TransparentRegionHintChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransparentRegionHintChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TransparentRegionHintChange& from);
  void MergeFrom(const TransparentRegionHintChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransparentRegionHintChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.TransparentRegionHintChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.Rectangle region = 1;
  int region_size() const;
  void clear_region();
  ::android::surfaceflinger::Rectangle* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Rectangle >*
      mutable_region();
  const ::android::surfaceflinger::Rectangle& region(int index) const;
  ::android::surfaceflinger::Rectangle* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Rectangle >&
      region() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.TransparentRegionHintChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Rectangle > region_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class LayerStackChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayerStackChange) */ {
 public:
  LayerStackChange();
  virtual ~LayerStackChange();

  LayerStackChange(const LayerStackChange& from);
  LayerStackChange(LayerStackChange&& from) noexcept
    : LayerStackChange() {
    *this = ::std::move(from);
  }

  inline LayerStackChange& operator=(const LayerStackChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerStackChange& operator=(LayerStackChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayerStackChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerStackChange* internal_default_instance() {
    return reinterpret_cast<const LayerStackChange*>(
               &_LayerStackChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LayerStackChange& a, LayerStackChange& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerStackChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerStackChange* New() const final {
    return CreateMaybeMessage<LayerStackChange>(nullptr);
  }

  LayerStackChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerStackChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayerStackChange& from);
  void MergeFrom(const LayerStackChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerStackChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayerStackChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerStackFieldNumber = 1,
  };
  // required uint32 layer_stack = 1;
  bool has_layer_stack() const;
  void clear_layer_stack();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack() const;
  void set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayerStackChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class DisplayFlagsChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DisplayFlagsChange) */ {
 public:
  DisplayFlagsChange();
  virtual ~DisplayFlagsChange();

  DisplayFlagsChange(const DisplayFlagsChange& from);
  DisplayFlagsChange(DisplayFlagsChange&& from) noexcept
    : DisplayFlagsChange() {
    *this = ::std::move(from);
  }

  inline DisplayFlagsChange& operator=(const DisplayFlagsChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayFlagsChange& operator=(DisplayFlagsChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DisplayFlagsChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayFlagsChange* internal_default_instance() {
    return reinterpret_cast<const DisplayFlagsChange*>(
               &_DisplayFlagsChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DisplayFlagsChange& a, DisplayFlagsChange& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayFlagsChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayFlagsChange* New() const final {
    return CreateMaybeMessage<DisplayFlagsChange>(nullptr);
  }

  DisplayFlagsChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayFlagsChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayFlagsChange& from);
  void MergeFrom(const DisplayFlagsChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayFlagsChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DisplayFlagsChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
  };
  // required uint32 flags = 1;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DisplayFlagsChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class HiddenFlagChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.HiddenFlagChange) */ {
 public:
  HiddenFlagChange();
  virtual ~HiddenFlagChange();

  HiddenFlagChange(const HiddenFlagChange& from);
  HiddenFlagChange(HiddenFlagChange&& from) noexcept
    : HiddenFlagChange() {
    *this = ::std::move(from);
  }

  inline HiddenFlagChange& operator=(const HiddenFlagChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenFlagChange& operator=(HiddenFlagChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HiddenFlagChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HiddenFlagChange* internal_default_instance() {
    return reinterpret_cast<const HiddenFlagChange*>(
               &_HiddenFlagChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HiddenFlagChange& a, HiddenFlagChange& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenFlagChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenFlagChange* New() const final {
    return CreateMaybeMessage<HiddenFlagChange>(nullptr);
  }

  HiddenFlagChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenFlagChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HiddenFlagChange& from);
  void MergeFrom(const HiddenFlagChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HiddenFlagChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.HiddenFlagChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenFlagFieldNumber = 1,
  };
  // required bool hidden_flag = 1;
  bool has_hidden_flag() const;
  void clear_hidden_flag();
  bool hidden_flag() const;
  void set_hidden_flag(bool value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.HiddenFlagChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool hidden_flag_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class OpaqueFlagChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.OpaqueFlagChange) */ {
 public:
  OpaqueFlagChange();
  virtual ~OpaqueFlagChange();

  OpaqueFlagChange(const OpaqueFlagChange& from);
  OpaqueFlagChange(OpaqueFlagChange&& from) noexcept
    : OpaqueFlagChange() {
    *this = ::std::move(from);
  }

  inline OpaqueFlagChange& operator=(const OpaqueFlagChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpaqueFlagChange& operator=(OpaqueFlagChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OpaqueFlagChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpaqueFlagChange* internal_default_instance() {
    return reinterpret_cast<const OpaqueFlagChange*>(
               &_OpaqueFlagChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OpaqueFlagChange& a, OpaqueFlagChange& b) {
    a.Swap(&b);
  }
  inline void Swap(OpaqueFlagChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpaqueFlagChange* New() const final {
    return CreateMaybeMessage<OpaqueFlagChange>(nullptr);
  }

  OpaqueFlagChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpaqueFlagChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OpaqueFlagChange& from);
  void MergeFrom(const OpaqueFlagChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpaqueFlagChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.OpaqueFlagChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueFlagFieldNumber = 1,
  };
  // required bool opaque_flag = 1;
  bool has_opaque_flag() const;
  void clear_opaque_flag();
  bool opaque_flag() const;
  void set_opaque_flag(bool value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.OpaqueFlagChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool opaque_flag_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SecureFlagChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SecureFlagChange) */ {
 public:
  SecureFlagChange();
  virtual ~SecureFlagChange();

  SecureFlagChange(const SecureFlagChange& from);
  SecureFlagChange(SecureFlagChange&& from) noexcept
    : SecureFlagChange() {
    *this = ::std::move(from);
  }

  inline SecureFlagChange& operator=(const SecureFlagChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureFlagChange& operator=(SecureFlagChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SecureFlagChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureFlagChange* internal_default_instance() {
    return reinterpret_cast<const SecureFlagChange*>(
               &_SecureFlagChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SecureFlagChange& a, SecureFlagChange& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureFlagChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureFlagChange* New() const final {
    return CreateMaybeMessage<SecureFlagChange>(nullptr);
  }

  SecureFlagChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureFlagChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SecureFlagChange& from);
  void MergeFrom(const SecureFlagChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecureFlagChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SecureFlagChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecureFlagFieldNumber = 1,
  };
  // required bool secure_flag = 1;
  bool has_secure_flag() const;
  void clear_secure_flag();
  bool secure_flag() const;
  void set_secure_flag(bool value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SecureFlagChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool secure_flag_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class DisplayChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DisplayChange) */ {
 public:
  DisplayChange();
  virtual ~DisplayChange();

  DisplayChange(const DisplayChange& from);
  DisplayChange(DisplayChange&& from) noexcept
    : DisplayChange() {
    *this = ::std::move(from);
  }

  inline DisplayChange& operator=(const DisplayChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayChange& operator=(DisplayChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DisplayChange& default_instance();

  enum DisplayChangeCase {
    kSurface = 2,
    kLayerStack = 3,
    kSize = 4,
    kProjection = 5,
    kFlags = 6,
    DISPLAYCHANGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayChange* internal_default_instance() {
    return reinterpret_cast<const DisplayChange*>(
               &_DisplayChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DisplayChange& a, DisplayChange& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayChange* New() const final {
    return CreateMaybeMessage<DisplayChange>(nullptr);
  }

  DisplayChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayChange& from);
  void MergeFrom(const DisplayChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DisplayChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSurfaceFieldNumber = 2,
    kLayerStackFieldNumber = 3,
    kSizeFieldNumber = 4,
    kProjectionFieldNumber = 5,
    kFlagsFieldNumber = 6,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.surfaceflinger.DispSurfaceChange surface = 2;
  bool has_surface() const;
  void clear_surface();
  const ::android::surfaceflinger::DispSurfaceChange& surface() const;
  ::android::surfaceflinger::DispSurfaceChange* release_surface();
  ::android::surfaceflinger::DispSurfaceChange* mutable_surface();
  void set_allocated_surface(::android::surfaceflinger::DispSurfaceChange* surface);

  // optional .android.surfaceflinger.LayerStackChange layer_stack = 3;
  bool has_layer_stack() const;
  void clear_layer_stack();
  const ::android::surfaceflinger::LayerStackChange& layer_stack() const;
  ::android::surfaceflinger::LayerStackChange* release_layer_stack();
  ::android::surfaceflinger::LayerStackChange* mutable_layer_stack();
  void set_allocated_layer_stack(::android::surfaceflinger::LayerStackChange* layer_stack);

  // optional .android.surfaceflinger.SizeChange size = 4;
  bool has_size() const;
  void clear_size();
  const ::android::surfaceflinger::SizeChange& size() const;
  ::android::surfaceflinger::SizeChange* release_size();
  ::android::surfaceflinger::SizeChange* mutable_size();
  void set_allocated_size(::android::surfaceflinger::SizeChange* size);

  // optional .android.surfaceflinger.ProjectionChange projection = 5;
  bool has_projection() const;
  void clear_projection();
  const ::android::surfaceflinger::ProjectionChange& projection() const;
  ::android::surfaceflinger::ProjectionChange* release_projection();
  ::android::surfaceflinger::ProjectionChange* mutable_projection();
  void set_allocated_projection(::android::surfaceflinger::ProjectionChange* projection);

  // optional .android.surfaceflinger.DisplayFlagsChange flags = 6;
  bool has_flags() const;
  void clear_flags();
  const ::android::surfaceflinger::DisplayFlagsChange& flags() const;
  ::android::surfaceflinger::DisplayFlagsChange* release_flags();
  ::android::surfaceflinger::DisplayFlagsChange* mutable_flags();
  void set_allocated_flags(::android::surfaceflinger::DisplayFlagsChange* flags);

  void clear_DisplayChange();
  DisplayChangeCase DisplayChange_case() const;
  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DisplayChange)
 private:
  class _Internal;
  void set_has_surface();
  void set_has_layer_stack();
  void set_has_size();
  void set_has_projection();
  void set_has_flags();

  inline bool has_DisplayChange() const;
  inline void clear_has_DisplayChange();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  union DisplayChangeUnion {
    DisplayChangeUnion() {}
    ::android::surfaceflinger::DispSurfaceChange* surface_;
    ::android::surfaceflinger::LayerStackChange* layer_stack_;
    ::android::surfaceflinger::SizeChange* size_;
    ::android::surfaceflinger::ProjectionChange* projection_;
    ::android::surfaceflinger::DisplayFlagsChange* flags_;
  } DisplayChange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class DispSurfaceChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DispSurfaceChange) */ {
 public:
  DispSurfaceChange();
  virtual ~DispSurfaceChange();

  DispSurfaceChange(const DispSurfaceChange& from);
  DispSurfaceChange(DispSurfaceChange&& from) noexcept
    : DispSurfaceChange() {
    *this = ::std::move(from);
  }

  inline DispSurfaceChange& operator=(const DispSurfaceChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DispSurfaceChange& operator=(DispSurfaceChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DispSurfaceChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DispSurfaceChange* internal_default_instance() {
    return reinterpret_cast<const DispSurfaceChange*>(
               &_DispSurfaceChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DispSurfaceChange& a, DispSurfaceChange& b) {
    a.Swap(&b);
  }
  inline void Swap(DispSurfaceChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DispSurfaceChange* New() const final {
    return CreateMaybeMessage<DispSurfaceChange>(nullptr);
  }

  DispSurfaceChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DispSurfaceChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DispSurfaceChange& from);
  void MergeFrom(const DispSurfaceChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DispSurfaceChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DispSurfaceChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferQueueNameFieldNumber = 2,
    kBufferQueueIdFieldNumber = 1,
  };
  // required string buffer_queue_name = 2;
  bool has_buffer_queue_name() const;
  void clear_buffer_queue_name();
  const std::string& buffer_queue_name() const;
  void set_buffer_queue_name(const std::string& value);
  void set_buffer_queue_name(std::string&& value);
  void set_buffer_queue_name(const char* value);
  void set_buffer_queue_name(const char* value, size_t size);
  std::string* mutable_buffer_queue_name();
  std::string* release_buffer_queue_name();
  void set_allocated_buffer_queue_name(std::string* buffer_queue_name);

  // required uint64 buffer_queue_id = 1;
  bool has_buffer_queue_id() const;
  void clear_buffer_queue_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_queue_id() const;
  void set_buffer_queue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DispSurfaceChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_queue_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_queue_id_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class ProjectionChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ProjectionChange) */ {
 public:
  ProjectionChange();
  virtual ~ProjectionChange();

  ProjectionChange(const ProjectionChange& from);
  ProjectionChange(ProjectionChange&& from) noexcept
    : ProjectionChange() {
    *this = ::std::move(from);
  }

  inline ProjectionChange& operator=(const ProjectionChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionChange& operator=(ProjectionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProjectionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectionChange* internal_default_instance() {
    return reinterpret_cast<const ProjectionChange*>(
               &_ProjectionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ProjectionChange& a, ProjectionChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProjectionChange* New() const final {
    return CreateMaybeMessage<ProjectionChange>(nullptr);
  }

  ProjectionChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProjectionChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProjectionChange& from);
  void MergeFrom(const ProjectionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProjectionChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ProjectionChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewportFieldNumber = 2,
    kFrameFieldNumber = 3,
    kOrientationFieldNumber = 1,
  };
  // required .android.surfaceflinger.Rectangle viewport = 2;
  bool has_viewport() const;
  void clear_viewport();
  const ::android::surfaceflinger::Rectangle& viewport() const;
  ::android::surfaceflinger::Rectangle* release_viewport();
  ::android::surfaceflinger::Rectangle* mutable_viewport();
  void set_allocated_viewport(::android::surfaceflinger::Rectangle* viewport);

  // required .android.surfaceflinger.Rectangle frame = 3;
  bool has_frame() const;
  void clear_frame();
  const ::android::surfaceflinger::Rectangle& frame() const;
  ::android::surfaceflinger::Rectangle* release_frame();
  ::android::surfaceflinger::Rectangle* mutable_frame();
  void set_allocated_frame(::android::surfaceflinger::Rectangle* frame);

  // required int32 orientation = 1;
  bool has_orientation() const;
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::int32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ProjectionChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::surfaceflinger::Rectangle* viewport_;
  ::android::surfaceflinger::Rectangle* frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Rectangle :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.Rectangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // required int32 left = 1;
  bool has_left() const;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 top = 2;
  bool has_top() const;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 right = 3;
  bool has_right() const;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 bottom = 4;
  bool has_bottom() const;
  void clear_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom() const;
  void set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.Rectangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SurfaceCreation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceCreation) */ {
 public:
  SurfaceCreation();
  virtual ~SurfaceCreation();

  SurfaceCreation(const SurfaceCreation& from);
  SurfaceCreation(SurfaceCreation&& from) noexcept
    : SurfaceCreation() {
    *this = ::std::move(from);
  }

  inline SurfaceCreation& operator=(const SurfaceCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceCreation& operator=(SurfaceCreation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceCreation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceCreation* internal_default_instance() {
    return reinterpret_cast<const SurfaceCreation*>(
               &_SurfaceCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SurfaceCreation& a, SurfaceCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceCreation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceCreation* New() const final {
    return CreateMaybeMessage<SurfaceCreation>(nullptr);
  }

  SurfaceCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceCreation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceCreation& from);
  void MergeFrom(const SurfaceCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceCreation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 w = 3;
  bool has_w() const;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 h = 4;
  bool has_h() const;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceCreation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class SurfaceDeletion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceDeletion) */ {
 public:
  SurfaceDeletion();
  virtual ~SurfaceDeletion();

  SurfaceDeletion(const SurfaceDeletion& from);
  SurfaceDeletion(SurfaceDeletion&& from) noexcept
    : SurfaceDeletion() {
    *this = ::std::move(from);
  }

  inline SurfaceDeletion& operator=(const SurfaceDeletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceDeletion& operator=(SurfaceDeletion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceDeletion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceDeletion* internal_default_instance() {
    return reinterpret_cast<const SurfaceDeletion*>(
               &_SurfaceDeletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SurfaceDeletion& a, SurfaceDeletion& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceDeletion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceDeletion* New() const final {
    return CreateMaybeMessage<SurfaceDeletion>(nullptr);
  }

  SurfaceDeletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceDeletion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceDeletion& from);
  void MergeFrom(const SurfaceDeletion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceDeletion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceDeletion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceDeletion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class BufferUpdate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BufferUpdate) */ {
 public:
  BufferUpdate();
  virtual ~BufferUpdate();

  BufferUpdate(const BufferUpdate& from);
  BufferUpdate(BufferUpdate&& from) noexcept
    : BufferUpdate() {
    *this = ::std::move(from);
  }

  inline BufferUpdate& operator=(const BufferUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BufferUpdate& operator=(BufferUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BufferUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BufferUpdate* internal_default_instance() {
    return reinterpret_cast<const BufferUpdate*>(
               &_BufferUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BufferUpdate& a, BufferUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(BufferUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BufferUpdate* New() const final {
    return CreateMaybeMessage<BufferUpdate>(nullptr);
  }

  BufferUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BufferUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BufferUpdate& from);
  void MergeFrom(const BufferUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BufferUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BufferUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWFieldNumber = 2,
    kFrameNumberFieldNumber = 4,
    kHFieldNumber = 3,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 w = 2;
  bool has_w() const;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint64 frame_number = 4;
  bool has_frame_number() const;
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 h = 3;
  bool has_h() const;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BufferUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 w_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class VSyncEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.VSyncEvent) */ {
 public:
  VSyncEvent();
  virtual ~VSyncEvent();

  VSyncEvent(const VSyncEvent& from);
  VSyncEvent(VSyncEvent&& from) noexcept
    : VSyncEvent() {
    *this = ::std::move(from);
  }

  inline VSyncEvent& operator=(const VSyncEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VSyncEvent& operator=(VSyncEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VSyncEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VSyncEvent* internal_default_instance() {
    return reinterpret_cast<const VSyncEvent*>(
               &_VSyncEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(VSyncEvent& a, VSyncEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VSyncEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VSyncEvent* New() const final {
    return CreateMaybeMessage<VSyncEvent>(nullptr);
  }

  VSyncEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VSyncEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VSyncEvent& from);
  void MergeFrom(const VSyncEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VSyncEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.VSyncEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhenFieldNumber = 1,
  };
  // required int64 when = 1;
  bool has_when() const;
  void clear_when();
  ::PROTOBUF_NAMESPACE_ID::int64 when() const;
  void set_when(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.VSyncEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 when_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class DisplayCreation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DisplayCreation) */ {
 public:
  DisplayCreation();
  virtual ~DisplayCreation();

  DisplayCreation(const DisplayCreation& from);
  DisplayCreation(DisplayCreation&& from) noexcept
    : DisplayCreation() {
    *this = ::std::move(from);
  }

  inline DisplayCreation& operator=(const DisplayCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayCreation& operator=(DisplayCreation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DisplayCreation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayCreation* internal_default_instance() {
    return reinterpret_cast<const DisplayCreation*>(
               &_DisplayCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DisplayCreation& a, DisplayCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayCreation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayCreation* New() const final {
    return CreateMaybeMessage<DisplayCreation>(nullptr);
  }

  DisplayCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayCreation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayCreation& from);
  void MergeFrom(const DisplayCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DisplayCreation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kIsSecureFieldNumber = 4,
    kDisplayIdFieldNumber = 3,
  };
  // required string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool is_secure = 4;
  bool has_is_secure() const;
  void clear_is_secure();
  bool is_secure() const;
  void set_is_secure(bool value);

  // optional uint64 display_id = 3;
  bool has_display_id() const;
  void clear_display_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 display_id() const;
  void set_display_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DisplayCreation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_secure_;
  ::PROTOBUF_NAMESPACE_ID::uint64 display_id_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class DisplayDeletion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DisplayDeletion) */ {
 public:
  DisplayDeletion();
  virtual ~DisplayDeletion();

  DisplayDeletion(const DisplayDeletion& from);
  DisplayDeletion(DisplayDeletion&& from) noexcept
    : DisplayDeletion() {
    *this = ::std::move(from);
  }

  inline DisplayDeletion& operator=(const DisplayDeletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayDeletion& operator=(DisplayDeletion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DisplayDeletion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayDeletion* internal_default_instance() {
    return reinterpret_cast<const DisplayDeletion*>(
               &_DisplayDeletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DisplayDeletion& a, DisplayDeletion& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayDeletion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayDeletion* New() const final {
    return CreateMaybeMessage<DisplayDeletion>(nullptr);
  }

  DisplayDeletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayDeletion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayDeletion& from);
  void MergeFrom(const DisplayDeletion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayDeletion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DisplayDeletion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DisplayDeletion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class PowerModeUpdate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.PowerModeUpdate) */ {
 public:
  PowerModeUpdate();
  virtual ~PowerModeUpdate();

  PowerModeUpdate(const PowerModeUpdate& from);
  PowerModeUpdate(PowerModeUpdate&& from) noexcept
    : PowerModeUpdate() {
    *this = ::std::move(from);
  }

  inline PowerModeUpdate& operator=(const PowerModeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerModeUpdate& operator=(PowerModeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerModeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerModeUpdate* internal_default_instance() {
    return reinterpret_cast<const PowerModeUpdate*>(
               &_PowerModeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PowerModeUpdate& a, PowerModeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerModeUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerModeUpdate* New() const final {
    return CreateMaybeMessage<PowerModeUpdate>(nullptr);
  }

  PowerModeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerModeUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerModeUpdate& from);
  void MergeFrom(const PowerModeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerModeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.PowerModeUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 mode = 2;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.PowerModeUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class ReparentChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ReparentChange) */ {
 public:
  ReparentChange();
  virtual ~ReparentChange();

  ReparentChange(const ReparentChange& from);
  ReparentChange(ReparentChange&& from) noexcept
    : ReparentChange() {
    *this = ::std::move(from);
  }

  inline ReparentChange& operator=(const ReparentChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReparentChange& operator=(ReparentChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReparentChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReparentChange* internal_default_instance() {
    return reinterpret_cast<const ReparentChange*>(
               &_ReparentChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ReparentChange& a, ReparentChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ReparentChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReparentChange* New() const final {
    return CreateMaybeMessage<ReparentChange>(nullptr);
  }

  ReparentChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReparentChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReparentChange& from);
  void MergeFrom(const ReparentChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReparentChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ReparentChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentIdFieldNumber = 1,
  };
  // required int32 parent_id = 1;
  bool has_parent_id() const;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ReparentChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class RelativeParentChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.RelativeParentChange) */ {
 public:
  RelativeParentChange();
  virtual ~RelativeParentChange();

  RelativeParentChange(const RelativeParentChange& from);
  RelativeParentChange(RelativeParentChange&& from) noexcept
    : RelativeParentChange() {
    *this = ::std::move(from);
  }

  inline RelativeParentChange& operator=(const RelativeParentChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeParentChange& operator=(RelativeParentChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RelativeParentChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelativeParentChange* internal_default_instance() {
    return reinterpret_cast<const RelativeParentChange*>(
               &_RelativeParentChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RelativeParentChange& a, RelativeParentChange& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeParentChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelativeParentChange* New() const final {
    return CreateMaybeMessage<RelativeParentChange>(nullptr);
  }

  RelativeParentChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelativeParentChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RelativeParentChange& from);
  void MergeFrom(const RelativeParentChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelativeParentChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.RelativeParentChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeParentIdFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // required int32 relative_parent_id = 1;
  bool has_relative_parent_id() const;
  void clear_relative_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_parent_id() const;
  void set_relative_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 z = 2;
  bool has_z() const;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.RelativeParentChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_parent_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class ShadowRadiusChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ShadowRadiusChange) */ {
 public:
  ShadowRadiusChange();
  virtual ~ShadowRadiusChange();

  ShadowRadiusChange(const ShadowRadiusChange& from);
  ShadowRadiusChange(ShadowRadiusChange&& from) noexcept
    : ShadowRadiusChange() {
    *this = ::std::move(from);
  }

  inline ShadowRadiusChange& operator=(const ShadowRadiusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShadowRadiusChange& operator=(ShadowRadiusChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ShadowRadiusChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShadowRadiusChange* internal_default_instance() {
    return reinterpret_cast<const ShadowRadiusChange*>(
               &_ShadowRadiusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ShadowRadiusChange& a, ShadowRadiusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ShadowRadiusChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShadowRadiusChange* New() const final {
    return CreateMaybeMessage<ShadowRadiusChange>(nullptr);
  }

  ShadowRadiusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShadowRadiusChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ShadowRadiusChange& from);
  void MergeFrom(const ShadowRadiusChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShadowRadiusChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ShadowRadiusChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
  };
  // required float radius = 1;
  bool has_radius() const;
  void clear_radius();
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ShadowRadiusChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float radius_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class TrustedOverlayChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.TrustedOverlayChange) */ {
 public:
  TrustedOverlayChange();
  virtual ~TrustedOverlayChange();

  TrustedOverlayChange(const TrustedOverlayChange& from);
  TrustedOverlayChange(TrustedOverlayChange&& from) noexcept
    : TrustedOverlayChange() {
    *this = ::std::move(from);
  }

  inline TrustedOverlayChange& operator=(const TrustedOverlayChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustedOverlayChange& operator=(TrustedOverlayChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrustedOverlayChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustedOverlayChange* internal_default_instance() {
    return reinterpret_cast<const TrustedOverlayChange*>(
               &_TrustedOverlayChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TrustedOverlayChange& a, TrustedOverlayChange& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustedOverlayChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrustedOverlayChange* New() const final {
    return CreateMaybeMessage<TrustedOverlayChange>(nullptr);
  }

  TrustedOverlayChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustedOverlayChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrustedOverlayChange& from);
  void MergeFrom(const TrustedOverlayChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustedOverlayChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.TrustedOverlayChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTrustedOverlayFieldNumber = 1,
  };
  // required float is_trusted_overlay = 1;
  bool has_is_trusted_overlay() const;
  void clear_is_trusted_overlay();
  float is_trusted_overlay() const;
  void set_is_trusted_overlay(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.TrustedOverlayChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float is_trusted_overlay_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class BlurRegionsChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BlurRegionsChange) */ {
 public:
  BlurRegionsChange();
  virtual ~BlurRegionsChange();

  BlurRegionsChange(const BlurRegionsChange& from);
  BlurRegionsChange(BlurRegionsChange&& from) noexcept
    : BlurRegionsChange() {
    *this = ::std::move(from);
  }

  inline BlurRegionsChange& operator=(const BlurRegionsChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurRegionsChange& operator=(BlurRegionsChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlurRegionsChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlurRegionsChange* internal_default_instance() {
    return reinterpret_cast<const BlurRegionsChange*>(
               &_BlurRegionsChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BlurRegionsChange& a, BlurRegionsChange& b) {
    a.Swap(&b);
  }
  inline void Swap(BlurRegionsChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlurRegionsChange* New() const final {
    return CreateMaybeMessage<BlurRegionsChange>(nullptr);
  }

  BlurRegionsChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlurRegionsChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlurRegionsChange& from);
  void MergeFrom(const BlurRegionsChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlurRegionsChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BlurRegionsChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlurRegionsFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
  int blur_regions_size() const;
  void clear_blur_regions();
  ::android::surfaceflinger::BlurRegionChange* mutable_blur_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegionChange >*
      mutable_blur_regions();
  const ::android::surfaceflinger::BlurRegionChange& blur_regions(int index) const;
  ::android::surfaceflinger::BlurRegionChange* add_blur_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegionChange >&
      blur_regions() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BlurRegionsChange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegionChange > blur_regions_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class BlurRegionChange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BlurRegionChange) */ {
 public:
  BlurRegionChange();
  virtual ~BlurRegionChange();

  BlurRegionChange(const BlurRegionChange& from);
  BlurRegionChange(BlurRegionChange&& from) noexcept
    : BlurRegionChange() {
    *this = ::std::move(from);
  }

  inline BlurRegionChange& operator=(const BlurRegionChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurRegionChange& operator=(BlurRegionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BlurRegionChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlurRegionChange* internal_default_instance() {
    return reinterpret_cast<const BlurRegionChange*>(
               &_BlurRegionChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BlurRegionChange& a, BlurRegionChange& b) {
    a.Swap(&b);
  }
  inline void Swap(BlurRegionChange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlurRegionChange* New() const final {
    return CreateMaybeMessage<BlurRegionChange>(nullptr);
  }

  BlurRegionChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlurRegionChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlurRegionChange& from);
  void MergeFrom(const BlurRegionChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlurRegionChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BlurRegionChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlurRadiusFieldNumber = 1,
    kCornerRadiusTlFieldNumber = 2,
    kCornerRadiusTrFieldNumber = 3,
    kCornerRadiusBlFieldNumber = 4,
    kCornerRadiusBrFieldNumber = 5,
    kAlphaFieldNumber = 6,
    kLeftFieldNumber = 7,
    kTopFieldNumber = 8,
    kRightFieldNumber = 9,
    kBottomFieldNumber = 10,
  };
  // required uint32 blur_radius = 1;
  bool has_blur_radius() const;
  void clear_blur_radius();
  ::PROTOBUF_NAMESPACE_ID::uint32 blur_radius() const;
  void set_blur_radius(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required float corner_radius_tl = 2;
  bool has_corner_radius_tl() const;
  void clear_corner_radius_tl();
  float corner_radius_tl() const;
  void set_corner_radius_tl(float value);

  // required float corner_radius_tr = 3;
  bool has_corner_radius_tr() const;
  void clear_corner_radius_tr();
  float corner_radius_tr() const;
  void set_corner_radius_tr(float value);

  // required float corner_radius_bl = 4;
  bool has_corner_radius_bl() const;
  void clear_corner_radius_bl();
  float corner_radius_bl() const;
  void set_corner_radius_bl(float value);

  // required float corner_radius_br = 5;
  bool has_corner_radius_br() const;
  void clear_corner_radius_br();
  float corner_radius_br() const;
  void set_corner_radius_br(float value);

  // required float alpha = 6;
  bool has_alpha() const;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);

  // required int32 left = 7;
  bool has_left() const;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 top = 8;
  bool has_top() const;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 right = 9;
  bool has_right() const;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 bottom = 10;
  bool has_bottom() const;
  void clear_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom() const;
  void set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BlurRegionChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blur_radius_;
  float corner_radius_tl_;
  float corner_radius_tr_;
  float corner_radius_bl_;
  float corner_radius_br_;
  float alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Origin :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.Origin) */ {
 public:
  Origin();
  virtual ~Origin();

  Origin(const Origin& from);
  Origin(Origin&& from) noexcept
    : Origin() {
    *this = ::std::move(from);
  }

  inline Origin& operator=(const Origin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Origin& operator=(Origin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Origin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Origin* internal_default_instance() {
    return reinterpret_cast<const Origin*>(
               &_Origin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Origin& a, Origin& b) {
    a.Swap(&b);
  }
  inline void Swap(Origin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Origin* New() const final {
    return CreateMaybeMessage<Origin>(nullptr);
  }

  Origin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Origin>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Origin& from);
  void MergeFrom(const Origin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Origin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.Origin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // required int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.Origin)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trace

// repeated .android.surfaceflinger.Increment increment = 1;
inline int Trace::increment_size() const {
  return increment_.size();
}
inline void Trace::clear_increment() {
  increment_.Clear();
}
inline ::android::surfaceflinger::Increment* Trace::mutable_increment(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Trace.increment)
  return increment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Increment >*
Trace::mutable_increment() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.Trace.increment)
  return &increment_;
}
inline const ::android::surfaceflinger::Increment& Trace::increment(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Trace.increment)
  return increment_.Get(index);
}
inline ::android::surfaceflinger::Increment* Trace::add_increment() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.Trace.increment)
  return increment_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Increment >&
Trace::increment() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.Trace.increment)
  return increment_;
}

// -------------------------------------------------------------------

// Increment

// required int64 time_stamp = 1;
inline bool Increment::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Increment::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Increment::time_stamp() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.time_stamp)
  return time_stamp_;
}
inline void Increment::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Increment.time_stamp)
}

// optional .android.surfaceflinger.Transaction transaction = 2;
inline bool Increment::has_transaction() const {
  return increment_case() == kTransaction;
}
inline void Increment::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
inline void Increment::clear_transaction() {
  if (has_transaction()) {
    delete increment_.transaction_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::Transaction* Increment::release_transaction() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.transaction)
  if (has_transaction()) {
    clear_has_increment();
      ::android::surfaceflinger::Transaction* temp = increment_.transaction_;
    increment_.transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::Transaction& Increment::transaction() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.transaction)
  return has_transaction()
      ? *increment_.transaction_
      : *reinterpret_cast< ::android::surfaceflinger::Transaction*>(&::android::surfaceflinger::_Transaction_default_instance_);
}
inline ::android::surfaceflinger::Transaction* Increment::mutable_transaction() {
  if (!has_transaction()) {
    clear_increment();
    set_has_transaction();
    increment_.transaction_ = CreateMaybeMessage< ::android::surfaceflinger::Transaction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.transaction)
  return increment_.transaction_;
}

// optional .android.surfaceflinger.SurfaceCreation surface_creation = 3;
inline bool Increment::has_surface_creation() const {
  return increment_case() == kSurfaceCreation;
}
inline void Increment::set_has_surface_creation() {
  _oneof_case_[0] = kSurfaceCreation;
}
inline void Increment::clear_surface_creation() {
  if (has_surface_creation()) {
    delete increment_.surface_creation_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::SurfaceCreation* Increment::release_surface_creation() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.surface_creation)
  if (has_surface_creation()) {
    clear_has_increment();
      ::android::surfaceflinger::SurfaceCreation* temp = increment_.surface_creation_;
    increment_.surface_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::SurfaceCreation& Increment::surface_creation() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.surface_creation)
  return has_surface_creation()
      ? *increment_.surface_creation_
      : *reinterpret_cast< ::android::surfaceflinger::SurfaceCreation*>(&::android::surfaceflinger::_SurfaceCreation_default_instance_);
}
inline ::android::surfaceflinger::SurfaceCreation* Increment::mutable_surface_creation() {
  if (!has_surface_creation()) {
    clear_increment();
    set_has_surface_creation();
    increment_.surface_creation_ = CreateMaybeMessage< ::android::surfaceflinger::SurfaceCreation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.surface_creation)
  return increment_.surface_creation_;
}

// optional .android.surfaceflinger.SurfaceDeletion surface_deletion = 4;
inline bool Increment::has_surface_deletion() const {
  return increment_case() == kSurfaceDeletion;
}
inline void Increment::set_has_surface_deletion() {
  _oneof_case_[0] = kSurfaceDeletion;
}
inline void Increment::clear_surface_deletion() {
  if (has_surface_deletion()) {
    delete increment_.surface_deletion_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::SurfaceDeletion* Increment::release_surface_deletion() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.surface_deletion)
  if (has_surface_deletion()) {
    clear_has_increment();
      ::android::surfaceflinger::SurfaceDeletion* temp = increment_.surface_deletion_;
    increment_.surface_deletion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::SurfaceDeletion& Increment::surface_deletion() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.surface_deletion)
  return has_surface_deletion()
      ? *increment_.surface_deletion_
      : *reinterpret_cast< ::android::surfaceflinger::SurfaceDeletion*>(&::android::surfaceflinger::_SurfaceDeletion_default_instance_);
}
inline ::android::surfaceflinger::SurfaceDeletion* Increment::mutable_surface_deletion() {
  if (!has_surface_deletion()) {
    clear_increment();
    set_has_surface_deletion();
    increment_.surface_deletion_ = CreateMaybeMessage< ::android::surfaceflinger::SurfaceDeletion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.surface_deletion)
  return increment_.surface_deletion_;
}

// optional .android.surfaceflinger.BufferUpdate buffer_update = 5;
inline bool Increment::has_buffer_update() const {
  return increment_case() == kBufferUpdate;
}
inline void Increment::set_has_buffer_update() {
  _oneof_case_[0] = kBufferUpdate;
}
inline void Increment::clear_buffer_update() {
  if (has_buffer_update()) {
    delete increment_.buffer_update_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::BufferUpdate* Increment::release_buffer_update() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.buffer_update)
  if (has_buffer_update()) {
    clear_has_increment();
      ::android::surfaceflinger::BufferUpdate* temp = increment_.buffer_update_;
    increment_.buffer_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::BufferUpdate& Increment::buffer_update() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.buffer_update)
  return has_buffer_update()
      ? *increment_.buffer_update_
      : *reinterpret_cast< ::android::surfaceflinger::BufferUpdate*>(&::android::surfaceflinger::_BufferUpdate_default_instance_);
}
inline ::android::surfaceflinger::BufferUpdate* Increment::mutable_buffer_update() {
  if (!has_buffer_update()) {
    clear_increment();
    set_has_buffer_update();
    increment_.buffer_update_ = CreateMaybeMessage< ::android::surfaceflinger::BufferUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.buffer_update)
  return increment_.buffer_update_;
}

// optional .android.surfaceflinger.VSyncEvent vsync_event = 6;
inline bool Increment::has_vsync_event() const {
  return increment_case() == kVsyncEvent;
}
inline void Increment::set_has_vsync_event() {
  _oneof_case_[0] = kVsyncEvent;
}
inline void Increment::clear_vsync_event() {
  if (has_vsync_event()) {
    delete increment_.vsync_event_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::VSyncEvent* Increment::release_vsync_event() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.vsync_event)
  if (has_vsync_event()) {
    clear_has_increment();
      ::android::surfaceflinger::VSyncEvent* temp = increment_.vsync_event_;
    increment_.vsync_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::VSyncEvent& Increment::vsync_event() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.vsync_event)
  return has_vsync_event()
      ? *increment_.vsync_event_
      : *reinterpret_cast< ::android::surfaceflinger::VSyncEvent*>(&::android::surfaceflinger::_VSyncEvent_default_instance_);
}
inline ::android::surfaceflinger::VSyncEvent* Increment::mutable_vsync_event() {
  if (!has_vsync_event()) {
    clear_increment();
    set_has_vsync_event();
    increment_.vsync_event_ = CreateMaybeMessage< ::android::surfaceflinger::VSyncEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.vsync_event)
  return increment_.vsync_event_;
}

// optional .android.surfaceflinger.DisplayCreation display_creation = 7;
inline bool Increment::has_display_creation() const {
  return increment_case() == kDisplayCreation;
}
inline void Increment::set_has_display_creation() {
  _oneof_case_[0] = kDisplayCreation;
}
inline void Increment::clear_display_creation() {
  if (has_display_creation()) {
    delete increment_.display_creation_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::DisplayCreation* Increment::release_display_creation() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.display_creation)
  if (has_display_creation()) {
    clear_has_increment();
      ::android::surfaceflinger::DisplayCreation* temp = increment_.display_creation_;
    increment_.display_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::DisplayCreation& Increment::display_creation() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.display_creation)
  return has_display_creation()
      ? *increment_.display_creation_
      : *reinterpret_cast< ::android::surfaceflinger::DisplayCreation*>(&::android::surfaceflinger::_DisplayCreation_default_instance_);
}
inline ::android::surfaceflinger::DisplayCreation* Increment::mutable_display_creation() {
  if (!has_display_creation()) {
    clear_increment();
    set_has_display_creation();
    increment_.display_creation_ = CreateMaybeMessage< ::android::surfaceflinger::DisplayCreation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.display_creation)
  return increment_.display_creation_;
}

// optional .android.surfaceflinger.DisplayDeletion display_deletion = 8;
inline bool Increment::has_display_deletion() const {
  return increment_case() == kDisplayDeletion;
}
inline void Increment::set_has_display_deletion() {
  _oneof_case_[0] = kDisplayDeletion;
}
inline void Increment::clear_display_deletion() {
  if (has_display_deletion()) {
    delete increment_.display_deletion_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::DisplayDeletion* Increment::release_display_deletion() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.display_deletion)
  if (has_display_deletion()) {
    clear_has_increment();
      ::android::surfaceflinger::DisplayDeletion* temp = increment_.display_deletion_;
    increment_.display_deletion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::DisplayDeletion& Increment::display_deletion() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.display_deletion)
  return has_display_deletion()
      ? *increment_.display_deletion_
      : *reinterpret_cast< ::android::surfaceflinger::DisplayDeletion*>(&::android::surfaceflinger::_DisplayDeletion_default_instance_);
}
inline ::android::surfaceflinger::DisplayDeletion* Increment::mutable_display_deletion() {
  if (!has_display_deletion()) {
    clear_increment();
    set_has_display_deletion();
    increment_.display_deletion_ = CreateMaybeMessage< ::android::surfaceflinger::DisplayDeletion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.display_deletion)
  return increment_.display_deletion_;
}

// optional .android.surfaceflinger.PowerModeUpdate power_mode_update = 9;
inline bool Increment::has_power_mode_update() const {
  return increment_case() == kPowerModeUpdate;
}
inline void Increment::set_has_power_mode_update() {
  _oneof_case_[0] = kPowerModeUpdate;
}
inline void Increment::clear_power_mode_update() {
  if (has_power_mode_update()) {
    delete increment_.power_mode_update_;
    clear_has_increment();
  }
}
inline ::android::surfaceflinger::PowerModeUpdate* Increment::release_power_mode_update() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Increment.power_mode_update)
  if (has_power_mode_update()) {
    clear_has_increment();
      ::android::surfaceflinger::PowerModeUpdate* temp = increment_.power_mode_update_;
    increment_.power_mode_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::PowerModeUpdate& Increment::power_mode_update() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Increment.power_mode_update)
  return has_power_mode_update()
      ? *increment_.power_mode_update_
      : *reinterpret_cast< ::android::surfaceflinger::PowerModeUpdate*>(&::android::surfaceflinger::_PowerModeUpdate_default_instance_);
}
inline ::android::surfaceflinger::PowerModeUpdate* Increment::mutable_power_mode_update() {
  if (!has_power_mode_update()) {
    clear_increment();
    set_has_power_mode_update();
    increment_.power_mode_update_ = CreateMaybeMessage< ::android::surfaceflinger::PowerModeUpdate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Increment.power_mode_update)
  return increment_.power_mode_update_;
}

inline bool Increment::has_increment() const {
  return increment_case() != INCREMENT_NOT_SET;
}
inline void Increment::clear_has_increment() {
  _oneof_case_[0] = INCREMENT_NOT_SET;
}
inline Increment::IncrementCase Increment::increment_case() const {
  return Increment::IncrementCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transaction

// repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
inline int Transaction::surface_change_size() const {
  return surface_change_.size();
}
inline void Transaction::clear_surface_change() {
  surface_change_.Clear();
}
inline ::android::surfaceflinger::SurfaceChange* Transaction::mutable_surface_change(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Transaction.surface_change)
  return surface_change_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceChange >*
Transaction::mutable_surface_change() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.Transaction.surface_change)
  return &surface_change_;
}
inline const ::android::surfaceflinger::SurfaceChange& Transaction::surface_change(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.surface_change)
  return surface_change_.Get(index);
}
inline ::android::surfaceflinger::SurfaceChange* Transaction::add_surface_change() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.Transaction.surface_change)
  return surface_change_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceChange >&
Transaction::surface_change() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.Transaction.surface_change)
  return surface_change_;
}

// repeated .android.surfaceflinger.DisplayChange display_change = 2;
inline int Transaction::display_change_size() const {
  return display_change_.size();
}
inline void Transaction::clear_display_change() {
  display_change_.Clear();
}
inline ::android::surfaceflinger::DisplayChange* Transaction::mutable_display_change(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Transaction.display_change)
  return display_change_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayChange >*
Transaction::mutable_display_change() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.Transaction.display_change)
  return &display_change_;
}
inline const ::android::surfaceflinger::DisplayChange& Transaction::display_change(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.display_change)
  return display_change_.Get(index);
}
inline ::android::surfaceflinger::DisplayChange* Transaction::add_display_change() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.Transaction.display_change)
  return display_change_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayChange >&
Transaction::display_change() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.Transaction.display_change)
  return display_change_;
}

// required bool synchronous = 3;
inline bool Transaction::has_synchronous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::clear_synchronous() {
  synchronous_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Transaction::synchronous() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.synchronous)
  return synchronous_;
}
inline void Transaction::set_synchronous(bool value) {
  _has_bits_[0] |= 0x00000004u;
  synchronous_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Transaction.synchronous)
}

// required bool animation = 4;
inline bool Transaction::has_animation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::clear_animation() {
  animation_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Transaction::animation() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.animation)
  return animation_;
}
inline void Transaction::set_animation(bool value) {
  _has_bits_[0] |= 0x00000008u;
  animation_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Transaction.animation)
}

// optional .android.surfaceflinger.Origin origin = 5;
inline bool Transaction::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::surfaceflinger::Origin& Transaction::origin() const {
  const ::android::surfaceflinger::Origin* p = origin_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.origin)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::Origin*>(
      &::android::surfaceflinger::_Origin_default_instance_);
}
inline ::android::surfaceflinger::Origin* Transaction::release_origin() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.Transaction.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::android::surfaceflinger::Origin* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::Origin* Transaction::mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::Origin>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.Transaction.origin)
  return origin_;
}
inline void Transaction::set_allocated_origin(::android::surfaceflinger::Origin* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Transaction.origin)
}

// optional uint64 id = 6;
inline bool Transaction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transaction::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Transaction.id)
  return id_;
}
inline void Transaction::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Transaction.id)
}

// -------------------------------------------------------------------

// SurfaceChange

// required int32 id = 1;
inline bool SurfaceChange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceChange::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceChange::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.id)
  return id_;
}
inline void SurfaceChange::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceChange.id)
}

// optional .android.surfaceflinger.PositionChange position = 2;
inline bool SurfaceChange::has_position() const {
  return SurfaceChange_case() == kPosition;
}
inline void SurfaceChange::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void SurfaceChange::clear_position() {
  if (has_position()) {
    delete SurfaceChange_.position_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::PositionChange* SurfaceChange::release_position() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.position)
  if (has_position()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::PositionChange* temp = SurfaceChange_.position_;
    SurfaceChange_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::PositionChange& SurfaceChange::position() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.position)
  return has_position()
      ? *SurfaceChange_.position_
      : *reinterpret_cast< ::android::surfaceflinger::PositionChange*>(&::android::surfaceflinger::_PositionChange_default_instance_);
}
inline ::android::surfaceflinger::PositionChange* SurfaceChange::mutable_position() {
  if (!has_position()) {
    clear_SurfaceChange();
    set_has_position();
    SurfaceChange_.position_ = CreateMaybeMessage< ::android::surfaceflinger::PositionChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.position)
  return SurfaceChange_.position_;
}

// optional .android.surfaceflinger.SizeChange size = 3;
inline bool SurfaceChange::has_size() const {
  return SurfaceChange_case() == kSize;
}
inline void SurfaceChange::set_has_size() {
  _oneof_case_[0] = kSize;
}
inline void SurfaceChange::clear_size() {
  if (has_size()) {
    delete SurfaceChange_.size_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::SizeChange* SurfaceChange::release_size() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.size)
  if (has_size()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::SizeChange* temp = SurfaceChange_.size_;
    SurfaceChange_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::SizeChange& SurfaceChange::size() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.size)
  return has_size()
      ? *SurfaceChange_.size_
      : *reinterpret_cast< ::android::surfaceflinger::SizeChange*>(&::android::surfaceflinger::_SizeChange_default_instance_);
}
inline ::android::surfaceflinger::SizeChange* SurfaceChange::mutable_size() {
  if (!has_size()) {
    clear_SurfaceChange();
    set_has_size();
    SurfaceChange_.size_ = CreateMaybeMessage< ::android::surfaceflinger::SizeChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.size)
  return SurfaceChange_.size_;
}

// optional .android.surfaceflinger.AlphaChange alpha = 4;
inline bool SurfaceChange::has_alpha() const {
  return SurfaceChange_case() == kAlpha;
}
inline void SurfaceChange::set_has_alpha() {
  _oneof_case_[0] = kAlpha;
}
inline void SurfaceChange::clear_alpha() {
  if (has_alpha()) {
    delete SurfaceChange_.alpha_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::AlphaChange* SurfaceChange::release_alpha() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.alpha)
  if (has_alpha()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::AlphaChange* temp = SurfaceChange_.alpha_;
    SurfaceChange_.alpha_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::AlphaChange& SurfaceChange::alpha() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.alpha)
  return has_alpha()
      ? *SurfaceChange_.alpha_
      : *reinterpret_cast< ::android::surfaceflinger::AlphaChange*>(&::android::surfaceflinger::_AlphaChange_default_instance_);
}
inline ::android::surfaceflinger::AlphaChange* SurfaceChange::mutable_alpha() {
  if (!has_alpha()) {
    clear_SurfaceChange();
    set_has_alpha();
    SurfaceChange_.alpha_ = CreateMaybeMessage< ::android::surfaceflinger::AlphaChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.alpha)
  return SurfaceChange_.alpha_;
}

// optional .android.surfaceflinger.LayerChange layer = 5;
inline bool SurfaceChange::has_layer() const {
  return SurfaceChange_case() == kLayer;
}
inline void SurfaceChange::set_has_layer() {
  _oneof_case_[0] = kLayer;
}
inline void SurfaceChange::clear_layer() {
  if (has_layer()) {
    delete SurfaceChange_.layer_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::LayerChange* SurfaceChange::release_layer() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.layer)
  if (has_layer()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::LayerChange* temp = SurfaceChange_.layer_;
    SurfaceChange_.layer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::LayerChange& SurfaceChange::layer() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.layer)
  return has_layer()
      ? *SurfaceChange_.layer_
      : *reinterpret_cast< ::android::surfaceflinger::LayerChange*>(&::android::surfaceflinger::_LayerChange_default_instance_);
}
inline ::android::surfaceflinger::LayerChange* SurfaceChange::mutable_layer() {
  if (!has_layer()) {
    clear_SurfaceChange();
    set_has_layer();
    SurfaceChange_.layer_ = CreateMaybeMessage< ::android::surfaceflinger::LayerChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.layer)
  return SurfaceChange_.layer_;
}

// optional .android.surfaceflinger.CropChange crop = 6;
inline bool SurfaceChange::has_crop() const {
  return SurfaceChange_case() == kCrop;
}
inline void SurfaceChange::set_has_crop() {
  _oneof_case_[0] = kCrop;
}
inline void SurfaceChange::clear_crop() {
  if (has_crop()) {
    delete SurfaceChange_.crop_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::CropChange* SurfaceChange::release_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.crop)
  if (has_crop()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::CropChange* temp = SurfaceChange_.crop_;
    SurfaceChange_.crop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::CropChange& SurfaceChange::crop() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.crop)
  return has_crop()
      ? *SurfaceChange_.crop_
      : *reinterpret_cast< ::android::surfaceflinger::CropChange*>(&::android::surfaceflinger::_CropChange_default_instance_);
}
inline ::android::surfaceflinger::CropChange* SurfaceChange::mutable_crop() {
  if (!has_crop()) {
    clear_SurfaceChange();
    set_has_crop();
    SurfaceChange_.crop_ = CreateMaybeMessage< ::android::surfaceflinger::CropChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.crop)
  return SurfaceChange_.crop_;
}

// optional .android.surfaceflinger.MatrixChange matrix = 8;
inline bool SurfaceChange::has_matrix() const {
  return SurfaceChange_case() == kMatrix;
}
inline void SurfaceChange::set_has_matrix() {
  _oneof_case_[0] = kMatrix;
}
inline void SurfaceChange::clear_matrix() {
  if (has_matrix()) {
    delete SurfaceChange_.matrix_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::MatrixChange* SurfaceChange::release_matrix() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.matrix)
  if (has_matrix()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::MatrixChange* temp = SurfaceChange_.matrix_;
    SurfaceChange_.matrix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::MatrixChange& SurfaceChange::matrix() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.matrix)
  return has_matrix()
      ? *SurfaceChange_.matrix_
      : *reinterpret_cast< ::android::surfaceflinger::MatrixChange*>(&::android::surfaceflinger::_MatrixChange_default_instance_);
}
inline ::android::surfaceflinger::MatrixChange* SurfaceChange::mutable_matrix() {
  if (!has_matrix()) {
    clear_SurfaceChange();
    set_has_matrix();
    SurfaceChange_.matrix_ = CreateMaybeMessage< ::android::surfaceflinger::MatrixChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.matrix)
  return SurfaceChange_.matrix_;
}

// optional .android.surfaceflinger.TransparentRegionHintChange transparent_region_hint = 10;
inline bool SurfaceChange::has_transparent_region_hint() const {
  return SurfaceChange_case() == kTransparentRegionHint;
}
inline void SurfaceChange::set_has_transparent_region_hint() {
  _oneof_case_[0] = kTransparentRegionHint;
}
inline void SurfaceChange::clear_transparent_region_hint() {
  if (has_transparent_region_hint()) {
    delete SurfaceChange_.transparent_region_hint_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::TransparentRegionHintChange* SurfaceChange::release_transparent_region_hint() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.transparent_region_hint)
  if (has_transparent_region_hint()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::TransparentRegionHintChange* temp = SurfaceChange_.transparent_region_hint_;
    SurfaceChange_.transparent_region_hint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::TransparentRegionHintChange& SurfaceChange::transparent_region_hint() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.transparent_region_hint)
  return has_transparent_region_hint()
      ? *SurfaceChange_.transparent_region_hint_
      : *reinterpret_cast< ::android::surfaceflinger::TransparentRegionHintChange*>(&::android::surfaceflinger::_TransparentRegionHintChange_default_instance_);
}
inline ::android::surfaceflinger::TransparentRegionHintChange* SurfaceChange::mutable_transparent_region_hint() {
  if (!has_transparent_region_hint()) {
    clear_SurfaceChange();
    set_has_transparent_region_hint();
    SurfaceChange_.transparent_region_hint_ = CreateMaybeMessage< ::android::surfaceflinger::TransparentRegionHintChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.transparent_region_hint)
  return SurfaceChange_.transparent_region_hint_;
}

// optional .android.surfaceflinger.LayerStackChange layer_stack = 11;
inline bool SurfaceChange::has_layer_stack() const {
  return SurfaceChange_case() == kLayerStack;
}
inline void SurfaceChange::set_has_layer_stack() {
  _oneof_case_[0] = kLayerStack;
}
inline void SurfaceChange::clear_layer_stack() {
  if (has_layer_stack()) {
    delete SurfaceChange_.layer_stack_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::LayerStackChange* SurfaceChange::release_layer_stack() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.layer_stack)
  if (has_layer_stack()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::LayerStackChange* temp = SurfaceChange_.layer_stack_;
    SurfaceChange_.layer_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::LayerStackChange& SurfaceChange::layer_stack() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.layer_stack)
  return has_layer_stack()
      ? *SurfaceChange_.layer_stack_
      : *reinterpret_cast< ::android::surfaceflinger::LayerStackChange*>(&::android::surfaceflinger::_LayerStackChange_default_instance_);
}
inline ::android::surfaceflinger::LayerStackChange* SurfaceChange::mutable_layer_stack() {
  if (!has_layer_stack()) {
    clear_SurfaceChange();
    set_has_layer_stack();
    SurfaceChange_.layer_stack_ = CreateMaybeMessage< ::android::surfaceflinger::LayerStackChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.layer_stack)
  return SurfaceChange_.layer_stack_;
}

// optional .android.surfaceflinger.HiddenFlagChange hidden_flag = 12;
inline bool SurfaceChange::has_hidden_flag() const {
  return SurfaceChange_case() == kHiddenFlag;
}
inline void SurfaceChange::set_has_hidden_flag() {
  _oneof_case_[0] = kHiddenFlag;
}
inline void SurfaceChange::clear_hidden_flag() {
  if (has_hidden_flag()) {
    delete SurfaceChange_.hidden_flag_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::HiddenFlagChange* SurfaceChange::release_hidden_flag() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.hidden_flag)
  if (has_hidden_flag()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::HiddenFlagChange* temp = SurfaceChange_.hidden_flag_;
    SurfaceChange_.hidden_flag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::HiddenFlagChange& SurfaceChange::hidden_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.hidden_flag)
  return has_hidden_flag()
      ? *SurfaceChange_.hidden_flag_
      : *reinterpret_cast< ::android::surfaceflinger::HiddenFlagChange*>(&::android::surfaceflinger::_HiddenFlagChange_default_instance_);
}
inline ::android::surfaceflinger::HiddenFlagChange* SurfaceChange::mutable_hidden_flag() {
  if (!has_hidden_flag()) {
    clear_SurfaceChange();
    set_has_hidden_flag();
    SurfaceChange_.hidden_flag_ = CreateMaybeMessage< ::android::surfaceflinger::HiddenFlagChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.hidden_flag)
  return SurfaceChange_.hidden_flag_;
}

// optional .android.surfaceflinger.OpaqueFlagChange opaque_flag = 13;
inline bool SurfaceChange::has_opaque_flag() const {
  return SurfaceChange_case() == kOpaqueFlag;
}
inline void SurfaceChange::set_has_opaque_flag() {
  _oneof_case_[0] = kOpaqueFlag;
}
inline void SurfaceChange::clear_opaque_flag() {
  if (has_opaque_flag()) {
    delete SurfaceChange_.opaque_flag_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::OpaqueFlagChange* SurfaceChange::release_opaque_flag() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.opaque_flag)
  if (has_opaque_flag()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::OpaqueFlagChange* temp = SurfaceChange_.opaque_flag_;
    SurfaceChange_.opaque_flag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::OpaqueFlagChange& SurfaceChange::opaque_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.opaque_flag)
  return has_opaque_flag()
      ? *SurfaceChange_.opaque_flag_
      : *reinterpret_cast< ::android::surfaceflinger::OpaqueFlagChange*>(&::android::surfaceflinger::_OpaqueFlagChange_default_instance_);
}
inline ::android::surfaceflinger::OpaqueFlagChange* SurfaceChange::mutable_opaque_flag() {
  if (!has_opaque_flag()) {
    clear_SurfaceChange();
    set_has_opaque_flag();
    SurfaceChange_.opaque_flag_ = CreateMaybeMessage< ::android::surfaceflinger::OpaqueFlagChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.opaque_flag)
  return SurfaceChange_.opaque_flag_;
}

// optional .android.surfaceflinger.SecureFlagChange secure_flag = 14;
inline bool SurfaceChange::has_secure_flag() const {
  return SurfaceChange_case() == kSecureFlag;
}
inline void SurfaceChange::set_has_secure_flag() {
  _oneof_case_[0] = kSecureFlag;
}
inline void SurfaceChange::clear_secure_flag() {
  if (has_secure_flag()) {
    delete SurfaceChange_.secure_flag_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::SecureFlagChange* SurfaceChange::release_secure_flag() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.secure_flag)
  if (has_secure_flag()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::SecureFlagChange* temp = SurfaceChange_.secure_flag_;
    SurfaceChange_.secure_flag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::SecureFlagChange& SurfaceChange::secure_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.secure_flag)
  return has_secure_flag()
      ? *SurfaceChange_.secure_flag_
      : *reinterpret_cast< ::android::surfaceflinger::SecureFlagChange*>(&::android::surfaceflinger::_SecureFlagChange_default_instance_);
}
inline ::android::surfaceflinger::SecureFlagChange* SurfaceChange::mutable_secure_flag() {
  if (!has_secure_flag()) {
    clear_SurfaceChange();
    set_has_secure_flag();
    SurfaceChange_.secure_flag_ = CreateMaybeMessage< ::android::surfaceflinger::SecureFlagChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.secure_flag)
  return SurfaceChange_.secure_flag_;
}

// optional .android.surfaceflinger.CornerRadiusChange corner_radius = 16;
inline bool SurfaceChange::has_corner_radius() const {
  return SurfaceChange_case() == kCornerRadius;
}
inline void SurfaceChange::set_has_corner_radius() {
  _oneof_case_[0] = kCornerRadius;
}
inline void SurfaceChange::clear_corner_radius() {
  if (has_corner_radius()) {
    delete SurfaceChange_.corner_radius_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::CornerRadiusChange* SurfaceChange::release_corner_radius() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.corner_radius)
  if (has_corner_radius()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::CornerRadiusChange* temp = SurfaceChange_.corner_radius_;
    SurfaceChange_.corner_radius_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::CornerRadiusChange& SurfaceChange::corner_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.corner_radius)
  return has_corner_radius()
      ? *SurfaceChange_.corner_radius_
      : *reinterpret_cast< ::android::surfaceflinger::CornerRadiusChange*>(&::android::surfaceflinger::_CornerRadiusChange_default_instance_);
}
inline ::android::surfaceflinger::CornerRadiusChange* SurfaceChange::mutable_corner_radius() {
  if (!has_corner_radius()) {
    clear_SurfaceChange();
    set_has_corner_radius();
    SurfaceChange_.corner_radius_ = CreateMaybeMessage< ::android::surfaceflinger::CornerRadiusChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.corner_radius)
  return SurfaceChange_.corner_radius_;
}

// optional .android.surfaceflinger.ReparentChange reparent = 17;
inline bool SurfaceChange::has_reparent() const {
  return SurfaceChange_case() == kReparent;
}
inline void SurfaceChange::set_has_reparent() {
  _oneof_case_[0] = kReparent;
}
inline void SurfaceChange::clear_reparent() {
  if (has_reparent()) {
    delete SurfaceChange_.reparent_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::ReparentChange* SurfaceChange::release_reparent() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.reparent)
  if (has_reparent()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::ReparentChange* temp = SurfaceChange_.reparent_;
    SurfaceChange_.reparent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::ReparentChange& SurfaceChange::reparent() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.reparent)
  return has_reparent()
      ? *SurfaceChange_.reparent_
      : *reinterpret_cast< ::android::surfaceflinger::ReparentChange*>(&::android::surfaceflinger::_ReparentChange_default_instance_);
}
inline ::android::surfaceflinger::ReparentChange* SurfaceChange::mutable_reparent() {
  if (!has_reparent()) {
    clear_SurfaceChange();
    set_has_reparent();
    SurfaceChange_.reparent_ = CreateMaybeMessage< ::android::surfaceflinger::ReparentChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.reparent)
  return SurfaceChange_.reparent_;
}

// optional .android.surfaceflinger.RelativeParentChange relative_parent = 18;
inline bool SurfaceChange::has_relative_parent() const {
  return SurfaceChange_case() == kRelativeParent;
}
inline void SurfaceChange::set_has_relative_parent() {
  _oneof_case_[0] = kRelativeParent;
}
inline void SurfaceChange::clear_relative_parent() {
  if (has_relative_parent()) {
    delete SurfaceChange_.relative_parent_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::RelativeParentChange* SurfaceChange::release_relative_parent() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.relative_parent)
  if (has_relative_parent()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::RelativeParentChange* temp = SurfaceChange_.relative_parent_;
    SurfaceChange_.relative_parent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::RelativeParentChange& SurfaceChange::relative_parent() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.relative_parent)
  return has_relative_parent()
      ? *SurfaceChange_.relative_parent_
      : *reinterpret_cast< ::android::surfaceflinger::RelativeParentChange*>(&::android::surfaceflinger::_RelativeParentChange_default_instance_);
}
inline ::android::surfaceflinger::RelativeParentChange* SurfaceChange::mutable_relative_parent() {
  if (!has_relative_parent()) {
    clear_SurfaceChange();
    set_has_relative_parent();
    SurfaceChange_.relative_parent_ = CreateMaybeMessage< ::android::surfaceflinger::RelativeParentChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.relative_parent)
  return SurfaceChange_.relative_parent_;
}

// optional .android.surfaceflinger.BackgroundBlurRadiusChange background_blur_radius = 20;
inline bool SurfaceChange::has_background_blur_radius() const {
  return SurfaceChange_case() == kBackgroundBlurRadius;
}
inline void SurfaceChange::set_has_background_blur_radius() {
  _oneof_case_[0] = kBackgroundBlurRadius;
}
inline void SurfaceChange::clear_background_blur_radius() {
  if (has_background_blur_radius()) {
    delete SurfaceChange_.background_blur_radius_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::BackgroundBlurRadiusChange* SurfaceChange::release_background_blur_radius() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.background_blur_radius)
  if (has_background_blur_radius()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::BackgroundBlurRadiusChange* temp = SurfaceChange_.background_blur_radius_;
    SurfaceChange_.background_blur_radius_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::BackgroundBlurRadiusChange& SurfaceChange::background_blur_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.background_blur_radius)
  return has_background_blur_radius()
      ? *SurfaceChange_.background_blur_radius_
      : *reinterpret_cast< ::android::surfaceflinger::BackgroundBlurRadiusChange*>(&::android::surfaceflinger::_BackgroundBlurRadiusChange_default_instance_);
}
inline ::android::surfaceflinger::BackgroundBlurRadiusChange* SurfaceChange::mutable_background_blur_radius() {
  if (!has_background_blur_radius()) {
    clear_SurfaceChange();
    set_has_background_blur_radius();
    SurfaceChange_.background_blur_radius_ = CreateMaybeMessage< ::android::surfaceflinger::BackgroundBlurRadiusChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.background_blur_radius)
  return SurfaceChange_.background_blur_radius_;
}

// optional .android.surfaceflinger.ShadowRadiusChange shadow_radius = 21;
inline bool SurfaceChange::has_shadow_radius() const {
  return SurfaceChange_case() == kShadowRadius;
}
inline void SurfaceChange::set_has_shadow_radius() {
  _oneof_case_[0] = kShadowRadius;
}
inline void SurfaceChange::clear_shadow_radius() {
  if (has_shadow_radius()) {
    delete SurfaceChange_.shadow_radius_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::ShadowRadiusChange* SurfaceChange::release_shadow_radius() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.shadow_radius)
  if (has_shadow_radius()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::ShadowRadiusChange* temp = SurfaceChange_.shadow_radius_;
    SurfaceChange_.shadow_radius_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::ShadowRadiusChange& SurfaceChange::shadow_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.shadow_radius)
  return has_shadow_radius()
      ? *SurfaceChange_.shadow_radius_
      : *reinterpret_cast< ::android::surfaceflinger::ShadowRadiusChange*>(&::android::surfaceflinger::_ShadowRadiusChange_default_instance_);
}
inline ::android::surfaceflinger::ShadowRadiusChange* SurfaceChange::mutable_shadow_radius() {
  if (!has_shadow_radius()) {
    clear_SurfaceChange();
    set_has_shadow_radius();
    SurfaceChange_.shadow_radius_ = CreateMaybeMessage< ::android::surfaceflinger::ShadowRadiusChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.shadow_radius)
  return SurfaceChange_.shadow_radius_;
}

// optional .android.surfaceflinger.BlurRegionsChange blur_regions = 22;
inline bool SurfaceChange::has_blur_regions() const {
  return SurfaceChange_case() == kBlurRegions;
}
inline void SurfaceChange::set_has_blur_regions() {
  _oneof_case_[0] = kBlurRegions;
}
inline void SurfaceChange::clear_blur_regions() {
  if (has_blur_regions()) {
    delete SurfaceChange_.blur_regions_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::BlurRegionsChange* SurfaceChange::release_blur_regions() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.blur_regions)
  if (has_blur_regions()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::BlurRegionsChange* temp = SurfaceChange_.blur_regions_;
    SurfaceChange_.blur_regions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::BlurRegionsChange& SurfaceChange::blur_regions() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.blur_regions)
  return has_blur_regions()
      ? *SurfaceChange_.blur_regions_
      : *reinterpret_cast< ::android::surfaceflinger::BlurRegionsChange*>(&::android::surfaceflinger::_BlurRegionsChange_default_instance_);
}
inline ::android::surfaceflinger::BlurRegionsChange* SurfaceChange::mutable_blur_regions() {
  if (!has_blur_regions()) {
    clear_SurfaceChange();
    set_has_blur_regions();
    SurfaceChange_.blur_regions_ = CreateMaybeMessage< ::android::surfaceflinger::BlurRegionsChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.blur_regions)
  return SurfaceChange_.blur_regions_;
}

// optional .android.surfaceflinger.TrustedOverlayChange trusted_overlay = 23;
inline bool SurfaceChange::has_trusted_overlay() const {
  return SurfaceChange_case() == kTrustedOverlay;
}
inline void SurfaceChange::set_has_trusted_overlay() {
  _oneof_case_[0] = kTrustedOverlay;
}
inline void SurfaceChange::clear_trusted_overlay() {
  if (has_trusted_overlay()) {
    delete SurfaceChange_.trusted_overlay_;
    clear_has_SurfaceChange();
  }
}
inline ::android::surfaceflinger::TrustedOverlayChange* SurfaceChange::release_trusted_overlay() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceChange.trusted_overlay)
  if (has_trusted_overlay()) {
    clear_has_SurfaceChange();
      ::android::surfaceflinger::TrustedOverlayChange* temp = SurfaceChange_.trusted_overlay_;
    SurfaceChange_.trusted_overlay_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::TrustedOverlayChange& SurfaceChange::trusted_overlay() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceChange.trusted_overlay)
  return has_trusted_overlay()
      ? *SurfaceChange_.trusted_overlay_
      : *reinterpret_cast< ::android::surfaceflinger::TrustedOverlayChange*>(&::android::surfaceflinger::_TrustedOverlayChange_default_instance_);
}
inline ::android::surfaceflinger::TrustedOverlayChange* SurfaceChange::mutable_trusted_overlay() {
  if (!has_trusted_overlay()) {
    clear_SurfaceChange();
    set_has_trusted_overlay();
    SurfaceChange_.trusted_overlay_ = CreateMaybeMessage< ::android::surfaceflinger::TrustedOverlayChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceChange.trusted_overlay)
  return SurfaceChange_.trusted_overlay_;
}

inline bool SurfaceChange::has_SurfaceChange() const {
  return SurfaceChange_case() != SURFACECHANGE_NOT_SET;
}
inline void SurfaceChange::clear_has_SurfaceChange() {
  _oneof_case_[0] = SURFACECHANGE_NOT_SET;
}
inline SurfaceChange::SurfaceChangeCase SurfaceChange::SurfaceChange_case() const {
  return SurfaceChange::SurfaceChangeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PositionChange

// required float x = 1;
inline bool PositionChange::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PositionChange::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PositionChange::x() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PositionChange.x)
  return x_;
}
inline void PositionChange::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PositionChange.x)
}

// required float y = 2;
inline bool PositionChange::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PositionChange::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PositionChange::y() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PositionChange.y)
  return y_;
}
inline void PositionChange::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PositionChange.y)
}

// -------------------------------------------------------------------

// SizeChange

// required uint32 w = 1;
inline bool SizeChange::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SizeChange::clear_w() {
  w_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SizeChange::w() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SizeChange.w)
  return w_;
}
inline void SizeChange::set_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  w_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SizeChange.w)
}

// required uint32 h = 2;
inline bool SizeChange::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SizeChange::clear_h() {
  h_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SizeChange::h() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SizeChange.h)
  return h_;
}
inline void SizeChange::set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  h_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SizeChange.h)
}

// -------------------------------------------------------------------

// AlphaChange

// required float alpha = 1;
inline bool AlphaChange::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlphaChange::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AlphaChange::alpha() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.AlphaChange.alpha)
  return alpha_;
}
inline void AlphaChange::set_alpha(float value) {
  _has_bits_[0] |= 0x00000001u;
  alpha_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.AlphaChange.alpha)
}

// -------------------------------------------------------------------

// CornerRadiusChange

// required float corner_radius = 1;
inline bool CornerRadiusChange::has_corner_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CornerRadiusChange::clear_corner_radius() {
  corner_radius_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CornerRadiusChange::corner_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.CornerRadiusChange.corner_radius)
  return corner_radius_;
}
inline void CornerRadiusChange::set_corner_radius(float value) {
  _has_bits_[0] |= 0x00000001u;
  corner_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.CornerRadiusChange.corner_radius)
}

// -------------------------------------------------------------------

// BackgroundBlurRadiusChange

// required float background_blur_radius = 1;
inline bool BackgroundBlurRadiusChange::has_background_blur_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackgroundBlurRadiusChange::clear_background_blur_radius() {
  background_blur_radius_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float BackgroundBlurRadiusChange::background_blur_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BackgroundBlurRadiusChange.background_blur_radius)
  return background_blur_radius_;
}
inline void BackgroundBlurRadiusChange::set_background_blur_radius(float value) {
  _has_bits_[0] |= 0x00000001u;
  background_blur_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BackgroundBlurRadiusChange.background_blur_radius)
}

// -------------------------------------------------------------------

// LayerChange

// required uint32 layer = 1;
inline bool LayerChange::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerChange::clear_layer() {
  layer_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayerChange::layer() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerChange.layer)
  return layer_;
}
inline void LayerChange::set_layer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  layer_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerChange.layer)
}

// -------------------------------------------------------------------

// CropChange

// required .android.surfaceflinger.Rectangle rectangle = 1;
inline bool CropChange::has_rectangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropChange::clear_rectangle() {
  if (rectangle_ != nullptr) rectangle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::surfaceflinger::Rectangle& CropChange::rectangle() const {
  const ::android::surfaceflinger::Rectangle* p = rectangle_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.CropChange.rectangle)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::Rectangle*>(
      &::android::surfaceflinger::_Rectangle_default_instance_);
}
inline ::android::surfaceflinger::Rectangle* CropChange::release_rectangle() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.CropChange.rectangle)
  _has_bits_[0] &= ~0x00000001u;
  ::android::surfaceflinger::Rectangle* temp = rectangle_;
  rectangle_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::Rectangle* CropChange::mutable_rectangle() {
  _has_bits_[0] |= 0x00000001u;
  if (rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::Rectangle>(GetArenaNoVirtual());
    rectangle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.CropChange.rectangle)
  return rectangle_;
}
inline void CropChange::set_allocated_rectangle(::android::surfaceflinger::Rectangle* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rectangle_;
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.CropChange.rectangle)
}

// -------------------------------------------------------------------

// MatrixChange

// required float dsdx = 1;
inline bool MatrixChange::has_dsdx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixChange::clear_dsdx() {
  dsdx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MatrixChange::dsdx() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.MatrixChange.dsdx)
  return dsdx_;
}
inline void MatrixChange::set_dsdx(float value) {
  _has_bits_[0] |= 0x00000001u;
  dsdx_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.MatrixChange.dsdx)
}

// required float dtdx = 2;
inline bool MatrixChange::has_dtdx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatrixChange::clear_dtdx() {
  dtdx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MatrixChange::dtdx() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.MatrixChange.dtdx)
  return dtdx_;
}
inline void MatrixChange::set_dtdx(float value) {
  _has_bits_[0] |= 0x00000002u;
  dtdx_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.MatrixChange.dtdx)
}

// required float dsdy = 3;
inline bool MatrixChange::has_dsdy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatrixChange::clear_dsdy() {
  dsdy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MatrixChange::dsdy() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.MatrixChange.dsdy)
  return dsdy_;
}
inline void MatrixChange::set_dsdy(float value) {
  _has_bits_[0] |= 0x00000004u;
  dsdy_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.MatrixChange.dsdy)
}

// required float dtdy = 4;
inline bool MatrixChange::has_dtdy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatrixChange::clear_dtdy() {
  dtdy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MatrixChange::dtdy() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.MatrixChange.dtdy)
  return dtdy_;
}
inline void MatrixChange::set_dtdy(float value) {
  _has_bits_[0] |= 0x00000008u;
  dtdy_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.MatrixChange.dtdy)
}

// -------------------------------------------------------------------

// TransparentRegionHintChange

// repeated .android.surfaceflinger.Rectangle region = 1;
inline int TransparentRegionHintChange::region_size() const {
  return region_.size();
}
inline void TransparentRegionHintChange::clear_region() {
  region_.Clear();
}
inline ::android::surfaceflinger::Rectangle* TransparentRegionHintChange::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.TransparentRegionHintChange.region)
  return region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Rectangle >*
TransparentRegionHintChange::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.TransparentRegionHintChange.region)
  return &region_;
}
inline const ::android::surfaceflinger::Rectangle& TransparentRegionHintChange::region(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.TransparentRegionHintChange.region)
  return region_.Get(index);
}
inline ::android::surfaceflinger::Rectangle* TransparentRegionHintChange::add_region() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.TransparentRegionHintChange.region)
  return region_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::Rectangle >&
TransparentRegionHintChange::region() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.TransparentRegionHintChange.region)
  return region_;
}

// -------------------------------------------------------------------

// LayerStackChange

// required uint32 layer_stack = 1;
inline bool LayerStackChange::has_layer_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerStackChange::clear_layer_stack() {
  layer_stack_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayerStackChange::layer_stack() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerStackChange.layer_stack)
  return layer_stack_;
}
inline void LayerStackChange::set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  layer_stack_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerStackChange.layer_stack)
}

// -------------------------------------------------------------------

// DisplayFlagsChange

// required uint32 flags = 1;
inline bool DisplayFlagsChange::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayFlagsChange::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisplayFlagsChange::flags() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayFlagsChange.flags)
  return flags_;
}
inline void DisplayFlagsChange::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayFlagsChange.flags)
}

// -------------------------------------------------------------------

// HiddenFlagChange

// required bool hidden_flag = 1;
inline bool HiddenFlagChange::has_hidden_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HiddenFlagChange::clear_hidden_flag() {
  hidden_flag_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool HiddenFlagChange::hidden_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.HiddenFlagChange.hidden_flag)
  return hidden_flag_;
}
inline void HiddenFlagChange::set_hidden_flag(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hidden_flag_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.HiddenFlagChange.hidden_flag)
}

// -------------------------------------------------------------------

// OpaqueFlagChange

// required bool opaque_flag = 1;
inline bool OpaqueFlagChange::has_opaque_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpaqueFlagChange::clear_opaque_flag() {
  opaque_flag_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OpaqueFlagChange::opaque_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.OpaqueFlagChange.opaque_flag)
  return opaque_flag_;
}
inline void OpaqueFlagChange::set_opaque_flag(bool value) {
  _has_bits_[0] |= 0x00000001u;
  opaque_flag_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.OpaqueFlagChange.opaque_flag)
}

// -------------------------------------------------------------------

// SecureFlagChange

// required bool secure_flag = 1;
inline bool SecureFlagChange::has_secure_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecureFlagChange::clear_secure_flag() {
  secure_flag_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SecureFlagChange::secure_flag() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SecureFlagChange.secure_flag)
  return secure_flag_;
}
inline void SecureFlagChange::set_secure_flag(bool value) {
  _has_bits_[0] |= 0x00000001u;
  secure_flag_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SecureFlagChange.secure_flag)
}

// -------------------------------------------------------------------

// DisplayChange

// required int32 id = 1;
inline bool DisplayChange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayChange::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayChange::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.id)
  return id_;
}
inline void DisplayChange::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayChange.id)
}

// optional .android.surfaceflinger.DispSurfaceChange surface = 2;
inline bool DisplayChange::has_surface() const {
  return DisplayChange_case() == kSurface;
}
inline void DisplayChange::set_has_surface() {
  _oneof_case_[0] = kSurface;
}
inline void DisplayChange::clear_surface() {
  if (has_surface()) {
    delete DisplayChange_.surface_;
    clear_has_DisplayChange();
  }
}
inline ::android::surfaceflinger::DispSurfaceChange* DisplayChange::release_surface() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayChange.surface)
  if (has_surface()) {
    clear_has_DisplayChange();
      ::android::surfaceflinger::DispSurfaceChange* temp = DisplayChange_.surface_;
    DisplayChange_.surface_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::DispSurfaceChange& DisplayChange::surface() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.surface)
  return has_surface()
      ? *DisplayChange_.surface_
      : *reinterpret_cast< ::android::surfaceflinger::DispSurfaceChange*>(&::android::surfaceflinger::_DispSurfaceChange_default_instance_);
}
inline ::android::surfaceflinger::DispSurfaceChange* DisplayChange::mutable_surface() {
  if (!has_surface()) {
    clear_DisplayChange();
    set_has_surface();
    DisplayChange_.surface_ = CreateMaybeMessage< ::android::surfaceflinger::DispSurfaceChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayChange.surface)
  return DisplayChange_.surface_;
}

// optional .android.surfaceflinger.LayerStackChange layer_stack = 3;
inline bool DisplayChange::has_layer_stack() const {
  return DisplayChange_case() == kLayerStack;
}
inline void DisplayChange::set_has_layer_stack() {
  _oneof_case_[0] = kLayerStack;
}
inline void DisplayChange::clear_layer_stack() {
  if (has_layer_stack()) {
    delete DisplayChange_.layer_stack_;
    clear_has_DisplayChange();
  }
}
inline ::android::surfaceflinger::LayerStackChange* DisplayChange::release_layer_stack() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayChange.layer_stack)
  if (has_layer_stack()) {
    clear_has_DisplayChange();
      ::android::surfaceflinger::LayerStackChange* temp = DisplayChange_.layer_stack_;
    DisplayChange_.layer_stack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::LayerStackChange& DisplayChange::layer_stack() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.layer_stack)
  return has_layer_stack()
      ? *DisplayChange_.layer_stack_
      : *reinterpret_cast< ::android::surfaceflinger::LayerStackChange*>(&::android::surfaceflinger::_LayerStackChange_default_instance_);
}
inline ::android::surfaceflinger::LayerStackChange* DisplayChange::mutable_layer_stack() {
  if (!has_layer_stack()) {
    clear_DisplayChange();
    set_has_layer_stack();
    DisplayChange_.layer_stack_ = CreateMaybeMessage< ::android::surfaceflinger::LayerStackChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayChange.layer_stack)
  return DisplayChange_.layer_stack_;
}

// optional .android.surfaceflinger.SizeChange size = 4;
inline bool DisplayChange::has_size() const {
  return DisplayChange_case() == kSize;
}
inline void DisplayChange::set_has_size() {
  _oneof_case_[0] = kSize;
}
inline void DisplayChange::clear_size() {
  if (has_size()) {
    delete DisplayChange_.size_;
    clear_has_DisplayChange();
  }
}
inline ::android::surfaceflinger::SizeChange* DisplayChange::release_size() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayChange.size)
  if (has_size()) {
    clear_has_DisplayChange();
      ::android::surfaceflinger::SizeChange* temp = DisplayChange_.size_;
    DisplayChange_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::SizeChange& DisplayChange::size() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.size)
  return has_size()
      ? *DisplayChange_.size_
      : *reinterpret_cast< ::android::surfaceflinger::SizeChange*>(&::android::surfaceflinger::_SizeChange_default_instance_);
}
inline ::android::surfaceflinger::SizeChange* DisplayChange::mutable_size() {
  if (!has_size()) {
    clear_DisplayChange();
    set_has_size();
    DisplayChange_.size_ = CreateMaybeMessage< ::android::surfaceflinger::SizeChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayChange.size)
  return DisplayChange_.size_;
}

// optional .android.surfaceflinger.ProjectionChange projection = 5;
inline bool DisplayChange::has_projection() const {
  return DisplayChange_case() == kProjection;
}
inline void DisplayChange::set_has_projection() {
  _oneof_case_[0] = kProjection;
}
inline void DisplayChange::clear_projection() {
  if (has_projection()) {
    delete DisplayChange_.projection_;
    clear_has_DisplayChange();
  }
}
inline ::android::surfaceflinger::ProjectionChange* DisplayChange::release_projection() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayChange.projection)
  if (has_projection()) {
    clear_has_DisplayChange();
      ::android::surfaceflinger::ProjectionChange* temp = DisplayChange_.projection_;
    DisplayChange_.projection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::ProjectionChange& DisplayChange::projection() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.projection)
  return has_projection()
      ? *DisplayChange_.projection_
      : *reinterpret_cast< ::android::surfaceflinger::ProjectionChange*>(&::android::surfaceflinger::_ProjectionChange_default_instance_);
}
inline ::android::surfaceflinger::ProjectionChange* DisplayChange::mutable_projection() {
  if (!has_projection()) {
    clear_DisplayChange();
    set_has_projection();
    DisplayChange_.projection_ = CreateMaybeMessage< ::android::surfaceflinger::ProjectionChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayChange.projection)
  return DisplayChange_.projection_;
}

// optional .android.surfaceflinger.DisplayFlagsChange flags = 6;
inline bool DisplayChange::has_flags() const {
  return DisplayChange_case() == kFlags;
}
inline void DisplayChange::set_has_flags() {
  _oneof_case_[0] = kFlags;
}
inline void DisplayChange::clear_flags() {
  if (has_flags()) {
    delete DisplayChange_.flags_;
    clear_has_DisplayChange();
  }
}
inline ::android::surfaceflinger::DisplayFlagsChange* DisplayChange::release_flags() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayChange.flags)
  if (has_flags()) {
    clear_has_DisplayChange();
      ::android::surfaceflinger::DisplayFlagsChange* temp = DisplayChange_.flags_;
    DisplayChange_.flags_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::surfaceflinger::DisplayFlagsChange& DisplayChange::flags() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayChange.flags)
  return has_flags()
      ? *DisplayChange_.flags_
      : *reinterpret_cast< ::android::surfaceflinger::DisplayFlagsChange*>(&::android::surfaceflinger::_DisplayFlagsChange_default_instance_);
}
inline ::android::surfaceflinger::DisplayFlagsChange* DisplayChange::mutable_flags() {
  if (!has_flags()) {
    clear_DisplayChange();
    set_has_flags();
    DisplayChange_.flags_ = CreateMaybeMessage< ::android::surfaceflinger::DisplayFlagsChange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayChange.flags)
  return DisplayChange_.flags_;
}

inline bool DisplayChange::has_DisplayChange() const {
  return DisplayChange_case() != DISPLAYCHANGE_NOT_SET;
}
inline void DisplayChange::clear_has_DisplayChange() {
  _oneof_case_[0] = DISPLAYCHANGE_NOT_SET;
}
inline DisplayChange::DisplayChangeCase DisplayChange::DisplayChange_case() const {
  return DisplayChange::DisplayChangeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DispSurfaceChange

// required uint64 buffer_queue_id = 1;
inline bool DispSurfaceChange::has_buffer_queue_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DispSurfaceChange::clear_buffer_queue_id() {
  buffer_queue_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DispSurfaceChange::buffer_queue_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DispSurfaceChange.buffer_queue_id)
  return buffer_queue_id_;
}
inline void DispSurfaceChange::set_buffer_queue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  buffer_queue_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DispSurfaceChange.buffer_queue_id)
}

// required string buffer_queue_name = 2;
inline bool DispSurfaceChange::has_buffer_queue_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DispSurfaceChange::clear_buffer_queue_name() {
  buffer_queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DispSurfaceChange::buffer_queue_name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
  return buffer_queue_name_.GetNoArena();
}
inline void DispSurfaceChange::set_buffer_queue_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
}
inline void DispSurfaceChange::set_buffer_queue_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
}
inline void DispSurfaceChange::set_buffer_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buffer_queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
}
inline void DispSurfaceChange::set_buffer_queue_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buffer_queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
}
inline std::string* DispSurfaceChange::mutable_buffer_queue_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
  return buffer_queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DispSurfaceChange::release_buffer_queue_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
  if (!has_buffer_queue_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buffer_queue_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DispSurfaceChange::set_allocated_buffer_queue_name(std::string* buffer_queue_name) {
  if (buffer_queue_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer_queue_name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DispSurfaceChange.buffer_queue_name)
}

// -------------------------------------------------------------------

// ProjectionChange

// required int32 orientation = 1;
inline bool ProjectionChange::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjectionChange::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProjectionChange::orientation() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ProjectionChange.orientation)
  return orientation_;
}
inline void ProjectionChange::set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  orientation_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ProjectionChange.orientation)
}

// required .android.surfaceflinger.Rectangle viewport = 2;
inline bool ProjectionChange::has_viewport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionChange::clear_viewport() {
  if (viewport_ != nullptr) viewport_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::surfaceflinger::Rectangle& ProjectionChange::viewport() const {
  const ::android::surfaceflinger::Rectangle* p = viewport_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ProjectionChange.viewport)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::Rectangle*>(
      &::android::surfaceflinger::_Rectangle_default_instance_);
}
inline ::android::surfaceflinger::Rectangle* ProjectionChange::release_viewport() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.ProjectionChange.viewport)
  _has_bits_[0] &= ~0x00000001u;
  ::android::surfaceflinger::Rectangle* temp = viewport_;
  viewport_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::Rectangle* ProjectionChange::mutable_viewport() {
  _has_bits_[0] |= 0x00000001u;
  if (viewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::Rectangle>(GetArenaNoVirtual());
    viewport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.ProjectionChange.viewport)
  return viewport_;
}
inline void ProjectionChange::set_allocated_viewport(::android::surfaceflinger::Rectangle* viewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete viewport_;
  }
  if (viewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      viewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  viewport_ = viewport;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.ProjectionChange.viewport)
}

// required .android.surfaceflinger.Rectangle frame = 3;
inline bool ProjectionChange::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionChange::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::surfaceflinger::Rectangle& ProjectionChange::frame() const {
  const ::android::surfaceflinger::Rectangle* p = frame_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ProjectionChange.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::Rectangle*>(
      &::android::surfaceflinger::_Rectangle_default_instance_);
}
inline ::android::surfaceflinger::Rectangle* ProjectionChange::release_frame() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.ProjectionChange.frame)
  _has_bits_[0] &= ~0x00000002u;
  ::android::surfaceflinger::Rectangle* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::Rectangle* ProjectionChange::mutable_frame() {
  _has_bits_[0] |= 0x00000002u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::Rectangle>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.ProjectionChange.frame)
  return frame_;
}
inline void ProjectionChange::set_allocated_frame(::android::surfaceflinger::Rectangle* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.ProjectionChange.frame)
}

// -------------------------------------------------------------------

// Rectangle

// required int32 left = 1;
inline bool Rectangle::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rectangle::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::left() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Rectangle.left)
  return left_;
}
inline void Rectangle::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Rectangle.left)
}

// required int32 top = 2;
inline bool Rectangle::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rectangle::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::top() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Rectangle.top)
  return top_;
}
inline void Rectangle::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Rectangle.top)
}

// required int32 right = 3;
inline bool Rectangle::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rectangle::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::right() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Rectangle.right)
  return right_;
}
inline void Rectangle::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Rectangle.right)
}

// required int32 bottom = 4;
inline bool Rectangle::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rectangle::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rectangle::bottom() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Rectangle.bottom)
  return bottom_;
}
inline void Rectangle::set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Rectangle.bottom)
}

// -------------------------------------------------------------------

// SurfaceCreation

// required int32 id = 1;
inline bool SurfaceCreation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SurfaceCreation::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceCreation::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceCreation.id)
  return id_;
}
inline void SurfaceCreation::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceCreation.id)
}

// required string name = 2;
inline bool SurfaceCreation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceCreation::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SurfaceCreation::name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceCreation.name)
  return name_.GetNoArena();
}
inline void SurfaceCreation::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceCreation.name)
}
inline void SurfaceCreation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.SurfaceCreation.name)
}
inline void SurfaceCreation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.SurfaceCreation.name)
}
inline void SurfaceCreation::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.SurfaceCreation.name)
}
inline std::string* SurfaceCreation::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceCreation.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SurfaceCreation::release_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceCreation.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SurfaceCreation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceCreation.name)
}

// required uint32 w = 3;
inline bool SurfaceCreation::has_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SurfaceCreation::clear_w() {
  w_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SurfaceCreation::w() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceCreation.w)
  return w_;
}
inline void SurfaceCreation::set_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceCreation.w)
}

// required uint32 h = 4;
inline bool SurfaceCreation::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SurfaceCreation::clear_h() {
  h_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SurfaceCreation::h() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceCreation.h)
  return h_;
}
inline void SurfaceCreation::set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceCreation.h)
}

// -------------------------------------------------------------------

// SurfaceDeletion

// required int32 id = 1;
inline bool SurfaceDeletion::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceDeletion::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceDeletion::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceDeletion.id)
  return id_;
}
inline void SurfaceDeletion::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceDeletion.id)
}

// -------------------------------------------------------------------

// BufferUpdate

// required int32 id = 1;
inline bool BufferUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BufferUpdate::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BufferUpdate::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BufferUpdate.id)
  return id_;
}
inline void BufferUpdate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BufferUpdate.id)
}

// required uint32 w = 2;
inline bool BufferUpdate::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BufferUpdate::clear_w() {
  w_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BufferUpdate::w() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BufferUpdate.w)
  return w_;
}
inline void BufferUpdate::set_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  w_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BufferUpdate.w)
}

// required uint32 h = 3;
inline bool BufferUpdate::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BufferUpdate::clear_h() {
  h_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BufferUpdate::h() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BufferUpdate.h)
  return h_;
}
inline void BufferUpdate::set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BufferUpdate.h)
}

// required uint64 frame_number = 4;
inline bool BufferUpdate::has_frame_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BufferUpdate::clear_frame_number() {
  frame_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferUpdate::frame_number() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BufferUpdate.frame_number)
  return frame_number_;
}
inline void BufferUpdate::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BufferUpdate.frame_number)
}

// -------------------------------------------------------------------

// VSyncEvent

// required int64 when = 1;
inline bool VSyncEvent::has_when() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VSyncEvent::clear_when() {
  when_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VSyncEvent::when() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.VSyncEvent.when)
  return when_;
}
inline void VSyncEvent::set_when(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  when_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.VSyncEvent.when)
}

// -------------------------------------------------------------------

// DisplayCreation

// required int32 id = 1;
inline bool DisplayCreation::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisplayCreation::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayCreation::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayCreation.id)
  return id_;
}
inline void DisplayCreation::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayCreation.id)
}

// required string name = 2;
inline bool DisplayCreation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayCreation::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayCreation::name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayCreation.name)
  return name_.GetNoArena();
}
inline void DisplayCreation::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayCreation.name)
}
inline void DisplayCreation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.DisplayCreation.name)
}
inline void DisplayCreation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.DisplayCreation.name)
}
inline void DisplayCreation::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.DisplayCreation.name)
}
inline std::string* DisplayCreation::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayCreation.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayCreation::release_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayCreation.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayCreation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayCreation.name)
}

// optional uint64 display_id = 3;
inline bool DisplayCreation::has_display_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisplayCreation::clear_display_id() {
  display_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DisplayCreation::display_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayCreation.display_id)
  return display_id_;
}
inline void DisplayCreation::set_display_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayCreation.display_id)
}

// required bool is_secure = 4;
inline bool DisplayCreation::has_is_secure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisplayCreation::clear_is_secure() {
  is_secure_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DisplayCreation::is_secure() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayCreation.is_secure)
  return is_secure_;
}
inline void DisplayCreation::set_is_secure(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_secure_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayCreation.is_secure)
}

// -------------------------------------------------------------------

// DisplayDeletion

// required int32 id = 1;
inline bool DisplayDeletion::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisplayDeletion::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplayDeletion::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayDeletion.id)
  return id_;
}
inline void DisplayDeletion::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayDeletion.id)
}

// -------------------------------------------------------------------

// PowerModeUpdate

// required int32 id = 1;
inline bool PowerModeUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerModeUpdate::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerModeUpdate::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PowerModeUpdate.id)
  return id_;
}
inline void PowerModeUpdate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PowerModeUpdate.id)
}

// required int32 mode = 2;
inline bool PowerModeUpdate::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerModeUpdate::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerModeUpdate::mode() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PowerModeUpdate.mode)
  return mode_;
}
inline void PowerModeUpdate::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PowerModeUpdate.mode)
}

// -------------------------------------------------------------------

// ReparentChange

// required int32 parent_id = 1;
inline bool ReparentChange::has_parent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReparentChange::clear_parent_id() {
  parent_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReparentChange::parent_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ReparentChange.parent_id)
  return parent_id_;
}
inline void ReparentChange::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ReparentChange.parent_id)
}

// -------------------------------------------------------------------

// RelativeParentChange

// required int32 relative_parent_id = 1;
inline bool RelativeParentChange::has_relative_parent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelativeParentChange::clear_relative_parent_id() {
  relative_parent_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelativeParentChange::relative_parent_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.RelativeParentChange.relative_parent_id)
  return relative_parent_id_;
}
inline void RelativeParentChange::set_relative_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  relative_parent_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.RelativeParentChange.relative_parent_id)
}

// required int32 z = 2;
inline bool RelativeParentChange::has_z() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelativeParentChange::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelativeParentChange::z() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.RelativeParentChange.z)
  return z_;
}
inline void RelativeParentChange::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  z_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.RelativeParentChange.z)
}

// -------------------------------------------------------------------

// ShadowRadiusChange

// required float radius = 1;
inline bool ShadowRadiusChange::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShadowRadiusChange::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ShadowRadiusChange::radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ShadowRadiusChange.radius)
  return radius_;
}
inline void ShadowRadiusChange::set_radius(float value) {
  _has_bits_[0] |= 0x00000001u;
  radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ShadowRadiusChange.radius)
}

// -------------------------------------------------------------------

// TrustedOverlayChange

// required float is_trusted_overlay = 1;
inline bool TrustedOverlayChange::has_is_trusted_overlay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustedOverlayChange::clear_is_trusted_overlay() {
  is_trusted_overlay_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TrustedOverlayChange::is_trusted_overlay() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.TrustedOverlayChange.is_trusted_overlay)
  return is_trusted_overlay_;
}
inline void TrustedOverlayChange::set_is_trusted_overlay(float value) {
  _has_bits_[0] |= 0x00000001u;
  is_trusted_overlay_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.TrustedOverlayChange.is_trusted_overlay)
}

// -------------------------------------------------------------------

// BlurRegionsChange

// repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
inline int BlurRegionsChange::blur_regions_size() const {
  return blur_regions_.size();
}
inline void BlurRegionsChange::clear_blur_regions() {
  blur_regions_.Clear();
}
inline ::android::surfaceflinger::BlurRegionChange* BlurRegionsChange::mutable_blur_regions(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.BlurRegionsChange.blur_regions)
  return blur_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegionChange >*
BlurRegionsChange::mutable_blur_regions() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.BlurRegionsChange.blur_regions)
  return &blur_regions_;
}
inline const ::android::surfaceflinger::BlurRegionChange& BlurRegionsChange::blur_regions(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionsChange.blur_regions)
  return blur_regions_.Get(index);
}
inline ::android::surfaceflinger::BlurRegionChange* BlurRegionsChange::add_blur_regions() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.BlurRegionsChange.blur_regions)
  return blur_regions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegionChange >&
BlurRegionsChange::blur_regions() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.BlurRegionsChange.blur_regions)
  return blur_regions_;
}

// -------------------------------------------------------------------

// BlurRegionChange

// required uint32 blur_radius = 1;
inline bool BlurRegionChange::has_blur_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlurRegionChange::clear_blur_radius() {
  blur_radius_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlurRegionChange::blur_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.blur_radius)
  return blur_radius_;
}
inline void BlurRegionChange::set_blur_radius(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  blur_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.blur_radius)
}

// required float corner_radius_tl = 2;
inline bool BlurRegionChange::has_corner_radius_tl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlurRegionChange::clear_corner_radius_tl() {
  corner_radius_tl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float BlurRegionChange::corner_radius_tl() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.corner_radius_tl)
  return corner_radius_tl_;
}
inline void BlurRegionChange::set_corner_radius_tl(float value) {
  _has_bits_[0] |= 0x00000002u;
  corner_radius_tl_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.corner_radius_tl)
}

// required float corner_radius_tr = 3;
inline bool BlurRegionChange::has_corner_radius_tr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlurRegionChange::clear_corner_radius_tr() {
  corner_radius_tr_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float BlurRegionChange::corner_radius_tr() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.corner_radius_tr)
  return corner_radius_tr_;
}
inline void BlurRegionChange::set_corner_radius_tr(float value) {
  _has_bits_[0] |= 0x00000004u;
  corner_radius_tr_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.corner_radius_tr)
}

// required float corner_radius_bl = 4;
inline bool BlurRegionChange::has_corner_radius_bl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlurRegionChange::clear_corner_radius_bl() {
  corner_radius_bl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float BlurRegionChange::corner_radius_bl() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.corner_radius_bl)
  return corner_radius_bl_;
}
inline void BlurRegionChange::set_corner_radius_bl(float value) {
  _has_bits_[0] |= 0x00000008u;
  corner_radius_bl_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.corner_radius_bl)
}

// required float corner_radius_br = 5;
inline bool BlurRegionChange::has_corner_radius_br() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlurRegionChange::clear_corner_radius_br() {
  corner_radius_br_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float BlurRegionChange::corner_radius_br() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.corner_radius_br)
  return corner_radius_br_;
}
inline void BlurRegionChange::set_corner_radius_br(float value) {
  _has_bits_[0] |= 0x00000010u;
  corner_radius_br_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.corner_radius_br)
}

// required float alpha = 6;
inline bool BlurRegionChange::has_alpha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlurRegionChange::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float BlurRegionChange::alpha() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.alpha)
  return alpha_;
}
inline void BlurRegionChange::set_alpha(float value) {
  _has_bits_[0] |= 0x00000020u;
  alpha_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.alpha)
}

// required int32 left = 7;
inline bool BlurRegionChange::has_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlurRegionChange::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegionChange::left() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.left)
  return left_;
}
inline void BlurRegionChange::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  left_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.left)
}

// required int32 top = 8;
inline bool BlurRegionChange::has_top() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlurRegionChange::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegionChange::top() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.top)
  return top_;
}
inline void BlurRegionChange::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  top_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.top)
}

// required int32 right = 9;
inline bool BlurRegionChange::has_right() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlurRegionChange::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegionChange::right() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.right)
  return right_;
}
inline void BlurRegionChange::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  right_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.right)
}

// required int32 bottom = 10;
inline bool BlurRegionChange::has_bottom() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlurRegionChange::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegionChange::bottom() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegionChange.bottom)
  return bottom_;
}
inline void BlurRegionChange::set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  bottom_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegionChange.bottom)
}

// -------------------------------------------------------------------

// Origin

// required int32 pid = 1;
inline bool Origin::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Origin::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Origin::pid() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Origin.pid)
  return pid_;
}
inline void Origin::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Origin.pid)
}

// required int32 uid = 2;
inline bool Origin::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Origin::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Origin::uid() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.Origin.uid)
  return uid_;
}
inline void Origin::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.Origin.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto
