// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/cmds/surfacereplayer/proto/src/trace.proto

#include "frameworks/native/cmds/surfacereplayer/proto/src/trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto;
namespace android {
namespace surfaceflinger {
class TraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trace> _instance;
} _Trace_default_instance_;
class IncrementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Increment> _instance;
  const ::android::surfaceflinger::Transaction* transaction_;
  const ::android::surfaceflinger::SurfaceCreation* surface_creation_;
  const ::android::surfaceflinger::SurfaceDeletion* surface_deletion_;
  const ::android::surfaceflinger::BufferUpdate* buffer_update_;
  const ::android::surfaceflinger::VSyncEvent* vsync_event_;
  const ::android::surfaceflinger::DisplayCreation* display_creation_;
  const ::android::surfaceflinger::DisplayDeletion* display_deletion_;
  const ::android::surfaceflinger::PowerModeUpdate* power_mode_update_;
} _Increment_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SurfaceChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceChange> _instance;
  const ::android::surfaceflinger::PositionChange* position_;
  const ::android::surfaceflinger::SizeChange* size_;
  const ::android::surfaceflinger::AlphaChange* alpha_;
  const ::android::surfaceflinger::LayerChange* layer_;
  const ::android::surfaceflinger::CropChange* crop_;
  const ::android::surfaceflinger::MatrixChange* matrix_;
  const ::android::surfaceflinger::TransparentRegionHintChange* transparent_region_hint_;
  const ::android::surfaceflinger::LayerStackChange* layer_stack_;
  const ::android::surfaceflinger::HiddenFlagChange* hidden_flag_;
  const ::android::surfaceflinger::OpaqueFlagChange* opaque_flag_;
  const ::android::surfaceflinger::SecureFlagChange* secure_flag_;
  const ::android::surfaceflinger::CornerRadiusChange* corner_radius_;
  const ::android::surfaceflinger::ReparentChange* reparent_;
  const ::android::surfaceflinger::RelativeParentChange* relative_parent_;
  const ::android::surfaceflinger::BackgroundBlurRadiusChange* background_blur_radius_;
  const ::android::surfaceflinger::ShadowRadiusChange* shadow_radius_;
  const ::android::surfaceflinger::BlurRegionsChange* blur_regions_;
  const ::android::surfaceflinger::TrustedOverlayChange* trusted_overlay_;
} _SurfaceChange_default_instance_;
class PositionChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionChange> _instance;
} _PositionChange_default_instance_;
class SizeChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SizeChange> _instance;
} _SizeChange_default_instance_;
class AlphaChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlphaChange> _instance;
} _AlphaChange_default_instance_;
class CornerRadiusChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CornerRadiusChange> _instance;
} _CornerRadiusChange_default_instance_;
class BackgroundBlurRadiusChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundBlurRadiusChange> _instance;
} _BackgroundBlurRadiusChange_default_instance_;
class LayerChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerChange> _instance;
} _LayerChange_default_instance_;
class CropChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CropChange> _instance;
} _CropChange_default_instance_;
class MatrixChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatrixChange> _instance;
} _MatrixChange_default_instance_;
class TransparentRegionHintChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransparentRegionHintChange> _instance;
} _TransparentRegionHintChange_default_instance_;
class LayerStackChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerStackChange> _instance;
} _LayerStackChange_default_instance_;
class DisplayFlagsChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayFlagsChange> _instance;
} _DisplayFlagsChange_default_instance_;
class HiddenFlagChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HiddenFlagChange> _instance;
} _HiddenFlagChange_default_instance_;
class OpaqueFlagChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpaqueFlagChange> _instance;
} _OpaqueFlagChange_default_instance_;
class SecureFlagChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureFlagChange> _instance;
} _SecureFlagChange_default_instance_;
class DisplayChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayChange> _instance;
  const ::android::surfaceflinger::DispSurfaceChange* surface_;
  const ::android::surfaceflinger::LayerStackChange* layer_stack_;
  const ::android::surfaceflinger::SizeChange* size_;
  const ::android::surfaceflinger::ProjectionChange* projection_;
  const ::android::surfaceflinger::DisplayFlagsChange* flags_;
} _DisplayChange_default_instance_;
class DispSurfaceChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DispSurfaceChange> _instance;
} _DispSurfaceChange_default_instance_;
class ProjectionChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectionChange> _instance;
} _ProjectionChange_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class SurfaceCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceCreation> _instance;
} _SurfaceCreation_default_instance_;
class SurfaceDeletionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceDeletion> _instance;
} _SurfaceDeletion_default_instance_;
class BufferUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BufferUpdate> _instance;
} _BufferUpdate_default_instance_;
class VSyncEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSyncEvent> _instance;
} _VSyncEvent_default_instance_;
class DisplayCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayCreation> _instance;
} _DisplayCreation_default_instance_;
class DisplayDeletionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayDeletion> _instance;
} _DisplayDeletion_default_instance_;
class PowerModeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerModeUpdate> _instance;
} _PowerModeUpdate_default_instance_;
class ReparentChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReparentChange> _instance;
} _ReparentChange_default_instance_;
class RelativeParentChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeParentChange> _instance;
} _RelativeParentChange_default_instance_;
class ShadowRadiusChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShadowRadiusChange> _instance;
} _ShadowRadiusChange_default_instance_;
class TrustedOverlayChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrustedOverlayChange> _instance;
} _TrustedOverlayChange_default_instance_;
class BlurRegionsChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlurRegionsChange> _instance;
} _BlurRegionsChange_default_instance_;
class BlurRegionChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlurRegionChange> _instance;
} _BlurRegionChange_default_instance_;
class OriginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Origin> _instance;
} _Origin_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_AlphaChange_default_instance_;
    new (ptr) ::android::surfaceflinger::AlphaChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::AlphaChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BackgroundBlurRadiusChange_default_instance_;
    new (ptr) ::android::surfaceflinger::BackgroundBlurRadiusChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BackgroundBlurRadiusChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BlurRegionChange_default_instance_;
    new (ptr) ::android::surfaceflinger::BlurRegionChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BlurRegionChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BlurRegionsChange_default_instance_;
    new (ptr) ::android::surfaceflinger::BlurRegionsChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BlurRegionsChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BufferUpdate_default_instance_;
    new (ptr) ::android::surfaceflinger::BufferUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BufferUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_CornerRadiusChange_default_instance_;
    new (ptr) ::android::surfaceflinger::CornerRadiusChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::CornerRadiusChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_CropChange_default_instance_;
    new (ptr) ::android::surfaceflinger::CropChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::CropChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DispSurfaceChange_default_instance_;
    new (ptr) ::android::surfaceflinger::DispSurfaceChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DispSurfaceChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DisplayChange_default_instance_;
    new (ptr) ::android::surfaceflinger::DisplayChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DisplayChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DisplayCreation_default_instance_;
    new (ptr) ::android::surfaceflinger::DisplayCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DisplayCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DisplayDeletion_default_instance_;
    new (ptr) ::android::surfaceflinger::DisplayDeletion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DisplayDeletion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DisplayFlagsChange_default_instance_;
    new (ptr) ::android::surfaceflinger::DisplayFlagsChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DisplayFlagsChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_HiddenFlagChange_default_instance_;
    new (ptr) ::android::surfaceflinger::HiddenFlagChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::HiddenFlagChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_Increment_default_instance_;
    new (ptr) ::android::surfaceflinger::Increment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::Increment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayerChange_default_instance_;
    new (ptr) ::android::surfaceflinger::LayerChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayerChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayerStackChange_default_instance_;
    new (ptr) ::android::surfaceflinger::LayerStackChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayerStackChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_MatrixChange_default_instance_;
    new (ptr) ::android::surfaceflinger::MatrixChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::MatrixChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_OpaqueFlagChange_default_instance_;
    new (ptr) ::android::surfaceflinger::OpaqueFlagChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::OpaqueFlagChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_Origin_default_instance_;
    new (ptr) ::android::surfaceflinger::Origin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::Origin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_PositionChange_default_instance_;
    new (ptr) ::android::surfaceflinger::PositionChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::PositionChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_PowerModeUpdate_default_instance_;
    new (ptr) ::android::surfaceflinger::PowerModeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::PowerModeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ProjectionChange_default_instance_;
    new (ptr) ::android::surfaceflinger::ProjectionChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ProjectionChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_Rectangle_default_instance_;
    new (ptr) ::android::surfaceflinger::Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_RelativeParentChange_default_instance_;
    new (ptr) ::android::surfaceflinger::RelativeParentChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::RelativeParentChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ReparentChange_default_instance_;
    new (ptr) ::android::surfaceflinger::ReparentChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ReparentChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SecureFlagChange_default_instance_;
    new (ptr) ::android::surfaceflinger::SecureFlagChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SecureFlagChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ShadowRadiusChange_default_instance_;
    new (ptr) ::android::surfaceflinger::ShadowRadiusChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ShadowRadiusChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SizeChange_default_instance_;
    new (ptr) ::android::surfaceflinger::SizeChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SizeChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceChange_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsscc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceCreation_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceDeletion_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceDeletion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceDeletion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_Trace_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_Trace_default_instance_;
    new (ptr) ::android::surfaceflinger::Trace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::Trace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trace_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Trace_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_Transaction_default_instance_;
    new (ptr) ::android::surfaceflinger::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,
      &scc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_TransparentRegionHintChange_default_instance_;
    new (ptr) ::android::surfaceflinger::TransparentRegionHintChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::TransparentRegionHintChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {
      &scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_TrustedOverlayChange_default_instance_;
    new (ptr) ::android::surfaceflinger::TrustedOverlayChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::TrustedOverlayChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

static void InitDefaultsscc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_VSyncEvent_default_instance_;
    new (ptr) ::android::surfaceflinger::VSyncEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::VSyncEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto}, {}};

namespace android {
namespace surfaceflinger {

// ===================================================================

void Trace::InitAsDefaultInstance() {
}
class Trace::_Internal {
 public:
  using HasBits = decltype(std::declval<Trace>()._has_bits_);
};

Trace::Trace()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.Trace)
}
Trace::Trace(const Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      increment_(from.increment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.Trace)
}

void Trace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trace_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.Trace)
  SharedDtor();
}

void Trace::SharedDtor() {
}

void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trace& Trace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trace_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  increment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.Increment increment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_increment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.Trace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.Increment increment = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_increment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.Trace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.Increment increment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->increment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->increment(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.Trace)
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.Trace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.Increment increment = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->increment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->increment(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trace::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Trace*>(
      &from));
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  increment_.MergeFrom(from.increment_);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->increment())) return false;
  return true;
}

void Trace::InternalSwap(Trace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&increment_)->InternalSwap(CastToBase(&other->increment_));
}

std::string Trace::GetTypeName() const {
  return "android.surfaceflinger.Trace";
}


// ===================================================================

void Increment::InitAsDefaultInstance() {
}
class Increment::_Internal {
 public:
  using HasBits = decltype(std::declval<Increment>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::Transaction& transaction(const Increment* msg);
  static const ::android::surfaceflinger::SurfaceCreation& surface_creation(const Increment* msg);
  static const ::android::surfaceflinger::SurfaceDeletion& surface_deletion(const Increment* msg);
  static const ::android::surfaceflinger::BufferUpdate& buffer_update(const Increment* msg);
  static const ::android::surfaceflinger::VSyncEvent& vsync_event(const Increment* msg);
  static const ::android::surfaceflinger::DisplayCreation& display_creation(const Increment* msg);
  static const ::android::surfaceflinger::DisplayDeletion& display_deletion(const Increment* msg);
  static const ::android::surfaceflinger::PowerModeUpdate& power_mode_update(const Increment* msg);
};

const ::android::surfaceflinger::Transaction&
Increment::_Internal::transaction(const Increment* msg) {
  return *msg->increment_.transaction_;
}
const ::android::surfaceflinger::SurfaceCreation&
Increment::_Internal::surface_creation(const Increment* msg) {
  return *msg->increment_.surface_creation_;
}
const ::android::surfaceflinger::SurfaceDeletion&
Increment::_Internal::surface_deletion(const Increment* msg) {
  return *msg->increment_.surface_deletion_;
}
const ::android::surfaceflinger::BufferUpdate&
Increment::_Internal::buffer_update(const Increment* msg) {
  return *msg->increment_.buffer_update_;
}
const ::android::surfaceflinger::VSyncEvent&
Increment::_Internal::vsync_event(const Increment* msg) {
  return *msg->increment_.vsync_event_;
}
const ::android::surfaceflinger::DisplayCreation&
Increment::_Internal::display_creation(const Increment* msg) {
  return *msg->increment_.display_creation_;
}
const ::android::surfaceflinger::DisplayDeletion&
Increment::_Internal::display_deletion(const Increment* msg) {
  return *msg->increment_.display_deletion_;
}
const ::android::surfaceflinger::PowerModeUpdate&
Increment::_Internal::power_mode_update(const Increment* msg) {
  return *msg->increment_.power_mode_update_;
}
void Increment::set_allocated_transaction(::android::surfaceflinger::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    set_has_transaction();
    increment_.transaction_ = transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.transaction)
}
void Increment::set_allocated_surface_creation(::android::surfaceflinger::SurfaceCreation* surface_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (surface_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_creation, submessage_arena);
    }
    set_has_surface_creation();
    increment_.surface_creation_ = surface_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.surface_creation)
}
void Increment::set_allocated_surface_deletion(::android::surfaceflinger::SurfaceDeletion* surface_deletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (surface_deletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_deletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_deletion, submessage_arena);
    }
    set_has_surface_deletion();
    increment_.surface_deletion_ = surface_deletion;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.surface_deletion)
}
void Increment::set_allocated_buffer_update(::android::surfaceflinger::BufferUpdate* buffer_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (buffer_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_update, submessage_arena);
    }
    set_has_buffer_update();
    increment_.buffer_update_ = buffer_update;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.buffer_update)
}
void Increment::set_allocated_vsync_event(::android::surfaceflinger::VSyncEvent* vsync_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (vsync_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vsync_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vsync_event, submessage_arena);
    }
    set_has_vsync_event();
    increment_.vsync_event_ = vsync_event;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.vsync_event)
}
void Increment::set_allocated_display_creation(::android::surfaceflinger::DisplayCreation* display_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (display_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_creation, submessage_arena);
    }
    set_has_display_creation();
    increment_.display_creation_ = display_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.display_creation)
}
void Increment::set_allocated_display_deletion(::android::surfaceflinger::DisplayDeletion* display_deletion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (display_deletion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_deletion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_deletion, submessage_arena);
    }
    set_has_display_deletion();
    increment_.display_deletion_ = display_deletion;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.display_deletion)
}
void Increment::set_allocated_power_mode_update(::android::surfaceflinger::PowerModeUpdate* power_mode_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_increment();
  if (power_mode_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_mode_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_mode_update, submessage_arena);
    }
    set_has_power_mode_update();
    increment_.power_mode_update_ = power_mode_update;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.Increment.power_mode_update)
}
Increment::Increment()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.Increment)
}
Increment::Increment(const Increment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_stamp_ = from.time_stamp_;
  clear_has_increment();
  switch (from.increment_case()) {
    case kTransaction: {
      mutable_transaction()->::android::surfaceflinger::Transaction::MergeFrom(from.transaction());
      break;
    }
    case kSurfaceCreation: {
      mutable_surface_creation()->::android::surfaceflinger::SurfaceCreation::MergeFrom(from.surface_creation());
      break;
    }
    case kSurfaceDeletion: {
      mutable_surface_deletion()->::android::surfaceflinger::SurfaceDeletion::MergeFrom(from.surface_deletion());
      break;
    }
    case kBufferUpdate: {
      mutable_buffer_update()->::android::surfaceflinger::BufferUpdate::MergeFrom(from.buffer_update());
      break;
    }
    case kVsyncEvent: {
      mutable_vsync_event()->::android::surfaceflinger::VSyncEvent::MergeFrom(from.vsync_event());
      break;
    }
    case kDisplayCreation: {
      mutable_display_creation()->::android::surfaceflinger::DisplayCreation::MergeFrom(from.display_creation());
      break;
    }
    case kDisplayDeletion: {
      mutable_display_deletion()->::android::surfaceflinger::DisplayDeletion::MergeFrom(from.display_deletion());
      break;
    }
    case kPowerModeUpdate: {
      mutable_power_mode_update()->::android::surfaceflinger::PowerModeUpdate::MergeFrom(from.power_mode_update());
      break;
    }
    case INCREMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.Increment)
}

void Increment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  time_stamp_ = PROTOBUF_LONGLONG(0);
  clear_has_increment();
}

Increment::~Increment() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.Increment)
  SharedDtor();
}

void Increment::SharedDtor() {
  if (has_increment()) {
    clear_increment();
  }
}

void Increment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Increment& Increment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Increment_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Increment::clear_increment() {
// @@protoc_insertion_point(one_of_clear_start:android.surfaceflinger.Increment)
  switch (increment_case()) {
    case kTransaction: {
      delete increment_.transaction_;
      break;
    }
    case kSurfaceCreation: {
      delete increment_.surface_creation_;
      break;
    }
    case kSurfaceDeletion: {
      delete increment_.surface_deletion_;
      break;
    }
    case kBufferUpdate: {
      delete increment_.buffer_update_;
      break;
    }
    case kVsyncEvent: {
      delete increment_.vsync_event_;
      break;
    }
    case kDisplayCreation: {
      delete increment_.display_creation_;
      break;
    }
    case kDisplayDeletion: {
      delete increment_.display_deletion_;
      break;
    }
    case kPowerModeUpdate: {
      delete increment_.power_mode_update_;
      break;
    }
    case INCREMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INCREMENT_NOT_SET;
}


void Increment::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.Increment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_stamp_ = PROTOBUF_LONGLONG(0);
  clear_increment();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Increment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.Transaction transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceCreation surface_creation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_surface_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceDeletion surface_deletion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_surface_deletion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.BufferUpdate buffer_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_buffer_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.VSyncEvent vsync_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_vsync_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.DisplayCreation display_creation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_display_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.DisplayDeletion display_deletion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_display_deletion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.PowerModeUpdate power_mode_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_power_mode_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Increment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.Increment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_stamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.Transaction transaction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceCreation surface_creation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_surface_creation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceDeletion surface_deletion = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_surface_deletion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.BufferUpdate buffer_update = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buffer_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.VSyncEvent vsync_event = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vsync_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.DisplayCreation display_creation = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_creation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.DisplayDeletion display_deletion = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_deletion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.PowerModeUpdate power_mode_update = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_mode_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.Increment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.Increment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Increment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.Increment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_stamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_stamp(), output);
  }

  switch (increment_case()) {
    case kTransaction:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::transaction(this), output);
      break;
    case kSurfaceCreation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::surface_creation(this), output);
      break;
    case kSurfaceDeletion:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::surface_deletion(this), output);
      break;
    case kBufferUpdate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::buffer_update(this), output);
      break;
    case kVsyncEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::vsync_event(this), output);
      break;
    case kDisplayCreation:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        7, _Internal::display_creation(this), output);
      break;
    case kDisplayDeletion:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::display_deletion(this), output);
      break;
    case kPowerModeUpdate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        9, _Internal::power_mode_update(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.Increment)
}

size_t Increment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.Increment)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int64 time_stamp = 1;
  if (has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (increment_case()) {
    // optional .android.surfaceflinger.Transaction transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.transaction_);
      break;
    }
    // optional .android.surfaceflinger.SurfaceCreation surface_creation = 3;
    case kSurfaceCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.surface_creation_);
      break;
    }
    // optional .android.surfaceflinger.SurfaceDeletion surface_deletion = 4;
    case kSurfaceDeletion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.surface_deletion_);
      break;
    }
    // optional .android.surfaceflinger.BufferUpdate buffer_update = 5;
    case kBufferUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.buffer_update_);
      break;
    }
    // optional .android.surfaceflinger.VSyncEvent vsync_event = 6;
    case kVsyncEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.vsync_event_);
      break;
    }
    // optional .android.surfaceflinger.DisplayCreation display_creation = 7;
    case kDisplayCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.display_creation_);
      break;
    }
    // optional .android.surfaceflinger.DisplayDeletion display_deletion = 8;
    case kDisplayDeletion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.display_deletion_);
      break;
    }
    // optional .android.surfaceflinger.PowerModeUpdate power_mode_update = 9;
    case kPowerModeUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *increment_.power_mode_update_);
      break;
    }
    case INCREMENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Increment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Increment*>(
      &from));
}

void Increment::MergeFrom(const Increment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.Increment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_stamp()) {
    set_time_stamp(from.time_stamp());
  }
  switch (from.increment_case()) {
    case kTransaction: {
      mutable_transaction()->::android::surfaceflinger::Transaction::MergeFrom(from.transaction());
      break;
    }
    case kSurfaceCreation: {
      mutable_surface_creation()->::android::surfaceflinger::SurfaceCreation::MergeFrom(from.surface_creation());
      break;
    }
    case kSurfaceDeletion: {
      mutable_surface_deletion()->::android::surfaceflinger::SurfaceDeletion::MergeFrom(from.surface_deletion());
      break;
    }
    case kBufferUpdate: {
      mutable_buffer_update()->::android::surfaceflinger::BufferUpdate::MergeFrom(from.buffer_update());
      break;
    }
    case kVsyncEvent: {
      mutable_vsync_event()->::android::surfaceflinger::VSyncEvent::MergeFrom(from.vsync_event());
      break;
    }
    case kDisplayCreation: {
      mutable_display_creation()->::android::surfaceflinger::DisplayCreation::MergeFrom(from.display_creation());
      break;
    }
    case kDisplayDeletion: {
      mutable_display_deletion()->::android::surfaceflinger::DisplayDeletion::MergeFrom(from.display_deletion());
      break;
    }
    case kPowerModeUpdate: {
      mutable_power_mode_update()->::android::surfaceflinger::PowerModeUpdate::MergeFrom(from.power_mode_update());
      break;
    }
    case INCREMENT_NOT_SET: {
      break;
    }
  }
}

void Increment::CopyFrom(const Increment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.Increment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Increment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (increment_case()) {
    case kTransaction: {
      if (has_transaction()) {
        if (!this->transaction().IsInitialized()) return false;
      }
      break;
    }
    case kSurfaceCreation: {
      if (has_surface_creation()) {
        if (!this->surface_creation().IsInitialized()) return false;
      }
      break;
    }
    case kSurfaceDeletion: {
      if (has_surface_deletion()) {
        if (!this->surface_deletion().IsInitialized()) return false;
      }
      break;
    }
    case kBufferUpdate: {
      if (has_buffer_update()) {
        if (!this->buffer_update().IsInitialized()) return false;
      }
      break;
    }
    case kVsyncEvent: {
      if (has_vsync_event()) {
        if (!this->vsync_event().IsInitialized()) return false;
      }
      break;
    }
    case kDisplayCreation: {
      if (has_display_creation()) {
        if (!this->display_creation().IsInitialized()) return false;
      }
      break;
    }
    case kDisplayDeletion: {
      if (has_display_deletion()) {
        if (!this->display_deletion().IsInitialized()) return false;
      }
      break;
    }
    case kPowerModeUpdate: {
      if (has_power_mode_update()) {
        if (!this->power_mode_update().IsInitialized()) return false;
      }
      break;
    }
    case INCREMENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void Increment::InternalSwap(Increment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_stamp_, other->time_stamp_);
  swap(increment_, other->increment_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Increment::GetTypeName() const {
  return "android.surfaceflinger.Increment";
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::android::surfaceflinger::_Transaction_default_instance_._instance.get_mutable()->origin_ = const_cast< ::android::surfaceflinger::Origin*>(
      ::android::surfaceflinger::Origin::internal_default_instance());
}
class Transaction::_Internal {
 public:
  using HasBits = decltype(std::declval<Transaction>()._has_bits_);
  static void set_has_synchronous(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::surfaceflinger::Origin& origin(const Transaction* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::surfaceflinger::Origin&
Transaction::_Internal::origin(const Transaction* msg) {
  return *msg->origin_;
}
Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      surface_change_(from.surface_change_),
      display_change_(from.display_change_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::android::surfaceflinger::Origin(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_) -
    reinterpret_cast<char*>(&id_)) + sizeof(animation_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(animation_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surface_change_.Clear();
  display_change_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(origin_ != nullptr);
    origin_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&animation_) -
        reinterpret_cast<char*>(&id_)) + sizeof(animation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_surface_change(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.DisplayChange display_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_display_change(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // required bool synchronous = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_synchronous(&has_bits);
          synchronous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool animation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_animation(&has_bits);
          animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.Origin origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.Transaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_surface_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.DisplayChange display_change = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_display_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool synchronous = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_synchronous(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &synchronous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool animation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_animation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.Origin origin = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_change_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->surface_change(static_cast<int>(i)),
      output);
  }

  // repeated .android.surfaceflinger.DisplayChange display_change = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->display_change_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->display_change(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required bool synchronous = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->synchronous(), output);
  }

  // required bool animation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->animation(), output);
  }

  // optional .android.surfaceflinger.Origin origin = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::origin(this), output);
  }

  // optional uint64 id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.Transaction)
}

size_t Transaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.Transaction)
  size_t total_size = 0;

  if (has_synchronous()) {
    // required bool synchronous = 3;
    total_size += 1 + 1;
  }

  if (has_animation()) {
    // required bool animation = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.Transaction)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required bool synchronous = 3;
    total_size += 1 + 1;

    // required bool animation = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceChange surface_change = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->surface_change_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->surface_change(static_cast<int>(i)));
    }
  }

  // repeated .android.surfaceflinger.DisplayChange display_change = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->display_change_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->display_change(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.surfaceflinger.Origin origin = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional uint64 id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transaction*>(
      &from));
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surface_change_.MergeFrom(from.surface_change_);
  display_change_.MergeFrom(from.display_change_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::android::surfaceflinger::Origin::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      synchronous_ = from.synchronous_;
    }
    if (cached_has_bits & 0x00000008u) {
      animation_ = from.animation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->surface_change())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->display_change())) return false;
  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&surface_change_)->InternalSwap(CastToBase(&other->surface_change_));
  CastToBase(&display_change_)->InternalSwap(CastToBase(&other->display_change_));
  swap(origin_, other->origin_);
  swap(id_, other->id_);
  swap(synchronous_, other->synchronous_);
  swap(animation_, other->animation_);
}

std::string Transaction::GetTypeName() const {
  return "android.surfaceflinger.Transaction";
}


// ===================================================================

void SurfaceChange::InitAsDefaultInstance() {
}
class SurfaceChange::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceChange>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::PositionChange& position(const SurfaceChange* msg);
  static const ::android::surfaceflinger::SizeChange& size(const SurfaceChange* msg);
  static const ::android::surfaceflinger::AlphaChange& alpha(const SurfaceChange* msg);
  static const ::android::surfaceflinger::LayerChange& layer(const SurfaceChange* msg);
  static const ::android::surfaceflinger::CropChange& crop(const SurfaceChange* msg);
  static const ::android::surfaceflinger::MatrixChange& matrix(const SurfaceChange* msg);
  static const ::android::surfaceflinger::TransparentRegionHintChange& transparent_region_hint(const SurfaceChange* msg);
  static const ::android::surfaceflinger::LayerStackChange& layer_stack(const SurfaceChange* msg);
  static const ::android::surfaceflinger::HiddenFlagChange& hidden_flag(const SurfaceChange* msg);
  static const ::android::surfaceflinger::OpaqueFlagChange& opaque_flag(const SurfaceChange* msg);
  static const ::android::surfaceflinger::SecureFlagChange& secure_flag(const SurfaceChange* msg);
  static const ::android::surfaceflinger::CornerRadiusChange& corner_radius(const SurfaceChange* msg);
  static const ::android::surfaceflinger::ReparentChange& reparent(const SurfaceChange* msg);
  static const ::android::surfaceflinger::RelativeParentChange& relative_parent(const SurfaceChange* msg);
  static const ::android::surfaceflinger::BackgroundBlurRadiusChange& background_blur_radius(const SurfaceChange* msg);
  static const ::android::surfaceflinger::ShadowRadiusChange& shadow_radius(const SurfaceChange* msg);
  static const ::android::surfaceflinger::BlurRegionsChange& blur_regions(const SurfaceChange* msg);
  static const ::android::surfaceflinger::TrustedOverlayChange& trusted_overlay(const SurfaceChange* msg);
};

const ::android::surfaceflinger::PositionChange&
SurfaceChange::_Internal::position(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.position_;
}
const ::android::surfaceflinger::SizeChange&
SurfaceChange::_Internal::size(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.size_;
}
const ::android::surfaceflinger::AlphaChange&
SurfaceChange::_Internal::alpha(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.alpha_;
}
const ::android::surfaceflinger::LayerChange&
SurfaceChange::_Internal::layer(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.layer_;
}
const ::android::surfaceflinger::CropChange&
SurfaceChange::_Internal::crop(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.crop_;
}
const ::android::surfaceflinger::MatrixChange&
SurfaceChange::_Internal::matrix(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.matrix_;
}
const ::android::surfaceflinger::TransparentRegionHintChange&
SurfaceChange::_Internal::transparent_region_hint(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.transparent_region_hint_;
}
const ::android::surfaceflinger::LayerStackChange&
SurfaceChange::_Internal::layer_stack(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.layer_stack_;
}
const ::android::surfaceflinger::HiddenFlagChange&
SurfaceChange::_Internal::hidden_flag(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.hidden_flag_;
}
const ::android::surfaceflinger::OpaqueFlagChange&
SurfaceChange::_Internal::opaque_flag(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.opaque_flag_;
}
const ::android::surfaceflinger::SecureFlagChange&
SurfaceChange::_Internal::secure_flag(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.secure_flag_;
}
const ::android::surfaceflinger::CornerRadiusChange&
SurfaceChange::_Internal::corner_radius(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.corner_radius_;
}
const ::android::surfaceflinger::ReparentChange&
SurfaceChange::_Internal::reparent(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.reparent_;
}
const ::android::surfaceflinger::RelativeParentChange&
SurfaceChange::_Internal::relative_parent(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.relative_parent_;
}
const ::android::surfaceflinger::BackgroundBlurRadiusChange&
SurfaceChange::_Internal::background_blur_radius(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.background_blur_radius_;
}
const ::android::surfaceflinger::ShadowRadiusChange&
SurfaceChange::_Internal::shadow_radius(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.shadow_radius_;
}
const ::android::surfaceflinger::BlurRegionsChange&
SurfaceChange::_Internal::blur_regions(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.blur_regions_;
}
const ::android::surfaceflinger::TrustedOverlayChange&
SurfaceChange::_Internal::trusted_overlay(const SurfaceChange* msg) {
  return *msg->SurfaceChange_.trusted_overlay_;
}
void SurfaceChange::set_allocated_position(::android::surfaceflinger::PositionChange* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    SurfaceChange_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.position)
}
void SurfaceChange::set_allocated_size(::android::surfaceflinger::SizeChange* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    set_has_size();
    SurfaceChange_.size_ = size;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.size)
}
void SurfaceChange::set_allocated_alpha(::android::surfaceflinger::AlphaChange* alpha) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (alpha) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alpha = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alpha, submessage_arena);
    }
    set_has_alpha();
    SurfaceChange_.alpha_ = alpha;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.alpha)
}
void SurfaceChange::set_allocated_layer(::android::surfaceflinger::LayerChange* layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    set_has_layer();
    SurfaceChange_.layer_ = layer;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.layer)
}
void SurfaceChange::set_allocated_crop(::android::surfaceflinger::CropChange* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    set_has_crop();
    SurfaceChange_.crop_ = crop;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.crop)
}
void SurfaceChange::set_allocated_matrix(::android::surfaceflinger::MatrixChange* matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix, submessage_arena);
    }
    set_has_matrix();
    SurfaceChange_.matrix_ = matrix;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.matrix)
}
void SurfaceChange::set_allocated_transparent_region_hint(::android::surfaceflinger::TransparentRegionHintChange* transparent_region_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (transparent_region_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transparent_region_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transparent_region_hint, submessage_arena);
    }
    set_has_transparent_region_hint();
    SurfaceChange_.transparent_region_hint_ = transparent_region_hint;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.transparent_region_hint)
}
void SurfaceChange::set_allocated_layer_stack(::android::surfaceflinger::LayerStackChange* layer_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (layer_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_stack, submessage_arena);
    }
    set_has_layer_stack();
    SurfaceChange_.layer_stack_ = layer_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.layer_stack)
}
void SurfaceChange::set_allocated_hidden_flag(::android::surfaceflinger::HiddenFlagChange* hidden_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (hidden_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hidden_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_flag, submessage_arena);
    }
    set_has_hidden_flag();
    SurfaceChange_.hidden_flag_ = hidden_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.hidden_flag)
}
void SurfaceChange::set_allocated_opaque_flag(::android::surfaceflinger::OpaqueFlagChange* opaque_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (opaque_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opaque_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opaque_flag, submessage_arena);
    }
    set_has_opaque_flag();
    SurfaceChange_.opaque_flag_ = opaque_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.opaque_flag)
}
void SurfaceChange::set_allocated_secure_flag(::android::surfaceflinger::SecureFlagChange* secure_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (secure_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      secure_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secure_flag, submessage_arena);
    }
    set_has_secure_flag();
    SurfaceChange_.secure_flag_ = secure_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.secure_flag)
}
void SurfaceChange::set_allocated_corner_radius(::android::surfaceflinger::CornerRadiusChange* corner_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (corner_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      corner_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corner_radius, submessage_arena);
    }
    set_has_corner_radius();
    SurfaceChange_.corner_radius_ = corner_radius;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.corner_radius)
}
void SurfaceChange::set_allocated_reparent(::android::surfaceflinger::ReparentChange* reparent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (reparent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reparent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reparent, submessage_arena);
    }
    set_has_reparent();
    SurfaceChange_.reparent_ = reparent;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.reparent)
}
void SurfaceChange::set_allocated_relative_parent(::android::surfaceflinger::RelativeParentChange* relative_parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (relative_parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_parent, submessage_arena);
    }
    set_has_relative_parent();
    SurfaceChange_.relative_parent_ = relative_parent;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.relative_parent)
}
void SurfaceChange::set_allocated_background_blur_radius(::android::surfaceflinger::BackgroundBlurRadiusChange* background_blur_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (background_blur_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_blur_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_blur_radius, submessage_arena);
    }
    set_has_background_blur_radius();
    SurfaceChange_.background_blur_radius_ = background_blur_radius;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.background_blur_radius)
}
void SurfaceChange::set_allocated_shadow_radius(::android::surfaceflinger::ShadowRadiusChange* shadow_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (shadow_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shadow_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow_radius, submessage_arena);
    }
    set_has_shadow_radius();
    SurfaceChange_.shadow_radius_ = shadow_radius;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.shadow_radius)
}
void SurfaceChange::set_allocated_blur_regions(::android::surfaceflinger::BlurRegionsChange* blur_regions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (blur_regions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blur_regions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blur_regions, submessage_arena);
    }
    set_has_blur_regions();
    SurfaceChange_.blur_regions_ = blur_regions;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.blur_regions)
}
void SurfaceChange::set_allocated_trusted_overlay(::android::surfaceflinger::TrustedOverlayChange* trusted_overlay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SurfaceChange();
  if (trusted_overlay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trusted_overlay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted_overlay, submessage_arena);
    }
    set_has_trusted_overlay();
    SurfaceChange_.trusted_overlay_ = trusted_overlay;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceChange.trusted_overlay)
}
SurfaceChange::SurfaceChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceChange)
}
SurfaceChange::SurfaceChange(const SurfaceChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_SurfaceChange();
  switch (from.SurfaceChange_case()) {
    case kPosition: {
      mutable_position()->::android::surfaceflinger::PositionChange::MergeFrom(from.position());
      break;
    }
    case kSize: {
      mutable_size()->::android::surfaceflinger::SizeChange::MergeFrom(from.size());
      break;
    }
    case kAlpha: {
      mutable_alpha()->::android::surfaceflinger::AlphaChange::MergeFrom(from.alpha());
      break;
    }
    case kLayer: {
      mutable_layer()->::android::surfaceflinger::LayerChange::MergeFrom(from.layer());
      break;
    }
    case kCrop: {
      mutable_crop()->::android::surfaceflinger::CropChange::MergeFrom(from.crop());
      break;
    }
    case kMatrix: {
      mutable_matrix()->::android::surfaceflinger::MatrixChange::MergeFrom(from.matrix());
      break;
    }
    case kTransparentRegionHint: {
      mutable_transparent_region_hint()->::android::surfaceflinger::TransparentRegionHintChange::MergeFrom(from.transparent_region_hint());
      break;
    }
    case kLayerStack: {
      mutable_layer_stack()->::android::surfaceflinger::LayerStackChange::MergeFrom(from.layer_stack());
      break;
    }
    case kHiddenFlag: {
      mutable_hidden_flag()->::android::surfaceflinger::HiddenFlagChange::MergeFrom(from.hidden_flag());
      break;
    }
    case kOpaqueFlag: {
      mutable_opaque_flag()->::android::surfaceflinger::OpaqueFlagChange::MergeFrom(from.opaque_flag());
      break;
    }
    case kSecureFlag: {
      mutable_secure_flag()->::android::surfaceflinger::SecureFlagChange::MergeFrom(from.secure_flag());
      break;
    }
    case kCornerRadius: {
      mutable_corner_radius()->::android::surfaceflinger::CornerRadiusChange::MergeFrom(from.corner_radius());
      break;
    }
    case kReparent: {
      mutable_reparent()->::android::surfaceflinger::ReparentChange::MergeFrom(from.reparent());
      break;
    }
    case kRelativeParent: {
      mutable_relative_parent()->::android::surfaceflinger::RelativeParentChange::MergeFrom(from.relative_parent());
      break;
    }
    case kBackgroundBlurRadius: {
      mutable_background_blur_radius()->::android::surfaceflinger::BackgroundBlurRadiusChange::MergeFrom(from.background_blur_radius());
      break;
    }
    case kShadowRadius: {
      mutable_shadow_radius()->::android::surfaceflinger::ShadowRadiusChange::MergeFrom(from.shadow_radius());
      break;
    }
    case kBlurRegions: {
      mutable_blur_regions()->::android::surfaceflinger::BlurRegionsChange::MergeFrom(from.blur_regions());
      break;
    }
    case kTrustedOverlay: {
      mutable_trusted_overlay()->::android::surfaceflinger::TrustedOverlayChange::MergeFrom(from.trusted_overlay());
      break;
    }
    case SURFACECHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceChange)
}

void SurfaceChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  id_ = 0;
  clear_has_SurfaceChange();
}

SurfaceChange::~SurfaceChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceChange)
  SharedDtor();
}

void SurfaceChange::SharedDtor() {
  if (has_SurfaceChange()) {
    clear_SurfaceChange();
  }
}

void SurfaceChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceChange& SurfaceChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SurfaceChange::clear_SurfaceChange() {
// @@protoc_insertion_point(one_of_clear_start:android.surfaceflinger.SurfaceChange)
  switch (SurfaceChange_case()) {
    case kPosition: {
      delete SurfaceChange_.position_;
      break;
    }
    case kSize: {
      delete SurfaceChange_.size_;
      break;
    }
    case kAlpha: {
      delete SurfaceChange_.alpha_;
      break;
    }
    case kLayer: {
      delete SurfaceChange_.layer_;
      break;
    }
    case kCrop: {
      delete SurfaceChange_.crop_;
      break;
    }
    case kMatrix: {
      delete SurfaceChange_.matrix_;
      break;
    }
    case kTransparentRegionHint: {
      delete SurfaceChange_.transparent_region_hint_;
      break;
    }
    case kLayerStack: {
      delete SurfaceChange_.layer_stack_;
      break;
    }
    case kHiddenFlag: {
      delete SurfaceChange_.hidden_flag_;
      break;
    }
    case kOpaqueFlag: {
      delete SurfaceChange_.opaque_flag_;
      break;
    }
    case kSecureFlag: {
      delete SurfaceChange_.secure_flag_;
      break;
    }
    case kCornerRadius: {
      delete SurfaceChange_.corner_radius_;
      break;
    }
    case kReparent: {
      delete SurfaceChange_.reparent_;
      break;
    }
    case kRelativeParent: {
      delete SurfaceChange_.relative_parent_;
      break;
    }
    case kBackgroundBlurRadius: {
      delete SurfaceChange_.background_blur_radius_;
      break;
    }
    case kShadowRadius: {
      delete SurfaceChange_.shadow_radius_;
      break;
    }
    case kBlurRegions: {
      delete SurfaceChange_.blur_regions_;
      break;
    }
    case kTrustedOverlay: {
      delete SurfaceChange_.trusted_overlay_;
      break;
    }
    case SURFACECHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SURFACECHANGE_NOT_SET;
}


void SurfaceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  clear_SurfaceChange();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.PositionChange position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SizeChange size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.AlphaChange alpha = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_alpha(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.LayerChange layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.CropChange crop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.MatrixChange matrix = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.TransparentRegionHintChange transparent_region_hint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_transparent_region_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.LayerStackChange layer_stack = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_layer_stack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.HiddenFlagChange hidden_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_hidden_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.OpaqueFlagChange opaque_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_opaque_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SecureFlagChange secure_flag = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_secure_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.CornerRadiusChange corner_radius = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_corner_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.ReparentChange reparent = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_reparent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.RelativeParentChange relative_parent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_relative_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.BackgroundBlurRadiusChange background_blur_radius = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_background_blur_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.ShadowRadiusChange shadow_radius = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_shadow_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.BlurRegionsChange blur_regions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_blur_regions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.TrustedOverlayChange trusted_overlay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_trusted_overlay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.PositionChange position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SizeChange size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.AlphaChange alpha = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alpha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.LayerChange layer = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.CropChange crop = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.MatrixChange matrix = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.TransparentRegionHintChange transparent_region_hint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transparent_region_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.LayerStackChange layer_stack = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_layer_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.HiddenFlagChange hidden_flag = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.OpaqueFlagChange opaque_flag = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_opaque_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SecureFlagChange secure_flag = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_secure_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.CornerRadiusChange corner_radius = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_radius()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.ReparentChange reparent = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reparent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.RelativeParentChange relative_parent = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.BackgroundBlurRadiusChange background_blur_radius = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_blur_radius()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.ShadowRadiusChange shadow_radius = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shadow_radius()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.BlurRegionsChange blur_regions = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blur_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.TrustedOverlayChange trusted_overlay = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trusted_overlay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  switch (SurfaceChange_case()) {
    case kPosition:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::position(this), output);
      break;
    case kSize:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::size(this), output);
      break;
    case kAlpha:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::alpha(this), output);
      break;
    case kLayer:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::layer(this), output);
      break;
    case kCrop:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::crop(this), output);
      break;
    case kMatrix:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::matrix(this), output);
      break;
    case kTransparentRegionHint:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::transparent_region_hint(this), output);
      break;
    case kLayerStack:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::layer_stack(this), output);
      break;
    case kHiddenFlag:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        12, _Internal::hidden_flag(this), output);
      break;
    case kOpaqueFlag:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        13, _Internal::opaque_flag(this), output);
      break;
    case kSecureFlag:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        14, _Internal::secure_flag(this), output);
      break;
    case kCornerRadius:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        16, _Internal::corner_radius(this), output);
      break;
    case kReparent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        17, _Internal::reparent(this), output);
      break;
    case kRelativeParent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        18, _Internal::relative_parent(this), output);
      break;
    case kBackgroundBlurRadius:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        20, _Internal::background_blur_radius(this), output);
      break;
    case kShadowRadius:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        21, _Internal::shadow_radius(this), output);
      break;
    case kBlurRegions:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        22, _Internal::blur_regions(this), output);
      break;
    case kTrustedOverlay:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        23, _Internal::trusted_overlay(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceChange)
}

size_t SurfaceChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (SurfaceChange_case()) {
    // optional .android.surfaceflinger.PositionChange position = 2;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.position_);
      break;
    }
    // optional .android.surfaceflinger.SizeChange size = 3;
    case kSize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.size_);
      break;
    }
    // optional .android.surfaceflinger.AlphaChange alpha = 4;
    case kAlpha: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.alpha_);
      break;
    }
    // optional .android.surfaceflinger.LayerChange layer = 5;
    case kLayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.layer_);
      break;
    }
    // optional .android.surfaceflinger.CropChange crop = 6;
    case kCrop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.crop_);
      break;
    }
    // optional .android.surfaceflinger.MatrixChange matrix = 8;
    case kMatrix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.matrix_);
      break;
    }
    // optional .android.surfaceflinger.TransparentRegionHintChange transparent_region_hint = 10;
    case kTransparentRegionHint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.transparent_region_hint_);
      break;
    }
    // optional .android.surfaceflinger.LayerStackChange layer_stack = 11;
    case kLayerStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.layer_stack_);
      break;
    }
    // optional .android.surfaceflinger.HiddenFlagChange hidden_flag = 12;
    case kHiddenFlag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.hidden_flag_);
      break;
    }
    // optional .android.surfaceflinger.OpaqueFlagChange opaque_flag = 13;
    case kOpaqueFlag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.opaque_flag_);
      break;
    }
    // optional .android.surfaceflinger.SecureFlagChange secure_flag = 14;
    case kSecureFlag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.secure_flag_);
      break;
    }
    // optional .android.surfaceflinger.CornerRadiusChange corner_radius = 16;
    case kCornerRadius: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.corner_radius_);
      break;
    }
    // optional .android.surfaceflinger.ReparentChange reparent = 17;
    case kReparent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.reparent_);
      break;
    }
    // optional .android.surfaceflinger.RelativeParentChange relative_parent = 18;
    case kRelativeParent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.relative_parent_);
      break;
    }
    // optional .android.surfaceflinger.BackgroundBlurRadiusChange background_blur_radius = 20;
    case kBackgroundBlurRadius: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.background_blur_radius_);
      break;
    }
    // optional .android.surfaceflinger.ShadowRadiusChange shadow_radius = 21;
    case kShadowRadius: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.shadow_radius_);
      break;
    }
    // optional .android.surfaceflinger.BlurRegionsChange blur_regions = 22;
    case kBlurRegions: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.blur_regions_);
      break;
    }
    // optional .android.surfaceflinger.TrustedOverlayChange trusted_overlay = 23;
    case kTrustedOverlay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SurfaceChange_.trusted_overlay_);
      break;
    }
    case SURFACECHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceChange*>(
      &from));
}

void SurfaceChange::MergeFrom(const SurfaceChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
  switch (from.SurfaceChange_case()) {
    case kPosition: {
      mutable_position()->::android::surfaceflinger::PositionChange::MergeFrom(from.position());
      break;
    }
    case kSize: {
      mutable_size()->::android::surfaceflinger::SizeChange::MergeFrom(from.size());
      break;
    }
    case kAlpha: {
      mutable_alpha()->::android::surfaceflinger::AlphaChange::MergeFrom(from.alpha());
      break;
    }
    case kLayer: {
      mutable_layer()->::android::surfaceflinger::LayerChange::MergeFrom(from.layer());
      break;
    }
    case kCrop: {
      mutable_crop()->::android::surfaceflinger::CropChange::MergeFrom(from.crop());
      break;
    }
    case kMatrix: {
      mutable_matrix()->::android::surfaceflinger::MatrixChange::MergeFrom(from.matrix());
      break;
    }
    case kTransparentRegionHint: {
      mutable_transparent_region_hint()->::android::surfaceflinger::TransparentRegionHintChange::MergeFrom(from.transparent_region_hint());
      break;
    }
    case kLayerStack: {
      mutable_layer_stack()->::android::surfaceflinger::LayerStackChange::MergeFrom(from.layer_stack());
      break;
    }
    case kHiddenFlag: {
      mutable_hidden_flag()->::android::surfaceflinger::HiddenFlagChange::MergeFrom(from.hidden_flag());
      break;
    }
    case kOpaqueFlag: {
      mutable_opaque_flag()->::android::surfaceflinger::OpaqueFlagChange::MergeFrom(from.opaque_flag());
      break;
    }
    case kSecureFlag: {
      mutable_secure_flag()->::android::surfaceflinger::SecureFlagChange::MergeFrom(from.secure_flag());
      break;
    }
    case kCornerRadius: {
      mutable_corner_radius()->::android::surfaceflinger::CornerRadiusChange::MergeFrom(from.corner_radius());
      break;
    }
    case kReparent: {
      mutable_reparent()->::android::surfaceflinger::ReparentChange::MergeFrom(from.reparent());
      break;
    }
    case kRelativeParent: {
      mutable_relative_parent()->::android::surfaceflinger::RelativeParentChange::MergeFrom(from.relative_parent());
      break;
    }
    case kBackgroundBlurRadius: {
      mutable_background_blur_radius()->::android::surfaceflinger::BackgroundBlurRadiusChange::MergeFrom(from.background_blur_radius());
      break;
    }
    case kShadowRadius: {
      mutable_shadow_radius()->::android::surfaceflinger::ShadowRadiusChange::MergeFrom(from.shadow_radius());
      break;
    }
    case kBlurRegions: {
      mutable_blur_regions()->::android::surfaceflinger::BlurRegionsChange::MergeFrom(from.blur_regions());
      break;
    }
    case kTrustedOverlay: {
      mutable_trusted_overlay()->::android::surfaceflinger::TrustedOverlayChange::MergeFrom(from.trusted_overlay());
      break;
    }
    case SURFACECHANGE_NOT_SET: {
      break;
    }
  }
}

void SurfaceChange::CopyFrom(const SurfaceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (SurfaceChange_case()) {
    case kPosition: {
      if (has_position()) {
        if (!this->position().IsInitialized()) return false;
      }
      break;
    }
    case kSize: {
      if (has_size()) {
        if (!this->size().IsInitialized()) return false;
      }
      break;
    }
    case kAlpha: {
      if (has_alpha()) {
        if (!this->alpha().IsInitialized()) return false;
      }
      break;
    }
    case kLayer: {
      if (has_layer()) {
        if (!this->layer().IsInitialized()) return false;
      }
      break;
    }
    case kCrop: {
      if (has_crop()) {
        if (!this->crop().IsInitialized()) return false;
      }
      break;
    }
    case kMatrix: {
      if (has_matrix()) {
        if (!this->matrix().IsInitialized()) return false;
      }
      break;
    }
    case kTransparentRegionHint: {
      if (has_transparent_region_hint()) {
        if (!this->transparent_region_hint().IsInitialized()) return false;
      }
      break;
    }
    case kLayerStack: {
      if (has_layer_stack()) {
        if (!this->layer_stack().IsInitialized()) return false;
      }
      break;
    }
    case kHiddenFlag: {
      if (has_hidden_flag()) {
        if (!this->hidden_flag().IsInitialized()) return false;
      }
      break;
    }
    case kOpaqueFlag: {
      if (has_opaque_flag()) {
        if (!this->opaque_flag().IsInitialized()) return false;
      }
      break;
    }
    case kSecureFlag: {
      if (has_secure_flag()) {
        if (!this->secure_flag().IsInitialized()) return false;
      }
      break;
    }
    case kCornerRadius: {
      if (has_corner_radius()) {
        if (!this->corner_radius().IsInitialized()) return false;
      }
      break;
    }
    case kReparent: {
      if (has_reparent()) {
        if (!this->reparent().IsInitialized()) return false;
      }
      break;
    }
    case kRelativeParent: {
      if (has_relative_parent()) {
        if (!this->relative_parent().IsInitialized()) return false;
      }
      break;
    }
    case kBackgroundBlurRadius: {
      if (has_background_blur_radius()) {
        if (!this->background_blur_radius().IsInitialized()) return false;
      }
      break;
    }
    case kShadowRadius: {
      if (has_shadow_radius()) {
        if (!this->shadow_radius().IsInitialized()) return false;
      }
      break;
    }
    case kBlurRegions: {
      if (has_blur_regions()) {
        if (!this->blur_regions().IsInitialized()) return false;
      }
      break;
    }
    case kTrustedOverlay: {
      if (has_trusted_overlay()) {
        if (!this->trusted_overlay().IsInitialized()) return false;
      }
      break;
    }
    case SURFACECHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void SurfaceChange::InternalSwap(SurfaceChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(SurfaceChange_, other->SurfaceChange_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SurfaceChange::GetTypeName() const {
  return "android.surfaceflinger.SurfaceChange";
}


// ===================================================================

void PositionChange::InitAsDefaultInstance() {
}
class PositionChange::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionChange>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PositionChange::PositionChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.PositionChange)
}
PositionChange::PositionChange(const PositionChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.PositionChange)
}

void PositionChange::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PositionChange::~PositionChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.PositionChange)
  SharedDtor();
}

void PositionChange::SharedDtor() {
}

void PositionChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionChange& PositionChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void PositionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.PositionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.PositionChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.PositionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.PositionChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.PositionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.PositionChange)
}

size_t PositionChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.PositionChange)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PositionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.PositionChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PositionChange*>(
      &from));
}

void PositionChange::MergeFrom(const PositionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.PositionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionChange::CopyFrom(const PositionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.PositionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PositionChange::InternalSwap(PositionChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

std::string PositionChange::GetTypeName() const {
  return "android.surfaceflinger.PositionChange";
}


// ===================================================================

void SizeChange::InitAsDefaultInstance() {
}
class SizeChange::_Internal {
 public:
  using HasBits = decltype(std::declval<SizeChange>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SizeChange::SizeChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SizeChange)
}
SizeChange::SizeChange(const SizeChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SizeChange)
}

void SizeChange::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

SizeChange::~SizeChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SizeChange)
  SharedDtor();
}

void SizeChange::SharedDtor() {
}

void SizeChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SizeChange& SizeChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SizeChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SizeChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SizeChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&w_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SizeChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SizeChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SizeChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 w = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 h = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SizeChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SizeChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SizeChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SizeChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 w = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->w(), output);
  }

  // required uint32 h = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->h(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SizeChange)
}

size_t SizeChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.SizeChange)
  size_t total_size = 0;

  if (has_w()) {
    // required uint32 w = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());
  }

  if (has_h()) {
    // required uint32 h = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());
  }

  return total_size;
}
size_t SizeChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SizeChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 w = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());

    // required uint32 h = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SizeChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SizeChange*>(
      &from));
}

void SizeChange::MergeFrom(const SizeChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SizeChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SizeChange::CopyFrom(const SizeChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SizeChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SizeChange::InternalSwap(SizeChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string SizeChange::GetTypeName() const {
  return "android.surfaceflinger.SizeChange";
}


// ===================================================================

void AlphaChange::InitAsDefaultInstance() {
}
class AlphaChange::_Internal {
 public:
  using HasBits = decltype(std::declval<AlphaChange>()._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AlphaChange::AlphaChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.AlphaChange)
}
AlphaChange::AlphaChange(const AlphaChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.AlphaChange)
}

void AlphaChange::SharedCtor() {
  alpha_ = 0;
}

AlphaChange::~AlphaChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.AlphaChange)
  SharedDtor();
}

void AlphaChange::SharedDtor() {
}

void AlphaChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlphaChange& AlphaChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlphaChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void AlphaChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.AlphaChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlphaChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlphaChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.AlphaChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float alpha = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_alpha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.AlphaChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.AlphaChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlphaChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.AlphaChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.AlphaChange)
}

size_t AlphaChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.AlphaChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required float alpha = 1;
  if (has_alpha()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlphaChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AlphaChange*>(
      &from));
}

void AlphaChange::MergeFrom(const AlphaChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.AlphaChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alpha()) {
    set_alpha(from.alpha());
  }
}

void AlphaChange::CopyFrom(const AlphaChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.AlphaChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AlphaChange::InternalSwap(AlphaChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alpha_, other->alpha_);
}

std::string AlphaChange::GetTypeName() const {
  return "android.surfaceflinger.AlphaChange";
}


// ===================================================================

void CornerRadiusChange::InitAsDefaultInstance() {
}
class CornerRadiusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CornerRadiusChange>()._has_bits_);
  static void set_has_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CornerRadiusChange::CornerRadiusChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.CornerRadiusChange)
}
CornerRadiusChange::CornerRadiusChange(const CornerRadiusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  corner_radius_ = from.corner_radius_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.CornerRadiusChange)
}

void CornerRadiusChange::SharedCtor() {
  corner_radius_ = 0;
}

CornerRadiusChange::~CornerRadiusChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.CornerRadiusChange)
  SharedDtor();
}

void CornerRadiusChange::SharedDtor() {
}

void CornerRadiusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CornerRadiusChange& CornerRadiusChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CornerRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void CornerRadiusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.CornerRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  corner_radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CornerRadiusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float corner_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_corner_radius(&has_bits);
          corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CornerRadiusChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.CornerRadiusChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float corner_radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_corner_radius(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.CornerRadiusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.CornerRadiusChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CornerRadiusChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.CornerRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float corner_radius = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->corner_radius(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.CornerRadiusChange)
}

size_t CornerRadiusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.CornerRadiusChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required float corner_radius = 1;
  if (has_corner_radius()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CornerRadiusChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CornerRadiusChange*>(
      &from));
}

void CornerRadiusChange::MergeFrom(const CornerRadiusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.CornerRadiusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_corner_radius()) {
    set_corner_radius(from.corner_radius());
  }
}

void CornerRadiusChange::CopyFrom(const CornerRadiusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.CornerRadiusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CornerRadiusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CornerRadiusChange::InternalSwap(CornerRadiusChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(corner_radius_, other->corner_radius_);
}

std::string CornerRadiusChange::GetTypeName() const {
  return "android.surfaceflinger.CornerRadiusChange";
}


// ===================================================================

void BackgroundBlurRadiusChange::InitAsDefaultInstance() {
}
class BackgroundBlurRadiusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundBlurRadiusChange>()._has_bits_);
  static void set_has_background_blur_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackgroundBlurRadiusChange::BackgroundBlurRadiusChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BackgroundBlurRadiusChange)
}
BackgroundBlurRadiusChange::BackgroundBlurRadiusChange(const BackgroundBlurRadiusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  background_blur_radius_ = from.background_blur_radius_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BackgroundBlurRadiusChange)
}

void BackgroundBlurRadiusChange::SharedCtor() {
  background_blur_radius_ = 0;
}

BackgroundBlurRadiusChange::~BackgroundBlurRadiusChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BackgroundBlurRadiusChange)
  SharedDtor();
}

void BackgroundBlurRadiusChange::SharedDtor() {
}

void BackgroundBlurRadiusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundBlurRadiusChange& BackgroundBlurRadiusChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundBlurRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void BackgroundBlurRadiusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  background_blur_radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BackgroundBlurRadiusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float background_blur_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_background_blur_radius(&has_bits);
          background_blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BackgroundBlurRadiusChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float background_blur_radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_background_blur_radius(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &background_blur_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BackgroundBlurRadiusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BackgroundBlurRadiusChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BackgroundBlurRadiusChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float background_blur_radius = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->background_blur_radius(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BackgroundBlurRadiusChange)
}

size_t BackgroundBlurRadiusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required float background_blur_radius = 1;
  if (has_background_blur_radius()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundBlurRadiusChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundBlurRadiusChange*>(
      &from));
}

void BackgroundBlurRadiusChange::MergeFrom(const BackgroundBlurRadiusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_background_blur_radius()) {
    set_background_blur_radius(from.background_blur_radius());
  }
}

void BackgroundBlurRadiusChange::CopyFrom(const BackgroundBlurRadiusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BackgroundBlurRadiusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundBlurRadiusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BackgroundBlurRadiusChange::InternalSwap(BackgroundBlurRadiusChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(background_blur_radius_, other->background_blur_radius_);
}

std::string BackgroundBlurRadiusChange::GetTypeName() const {
  return "android.surfaceflinger.BackgroundBlurRadiusChange";
}


// ===================================================================

void LayerChange::InitAsDefaultInstance() {
}
class LayerChange::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerChange>()._has_bits_);
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LayerChange::LayerChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayerChange)
}
LayerChange::LayerChange(const LayerChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_ = from.layer_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayerChange)
}

void LayerChange::SharedCtor() {
  layer_ = 0u;
}

LayerChange::~LayerChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayerChange)
  SharedDtor();
}

void LayerChange::SharedDtor() {
}

void LayerChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerChange& LayerChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void LayerChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayerChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayerChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer(&has_bits);
          layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayerChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayerChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 layer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_layer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayerChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayerChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayerChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayerChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayerChange)
}

size_t LayerChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayerChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 layer = 1;
  if (has_layer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layer());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayerChange*>(
      &from));
}

void LayerChange::MergeFrom(const LayerChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayerChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_layer()) {
    set_layer(from.layer());
  }
}

void LayerChange::CopyFrom(const LayerChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayerChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LayerChange::InternalSwap(LayerChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer_, other->layer_);
}

std::string LayerChange::GetTypeName() const {
  return "android.surfaceflinger.LayerChange";
}


// ===================================================================

void CropChange::InitAsDefaultInstance() {
  ::android::surfaceflinger::_CropChange_default_instance_._instance.get_mutable()->rectangle_ = const_cast< ::android::surfaceflinger::Rectangle*>(
      ::android::surfaceflinger::Rectangle::internal_default_instance());
}
class CropChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CropChange>()._has_bits_);
  static const ::android::surfaceflinger::Rectangle& rectangle(const CropChange* msg);
  static void set_has_rectangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::surfaceflinger::Rectangle&
CropChange::_Internal::rectangle(const CropChange* msg) {
  return *msg->rectangle_;
}
CropChange::CropChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.CropChange)
}
CropChange::CropChange(const CropChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rectangle()) {
    rectangle_ = new ::android::surfaceflinger::Rectangle(*from.rectangle_);
  } else {
    rectangle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.CropChange)
}

void CropChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  rectangle_ = nullptr;
}

CropChange::~CropChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.CropChange)
  SharedDtor();
}

void CropChange::SharedDtor() {
  if (this != internal_default_instance()) delete rectangle_;
}

void CropChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CropChange& CropChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CropChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void CropChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.CropChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rectangle_ != nullptr);
    rectangle_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CropChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .android.surfaceflinger.Rectangle rectangle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rectangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CropChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.CropChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .android.surfaceflinger.Rectangle rectangle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.CropChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.CropChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CropChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.CropChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .android.surfaceflinger.Rectangle rectangle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::rectangle(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.CropChange)
}

size_t CropChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.CropChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .android.surfaceflinger.Rectangle rectangle = 1;
  if (has_rectangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rectangle_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CropChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CropChange*>(
      &from));
}

void CropChange::MergeFrom(const CropChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.CropChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rectangle()) {
    mutable_rectangle()->::android::surfaceflinger::Rectangle::MergeFrom(from.rectangle());
  }
}

void CropChange::CopyFrom(const CropChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.CropChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_rectangle()) {
    if (!this->rectangle_->IsInitialized()) return false;
  }
  return true;
}

void CropChange::InternalSwap(CropChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rectangle_, other->rectangle_);
}

std::string CropChange::GetTypeName() const {
  return "android.surfaceflinger.CropChange";
}


// ===================================================================

void MatrixChange::InitAsDefaultInstance() {
}
class MatrixChange::_Internal {
 public:
  using HasBits = decltype(std::declval<MatrixChange>()._has_bits_);
  static void set_has_dsdx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dtdx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dsdy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dtdy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MatrixChange::MatrixChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.MatrixChange)
}
MatrixChange::MatrixChange(const MatrixChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dsdx_, &from.dsdx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtdy_) -
    reinterpret_cast<char*>(&dsdx_)) + sizeof(dtdy_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.MatrixChange)
}

void MatrixChange::SharedCtor() {
  ::memset(&dsdx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtdy_) -
      reinterpret_cast<char*>(&dsdx_)) + sizeof(dtdy_));
}

MatrixChange::~MatrixChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.MatrixChange)
  SharedDtor();
}

void MatrixChange::SharedDtor() {
}

void MatrixChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatrixChange& MatrixChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatrixChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void MatrixChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.MatrixChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dsdx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dtdy_) -
        reinterpret_cast<char*>(&dsdx_)) + sizeof(dtdy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MatrixChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float dsdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dsdx(&has_bits);
          dsdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dtdx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dtdx(&has_bits);
          dtdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dsdy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_dsdy(&has_bits);
          dsdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dtdy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_dtdy(&has_bits);
          dtdy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MatrixChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.MatrixChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float dsdx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_dsdx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dsdx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dtdx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_dtdx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dtdx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dsdy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_dsdy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dsdy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dtdy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_dtdy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dtdy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.MatrixChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.MatrixChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MatrixChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.MatrixChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float dsdx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->dsdx(), output);
  }

  // required float dtdx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->dtdx(), output);
  }

  // required float dsdy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dsdy(), output);
  }

  // required float dtdy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->dtdy(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.MatrixChange)
}

size_t MatrixChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.MatrixChange)
  size_t total_size = 0;

  if (has_dsdx()) {
    // required float dsdx = 1;
    total_size += 1 + 4;
  }

  if (has_dtdx()) {
    // required float dtdx = 2;
    total_size += 1 + 4;
  }

  if (has_dsdy()) {
    // required float dsdy = 3;
    total_size += 1 + 4;
  }

  if (has_dtdy()) {
    // required float dtdy = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MatrixChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.MatrixChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float dsdx = 1;
    total_size += 1 + 4;

    // required float dtdx = 2;
    total_size += 1 + 4;

    // required float dsdy = 3;
    total_size += 1 + 4;

    // required float dtdy = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatrixChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MatrixChange*>(
      &from));
}

void MatrixChange::MergeFrom(const MatrixChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.MatrixChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dsdx_ = from.dsdx_;
    }
    if (cached_has_bits & 0x00000002u) {
      dtdx_ = from.dtdx_;
    }
    if (cached_has_bits & 0x00000004u) {
      dsdy_ = from.dsdy_;
    }
    if (cached_has_bits & 0x00000008u) {
      dtdy_ = from.dtdy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MatrixChange::CopyFrom(const MatrixChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.MatrixChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MatrixChange::InternalSwap(MatrixChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dsdx_, other->dsdx_);
  swap(dtdx_, other->dtdx_);
  swap(dsdy_, other->dsdy_);
  swap(dtdy_, other->dtdy_);
}

std::string MatrixChange::GetTypeName() const {
  return "android.surfaceflinger.MatrixChange";
}


// ===================================================================

void TransparentRegionHintChange::InitAsDefaultInstance() {
}
class TransparentRegionHintChange::_Internal {
 public:
  using HasBits = decltype(std::declval<TransparentRegionHintChange>()._has_bits_);
};

TransparentRegionHintChange::TransparentRegionHintChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.TransparentRegionHintChange)
}
TransparentRegionHintChange::TransparentRegionHintChange(const TransparentRegionHintChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      region_(from.region_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.TransparentRegionHintChange)
}

void TransparentRegionHintChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
}

TransparentRegionHintChange::~TransparentRegionHintChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.TransparentRegionHintChange)
  SharedDtor();
}

void TransparentRegionHintChange::SharedDtor() {
}

void TransparentRegionHintChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransparentRegionHintChange& TransparentRegionHintChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransparentRegionHintChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void TransparentRegionHintChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.TransparentRegionHintChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransparentRegionHintChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.Rectangle region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransparentRegionHintChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.TransparentRegionHintChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.Rectangle region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.TransparentRegionHintChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.TransparentRegionHintChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransparentRegionHintChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.TransparentRegionHintChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.Rectangle region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->region(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.TransparentRegionHintChange)
}

size_t TransparentRegionHintChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.TransparentRegionHintChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.Rectangle region = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->region(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransparentRegionHintChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransparentRegionHintChange*>(
      &from));
}

void TransparentRegionHintChange::MergeFrom(const TransparentRegionHintChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.TransparentRegionHintChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
}

void TransparentRegionHintChange::CopyFrom(const TransparentRegionHintChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.TransparentRegionHintChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransparentRegionHintChange::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->region())) return false;
  return true;
}

void TransparentRegionHintChange::InternalSwap(TransparentRegionHintChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&region_)->InternalSwap(CastToBase(&other->region_));
}

std::string TransparentRegionHintChange::GetTypeName() const {
  return "android.surfaceflinger.TransparentRegionHintChange";
}


// ===================================================================

void LayerStackChange::InitAsDefaultInstance() {
}
class LayerStackChange::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerStackChange>()._has_bits_);
  static void set_has_layer_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LayerStackChange::LayerStackChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayerStackChange)
}
LayerStackChange::LayerStackChange(const LayerStackChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_stack_ = from.layer_stack_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayerStackChange)
}

void LayerStackChange::SharedCtor() {
  layer_stack_ = 0u;
}

LayerStackChange::~LayerStackChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayerStackChange)
  SharedDtor();
}

void LayerStackChange::SharedDtor() {
}

void LayerStackChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerStackChange& LayerStackChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerStackChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void LayerStackChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayerStackChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_stack_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayerStackChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 layer_stack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer_stack(&has_bits);
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayerStackChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayerStackChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 layer_stack = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_layer_stack(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayerStackChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayerStackChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayerStackChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayerStackChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 layer_stack = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->layer_stack(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayerStackChange)
}

size_t LayerStackChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayerStackChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 layer_stack = 1;
  if (has_layer_stack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layer_stack());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerStackChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayerStackChange*>(
      &from));
}

void LayerStackChange::MergeFrom(const LayerStackChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayerStackChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_layer_stack()) {
    set_layer_stack(from.layer_stack());
  }
}

void LayerStackChange::CopyFrom(const LayerStackChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayerStackChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerStackChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LayerStackChange::InternalSwap(LayerStackChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer_stack_, other->layer_stack_);
}

std::string LayerStackChange::GetTypeName() const {
  return "android.surfaceflinger.LayerStackChange";
}


// ===================================================================

void DisplayFlagsChange::InitAsDefaultInstance() {
}
class DisplayFlagsChange::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayFlagsChange>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisplayFlagsChange::DisplayFlagsChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DisplayFlagsChange)
}
DisplayFlagsChange::DisplayFlagsChange(const DisplayFlagsChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DisplayFlagsChange)
}

void DisplayFlagsChange::SharedCtor() {
  flags_ = 0u;
}

DisplayFlagsChange::~DisplayFlagsChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DisplayFlagsChange)
  SharedDtor();
}

void DisplayFlagsChange::SharedDtor() {
}

void DisplayFlagsChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayFlagsChange& DisplayFlagsChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayFlagsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void DisplayFlagsChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DisplayFlagsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayFlagsChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayFlagsChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DisplayFlagsChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DisplayFlagsChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DisplayFlagsChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayFlagsChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DisplayFlagsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 flags = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DisplayFlagsChange)
}

size_t DisplayFlagsChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DisplayFlagsChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 flags = 1;
  if (has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->flags());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayFlagsChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayFlagsChange*>(
      &from));
}

void DisplayFlagsChange::MergeFrom(const DisplayFlagsChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DisplayFlagsChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flags()) {
    set_flags(from.flags());
  }
}

void DisplayFlagsChange::CopyFrom(const DisplayFlagsChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DisplayFlagsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayFlagsChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DisplayFlagsChange::InternalSwap(DisplayFlagsChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flags_, other->flags_);
}

std::string DisplayFlagsChange::GetTypeName() const {
  return "android.surfaceflinger.DisplayFlagsChange";
}


// ===================================================================

void HiddenFlagChange::InitAsDefaultInstance() {
}
class HiddenFlagChange::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenFlagChange>()._has_bits_);
  static void set_has_hidden_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HiddenFlagChange::HiddenFlagChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.HiddenFlagChange)
}
HiddenFlagChange::HiddenFlagChange(const HiddenFlagChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hidden_flag_ = from.hidden_flag_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.HiddenFlagChange)
}

void HiddenFlagChange::SharedCtor() {
  hidden_flag_ = false;
}

HiddenFlagChange::~HiddenFlagChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.HiddenFlagChange)
  SharedDtor();
}

void HiddenFlagChange::SharedDtor() {
}

void HiddenFlagChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HiddenFlagChange& HiddenFlagChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HiddenFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void HiddenFlagChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.HiddenFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hidden_flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HiddenFlagChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool hidden_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hidden_flag(&has_bits);
          hidden_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HiddenFlagChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.HiddenFlagChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hidden_flag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_hidden_flag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.HiddenFlagChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.HiddenFlagChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HiddenFlagChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.HiddenFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool hidden_flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->hidden_flag(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.HiddenFlagChange)
}

size_t HiddenFlagChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.HiddenFlagChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool hidden_flag = 1;
  if (has_hidden_flag()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HiddenFlagChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HiddenFlagChange*>(
      &from));
}

void HiddenFlagChange::MergeFrom(const HiddenFlagChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.HiddenFlagChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hidden_flag()) {
    set_hidden_flag(from.hidden_flag());
  }
}

void HiddenFlagChange::CopyFrom(const HiddenFlagChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.HiddenFlagChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenFlagChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HiddenFlagChange::InternalSwap(HiddenFlagChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hidden_flag_, other->hidden_flag_);
}

std::string HiddenFlagChange::GetTypeName() const {
  return "android.surfaceflinger.HiddenFlagChange";
}


// ===================================================================

void OpaqueFlagChange::InitAsDefaultInstance() {
}
class OpaqueFlagChange::_Internal {
 public:
  using HasBits = decltype(std::declval<OpaqueFlagChange>()._has_bits_);
  static void set_has_opaque_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OpaqueFlagChange::OpaqueFlagChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.OpaqueFlagChange)
}
OpaqueFlagChange::OpaqueFlagChange(const OpaqueFlagChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opaque_flag_ = from.opaque_flag_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.OpaqueFlagChange)
}

void OpaqueFlagChange::SharedCtor() {
  opaque_flag_ = false;
}

OpaqueFlagChange::~OpaqueFlagChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.OpaqueFlagChange)
  SharedDtor();
}

void OpaqueFlagChange::SharedDtor() {
}

void OpaqueFlagChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpaqueFlagChange& OpaqueFlagChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpaqueFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void OpaqueFlagChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.OpaqueFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaque_flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpaqueFlagChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool opaque_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_opaque_flag(&has_bits);
          opaque_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpaqueFlagChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.OpaqueFlagChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool opaque_flag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_opaque_flag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opaque_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.OpaqueFlagChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.OpaqueFlagChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpaqueFlagChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.OpaqueFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool opaque_flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->opaque_flag(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.OpaqueFlagChange)
}

size_t OpaqueFlagChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.OpaqueFlagChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool opaque_flag = 1;
  if (has_opaque_flag()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueFlagChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OpaqueFlagChange*>(
      &from));
}

void OpaqueFlagChange::MergeFrom(const OpaqueFlagChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.OpaqueFlagChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_opaque_flag()) {
    set_opaque_flag(from.opaque_flag());
  }
}

void OpaqueFlagChange::CopyFrom(const OpaqueFlagChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.OpaqueFlagChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueFlagChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OpaqueFlagChange::InternalSwap(OpaqueFlagChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opaque_flag_, other->opaque_flag_);
}

std::string OpaqueFlagChange::GetTypeName() const {
  return "android.surfaceflinger.OpaqueFlagChange";
}


// ===================================================================

void SecureFlagChange::InitAsDefaultInstance() {
}
class SecureFlagChange::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureFlagChange>()._has_bits_);
  static void set_has_secure_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SecureFlagChange::SecureFlagChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SecureFlagChange)
}
SecureFlagChange::SecureFlagChange(const SecureFlagChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secure_flag_ = from.secure_flag_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SecureFlagChange)
}

void SecureFlagChange::SharedCtor() {
  secure_flag_ = false;
}

SecureFlagChange::~SecureFlagChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SecureFlagChange)
  SharedDtor();
}

void SecureFlagChange::SharedDtor() {
}

void SecureFlagChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureFlagChange& SecureFlagChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureFlagChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SecureFlagChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SecureFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secure_flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureFlagChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool secure_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secure_flag(&has_bits);
          secure_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureFlagChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SecureFlagChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool secure_flag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_secure_flag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SecureFlagChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SecureFlagChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureFlagChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SecureFlagChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool secure_flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->secure_flag(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SecureFlagChange)
}

size_t SecureFlagChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SecureFlagChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bool secure_flag = 1;
  if (has_secure_flag()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureFlagChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureFlagChange*>(
      &from));
}

void SecureFlagChange::MergeFrom(const SecureFlagChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SecureFlagChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_secure_flag()) {
    set_secure_flag(from.secure_flag());
  }
}

void SecureFlagChange::CopyFrom(const SecureFlagChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SecureFlagChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureFlagChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SecureFlagChange::InternalSwap(SecureFlagChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(secure_flag_, other->secure_flag_);
}

std::string SecureFlagChange::GetTypeName() const {
  return "android.surfaceflinger.SecureFlagChange";
}


// ===================================================================

void DisplayChange::InitAsDefaultInstance() {
}
class DisplayChange::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayChange>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::DispSurfaceChange& surface(const DisplayChange* msg);
  static const ::android::surfaceflinger::LayerStackChange& layer_stack(const DisplayChange* msg);
  static const ::android::surfaceflinger::SizeChange& size(const DisplayChange* msg);
  static const ::android::surfaceflinger::ProjectionChange& projection(const DisplayChange* msg);
  static const ::android::surfaceflinger::DisplayFlagsChange& flags(const DisplayChange* msg);
};

const ::android::surfaceflinger::DispSurfaceChange&
DisplayChange::_Internal::surface(const DisplayChange* msg) {
  return *msg->DisplayChange_.surface_;
}
const ::android::surfaceflinger::LayerStackChange&
DisplayChange::_Internal::layer_stack(const DisplayChange* msg) {
  return *msg->DisplayChange_.layer_stack_;
}
const ::android::surfaceflinger::SizeChange&
DisplayChange::_Internal::size(const DisplayChange* msg) {
  return *msg->DisplayChange_.size_;
}
const ::android::surfaceflinger::ProjectionChange&
DisplayChange::_Internal::projection(const DisplayChange* msg) {
  return *msg->DisplayChange_.projection_;
}
const ::android::surfaceflinger::DisplayFlagsChange&
DisplayChange::_Internal::flags(const DisplayChange* msg) {
  return *msg->DisplayChange_.flags_;
}
void DisplayChange::set_allocated_surface(::android::surfaceflinger::DispSurfaceChange* surface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DisplayChange();
  if (surface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    set_has_surface();
    DisplayChange_.surface_ = surface;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayChange.surface)
}
void DisplayChange::set_allocated_layer_stack(::android::surfaceflinger::LayerStackChange* layer_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DisplayChange();
  if (layer_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_stack, submessage_arena);
    }
    set_has_layer_stack();
    DisplayChange_.layer_stack_ = layer_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayChange.layer_stack)
}
void DisplayChange::set_allocated_size(::android::surfaceflinger::SizeChange* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DisplayChange();
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    set_has_size();
    DisplayChange_.size_ = size;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayChange.size)
}
void DisplayChange::set_allocated_projection(::android::surfaceflinger::ProjectionChange* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DisplayChange();
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    set_has_projection();
    DisplayChange_.projection_ = projection;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayChange.projection)
}
void DisplayChange::set_allocated_flags(::android::surfaceflinger::DisplayFlagsChange* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_DisplayChange();
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    set_has_flags();
    DisplayChange_.flags_ = flags;
  }
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayChange.flags)
}
DisplayChange::DisplayChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DisplayChange)
}
DisplayChange::DisplayChange(const DisplayChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_DisplayChange();
  switch (from.DisplayChange_case()) {
    case kSurface: {
      mutable_surface()->::android::surfaceflinger::DispSurfaceChange::MergeFrom(from.surface());
      break;
    }
    case kLayerStack: {
      mutable_layer_stack()->::android::surfaceflinger::LayerStackChange::MergeFrom(from.layer_stack());
      break;
    }
    case kSize: {
      mutable_size()->::android::surfaceflinger::SizeChange::MergeFrom(from.size());
      break;
    }
    case kProjection: {
      mutable_projection()->::android::surfaceflinger::ProjectionChange::MergeFrom(from.projection());
      break;
    }
    case kFlags: {
      mutable_flags()->::android::surfaceflinger::DisplayFlagsChange::MergeFrom(from.flags());
      break;
    }
    case DISPLAYCHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DisplayChange)
}

void DisplayChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  id_ = 0;
  clear_has_DisplayChange();
}

DisplayChange::~DisplayChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DisplayChange)
  SharedDtor();
}

void DisplayChange::SharedDtor() {
  if (has_DisplayChange()) {
    clear_DisplayChange();
  }
}

void DisplayChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayChange& DisplayChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void DisplayChange::clear_DisplayChange() {
// @@protoc_insertion_point(one_of_clear_start:android.surfaceflinger.DisplayChange)
  switch (DisplayChange_case()) {
    case kSurface: {
      delete DisplayChange_.surface_;
      break;
    }
    case kLayerStack: {
      delete DisplayChange_.layer_stack_;
      break;
    }
    case kSize: {
      delete DisplayChange_.size_;
      break;
    }
    case kProjection: {
      delete DisplayChange_.projection_;
      break;
    }
    case kFlags: {
      delete DisplayChange_.flags_;
      break;
    }
    case DISPLAYCHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISPLAYCHANGE_NOT_SET;
}


void DisplayChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DisplayChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  clear_DisplayChange();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.DispSurfaceChange surface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_surface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.LayerStackChange layer_stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_layer_stack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SizeChange size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.ProjectionChange projection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_projection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.DisplayFlagsChange flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DisplayChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.DispSurfaceChange surface = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_surface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.LayerStackChange layer_stack = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_layer_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SizeChange size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.ProjectionChange projection = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.DisplayFlagsChange flags = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DisplayChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DisplayChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DisplayChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  switch (DisplayChange_case()) {
    case kSurface:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::surface(this), output);
      break;
    case kLayerStack:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::layer_stack(this), output);
      break;
    case kSize:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::size(this), output);
      break;
    case kProjection:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::projection(this), output);
      break;
    case kFlags:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::flags(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DisplayChange)
}

size_t DisplayChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DisplayChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (DisplayChange_case()) {
    // optional .android.surfaceflinger.DispSurfaceChange surface = 2;
    case kSurface: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DisplayChange_.surface_);
      break;
    }
    // optional .android.surfaceflinger.LayerStackChange layer_stack = 3;
    case kLayerStack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DisplayChange_.layer_stack_);
      break;
    }
    // optional .android.surfaceflinger.SizeChange size = 4;
    case kSize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DisplayChange_.size_);
      break;
    }
    // optional .android.surfaceflinger.ProjectionChange projection = 5;
    case kProjection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DisplayChange_.projection_);
      break;
    }
    // optional .android.surfaceflinger.DisplayFlagsChange flags = 6;
    case kFlags: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DisplayChange_.flags_);
      break;
    }
    case DISPLAYCHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayChange*>(
      &from));
}

void DisplayChange::MergeFrom(const DisplayChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DisplayChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
  switch (from.DisplayChange_case()) {
    case kSurface: {
      mutable_surface()->::android::surfaceflinger::DispSurfaceChange::MergeFrom(from.surface());
      break;
    }
    case kLayerStack: {
      mutable_layer_stack()->::android::surfaceflinger::LayerStackChange::MergeFrom(from.layer_stack());
      break;
    }
    case kSize: {
      mutable_size()->::android::surfaceflinger::SizeChange::MergeFrom(from.size());
      break;
    }
    case kProjection: {
      mutable_projection()->::android::surfaceflinger::ProjectionChange::MergeFrom(from.projection());
      break;
    }
    case kFlags: {
      mutable_flags()->::android::surfaceflinger::DisplayFlagsChange::MergeFrom(from.flags());
      break;
    }
    case DISPLAYCHANGE_NOT_SET: {
      break;
    }
  }
}

void DisplayChange::CopyFrom(const DisplayChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DisplayChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (DisplayChange_case()) {
    case kSurface: {
      if (has_surface()) {
        if (!this->surface().IsInitialized()) return false;
      }
      break;
    }
    case kLayerStack: {
      if (has_layer_stack()) {
        if (!this->layer_stack().IsInitialized()) return false;
      }
      break;
    }
    case kSize: {
      if (has_size()) {
        if (!this->size().IsInitialized()) return false;
      }
      break;
    }
    case kProjection: {
      if (has_projection()) {
        if (!this->projection().IsInitialized()) return false;
      }
      break;
    }
    case kFlags: {
      if (has_flags()) {
        if (!this->flags().IsInitialized()) return false;
      }
      break;
    }
    case DISPLAYCHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void DisplayChange::InternalSwap(DisplayChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(DisplayChange_, other->DisplayChange_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DisplayChange::GetTypeName() const {
  return "android.surfaceflinger.DisplayChange";
}


// ===================================================================

void DispSurfaceChange::InitAsDefaultInstance() {
}
class DispSurfaceChange::_Internal {
 public:
  using HasBits = decltype(std::declval<DispSurfaceChange>()._has_bits_);
  static void set_has_buffer_queue_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buffer_queue_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DispSurfaceChange::DispSurfaceChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DispSurfaceChange)
}
DispSurfaceChange::DispSurfaceChange(const DispSurfaceChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer_queue_name()) {
    buffer_queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_queue_name_);
  }
  buffer_queue_id_ = from.buffer_queue_id_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DispSurfaceChange)
}

void DispSurfaceChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  buffer_queue_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_queue_id_ = PROTOBUF_ULONGLONG(0);
}

DispSurfaceChange::~DispSurfaceChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DispSurfaceChange)
  SharedDtor();
}

void DispSurfaceChange::SharedDtor() {
  buffer_queue_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DispSurfaceChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DispSurfaceChange& DispSurfaceChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DispSurfaceChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void DispSurfaceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DispSurfaceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_queue_name_.ClearNonDefaultToEmptyNoArena();
  }
  buffer_queue_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DispSurfaceChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 buffer_queue_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buffer_queue_id(&has_bits);
          buffer_queue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string buffer_queue_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer_queue_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DispSurfaceChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DispSurfaceChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 buffer_queue_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_buffer_queue_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_queue_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string buffer_queue_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer_queue_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DispSurfaceChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DispSurfaceChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DispSurfaceChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DispSurfaceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 buffer_queue_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->buffer_queue_id(), output);
  }

  // required string buffer_queue_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buffer_queue_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DispSurfaceChange)
}

size_t DispSurfaceChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.DispSurfaceChange)
  size_t total_size = 0;

  if (has_buffer_queue_name()) {
    // required string buffer_queue_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->buffer_queue_name());
  }

  if (has_buffer_queue_id()) {
    // required uint64 buffer_queue_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_queue_id());
  }

  return total_size;
}
size_t DispSurfaceChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DispSurfaceChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string buffer_queue_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->buffer_queue_name());

    // required uint64 buffer_queue_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_queue_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DispSurfaceChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DispSurfaceChange*>(
      &from));
}

void DispSurfaceChange::MergeFrom(const DispSurfaceChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DispSurfaceChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_queue_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_queue_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_queue_id_ = from.buffer_queue_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DispSurfaceChange::CopyFrom(const DispSurfaceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DispSurfaceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispSurfaceChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DispSurfaceChange::InternalSwap(DispSurfaceChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_queue_name_.Swap(&other->buffer_queue_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buffer_queue_id_, other->buffer_queue_id_);
}

std::string DispSurfaceChange::GetTypeName() const {
  return "android.surfaceflinger.DispSurfaceChange";
}


// ===================================================================

void ProjectionChange::InitAsDefaultInstance() {
  ::android::surfaceflinger::_ProjectionChange_default_instance_._instance.get_mutable()->viewport_ = const_cast< ::android::surfaceflinger::Rectangle*>(
      ::android::surfaceflinger::Rectangle::internal_default_instance());
  ::android::surfaceflinger::_ProjectionChange_default_instance_._instance.get_mutable()->frame_ = const_cast< ::android::surfaceflinger::Rectangle*>(
      ::android::surfaceflinger::Rectangle::internal_default_instance());
}
class ProjectionChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionChange>()._has_bits_);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::surfaceflinger::Rectangle& viewport(const ProjectionChange* msg);
  static void set_has_viewport(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::Rectangle& frame(const ProjectionChange* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::surfaceflinger::Rectangle&
ProjectionChange::_Internal::viewport(const ProjectionChange* msg) {
  return *msg->viewport_;
}
const ::android::surfaceflinger::Rectangle&
ProjectionChange::_Internal::frame(const ProjectionChange* msg) {
  return *msg->frame_;
}
ProjectionChange::ProjectionChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ProjectionChange)
}
ProjectionChange::ProjectionChange(const ProjectionChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_viewport()) {
    viewport_ = new ::android::surfaceflinger::Rectangle(*from.viewport_);
  } else {
    viewport_ = nullptr;
  }
  if (from.has_frame()) {
    frame_ = new ::android::surfaceflinger::Rectangle(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  orientation_ = from.orientation_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ProjectionChange)
}

void ProjectionChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  ::memset(&viewport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&viewport_)) + sizeof(orientation_));
}

ProjectionChange::~ProjectionChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ProjectionChange)
  SharedDtor();
}

void ProjectionChange::SharedDtor() {
  if (this != internal_default_instance()) delete viewport_;
  if (this != internal_default_instance()) delete frame_;
}

void ProjectionChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectionChange& ProjectionChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void ProjectionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ProjectionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(viewport_ != nullptr);
      viewport_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
  }
  orientation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectionChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .android.surfaceflinger.Rectangle viewport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_viewport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .android.surfaceflinger.Rectangle frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectionChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ProjectionChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orientation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_orientation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .android.surfaceflinger.Rectangle viewport = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_viewport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .android.surfaceflinger.Rectangle frame = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ProjectionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ProjectionChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectionChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ProjectionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 orientation = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->orientation(), output);
  }

  // required .android.surfaceflinger.Rectangle viewport = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::viewport(this), output);
  }

  // required .android.surfaceflinger.Rectangle frame = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::frame(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ProjectionChange)
}

size_t ProjectionChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.ProjectionChange)
  size_t total_size = 0;

  if (has_viewport()) {
    // required .android.surfaceflinger.Rectangle viewport = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *viewport_);
  }

  if (has_frame()) {
    // required .android.surfaceflinger.Rectangle frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  if (has_orientation()) {
    // required int32 orientation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->orientation());
  }

  return total_size;
}
size_t ProjectionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ProjectionChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .android.surfaceflinger.Rectangle viewport = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *viewport_);

    // required .android.surfaceflinger.Rectangle frame = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);

    // required int32 orientation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->orientation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectionChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProjectionChange*>(
      &from));
}

void ProjectionChange::MergeFrom(const ProjectionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ProjectionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_viewport()->::android::surfaceflinger::Rectangle::MergeFrom(from.viewport());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_frame()->::android::surfaceflinger::Rectangle::MergeFrom(from.frame());
    }
    if (cached_has_bits & 0x00000004u) {
      orientation_ = from.orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionChange::CopyFrom(const ProjectionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ProjectionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_viewport()) {
    if (!this->viewport_->IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame_->IsInitialized()) return false;
  }
  return true;
}

void ProjectionChange::InternalSwap(ProjectionChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(viewport_, other->viewport_);
  swap(frame_, other->frame_);
  swap(orientation_, other->orientation_);
}

std::string ProjectionChange::GetTypeName() const {
  return "android.surfaceflinger.ProjectionChange";
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
}
class Rectangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Rectangle>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Rectangle::Rectangle()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rectangle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.Rectangle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 left = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_left(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 top = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_top(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 right = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_right(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bottom = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bottom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.Rectangle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rectangle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // required int32 top = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // required int32 right = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // required int32 bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.Rectangle)
}

size_t Rectangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.Rectangle)
  size_t total_size = 0;

  if (has_left()) {
    // required int32 left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left());
  }

  if (has_top()) {
    // required int32 top = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top());
  }

  if (has_right()) {
    // required int32 right = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right());
  }

  if (has_bottom()) {
    // required int32 bottom = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  return total_size;
}
size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.Rectangle)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left());

    // required int32 top = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top());

    // required int32 right = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right());

    // required int32 bottom = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bottom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Rectangle*>(
      &from));
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
}

std::string Rectangle::GetTypeName() const {
  return "android.surfaceflinger.Rectangle";
}


// ===================================================================

void SurfaceCreation::InitAsDefaultInstance() {
}
class SurfaceCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceCreation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SurfaceCreation::SurfaceCreation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceCreation)
}
SurfaceCreation::SurfaceCreation(const SurfaceCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&id_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceCreation)
}

void SurfaceCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&id_)) + sizeof(h_));
}

SurfaceCreation::~SurfaceCreation() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceCreation)
  SharedDtor();
}

void SurfaceCreation::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SurfaceCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceCreation& SurfaceCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SurfaceCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&id_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceCreation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceCreation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 w = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 h = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceCreation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceCreation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceCreation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 w = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->w(), output);
  }

  // required uint32 h = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->h(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceCreation)
}

size_t SurfaceCreation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.SurfaceCreation)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_w()) {
    // required uint32 w = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());
  }

  if (has_h()) {
    // required uint32 h = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());
  }

  return total_size;
}
size_t SurfaceCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceCreation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());

    // required uint32 w = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());

    // required uint32 h = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceCreation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceCreation*>(
      &from));
}

void SurfaceCreation::MergeFrom(const SurfaceCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurfaceCreation::CopyFrom(const SurfaceCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SurfaceCreation::InternalSwap(SurfaceCreation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string SurfaceCreation::GetTypeName() const {
  return "android.surfaceflinger.SurfaceCreation";
}


// ===================================================================

void SurfaceDeletion::InitAsDefaultInstance() {
}
class SurfaceDeletion::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceDeletion>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SurfaceDeletion::SurfaceDeletion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceDeletion)
}
SurfaceDeletion::SurfaceDeletion(const SurfaceDeletion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceDeletion)
}

void SurfaceDeletion::SharedCtor() {
  id_ = 0;
}

SurfaceDeletion::~SurfaceDeletion() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceDeletion)
  SharedDtor();
}

void SurfaceDeletion::SharedDtor() {
}

void SurfaceDeletion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceDeletion& SurfaceDeletion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void SurfaceDeletion::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceDeletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceDeletion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceDeletion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceDeletion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceDeletion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceDeletion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceDeletion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceDeletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceDeletion)
}

size_t SurfaceDeletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceDeletion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceDeletion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceDeletion*>(
      &from));
}

void SurfaceDeletion::MergeFrom(const SurfaceDeletion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceDeletion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void SurfaceDeletion::CopyFrom(const SurfaceDeletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceDeletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceDeletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SurfaceDeletion::InternalSwap(SurfaceDeletion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

std::string SurfaceDeletion::GetTypeName() const {
  return "android.surfaceflinger.SurfaceDeletion";
}


// ===================================================================

void BufferUpdate::InitAsDefaultInstance() {
}
class BufferUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<BufferUpdate>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BufferUpdate::BufferUpdate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BufferUpdate)
}
BufferUpdate::BufferUpdate(const BufferUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&id_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BufferUpdate)
}

void BufferUpdate::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&id_)) + sizeof(h_));
}

BufferUpdate::~BufferUpdate() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BufferUpdate)
  SharedDtor();
}

void BufferUpdate::SharedDtor() {
}

void BufferUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BufferUpdate& BufferUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BufferUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void BufferUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BufferUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&id_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BufferUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 w = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 h = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 frame_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BufferUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BufferUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 w = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 h = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_h(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 frame_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_frame_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BufferUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BufferUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BufferUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BufferUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint32 w = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->w(), output);
  }

  // required uint32 h = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->h(), output);
  }

  // required uint64 frame_number = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->frame_number(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BufferUpdate)
}

size_t BufferUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.BufferUpdate)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_w()) {
    // required uint32 w = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());
  }

  if (has_frame_number()) {
    // required uint64 frame_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->frame_number());
  }

  if (has_h()) {
    // required uint32 h = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());
  }

  return total_size;
}
size_t BufferUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BufferUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());

    // required uint32 w = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->w());

    // required uint64 frame_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->frame_number());

    // required uint32 h = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BufferUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BufferUpdate*>(
      &from));
}

void BufferUpdate::MergeFrom(const BufferUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BufferUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_number_ = from.frame_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BufferUpdate::CopyFrom(const BufferUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BufferUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void BufferUpdate::InternalSwap(BufferUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(w_, other->w_);
  swap(frame_number_, other->frame_number_);
  swap(h_, other->h_);
}

std::string BufferUpdate::GetTypeName() const {
  return "android.surfaceflinger.BufferUpdate";
}


// ===================================================================

void VSyncEvent::InitAsDefaultInstance() {
}
class VSyncEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VSyncEvent>()._has_bits_);
  static void set_has_when(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VSyncEvent::VSyncEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.VSyncEvent)
}
VSyncEvent::VSyncEvent(const VSyncEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  when_ = from.when_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.VSyncEvent)
}

void VSyncEvent::SharedCtor() {
  when_ = PROTOBUF_LONGLONG(0);
}

VSyncEvent::~VSyncEvent() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.VSyncEvent)
  SharedDtor();
}

void VSyncEvent::SharedDtor() {
}

void VSyncEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSyncEvent& VSyncEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSyncEvent_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void VSyncEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.VSyncEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  when_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VSyncEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 when = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_when(&has_bits);
          when_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VSyncEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.VSyncEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 when = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_when(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &when_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.VSyncEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.VSyncEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VSyncEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.VSyncEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 when = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->when(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.VSyncEvent)
}

size_t VSyncEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.VSyncEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int64 when = 1;
  if (has_when()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->when());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSyncEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VSyncEvent*>(
      &from));
}

void VSyncEvent::MergeFrom(const VSyncEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.VSyncEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_when()) {
    set_when(from.when());
  }
}

void VSyncEvent::CopyFrom(const VSyncEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.VSyncEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSyncEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VSyncEvent::InternalSwap(VSyncEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(when_, other->when_);
}

std::string VSyncEvent::GetTypeName() const {
  return "android.surfaceflinger.VSyncEvent";
}


// ===================================================================

void DisplayCreation::InitAsDefaultInstance() {
}
class DisplayCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayCreation>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_secure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DisplayCreation::DisplayCreation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DisplayCreation)
}
DisplayCreation::DisplayCreation(const DisplayCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(display_id_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DisplayCreation)
}

void DisplayCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(display_id_));
}

DisplayCreation::~DisplayCreation() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DisplayCreation)
  SharedDtor();
}

void DisplayCreation::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisplayCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayCreation& DisplayCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayCreation_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void DisplayCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DisplayCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(display_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 display_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_display_id(&has_bits);
          display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_secure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_secure(&has_bits);
          is_secure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayCreation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DisplayCreation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 display_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_display_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &display_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_secure = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_secure(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DisplayCreation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DisplayCreation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayCreation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DisplayCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 display_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->display_id(), output);
  }

  // required bool is_secure = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_secure(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DisplayCreation)
}

size_t DisplayCreation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.DisplayCreation)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_is_secure()) {
    // required bool is_secure = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DisplayCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DisplayCreation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());

    // required bool is_secure = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 display_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->display_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayCreation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayCreation*>(
      &from));
}

void DisplayCreation::MergeFrom(const DisplayCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DisplayCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_secure_ = from.is_secure_;
    }
    if (cached_has_bits & 0x00000008u) {
      display_id_ = from.display_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayCreation::CopyFrom(const DisplayCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DisplayCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DisplayCreation::InternalSwap(DisplayCreation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(is_secure_, other->is_secure_);
  swap(display_id_, other->display_id_);
}

std::string DisplayCreation::GetTypeName() const {
  return "android.surfaceflinger.DisplayCreation";
}


// ===================================================================

void DisplayDeletion::InitAsDefaultInstance() {
}
class DisplayDeletion::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayDeletion>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisplayDeletion::DisplayDeletion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DisplayDeletion)
}
DisplayDeletion::DisplayDeletion(const DisplayDeletion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DisplayDeletion)
}

void DisplayDeletion::SharedCtor() {
  id_ = 0;
}

DisplayDeletion::~DisplayDeletion() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DisplayDeletion)
  SharedDtor();
}

void DisplayDeletion::SharedDtor() {
}

void DisplayDeletion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayDeletion& DisplayDeletion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayDeletion_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void DisplayDeletion::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DisplayDeletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayDeletion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayDeletion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DisplayDeletion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DisplayDeletion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DisplayDeletion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayDeletion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DisplayDeletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DisplayDeletion)
}

size_t DisplayDeletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DisplayDeletion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayDeletion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayDeletion*>(
      &from));
}

void DisplayDeletion::MergeFrom(const DisplayDeletion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DisplayDeletion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void DisplayDeletion::CopyFrom(const DisplayDeletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DisplayDeletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayDeletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DisplayDeletion::InternalSwap(DisplayDeletion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

std::string DisplayDeletion::GetTypeName() const {
  return "android.surfaceflinger.DisplayDeletion";
}


// ===================================================================

void PowerModeUpdate::InitAsDefaultInstance() {
}
class PowerModeUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerModeUpdate>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PowerModeUpdate::PowerModeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.PowerModeUpdate)
}
PowerModeUpdate::PowerModeUpdate(const PowerModeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.PowerModeUpdate)
}

void PowerModeUpdate::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mode_));
}

PowerModeUpdate::~PowerModeUpdate() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.PowerModeUpdate)
  SharedDtor();
}

void PowerModeUpdate::SharedDtor() {
}

void PowerModeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerModeUpdate& PowerModeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerModeUpdate_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void PowerModeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.PowerModeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerModeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerModeUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.PowerModeUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.PowerModeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.PowerModeUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerModeUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.PowerModeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.PowerModeUpdate)
}

size_t PowerModeUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.PowerModeUpdate)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_mode()) {
    // required int32 mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  return total_size;
}
size_t PowerModeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.PowerModeUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 mode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerModeUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerModeUpdate*>(
      &from));
}

void PowerModeUpdate::MergeFrom(const PowerModeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.PowerModeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerModeUpdate::CopyFrom(const PowerModeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.PowerModeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerModeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PowerModeUpdate::InternalSwap(PowerModeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(mode_, other->mode_);
}

std::string PowerModeUpdate::GetTypeName() const {
  return "android.surfaceflinger.PowerModeUpdate";
}


// ===================================================================

void ReparentChange::InitAsDefaultInstance() {
}
class ReparentChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ReparentChange>()._has_bits_);
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReparentChange::ReparentChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ReparentChange)
}
ReparentChange::ReparentChange(const ReparentChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_id_ = from.parent_id_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ReparentChange)
}

void ReparentChange::SharedCtor() {
  parent_id_ = 0;
}

ReparentChange::~ReparentChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ReparentChange)
  SharedDtor();
}

void ReparentChange::SharedDtor() {
}

void ReparentChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReparentChange& ReparentChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReparentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void ReparentChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ReparentChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReparentChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 parent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_parent_id(&has_bits);
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReparentChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ReparentChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 parent_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_parent_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ReparentChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ReparentChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReparentChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ReparentChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 parent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->parent_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ReparentChange)
}

size_t ReparentChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ReparentChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 parent_id = 1;
  if (has_parent_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReparentChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReparentChange*>(
      &from));
}

void ReparentChange::MergeFrom(const ReparentChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ReparentChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parent_id()) {
    set_parent_id(from.parent_id());
  }
}

void ReparentChange::CopyFrom(const ReparentChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ReparentChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReparentChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReparentChange::InternalSwap(ReparentChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parent_id_, other->parent_id_);
}

std::string ReparentChange::GetTypeName() const {
  return "android.surfaceflinger.ReparentChange";
}


// ===================================================================

void RelativeParentChange::InitAsDefaultInstance() {
}
class RelativeParentChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeParentChange>()._has_bits_);
  static void set_has_relative_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RelativeParentChange::RelativeParentChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.RelativeParentChange)
}
RelativeParentChange::RelativeParentChange(const RelativeParentChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_parent_id_, &from.relative_parent_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&relative_parent_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.RelativeParentChange)
}

void RelativeParentChange::SharedCtor() {
  ::memset(&relative_parent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&relative_parent_id_)) + sizeof(z_));
}

RelativeParentChange::~RelativeParentChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.RelativeParentChange)
  SharedDtor();
}

void RelativeParentChange::SharedDtor() {
}

void RelativeParentChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeParentChange& RelativeParentChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeParentChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void RelativeParentChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.RelativeParentChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&relative_parent_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&relative_parent_id_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RelativeParentChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 relative_parent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relative_parent_id(&has_bits);
          relative_parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RelativeParentChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.RelativeParentChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 relative_parent_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_relative_parent_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &relative_parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 z = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.RelativeParentChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.RelativeParentChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RelativeParentChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.RelativeParentChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 relative_parent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->relative_parent_id(), output);
  }

  // required int32 z = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->z(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.RelativeParentChange)
}

size_t RelativeParentChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.RelativeParentChange)
  size_t total_size = 0;

  if (has_relative_parent_id()) {
    // required int32 relative_parent_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->relative_parent_id());
  }

  if (has_z()) {
    // required int32 z = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->z());
  }

  return total_size;
}
size_t RelativeParentChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.RelativeParentChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 relative_parent_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->relative_parent_id());

    // required int32 z = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->z());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeParentChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelativeParentChange*>(
      &from));
}

void RelativeParentChange::MergeFrom(const RelativeParentChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.RelativeParentChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      relative_parent_id_ = from.relative_parent_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RelativeParentChange::CopyFrom(const RelativeParentChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.RelativeParentChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeParentChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RelativeParentChange::InternalSwap(RelativeParentChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relative_parent_id_, other->relative_parent_id_);
  swap(z_, other->z_);
}

std::string RelativeParentChange::GetTypeName() const {
  return "android.surfaceflinger.RelativeParentChange";
}


// ===================================================================

void ShadowRadiusChange::InitAsDefaultInstance() {
}
class ShadowRadiusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ShadowRadiusChange>()._has_bits_);
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ShadowRadiusChange::ShadowRadiusChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ShadowRadiusChange)
}
ShadowRadiusChange::ShadowRadiusChange(const ShadowRadiusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ShadowRadiusChange)
}

void ShadowRadiusChange::SharedCtor() {
  radius_ = 0;
}

ShadowRadiusChange::~ShadowRadiusChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ShadowRadiusChange)
  SharedDtor();
}

void ShadowRadiusChange::SharedDtor() {
}

void ShadowRadiusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShadowRadiusChange& ShadowRadiusChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShadowRadiusChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void ShadowRadiusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ShadowRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShadowRadiusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShadowRadiusChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ShadowRadiusChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_radius(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ShadowRadiusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ShadowRadiusChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShadowRadiusChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ShadowRadiusChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float radius = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ShadowRadiusChange)
}

size_t ShadowRadiusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ShadowRadiusChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required float radius = 1;
  if (has_radius()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShadowRadiusChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShadowRadiusChange*>(
      &from));
}

void ShadowRadiusChange::MergeFrom(const ShadowRadiusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ShadowRadiusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_radius()) {
    set_radius(from.radius());
  }
}

void ShadowRadiusChange::CopyFrom(const ShadowRadiusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ShadowRadiusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShadowRadiusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShadowRadiusChange::InternalSwap(ShadowRadiusChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(radius_, other->radius_);
}

std::string ShadowRadiusChange::GetTypeName() const {
  return "android.surfaceflinger.ShadowRadiusChange";
}


// ===================================================================

void TrustedOverlayChange::InitAsDefaultInstance() {
}
class TrustedOverlayChange::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustedOverlayChange>()._has_bits_);
  static void set_has_is_trusted_overlay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustedOverlayChange::TrustedOverlayChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.TrustedOverlayChange)
}
TrustedOverlayChange::TrustedOverlayChange(const TrustedOverlayChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_trusted_overlay_ = from.is_trusted_overlay_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.TrustedOverlayChange)
}

void TrustedOverlayChange::SharedCtor() {
  is_trusted_overlay_ = 0;
}

TrustedOverlayChange::~TrustedOverlayChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.TrustedOverlayChange)
  SharedDtor();
}

void TrustedOverlayChange::SharedDtor() {
}

void TrustedOverlayChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustedOverlayChange& TrustedOverlayChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrustedOverlayChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void TrustedOverlayChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.TrustedOverlayChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_trusted_overlay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrustedOverlayChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float is_trusted_overlay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_is_trusted_overlay(&has_bits);
          is_trusted_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrustedOverlayChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.TrustedOverlayChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float is_trusted_overlay = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_is_trusted_overlay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &is_trusted_overlay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.TrustedOverlayChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.TrustedOverlayChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrustedOverlayChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.TrustedOverlayChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float is_trusted_overlay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->is_trusted_overlay(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.TrustedOverlayChange)
}

size_t TrustedOverlayChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.TrustedOverlayChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required float is_trusted_overlay = 1;
  if (has_is_trusted_overlay()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustedOverlayChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrustedOverlayChange*>(
      &from));
}

void TrustedOverlayChange::MergeFrom(const TrustedOverlayChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.TrustedOverlayChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_trusted_overlay()) {
    set_is_trusted_overlay(from.is_trusted_overlay());
  }
}

void TrustedOverlayChange::CopyFrom(const TrustedOverlayChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.TrustedOverlayChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustedOverlayChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TrustedOverlayChange::InternalSwap(TrustedOverlayChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_trusted_overlay_, other->is_trusted_overlay_);
}

std::string TrustedOverlayChange::GetTypeName() const {
  return "android.surfaceflinger.TrustedOverlayChange";
}


// ===================================================================

void BlurRegionsChange::InitAsDefaultInstance() {
}
class BlurRegionsChange::_Internal {
 public:
  using HasBits = decltype(std::declval<BlurRegionsChange>()._has_bits_);
};

BlurRegionsChange::BlurRegionsChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BlurRegionsChange)
}
BlurRegionsChange::BlurRegionsChange(const BlurRegionsChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blur_regions_(from.blur_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BlurRegionsChange)
}

void BlurRegionsChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
}

BlurRegionsChange::~BlurRegionsChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BlurRegionsChange)
  SharedDtor();
}

void BlurRegionsChange::SharedDtor() {
}

void BlurRegionsChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlurRegionsChange& BlurRegionsChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlurRegionsChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void BlurRegionsChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BlurRegionsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blur_regions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlurRegionsChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_blur_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlurRegionsChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BlurRegionsChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blur_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BlurRegionsChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BlurRegionsChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlurRegionsChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BlurRegionsChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blur_regions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->blur_regions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BlurRegionsChange)
}

size_t BlurRegionsChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BlurRegionsChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.BlurRegionChange blur_regions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->blur_regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blur_regions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlurRegionsChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlurRegionsChange*>(
      &from));
}

void BlurRegionsChange::MergeFrom(const BlurRegionsChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BlurRegionsChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blur_regions_.MergeFrom(from.blur_regions_);
}

void BlurRegionsChange::CopyFrom(const BlurRegionsChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BlurRegionsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlurRegionsChange::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->blur_regions())) return false;
  return true;
}

void BlurRegionsChange::InternalSwap(BlurRegionsChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&blur_regions_)->InternalSwap(CastToBase(&other->blur_regions_));
}

std::string BlurRegionsChange::GetTypeName() const {
  return "android.surfaceflinger.BlurRegionsChange";
}


// ===================================================================

void BlurRegionChange::InitAsDefaultInstance() {
}
class BlurRegionChange::_Internal {
 public:
  using HasBits = decltype(std::declval<BlurRegionChange>()._has_bits_);
  static void set_has_blur_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_corner_radius_tl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_corner_radius_tr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_corner_radius_bl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_corner_radius_br(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

BlurRegionChange::BlurRegionChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BlurRegionChange)
}
BlurRegionChange::BlurRegionChange(const BlurRegionChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blur_radius_, &from.blur_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BlurRegionChange)
}

void BlurRegionChange::SharedCtor() {
  ::memset(&blur_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
}

BlurRegionChange::~BlurRegionChange() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BlurRegionChange)
  SharedDtor();
}

void BlurRegionChange::SharedDtor() {
}

void BlurRegionChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlurRegionChange& BlurRegionChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlurRegionChange_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void BlurRegionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BlurRegionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&blur_radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_) -
        reinterpret_cast<char*>(&blur_radius_)) + sizeof(top_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&right_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlurRegionChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 blur_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blur_radius(&has_bits);
          blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float corner_radius_tl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_corner_radius_tl(&has_bits);
          corner_radius_tl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float corner_radius_tr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_corner_radius_tr(&has_bits);
          corner_radius_tr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float corner_radius_bl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_corner_radius_bl(&has_bits);
          corner_radius_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float corner_radius_br = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_corner_radius_br(&has_bits);
          corner_radius_br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float alpha = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_top(&has_bits);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 right = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 bottom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bottom(&has_bits);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlurRegionChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BlurRegionChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 blur_radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_blur_radius(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blur_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float corner_radius_tl = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_corner_radius_tl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_tl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float corner_radius_tr = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_corner_radius_tr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_tr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float corner_radius_bl = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_corner_radius_bl(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_bl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float corner_radius_br = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_corner_radius_br(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_br_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float alpha = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_alpha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 left = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_left(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 top = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_top(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 right = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_right(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bottom = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_bottom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BlurRegionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BlurRegionChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlurRegionChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BlurRegionChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 blur_radius = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->blur_radius(), output);
  }

  // required float corner_radius_tl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->corner_radius_tl(), output);
  }

  // required float corner_radius_tr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->corner_radius_tr(), output);
  }

  // required float corner_radius_bl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->corner_radius_bl(), output);
  }

  // required float corner_radius_br = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->corner_radius_br(), output);
  }

  // required float alpha = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->alpha(), output);
  }

  // required int32 left = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->left(), output);
  }

  // required int32 top = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->top(), output);
  }

  // required int32 right = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->right(), output);
  }

  // required int32 bottom = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->bottom(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BlurRegionChange)
}

size_t BlurRegionChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.BlurRegionChange)
  size_t total_size = 0;

  if (has_blur_radius()) {
    // required uint32 blur_radius = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->blur_radius());
  }

  if (has_corner_radius_tl()) {
    // required float corner_radius_tl = 2;
    total_size += 1 + 4;
  }

  if (has_corner_radius_tr()) {
    // required float corner_radius_tr = 3;
    total_size += 1 + 4;
  }

  if (has_corner_radius_bl()) {
    // required float corner_radius_bl = 4;
    total_size += 1 + 4;
  }

  if (has_corner_radius_br()) {
    // required float corner_radius_br = 5;
    total_size += 1 + 4;
  }

  if (has_alpha()) {
    // required float alpha = 6;
    total_size += 1 + 4;
  }

  if (has_left()) {
    // required int32 left = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left());
  }

  if (has_top()) {
    // required int32 top = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top());
  }

  if (has_right()) {
    // required int32 right = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right());
  }

  if (has_bottom()) {
    // required int32 bottom = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  return total_size;
}
size_t BlurRegionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BlurRegionChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required uint32 blur_radius = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->blur_radius());

    // required float corner_radius_tl = 2;
    total_size += 1 + 4;

    // required float corner_radius_tr = 3;
    total_size += 1 + 4;

    // required float corner_radius_bl = 4;
    total_size += 1 + 4;

    // required float corner_radius_br = 5;
    total_size += 1 + 4;

    // required float alpha = 6;
    total_size += 1 + 4;

    // required int32 left = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left());

    // required int32 top = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top());

    // required int32 right = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right());

    // required int32 bottom = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bottom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlurRegionChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlurRegionChange*>(
      &from));
}

void BlurRegionChange::MergeFrom(const BlurRegionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BlurRegionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      blur_radius_ = from.blur_radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      corner_radius_tl_ = from.corner_radius_tl_;
    }
    if (cached_has_bits & 0x00000004u) {
      corner_radius_tr_ = from.corner_radius_tr_;
    }
    if (cached_has_bits & 0x00000008u) {
      corner_radius_bl_ = from.corner_radius_bl_;
    }
    if (cached_has_bits & 0x00000010u) {
      corner_radius_br_ = from.corner_radius_br_;
    }
    if (cached_has_bits & 0x00000020u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000040u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000080u) {
      top_ = from.top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000200u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlurRegionChange::CopyFrom(const BlurRegionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BlurRegionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlurRegionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void BlurRegionChange::InternalSwap(BlurRegionChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blur_radius_, other->blur_radius_);
  swap(corner_radius_tl_, other->corner_radius_tl_);
  swap(corner_radius_tr_, other->corner_radius_tr_);
  swap(corner_radius_bl_, other->corner_radius_bl_);
  swap(corner_radius_br_, other->corner_radius_br_);
  swap(alpha_, other->alpha_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
}

std::string BlurRegionChange::GetTypeName() const {
  return "android.surfaceflinger.BlurRegionChange";
}


// ===================================================================

void Origin::InitAsDefaultInstance() {
}
class Origin::_Internal {
 public:
  using HasBits = decltype(std::declval<Origin>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Origin::Origin()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.Origin)
}
Origin::Origin(const Origin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.Origin)
}

void Origin::SharedCtor() {
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(uid_));
}

Origin::~Origin() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.Origin)
  SharedDtor();
}

void Origin::SharedDtor() {
}

void Origin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Origin& Origin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Origin_frameworks_2fnative_2fcmds_2fsurfacereplayer_2fproto_2fsrc_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Origin::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.Origin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Origin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Origin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.Origin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.Origin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.Origin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Origin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.Origin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // required int32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.Origin)
}

size_t Origin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:android.surfaceflinger.Origin)
  size_t total_size = 0;

  if (has_pid()) {
    // required int32 pid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  if (has_uid()) {
    // required int32 uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  return total_size;
}
size_t Origin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.Origin)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 pid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pid());

    // required int32 uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Origin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Origin*>(
      &from));
}

void Origin::MergeFrom(const Origin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.Origin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Origin::CopyFrom(const Origin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.Origin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Origin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Origin::InternalSwap(Origin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pid_, other->pid_);
  swap(uid_, other->uid_);
}

std::string Origin::GetTypeName() const {
  return "android.surfaceflinger.Origin";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::Trace* Arena::CreateMaybeMessage< ::android::surfaceflinger::Trace >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::Trace >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::Increment* Arena::CreateMaybeMessage< ::android::surfaceflinger::Increment >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::Increment >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::Transaction* Arena::CreateMaybeMessage< ::android::surfaceflinger::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::PositionChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::PositionChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::PositionChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SizeChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::SizeChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SizeChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::AlphaChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::AlphaChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::AlphaChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::CornerRadiusChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::CornerRadiusChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::CornerRadiusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BackgroundBlurRadiusChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::BackgroundBlurRadiusChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BackgroundBlurRadiusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayerChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayerChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayerChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::CropChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::CropChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::CropChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::MatrixChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::MatrixChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::MatrixChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::TransparentRegionHintChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::TransparentRegionHintChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::TransparentRegionHintChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayerStackChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayerStackChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayerStackChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DisplayFlagsChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::DisplayFlagsChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DisplayFlagsChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::HiddenFlagChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::HiddenFlagChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::HiddenFlagChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::OpaqueFlagChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::OpaqueFlagChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::OpaqueFlagChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SecureFlagChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::SecureFlagChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SecureFlagChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DisplayChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::DisplayChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DisplayChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DispSurfaceChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::DispSurfaceChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DispSurfaceChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ProjectionChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::ProjectionChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ProjectionChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::Rectangle* Arena::CreateMaybeMessage< ::android::surfaceflinger::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceCreation* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceCreation >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceDeletion* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceDeletion >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceDeletion >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BufferUpdate* Arena::CreateMaybeMessage< ::android::surfaceflinger::BufferUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BufferUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::VSyncEvent* Arena::CreateMaybeMessage< ::android::surfaceflinger::VSyncEvent >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::VSyncEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DisplayCreation* Arena::CreateMaybeMessage< ::android::surfaceflinger::DisplayCreation >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DisplayCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DisplayDeletion* Arena::CreateMaybeMessage< ::android::surfaceflinger::DisplayDeletion >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DisplayDeletion >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::PowerModeUpdate* Arena::CreateMaybeMessage< ::android::surfaceflinger::PowerModeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::PowerModeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ReparentChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::ReparentChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ReparentChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::RelativeParentChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::RelativeParentChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::RelativeParentChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ShadowRadiusChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::ShadowRadiusChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ShadowRadiusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::TrustedOverlayChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::TrustedOverlayChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::TrustedOverlayChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BlurRegionsChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::BlurRegionsChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BlurRegionsChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BlurRegionChange* Arena::CreateMaybeMessage< ::android::surfaceflinger::BlurRegionChange >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BlurRegionChange >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::Origin* Arena::CreateMaybeMessage< ::android::surfaceflinger::Origin >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::Origin >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
