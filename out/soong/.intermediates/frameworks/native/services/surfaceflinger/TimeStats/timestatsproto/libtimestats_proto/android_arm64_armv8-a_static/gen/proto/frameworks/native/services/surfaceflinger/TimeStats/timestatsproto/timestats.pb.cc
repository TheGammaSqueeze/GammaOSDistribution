// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/TimeStats/timestatsproto/timestats.proto

#include "frameworks/native/services/surfaceflinger/TimeStats/timestatsproto/timestats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
namespace android {
namespace surfaceflinger {
class SFTimeStatsGlobalProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsGlobalProto> _instance;
} _SFTimeStatsGlobalProto_default_instance_;
class SFTimeStatsLayerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsLayerProto> _instance;
} _SFTimeStatsLayerProto_default_instance_;
class SFTimeStatsDeltaProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsDeltaProto> _instance;
} _SFTimeStatsDeltaProto_default_instance_;
class SFTimeStatsHistogramBucketProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsHistogramBucketProto> _instance;
} _SFTimeStatsHistogramBucketProto_default_instance_;
class SFTimeStatsDisplayConfigBucketProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsDisplayConfigBucketProto> _instance;
} _SFTimeStatsDisplayConfigBucketProto_default_instance_;
class SFTimeStatsDisplayConfigProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFTimeStatsDisplayConfigProto> _instance;
} _SFTimeStatsDisplayConfigProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsDeltaProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsDeltaProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsDeltaProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {
      &scc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,}};

static void InitDefaultsscc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsDisplayConfigBucketProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {
      &scc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,}};

static void InitDefaultsscc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsDisplayConfigProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsDisplayConfigProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsDisplayConfigProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {}};

static void InitDefaultsscc_info_SFTimeStatsGlobalProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsGlobalProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsGlobalProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsGlobalProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SFTimeStatsGlobalProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SFTimeStatsGlobalProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {
      &scc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,
      &scc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,
      &scc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,}};

static void InitDefaultsscc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsHistogramBucketProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsHistogramBucketProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {}};

static void InitDefaultsscc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SFTimeStatsLayerProto_default_instance_;
    new (ptr) ::android::surfaceflinger::SFTimeStatsLayerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SFTimeStatsLayerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto}, {
      &scc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base,}};

namespace android {
namespace surfaceflinger {

// ===================================================================

void SFTimeStatsGlobalProto::InitAsDefaultInstance() {
}
class SFTimeStatsGlobalProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsGlobalProto>()._has_bits_);
  static void set_has_stats_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stats_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_missed_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_composition_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_display_on_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SFTimeStatsGlobalProto::SFTimeStatsGlobalProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsGlobalProto)
}
SFTimeStatsGlobalProto::SFTimeStatsGlobalProto(const SFTimeStatsGlobalProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      present_to_present_(from.present_to_present_),
      display_config_stats_(from.display_config_stats_),
      frame_duration_(from.frame_duration_),
      render_engine_timing_(from.render_engine_timing_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stats_start_, &from.stats_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_composition_frames_) -
    reinterpret_cast<char*>(&stats_start_)) + sizeof(client_composition_frames_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsGlobalProto)
}

void SFTimeStatsGlobalProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFTimeStatsGlobalProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  ::memset(&stats_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_composition_frames_) -
      reinterpret_cast<char*>(&stats_start_)) + sizeof(client_composition_frames_));
}

SFTimeStatsGlobalProto::~SFTimeStatsGlobalProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsGlobalProto)
  SharedDtor();
}

void SFTimeStatsGlobalProto::SharedDtor() {
}

void SFTimeStatsGlobalProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsGlobalProto& SFTimeStatsGlobalProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsGlobalProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsGlobalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  present_to_present_.Clear();
  display_config_stats_.Clear();
  frame_duration_.Clear();
  render_engine_timing_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&stats_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_composition_frames_) -
        reinterpret_cast<char*>(&stats_start_)) + sizeof(client_composition_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsGlobalProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 stats_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stats_start(&has_bits);
          stats_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stats_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stats_end(&has_bits);
          stats_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 missed_frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_missed_frames(&has_bits);
          missed_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 client_composition_frames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_composition_frames(&has_bits);
          client_composition_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional int64 display_on_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_display_on_time(&has_bits);
          display_on_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_present_to_present(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_display_config_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frame_duration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_render_engine_timing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsGlobalProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 stats_start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stats_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stats_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stats_end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stats_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stats_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_frames = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 missed_frames = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_missed_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &missed_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_composition_frames = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_client_composition_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_composition_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 display_on_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_display_on_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &display_on_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_present_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_display_config_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frame_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_render_engine_timing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsGlobalProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsGlobalProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsGlobalProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 stats_start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->stats_start(), output);
  }

  // optional int64 stats_end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->stats_end(), output);
  }

  // optional int32 total_frames = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->total_frames(), output);
  }

  // optional int32 missed_frames = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->missed_frames(), output);
  }

  // optional int32 client_composition_frames = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->client_composition_frames(), output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->stats(static_cast<int>(i)),
      output);
  }

  // optional int64 display_on_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->display_on_time(), output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->present_to_present_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->present_to_present(static_cast<int>(i)),
      output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->display_config_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->display_config_stats(static_cast<int>(i)),
      output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frame_duration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->frame_duration(static_cast<int>(i)),
      output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->render_engine_timing_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11,
      this->render_engine_timing(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsGlobalProto)
}

size_t SFTimeStatsGlobalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->present_to_present_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->present_to_present(static_cast<int>(i)));
    }
  }

  // repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->display_config_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->display_config_stats(static_cast<int>(i)));
    }
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_duration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frame_duration(static_cast<int>(i)));
    }
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->render_engine_timing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->render_engine_timing(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 stats_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stats_start());
    }

    // optional int64 stats_end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stats_end());
    }

    // optional int32 total_frames = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_frames());
    }

    // optional int32 missed_frames = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->missed_frames());
    }

    // optional int64 display_on_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->display_on_time());
    }

    // optional int32 client_composition_frames = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->client_composition_frames());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsGlobalProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsGlobalProto*>(
      &from));
}

void SFTimeStatsGlobalProto::MergeFrom(const SFTimeStatsGlobalProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  present_to_present_.MergeFrom(from.present_to_present_);
  display_config_stats_.MergeFrom(from.display_config_stats_);
  frame_duration_.MergeFrom(from.frame_duration_);
  render_engine_timing_.MergeFrom(from.render_engine_timing_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      stats_start_ = from.stats_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      stats_end_ = from.stats_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_frames_ = from.total_frames_;
    }
    if (cached_has_bits & 0x00000008u) {
      missed_frames_ = from.missed_frames_;
    }
    if (cached_has_bits & 0x00000010u) {
      display_on_time_ = from.display_on_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_composition_frames_ = from.client_composition_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFTimeStatsGlobalProto::CopyFrom(const SFTimeStatsGlobalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsGlobalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsGlobalProto::IsInitialized() const {
  return true;
}

void SFTimeStatsGlobalProto::InternalSwap(SFTimeStatsGlobalProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  CastToBase(&present_to_present_)->InternalSwap(CastToBase(&other->present_to_present_));
  CastToBase(&display_config_stats_)->InternalSwap(CastToBase(&other->display_config_stats_));
  CastToBase(&frame_duration_)->InternalSwap(CastToBase(&other->frame_duration_));
  CastToBase(&render_engine_timing_)->InternalSwap(CastToBase(&other->render_engine_timing_));
  swap(stats_start_, other->stats_start_);
  swap(stats_end_, other->stats_end_);
  swap(total_frames_, other->total_frames_);
  swap(missed_frames_, other->missed_frames_);
  swap(display_on_time_, other->display_on_time_);
  swap(client_composition_frames_, other->client_composition_frames_);
}

std::string SFTimeStatsGlobalProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsGlobalProto";
}


// ===================================================================

void SFTimeStatsLayerProto::InitAsDefaultInstance() {
}
class SFTimeStatsLayerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsLayerProto>()._has_bits_);
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stats_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stats_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dropped_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SFTimeStatsLayerProto::SFTimeStatsLayerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsLayerProto)
}
SFTimeStatsLayerProto::SFTimeStatsLayerProto(const SFTimeStatsLayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      deltas_(from.deltas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&stats_start_, &from.stats_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_frames_) -
    reinterpret_cast<char*>(&stats_start_)) + sizeof(dropped_frames_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsLayerProto)
}

void SFTimeStatsLayerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_frames_) -
      reinterpret_cast<char*>(&stats_start_)) + sizeof(dropped_frames_));
}

SFTimeStatsLayerProto::~SFTimeStatsLayerProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsLayerProto)
  SharedDtor();
}

void SFTimeStatsLayerProto::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SFTimeStatsLayerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsLayerProto& SFTimeStatsLayerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsLayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsLayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deltas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      layer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&stats_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropped_frames_) -
        reinterpret_cast<char*>(&stats_start_)) + sizeof(dropped_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsLayerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string layer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_layer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stats_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stats_start(&has_bits);
          stats_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stats_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stats_end(&has_bits);
          stats_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_frames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_deltas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional int32 dropped_frames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dropped_frames(&has_bits);
          dropped_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsLayerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsLayerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string layer_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stats_start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stats_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stats_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stats_end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stats_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stats_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_frames = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_total_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_deltas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropped_frames = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_dropped_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsLayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsLayerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsLayerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsLayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string layer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->layer_name(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional int64 stats_start = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->stats_start(), output);
  }

  // optional int64 stats_end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->stats_end(), output);
  }

  // optional int32 total_frames = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->total_frames(), output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deltas_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->deltas(static_cast<int>(i)),
      output);
  }

  // optional int32 dropped_frames = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->dropped_frames(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsLayerProto)
}

size_t SFTimeStatsLayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsLayerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->deltas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->deltas(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string layer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional string package_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int64 stats_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stats_start());
    }

    // optional int64 stats_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stats_end());
    }

    // optional int32 total_frames = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_frames());
    }

    // optional int32 dropped_frames = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dropped_frames());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsLayerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsLayerProto*>(
      &from));
}

void SFTimeStatsLayerProto::MergeFrom(const SFTimeStatsLayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsLayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deltas_.MergeFrom(from.deltas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      stats_start_ = from.stats_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      stats_end_ = from.stats_end_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_frames_ = from.total_frames_;
    }
    if (cached_has_bits & 0x00000020u) {
      dropped_frames_ = from.dropped_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFTimeStatsLayerProto::CopyFrom(const SFTimeStatsLayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsLayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsLayerProto::IsInitialized() const {
  return true;
}

void SFTimeStatsLayerProto::InternalSwap(SFTimeStatsLayerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&deltas_)->InternalSwap(CastToBase(&other->deltas_));
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stats_start_, other->stats_start_);
  swap(stats_end_, other->stats_end_);
  swap(total_frames_, other->total_frames_);
  swap(dropped_frames_, other->dropped_frames_);
}

std::string SFTimeStatsLayerProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsLayerProto";
}


// ===================================================================

void SFTimeStatsDeltaProto::InitAsDefaultInstance() {
}
class SFTimeStatsDeltaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsDeltaProto>()._has_bits_);
  static void set_has_delta_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SFTimeStatsDeltaProto::SFTimeStatsDeltaProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsDeltaProto)
}
SFTimeStatsDeltaProto::SFTimeStatsDeltaProto(const SFTimeStatsDeltaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      histograms_(from.histograms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_delta_name()) {
    delta_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_name_);
  }
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsDeltaProto)
}

void SFTimeStatsDeltaProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  delta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SFTimeStatsDeltaProto::~SFTimeStatsDeltaProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsDeltaProto)
  SharedDtor();
}

void SFTimeStatsDeltaProto::SharedDtor() {
  delta_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SFTimeStatsDeltaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsDeltaProto& SFTimeStatsDeltaProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsDeltaProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsDeltaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histograms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    delta_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsDeltaProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string delta_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_delta_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_histograms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsDeltaProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string delta_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_delta_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsDeltaProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsDeltaProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsDeltaProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string delta_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->delta_name(), output);
  }

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histograms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->histograms(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsDeltaProto)
}

size_t SFTimeStatsDeltaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->histograms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->histograms(static_cast<int>(i)));
    }
  }

  // optional string delta_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->delta_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsDeltaProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsDeltaProto*>(
      &from));
}

void SFTimeStatsDeltaProto::MergeFrom(const SFTimeStatsDeltaProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histograms_.MergeFrom(from.histograms_);
  if (from.has_delta_name()) {
    _has_bits_[0] |= 0x00000001u;
    delta_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_name_);
  }
}

void SFTimeStatsDeltaProto::CopyFrom(const SFTimeStatsDeltaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsDeltaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsDeltaProto::IsInitialized() const {
  return true;
}

void SFTimeStatsDeltaProto::InternalSwap(SFTimeStatsDeltaProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&histograms_)->InternalSwap(CastToBase(&other->histograms_));
  delta_name_.Swap(&other->delta_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SFTimeStatsDeltaProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsDeltaProto";
}


// ===================================================================

void SFTimeStatsHistogramBucketProto::InitAsDefaultInstance() {
}
class SFTimeStatsHistogramBucketProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsHistogramBucketProto>()._has_bits_);
  static void set_has_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SFTimeStatsHistogramBucketProto::SFTimeStatsHistogramBucketProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
}
SFTimeStatsHistogramBucketProto::SFTimeStatsHistogramBucketProto(const SFTimeStatsHistogramBucketProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_millis_, &from.time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_count_) -
    reinterpret_cast<char*>(&time_millis_)) + sizeof(frame_count_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
}

void SFTimeStatsHistogramBucketProto::SharedCtor() {
  ::memset(&time_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_count_) -
      reinterpret_cast<char*>(&time_millis_)) + sizeof(frame_count_));
}

SFTimeStatsHistogramBucketProto::~SFTimeStatsHistogramBucketProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  SharedDtor();
}

void SFTimeStatsHistogramBucketProto::SharedDtor() {
}

void SFTimeStatsHistogramBucketProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsHistogramBucketProto& SFTimeStatsHistogramBucketProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsHistogramBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsHistogramBucketProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_count_) -
        reinterpret_cast<char*>(&time_millis_)) + sizeof(frame_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsHistogramBucketProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 time_millis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_millis(&has_bits);
          time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frame_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_count(&has_bits);
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsHistogramBucketProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time_millis = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frame_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_frame_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsHistogramBucketProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_millis = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->time_millis(), output);
  }

  // optional int32 frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->frame_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
}

size_t SFTimeStatsHistogramBucketProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 time_millis = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->time_millis());
    }

    // optional int32 frame_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->frame_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsHistogramBucketProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsHistogramBucketProto*>(
      &from));
}

void SFTimeStatsHistogramBucketProto::MergeFrom(const SFTimeStatsHistogramBucketProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_millis_ = from.time_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_count_ = from.frame_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFTimeStatsHistogramBucketProto::CopyFrom(const SFTimeStatsHistogramBucketProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsHistogramBucketProto::IsInitialized() const {
  return true;
}

void SFTimeStatsHistogramBucketProto::InternalSwap(SFTimeStatsHistogramBucketProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_millis_, other->time_millis_);
  swap(frame_count_, other->frame_count_);
}

std::string SFTimeStatsHistogramBucketProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsHistogramBucketProto";
}


// ===================================================================

void SFTimeStatsDisplayConfigBucketProto::InitAsDefaultInstance() {
  ::android::surfaceflinger::_SFTimeStatsDisplayConfigBucketProto_default_instance_._instance.get_mutable()->config_ = const_cast< ::android::surfaceflinger::SFTimeStatsDisplayConfigProto*>(
      ::android::surfaceflinger::SFTimeStatsDisplayConfigProto::internal_default_instance());
}
class SFTimeStatsDisplayConfigBucketProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsDisplayConfigBucketProto>()._has_bits_);
  static const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto& config(const SFTimeStatsDisplayConfigBucketProto* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto&
SFTimeStatsDisplayConfigBucketProto::_Internal::config(const SFTimeStatsDisplayConfigBucketProto* msg) {
  return *msg->config_;
}
SFTimeStatsDisplayConfigBucketProto::SFTimeStatsDisplayConfigBucketProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
}
SFTimeStatsDisplayConfigBucketProto::SFTimeStatsDisplayConfigBucketProto(const SFTimeStatsDisplayConfigBucketProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::android::surfaceflinger::SFTimeStatsDisplayConfigProto(*from.config_);
  } else {
    config_ = nullptr;
  }
  duration_millis_ = from.duration_millis_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
}

void SFTimeStatsDisplayConfigBucketProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_millis_) -
      reinterpret_cast<char*>(&config_)) + sizeof(duration_millis_));
}

SFTimeStatsDisplayConfigBucketProto::~SFTimeStatsDisplayConfigBucketProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  SharedDtor();
}

void SFTimeStatsDisplayConfigBucketProto::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
}

void SFTimeStatsDisplayConfigBucketProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsDisplayConfigBucketProto& SFTimeStatsDisplayConfigBucketProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsDisplayConfigBucketProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsDisplayConfigBucketProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(config_ != nullptr);
    config_->Clear();
  }
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsDisplayConfigBucketProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_millis(&has_bits);
          duration_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsDisplayConfigBucketProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsDisplayConfigBucketProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::config(this), output);
  }

  // optional int64 duration_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_millis(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
}

size_t SFTimeStatsDisplayConfigBucketProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional int64 duration_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_millis());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsDisplayConfigBucketProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsDisplayConfigBucketProto*>(
      &from));
}

void SFTimeStatsDisplayConfigBucketProto::MergeFrom(const SFTimeStatsDisplayConfigBucketProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config()->::android::surfaceflinger::SFTimeStatsDisplayConfigProto::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_millis_ = from.duration_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SFTimeStatsDisplayConfigBucketProto::CopyFrom(const SFTimeStatsDisplayConfigBucketProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsDisplayConfigBucketProto::IsInitialized() const {
  return true;
}

void SFTimeStatsDisplayConfigBucketProto::InternalSwap(SFTimeStatsDisplayConfigBucketProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(config_, other->config_);
  swap(duration_millis_, other->duration_millis_);
}

std::string SFTimeStatsDisplayConfigBucketProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto";
}


// ===================================================================

void SFTimeStatsDisplayConfigProto::InitAsDefaultInstance() {
}
class SFTimeStatsDisplayConfigProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SFTimeStatsDisplayConfigProto>()._has_bits_);
  static void set_has_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SFTimeStatsDisplayConfigProto::SFTimeStatsDisplayConfigProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
}
SFTimeStatsDisplayConfigProto::SFTimeStatsDisplayConfigProto(const SFTimeStatsDisplayConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fps_ = from.fps_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
}

void SFTimeStatsDisplayConfigProto::SharedCtor() {
  fps_ = 0;
}

SFTimeStatsDisplayConfigProto::~SFTimeStatsDisplayConfigProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  SharedDtor();
}

void SFTimeStatsDisplayConfigProto::SharedDtor() {
}

void SFTimeStatsDisplayConfigProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFTimeStatsDisplayConfigProto& SFTimeStatsDisplayConfigProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFTimeStatsDisplayConfigProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto.base);
  return *internal_default_instance();
}


void SFTimeStatsDisplayConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fps_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SFTimeStatsDisplayConfigProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fps(&has_bits);
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SFTimeStatsDisplayConfigProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_fps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SFTimeStatsDisplayConfigProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
}

size_t SFTimeStatsDisplayConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 fps = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fps());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFTimeStatsDisplayConfigProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SFTimeStatsDisplayConfigProto*>(
      &from));
}

void SFTimeStatsDisplayConfigProto::MergeFrom(const SFTimeStatsDisplayConfigProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fps()) {
    set_fps(from.fps());
  }
}

void SFTimeStatsDisplayConfigProto::CopyFrom(const SFTimeStatsDisplayConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFTimeStatsDisplayConfigProto::IsInitialized() const {
  return true;
}

void SFTimeStatsDisplayConfigProto::InternalSwap(SFTimeStatsDisplayConfigProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fps_, other->fps_);
}

std::string SFTimeStatsDisplayConfigProto::GetTypeName() const {
  return "android.surfaceflinger.SFTimeStatsDisplayConfigProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsGlobalProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsGlobalProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsGlobalProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsLayerProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsLayerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsLayerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsDeltaProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsDeltaProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsDeltaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::SFTimeStatsDisplayConfigProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SFTimeStatsDisplayConfigProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
