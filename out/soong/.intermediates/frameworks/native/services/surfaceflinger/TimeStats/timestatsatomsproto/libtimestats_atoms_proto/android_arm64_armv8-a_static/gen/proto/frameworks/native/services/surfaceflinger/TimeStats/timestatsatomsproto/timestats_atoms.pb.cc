// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/TimeStats/timestatsatomsproto/timestats_atoms.proto

#include "frameworks/native/services/surfaceflinger/TimeStats/timestatsatomsproto/timestats_atoms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
namespace android {
namespace surfaceflinger {
class SurfaceflingerStatsGlobalInfoWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceflingerStatsGlobalInfoWrapper> _instance;
} _SurfaceflingerStatsGlobalInfoWrapper_default_instance_;
class SurfaceflingerStatsLayerInfoWrapperDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceflingerStatsLayerInfoWrapper> _instance;
} _SurfaceflingerStatsLayerInfoWrapper_default_instance_;
class SurfaceflingerStatsGlobalInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceflingerStatsGlobalInfo> _instance;
} _SurfaceflingerStatsGlobalInfo_default_instance_;
class SurfaceflingerStatsLayerInfo_SetFrameRateVoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceflingerStatsLayerInfo_SetFrameRateVote> _instance;
} _SurfaceflingerStatsLayerInfo_SetFrameRateVote_default_instance_;
class SurfaceflingerStatsLayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceflingerStatsLayerInfo> _instance;
} _SurfaceflingerStatsLayerInfo_default_instance_;
class FrameTimingHistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTimingHistogram> _instance;
} _FrameTimingHistogram_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_FrameTimingHistogram_default_instance_;
    new (ptr) ::android::surfaceflinger::FrameTimingHistogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::FrameTimingHistogram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {}};

static void InitDefaultsscc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceflingerStatsGlobalInfo_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {
      &scc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceflingerStatsGlobalInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceflingerStatsGlobalInfoWrapper_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceflingerStatsGlobalInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SurfaceflingerStatsGlobalInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {
      &scc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceflingerStatsLayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {
      &scc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base,
      &scc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_SetFrameRateVote_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {}};

static void InitDefaultsscc_info_SurfaceflingerStatsLayerInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_SurfaceflingerStatsLayerInfoWrapper_default_instance_;
    new (ptr) ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceflingerStatsLayerInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SurfaceflingerStatsLayerInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto}, {
      &scc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base,}};

namespace android {
namespace surfaceflinger {
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_strings[3] = {};

static const char SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_names[] =
  "FRAME_RATE_DEFAULT"
  "FRAME_RATE_EXACT_OR_MULTIPLE"
  "FRAME_RATE_UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries[] = {
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_names + 0, 18}, 1 },
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_names + 18, 28}, 2 },
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_names + 46, 20}, 0 },
};

static const int SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries_by_number[] = {
  2, // 0 -> FRAME_RATE_UNDEFINED
  0, // 1 -> FRAME_RATE_DEFAULT
  1, // 2 -> FRAME_RATE_EXACT_OR_MULTIPLE
};

const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name(
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries,
          SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries_by_number,
          3, SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries,
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_strings[idx].get();
}
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::FRAME_RATE_UNDEFINED;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::FRAME_RATE_DEFAULT;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::FRAME_RATE_EXACT_OR_MULTIPLE;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::FrameRateCompatibility_MIN;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::FrameRateCompatibility_MAX;
constexpr int SurfaceflingerStatsLayerInfo_SetFrameRateVote::FrameRateCompatibility_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_strings[3] = {};

static const char SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_names[] =
  "SEAMLESS_NOT_REQUIRED"
  "SEAMLESS_SHOULD_BE_SEAMLESS"
  "SEAMLESS_UNDEFINED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries[] = {
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_names + 0, 21}, 2 },
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_names + 21, 27}, 1 },
  { {SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_names + 48, 18}, 0 },
};

static const int SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries_by_number[] = {
  2, // 0 -> SEAMLESS_UNDEFINED
  1, // 1 -> SEAMLESS_SHOULD_BE_SEAMLESS
  0, // 2 -> SEAMLESS_NOT_REQUIRED
};

const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name(
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries,
          SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries_by_number,
          3, SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries,
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_strings[idx].get();
}
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::SEAMLESS_UNDEFINED;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::SEAMLESS_SHOULD_BE_SEAMLESS;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::SEAMLESS_NOT_REQUIRED;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::Seamlessness_MIN;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::Seamlessness_MAX;
constexpr int SurfaceflingerStatsLayerInfo_SetFrameRateVote::Seamlessness_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SurfaceflingerStatsLayerInfo_GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SurfaceflingerStatsLayerInfo_GameMode_strings[5] = {};

static const char SurfaceflingerStatsLayerInfo_GameMode_names[] =
  "GAME_MODE_BATTERY"
  "GAME_MODE_PERFORMANCE"
  "GAME_MODE_STANDARD"
  "GAME_MODE_UNSPECIFIED"
  "GAME_MODE_UNSUPPORTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SurfaceflingerStatsLayerInfo_GameMode_entries[] = {
  { {SurfaceflingerStatsLayerInfo_GameMode_names + 0, 17}, 4 },
  { {SurfaceflingerStatsLayerInfo_GameMode_names + 17, 21}, 3 },
  { {SurfaceflingerStatsLayerInfo_GameMode_names + 38, 18}, 2 },
  { {SurfaceflingerStatsLayerInfo_GameMode_names + 56, 21}, 0 },
  { {SurfaceflingerStatsLayerInfo_GameMode_names + 77, 21}, 1 },
};

static const int SurfaceflingerStatsLayerInfo_GameMode_entries_by_number[] = {
  3, // 0 -> GAME_MODE_UNSPECIFIED
  4, // 1 -> GAME_MODE_UNSUPPORTED
  2, // 2 -> GAME_MODE_STANDARD
  1, // 3 -> GAME_MODE_PERFORMANCE
  0, // 4 -> GAME_MODE_BATTERY
};

const std::string& SurfaceflingerStatsLayerInfo_GameMode_Name(
    SurfaceflingerStatsLayerInfo_GameMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SurfaceflingerStatsLayerInfo_GameMode_entries,
          SurfaceflingerStatsLayerInfo_GameMode_entries_by_number,
          5, SurfaceflingerStatsLayerInfo_GameMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SurfaceflingerStatsLayerInfo_GameMode_entries,
      SurfaceflingerStatsLayerInfo_GameMode_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SurfaceflingerStatsLayerInfo_GameMode_strings[idx].get();
}
bool SurfaceflingerStatsLayerInfo_GameMode_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_GameMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SurfaceflingerStatsLayerInfo_GameMode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SurfaceflingerStatsLayerInfo_GameMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GAME_MODE_UNSPECIFIED;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GAME_MODE_UNSUPPORTED;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GAME_MODE_STANDARD;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GAME_MODE_PERFORMANCE;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GAME_MODE_BATTERY;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GameMode_MIN;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::GameMode_MAX;
constexpr int SurfaceflingerStatsLayerInfo::GameMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SurfaceflingerStatsGlobalInfoWrapper::InitAsDefaultInstance() {
}
class SurfaceflingerStatsGlobalInfoWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceflingerStatsGlobalInfoWrapper>()._has_bits_);
};

SurfaceflingerStatsGlobalInfoWrapper::SurfaceflingerStatsGlobalInfoWrapper()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
}
SurfaceflingerStatsGlobalInfoWrapper::SurfaceflingerStatsGlobalInfoWrapper(const SurfaceflingerStatsGlobalInfoWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      atom_(from.atom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
}

void SurfaceflingerStatsGlobalInfoWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceflingerStatsGlobalInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
}

SurfaceflingerStatsGlobalInfoWrapper::~SurfaceflingerStatsGlobalInfoWrapper() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  SharedDtor();
}

void SurfaceflingerStatsGlobalInfoWrapper::SharedDtor() {
}

void SurfaceflingerStatsGlobalInfoWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceflingerStatsGlobalInfoWrapper& SurfaceflingerStatsGlobalInfoWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceflingerStatsGlobalInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void SurfaceflingerStatsGlobalInfoWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atom_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceflingerStatsGlobalInfoWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceflingerStatsGlobalInfoWrapper::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceflingerStatsGlobalInfoWrapper::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->atom_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->atom(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
}

size_t SurfaceflingerStatsGlobalInfoWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->atom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->atom(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceflingerStatsGlobalInfoWrapper::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceflingerStatsGlobalInfoWrapper*>(
      &from));
}

void SurfaceflingerStatsGlobalInfoWrapper::MergeFrom(const SurfaceflingerStatsGlobalInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atom_.MergeFrom(from.atom_);
}

void SurfaceflingerStatsGlobalInfoWrapper::CopyFrom(const SurfaceflingerStatsGlobalInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceflingerStatsGlobalInfoWrapper::IsInitialized() const {
  return true;
}

void SurfaceflingerStatsGlobalInfoWrapper::InternalSwap(SurfaceflingerStatsGlobalInfoWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&atom_)->InternalSwap(CastToBase(&other->atom_));
}

std::string SurfaceflingerStatsGlobalInfoWrapper::GetTypeName() const {
  return "android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper";
}


// ===================================================================

void SurfaceflingerStatsLayerInfoWrapper::InitAsDefaultInstance() {
}
class SurfaceflingerStatsLayerInfoWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceflingerStatsLayerInfoWrapper>()._has_bits_);
};

SurfaceflingerStatsLayerInfoWrapper::SurfaceflingerStatsLayerInfoWrapper()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
}
SurfaceflingerStatsLayerInfoWrapper::SurfaceflingerStatsLayerInfoWrapper(const SurfaceflingerStatsLayerInfoWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      atom_(from.atom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
}

void SurfaceflingerStatsLayerInfoWrapper::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceflingerStatsLayerInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
}

SurfaceflingerStatsLayerInfoWrapper::~SurfaceflingerStatsLayerInfoWrapper() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  SharedDtor();
}

void SurfaceflingerStatsLayerInfoWrapper::SharedDtor() {
}

void SurfaceflingerStatsLayerInfoWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceflingerStatsLayerInfoWrapper& SurfaceflingerStatsLayerInfoWrapper::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceflingerStatsLayerInfoWrapper_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void SurfaceflingerStatsLayerInfoWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atom_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceflingerStatsLayerInfoWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_atom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceflingerStatsLayerInfoWrapper::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceflingerStatsLayerInfoWrapper::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->atom_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->atom(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
}

size_t SurfaceflingerStatsLayerInfoWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->atom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->atom(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceflingerStatsLayerInfoWrapper::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceflingerStatsLayerInfoWrapper*>(
      &from));
}

void SurfaceflingerStatsLayerInfoWrapper::MergeFrom(const SurfaceflingerStatsLayerInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atom_.MergeFrom(from.atom_);
}

void SurfaceflingerStatsLayerInfoWrapper::CopyFrom(const SurfaceflingerStatsLayerInfoWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceflingerStatsLayerInfoWrapper::IsInitialized() const {
  return true;
}

void SurfaceflingerStatsLayerInfoWrapper::InternalSwap(SurfaceflingerStatsLayerInfoWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&atom_)->InternalSwap(CastToBase(&other->atom_));
}

std::string SurfaceflingerStatsLayerInfoWrapper::GetTypeName() const {
  return "android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper";
}


// ===================================================================

void SurfaceflingerStatsGlobalInfo::InitAsDefaultInstance() {
  ::android::surfaceflinger::_SurfaceflingerStatsGlobalInfo_default_instance_._instance.get_mutable()->frame_duration_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsGlobalInfo_default_instance_._instance.get_mutable()->render_engine_timing_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsGlobalInfo_default_instance_._instance.get_mutable()->sf_deadline_misses_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsGlobalInfo_default_instance_._instance.get_mutable()->sf_prediction_errors_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
}
class SurfaceflingerStatsGlobalInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceflingerStatsGlobalInfo>()._has_bits_);
  static void set_has_display_refresh_rate_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_render_rate_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_missed_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_composition_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_display_on_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_animation_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_event_connection_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& frame_duration(const SurfaceflingerStatsGlobalInfo* msg);
  static void set_has_frame_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& render_engine_timing(const SurfaceflingerStatsGlobalInfo* msg);
  static void set_has_render_engine_timing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_timeline_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_janky_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_janky_frames_with_long_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_janky_frames_with_long_gpu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_janky_frames_sf_unattributed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_janky_frames_app_unattributed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_janky_frames_sf_scheduling(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_total_jank_frames_sf_prediction_error(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_total_jank_frames_app_buffer_stuffing(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& sf_deadline_misses(const SurfaceflingerStatsGlobalInfo* msg);
  static void set_has_sf_deadline_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& sf_prediction_errors(const SurfaceflingerStatsGlobalInfo* msg);
  static void set_has_sf_prediction_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsGlobalInfo::_Internal::frame_duration(const SurfaceflingerStatsGlobalInfo* msg) {
  return *msg->frame_duration_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsGlobalInfo::_Internal::render_engine_timing(const SurfaceflingerStatsGlobalInfo* msg) {
  return *msg->render_engine_timing_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsGlobalInfo::_Internal::sf_deadline_misses(const SurfaceflingerStatsGlobalInfo* msg) {
  return *msg->sf_deadline_misses_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsGlobalInfo::_Internal::sf_prediction_errors(const SurfaceflingerStatsGlobalInfo* msg) {
  return *msg->sf_prediction_errors_;
}
SurfaceflingerStatsGlobalInfo::SurfaceflingerStatsGlobalInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
}
SurfaceflingerStatsGlobalInfo::SurfaceflingerStatsGlobalInfo(const SurfaceflingerStatsGlobalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame_duration()) {
    frame_duration_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.frame_duration_);
  } else {
    frame_duration_ = nullptr;
  }
  if (from.has_render_engine_timing()) {
    render_engine_timing_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.render_engine_timing_);
  } else {
    render_engine_timing_ = nullptr;
  }
  if (from.has_sf_deadline_misses()) {
    sf_deadline_misses_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.sf_deadline_misses_);
  } else {
    sf_deadline_misses_ = nullptr;
  }
  if (from.has_sf_prediction_errors()) {
    sf_prediction_errors_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.sf_prediction_errors_);
  } else {
    sf_prediction_errors_ = nullptr;
  }
  ::memcpy(&total_frames_, &from.total_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&render_rate_bucket_) -
    reinterpret_cast<char*>(&total_frames_)) + sizeof(render_rate_bucket_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
}

void SurfaceflingerStatsGlobalInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  ::memset(&frame_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&render_rate_bucket_) -
      reinterpret_cast<char*>(&frame_duration_)) + sizeof(render_rate_bucket_));
}

SurfaceflingerStatsGlobalInfo::~SurfaceflingerStatsGlobalInfo() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  SharedDtor();
}

void SurfaceflingerStatsGlobalInfo::SharedDtor() {
  if (this != internal_default_instance()) delete frame_duration_;
  if (this != internal_default_instance()) delete render_engine_timing_;
  if (this != internal_default_instance()) delete sf_deadline_misses_;
  if (this != internal_default_instance()) delete sf_prediction_errors_;
}

void SurfaceflingerStatsGlobalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceflingerStatsGlobalInfo& SurfaceflingerStatsGlobalInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceflingerStatsGlobalInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void SurfaceflingerStatsGlobalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(frame_duration_ != nullptr);
      frame_duration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(render_engine_timing_ != nullptr);
      render_engine_timing_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sf_deadline_misses_ != nullptr);
      sf_deadline_misses_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sf_prediction_errors_ != nullptr);
      sf_prediction_errors_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&total_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_on_millis_) -
        reinterpret_cast<char*>(&total_frames_)) + sizeof(display_on_millis_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&animation_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_janky_frames_app_unattributed_) -
        reinterpret_cast<char*>(&animation_millis_)) + sizeof(total_janky_frames_app_unattributed_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&total_janky_frames_sf_scheduling_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&render_rate_bucket_) -
        reinterpret_cast<char*>(&total_janky_frames_sf_scheduling_)) + sizeof(render_rate_bucket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceflingerStatsGlobalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 total_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 missed_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_missed_frames(&has_bits);
          missed_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 client_composition_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_composition_frames(&has_bits);
          client_composition_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 display_on_millis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_display_on_millis(&has_bits);
          display_on_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 animation_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_animation_millis(&has_bits);
          animation_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_connection_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_event_connection_count(&has_bits);
          event_connection_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_frame_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_render_engine_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_timeline_frames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_total_timeline_frames(&has_bits);
          total_timeline_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_janky_frames(&has_bits);
          total_janky_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_with_long_cpu = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_total_janky_frames_with_long_cpu(&has_bits);
          total_janky_frames_with_long_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_with_long_gpu = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_total_janky_frames_with_long_gpu(&has_bits);
          total_janky_frames_with_long_gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_sf_unattributed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_janky_frames_sf_unattributed(&has_bits);
          total_janky_frames_sf_unattributed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_app_unattributed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_janky_frames_app_unattributed(&has_bits);
          total_janky_frames_app_unattributed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_sf_scheduling = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_total_janky_frames_sf_scheduling(&has_bits);
          total_janky_frames_sf_scheduling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_jank_frames_sf_prediction_error = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_total_jank_frames_sf_prediction_error(&has_bits);
          total_jank_frames_sf_prediction_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_jank_frames_app_buffer_stuffing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_total_jank_frames_app_buffer_stuffing(&has_bits);
          total_jank_frames_app_buffer_stuffing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 display_refresh_rate_bucket = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_display_refresh_rate_bucket(&has_bits);
          display_refresh_rate_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_sf_deadline_misses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_sf_prediction_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 render_rate_bucket = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_render_rate_bucket(&has_bits);
          render_rate_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceflingerStatsGlobalInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total_frames = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_total_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 missed_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_missed_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &missed_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 client_composition_frames = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_client_composition_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_composition_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 display_on_millis = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_display_on_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &display_on_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 animation_millis = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_animation_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &animation_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_connection_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_event_connection_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_connection_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_render_engine_timing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_timeline_frames = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_total_timeline_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_timeline_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_total_janky_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_with_long_cpu = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_total_janky_frames_with_long_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_with_long_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_with_long_gpu = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_total_janky_frames_with_long_gpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_with_long_gpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_sf_unattributed = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_janky_frames_sf_unattributed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_sf_unattributed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_app_unattributed = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_total_janky_frames_app_unattributed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_app_unattributed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_sf_scheduling = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_total_janky_frames_sf_scheduling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_sf_scheduling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_jank_frames_sf_prediction_error = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_total_jank_frames_sf_prediction_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_jank_frames_sf_prediction_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_jank_frames_app_buffer_stuffing = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_total_jank_frames_app_buffer_stuffing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_jank_frames_app_buffer_stuffing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_refresh_rate_bucket = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_display_refresh_rate_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_refresh_rate_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sf_deadline_misses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sf_prediction_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 render_rate_bucket = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_render_rate_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &render_rate_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceflingerStatsGlobalInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 total_frames = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->total_frames(), output);
  }

  // optional int64 missed_frames = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->missed_frames(), output);
  }

  // optional int64 client_composition_frames = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->client_composition_frames(), output);
  }

  // optional int64 display_on_millis = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->display_on_millis(), output);
  }

  // optional int64 animation_millis = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->animation_millis(), output);
  }

  // optional int32 event_connection_count = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->event_connection_count(), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::frame_duration(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::render_engine_timing(this), output);
  }

  // optional int32 total_timeline_frames = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->total_timeline_frames(), output);
  }

  // optional int32 total_janky_frames = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->total_janky_frames(), output);
  }

  // optional int32 total_janky_frames_with_long_cpu = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->total_janky_frames_with_long_cpu(), output);
  }

  // optional int32 total_janky_frames_with_long_gpu = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->total_janky_frames_with_long_gpu(), output);
  }

  // optional int32 total_janky_frames_sf_unattributed = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->total_janky_frames_sf_unattributed(), output);
  }

  // optional int32 total_janky_frames_app_unattributed = 14;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->total_janky_frames_app_unattributed(), output);
  }

  // optional int32 total_janky_frames_sf_scheduling = 15;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->total_janky_frames_sf_scheduling(), output);
  }

  // optional int32 total_jank_frames_sf_prediction_error = 16;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->total_jank_frames_sf_prediction_error(), output);
  }

  // optional int32 total_jank_frames_app_buffer_stuffing = 17;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->total_jank_frames_app_buffer_stuffing(), output);
  }

  // optional int32 display_refresh_rate_bucket = 18;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->display_refresh_rate_bucket(), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::sf_deadline_misses(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::sf_prediction_errors(this), output);
  }

  // optional int32 render_rate_bucket = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->render_rate_bucket(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
}

size_t SurfaceflingerStatsGlobalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_duration_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *render_engine_timing_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sf_deadline_misses_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sf_prediction_errors_);
    }

    // optional int64 total_frames = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_frames());
    }

    // optional int64 missed_frames = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->missed_frames());
    }

    // optional int64 client_composition_frames = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->client_composition_frames());
    }

    // optional int64 display_on_millis = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->display_on_millis());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 animation_millis = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->animation_millis());
    }

    // optional int32 event_connection_count = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->event_connection_count());
    }

    // optional int32 total_timeline_frames = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_timeline_frames());
    }

    // optional int32 total_janky_frames = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames());
    }

    // optional int32 total_janky_frames_with_long_cpu = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_with_long_cpu());
    }

    // optional int32 total_janky_frames_with_long_gpu = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_with_long_gpu());
    }

    // optional int32 total_janky_frames_sf_unattributed = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_sf_unattributed());
    }

    // optional int32 total_janky_frames_app_unattributed = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_app_unattributed());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 total_janky_frames_sf_scheduling = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_sf_scheduling());
    }

    // optional int32 total_jank_frames_sf_prediction_error = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_jank_frames_sf_prediction_error());
    }

    // optional int32 total_jank_frames_app_buffer_stuffing = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_jank_frames_app_buffer_stuffing());
    }

    // optional int32 display_refresh_rate_bucket = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->display_refresh_rate_bucket());
    }

    // optional int32 render_rate_bucket = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->render_rate_bucket());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceflingerStatsGlobalInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceflingerStatsGlobalInfo*>(
      &from));
}

void SurfaceflingerStatsGlobalInfo::MergeFrom(const SurfaceflingerStatsGlobalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_frame_duration()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.frame_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_render_engine_timing()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.render_engine_timing());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sf_deadline_misses()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.sf_deadline_misses());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sf_prediction_errors()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.sf_prediction_errors());
    }
    if (cached_has_bits & 0x00000010u) {
      total_frames_ = from.total_frames_;
    }
    if (cached_has_bits & 0x00000020u) {
      missed_frames_ = from.missed_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_composition_frames_ = from.client_composition_frames_;
    }
    if (cached_has_bits & 0x00000080u) {
      display_on_millis_ = from.display_on_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      animation_millis_ = from.animation_millis_;
    }
    if (cached_has_bits & 0x00000200u) {
      event_connection_count_ = from.event_connection_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_timeline_frames_ = from.total_timeline_frames_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_janky_frames_ = from.total_janky_frames_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_janky_frames_with_long_cpu_ = from.total_janky_frames_with_long_cpu_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_janky_frames_with_long_gpu_ = from.total_janky_frames_with_long_gpu_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_janky_frames_sf_unattributed_ = from.total_janky_frames_sf_unattributed_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_janky_frames_app_unattributed_ = from.total_janky_frames_app_unattributed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      total_janky_frames_sf_scheduling_ = from.total_janky_frames_sf_scheduling_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_jank_frames_sf_prediction_error_ = from.total_jank_frames_sf_prediction_error_;
    }
    if (cached_has_bits & 0x00040000u) {
      total_jank_frames_app_buffer_stuffing_ = from.total_jank_frames_app_buffer_stuffing_;
    }
    if (cached_has_bits & 0x00080000u) {
      display_refresh_rate_bucket_ = from.display_refresh_rate_bucket_;
    }
    if (cached_has_bits & 0x00100000u) {
      render_rate_bucket_ = from.render_rate_bucket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurfaceflingerStatsGlobalInfo::CopyFrom(const SurfaceflingerStatsGlobalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceflingerStatsGlobalInfo::IsInitialized() const {
  return true;
}

void SurfaceflingerStatsGlobalInfo::InternalSwap(SurfaceflingerStatsGlobalInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frame_duration_, other->frame_duration_);
  swap(render_engine_timing_, other->render_engine_timing_);
  swap(sf_deadline_misses_, other->sf_deadline_misses_);
  swap(sf_prediction_errors_, other->sf_prediction_errors_);
  swap(total_frames_, other->total_frames_);
  swap(missed_frames_, other->missed_frames_);
  swap(client_composition_frames_, other->client_composition_frames_);
  swap(display_on_millis_, other->display_on_millis_);
  swap(animation_millis_, other->animation_millis_);
  swap(event_connection_count_, other->event_connection_count_);
  swap(total_timeline_frames_, other->total_timeline_frames_);
  swap(total_janky_frames_, other->total_janky_frames_);
  swap(total_janky_frames_with_long_cpu_, other->total_janky_frames_with_long_cpu_);
  swap(total_janky_frames_with_long_gpu_, other->total_janky_frames_with_long_gpu_);
  swap(total_janky_frames_sf_unattributed_, other->total_janky_frames_sf_unattributed_);
  swap(total_janky_frames_app_unattributed_, other->total_janky_frames_app_unattributed_);
  swap(total_janky_frames_sf_scheduling_, other->total_janky_frames_sf_scheduling_);
  swap(total_jank_frames_sf_prediction_error_, other->total_jank_frames_sf_prediction_error_);
  swap(total_jank_frames_app_buffer_stuffing_, other->total_jank_frames_app_buffer_stuffing_);
  swap(display_refresh_rate_bucket_, other->display_refresh_rate_bucket_);
  swap(render_rate_bucket_, other->render_rate_bucket_);
}

std::string SurfaceflingerStatsGlobalInfo::GetTypeName() const {
  return "android.surfaceflinger.SurfaceflingerStatsGlobalInfo";
}


// ===================================================================

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::InitAsDefaultInstance() {
}
class SurfaceflingerStatsLayerInfo_SetFrameRateVote::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceflingerStatsLayerInfo_SetFrameRateVote>()._has_bits_);
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_rate_compatibility(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seamlessness(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SurfaceflingerStatsLayerInfo_SetFrameRateVote::SurfaceflingerStatsLayerInfo_SetFrameRateVote()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
}
SurfaceflingerStatsLayerInfo_SetFrameRateVote::SurfaceflingerStatsLayerInfo_SetFrameRateVote(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_rate_, &from.frame_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&seamlessness_) -
    reinterpret_cast<char*>(&frame_rate_)) + sizeof(seamlessness_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::SharedCtor() {
  ::memset(&frame_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seamlessness_) -
      reinterpret_cast<char*>(&frame_rate_)) + sizeof(seamlessness_));
}

SurfaceflingerStatsLayerInfo_SetFrameRateVote::~SurfaceflingerStatsLayerInfo_SetFrameRateVote() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  SharedDtor();
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::SharedDtor() {
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceflingerStatsLayerInfo_SetFrameRateVote& SurfaceflingerStatsLayerInfo_SetFrameRateVote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceflingerStatsLayerInfo_SetFrameRateVote_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void SurfaceflingerStatsLayerInfo_SetFrameRateVote::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&frame_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seamlessness_) -
        reinterpret_cast<char*>(&frame_rate_)) + sizeof(seamlessness_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceflingerStatsLayerInfo_SetFrameRateVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float frame_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_frame_rate(&has_bits);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(val))) {
            set_frame_rate_compatibility(static_cast<::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(val))) {
            set_seamlessness(static_cast<::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float frame_rate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_frame_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(value)) {
            set_frame_rate_compatibility(static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(value)) {
            set_seamlessness(static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float frame_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->frame_rate(), output);
  }

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->frame_rate_compatibility(), output);
  }

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->seamlessness(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
}

size_t SurfaceflingerStatsLayerInfo_SetFrameRateVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float frame_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->frame_rate_compatibility());
    }

    // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->seamlessness());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceflingerStatsLayerInfo_SetFrameRateVote*>(
      &from));
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::MergeFrom(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      frame_rate_compatibility_ = from.frame_rate_compatibility_;
    }
    if (cached_has_bits & 0x00000004u) {
      seamlessness_ = from.seamlessness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::CopyFrom(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceflingerStatsLayerInfo_SetFrameRateVote::IsInitialized() const {
  return true;
}

void SurfaceflingerStatsLayerInfo_SetFrameRateVote::InternalSwap(SurfaceflingerStatsLayerInfo_SetFrameRateVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frame_rate_, other->frame_rate_);
  swap(frame_rate_compatibility_, other->frame_rate_compatibility_);
  swap(seamlessness_, other->seamlessness_);
}

std::string SurfaceflingerStatsLayerInfo_SetFrameRateVote::GetTypeName() const {
  return "android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote";
}


// ===================================================================

void SurfaceflingerStatsLayerInfo::InitAsDefaultInstance() {
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->present_to_present_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->post_to_present_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->acquire_to_present_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->latch_to_present_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->desired_to_present_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->post_to_acquire_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->set_frame_rate_vote_ = const_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote*>(
      ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote::internal_default_instance());
  ::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_default_instance_._instance.get_mutable()->app_deadline_misses_ = const_cast< ::android::surfaceflinger::FrameTimingHistogram*>(
      ::android::surfaceflinger::FrameTimingHistogram::internal_default_instance());
}
class SurfaceflingerStatsLayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceflingerStatsLayerInfo>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_display_refresh_rate_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_render_rate_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_layer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dropped_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& present_to_present(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_present_to_present(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& post_to_present(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_post_to_present(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& acquire_to_present(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_acquire_to_present(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& latch_to_present(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_latch_to_present(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& desired_to_present(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_desired_to_present(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& post_to_acquire(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_post_to_acquire(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_late_acquire_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bad_desired_present_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_timeline_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_janky_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_janky_frames_with_long_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_total_janky_frames_with_long_gpu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_total_janky_frames_sf_unattributed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_janky_frames_app_unattributed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_total_janky_frames_sf_scheduling(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_total_jank_frames_sf_prediction_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_total_jank_frames_app_buffer_stuffing(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote& set_frame_rate_vote(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_set_frame_rate_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::surfaceflinger::FrameTimingHistogram& app_deadline_misses(const SurfaceflingerStatsLayerInfo* msg);
  static void set_has_app_deadline_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::present_to_present(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->present_to_present_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::post_to_present(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->post_to_present_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::acquire_to_present(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->acquire_to_present_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::latch_to_present(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->latch_to_present_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::desired_to_present(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->desired_to_present_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::post_to_acquire(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->post_to_acquire_;
}
const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote&
SurfaceflingerStatsLayerInfo::_Internal::set_frame_rate_vote(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->set_frame_rate_vote_;
}
const ::android::surfaceflinger::FrameTimingHistogram&
SurfaceflingerStatsLayerInfo::_Internal::app_deadline_misses(const SurfaceflingerStatsLayerInfo* msg) {
  return *msg->app_deadline_misses_;
}
SurfaceflingerStatsLayerInfo::SurfaceflingerStatsLayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
}
SurfaceflingerStatsLayerInfo::SurfaceflingerStatsLayerInfo(const SurfaceflingerStatsLayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  if (from.has_present_to_present()) {
    present_to_present_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.present_to_present_);
  } else {
    present_to_present_ = nullptr;
  }
  if (from.has_post_to_present()) {
    post_to_present_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.post_to_present_);
  } else {
    post_to_present_ = nullptr;
  }
  if (from.has_acquire_to_present()) {
    acquire_to_present_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.acquire_to_present_);
  } else {
    acquire_to_present_ = nullptr;
  }
  if (from.has_latch_to_present()) {
    latch_to_present_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.latch_to_present_);
  } else {
    latch_to_present_ = nullptr;
  }
  if (from.has_desired_to_present()) {
    desired_to_present_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.desired_to_present_);
  } else {
    desired_to_present_ = nullptr;
  }
  if (from.has_post_to_acquire()) {
    post_to_acquire_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.post_to_acquire_);
  } else {
    post_to_acquire_ = nullptr;
  }
  if (from.has_set_frame_rate_vote()) {
    set_frame_rate_vote_ = new ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote(*from.set_frame_rate_vote_);
  } else {
    set_frame_rate_vote_ = nullptr;
  }
  if (from.has_app_deadline_misses()) {
    app_deadline_misses_ = new ::android::surfaceflinger::FrameTimingHistogram(*from.app_deadline_misses_);
  } else {
    app_deadline_misses_ = nullptr;
  }
  ::memcpy(&total_frames_, &from.total_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&total_frames_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
}

void SurfaceflingerStatsLayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  layer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&present_to_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&present_to_present_)) + sizeof(game_mode_));
}

SurfaceflingerStatsLayerInfo::~SurfaceflingerStatsLayerInfo() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  SharedDtor();
}

void SurfaceflingerStatsLayerInfo::SharedDtor() {
  layer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete present_to_present_;
  if (this != internal_default_instance()) delete post_to_present_;
  if (this != internal_default_instance()) delete acquire_to_present_;
  if (this != internal_default_instance()) delete latch_to_present_;
  if (this != internal_default_instance()) delete desired_to_present_;
  if (this != internal_default_instance()) delete post_to_acquire_;
  if (this != internal_default_instance()) delete set_frame_rate_vote_;
  if (this != internal_default_instance()) delete app_deadline_misses_;
}

void SurfaceflingerStatsLayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceflingerStatsLayerInfo& SurfaceflingerStatsLayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceflingerStatsLayerInfo_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void SurfaceflingerStatsLayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      layer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(present_to_present_ != nullptr);
      present_to_present_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(post_to_present_ != nullptr);
      post_to_present_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(acquire_to_present_ != nullptr);
      acquire_to_present_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(latch_to_present_ != nullptr);
      latch_to_present_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(desired_to_present_ != nullptr);
      desired_to_present_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(post_to_acquire_ != nullptr);
      post_to_acquire_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(set_frame_rate_vote_ != nullptr);
      set_frame_rate_vote_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(app_deadline_misses_ != nullptr);
    app_deadline_misses_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&total_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_janky_frames_) -
        reinterpret_cast<char*>(&total_frames_)) + sizeof(total_janky_frames_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&total_janky_frames_with_long_cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_refresh_rate_bucket_) -
        reinterpret_cast<char*>(&total_janky_frames_with_long_cpu_)) + sizeof(display_refresh_rate_bucket_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&render_rate_bucket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_mode_) -
        reinterpret_cast<char*>(&render_rate_bucket_)) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceflingerStatsLayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string layer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_layer_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 dropped_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dropped_frames(&has_bits);
          dropped_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_present_to_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_post_to_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_acquire_to_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_latch_to_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_desired_to_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_post_to_acquire(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 late_acquire_frames = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_late_acquire_frames(&has_bits);
          late_acquire_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bad_desired_present_frames = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bad_desired_present_frames(&has_bits);
          bad_desired_present_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_timeline_frames = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_timeline_frames(&has_bits);
          total_timeline_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_janky_frames(&has_bits);
          total_janky_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_with_long_cpu = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_total_janky_frames_with_long_cpu(&has_bits);
          total_janky_frames_with_long_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_with_long_gpu = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_total_janky_frames_with_long_gpu(&has_bits);
          total_janky_frames_with_long_gpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_sf_unattributed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_total_janky_frames_sf_unattributed(&has_bits);
          total_janky_frames_sf_unattributed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_app_unattributed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_total_janky_frames_app_unattributed(&has_bits);
          total_janky_frames_app_unattributed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_janky_frames_sf_scheduling = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_total_janky_frames_sf_scheduling(&has_bits);
          total_janky_frames_sf_scheduling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_jank_frames_sf_prediction_error = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_total_jank_frames_sf_prediction_error(&has_bits);
          total_jank_frames_sf_prediction_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_jank_frames_app_buffer_stuffing = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_total_jank_frames_app_buffer_stuffing(&has_bits);
          total_jank_frames_app_buffer_stuffing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 display_refresh_rate_bucket = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_display_refresh_rate_bucket(&has_bits);
          display_refresh_rate_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 render_rate_bucket = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_render_rate_bucket(&has_bits);
          render_rate_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_set_frame_rate_vote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_app_deadline_misses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode_IsValid(val))) {
            set_game_mode(static_cast<::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceflingerStatsLayerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string layer_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_frames = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dropped_frames = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_dropped_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dropped_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_present_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acquire_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latch_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_desired_to_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_to_acquire()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 late_acquire_frames = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_late_acquire_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &late_acquire_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bad_desired_present_frames = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_bad_desired_present_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bad_desired_present_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_timeline_frames = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_timeline_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_timeline_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_total_janky_frames(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_with_long_cpu = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_total_janky_frames_with_long_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_with_long_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_with_long_gpu = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_total_janky_frames_with_long_gpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_with_long_gpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_sf_unattributed = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_total_janky_frames_sf_unattributed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_sf_unattributed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_app_unattributed = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_total_janky_frames_app_unattributed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_app_unattributed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_janky_frames_sf_scheduling = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_total_janky_frames_sf_scheduling(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_janky_frames_sf_scheduling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_jank_frames_sf_prediction_error = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_total_jank_frames_sf_prediction_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_jank_frames_sf_prediction_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_jank_frames_app_buffer_stuffing = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_total_jank_frames_app_buffer_stuffing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_jank_frames_app_buffer_stuffing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_refresh_rate_bucket = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_display_refresh_rate_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_refresh_rate_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 render_rate_bucket = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          _Internal::set_has_render_rate_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &render_rate_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_set_frame_rate_vote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_deadline_misses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(208u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceflingerStatsLayerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string layer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->layer_name(), output);
  }

  // optional int64 total_frames = 2;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->total_frames(), output);
  }

  // optional int64 dropped_frames = 3;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->dropped_frames(), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::present_to_present(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::post_to_present(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::acquire_to_present(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::latch_to_present(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::desired_to_present(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::post_to_acquire(this), output);
  }

  // optional int64 late_acquire_frames = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->late_acquire_frames(), output);
  }

  // optional int64 bad_desired_present_frames = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->bad_desired_present_frames(), output);
  }

  // optional int32 uid = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->uid(), output);
  }

  // optional int32 total_timeline_frames = 13;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->total_timeline_frames(), output);
  }

  // optional int32 total_janky_frames = 14;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->total_janky_frames(), output);
  }

  // optional int32 total_janky_frames_with_long_cpu = 15;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->total_janky_frames_with_long_cpu(), output);
  }

  // optional int32 total_janky_frames_with_long_gpu = 16;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->total_janky_frames_with_long_gpu(), output);
  }

  // optional int32 total_janky_frames_sf_unattributed = 17;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->total_janky_frames_sf_unattributed(), output);
  }

  // optional int32 total_janky_frames_app_unattributed = 18;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->total_janky_frames_app_unattributed(), output);
  }

  // optional int32 total_janky_frames_sf_scheduling = 19;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->total_janky_frames_sf_scheduling(), output);
  }

  // optional int32 total_jank_frames_sf_prediction_error = 20;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->total_jank_frames_sf_prediction_error(), output);
  }

  // optional int32 total_jank_frames_app_buffer_stuffing = 21;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->total_jank_frames_app_buffer_stuffing(), output);
  }

  // optional int32 display_refresh_rate_bucket = 22;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->display_refresh_rate_bucket(), output);
  }

  // optional int32 render_rate_bucket = 23;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->render_rate_bucket(), output);
  }

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::set_frame_rate_vote(this), output);
  }

  // optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::app_deadline_misses(this), output);
  }

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      26, this->game_mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
}

size_t SurfaceflingerStatsLayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string layer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->layer_name());
    }

    // optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *present_to_present_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *post_to_present_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acquire_to_present_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latch_to_present_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desired_to_present_);
    }

    // optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *post_to_acquire_);
    }

    // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_frame_rate_vote_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_deadline_misses_);
    }

    // optional int64 total_frames = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_frames());
    }

    // optional int64 dropped_frames = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->dropped_frames());
    }

    // optional int64 late_acquire_frames = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->late_acquire_frames());
    }

    // optional int64 bad_desired_present_frames = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bad_desired_present_frames());
    }

    // optional int32 uid = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 total_timeline_frames = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_timeline_frames());
    }

    // optional int32 total_janky_frames = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 total_janky_frames_with_long_cpu = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_with_long_cpu());
    }

    // optional int32 total_janky_frames_with_long_gpu = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_with_long_gpu());
    }

    // optional int32 total_janky_frames_sf_unattributed = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_sf_unattributed());
    }

    // optional int32 total_janky_frames_app_unattributed = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_app_unattributed());
    }

    // optional int32 total_janky_frames_sf_scheduling = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_janky_frames_sf_scheduling());
    }

    // optional int32 total_jank_frames_sf_prediction_error = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_jank_frames_sf_prediction_error());
    }

    // optional int32 total_jank_frames_app_buffer_stuffing = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_jank_frames_app_buffer_stuffing());
    }

    // optional int32 display_refresh_rate_bucket = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->display_refresh_rate_bucket());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 render_rate_bucket = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->render_rate_bucket());
    }

    // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceflingerStatsLayerInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceflingerStatsLayerInfo*>(
      &from));
}

void SurfaceflingerStatsLayerInfo::MergeFrom(const SurfaceflingerStatsLayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      layer_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_present_to_present()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.present_to_present());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_post_to_present()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.post_to_present());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_acquire_to_present()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.acquire_to_present());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_latch_to_present()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.latch_to_present());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_desired_to_present()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.desired_to_present());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_post_to_acquire()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.post_to_acquire());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_set_frame_rate_vote()->::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote::MergeFrom(from.set_frame_rate_vote());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_app_deadline_misses()->::android::surfaceflinger::FrameTimingHistogram::MergeFrom(from.app_deadline_misses());
    }
    if (cached_has_bits & 0x00000200u) {
      total_frames_ = from.total_frames_;
    }
    if (cached_has_bits & 0x00000400u) {
      dropped_frames_ = from.dropped_frames_;
    }
    if (cached_has_bits & 0x00000800u) {
      late_acquire_frames_ = from.late_acquire_frames_;
    }
    if (cached_has_bits & 0x00001000u) {
      bad_desired_present_frames_ = from.bad_desired_present_frames_;
    }
    if (cached_has_bits & 0x00002000u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_timeline_frames_ = from.total_timeline_frames_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_janky_frames_ = from.total_janky_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      total_janky_frames_with_long_cpu_ = from.total_janky_frames_with_long_cpu_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_janky_frames_with_long_gpu_ = from.total_janky_frames_with_long_gpu_;
    }
    if (cached_has_bits & 0x00040000u) {
      total_janky_frames_sf_unattributed_ = from.total_janky_frames_sf_unattributed_;
    }
    if (cached_has_bits & 0x00080000u) {
      total_janky_frames_app_unattributed_ = from.total_janky_frames_app_unattributed_;
    }
    if (cached_has_bits & 0x00100000u) {
      total_janky_frames_sf_scheduling_ = from.total_janky_frames_sf_scheduling_;
    }
    if (cached_has_bits & 0x00200000u) {
      total_jank_frames_sf_prediction_error_ = from.total_jank_frames_sf_prediction_error_;
    }
    if (cached_has_bits & 0x00400000u) {
      total_jank_frames_app_buffer_stuffing_ = from.total_jank_frames_app_buffer_stuffing_;
    }
    if (cached_has_bits & 0x00800000u) {
      display_refresh_rate_bucket_ = from.display_refresh_rate_bucket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      render_rate_bucket_ = from.render_rate_bucket_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurfaceflingerStatsLayerInfo::CopyFrom(const SurfaceflingerStatsLayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceflingerStatsLayerInfo::IsInitialized() const {
  return true;
}

void SurfaceflingerStatsLayerInfo::InternalSwap(SurfaceflingerStatsLayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_name_.Swap(&other->layer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(present_to_present_, other->present_to_present_);
  swap(post_to_present_, other->post_to_present_);
  swap(acquire_to_present_, other->acquire_to_present_);
  swap(latch_to_present_, other->latch_to_present_);
  swap(desired_to_present_, other->desired_to_present_);
  swap(post_to_acquire_, other->post_to_acquire_);
  swap(set_frame_rate_vote_, other->set_frame_rate_vote_);
  swap(app_deadline_misses_, other->app_deadline_misses_);
  swap(total_frames_, other->total_frames_);
  swap(dropped_frames_, other->dropped_frames_);
  swap(late_acquire_frames_, other->late_acquire_frames_);
  swap(bad_desired_present_frames_, other->bad_desired_present_frames_);
  swap(uid_, other->uid_);
  swap(total_timeline_frames_, other->total_timeline_frames_);
  swap(total_janky_frames_, other->total_janky_frames_);
  swap(total_janky_frames_with_long_cpu_, other->total_janky_frames_with_long_cpu_);
  swap(total_janky_frames_with_long_gpu_, other->total_janky_frames_with_long_gpu_);
  swap(total_janky_frames_sf_unattributed_, other->total_janky_frames_sf_unattributed_);
  swap(total_janky_frames_app_unattributed_, other->total_janky_frames_app_unattributed_);
  swap(total_janky_frames_sf_scheduling_, other->total_janky_frames_sf_scheduling_);
  swap(total_jank_frames_sf_prediction_error_, other->total_jank_frames_sf_prediction_error_);
  swap(total_jank_frames_app_buffer_stuffing_, other->total_jank_frames_app_buffer_stuffing_);
  swap(display_refresh_rate_bucket_, other->display_refresh_rate_bucket_);
  swap(render_rate_bucket_, other->render_rate_bucket_);
  swap(game_mode_, other->game_mode_);
}

std::string SurfaceflingerStatsLayerInfo::GetTypeName() const {
  return "android.surfaceflinger.SurfaceflingerStatsLayerInfo";
}


// ===================================================================

void FrameTimingHistogram::InitAsDefaultInstance() {
}
class FrameTimingHistogram::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameTimingHistogram>()._has_bits_);
};

FrameTimingHistogram::FrameTimingHistogram()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.FrameTimingHistogram)
}
FrameTimingHistogram::FrameTimingHistogram(const FrameTimingHistogram& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      time_millis_buckets_(from.time_millis_buckets_),
      frame_counts_(from.frame_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.FrameTimingHistogram)
}

void FrameTimingHistogram::SharedCtor() {
}

FrameTimingHistogram::~FrameTimingHistogram() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.FrameTimingHistogram)
  SharedDtor();
}

void FrameTimingHistogram::SharedDtor() {
}

void FrameTimingHistogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTimingHistogram& FrameTimingHistogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTimingHistogram_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto.base);
  return *internal_default_instance();
}


void FrameTimingHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.FrameTimingHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_millis_buckets_.Clear();
  frame_counts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameTimingHistogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 time_millis_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_time_millis_buckets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_time_millis_buckets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 frame_counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_frame_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_frame_counts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameTimingHistogram::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.FrameTimingHistogram)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 time_millis_buckets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_time_millis_buckets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_time_millis_buckets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 frame_counts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_frame_counts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_frame_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.FrameTimingHistogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.FrameTimingHistogram)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameTimingHistogram::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.FrameTimingHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 time_millis_buckets = 1;
  for (int i = 0, n = this->time_millis_buckets_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->time_millis_buckets(i), output);
  }

  // repeated int64 frame_counts = 2;
  for (int i = 0, n = this->frame_counts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->frame_counts(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.FrameTimingHistogram)
}

size_t FrameTimingHistogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.FrameTimingHistogram)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 time_millis_buckets = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->time_millis_buckets_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->time_millis_buckets_size());
    total_size += data_size;
  }

  // repeated int64 frame_counts = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->frame_counts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->frame_counts_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTimingHistogram::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameTimingHistogram*>(
      &from));
}

void FrameTimingHistogram::MergeFrom(const FrameTimingHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.FrameTimingHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_millis_buckets_.MergeFrom(from.time_millis_buckets_);
  frame_counts_.MergeFrom(from.frame_counts_);
}

void FrameTimingHistogram::CopyFrom(const FrameTimingHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.FrameTimingHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTimingHistogram::IsInitialized() const {
  return true;
}

void FrameTimingHistogram::InternalSwap(FrameTimingHistogram* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_millis_buckets_.InternalSwap(&other->time_millis_buckets_);
  frame_counts_.InternalSwap(&other->frame_counts_);
}

std::string FrameTimingHistogram::GetTypeName() const {
  return "android.surfaceflinger.FrameTimingHistogram";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* Arena::CreateMaybeMessage< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::FrameTimingHistogram* Arena::CreateMaybeMessage< ::android::surfaceflinger::FrameTimingHistogram >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::FrameTimingHistogram >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
