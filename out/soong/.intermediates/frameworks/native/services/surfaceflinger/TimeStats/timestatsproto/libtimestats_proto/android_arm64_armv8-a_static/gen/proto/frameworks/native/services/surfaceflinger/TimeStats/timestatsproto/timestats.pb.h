// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/TimeStats/timestatsproto/timestats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class SFTimeStatsDeltaProto;
class SFTimeStatsDeltaProtoDefaultTypeInternal;
extern SFTimeStatsDeltaProtoDefaultTypeInternal _SFTimeStatsDeltaProto_default_instance_;
class SFTimeStatsDisplayConfigBucketProto;
class SFTimeStatsDisplayConfigBucketProtoDefaultTypeInternal;
extern SFTimeStatsDisplayConfigBucketProtoDefaultTypeInternal _SFTimeStatsDisplayConfigBucketProto_default_instance_;
class SFTimeStatsDisplayConfigProto;
class SFTimeStatsDisplayConfigProtoDefaultTypeInternal;
extern SFTimeStatsDisplayConfigProtoDefaultTypeInternal _SFTimeStatsDisplayConfigProto_default_instance_;
class SFTimeStatsGlobalProto;
class SFTimeStatsGlobalProtoDefaultTypeInternal;
extern SFTimeStatsGlobalProtoDefaultTypeInternal _SFTimeStatsGlobalProto_default_instance_;
class SFTimeStatsHistogramBucketProto;
class SFTimeStatsHistogramBucketProtoDefaultTypeInternal;
extern SFTimeStatsHistogramBucketProtoDefaultTypeInternal _SFTimeStatsHistogramBucketProto_default_instance_;
class SFTimeStatsLayerProto;
class SFTimeStatsLayerProtoDefaultTypeInternal;
extern SFTimeStatsLayerProtoDefaultTypeInternal _SFTimeStatsLayerProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::SFTimeStatsDeltaProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsDeltaProto>(Arena*);
template<> ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto>(Arena*);
template<> ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsDisplayConfigProto>(Arena*);
template<> ::android::surfaceflinger::SFTimeStatsGlobalProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsGlobalProto>(Arena*);
template<> ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsHistogramBucketProto>(Arena*);
template<> ::android::surfaceflinger::SFTimeStatsLayerProto* Arena::CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsLayerProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

// ===================================================================

class SFTimeStatsGlobalProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsGlobalProto) */ {
 public:
  SFTimeStatsGlobalProto();
  virtual ~SFTimeStatsGlobalProto();

  SFTimeStatsGlobalProto(const SFTimeStatsGlobalProto& from);
  SFTimeStatsGlobalProto(SFTimeStatsGlobalProto&& from) noexcept
    : SFTimeStatsGlobalProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsGlobalProto& operator=(const SFTimeStatsGlobalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsGlobalProto& operator=(SFTimeStatsGlobalProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsGlobalProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsGlobalProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsGlobalProto*>(
               &_SFTimeStatsGlobalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SFTimeStatsGlobalProto& a, SFTimeStatsGlobalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsGlobalProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsGlobalProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsGlobalProto>(nullptr);
  }

  SFTimeStatsGlobalProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsGlobalProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsGlobalProto& from);
  void MergeFrom(const SFTimeStatsGlobalProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsGlobalProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsGlobalProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 6,
    kPresentToPresentFieldNumber = 8,
    kDisplayConfigStatsFieldNumber = 9,
    kFrameDurationFieldNumber = 10,
    kRenderEngineTimingFieldNumber = 11,
    kStatsStartFieldNumber = 1,
    kStatsEndFieldNumber = 2,
    kTotalFramesFieldNumber = 3,
    kMissedFramesFieldNumber = 4,
    kDisplayOnTimeFieldNumber = 7,
    kClientCompositionFramesFieldNumber = 5,
  };
  // repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
  int stats_size() const;
  void clear_stats();
  ::android::surfaceflinger::SFTimeStatsLayerProto* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsLayerProto >*
      mutable_stats();
  const ::android::surfaceflinger::SFTimeStatsLayerProto& stats(int index) const;
  ::android::surfaceflinger::SFTimeStatsLayerProto* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsLayerProto >&
      stats() const;

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
  int present_to_present_size() const;
  void clear_present_to_present();
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* mutable_present_to_present(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
      mutable_present_to_present();
  const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& present_to_present(int index) const;
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* add_present_to_present();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
      present_to_present() const;

  // repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
  int display_config_stats_size() const;
  void clear_display_config_stats();
  ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* mutable_display_config_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >*
      mutable_display_config_stats();
  const ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto& display_config_stats(int index) const;
  ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* add_display_config_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >&
      display_config_stats() const;

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
  int frame_duration_size() const;
  void clear_frame_duration();
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* mutable_frame_duration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
      mutable_frame_duration();
  const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& frame_duration(int index) const;
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* add_frame_duration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
      frame_duration() const;

  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
  int render_engine_timing_size() const;
  void clear_render_engine_timing();
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* mutable_render_engine_timing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
      mutable_render_engine_timing();
  const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& render_engine_timing(int index) const;
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* add_render_engine_timing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
      render_engine_timing() const;

  // optional int64 stats_start = 1;
  bool has_stats_start() const;
  void clear_stats_start();
  ::PROTOBUF_NAMESPACE_ID::int64 stats_start() const;
  void set_stats_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 stats_end = 2;
  bool has_stats_end() const;
  void clear_stats_end();
  ::PROTOBUF_NAMESPACE_ID::int64 stats_end() const;
  void set_stats_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 total_frames = 3;
  bool has_total_frames() const;
  void clear_total_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_frames() const;
  void set_total_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 missed_frames = 4;
  bool has_missed_frames() const;
  void clear_missed_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 missed_frames() const;
  void set_missed_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 display_on_time = 7;
  bool has_display_on_time() const;
  void clear_display_on_time();
  ::PROTOBUF_NAMESPACE_ID::int64 display_on_time() const;
  void set_display_on_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 client_composition_frames = 5;
  bool has_client_composition_frames() const;
  void clear_client_composition_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 client_composition_frames() const;
  void set_client_composition_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsGlobalProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsLayerProto > stats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto > present_to_present_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto > display_config_stats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto > frame_duration_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto > render_engine_timing_;
  ::PROTOBUF_NAMESPACE_ID::int64 stats_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 stats_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 missed_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 display_on_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_composition_frames_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// -------------------------------------------------------------------

class SFTimeStatsLayerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsLayerProto) */ {
 public:
  SFTimeStatsLayerProto();
  virtual ~SFTimeStatsLayerProto();

  SFTimeStatsLayerProto(const SFTimeStatsLayerProto& from);
  SFTimeStatsLayerProto(SFTimeStatsLayerProto&& from) noexcept
    : SFTimeStatsLayerProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsLayerProto& operator=(const SFTimeStatsLayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsLayerProto& operator=(SFTimeStatsLayerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsLayerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsLayerProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsLayerProto*>(
               &_SFTimeStatsLayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SFTimeStatsLayerProto& a, SFTimeStatsLayerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsLayerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsLayerProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsLayerProto>(nullptr);
  }

  SFTimeStatsLayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsLayerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsLayerProto& from);
  void MergeFrom(const SFTimeStatsLayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsLayerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsLayerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltasFieldNumber = 6,
    kLayerNameFieldNumber = 1,
    kPackageNameFieldNumber = 2,
    kStatsStartFieldNumber = 3,
    kStatsEndFieldNumber = 4,
    kTotalFramesFieldNumber = 5,
    kDroppedFramesFieldNumber = 7,
  };
  // repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
  int deltas_size() const;
  void clear_deltas();
  ::android::surfaceflinger::SFTimeStatsDeltaProto* mutable_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDeltaProto >*
      mutable_deltas();
  const ::android::surfaceflinger::SFTimeStatsDeltaProto& deltas(int index) const;
  ::android::surfaceflinger::SFTimeStatsDeltaProto* add_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDeltaProto >&
      deltas() const;

  // optional string layer_name = 1;
  bool has_layer_name() const;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);

  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int64 stats_start = 3;
  bool has_stats_start() const;
  void clear_stats_start();
  ::PROTOBUF_NAMESPACE_ID::int64 stats_start() const;
  void set_stats_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 stats_end = 4;
  bool has_stats_end() const;
  void clear_stats_end();
  ::PROTOBUF_NAMESPACE_ID::int64 stats_end() const;
  void set_stats_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 total_frames = 5;
  bool has_total_frames() const;
  void clear_total_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_frames() const;
  void set_total_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dropped_frames = 7;
  bool has_dropped_frames() const;
  void clear_dropped_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_frames() const;
  void set_dropped_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsLayerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDeltaProto > deltas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 stats_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 stats_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropped_frames_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// -------------------------------------------------------------------

class SFTimeStatsDeltaProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsDeltaProto) */ {
 public:
  SFTimeStatsDeltaProto();
  virtual ~SFTimeStatsDeltaProto();

  SFTimeStatsDeltaProto(const SFTimeStatsDeltaProto& from);
  SFTimeStatsDeltaProto(SFTimeStatsDeltaProto&& from) noexcept
    : SFTimeStatsDeltaProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsDeltaProto& operator=(const SFTimeStatsDeltaProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsDeltaProto& operator=(SFTimeStatsDeltaProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsDeltaProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsDeltaProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsDeltaProto*>(
               &_SFTimeStatsDeltaProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SFTimeStatsDeltaProto& a, SFTimeStatsDeltaProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsDeltaProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsDeltaProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsDeltaProto>(nullptr);
  }

  SFTimeStatsDeltaProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsDeltaProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsDeltaProto& from);
  void MergeFrom(const SFTimeStatsDeltaProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsDeltaProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsDeltaProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistogramsFieldNumber = 2,
    kDeltaNameFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
  int histograms_size() const;
  void clear_histograms();
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* mutable_histograms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
      mutable_histograms();
  const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& histograms(int index) const;
  ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* add_histograms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
      histograms() const;

  // optional string delta_name = 1;
  bool has_delta_name() const;
  void clear_delta_name();
  const std::string& delta_name() const;
  void set_delta_name(const std::string& value);
  void set_delta_name(std::string&& value);
  void set_delta_name(const char* value);
  void set_delta_name(const char* value, size_t size);
  std::string* mutable_delta_name();
  std::string* release_delta_name();
  void set_allocated_delta_name(std::string* delta_name);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsDeltaProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto > histograms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_name_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// -------------------------------------------------------------------

class SFTimeStatsHistogramBucketProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsHistogramBucketProto) */ {
 public:
  SFTimeStatsHistogramBucketProto();
  virtual ~SFTimeStatsHistogramBucketProto();

  SFTimeStatsHistogramBucketProto(const SFTimeStatsHistogramBucketProto& from);
  SFTimeStatsHistogramBucketProto(SFTimeStatsHistogramBucketProto&& from) noexcept
    : SFTimeStatsHistogramBucketProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsHistogramBucketProto& operator=(const SFTimeStatsHistogramBucketProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsHistogramBucketProto& operator=(SFTimeStatsHistogramBucketProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsHistogramBucketProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsHistogramBucketProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsHistogramBucketProto*>(
               &_SFTimeStatsHistogramBucketProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SFTimeStatsHistogramBucketProto& a, SFTimeStatsHistogramBucketProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsHistogramBucketProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsHistogramBucketProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsHistogramBucketProto>(nullptr);
  }

  SFTimeStatsHistogramBucketProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsHistogramBucketProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsHistogramBucketProto& from);
  void MergeFrom(const SFTimeStatsHistogramBucketProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsHistogramBucketProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsHistogramBucketProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeMillisFieldNumber = 1,
    kFrameCountFieldNumber = 2,
  };
  // optional int32 time_millis = 1;
  bool has_time_millis() const;
  void clear_time_millis();
  ::PROTOBUF_NAMESPACE_ID::int32 time_millis() const;
  void set_time_millis(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 frame_count = 2;
  bool has_frame_count() const;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsHistogramBucketProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// -------------------------------------------------------------------

class SFTimeStatsDisplayConfigBucketProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto) */ {
 public:
  SFTimeStatsDisplayConfigBucketProto();
  virtual ~SFTimeStatsDisplayConfigBucketProto();

  SFTimeStatsDisplayConfigBucketProto(const SFTimeStatsDisplayConfigBucketProto& from);
  SFTimeStatsDisplayConfigBucketProto(SFTimeStatsDisplayConfigBucketProto&& from) noexcept
    : SFTimeStatsDisplayConfigBucketProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsDisplayConfigBucketProto& operator=(const SFTimeStatsDisplayConfigBucketProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsDisplayConfigBucketProto& operator=(SFTimeStatsDisplayConfigBucketProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsDisplayConfigBucketProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsDisplayConfigBucketProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsDisplayConfigBucketProto*>(
               &_SFTimeStatsDisplayConfigBucketProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SFTimeStatsDisplayConfigBucketProto& a, SFTimeStatsDisplayConfigBucketProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsDisplayConfigBucketProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsDisplayConfigBucketProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsDisplayConfigBucketProto>(nullptr);
  }

  SFTimeStatsDisplayConfigBucketProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsDisplayConfigBucketProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsDisplayConfigBucketProto& from);
  void MergeFrom(const SFTimeStatsDisplayConfigBucketProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsDisplayConfigBucketProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kDurationMillisFieldNumber = 2,
  };
  // optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
  bool has_config() const;
  void clear_config();
  const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto& config() const;
  ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* release_config();
  ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* mutable_config();
  void set_allocated_config(::android::surfaceflinger::SFTimeStatsDisplayConfigProto* config);

  // optional int64 duration_millis = 2;
  bool has_duration_millis() const;
  void clear_duration_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis() const;
  void set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* config_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// -------------------------------------------------------------------

class SFTimeStatsDisplayConfigProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SFTimeStatsDisplayConfigProto) */ {
 public:
  SFTimeStatsDisplayConfigProto();
  virtual ~SFTimeStatsDisplayConfigProto();

  SFTimeStatsDisplayConfigProto(const SFTimeStatsDisplayConfigProto& from);
  SFTimeStatsDisplayConfigProto(SFTimeStatsDisplayConfigProto&& from) noexcept
    : SFTimeStatsDisplayConfigProto() {
    *this = ::std::move(from);
  }

  inline SFTimeStatsDisplayConfigProto& operator=(const SFTimeStatsDisplayConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFTimeStatsDisplayConfigProto& operator=(SFTimeStatsDisplayConfigProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SFTimeStatsDisplayConfigProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFTimeStatsDisplayConfigProto* internal_default_instance() {
    return reinterpret_cast<const SFTimeStatsDisplayConfigProto*>(
               &_SFTimeStatsDisplayConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SFTimeStatsDisplayConfigProto& a, SFTimeStatsDisplayConfigProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SFTimeStatsDisplayConfigProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFTimeStatsDisplayConfigProto* New() const final {
    return CreateMaybeMessage<SFTimeStatsDisplayConfigProto>(nullptr);
  }

  SFTimeStatsDisplayConfigProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFTimeStatsDisplayConfigProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SFTimeStatsDisplayConfigProto& from);
  void MergeFrom(const SFTimeStatsDisplayConfigProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SFTimeStatsDisplayConfigProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SFTimeStatsDisplayConfigProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsFieldNumber = 1,
  };
  // optional int32 fps = 1;
  bool has_fps() const;
  void clear_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 fps() const;
  void set_fps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SFTimeStatsDisplayConfigProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fps_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SFTimeStatsGlobalProto

// optional int64 stats_start = 1;
inline bool SFTimeStatsGlobalProto::has_stats_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_stats_start() {
  stats_start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsGlobalProto::stats_start() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.stats_start)
  return stats_start_;
}
inline void SFTimeStatsGlobalProto::set_stats_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  stats_start_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.stats_start)
}

// optional int64 stats_end = 2;
inline bool SFTimeStatsGlobalProto::has_stats_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_stats_end() {
  stats_end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsGlobalProto::stats_end() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.stats_end)
  return stats_end_;
}
inline void SFTimeStatsGlobalProto::set_stats_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  stats_end_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.stats_end)
}

// optional int32 total_frames = 3;
inline bool SFTimeStatsGlobalProto::has_total_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_total_frames() {
  total_frames_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsGlobalProto::total_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.total_frames)
  return total_frames_;
}
inline void SFTimeStatsGlobalProto::set_total_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.total_frames)
}

// optional int32 missed_frames = 4;
inline bool SFTimeStatsGlobalProto::has_missed_frames() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_missed_frames() {
  missed_frames_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsGlobalProto::missed_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.missed_frames)
  return missed_frames_;
}
inline void SFTimeStatsGlobalProto::set_missed_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  missed_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.missed_frames)
}

// optional int32 client_composition_frames = 5;
inline bool SFTimeStatsGlobalProto::has_client_composition_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_client_composition_frames() {
  client_composition_frames_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsGlobalProto::client_composition_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.client_composition_frames)
  return client_composition_frames_;
}
inline void SFTimeStatsGlobalProto::set_client_composition_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  client_composition_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.client_composition_frames)
}

// optional int64 display_on_time = 7;
inline bool SFTimeStatsGlobalProto::has_display_on_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SFTimeStatsGlobalProto::clear_display_on_time() {
  display_on_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsGlobalProto::display_on_time() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.display_on_time)
  return display_on_time_;
}
inline void SFTimeStatsGlobalProto::set_display_on_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  display_on_time_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsGlobalProto.display_on_time)
}

// repeated .android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto display_config_stats = 9;
inline int SFTimeStatsGlobalProto::display_config_stats_size() const {
  return display_config_stats_.size();
}
inline void SFTimeStatsGlobalProto::clear_display_config_stats() {
  display_config_stats_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* SFTimeStatsGlobalProto::mutable_display_config_stats(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsGlobalProto.display_config_stats)
  return display_config_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >*
SFTimeStatsGlobalProto::mutable_display_config_stats() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsGlobalProto.display_config_stats)
  return &display_config_stats_;
}
inline const ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto& SFTimeStatsGlobalProto::display_config_stats(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.display_config_stats)
  return display_config_stats_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto* SFTimeStatsGlobalProto::add_display_config_stats() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsGlobalProto.display_config_stats)
  return display_config_stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDisplayConfigBucketProto >&
SFTimeStatsGlobalProto::display_config_stats() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsGlobalProto.display_config_stats)
  return display_config_stats_;
}

// repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto present_to_present = 8;
inline int SFTimeStatsGlobalProto::present_to_present_size() const {
  return present_to_present_.size();
}
inline void SFTimeStatsGlobalProto::clear_present_to_present() {
  present_to_present_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::mutable_present_to_present(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsGlobalProto.present_to_present)
  return present_to_present_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
SFTimeStatsGlobalProto::mutable_present_to_present() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsGlobalProto.present_to_present)
  return &present_to_present_;
}
inline const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& SFTimeStatsGlobalProto::present_to_present(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.present_to_present)
  return present_to_present_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::add_present_to_present() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsGlobalProto.present_to_present)
  return present_to_present_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
SFTimeStatsGlobalProto::present_to_present() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsGlobalProto.present_to_present)
  return present_to_present_;
}

// repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto frame_duration = 10;
inline int SFTimeStatsGlobalProto::frame_duration_size() const {
  return frame_duration_.size();
}
inline void SFTimeStatsGlobalProto::clear_frame_duration() {
  frame_duration_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::mutable_frame_duration(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsGlobalProto.frame_duration)
  return frame_duration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
SFTimeStatsGlobalProto::mutable_frame_duration() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsGlobalProto.frame_duration)
  return &frame_duration_;
}
inline const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& SFTimeStatsGlobalProto::frame_duration(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.frame_duration)
  return frame_duration_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::add_frame_duration() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsGlobalProto.frame_duration)
  return frame_duration_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
SFTimeStatsGlobalProto::frame_duration() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsGlobalProto.frame_duration)
  return frame_duration_;
}

// repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto render_engine_timing = 11;
inline int SFTimeStatsGlobalProto::render_engine_timing_size() const {
  return render_engine_timing_.size();
}
inline void SFTimeStatsGlobalProto::clear_render_engine_timing() {
  render_engine_timing_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::mutable_render_engine_timing(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsGlobalProto.render_engine_timing)
  return render_engine_timing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
SFTimeStatsGlobalProto::mutable_render_engine_timing() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsGlobalProto.render_engine_timing)
  return &render_engine_timing_;
}
inline const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& SFTimeStatsGlobalProto::render_engine_timing(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.render_engine_timing)
  return render_engine_timing_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsGlobalProto::add_render_engine_timing() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsGlobalProto.render_engine_timing)
  return render_engine_timing_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
SFTimeStatsGlobalProto::render_engine_timing() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsGlobalProto.render_engine_timing)
  return render_engine_timing_;
}

// repeated .android.surfaceflinger.SFTimeStatsLayerProto stats = 6;
inline int SFTimeStatsGlobalProto::stats_size() const {
  return stats_.size();
}
inline void SFTimeStatsGlobalProto::clear_stats() {
  stats_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsLayerProto* SFTimeStatsGlobalProto::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsGlobalProto.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsLayerProto >*
SFTimeStatsGlobalProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsGlobalProto.stats)
  return &stats_;
}
inline const ::android::surfaceflinger::SFTimeStatsLayerProto& SFTimeStatsGlobalProto::stats(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsGlobalProto.stats)
  return stats_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsLayerProto* SFTimeStatsGlobalProto::add_stats() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsGlobalProto.stats)
  return stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsLayerProto >&
SFTimeStatsGlobalProto::stats() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsGlobalProto.stats)
  return stats_;
}

// -------------------------------------------------------------------

// SFTimeStatsLayerProto

// optional string layer_name = 1;
inline bool SFTimeStatsLayerProto::has_layer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsLayerProto::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SFTimeStatsLayerProto::layer_name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
  return layer_name_.GetNoArena();
}
inline void SFTimeStatsLayerProto::set_layer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
}
inline void SFTimeStatsLayerProto::set_layer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
}
inline void SFTimeStatsLayerProto::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
}
inline void SFTimeStatsLayerProto::set_layer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
}
inline std::string* SFTimeStatsLayerProto::mutable_layer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
  return layer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SFTimeStatsLayerProto::release_layer_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
  if (!has_layer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SFTimeStatsLayerProto::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SFTimeStatsLayerProto.layer_name)
}

// optional string package_name = 2;
inline bool SFTimeStatsLayerProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFTimeStatsLayerProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SFTimeStatsLayerProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
  return package_name_.GetNoArena();
}
inline void SFTimeStatsLayerProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
}
inline void SFTimeStatsLayerProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
}
inline void SFTimeStatsLayerProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
}
inline void SFTimeStatsLayerProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
}
inline std::string* SFTimeStatsLayerProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SFTimeStatsLayerProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SFTimeStatsLayerProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SFTimeStatsLayerProto.package_name)
}

// optional int64 stats_start = 3;
inline bool SFTimeStatsLayerProto::has_stats_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SFTimeStatsLayerProto::clear_stats_start() {
  stats_start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsLayerProto::stats_start() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.stats_start)
  return stats_start_;
}
inline void SFTimeStatsLayerProto::set_stats_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  stats_start_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.stats_start)
}

// optional int64 stats_end = 4;
inline bool SFTimeStatsLayerProto::has_stats_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SFTimeStatsLayerProto::clear_stats_end() {
  stats_end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsLayerProto::stats_end() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.stats_end)
  return stats_end_;
}
inline void SFTimeStatsLayerProto::set_stats_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  stats_end_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.stats_end)
}

// optional int32 total_frames = 5;
inline bool SFTimeStatsLayerProto::has_total_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SFTimeStatsLayerProto::clear_total_frames() {
  total_frames_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsLayerProto::total_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.total_frames)
  return total_frames_;
}
inline void SFTimeStatsLayerProto::set_total_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.total_frames)
}

// optional int32 dropped_frames = 7;
inline bool SFTimeStatsLayerProto::has_dropped_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SFTimeStatsLayerProto::clear_dropped_frames() {
  dropped_frames_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsLayerProto::dropped_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.dropped_frames)
  return dropped_frames_;
}
inline void SFTimeStatsLayerProto::set_dropped_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  dropped_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsLayerProto.dropped_frames)
}

// repeated .android.surfaceflinger.SFTimeStatsDeltaProto deltas = 6;
inline int SFTimeStatsLayerProto::deltas_size() const {
  return deltas_.size();
}
inline void SFTimeStatsLayerProto::clear_deltas() {
  deltas_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsDeltaProto* SFTimeStatsLayerProto::mutable_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsLayerProto.deltas)
  return deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDeltaProto >*
SFTimeStatsLayerProto::mutable_deltas() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsLayerProto.deltas)
  return &deltas_;
}
inline const ::android::surfaceflinger::SFTimeStatsDeltaProto& SFTimeStatsLayerProto::deltas(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsLayerProto.deltas)
  return deltas_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsDeltaProto* SFTimeStatsLayerProto::add_deltas() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsLayerProto.deltas)
  return deltas_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsDeltaProto >&
SFTimeStatsLayerProto::deltas() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsLayerProto.deltas)
  return deltas_;
}

// -------------------------------------------------------------------

// SFTimeStatsDeltaProto

// optional string delta_name = 1;
inline bool SFTimeStatsDeltaProto::has_delta_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsDeltaProto::clear_delta_name() {
  delta_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SFTimeStatsDeltaProto::delta_name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
  return delta_name_.GetNoArena();
}
inline void SFTimeStatsDeltaProto::set_delta_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  delta_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
}
inline void SFTimeStatsDeltaProto::set_delta_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  delta_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
}
inline void SFTimeStatsDeltaProto::set_delta_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  delta_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
}
inline void SFTimeStatsDeltaProto::set_delta_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  delta_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
}
inline std::string* SFTimeStatsDeltaProto::mutable_delta_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
  return delta_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SFTimeStatsDeltaProto::release_delta_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
  if (!has_delta_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return delta_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SFTimeStatsDeltaProto::set_allocated_delta_name(std::string* delta_name) {
  if (delta_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  delta_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SFTimeStatsDeltaProto.delta_name)
}

// repeated .android.surfaceflinger.SFTimeStatsHistogramBucketProto histograms = 2;
inline int SFTimeStatsDeltaProto::histograms_size() const {
  return histograms_.size();
}
inline void SFTimeStatsDeltaProto::clear_histograms() {
  histograms_.Clear();
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsDeltaProto::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsDeltaProto.histograms)
  return histograms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >*
SFTimeStatsDeltaProto::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SFTimeStatsDeltaProto.histograms)
  return &histograms_;
}
inline const ::android::surfaceflinger::SFTimeStatsHistogramBucketProto& SFTimeStatsDeltaProto::histograms(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsDeltaProto.histograms)
  return histograms_.Get(index);
}
inline ::android::surfaceflinger::SFTimeStatsHistogramBucketProto* SFTimeStatsDeltaProto::add_histograms() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SFTimeStatsDeltaProto.histograms)
  return histograms_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SFTimeStatsHistogramBucketProto >&
SFTimeStatsDeltaProto::histograms() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SFTimeStatsDeltaProto.histograms)
  return histograms_;
}

// -------------------------------------------------------------------

// SFTimeStatsHistogramBucketProto

// optional int32 time_millis = 1;
inline bool SFTimeStatsHistogramBucketProto::has_time_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsHistogramBucketProto::clear_time_millis() {
  time_millis_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsHistogramBucketProto::time_millis() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsHistogramBucketProto.time_millis)
  return time_millis_;
}
inline void SFTimeStatsHistogramBucketProto::set_time_millis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  time_millis_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsHistogramBucketProto.time_millis)
}

// optional int32 frame_count = 2;
inline bool SFTimeStatsHistogramBucketProto::has_frame_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFTimeStatsHistogramBucketProto::clear_frame_count() {
  frame_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsHistogramBucketProto::frame_count() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsHistogramBucketProto.frame_count)
  return frame_count_;
}
inline void SFTimeStatsHistogramBucketProto::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsHistogramBucketProto.frame_count)
}

// -------------------------------------------------------------------

// SFTimeStatsDisplayConfigBucketProto

// optional .android.surfaceflinger.SFTimeStatsDisplayConfigProto config = 1;
inline bool SFTimeStatsDisplayConfigBucketProto::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsDisplayConfigBucketProto::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto& SFTimeStatsDisplayConfigBucketProto::config() const {
  const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* p = config_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::SFTimeStatsDisplayConfigProto*>(
      &::android::surfaceflinger::_SFTimeStatsDisplayConfigProto_default_instance_);
}
inline ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* SFTimeStatsDisplayConfigBucketProto::release_config() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.config)
  _has_bits_[0] &= ~0x00000001u;
  ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::SFTimeStatsDisplayConfigProto* SFTimeStatsDisplayConfigBucketProto::mutable_config() {
  _has_bits_[0] |= 0x00000001u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::SFTimeStatsDisplayConfigProto>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.config)
  return config_;
}
inline void SFTimeStatsDisplayConfigBucketProto::set_allocated_config(::android::surfaceflinger::SFTimeStatsDisplayConfigProto* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.config)
}

// optional int64 duration_millis = 2;
inline bool SFTimeStatsDisplayConfigBucketProto::has_duration_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SFTimeStatsDisplayConfigBucketProto::clear_duration_millis() {
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFTimeStatsDisplayConfigBucketProto::duration_millis() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.duration_millis)
  return duration_millis_;
}
inline void SFTimeStatsDisplayConfigBucketProto::set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_millis_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsDisplayConfigBucketProto.duration_millis)
}

// -------------------------------------------------------------------

// SFTimeStatsDisplayConfigProto

// optional int32 fps = 1;
inline bool SFTimeStatsDisplayConfigProto::has_fps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SFTimeStatsDisplayConfigProto::clear_fps() {
  fps_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFTimeStatsDisplayConfigProto::fps() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SFTimeStatsDisplayConfigProto.fps)
  return fps_;
}
inline void SFTimeStatsDisplayConfigProto::set_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fps_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SFTimeStatsDisplayConfigProto.fps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsproto_2ftimestats_2eproto
