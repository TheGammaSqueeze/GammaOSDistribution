// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/TimeStats/timestatsatomsproto/timestats_atoms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class FrameTimingHistogram;
class FrameTimingHistogramDefaultTypeInternal;
extern FrameTimingHistogramDefaultTypeInternal _FrameTimingHistogram_default_instance_;
class SurfaceflingerStatsGlobalInfo;
class SurfaceflingerStatsGlobalInfoDefaultTypeInternal;
extern SurfaceflingerStatsGlobalInfoDefaultTypeInternal _SurfaceflingerStatsGlobalInfo_default_instance_;
class SurfaceflingerStatsGlobalInfoWrapper;
class SurfaceflingerStatsGlobalInfoWrapperDefaultTypeInternal;
extern SurfaceflingerStatsGlobalInfoWrapperDefaultTypeInternal _SurfaceflingerStatsGlobalInfoWrapper_default_instance_;
class SurfaceflingerStatsLayerInfo;
class SurfaceflingerStatsLayerInfoDefaultTypeInternal;
extern SurfaceflingerStatsLayerInfoDefaultTypeInternal _SurfaceflingerStatsLayerInfo_default_instance_;
class SurfaceflingerStatsLayerInfoWrapper;
class SurfaceflingerStatsLayerInfoWrapperDefaultTypeInternal;
extern SurfaceflingerStatsLayerInfoWrapperDefaultTypeInternal _SurfaceflingerStatsLayerInfoWrapper_default_instance_;
class SurfaceflingerStatsLayerInfo_SetFrameRateVote;
class SurfaceflingerStatsLayerInfo_SetFrameRateVoteDefaultTypeInternal;
extern SurfaceflingerStatsLayerInfo_SetFrameRateVoteDefaultTypeInternal _SurfaceflingerStatsLayerInfo_SetFrameRateVote_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::FrameTimingHistogram* Arena::CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(Arena*);
template<> ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsGlobalInfo>(Arena*);
template<> ::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsGlobalInfoWrapper>(Arena*);
template<> ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsLayerInfo>(Arena*);
template<> ::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsLayerInfoWrapper>(Arena*);
template<> ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* Arena::CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

enum SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility : int {
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_UNDEFINED = 0,
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_DEFAULT = 1,
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_EXACT_OR_MULTIPLE = 2
};
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(int value);
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_MIN = SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_UNDEFINED;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_MAX = SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_EXACT_OR_MULTIPLE;
constexpr int SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_ARRAYSIZE = SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_MAX + 1;

const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name(SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility value);
template<typename T>
inline const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name.");
  return SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name(static_cast<SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility>(enum_t_value));
}
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility* value);
enum SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness : int {
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_UNDEFINED = 0,
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_SHOULD_BE_SEAMLESS = 1,
  SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_NOT_REQUIRED = 2
};
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(int value);
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_MIN = SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_UNDEFINED;
constexpr SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_MAX = SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_NOT_REQUIRED;
constexpr int SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_ARRAYSIZE = SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_MAX + 1;

const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name(SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness value);
template<typename T>
inline const std::string& SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name.");
  return SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name(static_cast<SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness>(enum_t_value));
}
bool SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness* value);
enum SurfaceflingerStatsLayerInfo_GameMode : int {
  SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_UNSPECIFIED = 0,
  SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_UNSUPPORTED = 1,
  SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_STANDARD = 2,
  SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_PERFORMANCE = 3,
  SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_BATTERY = 4
};
bool SurfaceflingerStatsLayerInfo_GameMode_IsValid(int value);
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo_GameMode_GameMode_MIN = SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_UNSPECIFIED;
constexpr SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo_GameMode_GameMode_MAX = SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_BATTERY;
constexpr int SurfaceflingerStatsLayerInfo_GameMode_GameMode_ARRAYSIZE = SurfaceflingerStatsLayerInfo_GameMode_GameMode_MAX + 1;

const std::string& SurfaceflingerStatsLayerInfo_GameMode_Name(SurfaceflingerStatsLayerInfo_GameMode value);
template<typename T>
inline const std::string& SurfaceflingerStatsLayerInfo_GameMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceflingerStatsLayerInfo_GameMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceflingerStatsLayerInfo_GameMode_Name.");
  return SurfaceflingerStatsLayerInfo_GameMode_Name(static_cast<SurfaceflingerStatsLayerInfo_GameMode>(enum_t_value));
}
bool SurfaceflingerStatsLayerInfo_GameMode_Parse(
    const std::string& name, SurfaceflingerStatsLayerInfo_GameMode* value);
// ===================================================================

class SurfaceflingerStatsGlobalInfoWrapper :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper) */ {
 public:
  SurfaceflingerStatsGlobalInfoWrapper();
  virtual ~SurfaceflingerStatsGlobalInfoWrapper();

  SurfaceflingerStatsGlobalInfoWrapper(const SurfaceflingerStatsGlobalInfoWrapper& from);
  SurfaceflingerStatsGlobalInfoWrapper(SurfaceflingerStatsGlobalInfoWrapper&& from) noexcept
    : SurfaceflingerStatsGlobalInfoWrapper() {
    *this = ::std::move(from);
  }

  inline SurfaceflingerStatsGlobalInfoWrapper& operator=(const SurfaceflingerStatsGlobalInfoWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceflingerStatsGlobalInfoWrapper& operator=(SurfaceflingerStatsGlobalInfoWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceflingerStatsGlobalInfoWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceflingerStatsGlobalInfoWrapper* internal_default_instance() {
    return reinterpret_cast<const SurfaceflingerStatsGlobalInfoWrapper*>(
               &_SurfaceflingerStatsGlobalInfoWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SurfaceflingerStatsGlobalInfoWrapper& a, SurfaceflingerStatsGlobalInfoWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceflingerStatsGlobalInfoWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceflingerStatsGlobalInfoWrapper* New() const final {
    return CreateMaybeMessage<SurfaceflingerStatsGlobalInfoWrapper>(nullptr);
  }

  SurfaceflingerStatsGlobalInfoWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceflingerStatsGlobalInfoWrapper>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceflingerStatsGlobalInfoWrapper& from);
  void MergeFrom(const SurfaceflingerStatsGlobalInfoWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceflingerStatsGlobalInfoWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
  int atom_size() const;
  void clear_atom();
  ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* mutable_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >*
      mutable_atom();
  const ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo& atom(int index) const;
  ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* add_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >&
      atom() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo > atom_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// -------------------------------------------------------------------

class SurfaceflingerStatsLayerInfoWrapper :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper) */ {
 public:
  SurfaceflingerStatsLayerInfoWrapper();
  virtual ~SurfaceflingerStatsLayerInfoWrapper();

  SurfaceflingerStatsLayerInfoWrapper(const SurfaceflingerStatsLayerInfoWrapper& from);
  SurfaceflingerStatsLayerInfoWrapper(SurfaceflingerStatsLayerInfoWrapper&& from) noexcept
    : SurfaceflingerStatsLayerInfoWrapper() {
    *this = ::std::move(from);
  }

  inline SurfaceflingerStatsLayerInfoWrapper& operator=(const SurfaceflingerStatsLayerInfoWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceflingerStatsLayerInfoWrapper& operator=(SurfaceflingerStatsLayerInfoWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceflingerStatsLayerInfoWrapper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceflingerStatsLayerInfoWrapper* internal_default_instance() {
    return reinterpret_cast<const SurfaceflingerStatsLayerInfoWrapper*>(
               &_SurfaceflingerStatsLayerInfoWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SurfaceflingerStatsLayerInfoWrapper& a, SurfaceflingerStatsLayerInfoWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceflingerStatsLayerInfoWrapper* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceflingerStatsLayerInfoWrapper* New() const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfoWrapper>(nullptr);
  }

  SurfaceflingerStatsLayerInfoWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfoWrapper>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceflingerStatsLayerInfoWrapper& from);
  void MergeFrom(const SurfaceflingerStatsLayerInfoWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceflingerStatsLayerInfoWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
  int atom_size() const;
  void clear_atom();
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* mutable_atom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >*
      mutable_atom();
  const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo& atom(int index) const;
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* add_atom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >&
      atom() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo > atom_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// -------------------------------------------------------------------

class SurfaceflingerStatsGlobalInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceflingerStatsGlobalInfo) */ {
 public:
  SurfaceflingerStatsGlobalInfo();
  virtual ~SurfaceflingerStatsGlobalInfo();

  SurfaceflingerStatsGlobalInfo(const SurfaceflingerStatsGlobalInfo& from);
  SurfaceflingerStatsGlobalInfo(SurfaceflingerStatsGlobalInfo&& from) noexcept
    : SurfaceflingerStatsGlobalInfo() {
    *this = ::std::move(from);
  }

  inline SurfaceflingerStatsGlobalInfo& operator=(const SurfaceflingerStatsGlobalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceflingerStatsGlobalInfo& operator=(SurfaceflingerStatsGlobalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceflingerStatsGlobalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceflingerStatsGlobalInfo* internal_default_instance() {
    return reinterpret_cast<const SurfaceflingerStatsGlobalInfo*>(
               &_SurfaceflingerStatsGlobalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SurfaceflingerStatsGlobalInfo& a, SurfaceflingerStatsGlobalInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceflingerStatsGlobalInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceflingerStatsGlobalInfo* New() const final {
    return CreateMaybeMessage<SurfaceflingerStatsGlobalInfo>(nullptr);
  }

  SurfaceflingerStatsGlobalInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceflingerStatsGlobalInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceflingerStatsGlobalInfo& from);
  void MergeFrom(const SurfaceflingerStatsGlobalInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceflingerStatsGlobalInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceflingerStatsGlobalInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameDurationFieldNumber = 7,
    kRenderEngineTimingFieldNumber = 8,
    kSfDeadlineMissesFieldNumber = 19,
    kSfPredictionErrorsFieldNumber = 20,
    kTotalFramesFieldNumber = 1,
    kMissedFramesFieldNumber = 2,
    kClientCompositionFramesFieldNumber = 3,
    kDisplayOnMillisFieldNumber = 4,
    kAnimationMillisFieldNumber = 5,
    kEventConnectionCountFieldNumber = 6,
    kTotalTimelineFramesFieldNumber = 9,
    kTotalJankyFramesFieldNumber = 10,
    kTotalJankyFramesWithLongCpuFieldNumber = 11,
    kTotalJankyFramesWithLongGpuFieldNumber = 12,
    kTotalJankyFramesSfUnattributedFieldNumber = 13,
    kTotalJankyFramesAppUnattributedFieldNumber = 14,
    kTotalJankyFramesSfSchedulingFieldNumber = 15,
    kTotalJankFramesSfPredictionErrorFieldNumber = 16,
    kTotalJankFramesAppBufferStuffingFieldNumber = 17,
    kDisplayRefreshRateBucketFieldNumber = 18,
    kRenderRateBucketFieldNumber = 21,
  };
  // optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
  bool has_frame_duration() const;
  void clear_frame_duration();
  const ::android::surfaceflinger::FrameTimingHistogram& frame_duration() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_frame_duration();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_frame_duration();
  void set_allocated_frame_duration(::android::surfaceflinger::FrameTimingHistogram* frame_duration);

  // optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
  bool has_render_engine_timing() const;
  void clear_render_engine_timing();
  const ::android::surfaceflinger::FrameTimingHistogram& render_engine_timing() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_render_engine_timing();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_render_engine_timing();
  void set_allocated_render_engine_timing(::android::surfaceflinger::FrameTimingHistogram* render_engine_timing);

  // optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
  bool has_sf_deadline_misses() const;
  void clear_sf_deadline_misses();
  const ::android::surfaceflinger::FrameTimingHistogram& sf_deadline_misses() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_sf_deadline_misses();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_sf_deadline_misses();
  void set_allocated_sf_deadline_misses(::android::surfaceflinger::FrameTimingHistogram* sf_deadline_misses);

  // optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
  bool has_sf_prediction_errors() const;
  void clear_sf_prediction_errors();
  const ::android::surfaceflinger::FrameTimingHistogram& sf_prediction_errors() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_sf_prediction_errors();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_sf_prediction_errors();
  void set_allocated_sf_prediction_errors(::android::surfaceflinger::FrameTimingHistogram* sf_prediction_errors);

  // optional int64 total_frames = 1;
  bool has_total_frames() const;
  void clear_total_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 total_frames() const;
  void set_total_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 missed_frames = 2;
  bool has_missed_frames() const;
  void clear_missed_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 missed_frames() const;
  void set_missed_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 client_composition_frames = 3;
  bool has_client_composition_frames() const;
  void clear_client_composition_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 client_composition_frames() const;
  void set_client_composition_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 display_on_millis = 4;
  bool has_display_on_millis() const;
  void clear_display_on_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 display_on_millis() const;
  void set_display_on_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 animation_millis = 5;
  bool has_animation_millis() const;
  void clear_animation_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 animation_millis() const;
  void set_animation_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 event_connection_count = 6;
  bool has_event_connection_count() const;
  void clear_event_connection_count();
  ::PROTOBUF_NAMESPACE_ID::int32 event_connection_count() const;
  void set_event_connection_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_timeline_frames = 9;
  bool has_total_timeline_frames() const;
  void clear_total_timeline_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_timeline_frames() const;
  void set_total_timeline_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames = 10;
  bool has_total_janky_frames() const;
  void clear_total_janky_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames() const;
  void set_total_janky_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_with_long_cpu = 11;
  bool has_total_janky_frames_with_long_cpu() const;
  void clear_total_janky_frames_with_long_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_cpu() const;
  void set_total_janky_frames_with_long_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_with_long_gpu = 12;
  bool has_total_janky_frames_with_long_gpu() const;
  void clear_total_janky_frames_with_long_gpu();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_gpu() const;
  void set_total_janky_frames_with_long_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_sf_unattributed = 13;
  bool has_total_janky_frames_sf_unattributed() const;
  void clear_total_janky_frames_sf_unattributed();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_unattributed() const;
  void set_total_janky_frames_sf_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_app_unattributed = 14;
  bool has_total_janky_frames_app_unattributed() const;
  void clear_total_janky_frames_app_unattributed();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_app_unattributed() const;
  void set_total_janky_frames_app_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_sf_scheduling = 15;
  bool has_total_janky_frames_sf_scheduling() const;
  void clear_total_janky_frames_sf_scheduling();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_scheduling() const;
  void set_total_janky_frames_sf_scheduling(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_jank_frames_sf_prediction_error = 16;
  bool has_total_jank_frames_sf_prediction_error() const;
  void clear_total_jank_frames_sf_prediction_error();
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_sf_prediction_error() const;
  void set_total_jank_frames_sf_prediction_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_jank_frames_app_buffer_stuffing = 17;
  bool has_total_jank_frames_app_buffer_stuffing() const;
  void clear_total_jank_frames_app_buffer_stuffing();
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_app_buffer_stuffing() const;
  void set_total_jank_frames_app_buffer_stuffing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 display_refresh_rate_bucket = 18;
  bool has_display_refresh_rate_bucket() const;
  void clear_display_refresh_rate_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 display_refresh_rate_bucket() const;
  void set_display_refresh_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 render_rate_bucket = 21;
  bool has_render_rate_bucket() const;
  void clear_render_rate_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 render_rate_bucket() const;
  void set_render_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceflingerStatsGlobalInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::surfaceflinger::FrameTimingHistogram* frame_duration_;
  ::android::surfaceflinger::FrameTimingHistogram* render_engine_timing_;
  ::android::surfaceflinger::FrameTimingHistogram* sf_deadline_misses_;
  ::android::surfaceflinger::FrameTimingHistogram* sf_prediction_errors_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 missed_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_composition_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 display_on_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 animation_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_connection_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_timeline_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_gpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_unattributed_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_app_unattributed_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_scheduling_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_sf_prediction_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_app_buffer_stuffing_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_refresh_rate_bucket_;
  ::PROTOBUF_NAMESPACE_ID::int32 render_rate_bucket_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// -------------------------------------------------------------------

class SurfaceflingerStatsLayerInfo_SetFrameRateVote :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote) */ {
 public:
  SurfaceflingerStatsLayerInfo_SetFrameRateVote();
  virtual ~SurfaceflingerStatsLayerInfo_SetFrameRateVote();

  SurfaceflingerStatsLayerInfo_SetFrameRateVote(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from);
  SurfaceflingerStatsLayerInfo_SetFrameRateVote(SurfaceflingerStatsLayerInfo_SetFrameRateVote&& from) noexcept
    : SurfaceflingerStatsLayerInfo_SetFrameRateVote() {
    *this = ::std::move(from);
  }

  inline SurfaceflingerStatsLayerInfo_SetFrameRateVote& operator=(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceflingerStatsLayerInfo_SetFrameRateVote& operator=(SurfaceflingerStatsLayerInfo_SetFrameRateVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceflingerStatsLayerInfo_SetFrameRateVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceflingerStatsLayerInfo_SetFrameRateVote* internal_default_instance() {
    return reinterpret_cast<const SurfaceflingerStatsLayerInfo_SetFrameRateVote*>(
               &_SurfaceflingerStatsLayerInfo_SetFrameRateVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SurfaceflingerStatsLayerInfo_SetFrameRateVote& a, SurfaceflingerStatsLayerInfo_SetFrameRateVote& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceflingerStatsLayerInfo_SetFrameRateVote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceflingerStatsLayerInfo_SetFrameRateVote* New() const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfo_SetFrameRateVote>(nullptr);
  }

  SurfaceflingerStatsLayerInfo_SetFrameRateVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfo_SetFrameRateVote>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from);
  void MergeFrom(const SurfaceflingerStatsLayerInfo_SetFrameRateVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceflingerStatsLayerInfo_SetFrameRateVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility FrameRateCompatibility;
  static constexpr FrameRateCompatibility FRAME_RATE_UNDEFINED =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_UNDEFINED;
  static constexpr FrameRateCompatibility FRAME_RATE_DEFAULT =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_DEFAULT;
  static constexpr FrameRateCompatibility FRAME_RATE_EXACT_OR_MULTIPLE =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FRAME_RATE_EXACT_OR_MULTIPLE;
  static inline bool FrameRateCompatibility_IsValid(int value) {
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(value);
  }
  static constexpr FrameRateCompatibility FrameRateCompatibility_MIN =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_MIN;
  static constexpr FrameRateCompatibility FrameRateCompatibility_MAX =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_MAX;
  static constexpr int FrameRateCompatibility_ARRAYSIZE =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_FrameRateCompatibility_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FrameRateCompatibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameRateCompatibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameRateCompatibility_Name.");
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Name(enum_t_value);
  }
  static inline bool FrameRateCompatibility_Parse(const std::string& name,
      FrameRateCompatibility* value) {
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_Parse(name, value);
  }

  typedef SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness Seamlessness;
  static constexpr Seamlessness SEAMLESS_UNDEFINED =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_UNDEFINED;
  static constexpr Seamlessness SEAMLESS_SHOULD_BE_SEAMLESS =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_SHOULD_BE_SEAMLESS;
  static constexpr Seamlessness SEAMLESS_NOT_REQUIRED =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_SEAMLESS_NOT_REQUIRED;
  static inline bool Seamlessness_IsValid(int value) {
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(value);
  }
  static constexpr Seamlessness Seamlessness_MIN =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_MIN;
  static constexpr Seamlessness Seamlessness_MAX =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_MAX;
  static constexpr int Seamlessness_ARRAYSIZE =
    SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Seamlessness_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Seamlessness_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Seamlessness>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Seamlessness_Name.");
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Name(enum_t_value);
  }
  static inline bool Seamlessness_Parse(const std::string& name,
      Seamlessness* value) {
    return SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFrameRateFieldNumber = 1,
    kFrameRateCompatibilityFieldNumber = 2,
    kSeamlessnessFieldNumber = 3,
  };
  // optional float frame_rate = 1;
  bool has_frame_rate() const;
  void clear_frame_rate();
  float frame_rate() const;
  void set_frame_rate(float value);

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
  bool has_frame_rate_compatibility() const;
  void clear_frame_rate_compatibility();
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility frame_rate_compatibility() const;
  void set_frame_rate_compatibility(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility value);

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
  bool has_seamlessness() const;
  void clear_seamlessness();
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness seamlessness() const;
  void set_seamlessness(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float frame_rate_;
  int frame_rate_compatibility_;
  int seamlessness_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// -------------------------------------------------------------------

class SurfaceflingerStatsLayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.SurfaceflingerStatsLayerInfo) */ {
 public:
  SurfaceflingerStatsLayerInfo();
  virtual ~SurfaceflingerStatsLayerInfo();

  SurfaceflingerStatsLayerInfo(const SurfaceflingerStatsLayerInfo& from);
  SurfaceflingerStatsLayerInfo(SurfaceflingerStatsLayerInfo&& from) noexcept
    : SurfaceflingerStatsLayerInfo() {
    *this = ::std::move(from);
  }

  inline SurfaceflingerStatsLayerInfo& operator=(const SurfaceflingerStatsLayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceflingerStatsLayerInfo& operator=(SurfaceflingerStatsLayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceflingerStatsLayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceflingerStatsLayerInfo* internal_default_instance() {
    return reinterpret_cast<const SurfaceflingerStatsLayerInfo*>(
               &_SurfaceflingerStatsLayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SurfaceflingerStatsLayerInfo& a, SurfaceflingerStatsLayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceflingerStatsLayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceflingerStatsLayerInfo* New() const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfo>(nullptr);
  }

  SurfaceflingerStatsLayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceflingerStatsLayerInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceflingerStatsLayerInfo& from);
  void MergeFrom(const SurfaceflingerStatsLayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceflingerStatsLayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.SurfaceflingerStatsLayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SurfaceflingerStatsLayerInfo_SetFrameRateVote SetFrameRateVote;

  typedef SurfaceflingerStatsLayerInfo_GameMode GameMode;
  static constexpr GameMode GAME_MODE_UNSPECIFIED =
    SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_UNSPECIFIED;
  static constexpr GameMode GAME_MODE_UNSUPPORTED =
    SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_UNSUPPORTED;
  static constexpr GameMode GAME_MODE_STANDARD =
    SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_STANDARD;
  static constexpr GameMode GAME_MODE_PERFORMANCE =
    SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_PERFORMANCE;
  static constexpr GameMode GAME_MODE_BATTERY =
    SurfaceflingerStatsLayerInfo_GameMode_GAME_MODE_BATTERY;
  static inline bool GameMode_IsValid(int value) {
    return SurfaceflingerStatsLayerInfo_GameMode_IsValid(value);
  }
  static constexpr GameMode GameMode_MIN =
    SurfaceflingerStatsLayerInfo_GameMode_GameMode_MIN;
  static constexpr GameMode GameMode_MAX =
    SurfaceflingerStatsLayerInfo_GameMode_GameMode_MAX;
  static constexpr int GameMode_ARRAYSIZE =
    SurfaceflingerStatsLayerInfo_GameMode_GameMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GameMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GameMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GameMode_Name.");
    return SurfaceflingerStatsLayerInfo_GameMode_Name(enum_t_value);
  }
  static inline bool GameMode_Parse(const std::string& name,
      GameMode* value) {
    return SurfaceflingerStatsLayerInfo_GameMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayerNameFieldNumber = 1,
    kPresentToPresentFieldNumber = 4,
    kPostToPresentFieldNumber = 5,
    kAcquireToPresentFieldNumber = 6,
    kLatchToPresentFieldNumber = 7,
    kDesiredToPresentFieldNumber = 8,
    kPostToAcquireFieldNumber = 9,
    kSetFrameRateVoteFieldNumber = 24,
    kAppDeadlineMissesFieldNumber = 25,
    kTotalFramesFieldNumber = 2,
    kDroppedFramesFieldNumber = 3,
    kLateAcquireFramesFieldNumber = 10,
    kBadDesiredPresentFramesFieldNumber = 11,
    kUidFieldNumber = 12,
    kTotalTimelineFramesFieldNumber = 13,
    kTotalJankyFramesFieldNumber = 14,
    kTotalJankyFramesWithLongCpuFieldNumber = 15,
    kTotalJankyFramesWithLongGpuFieldNumber = 16,
    kTotalJankyFramesSfUnattributedFieldNumber = 17,
    kTotalJankyFramesAppUnattributedFieldNumber = 18,
    kTotalJankyFramesSfSchedulingFieldNumber = 19,
    kTotalJankFramesSfPredictionErrorFieldNumber = 20,
    kTotalJankFramesAppBufferStuffingFieldNumber = 21,
    kDisplayRefreshRateBucketFieldNumber = 22,
    kRenderRateBucketFieldNumber = 23,
    kGameModeFieldNumber = 26,
  };
  // optional string layer_name = 1;
  bool has_layer_name() const;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);

  // optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
  bool has_present_to_present() const;
  void clear_present_to_present();
  const ::android::surfaceflinger::FrameTimingHistogram& present_to_present() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_present_to_present();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_present_to_present();
  void set_allocated_present_to_present(::android::surfaceflinger::FrameTimingHistogram* present_to_present);

  // optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
  bool has_post_to_present() const;
  void clear_post_to_present();
  const ::android::surfaceflinger::FrameTimingHistogram& post_to_present() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_post_to_present();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_post_to_present();
  void set_allocated_post_to_present(::android::surfaceflinger::FrameTimingHistogram* post_to_present);

  // optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
  bool has_acquire_to_present() const;
  void clear_acquire_to_present();
  const ::android::surfaceflinger::FrameTimingHistogram& acquire_to_present() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_acquire_to_present();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_acquire_to_present();
  void set_allocated_acquire_to_present(::android::surfaceflinger::FrameTimingHistogram* acquire_to_present);

  // optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
  bool has_latch_to_present() const;
  void clear_latch_to_present();
  const ::android::surfaceflinger::FrameTimingHistogram& latch_to_present() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_latch_to_present();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_latch_to_present();
  void set_allocated_latch_to_present(::android::surfaceflinger::FrameTimingHistogram* latch_to_present);

  // optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
  bool has_desired_to_present() const;
  void clear_desired_to_present();
  const ::android::surfaceflinger::FrameTimingHistogram& desired_to_present() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_desired_to_present();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_desired_to_present();
  void set_allocated_desired_to_present(::android::surfaceflinger::FrameTimingHistogram* desired_to_present);

  // optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
  bool has_post_to_acquire() const;
  void clear_post_to_acquire();
  const ::android::surfaceflinger::FrameTimingHistogram& post_to_acquire() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_post_to_acquire();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_post_to_acquire();
  void set_allocated_post_to_acquire(::android::surfaceflinger::FrameTimingHistogram* post_to_acquire);

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
  bool has_set_frame_rate_vote() const;
  void clear_set_frame_rate_vote();
  const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote& set_frame_rate_vote() const;
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* release_set_frame_rate_vote();
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* mutable_set_frame_rate_vote();
  void set_allocated_set_frame_rate_vote(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* set_frame_rate_vote);

  // optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
  bool has_app_deadline_misses() const;
  void clear_app_deadline_misses();
  const ::android::surfaceflinger::FrameTimingHistogram& app_deadline_misses() const;
  ::android::surfaceflinger::FrameTimingHistogram* release_app_deadline_misses();
  ::android::surfaceflinger::FrameTimingHistogram* mutable_app_deadline_misses();
  void set_allocated_app_deadline_misses(::android::surfaceflinger::FrameTimingHistogram* app_deadline_misses);

  // optional int64 total_frames = 2;
  bool has_total_frames() const;
  void clear_total_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 total_frames() const;
  void set_total_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 dropped_frames = 3;
  bool has_dropped_frames() const;
  void clear_dropped_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 dropped_frames() const;
  void set_dropped_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 late_acquire_frames = 10;
  bool has_late_acquire_frames() const;
  void clear_late_acquire_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 late_acquire_frames() const;
  void set_late_acquire_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bad_desired_present_frames = 11;
  bool has_bad_desired_present_frames() const;
  void clear_bad_desired_present_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 bad_desired_present_frames() const;
  void set_bad_desired_present_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 12;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_timeline_frames = 13;
  bool has_total_timeline_frames() const;
  void clear_total_timeline_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_timeline_frames() const;
  void set_total_timeline_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames = 14;
  bool has_total_janky_frames() const;
  void clear_total_janky_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames() const;
  void set_total_janky_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_with_long_cpu = 15;
  bool has_total_janky_frames_with_long_cpu() const;
  void clear_total_janky_frames_with_long_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_cpu() const;
  void set_total_janky_frames_with_long_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_with_long_gpu = 16;
  bool has_total_janky_frames_with_long_gpu() const;
  void clear_total_janky_frames_with_long_gpu();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_gpu() const;
  void set_total_janky_frames_with_long_gpu(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_sf_unattributed = 17;
  bool has_total_janky_frames_sf_unattributed() const;
  void clear_total_janky_frames_sf_unattributed();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_unattributed() const;
  void set_total_janky_frames_sf_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_app_unattributed = 18;
  bool has_total_janky_frames_app_unattributed() const;
  void clear_total_janky_frames_app_unattributed();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_app_unattributed() const;
  void set_total_janky_frames_app_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_janky_frames_sf_scheduling = 19;
  bool has_total_janky_frames_sf_scheduling() const;
  void clear_total_janky_frames_sf_scheduling();
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_scheduling() const;
  void set_total_janky_frames_sf_scheduling(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_jank_frames_sf_prediction_error = 20;
  bool has_total_jank_frames_sf_prediction_error() const;
  void clear_total_jank_frames_sf_prediction_error();
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_sf_prediction_error() const;
  void set_total_jank_frames_sf_prediction_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_jank_frames_app_buffer_stuffing = 21;
  bool has_total_jank_frames_app_buffer_stuffing() const;
  void clear_total_jank_frames_app_buffer_stuffing();
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_app_buffer_stuffing() const;
  void set_total_jank_frames_app_buffer_stuffing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 display_refresh_rate_bucket = 22;
  bool has_display_refresh_rate_bucket() const;
  void clear_display_refresh_rate_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 display_refresh_rate_bucket() const;
  void set_display_refresh_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 render_rate_bucket = 23;
  bool has_render_rate_bucket() const;
  void clear_render_rate_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 render_rate_bucket() const;
  void set_render_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
  bool has_game_mode() const;
  void clear_game_mode();
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode game_mode() const;
  void set_game_mode(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.SurfaceflingerStatsLayerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::android::surfaceflinger::FrameTimingHistogram* present_to_present_;
  ::android::surfaceflinger::FrameTimingHistogram* post_to_present_;
  ::android::surfaceflinger::FrameTimingHistogram* acquire_to_present_;
  ::android::surfaceflinger::FrameTimingHistogram* latch_to_present_;
  ::android::surfaceflinger::FrameTimingHistogram* desired_to_present_;
  ::android::surfaceflinger::FrameTimingHistogram* post_to_acquire_;
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* set_frame_rate_vote_;
  ::android::surfaceflinger::FrameTimingHistogram* app_deadline_misses_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 dropped_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 late_acquire_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 bad_desired_present_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_timeline_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_with_long_gpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_unattributed_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_app_unattributed_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_janky_frames_sf_scheduling_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_sf_prediction_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_jank_frames_app_buffer_stuffing_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_refresh_rate_bucket_;
  ::PROTOBUF_NAMESPACE_ID::int32 render_rate_bucket_;
  int game_mode_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// -------------------------------------------------------------------

class FrameTimingHistogram :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.FrameTimingHistogram) */ {
 public:
  FrameTimingHistogram();
  virtual ~FrameTimingHistogram();

  FrameTimingHistogram(const FrameTimingHistogram& from);
  FrameTimingHistogram(FrameTimingHistogram&& from) noexcept
    : FrameTimingHistogram() {
    *this = ::std::move(from);
  }

  inline FrameTimingHistogram& operator=(const FrameTimingHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTimingHistogram& operator=(FrameTimingHistogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FrameTimingHistogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTimingHistogram* internal_default_instance() {
    return reinterpret_cast<const FrameTimingHistogram*>(
               &_FrameTimingHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FrameTimingHistogram& a, FrameTimingHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTimingHistogram* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTimingHistogram* New() const final {
    return CreateMaybeMessage<FrameTimingHistogram>(nullptr);
  }

  FrameTimingHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTimingHistogram>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FrameTimingHistogram& from);
  void MergeFrom(const FrameTimingHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameTimingHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.FrameTimingHistogram";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeMillisBucketsFieldNumber = 1,
    kFrameCountsFieldNumber = 2,
  };
  // repeated int32 time_millis_buckets = 1;
  int time_millis_buckets_size() const;
  void clear_time_millis_buckets();
  ::PROTOBUF_NAMESPACE_ID::int32 time_millis_buckets(int index) const;
  void set_time_millis_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_time_millis_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      time_millis_buckets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_time_millis_buckets();

  // repeated int64 frame_counts = 2;
  int frame_counts_size() const;
  void clear_frame_counts();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_counts(int index) const;
  void set_frame_counts(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_frame_counts(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      frame_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_frame_counts();

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.FrameTimingHistogram)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > time_millis_buckets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > frame_counts_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SurfaceflingerStatsGlobalInfoWrapper

// repeated .android.surfaceflinger.SurfaceflingerStatsGlobalInfo atom = 1;
inline int SurfaceflingerStatsGlobalInfoWrapper::atom_size() const {
  return atom_.size();
}
inline void SurfaceflingerStatsGlobalInfoWrapper::clear_atom() {
  atom_.Clear();
}
inline ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* SurfaceflingerStatsGlobalInfoWrapper::mutable_atom(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper.atom)
  return atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >*
SurfaceflingerStatsGlobalInfoWrapper::mutable_atom() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper.atom)
  return &atom_;
}
inline const ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo& SurfaceflingerStatsGlobalInfoWrapper::atom(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper.atom)
  return atom_.Get(index);
}
inline ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo* SurfaceflingerStatsGlobalInfoWrapper::add_atom() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper.atom)
  return atom_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsGlobalInfo >&
SurfaceflingerStatsGlobalInfoWrapper::atom() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SurfaceflingerStatsGlobalInfoWrapper.atom)
  return atom_;
}

// -------------------------------------------------------------------

// SurfaceflingerStatsLayerInfoWrapper

// repeated .android.surfaceflinger.SurfaceflingerStatsLayerInfo atom = 1;
inline int SurfaceflingerStatsLayerInfoWrapper::atom_size() const {
  return atom_.size();
}
inline void SurfaceflingerStatsLayerInfoWrapper::clear_atom() {
  atom_.Clear();
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* SurfaceflingerStatsLayerInfoWrapper::mutable_atom(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper.atom)
  return atom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >*
SurfaceflingerStatsLayerInfoWrapper::mutable_atom() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper.atom)
  return &atom_;
}
inline const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo& SurfaceflingerStatsLayerInfoWrapper::atom(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper.atom)
  return atom_.Get(index);
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo* SurfaceflingerStatsLayerInfoWrapper::add_atom() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper.atom)
  return atom_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo >&
SurfaceflingerStatsLayerInfoWrapper::atom() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.SurfaceflingerStatsLayerInfoWrapper.atom)
  return atom_;
}

// -------------------------------------------------------------------

// SurfaceflingerStatsGlobalInfo

// optional int32 display_refresh_rate_bucket = 18;
inline bool SurfaceflingerStatsGlobalInfo::has_display_refresh_rate_bucket() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_display_refresh_rate_bucket() {
  display_refresh_rate_bucket_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::display_refresh_rate_bucket() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.display_refresh_rate_bucket)
  return display_refresh_rate_bucket_;
}
inline void SurfaceflingerStatsGlobalInfo::set_display_refresh_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  display_refresh_rate_bucket_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.display_refresh_rate_bucket)
}

// optional int32 render_rate_bucket = 21;
inline bool SurfaceflingerStatsGlobalInfo::has_render_rate_bucket() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_render_rate_bucket() {
  render_rate_bucket_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::render_rate_bucket() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_rate_bucket)
  return render_rate_bucket_;
}
inline void SurfaceflingerStatsGlobalInfo::set_render_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  render_rate_bucket_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_rate_bucket)
}

// optional int64 total_frames = 1;
inline bool SurfaceflingerStatsGlobalInfo::has_total_frames() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_frames() {
  total_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsGlobalInfo::total_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_frames)
  return total_frames_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_frames)
}

// optional int64 missed_frames = 2;
inline bool SurfaceflingerStatsGlobalInfo::has_missed_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_missed_frames() {
  missed_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsGlobalInfo::missed_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.missed_frames)
  return missed_frames_;
}
inline void SurfaceflingerStatsGlobalInfo::set_missed_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  missed_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.missed_frames)
}

// optional int64 client_composition_frames = 3;
inline bool SurfaceflingerStatsGlobalInfo::has_client_composition_frames() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_client_composition_frames() {
  client_composition_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsGlobalInfo::client_composition_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.client_composition_frames)
  return client_composition_frames_;
}
inline void SurfaceflingerStatsGlobalInfo::set_client_composition_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  client_composition_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.client_composition_frames)
}

// optional int64 display_on_millis = 4;
inline bool SurfaceflingerStatsGlobalInfo::has_display_on_millis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_display_on_millis() {
  display_on_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsGlobalInfo::display_on_millis() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.display_on_millis)
  return display_on_millis_;
}
inline void SurfaceflingerStatsGlobalInfo::set_display_on_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  display_on_millis_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.display_on_millis)
}

// optional int64 animation_millis = 5;
inline bool SurfaceflingerStatsGlobalInfo::has_animation_millis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_animation_millis() {
  animation_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsGlobalInfo::animation_millis() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.animation_millis)
  return animation_millis_;
}
inline void SurfaceflingerStatsGlobalInfo::set_animation_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  animation_millis_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.animation_millis)
}

// optional int32 event_connection_count = 6;
inline bool SurfaceflingerStatsGlobalInfo::has_event_connection_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_event_connection_count() {
  event_connection_count_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::event_connection_count() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.event_connection_count)
  return event_connection_count_;
}
inline void SurfaceflingerStatsGlobalInfo::set_event_connection_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  event_connection_count_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.event_connection_count)
}

// optional .android.surfaceflinger.FrameTimingHistogram frame_duration = 7;
inline bool SurfaceflingerStatsGlobalInfo::has_frame_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_frame_duration() {
  if (frame_duration_ != nullptr) frame_duration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsGlobalInfo::frame_duration() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = frame_duration_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.frame_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::release_frame_duration() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.frame_duration)
  _has_bits_[0] &= ~0x00000001u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = frame_duration_;
  frame_duration_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::mutable_frame_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (frame_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    frame_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.frame_duration)
  return frame_duration_;
}
inline void SurfaceflingerStatsGlobalInfo::set_allocated_frame_duration(::android::surfaceflinger::FrameTimingHistogram* frame_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_duration_;
  }
  if (frame_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_duration_ = frame_duration;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.frame_duration)
}

// optional .android.surfaceflinger.FrameTimingHistogram render_engine_timing = 8;
inline bool SurfaceflingerStatsGlobalInfo::has_render_engine_timing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_render_engine_timing() {
  if (render_engine_timing_ != nullptr) render_engine_timing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsGlobalInfo::render_engine_timing() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = render_engine_timing_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_engine_timing)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::release_render_engine_timing() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_engine_timing)
  _has_bits_[0] &= ~0x00000002u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = render_engine_timing_;
  render_engine_timing_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::mutable_render_engine_timing() {
  _has_bits_[0] |= 0x00000002u;
  if (render_engine_timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    render_engine_timing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_engine_timing)
  return render_engine_timing_;
}
inline void SurfaceflingerStatsGlobalInfo::set_allocated_render_engine_timing(::android::surfaceflinger::FrameTimingHistogram* render_engine_timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete render_engine_timing_;
  }
  if (render_engine_timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      render_engine_timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_engine_timing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  render_engine_timing_ = render_engine_timing;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.render_engine_timing)
}

// optional int32 total_timeline_frames = 9;
inline bool SurfaceflingerStatsGlobalInfo::has_total_timeline_frames() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_timeline_frames() {
  total_timeline_frames_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_timeline_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_timeline_frames)
  return total_timeline_frames_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_timeline_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  total_timeline_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_timeline_frames)
}

// optional int32 total_janky_frames = 10;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames() {
  total_janky_frames_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames)
  return total_janky_frames_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  total_janky_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames)
}

// optional int32 total_janky_frames_with_long_cpu = 11;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames_with_long_cpu() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames_with_long_cpu() {
  total_janky_frames_with_long_cpu_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames_with_long_cpu() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_with_long_cpu)
  return total_janky_frames_with_long_cpu_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames_with_long_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  total_janky_frames_with_long_cpu_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_with_long_cpu)
}

// optional int32 total_janky_frames_with_long_gpu = 12;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames_with_long_gpu() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames_with_long_gpu() {
  total_janky_frames_with_long_gpu_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames_with_long_gpu() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_with_long_gpu)
  return total_janky_frames_with_long_gpu_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames_with_long_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  total_janky_frames_with_long_gpu_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_with_long_gpu)
}

// optional int32 total_janky_frames_sf_unattributed = 13;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames_sf_unattributed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames_sf_unattributed() {
  total_janky_frames_sf_unattributed_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames_sf_unattributed() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_sf_unattributed)
  return total_janky_frames_sf_unattributed_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames_sf_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  total_janky_frames_sf_unattributed_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_sf_unattributed)
}

// optional int32 total_janky_frames_app_unattributed = 14;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames_app_unattributed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames_app_unattributed() {
  total_janky_frames_app_unattributed_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames_app_unattributed() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_app_unattributed)
  return total_janky_frames_app_unattributed_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames_app_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  total_janky_frames_app_unattributed_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_app_unattributed)
}

// optional int32 total_janky_frames_sf_scheduling = 15;
inline bool SurfaceflingerStatsGlobalInfo::has_total_janky_frames_sf_scheduling() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_janky_frames_sf_scheduling() {
  total_janky_frames_sf_scheduling_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_janky_frames_sf_scheduling() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_sf_scheduling)
  return total_janky_frames_sf_scheduling_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_janky_frames_sf_scheduling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  total_janky_frames_sf_scheduling_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_janky_frames_sf_scheduling)
}

// optional int32 total_jank_frames_sf_prediction_error = 16;
inline bool SurfaceflingerStatsGlobalInfo::has_total_jank_frames_sf_prediction_error() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_jank_frames_sf_prediction_error() {
  total_jank_frames_sf_prediction_error_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_jank_frames_sf_prediction_error() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_jank_frames_sf_prediction_error)
  return total_jank_frames_sf_prediction_error_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_jank_frames_sf_prediction_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  total_jank_frames_sf_prediction_error_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_jank_frames_sf_prediction_error)
}

// optional int32 total_jank_frames_app_buffer_stuffing = 17;
inline bool SurfaceflingerStatsGlobalInfo::has_total_jank_frames_app_buffer_stuffing() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_total_jank_frames_app_buffer_stuffing() {
  total_jank_frames_app_buffer_stuffing_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsGlobalInfo::total_jank_frames_app_buffer_stuffing() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_jank_frames_app_buffer_stuffing)
  return total_jank_frames_app_buffer_stuffing_;
}
inline void SurfaceflingerStatsGlobalInfo::set_total_jank_frames_app_buffer_stuffing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  total_jank_frames_app_buffer_stuffing_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.total_jank_frames_app_buffer_stuffing)
}

// optional .android.surfaceflinger.FrameTimingHistogram sf_deadline_misses = 19;
inline bool SurfaceflingerStatsGlobalInfo::has_sf_deadline_misses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_sf_deadline_misses() {
  if (sf_deadline_misses_ != nullptr) sf_deadline_misses_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsGlobalInfo::sf_deadline_misses() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = sf_deadline_misses_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_deadline_misses)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::release_sf_deadline_misses() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_deadline_misses)
  _has_bits_[0] &= ~0x00000004u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = sf_deadline_misses_;
  sf_deadline_misses_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::mutable_sf_deadline_misses() {
  _has_bits_[0] |= 0x00000004u;
  if (sf_deadline_misses_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    sf_deadline_misses_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_deadline_misses)
  return sf_deadline_misses_;
}
inline void SurfaceflingerStatsGlobalInfo::set_allocated_sf_deadline_misses(::android::surfaceflinger::FrameTimingHistogram* sf_deadline_misses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sf_deadline_misses_;
  }
  if (sf_deadline_misses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sf_deadline_misses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sf_deadline_misses, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sf_deadline_misses_ = sf_deadline_misses;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_deadline_misses)
}

// optional .android.surfaceflinger.FrameTimingHistogram sf_prediction_errors = 20;
inline bool SurfaceflingerStatsGlobalInfo::has_sf_prediction_errors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SurfaceflingerStatsGlobalInfo::clear_sf_prediction_errors() {
  if (sf_prediction_errors_ != nullptr) sf_prediction_errors_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsGlobalInfo::sf_prediction_errors() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = sf_prediction_errors_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_prediction_errors)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::release_sf_prediction_errors() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_prediction_errors)
  _has_bits_[0] &= ~0x00000008u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = sf_prediction_errors_;
  sf_prediction_errors_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsGlobalInfo::mutable_sf_prediction_errors() {
  _has_bits_[0] |= 0x00000008u;
  if (sf_prediction_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    sf_prediction_errors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_prediction_errors)
  return sf_prediction_errors_;
}
inline void SurfaceflingerStatsGlobalInfo::set_allocated_sf_prediction_errors(::android::surfaceflinger::FrameTimingHistogram* sf_prediction_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sf_prediction_errors_;
  }
  if (sf_prediction_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sf_prediction_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sf_prediction_errors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sf_prediction_errors_ = sf_prediction_errors;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsGlobalInfo.sf_prediction_errors)
}

// -------------------------------------------------------------------

// SurfaceflingerStatsLayerInfo_SetFrameRateVote

// optional float frame_rate = 1;
inline bool SurfaceflingerStatsLayerInfo_SetFrameRateVote::has_frame_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::clear_frame_rate() {
  frame_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SurfaceflingerStatsLayerInfo_SetFrameRateVote::frame_rate() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.frame_rate)
  return frame_rate_;
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::set_frame_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.frame_rate)
}

// optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.FrameRateCompatibility frame_rate_compatibility = 2;
inline bool SurfaceflingerStatsLayerInfo_SetFrameRateVote::has_frame_rate_compatibility() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::clear_frame_rate_compatibility() {
  frame_rate_compatibility_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility SurfaceflingerStatsLayerInfo_SetFrameRateVote::frame_rate_compatibility() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.frame_rate_compatibility)
  return static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility >(frame_rate_compatibility_);
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::set_frame_rate_compatibility(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility value) {
  assert(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  frame_rate_compatibility_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.frame_rate_compatibility)
}

// optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.Seamlessness seamlessness = 3;
inline bool SurfaceflingerStatsLayerInfo_SetFrameRateVote::has_seamlessness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::clear_seamlessness() {
  seamlessness_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness SurfaceflingerStatsLayerInfo_SetFrameRateVote::seamlessness() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.seamlessness)
  return static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness >(seamlessness_);
}
inline void SurfaceflingerStatsLayerInfo_SetFrameRateVote::set_seamlessness(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness value) {
  assert(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  seamlessness_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote.seamlessness)
}

// -------------------------------------------------------------------

// SurfaceflingerStatsLayerInfo

// optional int32 uid = 12;
inline bool SurfaceflingerStatsLayerInfo::has_uid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.uid)
  return uid_;
}
inline void SurfaceflingerStatsLayerInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.uid)
}

// optional int32 display_refresh_rate_bucket = 22;
inline bool SurfaceflingerStatsLayerInfo::has_display_refresh_rate_bucket() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_display_refresh_rate_bucket() {
  display_refresh_rate_bucket_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::display_refresh_rate_bucket() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.display_refresh_rate_bucket)
  return display_refresh_rate_bucket_;
}
inline void SurfaceflingerStatsLayerInfo::set_display_refresh_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  display_refresh_rate_bucket_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.display_refresh_rate_bucket)
}

// optional int32 render_rate_bucket = 23;
inline bool SurfaceflingerStatsLayerInfo::has_render_rate_bucket() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_render_rate_bucket() {
  render_rate_bucket_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::render_rate_bucket() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.render_rate_bucket)
  return render_rate_bucket_;
}
inline void SurfaceflingerStatsLayerInfo::set_render_rate_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  render_rate_bucket_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.render_rate_bucket)
}

// optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.GameMode game_mode = 26;
inline bool SurfaceflingerStatsLayerInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode SurfaceflingerStatsLayerInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.game_mode)
  return static_cast< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode >(game_mode_);
}
inline void SurfaceflingerStatsLayerInfo::set_game_mode(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode value) {
  assert(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.game_mode)
}

// optional string layer_name = 1;
inline bool SurfaceflingerStatsLayerInfo::has_layer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SurfaceflingerStatsLayerInfo::layer_name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
  return layer_name_.GetNoArena();
}
inline void SurfaceflingerStatsLayerInfo::set_layer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
}
inline void SurfaceflingerStatsLayerInfo::set_layer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
}
inline void SurfaceflingerStatsLayerInfo::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
}
inline void SurfaceflingerStatsLayerInfo::set_layer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  layer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
}
inline std::string* SurfaceflingerStatsLayerInfo::mutable_layer_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
  return layer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SurfaceflingerStatsLayerInfo::release_layer_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
  if (!has_layer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return layer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.layer_name)
}

// optional int64 total_frames = 2;
inline bool SurfaceflingerStatsLayerInfo::has_total_frames() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_frames() {
  total_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsLayerInfo::total_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_frames)
  return total_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_frames)
}

// optional int64 dropped_frames = 3;
inline bool SurfaceflingerStatsLayerInfo::has_dropped_frames() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_dropped_frames() {
  dropped_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsLayerInfo::dropped_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.dropped_frames)
  return dropped_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_dropped_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  dropped_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.dropped_frames)
}

// optional .android.surfaceflinger.FrameTimingHistogram present_to_present = 4;
inline bool SurfaceflingerStatsLayerInfo::has_present_to_present() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_present_to_present() {
  if (present_to_present_ != nullptr) present_to_present_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::present_to_present() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = present_to_present_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.present_to_present)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_present_to_present() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.present_to_present)
  _has_bits_[0] &= ~0x00000002u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = present_to_present_;
  present_to_present_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_present_to_present() {
  _has_bits_[0] |= 0x00000002u;
  if (present_to_present_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    present_to_present_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.present_to_present)
  return present_to_present_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_present_to_present(::android::surfaceflinger::FrameTimingHistogram* present_to_present) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete present_to_present_;
  }
  if (present_to_present) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      present_to_present = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, present_to_present, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  present_to_present_ = present_to_present;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.present_to_present)
}

// optional .android.surfaceflinger.FrameTimingHistogram post_to_present = 5;
inline bool SurfaceflingerStatsLayerInfo::has_post_to_present() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_post_to_present() {
  if (post_to_present_ != nullptr) post_to_present_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::post_to_present() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = post_to_present_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_present)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_post_to_present() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_present)
  _has_bits_[0] &= ~0x00000004u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = post_to_present_;
  post_to_present_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_post_to_present() {
  _has_bits_[0] |= 0x00000004u;
  if (post_to_present_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    post_to_present_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_present)
  return post_to_present_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_post_to_present(::android::surfaceflinger::FrameTimingHistogram* post_to_present) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_to_present_;
  }
  if (post_to_present) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_to_present = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_to_present, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  post_to_present_ = post_to_present;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_present)
}

// optional .android.surfaceflinger.FrameTimingHistogram acquire_to_present = 6;
inline bool SurfaceflingerStatsLayerInfo::has_acquire_to_present() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_acquire_to_present() {
  if (acquire_to_present_ != nullptr) acquire_to_present_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::acquire_to_present() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = acquire_to_present_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.acquire_to_present)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_acquire_to_present() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.acquire_to_present)
  _has_bits_[0] &= ~0x00000008u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = acquire_to_present_;
  acquire_to_present_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_acquire_to_present() {
  _has_bits_[0] |= 0x00000008u;
  if (acquire_to_present_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    acquire_to_present_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.acquire_to_present)
  return acquire_to_present_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_acquire_to_present(::android::surfaceflinger::FrameTimingHistogram* acquire_to_present) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acquire_to_present_;
  }
  if (acquire_to_present) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acquire_to_present = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquire_to_present, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  acquire_to_present_ = acquire_to_present;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.acquire_to_present)
}

// optional .android.surfaceflinger.FrameTimingHistogram latch_to_present = 7;
inline bool SurfaceflingerStatsLayerInfo::has_latch_to_present() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_latch_to_present() {
  if (latch_to_present_ != nullptr) latch_to_present_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::latch_to_present() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = latch_to_present_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.latch_to_present)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_latch_to_present() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.latch_to_present)
  _has_bits_[0] &= ~0x00000010u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = latch_to_present_;
  latch_to_present_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_latch_to_present() {
  _has_bits_[0] |= 0x00000010u;
  if (latch_to_present_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    latch_to_present_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.latch_to_present)
  return latch_to_present_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_latch_to_present(::android::surfaceflinger::FrameTimingHistogram* latch_to_present) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latch_to_present_;
  }
  if (latch_to_present) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latch_to_present = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latch_to_present, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  latch_to_present_ = latch_to_present;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.latch_to_present)
}

// optional .android.surfaceflinger.FrameTimingHistogram desired_to_present = 8;
inline bool SurfaceflingerStatsLayerInfo::has_desired_to_present() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_desired_to_present() {
  if (desired_to_present_ != nullptr) desired_to_present_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::desired_to_present() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = desired_to_present_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.desired_to_present)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_desired_to_present() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.desired_to_present)
  _has_bits_[0] &= ~0x00000020u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = desired_to_present_;
  desired_to_present_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_desired_to_present() {
  _has_bits_[0] |= 0x00000020u;
  if (desired_to_present_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    desired_to_present_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.desired_to_present)
  return desired_to_present_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_desired_to_present(::android::surfaceflinger::FrameTimingHistogram* desired_to_present) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_to_present_;
  }
  if (desired_to_present) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_to_present = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desired_to_present, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  desired_to_present_ = desired_to_present;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.desired_to_present)
}

// optional .android.surfaceflinger.FrameTimingHistogram post_to_acquire = 9;
inline bool SurfaceflingerStatsLayerInfo::has_post_to_acquire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_post_to_acquire() {
  if (post_to_acquire_ != nullptr) post_to_acquire_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::post_to_acquire() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = post_to_acquire_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_acquire)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_post_to_acquire() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_acquire)
  _has_bits_[0] &= ~0x00000040u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = post_to_acquire_;
  post_to_acquire_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_post_to_acquire() {
  _has_bits_[0] |= 0x00000040u;
  if (post_to_acquire_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    post_to_acquire_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_acquire)
  return post_to_acquire_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_post_to_acquire(::android::surfaceflinger::FrameTimingHistogram* post_to_acquire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete post_to_acquire_;
  }
  if (post_to_acquire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      post_to_acquire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_to_acquire, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  post_to_acquire_ = post_to_acquire;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.post_to_acquire)
}

// optional int64 late_acquire_frames = 10;
inline bool SurfaceflingerStatsLayerInfo::has_late_acquire_frames() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_late_acquire_frames() {
  late_acquire_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsLayerInfo::late_acquire_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.late_acquire_frames)
  return late_acquire_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_late_acquire_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  late_acquire_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.late_acquire_frames)
}

// optional int64 bad_desired_present_frames = 11;
inline bool SurfaceflingerStatsLayerInfo::has_bad_desired_present_frames() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_bad_desired_present_frames() {
  bad_desired_present_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SurfaceflingerStatsLayerInfo::bad_desired_present_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.bad_desired_present_frames)
  return bad_desired_present_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_bad_desired_present_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  bad_desired_present_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.bad_desired_present_frames)
}

// optional int32 total_timeline_frames = 13;
inline bool SurfaceflingerStatsLayerInfo::has_total_timeline_frames() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_timeline_frames() {
  total_timeline_frames_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_timeline_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_timeline_frames)
  return total_timeline_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_timeline_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  total_timeline_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_timeline_frames)
}

// optional int32 total_janky_frames = 14;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames() {
  total_janky_frames_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames)
  return total_janky_frames_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  total_janky_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames)
}

// optional int32 total_janky_frames_with_long_cpu = 15;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames_with_long_cpu() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames_with_long_cpu() {
  total_janky_frames_with_long_cpu_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames_with_long_cpu() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_with_long_cpu)
  return total_janky_frames_with_long_cpu_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames_with_long_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  total_janky_frames_with_long_cpu_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_with_long_cpu)
}

// optional int32 total_janky_frames_with_long_gpu = 16;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames_with_long_gpu() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames_with_long_gpu() {
  total_janky_frames_with_long_gpu_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames_with_long_gpu() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_with_long_gpu)
  return total_janky_frames_with_long_gpu_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames_with_long_gpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  total_janky_frames_with_long_gpu_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_with_long_gpu)
}

// optional int32 total_janky_frames_sf_unattributed = 17;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames_sf_unattributed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames_sf_unattributed() {
  total_janky_frames_sf_unattributed_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames_sf_unattributed() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_sf_unattributed)
  return total_janky_frames_sf_unattributed_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames_sf_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  total_janky_frames_sf_unattributed_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_sf_unattributed)
}

// optional int32 total_janky_frames_app_unattributed = 18;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames_app_unattributed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames_app_unattributed() {
  total_janky_frames_app_unattributed_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames_app_unattributed() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_app_unattributed)
  return total_janky_frames_app_unattributed_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames_app_unattributed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  total_janky_frames_app_unattributed_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_app_unattributed)
}

// optional int32 total_janky_frames_sf_scheduling = 19;
inline bool SurfaceflingerStatsLayerInfo::has_total_janky_frames_sf_scheduling() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_janky_frames_sf_scheduling() {
  total_janky_frames_sf_scheduling_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_janky_frames_sf_scheduling() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_sf_scheduling)
  return total_janky_frames_sf_scheduling_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_janky_frames_sf_scheduling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  total_janky_frames_sf_scheduling_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_janky_frames_sf_scheduling)
}

// optional int32 total_jank_frames_sf_prediction_error = 20;
inline bool SurfaceflingerStatsLayerInfo::has_total_jank_frames_sf_prediction_error() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_jank_frames_sf_prediction_error() {
  total_jank_frames_sf_prediction_error_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_jank_frames_sf_prediction_error() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_jank_frames_sf_prediction_error)
  return total_jank_frames_sf_prediction_error_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_jank_frames_sf_prediction_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  total_jank_frames_sf_prediction_error_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_jank_frames_sf_prediction_error)
}

// optional int32 total_jank_frames_app_buffer_stuffing = 21;
inline bool SurfaceflingerStatsLayerInfo::has_total_jank_frames_app_buffer_stuffing() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_total_jank_frames_app_buffer_stuffing() {
  total_jank_frames_app_buffer_stuffing_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SurfaceflingerStatsLayerInfo::total_jank_frames_app_buffer_stuffing() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_jank_frames_app_buffer_stuffing)
  return total_jank_frames_app_buffer_stuffing_;
}
inline void SurfaceflingerStatsLayerInfo::set_total_jank_frames_app_buffer_stuffing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  total_jank_frames_app_buffer_stuffing_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.SurfaceflingerStatsLayerInfo.total_jank_frames_app_buffer_stuffing)
}

// optional .android.surfaceflinger.SurfaceflingerStatsLayerInfo.SetFrameRateVote set_frame_rate_vote = 24;
inline bool SurfaceflingerStatsLayerInfo::has_set_frame_rate_vote() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_set_frame_rate_vote() {
  if (set_frame_rate_vote_ != nullptr) set_frame_rate_vote_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote& SurfaceflingerStatsLayerInfo::set_frame_rate_vote() const {
  const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* p = set_frame_rate_vote_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.set_frame_rate_vote)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote*>(
      &::android::surfaceflinger::_SurfaceflingerStatsLayerInfo_SetFrameRateVote_default_instance_);
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* SurfaceflingerStatsLayerInfo::release_set_frame_rate_vote() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.set_frame_rate_vote)
  _has_bits_[0] &= ~0x00000080u;
  ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* temp = set_frame_rate_vote_;
  set_frame_rate_vote_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* SurfaceflingerStatsLayerInfo::mutable_set_frame_rate_vote() {
  _has_bits_[0] |= 0x00000080u;
  if (set_frame_rate_vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote>(GetArenaNoVirtual());
    set_frame_rate_vote_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.set_frame_rate_vote)
  return set_frame_rate_vote_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_set_frame_rate_vote(::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote* set_frame_rate_vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete set_frame_rate_vote_;
  }
  if (set_frame_rate_vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_frame_rate_vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_frame_rate_vote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  set_frame_rate_vote_ = set_frame_rate_vote;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.set_frame_rate_vote)
}

// optional .android.surfaceflinger.FrameTimingHistogram app_deadline_misses = 25;
inline bool SurfaceflingerStatsLayerInfo::has_app_deadline_misses() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SurfaceflingerStatsLayerInfo::clear_app_deadline_misses() {
  if (app_deadline_misses_ != nullptr) app_deadline_misses_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::surfaceflinger::FrameTimingHistogram& SurfaceflingerStatsLayerInfo::app_deadline_misses() const {
  const ::android::surfaceflinger::FrameTimingHistogram* p = app_deadline_misses_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.SurfaceflingerStatsLayerInfo.app_deadline_misses)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FrameTimingHistogram*>(
      &::android::surfaceflinger::_FrameTimingHistogram_default_instance_);
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::release_app_deadline_misses() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.SurfaceflingerStatsLayerInfo.app_deadline_misses)
  _has_bits_[0] &= ~0x00000100u;
  ::android::surfaceflinger::FrameTimingHistogram* temp = app_deadline_misses_;
  app_deadline_misses_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FrameTimingHistogram* SurfaceflingerStatsLayerInfo::mutable_app_deadline_misses() {
  _has_bits_[0] |= 0x00000100u;
  if (app_deadline_misses_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FrameTimingHistogram>(GetArenaNoVirtual());
    app_deadline_misses_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.SurfaceflingerStatsLayerInfo.app_deadline_misses)
  return app_deadline_misses_;
}
inline void SurfaceflingerStatsLayerInfo::set_allocated_app_deadline_misses(::android::surfaceflinger::FrameTimingHistogram* app_deadline_misses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_deadline_misses_;
  }
  if (app_deadline_misses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_deadline_misses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_deadline_misses, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  app_deadline_misses_ = app_deadline_misses;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.SurfaceflingerStatsLayerInfo.app_deadline_misses)
}

// -------------------------------------------------------------------

// FrameTimingHistogram

// repeated int32 time_millis_buckets = 1;
inline int FrameTimingHistogram::time_millis_buckets_size() const {
  return time_millis_buckets_.size();
}
inline void FrameTimingHistogram::clear_time_millis_buckets() {
  time_millis_buckets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrameTimingHistogram::time_millis_buckets(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FrameTimingHistogram.time_millis_buckets)
  return time_millis_buckets_.Get(index);
}
inline void FrameTimingHistogram::set_time_millis_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  time_millis_buckets_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FrameTimingHistogram.time_millis_buckets)
}
inline void FrameTimingHistogram::add_time_millis_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  time_millis_buckets_.Add(value);
  // @@protoc_insertion_point(field_add:android.surfaceflinger.FrameTimingHistogram.time_millis_buckets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FrameTimingHistogram::time_millis_buckets() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.FrameTimingHistogram.time_millis_buckets)
  return time_millis_buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FrameTimingHistogram::mutable_time_millis_buckets() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.FrameTimingHistogram.time_millis_buckets)
  return &time_millis_buckets_;
}

// repeated int64 frame_counts = 2;
inline int FrameTimingHistogram::frame_counts_size() const {
  return frame_counts_.size();
}
inline void FrameTimingHistogram::clear_frame_counts() {
  frame_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTimingHistogram::frame_counts(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FrameTimingHistogram.frame_counts)
  return frame_counts_.Get(index);
}
inline void FrameTimingHistogram::set_frame_counts(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  frame_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FrameTimingHistogram.frame_counts)
}
inline void FrameTimingHistogram::add_frame_counts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  frame_counts_.Add(value);
  // @@protoc_insertion_point(field_add:android.surfaceflinger.FrameTimingHistogram.frame_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FrameTimingHistogram::frame_counts() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.FrameTimingHistogram.frame_counts)
  return frame_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FrameTimingHistogram::mutable_frame_counts() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.FrameTimingHistogram.frame_counts)
  return &frame_counts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_FrameRateCompatibility> : ::std::true_type {};
template <> struct is_proto_enum< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_SetFrameRateVote_Seamlessness> : ::std::true_type {};
template <> struct is_proto_enum< ::android::surfaceflinger::SurfaceflingerStatsLayerInfo_GameMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2fTimeStats_2ftimestatsatomsproto_2ftimestats_5fatoms_2eproto
