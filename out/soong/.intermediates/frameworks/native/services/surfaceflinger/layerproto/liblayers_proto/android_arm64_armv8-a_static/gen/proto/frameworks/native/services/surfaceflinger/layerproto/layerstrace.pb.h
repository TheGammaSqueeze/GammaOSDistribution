// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/layerstrace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/native/services/surfaceflinger/layerproto/layers.pb.h"
#include "frameworks/native/services/surfaceflinger/layerproto/display.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class LayersTraceFileProto;
class LayersTraceFileProtoDefaultTypeInternal;
extern LayersTraceFileProtoDefaultTypeInternal _LayersTraceFileProto_default_instance_;
class LayersTraceProto;
class LayersTraceProtoDefaultTypeInternal;
extern LayersTraceProtoDefaultTypeInternal _LayersTraceProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::LayersTraceFileProto* Arena::CreateMaybeMessage<::android::surfaceflinger::LayersTraceFileProto>(Arena*);
template<> ::android::surfaceflinger::LayersTraceProto* Arena::CreateMaybeMessage<::android::surfaceflinger::LayersTraceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

enum LayersTraceFileProto_MagicNumber : int {
  LayersTraceFileProto_MagicNumber_INVALID = 0,
  LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L = 1414682956,
  LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_H = 1162035538
};
bool LayersTraceFileProto_MagicNumber_IsValid(int value);
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto_MagicNumber_MagicNumber_MIN = LayersTraceFileProto_MagicNumber_INVALID;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto_MagicNumber_MagicNumber_MAX = LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
constexpr int LayersTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE = LayersTraceFileProto_MagicNumber_MagicNumber_MAX + 1;

const std::string& LayersTraceFileProto_MagicNumber_Name(LayersTraceFileProto_MagicNumber value);
template<typename T>
inline const std::string& LayersTraceFileProto_MagicNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayersTraceFileProto_MagicNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayersTraceFileProto_MagicNumber_Name.");
  return LayersTraceFileProto_MagicNumber_Name(static_cast<LayersTraceFileProto_MagicNumber>(enum_t_value));
}
bool LayersTraceFileProto_MagicNumber_Parse(
    const std::string& name, LayersTraceFileProto_MagicNumber* value);
// ===================================================================

class LayersTraceFileProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayersTraceFileProto) */ {
 public:
  LayersTraceFileProto();
  virtual ~LayersTraceFileProto();

  LayersTraceFileProto(const LayersTraceFileProto& from);
  LayersTraceFileProto(LayersTraceFileProto&& from) noexcept
    : LayersTraceFileProto() {
    *this = ::std::move(from);
  }

  inline LayersTraceFileProto& operator=(const LayersTraceFileProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersTraceFileProto& operator=(LayersTraceFileProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersTraceFileProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersTraceFileProto* internal_default_instance() {
    return reinterpret_cast<const LayersTraceFileProto*>(
               &_LayersTraceFileProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayersTraceFileProto& a, LayersTraceFileProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersTraceFileProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersTraceFileProto* New() const final {
    return CreateMaybeMessage<LayersTraceFileProto>(nullptr);
  }

  LayersTraceFileProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersTraceFileProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersTraceFileProto& from);
  void MergeFrom(const LayersTraceFileProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersTraceFileProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayersTraceFileProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayersTraceFileProto_MagicNumber MagicNumber;
  static constexpr MagicNumber INVALID =
    LayersTraceFileProto_MagicNumber_INVALID;
  static constexpr MagicNumber MAGIC_NUMBER_L =
    LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
  static constexpr MagicNumber MAGIC_NUMBER_H =
    LayersTraceFileProto_MagicNumber_MAGIC_NUMBER_H;
  static inline bool MagicNumber_IsValid(int value) {
    return LayersTraceFileProto_MagicNumber_IsValid(value);
  }
  static constexpr MagicNumber MagicNumber_MIN =
    LayersTraceFileProto_MagicNumber_MagicNumber_MIN;
  static constexpr MagicNumber MagicNumber_MAX =
    LayersTraceFileProto_MagicNumber_MagicNumber_MAX;
  static constexpr int MagicNumber_ARRAYSIZE =
    LayersTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MagicNumber_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MagicNumber>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MagicNumber_Name.");
    return LayersTraceFileProto_MagicNumber_Name(enum_t_value);
  }
  static inline bool MagicNumber_Parse(const std::string& name,
      MagicNumber* value) {
    return LayersTraceFileProto_MagicNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kMagicNumberFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.LayersTraceProto entry = 2;
  int entry_size() const;
  void clear_entry();
  ::android::surfaceflinger::LayersTraceProto* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayersTraceProto >*
      mutable_entry();
  const ::android::surfaceflinger::LayersTraceProto& entry(int index) const;
  ::android::surfaceflinger::LayersTraceProto* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayersTraceProto >&
      entry() const;

  // optional fixed64 magic_number = 1;
  bool has_magic_number() const;
  void clear_magic_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_number() const;
  void set_magic_number(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayersTraceFileProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayersTraceProto > entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_number_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto;
};
// -------------------------------------------------------------------

class LayersTraceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayersTraceProto) */ {
 public:
  LayersTraceProto();
  virtual ~LayersTraceProto();

  LayersTraceProto(const LayersTraceProto& from);
  LayersTraceProto(LayersTraceProto&& from) noexcept
    : LayersTraceProto() {
    *this = ::std::move(from);
  }

  inline LayersTraceProto& operator=(const LayersTraceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersTraceProto& operator=(LayersTraceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersTraceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersTraceProto* internal_default_instance() {
    return reinterpret_cast<const LayersTraceProto*>(
               &_LayersTraceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LayersTraceProto& a, LayersTraceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersTraceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersTraceProto* New() const final {
    return CreateMaybeMessage<LayersTraceProto>(nullptr);
  }

  LayersTraceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersTraceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersTraceProto& from);
  void MergeFrom(const LayersTraceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersTraceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayersTraceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplaysFieldNumber = 7,
    kWhereFieldNumber = 2,
    kHwcBlobFieldNumber = 4,
    kLayersFieldNumber = 3,
    kElapsedRealtimeNanosFieldNumber = 1,
    kExcludesCompositionStateFieldNumber = 5,
    kMissedEntriesFieldNumber = 6,
  };
  // repeated .android.surfaceflinger.DisplayProto displays = 7;
  int displays_size() const;
  void clear_displays();
  ::android::surfaceflinger::DisplayProto* mutable_displays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayProto >*
      mutable_displays();
  const ::android::surfaceflinger::DisplayProto& displays(int index) const;
  ::android::surfaceflinger::DisplayProto* add_displays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayProto >&
      displays() const;

  // optional string where = 2;
  bool has_where() const;
  void clear_where();
  const std::string& where() const;
  void set_where(const std::string& value);
  void set_where(std::string&& value);
  void set_where(const char* value);
  void set_where(const char* value, size_t size);
  std::string* mutable_where();
  std::string* release_where();
  void set_allocated_where(std::string* where);

  // optional string hwc_blob = 4;
  bool has_hwc_blob() const;
  void clear_hwc_blob();
  const std::string& hwc_blob() const;
  void set_hwc_blob(const std::string& value);
  void set_hwc_blob(std::string&& value);
  void set_hwc_blob(const char* value);
  void set_hwc_blob(const char* value, size_t size);
  std::string* mutable_hwc_blob();
  std::string* release_hwc_blob();
  void set_allocated_hwc_blob(std::string* hwc_blob);

  // optional .android.surfaceflinger.LayersProto layers = 3;
  bool has_layers() const;
  void clear_layers();
  const ::android::surfaceflinger::LayersProto& layers() const;
  ::android::surfaceflinger::LayersProto* release_layers();
  ::android::surfaceflinger::LayersProto* mutable_layers();
  void set_allocated_layers(::android::surfaceflinger::LayersProto* layers);

  // optional sfixed64 elapsed_realtime_nanos = 1;
  bool has_elapsed_realtime_nanos() const;
  void clear_elapsed_realtime_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_realtime_nanos() const;
  void set_elapsed_realtime_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool excludes_composition_state = 5;
  bool has_excludes_composition_state() const;
  void clear_excludes_composition_state();
  bool excludes_composition_state() const;
  void set_excludes_composition_state(bool value);

  // optional uint32 missed_entries = 6;
  bool has_missed_entries() const;
  void clear_missed_entries();
  ::PROTOBUF_NAMESPACE_ID::uint32 missed_entries() const;
  void set_missed_entries(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayersTraceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayProto > displays_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hwc_blob_;
  ::android::surfaceflinger::LayersProto* layers_;
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_realtime_nanos_;
  bool excludes_composition_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 missed_entries_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayersTraceFileProto

// optional fixed64 magic_number = 1;
inline bool LayersTraceFileProto::has_magic_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayersTraceFileProto::clear_magic_number() {
  magic_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersTraceFileProto::magic_number() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceFileProto.magic_number)
  return magic_number_;
}
inline void LayersTraceFileProto::set_magic_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  magic_number_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceFileProto.magic_number)
}

// repeated .android.surfaceflinger.LayersTraceProto entry = 2;
inline int LayersTraceFileProto::entry_size() const {
  return entry_.size();
}
inline void LayersTraceFileProto::clear_entry() {
  entry_.Clear();
}
inline ::android::surfaceflinger::LayersTraceProto* LayersTraceFileProto::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersTraceFileProto.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayersTraceProto >*
LayersTraceFileProto::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayersTraceFileProto.entry)
  return &entry_;
}
inline const ::android::surfaceflinger::LayersTraceProto& LayersTraceFileProto::entry(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceFileProto.entry)
  return entry_.Get(index);
}
inline ::android::surfaceflinger::LayersTraceProto* LayersTraceFileProto::add_entry() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayersTraceFileProto.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayersTraceProto >&
LayersTraceFileProto::entry() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayersTraceFileProto.entry)
  return entry_;
}

// -------------------------------------------------------------------

// LayersTraceProto

// optional sfixed64 elapsed_realtime_nanos = 1;
inline bool LayersTraceProto::has_elapsed_realtime_nanos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayersTraceProto::clear_elapsed_realtime_nanos() {
  elapsed_realtime_nanos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LayersTraceProto::elapsed_realtime_nanos() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.elapsed_realtime_nanos)
  return elapsed_realtime_nanos_;
}
inline void LayersTraceProto::set_elapsed_realtime_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  elapsed_realtime_nanos_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceProto.elapsed_realtime_nanos)
}

// optional string where = 2;
inline bool LayersTraceProto::has_where() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayersTraceProto::clear_where() {
  where_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayersTraceProto::where() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.where)
  return where_.GetNoArena();
}
inline void LayersTraceProto::set_where(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceProto.where)
}
inline void LayersTraceProto::set_where(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  where_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayersTraceProto.where)
}
inline void LayersTraceProto::set_where(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayersTraceProto.where)
}
inline void LayersTraceProto::set_where(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayersTraceProto.where)
}
inline std::string* LayersTraceProto::mutable_where() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersTraceProto.where)
  return where_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayersTraceProto::release_where() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayersTraceProto.where)
  if (!has_where()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return where_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayersTraceProto::set_allocated_where(std::string* where) {
  if (where != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  where_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), where);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayersTraceProto.where)
}

// optional .android.surfaceflinger.LayersProto layers = 3;
inline bool LayersTraceProto::has_layers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::surfaceflinger::LayersProto& LayersTraceProto::layers() const {
  const ::android::surfaceflinger::LayersProto* p = layers_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.layers)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::LayersProto*>(
      &::android::surfaceflinger::_LayersProto_default_instance_);
}
inline ::android::surfaceflinger::LayersProto* LayersTraceProto::release_layers() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayersTraceProto.layers)
  _has_bits_[0] &= ~0x00000004u;
  ::android::surfaceflinger::LayersProto* temp = layers_;
  layers_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::LayersProto* LayersTraceProto::mutable_layers() {
  _has_bits_[0] |= 0x00000004u;
  if (layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::LayersProto>(GetArenaNoVirtual());
    layers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersTraceProto.layers)
  return layers_;
}
inline void LayersTraceProto::set_allocated_layers(::android::surfaceflinger::LayersProto* layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(layers_);
  }
  if (layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  layers_ = layers;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayersTraceProto.layers)
}

// optional string hwc_blob = 4;
inline bool LayersTraceProto::has_hwc_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayersTraceProto::clear_hwc_blob() {
  hwc_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayersTraceProto::hwc_blob() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.hwc_blob)
  return hwc_blob_.GetNoArena();
}
inline void LayersTraceProto::set_hwc_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hwc_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceProto.hwc_blob)
}
inline void LayersTraceProto::set_hwc_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hwc_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayersTraceProto.hwc_blob)
}
inline void LayersTraceProto::set_hwc_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hwc_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayersTraceProto.hwc_blob)
}
inline void LayersTraceProto::set_hwc_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hwc_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayersTraceProto.hwc_blob)
}
inline std::string* LayersTraceProto::mutable_hwc_blob() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersTraceProto.hwc_blob)
  return hwc_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayersTraceProto::release_hwc_blob() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayersTraceProto.hwc_blob)
  if (!has_hwc_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hwc_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayersTraceProto::set_allocated_hwc_blob(std::string* hwc_blob) {
  if (hwc_blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hwc_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hwc_blob);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayersTraceProto.hwc_blob)
}

// optional bool excludes_composition_state = 5;
inline bool LayersTraceProto::has_excludes_composition_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayersTraceProto::clear_excludes_composition_state() {
  excludes_composition_state_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LayersTraceProto::excludes_composition_state() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.excludes_composition_state)
  return excludes_composition_state_;
}
inline void LayersTraceProto::set_excludes_composition_state(bool value) {
  _has_bits_[0] |= 0x00000010u;
  excludes_composition_state_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceProto.excludes_composition_state)
}

// optional uint32 missed_entries = 6;
inline bool LayersTraceProto::has_missed_entries() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayersTraceProto::clear_missed_entries() {
  missed_entries_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayersTraceProto::missed_entries() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.missed_entries)
  return missed_entries_;
}
inline void LayersTraceProto::set_missed_entries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  missed_entries_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayersTraceProto.missed_entries)
}

// repeated .android.surfaceflinger.DisplayProto displays = 7;
inline int LayersTraceProto::displays_size() const {
  return displays_.size();
}
inline ::android::surfaceflinger::DisplayProto* LayersTraceProto::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersTraceProto.displays)
  return displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayProto >*
LayersTraceProto::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayersTraceProto.displays)
  return &displays_;
}
inline const ::android::surfaceflinger::DisplayProto& LayersTraceProto::displays(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersTraceProto.displays)
  return displays_.Get(index);
}
inline ::android::surfaceflinger::DisplayProto* LayersTraceProto::add_displays() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayersTraceProto.displays)
  return displays_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::DisplayProto >&
LayersTraceProto::displays() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayersTraceProto.displays)
  return displays_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::surfaceflinger::LayersTraceFileProto_MagicNumber> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto
