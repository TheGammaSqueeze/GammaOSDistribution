// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/layerstrace.proto

#include "frameworks/native/services/surfaceflinger/layerproto/layerstrace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto;
namespace android {
namespace surfaceflinger {
class LayersTraceFileProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersTraceFileProto> _instance;
} _LayersTraceFileProto_default_instance_;
class LayersTraceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersTraceProto> _instance;
} _LayersTraceProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_LayersTraceFileProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayersTraceFileProto_default_instance_;
    new (ptr) ::android::surfaceflinger::LayersTraceFileProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayersTraceFileProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersTraceFileProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LayersTraceFileProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto}, {
      &scc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto.base,}};

static void InitDefaultsscc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayersTraceProto_default_instance_;
    new (ptr) ::android::surfaceflinger::LayersTraceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayersTraceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto}, {
      &scc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto.base,}};

namespace android {
namespace surfaceflinger {
bool LayersTraceFileProto_MagicNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1162035538:
    case 1414682956:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayersTraceFileProto_MagicNumber_strings[3] = {};

static const char LayersTraceFileProto_MagicNumber_names[] =
  "INVALID"
  "MAGIC_NUMBER_H"
  "MAGIC_NUMBER_L";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayersTraceFileProto_MagicNumber_entries[] = {
  { {LayersTraceFileProto_MagicNumber_names + 0, 7}, 0 },
  { {LayersTraceFileProto_MagicNumber_names + 7, 14}, 1162035538 },
  { {LayersTraceFileProto_MagicNumber_names + 21, 14}, 1414682956 },
};

static const int LayersTraceFileProto_MagicNumber_entries_by_number[] = {
  0, // 0 -> INVALID
  1, // 1162035538 -> MAGIC_NUMBER_H
  2, // 1414682956 -> MAGIC_NUMBER_L
};

const std::string& LayersTraceFileProto_MagicNumber_Name(
    LayersTraceFileProto_MagicNumber value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayersTraceFileProto_MagicNumber_entries,
          LayersTraceFileProto_MagicNumber_entries_by_number,
          3, LayersTraceFileProto_MagicNumber_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayersTraceFileProto_MagicNumber_entries,
      LayersTraceFileProto_MagicNumber_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayersTraceFileProto_MagicNumber_strings[idx].get();
}
bool LayersTraceFileProto_MagicNumber_Parse(
    const std::string& name, LayersTraceFileProto_MagicNumber* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayersTraceFileProto_MagicNumber_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LayersTraceFileProto_MagicNumber>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::INVALID;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MAGIC_NUMBER_L;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MAGIC_NUMBER_H;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MagicNumber_MIN;
constexpr LayersTraceFileProto_MagicNumber LayersTraceFileProto::MagicNumber_MAX;
constexpr int LayersTraceFileProto::MagicNumber_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LayersTraceFileProto::InitAsDefaultInstance() {
}
class LayersTraceFileProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersTraceFileProto>()._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LayersTraceFileProto::LayersTraceFileProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayersTraceFileProto)
}
LayersTraceFileProto::LayersTraceFileProto(const LayersTraceFileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magic_number_ = from.magic_number_;
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayersTraceFileProto)
}

void LayersTraceFileProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersTraceFileProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto.base);
  magic_number_ = PROTOBUF_ULONGLONG(0);
}

LayersTraceFileProto::~LayersTraceFileProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayersTraceFileProto)
  SharedDtor();
}

void LayersTraceFileProto::SharedDtor() {
}

void LayersTraceFileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersTraceFileProto& LayersTraceFileProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersTraceFileProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto.base);
  return *internal_default_instance();
}


void LayersTraceFileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayersTraceFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  magic_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayersTraceFileProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_magic_number(&has_bits);
          magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.LayersTraceProto entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayersTraceFileProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayersTraceFileProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 magic_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_magic_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.LayersTraceProto entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayersTraceFileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayersTraceFileProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayersTraceFileProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayersTraceFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 magic_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->magic_number(), output);
  }

  // repeated .android.surfaceflinger.LayersTraceProto entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayersTraceFileProto)
}

size_t LayersTraceFileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayersTraceFileProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.LayersTraceProto entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  // optional fixed64 magic_number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersTraceFileProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersTraceFileProto*>(
      &from));
}

void LayersTraceFileProto::MergeFrom(const LayersTraceFileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayersTraceFileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.has_magic_number()) {
    set_magic_number(from.magic_number());
  }
}

void LayersTraceFileProto::CopyFrom(const LayersTraceFileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayersTraceFileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersTraceFileProto::IsInitialized() const {
  return true;
}

void LayersTraceFileProto::InternalSwap(LayersTraceFileProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
  swap(magic_number_, other->magic_number_);
}

std::string LayersTraceFileProto::GetTypeName() const {
  return "android.surfaceflinger.LayersTraceFileProto";
}


// ===================================================================

void LayersTraceProto::InitAsDefaultInstance() {
  ::android::surfaceflinger::_LayersTraceProto_default_instance_._instance.get_mutable()->layers_ = const_cast< ::android::surfaceflinger::LayersProto*>(
      ::android::surfaceflinger::LayersProto::internal_default_instance());
}
class LayersTraceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersTraceProto>()._has_bits_);
  static void set_has_elapsed_realtime_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_where(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::surfaceflinger::LayersProto& layers(const LayersTraceProto* msg);
  static void set_has_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hwc_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_excludes_composition_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_missed_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::surfaceflinger::LayersProto&
LayersTraceProto::_Internal::layers(const LayersTraceProto* msg) {
  return *msg->layers_;
}
void LayersTraceProto::clear_layers() {
  if (layers_ != nullptr) layers_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LayersTraceProto::clear_displays() {
  displays_.Clear();
}
LayersTraceProto::LayersTraceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayersTraceProto)
}
LayersTraceProto::LayersTraceProto(const LayersTraceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      displays_(from.displays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_where()) {
    where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  hwc_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hwc_blob()) {
    hwc_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hwc_blob_);
  }
  if (from.has_layers()) {
    layers_ = new ::android::surfaceflinger::LayersProto(*from.layers_);
  } else {
    layers_ = nullptr;
  }
  ::memcpy(&elapsed_realtime_nanos_, &from.elapsed_realtime_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&missed_entries_) -
    reinterpret_cast<char*>(&elapsed_realtime_nanos_)) + sizeof(missed_entries_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayersTraceProto)
}

void LayersTraceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto.base);
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hwc_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&layers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missed_entries_) -
      reinterpret_cast<char*>(&layers_)) + sizeof(missed_entries_));
}

LayersTraceProto::~LayersTraceProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayersTraceProto)
  SharedDtor();
}

void LayersTraceProto::SharedDtor() {
  where_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hwc_blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layers_;
}

void LayersTraceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersTraceProto& LayersTraceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersTraceProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayerstrace_2eproto.base);
  return *internal_default_instance();
}


void LayersTraceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayersTraceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  displays_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      where_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hwc_blob_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(layers_ != nullptr);
      layers_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&elapsed_realtime_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&missed_entries_) -
        reinterpret_cast<char*>(&elapsed_realtime_nanos_)) + sizeof(missed_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayersTraceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional sfixed64 elapsed_realtime_nanos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_elapsed_realtime_nanos(&has_bits);
          elapsed_realtime_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional string where = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_where(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.surfaceflinger.LayersProto layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_layers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hwc_blob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hwc_blob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool excludes_composition_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_excludes_composition_state(&has_bits);
          excludes_composition_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 missed_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_missed_entries(&has_bits);
          missed_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.DisplayProto displays = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_displays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayersTraceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayersTraceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 elapsed_realtime_nanos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_elapsed_realtime_nanos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &elapsed_realtime_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string where = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.surfaceflinger.LayersProto layers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hwc_blob = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hwc_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool excludes_composition_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_excludes_composition_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excludes_composition_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 missed_entries = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_missed_entries(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missed_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.DisplayProto displays = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_displays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayersTraceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayersTraceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayersTraceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayersTraceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sfixed64 elapsed_realtime_nanos = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64(1, this->elapsed_realtime_nanos(), output);
  }

  // optional string where = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->where(), output);
  }

  // optional .android.surfaceflinger.LayersProto layers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::layers(this), output);
  }

  // optional string hwc_blob = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hwc_blob(), output);
  }

  // optional bool excludes_composition_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->excludes_composition_state(), output);
  }

  // optional uint32 missed_entries = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->missed_entries(), output);
  }

  // repeated .android.surfaceflinger.DisplayProto displays = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->displays_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->displays(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayersTraceProto)
}

size_t LayersTraceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayersTraceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.DisplayProto displays = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->displays_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->displays(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string where = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->where());
    }

    // optional string hwc_blob = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hwc_blob());
    }

    // optional .android.surfaceflinger.LayersProto layers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layers_);
    }

    // optional sfixed64 elapsed_realtime_nanos = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool excludes_composition_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 missed_entries = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->missed_entries());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersTraceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersTraceProto*>(
      &from));
}

void LayersTraceProto::MergeFrom(const LayersTraceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayersTraceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  displays_.MergeFrom(from.displays_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hwc_blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hwc_blob_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_layers()->::android::surfaceflinger::LayersProto::MergeFrom(from.layers());
    }
    if (cached_has_bits & 0x00000008u) {
      elapsed_realtime_nanos_ = from.elapsed_realtime_nanos_;
    }
    if (cached_has_bits & 0x00000010u) {
      excludes_composition_state_ = from.excludes_composition_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      missed_entries_ = from.missed_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayersTraceProto::CopyFrom(const LayersTraceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayersTraceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersTraceProto::IsInitialized() const {
  return true;
}

void LayersTraceProto::InternalSwap(LayersTraceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&displays_)->InternalSwap(CastToBase(&other->displays_));
  where_.Swap(&other->where_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hwc_blob_.Swap(&other->hwc_blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layers_, other->layers_);
  swap(elapsed_realtime_nanos_, other->elapsed_realtime_nanos_);
  swap(excludes_composition_state_, other->excludes_composition_state_);
  swap(missed_entries_, other->missed_entries_);
}

std::string LayersTraceProto::GetTypeName() const {
  return "android.surfaceflinger.LayersTraceProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayersTraceFileProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayersTraceFileProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayersTraceFileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayersTraceProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayersTraceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayersTraceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
