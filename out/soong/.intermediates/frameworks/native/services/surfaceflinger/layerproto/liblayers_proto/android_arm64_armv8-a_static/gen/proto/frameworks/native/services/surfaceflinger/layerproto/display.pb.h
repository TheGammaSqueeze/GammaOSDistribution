// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/display.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/native/services/surfaceflinger/layerproto/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class DisplayProto;
class DisplayProtoDefaultTypeInternal;
extern DisplayProtoDefaultTypeInternal _DisplayProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::DisplayProto* Arena::CreateMaybeMessage<::android::surfaceflinger::DisplayProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

// ===================================================================

class DisplayProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.DisplayProto) */ {
 public:
  DisplayProto();
  virtual ~DisplayProto();

  DisplayProto(const DisplayProto& from);
  DisplayProto(DisplayProto&& from) noexcept
    : DisplayProto() {
    *this = ::std::move(from);
  }

  inline DisplayProto& operator=(const DisplayProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayProto& operator=(DisplayProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DisplayProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayProto* internal_default_instance() {
    return reinterpret_cast<const DisplayProto*>(
               &_DisplayProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DisplayProto& a, DisplayProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayProto* New() const final {
    return CreateMaybeMessage<DisplayProto>(nullptr);
  }

  DisplayProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DisplayProto& from);
  void MergeFrom(const DisplayProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisplayProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.DisplayProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 4,
    kLayerStackSpaceRectFieldNumber = 5,
    kTransformFieldNumber = 6,
    kIdFieldNumber = 1,
    kLayerStackFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .android.surfaceflinger.SizeProto size = 4;
  bool has_size() const;
  void clear_size();
  const ::android::surfaceflinger::SizeProto& size() const;
  ::android::surfaceflinger::SizeProto* release_size();
  ::android::surfaceflinger::SizeProto* mutable_size();
  void set_allocated_size(::android::surfaceflinger::SizeProto* size);

  // .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
  bool has_layer_stack_space_rect() const;
  void clear_layer_stack_space_rect();
  const ::android::surfaceflinger::RectProto& layer_stack_space_rect() const;
  ::android::surfaceflinger::RectProto* release_layer_stack_space_rect();
  ::android::surfaceflinger::RectProto* mutable_layer_stack_space_rect();
  void set_allocated_layer_stack_space_rect(::android::surfaceflinger::RectProto* layer_stack_space_rect);

  // .android.surfaceflinger.TransformProto transform = 6;
  bool has_transform() const;
  void clear_transform();
  const ::android::surfaceflinger::TransformProto& transform() const;
  ::android::surfaceflinger::TransformProto* release_transform();
  ::android::surfaceflinger::TransformProto* mutable_transform();
  void set_allocated_transform(::android::surfaceflinger::TransformProto* transform);

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 layer_stack = 3;
  void clear_layer_stack();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack() const;
  void set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.DisplayProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::surfaceflinger::SizeProto* size_;
  ::android::surfaceflinger::RectProto* layer_stack_space_rect_;
  ::android::surfaceflinger::TransformProto* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DisplayProto

// uint64 id = 1;
inline void DisplayProto::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DisplayProto::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.id)
  return id_;
}
inline void DisplayProto::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayProto.id)
}

// string name = 2;
inline void DisplayProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisplayProto::name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.name)
  return name_.GetNoArena();
}
inline void DisplayProto::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayProto.name)
}
inline void DisplayProto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.DisplayProto.name)
}
inline void DisplayProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.DisplayProto.name)
}
inline void DisplayProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.DisplayProto.name)
}
inline std::string* DisplayProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayProto::release_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayProto.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayProto.name)
}

// uint32 layer_stack = 3;
inline void DisplayProto::clear_layer_stack() {
  layer_stack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisplayProto::layer_stack() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.layer_stack)
  return layer_stack_;
}
inline void DisplayProto::set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_stack_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.DisplayProto.layer_stack)
}

// .android.surfaceflinger.SizeProto size = 4;
inline bool DisplayProto::has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline const ::android::surfaceflinger::SizeProto& DisplayProto::size() const {
  const ::android::surfaceflinger::SizeProto* p = size_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::SizeProto*>(
      &::android::surfaceflinger::_SizeProto_default_instance_);
}
inline ::android::surfaceflinger::SizeProto* DisplayProto::release_size() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayProto.size)
  
  ::android::surfaceflinger::SizeProto* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::SizeProto* DisplayProto::mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::SizeProto>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayProto.size)
  return size_;
}
inline void DisplayProto::set_allocated_size(::android::surfaceflinger::SizeProto* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayProto.size)
}

// .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
inline bool DisplayProto::has_layer_stack_space_rect() const {
  return this != internal_default_instance() && layer_stack_space_rect_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& DisplayProto::layer_stack_space_rect() const {
  const ::android::surfaceflinger::RectProto* p = layer_stack_space_rect_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.layer_stack_space_rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* DisplayProto::release_layer_stack_space_rect() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayProto.layer_stack_space_rect)
  
  ::android::surfaceflinger::RectProto* temp = layer_stack_space_rect_;
  layer_stack_space_rect_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* DisplayProto::mutable_layer_stack_space_rect() {
  
  if (layer_stack_space_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    layer_stack_space_rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayProto.layer_stack_space_rect)
  return layer_stack_space_rect_;
}
inline void DisplayProto::set_allocated_layer_stack_space_rect(::android::surfaceflinger::RectProto* layer_stack_space_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(layer_stack_space_rect_);
  }
  if (layer_stack_space_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer_stack_space_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_stack_space_rect, submessage_arena);
    }
    
  } else {
    
  }
  layer_stack_space_rect_ = layer_stack_space_rect;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayProto.layer_stack_space_rect)
}

// .android.surfaceflinger.TransformProto transform = 6;
inline bool DisplayProto::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& DisplayProto::transform() const {
  const ::android::surfaceflinger::TransformProto* p = transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.DisplayProto.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* DisplayProto::release_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.DisplayProto.transform)
  
  ::android::surfaceflinger::TransformProto* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* DisplayProto::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.DisplayProto.transform)
  return transform_;
}
inline void DisplayProto::set_allocated_transform(::android::surfaceflinger::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.DisplayProto.transform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto
