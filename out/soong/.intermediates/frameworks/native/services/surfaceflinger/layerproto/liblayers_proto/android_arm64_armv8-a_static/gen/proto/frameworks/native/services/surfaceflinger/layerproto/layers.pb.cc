// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/layers.proto

#include "frameworks/native/services/surfaceflinger/layerproto/layers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerProto_MetadataEntry_DoNotUse_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
namespace android {
namespace surfaceflinger {
class LayersProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersProto> _instance;
} _LayersProto_default_instance_;
class LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerProto_MetadataEntry_DoNotUse> _instance;
} _LayerProto_MetadataEntry_DoNotUse_default_instance_;
class LayerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerProto> _instance;
} _LayerProto_default_instance_;
class PositionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionProto> _instance;
} _PositionProto_default_instance_;
class RegionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionProto> _instance;
} _RegionProto_default_instance_;
class FloatRectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatRectProto> _instance;
} _FloatRectProto_default_instance_;
class ActiveBufferProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveBufferProto> _instance;
} _ActiveBufferProto_default_instance_;
class ColorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorProto> _instance;
} _ColorProto_default_instance_;
class BarrierLayerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarrierLayerProto> _instance;
} _BarrierLayerProto_default_instance_;
class InputWindowInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputWindowInfoProto> _instance;
} _InputWindowInfoProto_default_instance_;
class ColorTransformProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorTransformProto> _instance;
} _ColorTransformProto_default_instance_;
class BlurRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlurRegion> _instance;
} _BlurRegion_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ActiveBufferProto_default_instance_;
    new (ptr) ::android::surfaceflinger::ActiveBufferProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ActiveBufferProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BarrierLayerProto_default_instance_;
    new (ptr) ::android::surfaceflinger::BarrierLayerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BarrierLayerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_BlurRegion_default_instance_;
    new (ptr) ::android::surfaceflinger::BlurRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::BlurRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ColorProto_default_instance_;
    new (ptr) ::android::surfaceflinger::ColorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ColorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_ColorTransformProto_default_instance_;
    new (ptr) ::android::surfaceflinger::ColorTransformProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::ColorTransformProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_FloatRectProto_default_instance_;
    new (ptr) ::android::surfaceflinger::FloatRectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::FloatRectProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_InputWindowInfoProto_default_instance_;
    new (ptr) ::android::surfaceflinger::InputWindowInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::InputWindowInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {
      &scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_TransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayerProto_default_instance_;
    new (ptr) ::android::surfaceflinger::LayerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsscc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {
      &scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_SizeProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_TransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_LayerProto_MetadataEntry_DoNotUse_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,
      &scc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,}};

static void InitDefaultsscc_info_LayerProto_MetadataEntry_DoNotUse_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayerProto_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse();
  }
  ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayerProto_MetadataEntry_DoNotUse_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LayerProto_MetadataEntry_DoNotUse_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_LayersProto_default_instance_;
    new (ptr) ::android::surfaceflinger::LayersProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::LayersProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {
      &scc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base,}};

static void InitDefaultsscc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_PositionProto_default_instance_;
    new (ptr) ::android::surfaceflinger::PositionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::PositionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {}};

static void InitDefaultsscc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_RegionProto_default_instance_;
    new (ptr) ::android::surfaceflinger::RegionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::RegionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto}, {
      &scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,}};

namespace android {
namespace surfaceflinger {
bool HwcCompositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HwcCompositionType_strings[6] = {};

static const char HwcCompositionType_names[] =
  "CLIENT"
  "CURSOR"
  "DEVICE"
  "INVALID"
  "SIDEBAND"
  "SOLID_COLOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HwcCompositionType_entries[] = {
  { {HwcCompositionType_names + 0, 6}, 1 },
  { {HwcCompositionType_names + 6, 6}, 4 },
  { {HwcCompositionType_names + 12, 6}, 2 },
  { {HwcCompositionType_names + 18, 7}, 0 },
  { {HwcCompositionType_names + 25, 8}, 5 },
  { {HwcCompositionType_names + 33, 11}, 3 },
};

static const int HwcCompositionType_entries_by_number[] = {
  3, // 0 -> INVALID
  0, // 1 -> CLIENT
  2, // 2 -> DEVICE
  5, // 3 -> SOLID_COLOR
  1, // 4 -> CURSOR
  4, // 5 -> SIDEBAND
};

const std::string& HwcCompositionType_Name(
    HwcCompositionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HwcCompositionType_entries,
          HwcCompositionType_entries_by_number,
          6, HwcCompositionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HwcCompositionType_entries,
      HwcCompositionType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HwcCompositionType_strings[idx].get();
}
bool HwcCompositionType_Parse(
    const std::string& name, HwcCompositionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HwcCompositionType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<HwcCompositionType>(int_value);
  }
  return success;
}

// ===================================================================

void LayersProto::InitAsDefaultInstance() {
}
class LayersProto::_Internal {
 public:
};

LayersProto::LayersProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayersProto)
}
LayersProto::LayersProto(const LayersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayersProto)
}

void LayersProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
}

LayersProto::~LayersProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayersProto)
  SharedDtor();
}

void LayersProto::SharedDtor() {
}

void LayersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersProto& LayersProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void LayersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.LayerProto layers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayersProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayersProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.LayerProto layers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayersProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayersProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayersProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayersProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.LayerProto layers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->layers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->layers(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayersProto)
}

size_t LayersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayersProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.LayerProto layers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->layers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->layers(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersProto*>(
      &from));
}

void LayersProto::MergeFrom(const LayersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayersProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
}

void LayersProto::CopyFrom(const LayersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersProto::IsInitialized() const {
  return true;
}

void LayersProto::InternalSwap(LayersProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&layers_)->InternalSwap(CastToBase(&other->layers_));
}

std::string LayersProto::GetTypeName() const {
  return "android.surfaceflinger.LayersProto";
}


// ===================================================================

LayerProto_MetadataEntry_DoNotUse::LayerProto_MetadataEntry_DoNotUse() {}
LayerProto_MetadataEntry_DoNotUse::LayerProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LayerProto_MetadataEntry_DoNotUse::MergeFrom(const LayerProto_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void LayerProto::InitAsDefaultInstance() {
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->transparent_region_ = const_cast< ::android::surfaceflinger::RegionProto*>(
      ::android::surfaceflinger::RegionProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->visible_region_ = const_cast< ::android::surfaceflinger::RegionProto*>(
      ::android::surfaceflinger::RegionProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->damage_region_ = const_cast< ::android::surfaceflinger::RegionProto*>(
      ::android::surfaceflinger::RegionProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->position_ = const_cast< ::android::surfaceflinger::PositionProto*>(
      ::android::surfaceflinger::PositionProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->requested_position_ = const_cast< ::android::surfaceflinger::PositionProto*>(
      ::android::surfaceflinger::PositionProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->size_ = const_cast< ::android::surfaceflinger::SizeProto*>(
      ::android::surfaceflinger::SizeProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->crop_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->final_crop_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->color_ = const_cast< ::android::surfaceflinger::ColorProto*>(
      ::android::surfaceflinger::ColorProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->requested_color_ = const_cast< ::android::surfaceflinger::ColorProto*>(
      ::android::surfaceflinger::ColorProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->requested_transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->active_buffer_ = const_cast< ::android::surfaceflinger::ActiveBufferProto*>(
      ::android::surfaceflinger::ActiveBufferProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->hwc_frame_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->hwc_crop_ = const_cast< ::android::surfaceflinger::FloatRectProto*>(
      ::android::surfaceflinger::FloatRectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->buffer_transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->effective_transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->source_bounds_ = const_cast< ::android::surfaceflinger::FloatRectProto*>(
      ::android::surfaceflinger::FloatRectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::android::surfaceflinger::FloatRectProto*>(
      ::android::surfaceflinger::FloatRectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->screen_bounds_ = const_cast< ::android::surfaceflinger::FloatRectProto*>(
      ::android::surfaceflinger::FloatRectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->input_window_info_ = const_cast< ::android::surfaceflinger::InputWindowInfoProto*>(
      ::android::surfaceflinger::InputWindowInfoProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->corner_radius_crop_ = const_cast< ::android::surfaceflinger::FloatRectProto*>(
      ::android::surfaceflinger::FloatRectProto::internal_default_instance());
  ::android::surfaceflinger::_LayerProto_default_instance_._instance.get_mutable()->color_transform_ = const_cast< ::android::surfaceflinger::ColorTransformProto*>(
      ::android::surfaceflinger::ColorTransformProto::internal_default_instance());
}
class LayerProto::_Internal {
 public:
  static const ::android::surfaceflinger::RegionProto& transparent_region(const LayerProto* msg);
  static const ::android::surfaceflinger::RegionProto& visible_region(const LayerProto* msg);
  static const ::android::surfaceflinger::RegionProto& damage_region(const LayerProto* msg);
  static const ::android::surfaceflinger::PositionProto& position(const LayerProto* msg);
  static const ::android::surfaceflinger::PositionProto& requested_position(const LayerProto* msg);
  static const ::android::surfaceflinger::SizeProto& size(const LayerProto* msg);
  static const ::android::surfaceflinger::RectProto& crop(const LayerProto* msg);
  static const ::android::surfaceflinger::RectProto& final_crop(const LayerProto* msg);
  static const ::android::surfaceflinger::ColorProto& color(const LayerProto* msg);
  static const ::android::surfaceflinger::ColorProto& requested_color(const LayerProto* msg);
  static const ::android::surfaceflinger::TransformProto& transform(const LayerProto* msg);
  static const ::android::surfaceflinger::TransformProto& requested_transform(const LayerProto* msg);
  static const ::android::surfaceflinger::ActiveBufferProto& active_buffer(const LayerProto* msg);
  static const ::android::surfaceflinger::RectProto& hwc_frame(const LayerProto* msg);
  static const ::android::surfaceflinger::FloatRectProto& hwc_crop(const LayerProto* msg);
  static const ::android::surfaceflinger::TransformProto& buffer_transform(const LayerProto* msg);
  static const ::android::surfaceflinger::TransformProto& effective_transform(const LayerProto* msg);
  static const ::android::surfaceflinger::FloatRectProto& source_bounds(const LayerProto* msg);
  static const ::android::surfaceflinger::FloatRectProto& bounds(const LayerProto* msg);
  static const ::android::surfaceflinger::FloatRectProto& screen_bounds(const LayerProto* msg);
  static const ::android::surfaceflinger::InputWindowInfoProto& input_window_info(const LayerProto* msg);
  static const ::android::surfaceflinger::FloatRectProto& corner_radius_crop(const LayerProto* msg);
  static const ::android::surfaceflinger::ColorTransformProto& color_transform(const LayerProto* msg);
};

const ::android::surfaceflinger::RegionProto&
LayerProto::_Internal::transparent_region(const LayerProto* msg) {
  return *msg->transparent_region_;
}
const ::android::surfaceflinger::RegionProto&
LayerProto::_Internal::visible_region(const LayerProto* msg) {
  return *msg->visible_region_;
}
const ::android::surfaceflinger::RegionProto&
LayerProto::_Internal::damage_region(const LayerProto* msg) {
  return *msg->damage_region_;
}
const ::android::surfaceflinger::PositionProto&
LayerProto::_Internal::position(const LayerProto* msg) {
  return *msg->position_;
}
const ::android::surfaceflinger::PositionProto&
LayerProto::_Internal::requested_position(const LayerProto* msg) {
  return *msg->requested_position_;
}
const ::android::surfaceflinger::SizeProto&
LayerProto::_Internal::size(const LayerProto* msg) {
  return *msg->size_;
}
const ::android::surfaceflinger::RectProto&
LayerProto::_Internal::crop(const LayerProto* msg) {
  return *msg->crop_;
}
const ::android::surfaceflinger::RectProto&
LayerProto::_Internal::final_crop(const LayerProto* msg) {
  return *msg->final_crop_;
}
const ::android::surfaceflinger::ColorProto&
LayerProto::_Internal::color(const LayerProto* msg) {
  return *msg->color_;
}
const ::android::surfaceflinger::ColorProto&
LayerProto::_Internal::requested_color(const LayerProto* msg) {
  return *msg->requested_color_;
}
const ::android::surfaceflinger::TransformProto&
LayerProto::_Internal::transform(const LayerProto* msg) {
  return *msg->transform_;
}
const ::android::surfaceflinger::TransformProto&
LayerProto::_Internal::requested_transform(const LayerProto* msg) {
  return *msg->requested_transform_;
}
const ::android::surfaceflinger::ActiveBufferProto&
LayerProto::_Internal::active_buffer(const LayerProto* msg) {
  return *msg->active_buffer_;
}
const ::android::surfaceflinger::RectProto&
LayerProto::_Internal::hwc_frame(const LayerProto* msg) {
  return *msg->hwc_frame_;
}
const ::android::surfaceflinger::FloatRectProto&
LayerProto::_Internal::hwc_crop(const LayerProto* msg) {
  return *msg->hwc_crop_;
}
const ::android::surfaceflinger::TransformProto&
LayerProto::_Internal::buffer_transform(const LayerProto* msg) {
  return *msg->buffer_transform_;
}
const ::android::surfaceflinger::TransformProto&
LayerProto::_Internal::effective_transform(const LayerProto* msg) {
  return *msg->effective_transform_;
}
const ::android::surfaceflinger::FloatRectProto&
LayerProto::_Internal::source_bounds(const LayerProto* msg) {
  return *msg->source_bounds_;
}
const ::android::surfaceflinger::FloatRectProto&
LayerProto::_Internal::bounds(const LayerProto* msg) {
  return *msg->bounds_;
}
const ::android::surfaceflinger::FloatRectProto&
LayerProto::_Internal::screen_bounds(const LayerProto* msg) {
  return *msg->screen_bounds_;
}
const ::android::surfaceflinger::InputWindowInfoProto&
LayerProto::_Internal::input_window_info(const LayerProto* msg) {
  return *msg->input_window_info_;
}
const ::android::surfaceflinger::FloatRectProto&
LayerProto::_Internal::corner_radius_crop(const LayerProto* msg) {
  return *msg->corner_radius_crop_;
}
const ::android::surfaceflinger::ColorTransformProto&
LayerProto::_Internal::color_transform(const LayerProto* msg) {
  return *msg->color_transform_;
}
void LayerProto::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void LayerProto::clear_crop() {
  if (GetArenaNoVirtual() == nullptr && crop_ != nullptr) {
    delete crop_;
  }
  crop_ = nullptr;
}
void LayerProto::clear_final_crop() {
  if (GetArenaNoVirtual() == nullptr && final_crop_ != nullptr) {
    delete final_crop_;
  }
  final_crop_ = nullptr;
}
void LayerProto::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
void LayerProto::clear_requested_transform() {
  if (GetArenaNoVirtual() == nullptr && requested_transform_ != nullptr) {
    delete requested_transform_;
  }
  requested_transform_ = nullptr;
}
void LayerProto::clear_hwc_frame() {
  if (GetArenaNoVirtual() == nullptr && hwc_frame_ != nullptr) {
    delete hwc_frame_;
  }
  hwc_frame_ = nullptr;
}
void LayerProto::clear_buffer_transform() {
  if (GetArenaNoVirtual() == nullptr && buffer_transform_ != nullptr) {
    delete buffer_transform_;
  }
  buffer_transform_ = nullptr;
}
void LayerProto::clear_effective_transform() {
  if (GetArenaNoVirtual() == nullptr && effective_transform_ != nullptr) {
    delete effective_transform_;
  }
  effective_transform_ = nullptr;
}
LayerProto::LayerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.LayerProto)
}
LayerProto::LayerProto(const LayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      children_(from.children_),
      relatives_(from.relatives_),
      barrier_layer_(from.barrier_layer_),
      blur_regions_(from.blur_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  dataspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dataspace().empty()) {
    dataspace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataspace_);
  }
  pixel_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pixel_format().empty()) {
    pixel_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pixel_format_);
  }
  if (from.has_transparent_region()) {
    transparent_region_ = new ::android::surfaceflinger::RegionProto(*from.transparent_region_);
  } else {
    transparent_region_ = nullptr;
  }
  if (from.has_visible_region()) {
    visible_region_ = new ::android::surfaceflinger::RegionProto(*from.visible_region_);
  } else {
    visible_region_ = nullptr;
  }
  if (from.has_damage_region()) {
    damage_region_ = new ::android::surfaceflinger::RegionProto(*from.damage_region_);
  } else {
    damage_region_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::android::surfaceflinger::PositionProto(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_requested_position()) {
    requested_position_ = new ::android::surfaceflinger::PositionProto(*from.requested_position_);
  } else {
    requested_position_ = nullptr;
  }
  if (from.has_size()) {
    size_ = new ::android::surfaceflinger::SizeProto(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from.has_crop()) {
    crop_ = new ::android::surfaceflinger::RectProto(*from.crop_);
  } else {
    crop_ = nullptr;
  }
  if (from.has_final_crop()) {
    final_crop_ = new ::android::surfaceflinger::RectProto(*from.final_crop_);
  } else {
    final_crop_ = nullptr;
  }
  if (from.has_color()) {
    color_ = new ::android::surfaceflinger::ColorProto(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from.has_requested_color()) {
    requested_color_ = new ::android::surfaceflinger::ColorProto(*from.requested_color_);
  } else {
    requested_color_ = nullptr;
  }
  if (from.has_transform()) {
    transform_ = new ::android::surfaceflinger::TransformProto(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from.has_requested_transform()) {
    requested_transform_ = new ::android::surfaceflinger::TransformProto(*from.requested_transform_);
  } else {
    requested_transform_ = nullptr;
  }
  if (from.has_active_buffer()) {
    active_buffer_ = new ::android::surfaceflinger::ActiveBufferProto(*from.active_buffer_);
  } else {
    active_buffer_ = nullptr;
  }
  if (from.has_hwc_frame()) {
    hwc_frame_ = new ::android::surfaceflinger::RectProto(*from.hwc_frame_);
  } else {
    hwc_frame_ = nullptr;
  }
  if (from.has_hwc_crop()) {
    hwc_crop_ = new ::android::surfaceflinger::FloatRectProto(*from.hwc_crop_);
  } else {
    hwc_crop_ = nullptr;
  }
  if (from.has_buffer_transform()) {
    buffer_transform_ = new ::android::surfaceflinger::TransformProto(*from.buffer_transform_);
  } else {
    buffer_transform_ = nullptr;
  }
  if (from.has_effective_transform()) {
    effective_transform_ = new ::android::surfaceflinger::TransformProto(*from.effective_transform_);
  } else {
    effective_transform_ = nullptr;
  }
  if (from.has_source_bounds()) {
    source_bounds_ = new ::android::surfaceflinger::FloatRectProto(*from.source_bounds_);
  } else {
    source_bounds_ = nullptr;
  }
  if (from.has_bounds()) {
    bounds_ = new ::android::surfaceflinger::FloatRectProto(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  if (from.has_screen_bounds()) {
    screen_bounds_ = new ::android::surfaceflinger::FloatRectProto(*from.screen_bounds_);
  } else {
    screen_bounds_ = nullptr;
  }
  if (from.has_input_window_info()) {
    input_window_info_ = new ::android::surfaceflinger::InputWindowInfoProto(*from.input_window_info_);
  } else {
    input_window_info_ = nullptr;
  }
  if (from.has_corner_radius_crop()) {
    corner_radius_crop_ = new ::android::surfaceflinger::FloatRectProto(*from.corner_radius_crop_);
  } else {
    corner_radius_crop_ = nullptr;
  }
  if (from.has_color_transform()) {
    color_transform_ = new ::android::surfaceflinger::ColorTransformProto(*from.color_transform_);
  } else {
    color_transform_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&requested_corner_radius_) -
    reinterpret_cast<char*>(&id_)) + sizeof(requested_corner_radius_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.LayerProto)
}

void LayerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataspace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixel_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transparent_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requested_corner_radius_) -
      reinterpret_cast<char*>(&transparent_region_)) + sizeof(requested_corner_radius_));
}

LayerProto::~LayerProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.LayerProto)
  SharedDtor();
}

void LayerProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataspace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixel_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transparent_region_;
  if (this != internal_default_instance()) delete visible_region_;
  if (this != internal_default_instance()) delete damage_region_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete requested_position_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete crop_;
  if (this != internal_default_instance()) delete final_crop_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete requested_color_;
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete requested_transform_;
  if (this != internal_default_instance()) delete active_buffer_;
  if (this != internal_default_instance()) delete hwc_frame_;
  if (this != internal_default_instance()) delete hwc_crop_;
  if (this != internal_default_instance()) delete buffer_transform_;
  if (this != internal_default_instance()) delete effective_transform_;
  if (this != internal_default_instance()) delete source_bounds_;
  if (this != internal_default_instance()) delete bounds_;
  if (this != internal_default_instance()) delete screen_bounds_;
  if (this != internal_default_instance()) delete input_window_info_;
  if (this != internal_default_instance()) delete corner_radius_crop_;
  if (this != internal_default_instance()) delete color_transform_;
}

void LayerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerProto& LayerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void LayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.LayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  relatives_.Clear();
  barrier_layer_.Clear();
  metadata_.Clear();
  blur_regions_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataspace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixel_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && transparent_region_ != nullptr) {
    delete transparent_region_;
  }
  transparent_region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visible_region_ != nullptr) {
    delete visible_region_;
  }
  visible_region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && damage_region_ != nullptr) {
    delete damage_region_;
  }
  damage_region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_position_ != nullptr) {
    delete requested_position_;
  }
  requested_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && crop_ != nullptr) {
    delete crop_;
  }
  crop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && final_crop_ != nullptr) {
    delete final_crop_;
  }
  final_crop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_color_ != nullptr) {
    delete requested_color_;
  }
  requested_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_transform_ != nullptr) {
    delete requested_transform_;
  }
  requested_transform_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && active_buffer_ != nullptr) {
    delete active_buffer_;
  }
  active_buffer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hwc_frame_ != nullptr) {
    delete hwc_frame_;
  }
  hwc_frame_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hwc_crop_ != nullptr) {
    delete hwc_crop_;
  }
  hwc_crop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && buffer_transform_ != nullptr) {
    delete buffer_transform_;
  }
  buffer_transform_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && effective_transform_ != nullptr) {
    delete effective_transform_;
  }
  effective_transform_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_bounds_ != nullptr) {
    delete source_bounds_;
  }
  source_bounds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && screen_bounds_ != nullptr) {
    delete screen_bounds_;
  }
  screen_bounds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_window_info_ != nullptr) {
    delete input_window_info_;
  }
  input_window_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && corner_radius_crop_ != nullptr) {
    delete corner_radius_crop_;
  }
  corner_radius_crop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_transform_ != nullptr) {
    delete color_transform_;
  }
  color_transform_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requested_corner_radius_) -
      reinterpret_cast<char*>(&id_)) + sizeof(requested_corner_radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LayerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 relatives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_relatives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_relatives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RegionProto transparent_region = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_transparent_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RegionProto visible_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_visible_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RegionProto damage_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_damage_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 layer_stack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.PositionProto position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.PositionProto requested_position = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_requested_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.SizeProto size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto crop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_final_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_opaque = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          is_opaque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invalidate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          invalidate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataspace = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dataspace(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pixel_format = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pixel_format(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.ColorProto color = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.ColorProto requested_color = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_requested_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto transform = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto requested_transform = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_requested_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 z_order_relative_of = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          z_order_relative_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_active_buffer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 queued_frames = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          queued_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool refresh_pending = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          refresh_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto hwc_frame = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_hwc_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.FloatRectProto hwc_crop = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_hwc_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hwc_transform = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          hwc_transform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 window_type = 33 [deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          window_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 app_id = 34 [deprecated = true];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_hwc_composition_type(static_cast<::android::surfaceflinger::HwcCompositionType>(val));
        } else goto handle_unusual;
        continue;
      // bool is_protected = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_protected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 curr_frame = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          curr_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_barrier_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 690);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto buffer_transform = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_buffer_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effective_scaling_mode = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          effective_scaling_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float corner_radius = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<int32, bytes> metadata = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 722);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto effective_transform = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_effective_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.FloatRectProto source_bounds = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_source_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.FloatRectProto bounds = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.FloatRectProto screen_bounds = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_screen_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_input_window_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_corner_radius_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float shadow_radius = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          shadow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.ColorTransformProto color_transform = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_color_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_relative_of = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          is_relative_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 background_blur_radius = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          background_blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 owner_uid = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          owner_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_blur_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 946);
        } else goto handle_unusual;
        continue;
      // bool is_trusted_overlay = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          is_trusted_overlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float requested_corner_radius = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          requested_corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LayerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.LayerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.surfaceflinger.LayerProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 children = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_children())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_children())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 relatives = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_relatives())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_relatives())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.surfaceflinger.LayerProto.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RegionProto transparent_region = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transparent_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RegionProto visible_region = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_visible_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RegionProto damage_region = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_damage_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 layer_stack = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 z = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.PositionProto position = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.PositionProto requested_position = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.SizeProto size = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto crop = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_final_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_opaque = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_opaque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invalidate = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataspace = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dataspace()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dataspace().data(), static_cast<int>(this->dataspace().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.surfaceflinger.LayerProto.dataspace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pixel_format = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pixel_format()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pixel_format().data(), static_cast<int>(this->pixel_format().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.surfaceflinger.LayerProto.pixel_format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.ColorProto color = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.ColorProto requested_color = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto transform = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto requested_transform = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parent = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 z_order_relative_of = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_order_relative_of_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_active_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queued_frames = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &queued_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool refresh_pending = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto hwc_frame = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hwc_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.FloatRectProto hwc_crop = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hwc_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hwc_transform = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hwc_transform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 window_type = 33 [deprecated = true];
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 app_id = 34 [deprecated = true];
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hwc_composition_type(static_cast< ::android::surfaceflinger::HwcCompositionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_protected = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (288 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_protected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 curr_frame = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_barrier_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto buffer_transform = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buffer_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 effective_scaling_mode = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &effective_scaling_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float corner_radius = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (333 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bytes> metadata = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          LayerProto_MetadataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              LayerProto_MetadataEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string > > parser(&metadata_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto effective_transform = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_effective_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.FloatRectProto source_bounds = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.FloatRectProto bounds = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.FloatRectProto screen_bounds = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_window_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_radius_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shadow_radius = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (397 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadow_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.ColorTransformProto color_transform = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_relative_of = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (408 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_relative_of_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 background_blur_radius = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (416 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_blur_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (424 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blur_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trusted_overlay = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (440 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trusted_overlay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float requested_corner_radius = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (453 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requested_corner_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.LayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.LayerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LayerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.LayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.surfaceflinger.LayerProto.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated int32 children = 3;
  if (this->children_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_children_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->children_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->children(i), output);
  }

  // repeated int32 relatives = 4;
  if (this->relatives_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relatives_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->relatives_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->relatives(i), output);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.surfaceflinger.LayerProto.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // .android.surfaceflinger.RegionProto transparent_region = 6;
  if (this->has_transparent_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::transparent_region(this), output);
  }

  // .android.surfaceflinger.RegionProto visible_region = 7;
  if (this->has_visible_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::visible_region(this), output);
  }

  // .android.surfaceflinger.RegionProto damage_region = 8;
  if (this->has_damage_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::damage_region(this), output);
  }

  // uint32 layer_stack = 9;
  if (this->layer_stack() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->layer_stack(), output);
  }

  // int32 z = 10;
  if (this->z() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->z(), output);
  }

  // .android.surfaceflinger.PositionProto position = 11;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::position(this), output);
  }

  // .android.surfaceflinger.PositionProto requested_position = 12;
  if (this->has_requested_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::requested_position(this), output);
  }

  // .android.surfaceflinger.SizeProto size = 13;
  if (this->has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::size(this), output);
  }

  // .android.surfaceflinger.RectProto crop = 14;
  if (this->has_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::crop(this), output);
  }

  // .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
  if (this->has_final_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::final_crop(this), output);
  }

  // bool is_opaque = 16;
  if (this->is_opaque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->is_opaque(), output);
  }

  // bool invalidate = 17;
  if (this->invalidate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->invalidate(), output);
  }

  // string dataspace = 18;
  if (this->dataspace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataspace().data(), static_cast<int>(this->dataspace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.surfaceflinger.LayerProto.dataspace");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->dataspace(), output);
  }

  // string pixel_format = 19;
  if (this->pixel_format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pixel_format().data(), static_cast<int>(this->pixel_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.surfaceflinger.LayerProto.pixel_format");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->pixel_format(), output);
  }

  // .android.surfaceflinger.ColorProto color = 20;
  if (this->has_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::color(this), output);
  }

  // .android.surfaceflinger.ColorProto requested_color = 21;
  if (this->has_requested_color()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::requested_color(this), output);
  }

  // uint32 flags = 22;
  if (this->flags() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(22, this->flags(), output);
  }

  // .android.surfaceflinger.TransformProto transform = 23;
  if (this->has_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::transform(this), output);
  }

  // .android.surfaceflinger.TransformProto requested_transform = 24;
  if (this->has_requested_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::requested_transform(this), output);
  }

  // int32 parent = 25;
  if (this->parent() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->parent(), output);
  }

  // int32 z_order_relative_of = 26;
  if (this->z_order_relative_of() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->z_order_relative_of(), output);
  }

  // .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
  if (this->has_active_buffer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::active_buffer(this), output);
  }

  // int32 queued_frames = 28;
  if (this->queued_frames() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->queued_frames(), output);
  }

  // bool refresh_pending = 29;
  if (this->refresh_pending() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(29, this->refresh_pending(), output);
  }

  // .android.surfaceflinger.RectProto hwc_frame = 30;
  if (this->has_hwc_frame()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::hwc_frame(this), output);
  }

  // .android.surfaceflinger.FloatRectProto hwc_crop = 31;
  if (this->has_hwc_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::hwc_crop(this), output);
  }

  // int32 hwc_transform = 32;
  if (this->hwc_transform() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(32, this->hwc_transform(), output);
  }

  // int32 window_type = 33 [deprecated = true];
  if (this->window_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(33, this->window_type(), output);
  }

  // int32 app_id = 34 [deprecated = true];
  if (this->app_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(34, this->app_id(), output);
  }

  // .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
  if (this->hwc_composition_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      35, this->hwc_composition_type(), output);
  }

  // bool is_protected = 36;
  if (this->is_protected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(36, this->is_protected(), output);
  }

  // uint64 curr_frame = 37;
  if (this->curr_frame() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(37, this->curr_frame(), output);
  }

  // repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->barrier_layer_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38,
      this->barrier_layer(static_cast<int>(i)),
      output);
  }

  // .android.surfaceflinger.TransformProto buffer_transform = 39;
  if (this->has_buffer_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::buffer_transform(this), output);
  }

  // int32 effective_scaling_mode = 40;
  if (this->effective_scaling_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(40, this->effective_scaling_mode(), output);
  }

  // float corner_radius = 41;
  if (!(this->corner_radius() <= 0 && this->corner_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(41, this->corner_radius(), output);
  }

  // map<int32, bytes> metadata = 42;
  if (!this->metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        LayerProto_MetadataEntry_DoNotUse::Funcs::SerializeToCodedStream(42, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        LayerProto_MetadataEntry_DoNotUse::Funcs::SerializeToCodedStream(42, it->first, it->second, output);
      }
    }
  }

  // .android.surfaceflinger.TransformProto effective_transform = 43;
  if (this->has_effective_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::effective_transform(this), output);
  }

  // .android.surfaceflinger.FloatRectProto source_bounds = 44;
  if (this->has_source_bounds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::source_bounds(this), output);
  }

  // .android.surfaceflinger.FloatRectProto bounds = 45;
  if (this->has_bounds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      45, _Internal::bounds(this), output);
  }

  // .android.surfaceflinger.FloatRectProto screen_bounds = 46;
  if (this->has_screen_bounds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      46, _Internal::screen_bounds(this), output);
  }

  // .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
  if (this->has_input_window_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      47, _Internal::input_window_info(this), output);
  }

  // .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
  if (this->has_corner_radius_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      48, _Internal::corner_radius_crop(this), output);
  }

  // float shadow_radius = 49;
  if (!(this->shadow_radius() <= 0 && this->shadow_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(49, this->shadow_radius(), output);
  }

  // .android.surfaceflinger.ColorTransformProto color_transform = 50;
  if (this->has_color_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      50, _Internal::color_transform(this), output);
  }

  // bool is_relative_of = 51;
  if (this->is_relative_of() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(51, this->is_relative_of(), output);
  }

  // int32 background_blur_radius = 52;
  if (this->background_blur_radius() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(52, this->background_blur_radius(), output);
  }

  // uint32 owner_uid = 53;
  if (this->owner_uid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(53, this->owner_uid(), output);
  }

  // repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blur_regions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54,
      this->blur_regions(static_cast<int>(i)),
      output);
  }

  // bool is_trusted_overlay = 55;
  if (this->is_trusted_overlay() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(55, this->is_trusted_overlay(), output);
  }

  // float requested_corner_radius = 56;
  if (!(this->requested_corner_radius() <= 0 && this->requested_corner_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(56, this->requested_corner_radius(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.LayerProto)
}

size_t LayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.LayerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 children = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 relatives = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->relatives_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relatives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->barrier_layer_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->barrier_layer(static_cast<int>(i)));
    }
  }

  // map<int32, bytes> metadata = 42;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->metadata().begin();
      it != this->metadata().end(); ++it) {
    total_size += LayerProto_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
  {
    unsigned int count = static_cast<unsigned int>(this->blur_regions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blur_regions(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string dataspace = 18;
  if (this->dataspace().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dataspace());
  }

  // string pixel_format = 19;
  if (this->pixel_format().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pixel_format());
  }

  // .android.surfaceflinger.RegionProto transparent_region = 6;
  if (this->has_transparent_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transparent_region_);
  }

  // .android.surfaceflinger.RegionProto visible_region = 7;
  if (this->has_visible_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visible_region_);
  }

  // .android.surfaceflinger.RegionProto damage_region = 8;
  if (this->has_damage_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *damage_region_);
  }

  // .android.surfaceflinger.PositionProto position = 11;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .android.surfaceflinger.PositionProto requested_position = 12;
  if (this->has_requested_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requested_position_);
  }

  // .android.surfaceflinger.SizeProto size = 13;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .android.surfaceflinger.RectProto crop = 14;
  if (this->has_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crop_);
  }

  // .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
  if (this->has_final_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_crop_);
  }

  // .android.surfaceflinger.ColorProto color = 20;
  if (this->has_color()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .android.surfaceflinger.ColorProto requested_color = 21;
  if (this->has_requested_color()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requested_color_);
  }

  // .android.surfaceflinger.TransformProto transform = 23;
  if (this->has_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .android.surfaceflinger.TransformProto requested_transform = 24;
  if (this->has_requested_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requested_transform_);
  }

  // .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
  if (this->has_active_buffer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_buffer_);
  }

  // .android.surfaceflinger.RectProto hwc_frame = 30;
  if (this->has_hwc_frame()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwc_frame_);
  }

  // .android.surfaceflinger.FloatRectProto hwc_crop = 31;
  if (this->has_hwc_crop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hwc_crop_);
  }

  // .android.surfaceflinger.TransformProto buffer_transform = 39;
  if (this->has_buffer_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buffer_transform_);
  }

  // .android.surfaceflinger.TransformProto effective_transform = 43;
  if (this->has_effective_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effective_transform_);
  }

  // .android.surfaceflinger.FloatRectProto source_bounds = 44;
  if (this->has_source_bounds()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_bounds_);
  }

  // .android.surfaceflinger.FloatRectProto bounds = 45;
  if (this->has_bounds()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // .android.surfaceflinger.FloatRectProto screen_bounds = 46;
  if (this->has_screen_bounds()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_bounds_);
  }

  // .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
  if (this->has_input_window_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_window_info_);
  }

  // .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
  if (this->has_corner_radius_crop()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *corner_radius_crop_);
  }

  // .android.surfaceflinger.ColorTransformProto color_transform = 50;
  if (this->has_color_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_transform_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // uint32 layer_stack = 9;
  if (this->layer_stack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layer_stack());
  }

  // int32 z = 10;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->z());
  }

  // uint32 flags = 22;
  if (this->flags() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // bool is_opaque = 16;
  if (this->is_opaque() != 0) {
    total_size += 2 + 1;
  }

  // bool invalidate = 17;
  if (this->invalidate() != 0) {
    total_size += 2 + 1;
  }

  // bool refresh_pending = 29;
  if (this->refresh_pending() != 0) {
    total_size += 2 + 1;
  }

  // bool is_protected = 36;
  if (this->is_protected() != 0) {
    total_size += 2 + 1;
  }

  // int32 parent = 25;
  if (this->parent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->parent());
  }

  // int32 z_order_relative_of = 26;
  if (this->z_order_relative_of() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->z_order_relative_of());
  }

  // int32 queued_frames = 28;
  if (this->queued_frames() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->queued_frames());
  }

  // int32 hwc_transform = 32;
  if (this->hwc_transform() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hwc_transform());
  }

  // int32 window_type = 33 [deprecated = true];
  if (this->window_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->window_type());
  }

  // int32 app_id = 34 [deprecated = true];
  if (this->app_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  // .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
  if (this->hwc_composition_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hwc_composition_type());
  }

  // uint64 curr_frame = 37;
  if (this->curr_frame() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->curr_frame());
  }

  // int32 effective_scaling_mode = 40;
  if (this->effective_scaling_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->effective_scaling_mode());
  }

  // float corner_radius = 41;
  if (!(this->corner_radius() <= 0 && this->corner_radius() >= 0)) {
    total_size += 2 + 4;
  }

  // float shadow_radius = 49;
  if (!(this->shadow_radius() <= 0 && this->shadow_radius() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 background_blur_radius = 52;
  if (this->background_blur_radius() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->background_blur_radius());
  }

  // uint32 owner_uid = 53;
  if (this->owner_uid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // bool is_relative_of = 51;
  if (this->is_relative_of() != 0) {
    total_size += 2 + 1;
  }

  // bool is_trusted_overlay = 55;
  if (this->is_trusted_overlay() != 0) {
    total_size += 2 + 1;
  }

  // float requested_corner_radius = 56;
  if (!(this->requested_corner_radius() <= 0 && this->requested_corner_radius() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayerProto*>(
      &from));
}

void LayerProto::MergeFrom(const LayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.LayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  relatives_.MergeFrom(from.relatives_);
  barrier_layer_.MergeFrom(from.barrier_layer_);
  metadata_.MergeFrom(from.metadata_);
  blur_regions_.MergeFrom(from.blur_regions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.dataspace().size() > 0) {

    dataspace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataspace_);
  }
  if (from.pixel_format().size() > 0) {

    pixel_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pixel_format_);
  }
  if (from.has_transparent_region()) {
    mutable_transparent_region()->::android::surfaceflinger::RegionProto::MergeFrom(from.transparent_region());
  }
  if (from.has_visible_region()) {
    mutable_visible_region()->::android::surfaceflinger::RegionProto::MergeFrom(from.visible_region());
  }
  if (from.has_damage_region()) {
    mutable_damage_region()->::android::surfaceflinger::RegionProto::MergeFrom(from.damage_region());
  }
  if (from.has_position()) {
    mutable_position()->::android::surfaceflinger::PositionProto::MergeFrom(from.position());
  }
  if (from.has_requested_position()) {
    mutable_requested_position()->::android::surfaceflinger::PositionProto::MergeFrom(from.requested_position());
  }
  if (from.has_size()) {
    mutable_size()->::android::surfaceflinger::SizeProto::MergeFrom(from.size());
  }
  if (from.has_crop()) {
    mutable_crop()->::android::surfaceflinger::RectProto::MergeFrom(from.crop());
  }
  if (from.has_final_crop()) {
    mutable_final_crop()->::android::surfaceflinger::RectProto::MergeFrom(from.final_crop());
  }
  if (from.has_color()) {
    mutable_color()->::android::surfaceflinger::ColorProto::MergeFrom(from.color());
  }
  if (from.has_requested_color()) {
    mutable_requested_color()->::android::surfaceflinger::ColorProto::MergeFrom(from.requested_color());
  }
  if (from.has_transform()) {
    mutable_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.transform());
  }
  if (from.has_requested_transform()) {
    mutable_requested_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.requested_transform());
  }
  if (from.has_active_buffer()) {
    mutable_active_buffer()->::android::surfaceflinger::ActiveBufferProto::MergeFrom(from.active_buffer());
  }
  if (from.has_hwc_frame()) {
    mutable_hwc_frame()->::android::surfaceflinger::RectProto::MergeFrom(from.hwc_frame());
  }
  if (from.has_hwc_crop()) {
    mutable_hwc_crop()->::android::surfaceflinger::FloatRectProto::MergeFrom(from.hwc_crop());
  }
  if (from.has_buffer_transform()) {
    mutable_buffer_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.buffer_transform());
  }
  if (from.has_effective_transform()) {
    mutable_effective_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.effective_transform());
  }
  if (from.has_source_bounds()) {
    mutable_source_bounds()->::android::surfaceflinger::FloatRectProto::MergeFrom(from.source_bounds());
  }
  if (from.has_bounds()) {
    mutable_bounds()->::android::surfaceflinger::FloatRectProto::MergeFrom(from.bounds());
  }
  if (from.has_screen_bounds()) {
    mutable_screen_bounds()->::android::surfaceflinger::FloatRectProto::MergeFrom(from.screen_bounds());
  }
  if (from.has_input_window_info()) {
    mutable_input_window_info()->::android::surfaceflinger::InputWindowInfoProto::MergeFrom(from.input_window_info());
  }
  if (from.has_corner_radius_crop()) {
    mutable_corner_radius_crop()->::android::surfaceflinger::FloatRectProto::MergeFrom(from.corner_radius_crop());
  }
  if (from.has_color_transform()) {
    mutable_color_transform()->::android::surfaceflinger::ColorTransformProto::MergeFrom(from.color_transform());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.layer_stack() != 0) {
    set_layer_stack(from.layer_stack());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.is_opaque() != 0) {
    set_is_opaque(from.is_opaque());
  }
  if (from.invalidate() != 0) {
    set_invalidate(from.invalidate());
  }
  if (from.refresh_pending() != 0) {
    set_refresh_pending(from.refresh_pending());
  }
  if (from.is_protected() != 0) {
    set_is_protected(from.is_protected());
  }
  if (from.parent() != 0) {
    set_parent(from.parent());
  }
  if (from.z_order_relative_of() != 0) {
    set_z_order_relative_of(from.z_order_relative_of());
  }
  if (from.queued_frames() != 0) {
    set_queued_frames(from.queued_frames());
  }
  if (from.hwc_transform() != 0) {
    set_hwc_transform(from.hwc_transform());
  }
  if (from.window_type() != 0) {
    set_window_type(from.window_type());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.hwc_composition_type() != 0) {
    set_hwc_composition_type(from.hwc_composition_type());
  }
  if (from.curr_frame() != 0) {
    set_curr_frame(from.curr_frame());
  }
  if (from.effective_scaling_mode() != 0) {
    set_effective_scaling_mode(from.effective_scaling_mode());
  }
  if (!(from.corner_radius() <= 0 && from.corner_radius() >= 0)) {
    set_corner_radius(from.corner_radius());
  }
  if (!(from.shadow_radius() <= 0 && from.shadow_radius() >= 0)) {
    set_shadow_radius(from.shadow_radius());
  }
  if (from.background_blur_radius() != 0) {
    set_background_blur_radius(from.background_blur_radius());
  }
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.is_relative_of() != 0) {
    set_is_relative_of(from.is_relative_of());
  }
  if (from.is_trusted_overlay() != 0) {
    set_is_trusted_overlay(from.is_trusted_overlay());
  }
  if (!(from.requested_corner_radius() <= 0 && from.requested_corner_radius() >= 0)) {
    set_requested_corner_radius(from.requested_corner_radius());
  }
}

void LayerProto::CopyFrom(const LayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.LayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerProto::IsInitialized() const {
  return true;
}

void LayerProto::InternalSwap(LayerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  relatives_.InternalSwap(&other->relatives_);
  CastToBase(&barrier_layer_)->InternalSwap(CastToBase(&other->barrier_layer_));
  metadata_.Swap(&other->metadata_);
  CastToBase(&blur_regions_)->InternalSwap(CastToBase(&other->blur_regions_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataspace_.Swap(&other->dataspace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pixel_format_.Swap(&other->pixel_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transparent_region_, other->transparent_region_);
  swap(visible_region_, other->visible_region_);
  swap(damage_region_, other->damage_region_);
  swap(position_, other->position_);
  swap(requested_position_, other->requested_position_);
  swap(size_, other->size_);
  swap(crop_, other->crop_);
  swap(final_crop_, other->final_crop_);
  swap(color_, other->color_);
  swap(requested_color_, other->requested_color_);
  swap(transform_, other->transform_);
  swap(requested_transform_, other->requested_transform_);
  swap(active_buffer_, other->active_buffer_);
  swap(hwc_frame_, other->hwc_frame_);
  swap(hwc_crop_, other->hwc_crop_);
  swap(buffer_transform_, other->buffer_transform_);
  swap(effective_transform_, other->effective_transform_);
  swap(source_bounds_, other->source_bounds_);
  swap(bounds_, other->bounds_);
  swap(screen_bounds_, other->screen_bounds_);
  swap(input_window_info_, other->input_window_info_);
  swap(corner_radius_crop_, other->corner_radius_crop_);
  swap(color_transform_, other->color_transform_);
  swap(id_, other->id_);
  swap(layer_stack_, other->layer_stack_);
  swap(z_, other->z_);
  swap(flags_, other->flags_);
  swap(is_opaque_, other->is_opaque_);
  swap(invalidate_, other->invalidate_);
  swap(refresh_pending_, other->refresh_pending_);
  swap(is_protected_, other->is_protected_);
  swap(parent_, other->parent_);
  swap(z_order_relative_of_, other->z_order_relative_of_);
  swap(queued_frames_, other->queued_frames_);
  swap(hwc_transform_, other->hwc_transform_);
  swap(window_type_, other->window_type_);
  swap(app_id_, other->app_id_);
  swap(hwc_composition_type_, other->hwc_composition_type_);
  swap(curr_frame_, other->curr_frame_);
  swap(effective_scaling_mode_, other->effective_scaling_mode_);
  swap(corner_radius_, other->corner_radius_);
  swap(shadow_radius_, other->shadow_radius_);
  swap(background_blur_radius_, other->background_blur_radius_);
  swap(owner_uid_, other->owner_uid_);
  swap(is_relative_of_, other->is_relative_of_);
  swap(is_trusted_overlay_, other->is_trusted_overlay_);
  swap(requested_corner_radius_, other->requested_corner_radius_);
}

std::string LayerProto::GetTypeName() const {
  return "android.surfaceflinger.LayerProto";
}


// ===================================================================

void PositionProto::InitAsDefaultInstance() {
}
class PositionProto::_Internal {
 public:
};

PositionProto::PositionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.PositionProto)
}
PositionProto::PositionProto(const PositionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.PositionProto)
}

void PositionProto::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PositionProto::~PositionProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.PositionProto)
  SharedDtor();
}

void PositionProto::SharedDtor() {
}

void PositionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionProto& PositionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void PositionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.PositionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.PositionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.PositionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.PositionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.PositionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.PositionProto)
}

size_t PositionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.PositionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PositionProto*>(
      &from));
}

void PositionProto::MergeFrom(const PositionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.PositionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
}

void PositionProto::CopyFrom(const PositionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.PositionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionProto::IsInitialized() const {
  return true;
}

void PositionProto::InternalSwap(PositionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

std::string PositionProto::GetTypeName() const {
  return "android.surfaceflinger.PositionProto";
}


// ===================================================================

void RegionProto::InitAsDefaultInstance() {
}
class RegionProto::_Internal {
 public:
};

void RegionProto::clear_rect() {
  rect_.Clear();
}
RegionProto::RegionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.RegionProto)
}
RegionProto::RegionProto(const RegionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      rect_(from.rect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.RegionProto)
}

void RegionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
}

RegionProto::~RegionProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.RegionProto)
  SharedDtor();
}

void RegionProto::SharedDtor() {
}

void RegionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionProto& RegionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void RegionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.RegionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rect_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.surfaceflinger.RectProto rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_rect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.RegionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.surfaceflinger.RectProto rect = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.RegionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.RegionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.RegionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.RectProto rect = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rect_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->rect(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.RegionProto)
}

size_t RegionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.RegionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.surfaceflinger.RectProto rect = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rect_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->rect(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegionProto*>(
      &from));
}

void RegionProto::MergeFrom(const RegionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.RegionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rect_.MergeFrom(from.rect_);
}

void RegionProto::CopyFrom(const RegionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.RegionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionProto::IsInitialized() const {
  return true;
}

void RegionProto::InternalSwap(RegionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&rect_)->InternalSwap(CastToBase(&other->rect_));
}

std::string RegionProto::GetTypeName() const {
  return "android.surfaceflinger.RegionProto";
}


// ===================================================================

void FloatRectProto::InitAsDefaultInstance() {
}
class FloatRectProto::_Internal {
 public:
};

FloatRectProto::FloatRectProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.FloatRectProto)
}
FloatRectProto::FloatRectProto(const FloatRectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.FloatRectProto)
}

void FloatRectProto::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
}

FloatRectProto::~FloatRectProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.FloatRectProto)
  SharedDtor();
}

void FloatRectProto::SharedDtor() {
}

void FloatRectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatRectProto& FloatRectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatRectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void FloatRectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.FloatRectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatRectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bottom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatRectProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.FloatRectProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bottom = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.FloatRectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.FloatRectProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatRectProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.FloatRectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.FloatRectProto)
}

size_t FloatRectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.FloatRectProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float left = 1;
  if (!(this->left() <= 0 && this->left() >= 0)) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (!(this->top() <= 0 && this->top() >= 0)) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (!(this->right() <= 0 && this->right() >= 0)) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (!(this->bottom() <= 0 && this->bottom() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatRectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FloatRectProto*>(
      &from));
}

void FloatRectProto::MergeFrom(const FloatRectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.FloatRectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.left() <= 0 && from.left() >= 0)) {
    set_left(from.left());
  }
  if (!(from.top() <= 0 && from.top() >= 0)) {
    set_top(from.top());
  }
  if (!(from.right() <= 0 && from.right() >= 0)) {
    set_right(from.right());
  }
  if (!(from.bottom() <= 0 && from.bottom() >= 0)) {
    set_bottom(from.bottom());
  }
}

void FloatRectProto::CopyFrom(const FloatRectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.FloatRectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatRectProto::IsInitialized() const {
  return true;
}

void FloatRectProto::InternalSwap(FloatRectProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
}

std::string FloatRectProto::GetTypeName() const {
  return "android.surfaceflinger.FloatRectProto";
}


// ===================================================================

void ActiveBufferProto::InitAsDefaultInstance() {
}
class ActiveBufferProto::_Internal {
 public:
};

ActiveBufferProto::ActiveBufferProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ActiveBufferProto)
}
ActiveBufferProto::ActiveBufferProto(const ActiveBufferProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&width_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ActiveBufferProto)
}

void ActiveBufferProto::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
}

ActiveBufferProto::~ActiveBufferProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ActiveBufferProto)
  SharedDtor();
}

void ActiveBufferProto::SharedDtor() {
}

void ActiveBufferProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveBufferProto& ActiveBufferProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveBufferProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void ActiveBufferProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ActiveBufferProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveBufferProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveBufferProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ActiveBufferProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stride = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 format = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ActiveBufferProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ActiveBufferProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveBufferProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ActiveBufferProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // uint32 stride = 3;
  if (this->stride() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->stride(), output);
  }

  // int32 format = 4;
  if (this->format() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->format(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ActiveBufferProto)
}

size_t ActiveBufferProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ActiveBufferProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 stride = 3;
  if (this->stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->stride());
  }

  // int32 format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->format());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveBufferProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveBufferProto*>(
      &from));
}

void ActiveBufferProto::MergeFrom(const ActiveBufferProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ActiveBufferProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.stride() != 0) {
    set_stride(from.stride());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void ActiveBufferProto::CopyFrom(const ActiveBufferProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ActiveBufferProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveBufferProto::IsInitialized() const {
  return true;
}

void ActiveBufferProto::InternalSwap(ActiveBufferProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(stride_, other->stride_);
  swap(format_, other->format_);
}

std::string ActiveBufferProto::GetTypeName() const {
  return "android.surfaceflinger.ActiveBufferProto";
}


// ===================================================================

void ColorProto::InitAsDefaultInstance() {
}
class ColorProto::_Internal {
 public:
};

ColorProto::ColorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ColorProto)
}
ColorProto::ColorProto(const ColorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ColorProto)
}

void ColorProto::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

ColorProto::~ColorProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ColorProto)
  SharedDtor();
}

void ColorProto::SharedDtor() {
}

void ColorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorProto& ColorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void ColorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ColorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ColorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float r = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float g = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ColorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ColorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ColorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ColorProto)
}

size_t ColorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ColorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ColorProto*>(
      &from));
}

void ColorProto::MergeFrom(const ColorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ColorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    set_r(from.r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    set_g(from.g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    set_b(from.b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    set_a(from.a());
  }
}

void ColorProto::CopyFrom(const ColorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ColorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorProto::IsInitialized() const {
  return true;
}

void ColorProto::InternalSwap(ColorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
}

std::string ColorProto::GetTypeName() const {
  return "android.surfaceflinger.ColorProto";
}


// ===================================================================

void BarrierLayerProto::InitAsDefaultInstance() {
}
class BarrierLayerProto::_Internal {
 public:
};

BarrierLayerProto::BarrierLayerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BarrierLayerProto)
}
BarrierLayerProto::BarrierLayerProto(const BarrierLayerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_number_, &from.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&frame_number_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BarrierLayerProto)
}

void BarrierLayerProto::SharedCtor() {
  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(id_));
}

BarrierLayerProto::~BarrierLayerProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BarrierLayerProto)
  SharedDtor();
}

void BarrierLayerProto::SharedDtor() {
}

void BarrierLayerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarrierLayerProto& BarrierLayerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarrierLayerProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void BarrierLayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BarrierLayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BarrierLayerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BarrierLayerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BarrierLayerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BarrierLayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BarrierLayerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BarrierLayerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BarrierLayerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // uint64 frame_number = 2;
  if (this->frame_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->frame_number(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BarrierLayerProto)
}

size_t BarrierLayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BarrierLayerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 frame_number = 2;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->frame_number());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarrierLayerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BarrierLayerProto*>(
      &from));
}

void BarrierLayerProto::MergeFrom(const BarrierLayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BarrierLayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void BarrierLayerProto::CopyFrom(const BarrierLayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BarrierLayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierLayerProto::IsInitialized() const {
  return true;
}

void BarrierLayerProto::InternalSwap(BarrierLayerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frame_number_, other->frame_number_);
  swap(id_, other->id_);
}

std::string BarrierLayerProto::GetTypeName() const {
  return "android.surfaceflinger.BarrierLayerProto";
}


// ===================================================================

void InputWindowInfoProto::InitAsDefaultInstance() {
  ::android::surfaceflinger::_InputWindowInfoProto_default_instance_._instance.get_mutable()->frame_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_InputWindowInfoProto_default_instance_._instance.get_mutable()->touchable_region_ = const_cast< ::android::surfaceflinger::RegionProto*>(
      ::android::surfaceflinger::RegionProto::internal_default_instance());
  ::android::surfaceflinger::_InputWindowInfoProto_default_instance_._instance.get_mutable()->touchable_region_crop_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_InputWindowInfoProto_default_instance_._instance.get_mutable()->transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
}
class InputWindowInfoProto::_Internal {
 public:
  static const ::android::surfaceflinger::RectProto& frame(const InputWindowInfoProto* msg);
  static const ::android::surfaceflinger::RegionProto& touchable_region(const InputWindowInfoProto* msg);
  static const ::android::surfaceflinger::RectProto& touchable_region_crop(const InputWindowInfoProto* msg);
  static const ::android::surfaceflinger::TransformProto& transform(const InputWindowInfoProto* msg);
};

const ::android::surfaceflinger::RectProto&
InputWindowInfoProto::_Internal::frame(const InputWindowInfoProto* msg) {
  return *msg->frame_;
}
const ::android::surfaceflinger::RegionProto&
InputWindowInfoProto::_Internal::touchable_region(const InputWindowInfoProto* msg) {
  return *msg->touchable_region_;
}
const ::android::surfaceflinger::RectProto&
InputWindowInfoProto::_Internal::touchable_region_crop(const InputWindowInfoProto* msg) {
  return *msg->touchable_region_crop_;
}
const ::android::surfaceflinger::TransformProto&
InputWindowInfoProto::_Internal::transform(const InputWindowInfoProto* msg) {
  return *msg->transform_;
}
void InputWindowInfoProto::clear_frame() {
  if (GetArenaNoVirtual() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
}
void InputWindowInfoProto::clear_touchable_region_crop() {
  if (GetArenaNoVirtual() == nullptr && touchable_region_crop_ != nullptr) {
    delete touchable_region_crop_;
  }
  touchable_region_crop_ = nullptr;
}
void InputWindowInfoProto::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
InputWindowInfoProto::InputWindowInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.InputWindowInfoProto)
}
InputWindowInfoProto::InputWindowInfoProto(const InputWindowInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame()) {
    frame_ = new ::android::surfaceflinger::RectProto(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from.has_touchable_region()) {
    touchable_region_ = new ::android::surfaceflinger::RegionProto(*from.touchable_region_);
  } else {
    touchable_region_ = nullptr;
  }
  if (from.has_touchable_region_crop()) {
    touchable_region_crop_ = new ::android::surfaceflinger::RectProto(*from.touchable_region_crop_);
  } else {
    touchable_region_crop_ = nullptr;
  }
  if (from.has_transform()) {
    transform_ = new ::android::surfaceflinger::TransformProto(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&layout_params_flags_, &from.layout_params_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&replace_touchable_region_with_crop_) -
    reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(replace_touchable_region_with_crop_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.InputWindowInfoProto)
}

void InputWindowInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replace_touchable_region_with_crop_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(replace_touchable_region_with_crop_));
}

InputWindowInfoProto::~InputWindowInfoProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.InputWindowInfoProto)
  SharedDtor();
}

void InputWindowInfoProto::SharedDtor() {
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete touchable_region_;
  if (this != internal_default_instance()) delete touchable_region_crop_;
  if (this != internal_default_instance()) delete transform_;
}

void InputWindowInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputWindowInfoProto& InputWindowInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputWindowInfoProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void InputWindowInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.InputWindowInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && touchable_region_ != nullptr) {
    delete touchable_region_;
  }
  touchable_region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && touchable_region_crop_ != nullptr) {
    delete touchable_region_crop_;
  }
  touchable_region_crop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&layout_params_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replace_touchable_region_with_crop_) -
      reinterpret_cast<char*>(&layout_params_flags_)) + sizeof(replace_touchable_region_with_crop_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputWindowInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 layout_params_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          layout_params_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 layout_params_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          layout_params_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RegionProto touchable_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_touchable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 surface_inset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          surface_inset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool visible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_receive_keys = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          can_receive_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool focusable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          focusable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_wallpaper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          has_wallpaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float global_scale_factor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          global_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float window_x_scale = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          window_x_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float window_y_scale = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          window_y_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 crop_layer_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          crop_layer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool replace_touchable_region_with_crop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          replace_touchable_region_with_crop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto touchable_region_crop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_touchable_region_crop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto transform = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputWindowInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.InputWindowInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 layout_params_flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layout_params_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 layout_params_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layout_params_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto frame = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RegionProto touchable_region = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touchable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 surface_inset = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surface_inset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool visible = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_receive_keys = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_receive_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool focusable = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &focusable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_wallpaper = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wallpaper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float global_scale_factor = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float window_x_scale = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &window_x_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float window_y_scale = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &window_y_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 crop_layer_id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crop_layer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool replace_touchable_region_with_crop = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_touchable_region_with_crop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto touchable_region_crop = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touchable_region_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto transform = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.InputWindowInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.InputWindowInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputWindowInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.InputWindowInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 layout_params_flags = 1;
  if (this->layout_params_flags() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->layout_params_flags(), output);
  }

  // uint32 layout_params_type = 2;
  if (this->layout_params_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->layout_params_type(), output);
  }

  // .android.surfaceflinger.RectProto frame = 3;
  if (this->has_frame()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::frame(this), output);
  }

  // .android.surfaceflinger.RegionProto touchable_region = 4;
  if (this->has_touchable_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::touchable_region(this), output);
  }

  // uint32 surface_inset = 5;
  if (this->surface_inset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->surface_inset(), output);
  }

  // bool visible = 6;
  if (this->visible() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->visible(), output);
  }

  // bool can_receive_keys = 7 [deprecated = true];
  if (this->can_receive_keys() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->can_receive_keys(), output);
  }

  // bool focusable = 8;
  if (this->focusable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->focusable(), output);
  }

  // bool has_wallpaper = 9;
  if (this->has_wallpaper() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->has_wallpaper(), output);
  }

  // float global_scale_factor = 10;
  if (!(this->global_scale_factor() <= 0 && this->global_scale_factor() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->global_scale_factor(), output);
  }

  // float window_x_scale = 11 [deprecated = true];
  if (!(this->window_x_scale() <= 0 && this->window_x_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->window_x_scale(), output);
  }

  // float window_y_scale = 12 [deprecated = true];
  if (!(this->window_y_scale() <= 0 && this->window_y_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->window_y_scale(), output);
  }

  // uint32 crop_layer_id = 13;
  if (this->crop_layer_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->crop_layer_id(), output);
  }

  // bool replace_touchable_region_with_crop = 14;
  if (this->replace_touchable_region_with_crop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->replace_touchable_region_with_crop(), output);
  }

  // .android.surfaceflinger.RectProto touchable_region_crop = 15;
  if (this->has_touchable_region_crop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::touchable_region_crop(this), output);
  }

  // .android.surfaceflinger.TransformProto transform = 16;
  if (this->has_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::transform(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.InputWindowInfoProto)
}

size_t InputWindowInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.InputWindowInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .android.surfaceflinger.RectProto frame = 3;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  // .android.surfaceflinger.RegionProto touchable_region = 4;
  if (this->has_touchable_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *touchable_region_);
  }

  // .android.surfaceflinger.RectProto touchable_region_crop = 15;
  if (this->has_touchable_region_crop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *touchable_region_crop_);
  }

  // .android.surfaceflinger.TransformProto transform = 16;
  if (this->has_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // uint32 layout_params_flags = 1;
  if (this->layout_params_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layout_params_flags());
  }

  // uint32 layout_params_type = 2;
  if (this->layout_params_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layout_params_type());
  }

  // uint32 surface_inset = 5;
  if (this->surface_inset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->surface_inset());
  }

  // bool visible = 6;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // bool can_receive_keys = 7 [deprecated = true];
  if (this->can_receive_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool focusable = 8;
  if (this->focusable() != 0) {
    total_size += 1 + 1;
  }

  // bool has_wallpaper = 9;
  if (this->has_wallpaper() != 0) {
    total_size += 1 + 1;
  }

  // float global_scale_factor = 10;
  if (!(this->global_scale_factor() <= 0 && this->global_scale_factor() >= 0)) {
    total_size += 1 + 4;
  }

  // float window_x_scale = 11 [deprecated = true];
  if (!(this->window_x_scale() <= 0 && this->window_x_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float window_y_scale = 12 [deprecated = true];
  if (!(this->window_y_scale() <= 0 && this->window_y_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 crop_layer_id = 13;
  if (this->crop_layer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->crop_layer_id());
  }

  // bool replace_touchable_region_with_crop = 14;
  if (this->replace_touchable_region_with_crop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputWindowInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InputWindowInfoProto*>(
      &from));
}

void InputWindowInfoProto::MergeFrom(const InputWindowInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.InputWindowInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frame()) {
    mutable_frame()->::android::surfaceflinger::RectProto::MergeFrom(from.frame());
  }
  if (from.has_touchable_region()) {
    mutable_touchable_region()->::android::surfaceflinger::RegionProto::MergeFrom(from.touchable_region());
  }
  if (from.has_touchable_region_crop()) {
    mutable_touchable_region_crop()->::android::surfaceflinger::RectProto::MergeFrom(from.touchable_region_crop());
  }
  if (from.has_transform()) {
    mutable_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.transform());
  }
  if (from.layout_params_flags() != 0) {
    set_layout_params_flags(from.layout_params_flags());
  }
  if (from.layout_params_type() != 0) {
    set_layout_params_type(from.layout_params_type());
  }
  if (from.surface_inset() != 0) {
    set_surface_inset(from.surface_inset());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.can_receive_keys() != 0) {
    set_can_receive_keys(from.can_receive_keys());
  }
  if (from.focusable() != 0) {
    set_focusable(from.focusable());
  }
  if (from.has_wallpaper() != 0) {
    set_has_wallpaper(from.has_wallpaper());
  }
  if (!(from.global_scale_factor() <= 0 && from.global_scale_factor() >= 0)) {
    set_global_scale_factor(from.global_scale_factor());
  }
  if (!(from.window_x_scale() <= 0 && from.window_x_scale() >= 0)) {
    set_window_x_scale(from.window_x_scale());
  }
  if (!(from.window_y_scale() <= 0 && from.window_y_scale() >= 0)) {
    set_window_y_scale(from.window_y_scale());
  }
  if (from.crop_layer_id() != 0) {
    set_crop_layer_id(from.crop_layer_id());
  }
  if (from.replace_touchable_region_with_crop() != 0) {
    set_replace_touchable_region_with_crop(from.replace_touchable_region_with_crop());
  }
}

void InputWindowInfoProto::CopyFrom(const InputWindowInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.InputWindowInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputWindowInfoProto::IsInitialized() const {
  return true;
}

void InputWindowInfoProto::InternalSwap(InputWindowInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frame_, other->frame_);
  swap(touchable_region_, other->touchable_region_);
  swap(touchable_region_crop_, other->touchable_region_crop_);
  swap(transform_, other->transform_);
  swap(layout_params_flags_, other->layout_params_flags_);
  swap(layout_params_type_, other->layout_params_type_);
  swap(surface_inset_, other->surface_inset_);
  swap(visible_, other->visible_);
  swap(can_receive_keys_, other->can_receive_keys_);
  swap(focusable_, other->focusable_);
  swap(has_wallpaper_, other->has_wallpaper_);
  swap(global_scale_factor_, other->global_scale_factor_);
  swap(window_x_scale_, other->window_x_scale_);
  swap(window_y_scale_, other->window_y_scale_);
  swap(crop_layer_id_, other->crop_layer_id_);
  swap(replace_touchable_region_with_crop_, other->replace_touchable_region_with_crop_);
}

std::string InputWindowInfoProto::GetTypeName() const {
  return "android.surfaceflinger.InputWindowInfoProto";
}


// ===================================================================

void ColorTransformProto::InitAsDefaultInstance() {
}
class ColorTransformProto::_Internal {
 public:
};

ColorTransformProto::ColorTransformProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.ColorTransformProto)
}
ColorTransformProto::ColorTransformProto(const ColorTransformProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.ColorTransformProto)
}

void ColorTransformProto::SharedCtor() {
}

ColorTransformProto::~ColorTransformProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.ColorTransformProto)
  SharedDtor();
}

void ColorTransformProto::SharedDtor() {
}

void ColorTransformProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorTransformProto& ColorTransformProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorTransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void ColorTransformProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.ColorTransformProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ColorTransformProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ColorTransformProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.ColorTransformProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.ColorTransformProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.ColorTransformProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ColorTransformProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.ColorTransformProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->val().data(), this->val_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.ColorTransformProto)
}

size_t ColorTransformProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.ColorTransformProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorTransformProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ColorTransformProto*>(
      &from));
}

void ColorTransformProto::MergeFrom(const ColorTransformProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.ColorTransformProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void ColorTransformProto::CopyFrom(const ColorTransformProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.ColorTransformProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorTransformProto::IsInitialized() const {
  return true;
}

void ColorTransformProto::InternalSwap(ColorTransformProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

std::string ColorTransformProto::GetTypeName() const {
  return "android.surfaceflinger.ColorTransformProto";
}


// ===================================================================

void BlurRegion::InitAsDefaultInstance() {
}
class BlurRegion::_Internal {
 public:
};

BlurRegion::BlurRegion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.BlurRegion)
}
BlurRegion::BlurRegion(const BlurRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blur_radius_, &from.blur_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.BlurRegion)
}

void BlurRegion::SharedCtor() {
  ::memset(&blur_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
}

BlurRegion::~BlurRegion() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.BlurRegion)
  SharedDtor();
}

void BlurRegion::SharedDtor() {
}

void BlurRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlurRegion& BlurRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlurRegion_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto.base);
  return *internal_default_instance();
}


void BlurRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.BlurRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blur_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&blur_radius_)) + sizeof(bottom_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlurRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 blur_radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blur_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 corner_radius_tl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          corner_radius_tl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 corner_radius_tr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          corner_radius_tr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 corner_radius_bl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          corner_radius_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float corner_radius_br = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          corner_radius_br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float alpha = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bottom = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlurRegion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.BlurRegion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 blur_radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blur_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 corner_radius_tl = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corner_radius_tl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 corner_radius_tr = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corner_radius_tr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 corner_radius_bl = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &corner_radius_bl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float corner_radius_br = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_br_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float alpha = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bottom = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.BlurRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.BlurRegion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlurRegion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.BlurRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 blur_radius = 1;
  if (this->blur_radius() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->blur_radius(), output);
  }

  // uint32 corner_radius_tl = 2;
  if (this->corner_radius_tl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->corner_radius_tl(), output);
  }

  // uint32 corner_radius_tr = 3;
  if (this->corner_radius_tr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->corner_radius_tr(), output);
  }

  // uint32 corner_radius_bl = 4;
  if (this->corner_radius_bl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->corner_radius_bl(), output);
  }

  // float corner_radius_br = 5;
  if (!(this->corner_radius_br() <= 0 && this->corner_radius_br() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->corner_radius_br(), output);
  }

  // float alpha = 6;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->alpha(), output);
  }

  // int32 left = 7;
  if (this->left() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->left(), output);
  }

  // int32 top = 8;
  if (this->top() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->top(), output);
  }

  // int32 right = 9;
  if (this->right() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->right(), output);
  }

  // int32 bottom = 10;
  if (this->bottom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->bottom(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.BlurRegion)
}

size_t BlurRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.BlurRegion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 blur_radius = 1;
  if (this->blur_radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->blur_radius());
  }

  // uint32 corner_radius_tl = 2;
  if (this->corner_radius_tl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->corner_radius_tl());
  }

  // uint32 corner_radius_tr = 3;
  if (this->corner_radius_tr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->corner_radius_tr());
  }

  // uint32 corner_radius_bl = 4;
  if (this->corner_radius_bl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->corner_radius_bl());
  }

  // float corner_radius_br = 5;
  if (!(this->corner_radius_br() <= 0 && this->corner_radius_br() >= 0)) {
    total_size += 1 + 4;
  }

  // float alpha = 6;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 left = 7;
  if (this->left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 top = 8;
  if (this->top() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 right = 9;
  if (this->right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right());
  }

  // int32 bottom = 10;
  if (this->bottom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlurRegion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlurRegion*>(
      &from));
}

void BlurRegion::MergeFrom(const BlurRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.BlurRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blur_radius() != 0) {
    set_blur_radius(from.blur_radius());
  }
  if (from.corner_radius_tl() != 0) {
    set_corner_radius_tl(from.corner_radius_tl());
  }
  if (from.corner_radius_tr() != 0) {
    set_corner_radius_tr(from.corner_radius_tr());
  }
  if (from.corner_radius_bl() != 0) {
    set_corner_radius_bl(from.corner_radius_bl());
  }
  if (!(from.corner_radius_br() <= 0 && from.corner_radius_br() >= 0)) {
    set_corner_radius_br(from.corner_radius_br());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    set_alpha(from.alpha());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void BlurRegion::CopyFrom(const BlurRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.BlurRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlurRegion::IsInitialized() const {
  return true;
}

void BlurRegion::InternalSwap(BlurRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blur_radius_, other->blur_radius_);
  swap(corner_radius_tl_, other->corner_radius_tl_);
  swap(corner_radius_tr_, other->corner_radius_tr_);
  swap(corner_radius_bl_, other->corner_radius_bl_);
  swap(corner_radius_br_, other->corner_radius_br_);
  swap(alpha_, other->alpha_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
}

std::string BlurRegion::GetTypeName() const {
  return "android.surfaceflinger.BlurRegion";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayersProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayersProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::LayerProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::LayerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::LayerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::PositionProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::PositionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::PositionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::RegionProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::RegionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::RegionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::FloatRectProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::FloatRectProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::FloatRectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ActiveBufferProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::ActiveBufferProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ActiveBufferProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ColorProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::ColorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ColorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BarrierLayerProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::BarrierLayerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BarrierLayerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::InputWindowInfoProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::InputWindowInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::InputWindowInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::ColorTransformProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::ColorTransformProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::ColorTransformProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::BlurRegion* Arena::CreateMaybeMessage< ::android::surfaceflinger::BlurRegion >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::BlurRegion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
