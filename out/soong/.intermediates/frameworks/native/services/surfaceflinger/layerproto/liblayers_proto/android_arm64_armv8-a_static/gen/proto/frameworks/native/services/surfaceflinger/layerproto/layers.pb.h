// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/layers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/native/services/surfaceflinger/layerproto/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace surfaceflinger {
class ActiveBufferProto;
class ActiveBufferProtoDefaultTypeInternal;
extern ActiveBufferProtoDefaultTypeInternal _ActiveBufferProto_default_instance_;
class BarrierLayerProto;
class BarrierLayerProtoDefaultTypeInternal;
extern BarrierLayerProtoDefaultTypeInternal _BarrierLayerProto_default_instance_;
class BlurRegion;
class BlurRegionDefaultTypeInternal;
extern BlurRegionDefaultTypeInternal _BlurRegion_default_instance_;
class ColorProto;
class ColorProtoDefaultTypeInternal;
extern ColorProtoDefaultTypeInternal _ColorProto_default_instance_;
class ColorTransformProto;
class ColorTransformProtoDefaultTypeInternal;
extern ColorTransformProtoDefaultTypeInternal _ColorTransformProto_default_instance_;
class FloatRectProto;
class FloatRectProtoDefaultTypeInternal;
extern FloatRectProtoDefaultTypeInternal _FloatRectProto_default_instance_;
class InputWindowInfoProto;
class InputWindowInfoProtoDefaultTypeInternal;
extern InputWindowInfoProtoDefaultTypeInternal _InputWindowInfoProto_default_instance_;
class LayerProto;
class LayerProtoDefaultTypeInternal;
extern LayerProtoDefaultTypeInternal _LayerProto_default_instance_;
class LayerProto_MetadataEntry_DoNotUse;
class LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal;
extern LayerProto_MetadataEntry_DoNotUseDefaultTypeInternal _LayerProto_MetadataEntry_DoNotUse_default_instance_;
class LayersProto;
class LayersProtoDefaultTypeInternal;
extern LayersProtoDefaultTypeInternal _LayersProto_default_instance_;
class PositionProto;
class PositionProtoDefaultTypeInternal;
extern PositionProtoDefaultTypeInternal _PositionProto_default_instance_;
class RegionProto;
class RegionProtoDefaultTypeInternal;
extern RegionProtoDefaultTypeInternal _RegionProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::surfaceflinger::ActiveBufferProto* Arena::CreateMaybeMessage<::android::surfaceflinger::ActiveBufferProto>(Arena*);
template<> ::android::surfaceflinger::BarrierLayerProto* Arena::CreateMaybeMessage<::android::surfaceflinger::BarrierLayerProto>(Arena*);
template<> ::android::surfaceflinger::BlurRegion* Arena::CreateMaybeMessage<::android::surfaceflinger::BlurRegion>(Arena*);
template<> ::android::surfaceflinger::ColorProto* Arena::CreateMaybeMessage<::android::surfaceflinger::ColorProto>(Arena*);
template<> ::android::surfaceflinger::ColorTransformProto* Arena::CreateMaybeMessage<::android::surfaceflinger::ColorTransformProto>(Arena*);
template<> ::android::surfaceflinger::FloatRectProto* Arena::CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(Arena*);
template<> ::android::surfaceflinger::InputWindowInfoProto* Arena::CreateMaybeMessage<::android::surfaceflinger::InputWindowInfoProto>(Arena*);
template<> ::android::surfaceflinger::LayerProto* Arena::CreateMaybeMessage<::android::surfaceflinger::LayerProto>(Arena*);
template<> ::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::android::surfaceflinger::LayerProto_MetadataEntry_DoNotUse>(Arena*);
template<> ::android::surfaceflinger::LayersProto* Arena::CreateMaybeMessage<::android::surfaceflinger::LayersProto>(Arena*);
template<> ::android::surfaceflinger::PositionProto* Arena::CreateMaybeMessage<::android::surfaceflinger::PositionProto>(Arena*);
template<> ::android::surfaceflinger::RegionProto* Arena::CreateMaybeMessage<::android::surfaceflinger::RegionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace surfaceflinger {

enum HwcCompositionType : int {
  INVALID = 0,
  CLIENT = 1,
  DEVICE = 2,
  SOLID_COLOR = 3,
  CURSOR = 4,
  SIDEBAND = 5,
  HwcCompositionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HwcCompositionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HwcCompositionType_IsValid(int value);
constexpr HwcCompositionType HwcCompositionType_MIN = INVALID;
constexpr HwcCompositionType HwcCompositionType_MAX = SIDEBAND;
constexpr int HwcCompositionType_ARRAYSIZE = HwcCompositionType_MAX + 1;

const std::string& HwcCompositionType_Name(HwcCompositionType value);
template<typename T>
inline const std::string& HwcCompositionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HwcCompositionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HwcCompositionType_Name.");
  return HwcCompositionType_Name(static_cast<HwcCompositionType>(enum_t_value));
}
bool HwcCompositionType_Parse(
    const std::string& name, HwcCompositionType* value);
// ===================================================================

class LayersProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayersProto) */ {
 public:
  LayersProto();
  virtual ~LayersProto();

  LayersProto(const LayersProto& from);
  LayersProto(LayersProto&& from) noexcept
    : LayersProto() {
    *this = ::std::move(from);
  }

  inline LayersProto& operator=(const LayersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersProto& operator=(LayersProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LayersProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersProto* internal_default_instance() {
    return reinterpret_cast<const LayersProto*>(
               &_LayersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayersProto& a, LayersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersProto* New() const final {
    return CreateMaybeMessage<LayersProto>(nullptr);
  }

  LayersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersProto& from);
  void MergeFrom(const LayersProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayersProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 1,
  };
  // repeated .android.surfaceflinger.LayerProto layers = 1;
  int layers_size() const;
  void clear_layers();
  ::android::surfaceflinger::LayerProto* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayerProto >*
      mutable_layers();
  const ::android::surfaceflinger::LayerProto& layers(int index) const;
  ::android::surfaceflinger::LayerProto* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayerProto >&
      layers() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayersProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayerProto > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class LayerProto_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<LayerProto_MetadataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<LayerProto_MetadataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  LayerProto_MetadataEntry_DoNotUse();
  LayerProto_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LayerProto_MetadataEntry_DoNotUse& other);
  static const LayerProto_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LayerProto_MetadataEntry_DoNotUse*>(&_LayerProto_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class LayerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.LayerProto) */ {
 public:
  LayerProto();
  virtual ~LayerProto();

  LayerProto(const LayerProto& from);
  LayerProto(LayerProto&& from) noexcept
    : LayerProto() {
    *this = ::std::move(from);
  }

  inline LayerProto& operator=(const LayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerProto& operator=(LayerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LayerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerProto* internal_default_instance() {
    return reinterpret_cast<const LayerProto*>(
               &_LayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LayerProto& a, LayerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerProto* New() const final {
    return CreateMaybeMessage<LayerProto>(nullptr);
  }

  LayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayerProto& from);
  void MergeFrom(const LayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.LayerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kRelativesFieldNumber = 4,
    kBarrierLayerFieldNumber = 38,
    kMetadataFieldNumber = 42,
    kBlurRegionsFieldNumber = 54,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 5,
    kDataspaceFieldNumber = 18,
    kPixelFormatFieldNumber = 19,
    kTransparentRegionFieldNumber = 6,
    kVisibleRegionFieldNumber = 7,
    kDamageRegionFieldNumber = 8,
    kPositionFieldNumber = 11,
    kRequestedPositionFieldNumber = 12,
    kSizeFieldNumber = 13,
    kCropFieldNumber = 14,
    kFinalCropFieldNumber = 15,
    kColorFieldNumber = 20,
    kRequestedColorFieldNumber = 21,
    kTransformFieldNumber = 23,
    kRequestedTransformFieldNumber = 24,
    kActiveBufferFieldNumber = 27,
    kHwcFrameFieldNumber = 30,
    kHwcCropFieldNumber = 31,
    kBufferTransformFieldNumber = 39,
    kEffectiveTransformFieldNumber = 43,
    kSourceBoundsFieldNumber = 44,
    kBoundsFieldNumber = 45,
    kScreenBoundsFieldNumber = 46,
    kInputWindowInfoFieldNumber = 47,
    kCornerRadiusCropFieldNumber = 48,
    kColorTransformFieldNumber = 50,
    kIdFieldNumber = 1,
    kLayerStackFieldNumber = 9,
    kZFieldNumber = 10,
    kFlagsFieldNumber = 22,
    kIsOpaqueFieldNumber = 16,
    kInvalidateFieldNumber = 17,
    kRefreshPendingFieldNumber = 29,
    kIsProtectedFieldNumber = 36,
    kParentFieldNumber = 25,
    kZOrderRelativeOfFieldNumber = 26,
    kQueuedFramesFieldNumber = 28,
    kHwcTransformFieldNumber = 32,
    kWindowTypeFieldNumber = 33,
    kAppIdFieldNumber = 34,
    kHwcCompositionTypeFieldNumber = 35,
    kCurrFrameFieldNumber = 37,
    kEffectiveScalingModeFieldNumber = 40,
    kCornerRadiusFieldNumber = 41,
    kShadowRadiusFieldNumber = 49,
    kBackgroundBlurRadiusFieldNumber = 52,
    kOwnerUidFieldNumber = 53,
    kIsRelativeOfFieldNumber = 51,
    kIsTrustedOverlayFieldNumber = 55,
    kRequestedCornerRadiusFieldNumber = 56,
  };
  // repeated int32 children = 3;
  int children_size() const;
  void clear_children();
  ::PROTOBUF_NAMESPACE_ID::int32 children(int index) const;
  void set_children(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_children(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_children();

  // repeated int32 relatives = 4;
  int relatives_size() const;
  void clear_relatives();
  ::PROTOBUF_NAMESPACE_ID::int32 relatives(int index) const;
  void set_relatives(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_relatives(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      relatives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_relatives();

  // repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
  int barrier_layer_size() const;
  void clear_barrier_layer();
  ::android::surfaceflinger::BarrierLayerProto* mutable_barrier_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BarrierLayerProto >*
      mutable_barrier_layer();
  const ::android::surfaceflinger::BarrierLayerProto& barrier_layer(int index) const;
  ::android::surfaceflinger::BarrierLayerProto* add_barrier_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BarrierLayerProto >&
      barrier_layer() const;

  // map<int32, bytes> metadata = 42;
  int metadata_size() const;
  void clear_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_metadata();

  // repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
  int blur_regions_size() const;
  void clear_blur_regions();
  ::android::surfaceflinger::BlurRegion* mutable_blur_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegion >*
      mutable_blur_regions();
  const ::android::surfaceflinger::BlurRegion& blur_regions(int index) const;
  ::android::surfaceflinger::BlurRegion* add_blur_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegion >&
      blur_regions() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 5;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string dataspace = 18;
  void clear_dataspace();
  const std::string& dataspace() const;
  void set_dataspace(const std::string& value);
  void set_dataspace(std::string&& value);
  void set_dataspace(const char* value);
  void set_dataspace(const char* value, size_t size);
  std::string* mutable_dataspace();
  std::string* release_dataspace();
  void set_allocated_dataspace(std::string* dataspace);

  // string pixel_format = 19;
  void clear_pixel_format();
  const std::string& pixel_format() const;
  void set_pixel_format(const std::string& value);
  void set_pixel_format(std::string&& value);
  void set_pixel_format(const char* value);
  void set_pixel_format(const char* value, size_t size);
  std::string* mutable_pixel_format();
  std::string* release_pixel_format();
  void set_allocated_pixel_format(std::string* pixel_format);

  // .android.surfaceflinger.RegionProto transparent_region = 6;
  bool has_transparent_region() const;
  void clear_transparent_region();
  const ::android::surfaceflinger::RegionProto& transparent_region() const;
  ::android::surfaceflinger::RegionProto* release_transparent_region();
  ::android::surfaceflinger::RegionProto* mutable_transparent_region();
  void set_allocated_transparent_region(::android::surfaceflinger::RegionProto* transparent_region);

  // .android.surfaceflinger.RegionProto visible_region = 7;
  bool has_visible_region() const;
  void clear_visible_region();
  const ::android::surfaceflinger::RegionProto& visible_region() const;
  ::android::surfaceflinger::RegionProto* release_visible_region();
  ::android::surfaceflinger::RegionProto* mutable_visible_region();
  void set_allocated_visible_region(::android::surfaceflinger::RegionProto* visible_region);

  // .android.surfaceflinger.RegionProto damage_region = 8;
  bool has_damage_region() const;
  void clear_damage_region();
  const ::android::surfaceflinger::RegionProto& damage_region() const;
  ::android::surfaceflinger::RegionProto* release_damage_region();
  ::android::surfaceflinger::RegionProto* mutable_damage_region();
  void set_allocated_damage_region(::android::surfaceflinger::RegionProto* damage_region);

  // .android.surfaceflinger.PositionProto position = 11;
  bool has_position() const;
  void clear_position();
  const ::android::surfaceflinger::PositionProto& position() const;
  ::android::surfaceflinger::PositionProto* release_position();
  ::android::surfaceflinger::PositionProto* mutable_position();
  void set_allocated_position(::android::surfaceflinger::PositionProto* position);

  // .android.surfaceflinger.PositionProto requested_position = 12;
  bool has_requested_position() const;
  void clear_requested_position();
  const ::android::surfaceflinger::PositionProto& requested_position() const;
  ::android::surfaceflinger::PositionProto* release_requested_position();
  ::android::surfaceflinger::PositionProto* mutable_requested_position();
  void set_allocated_requested_position(::android::surfaceflinger::PositionProto* requested_position);

  // .android.surfaceflinger.SizeProto size = 13;
  bool has_size() const;
  void clear_size();
  const ::android::surfaceflinger::SizeProto& size() const;
  ::android::surfaceflinger::SizeProto* release_size();
  ::android::surfaceflinger::SizeProto* mutable_size();
  void set_allocated_size(::android::surfaceflinger::SizeProto* size);

  // .android.surfaceflinger.RectProto crop = 14;
  bool has_crop() const;
  void clear_crop();
  const ::android::surfaceflinger::RectProto& crop() const;
  ::android::surfaceflinger::RectProto* release_crop();
  ::android::surfaceflinger::RectProto* mutable_crop();
  void set_allocated_crop(::android::surfaceflinger::RectProto* crop);

  // .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_final_crop() const;
  PROTOBUF_DEPRECATED void clear_final_crop();
  PROTOBUF_DEPRECATED const ::android::surfaceflinger::RectProto& final_crop() const;
  PROTOBUF_DEPRECATED ::android::surfaceflinger::RectProto* release_final_crop();
  PROTOBUF_DEPRECATED ::android::surfaceflinger::RectProto* mutable_final_crop();
  PROTOBUF_DEPRECATED void set_allocated_final_crop(::android::surfaceflinger::RectProto* final_crop);

  // .android.surfaceflinger.ColorProto color = 20;
  bool has_color() const;
  void clear_color();
  const ::android::surfaceflinger::ColorProto& color() const;
  ::android::surfaceflinger::ColorProto* release_color();
  ::android::surfaceflinger::ColorProto* mutable_color();
  void set_allocated_color(::android::surfaceflinger::ColorProto* color);

  // .android.surfaceflinger.ColorProto requested_color = 21;
  bool has_requested_color() const;
  void clear_requested_color();
  const ::android::surfaceflinger::ColorProto& requested_color() const;
  ::android::surfaceflinger::ColorProto* release_requested_color();
  ::android::surfaceflinger::ColorProto* mutable_requested_color();
  void set_allocated_requested_color(::android::surfaceflinger::ColorProto* requested_color);

  // .android.surfaceflinger.TransformProto transform = 23;
  bool has_transform() const;
  void clear_transform();
  const ::android::surfaceflinger::TransformProto& transform() const;
  ::android::surfaceflinger::TransformProto* release_transform();
  ::android::surfaceflinger::TransformProto* mutable_transform();
  void set_allocated_transform(::android::surfaceflinger::TransformProto* transform);

  // .android.surfaceflinger.TransformProto requested_transform = 24;
  bool has_requested_transform() const;
  void clear_requested_transform();
  const ::android::surfaceflinger::TransformProto& requested_transform() const;
  ::android::surfaceflinger::TransformProto* release_requested_transform();
  ::android::surfaceflinger::TransformProto* mutable_requested_transform();
  void set_allocated_requested_transform(::android::surfaceflinger::TransformProto* requested_transform);

  // .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
  bool has_active_buffer() const;
  void clear_active_buffer();
  const ::android::surfaceflinger::ActiveBufferProto& active_buffer() const;
  ::android::surfaceflinger::ActiveBufferProto* release_active_buffer();
  ::android::surfaceflinger::ActiveBufferProto* mutable_active_buffer();
  void set_allocated_active_buffer(::android::surfaceflinger::ActiveBufferProto* active_buffer);

  // .android.surfaceflinger.RectProto hwc_frame = 30;
  bool has_hwc_frame() const;
  void clear_hwc_frame();
  const ::android::surfaceflinger::RectProto& hwc_frame() const;
  ::android::surfaceflinger::RectProto* release_hwc_frame();
  ::android::surfaceflinger::RectProto* mutable_hwc_frame();
  void set_allocated_hwc_frame(::android::surfaceflinger::RectProto* hwc_frame);

  // .android.surfaceflinger.FloatRectProto hwc_crop = 31;
  bool has_hwc_crop() const;
  void clear_hwc_crop();
  const ::android::surfaceflinger::FloatRectProto& hwc_crop() const;
  ::android::surfaceflinger::FloatRectProto* release_hwc_crop();
  ::android::surfaceflinger::FloatRectProto* mutable_hwc_crop();
  void set_allocated_hwc_crop(::android::surfaceflinger::FloatRectProto* hwc_crop);

  // .android.surfaceflinger.TransformProto buffer_transform = 39;
  bool has_buffer_transform() const;
  void clear_buffer_transform();
  const ::android::surfaceflinger::TransformProto& buffer_transform() const;
  ::android::surfaceflinger::TransformProto* release_buffer_transform();
  ::android::surfaceflinger::TransformProto* mutable_buffer_transform();
  void set_allocated_buffer_transform(::android::surfaceflinger::TransformProto* buffer_transform);

  // .android.surfaceflinger.TransformProto effective_transform = 43;
  bool has_effective_transform() const;
  void clear_effective_transform();
  const ::android::surfaceflinger::TransformProto& effective_transform() const;
  ::android::surfaceflinger::TransformProto* release_effective_transform();
  ::android::surfaceflinger::TransformProto* mutable_effective_transform();
  void set_allocated_effective_transform(::android::surfaceflinger::TransformProto* effective_transform);

  // .android.surfaceflinger.FloatRectProto source_bounds = 44;
  bool has_source_bounds() const;
  void clear_source_bounds();
  const ::android::surfaceflinger::FloatRectProto& source_bounds() const;
  ::android::surfaceflinger::FloatRectProto* release_source_bounds();
  ::android::surfaceflinger::FloatRectProto* mutable_source_bounds();
  void set_allocated_source_bounds(::android::surfaceflinger::FloatRectProto* source_bounds);

  // .android.surfaceflinger.FloatRectProto bounds = 45;
  bool has_bounds() const;
  void clear_bounds();
  const ::android::surfaceflinger::FloatRectProto& bounds() const;
  ::android::surfaceflinger::FloatRectProto* release_bounds();
  ::android::surfaceflinger::FloatRectProto* mutable_bounds();
  void set_allocated_bounds(::android::surfaceflinger::FloatRectProto* bounds);

  // .android.surfaceflinger.FloatRectProto screen_bounds = 46;
  bool has_screen_bounds() const;
  void clear_screen_bounds();
  const ::android::surfaceflinger::FloatRectProto& screen_bounds() const;
  ::android::surfaceflinger::FloatRectProto* release_screen_bounds();
  ::android::surfaceflinger::FloatRectProto* mutable_screen_bounds();
  void set_allocated_screen_bounds(::android::surfaceflinger::FloatRectProto* screen_bounds);

  // .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
  bool has_input_window_info() const;
  void clear_input_window_info();
  const ::android::surfaceflinger::InputWindowInfoProto& input_window_info() const;
  ::android::surfaceflinger::InputWindowInfoProto* release_input_window_info();
  ::android::surfaceflinger::InputWindowInfoProto* mutable_input_window_info();
  void set_allocated_input_window_info(::android::surfaceflinger::InputWindowInfoProto* input_window_info);

  // .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
  bool has_corner_radius_crop() const;
  void clear_corner_radius_crop();
  const ::android::surfaceflinger::FloatRectProto& corner_radius_crop() const;
  ::android::surfaceflinger::FloatRectProto* release_corner_radius_crop();
  ::android::surfaceflinger::FloatRectProto* mutable_corner_radius_crop();
  void set_allocated_corner_radius_crop(::android::surfaceflinger::FloatRectProto* corner_radius_crop);

  // .android.surfaceflinger.ColorTransformProto color_transform = 50;
  bool has_color_transform() const;
  void clear_color_transform();
  const ::android::surfaceflinger::ColorTransformProto& color_transform() const;
  ::android::surfaceflinger::ColorTransformProto* release_color_transform();
  ::android::surfaceflinger::ColorTransformProto* mutable_color_transform();
  void set_allocated_color_transform(::android::surfaceflinger::ColorTransformProto* color_transform);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 layer_stack = 9;
  void clear_layer_stack();
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack() const;
  void set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 z = 10;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 flags = 22;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool is_opaque = 16;
  void clear_is_opaque();
  bool is_opaque() const;
  void set_is_opaque(bool value);

  // bool invalidate = 17;
  void clear_invalidate();
  bool invalidate() const;
  void set_invalidate(bool value);

  // bool refresh_pending = 29;
  void clear_refresh_pending();
  bool refresh_pending() const;
  void set_refresh_pending(bool value);

  // bool is_protected = 36;
  void clear_is_protected();
  bool is_protected() const;
  void set_is_protected(bool value);

  // int32 parent = 25;
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::int32 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 z_order_relative_of = 26;
  void clear_z_order_relative_of();
  ::PROTOBUF_NAMESPACE_ID::int32 z_order_relative_of() const;
  void set_z_order_relative_of(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 queued_frames = 28;
  void clear_queued_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 queued_frames() const;
  void set_queued_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hwc_transform = 32;
  void clear_hwc_transform();
  ::PROTOBUF_NAMESPACE_ID::int32 hwc_transform() const;
  void set_hwc_transform(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 window_type = 33 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_window_type();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 window_type() const;
  PROTOBUF_DEPRECATED void set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_id = 34 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_app_id();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  PROTOBUF_DEPRECATED void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
  void clear_hwc_composition_type();
  ::android::surfaceflinger::HwcCompositionType hwc_composition_type() const;
  void set_hwc_composition_type(::android::surfaceflinger::HwcCompositionType value);

  // uint64 curr_frame = 37;
  void clear_curr_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 curr_frame() const;
  void set_curr_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 effective_scaling_mode = 40;
  void clear_effective_scaling_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 effective_scaling_mode() const;
  void set_effective_scaling_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float corner_radius = 41;
  void clear_corner_radius();
  float corner_radius() const;
  void set_corner_radius(float value);

  // float shadow_radius = 49;
  void clear_shadow_radius();
  float shadow_radius() const;
  void set_shadow_radius(float value);

  // int32 background_blur_radius = 52;
  void clear_background_blur_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 background_blur_radius() const;
  void set_background_blur_radius(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 owner_uid = 53;
  void clear_owner_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_uid() const;
  void set_owner_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool is_relative_of = 51;
  void clear_is_relative_of();
  bool is_relative_of() const;
  void set_is_relative_of(bool value);

  // bool is_trusted_overlay = 55;
  void clear_is_trusted_overlay();
  bool is_trusted_overlay() const;
  void set_is_trusted_overlay(bool value);

  // float requested_corner_radius = 56;
  void clear_requested_corner_radius();
  float requested_corner_radius() const;
  void set_requested_corner_radius(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.LayerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > children_;
  mutable std::atomic<int> _children_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > relatives_;
  mutable std::atomic<int> _relatives_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BarrierLayerProto > barrier_layer_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      LayerProto_MetadataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegion > blur_regions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataspace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixel_format_;
  ::android::surfaceflinger::RegionProto* transparent_region_;
  ::android::surfaceflinger::RegionProto* visible_region_;
  ::android::surfaceflinger::RegionProto* damage_region_;
  ::android::surfaceflinger::PositionProto* position_;
  ::android::surfaceflinger::PositionProto* requested_position_;
  ::android::surfaceflinger::SizeProto* size_;
  ::android::surfaceflinger::RectProto* crop_;
  ::android::surfaceflinger::RectProto* final_crop_;
  ::android::surfaceflinger::ColorProto* color_;
  ::android::surfaceflinger::ColorProto* requested_color_;
  ::android::surfaceflinger::TransformProto* transform_;
  ::android::surfaceflinger::TransformProto* requested_transform_;
  ::android::surfaceflinger::ActiveBufferProto* active_buffer_;
  ::android::surfaceflinger::RectProto* hwc_frame_;
  ::android::surfaceflinger::FloatRectProto* hwc_crop_;
  ::android::surfaceflinger::TransformProto* buffer_transform_;
  ::android::surfaceflinger::TransformProto* effective_transform_;
  ::android::surfaceflinger::FloatRectProto* source_bounds_;
  ::android::surfaceflinger::FloatRectProto* bounds_;
  ::android::surfaceflinger::FloatRectProto* screen_bounds_;
  ::android::surfaceflinger::InputWindowInfoProto* input_window_info_;
  ::android::surfaceflinger::FloatRectProto* corner_radius_crop_;
  ::android::surfaceflinger::ColorTransformProto* color_transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_stack_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  bool is_opaque_;
  bool invalidate_;
  bool refresh_pending_;
  bool is_protected_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_order_relative_of_;
  ::PROTOBUF_NAMESPACE_ID::int32 queued_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 hwc_transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  int hwc_composition_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 curr_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 effective_scaling_mode_;
  float corner_radius_;
  float shadow_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 background_blur_radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_uid_;
  bool is_relative_of_;
  bool is_trusted_overlay_;
  float requested_corner_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class PositionProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.PositionProto) */ {
 public:
  PositionProto();
  virtual ~PositionProto();

  PositionProto(const PositionProto& from);
  PositionProto(PositionProto&& from) noexcept
    : PositionProto() {
    *this = ::std::move(from);
  }

  inline PositionProto& operator=(const PositionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionProto& operator=(PositionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PositionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionProto* internal_default_instance() {
    return reinterpret_cast<const PositionProto*>(
               &_PositionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PositionProto& a, PositionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionProto* New() const final {
    return CreateMaybeMessage<PositionProto>(nullptr);
  }

  PositionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PositionProto& from);
  void MergeFrom(const PositionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PositionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.PositionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.PositionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class RegionProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.RegionProto) */ {
 public:
  RegionProto();
  virtual ~RegionProto();

  RegionProto(const RegionProto& from);
  RegionProto(RegionProto&& from) noexcept
    : RegionProto() {
    *this = ::std::move(from);
  }

  inline RegionProto& operator=(const RegionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionProto& operator=(RegionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RegionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionProto* internal_default_instance() {
    return reinterpret_cast<const RegionProto*>(
               &_RegionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegionProto& a, RegionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionProto* New() const final {
    return CreateMaybeMessage<RegionProto>(nullptr);
  }

  RegionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RegionProto& from);
  void MergeFrom(const RegionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.RegionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectFieldNumber = 2,
  };
  // repeated .android.surfaceflinger.RectProto rect = 2;
  int rect_size() const;
  void clear_rect();
  ::android::surfaceflinger::RectProto* mutable_rect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::RectProto >*
      mutable_rect();
  const ::android::surfaceflinger::RectProto& rect(int index) const;
  ::android::surfaceflinger::RectProto* add_rect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::RectProto >&
      rect() const;

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.RegionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::RectProto > rect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class FloatRectProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.FloatRectProto) */ {
 public:
  FloatRectProto();
  virtual ~FloatRectProto();

  FloatRectProto(const FloatRectProto& from);
  FloatRectProto(FloatRectProto&& from) noexcept
    : FloatRectProto() {
    *this = ::std::move(from);
  }

  inline FloatRectProto& operator=(const FloatRectProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatRectProto& operator=(FloatRectProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FloatRectProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatRectProto* internal_default_instance() {
    return reinterpret_cast<const FloatRectProto*>(
               &_FloatRectProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FloatRectProto& a, FloatRectProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatRectProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatRectProto* New() const final {
    return CreateMaybeMessage<FloatRectProto>(nullptr);
  }

  FloatRectProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatRectProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FloatRectProto& from);
  void MergeFrom(const FloatRectProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatRectProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.FloatRectProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // float left = 1;
  void clear_left();
  float left() const;
  void set_left(float value);

  // float top = 2;
  void clear_top();
  float top() const;
  void set_top(float value);

  // float right = 3;
  void clear_right();
  float right() const;
  void set_right(float value);

  // float bottom = 4;
  void clear_bottom();
  float bottom() const;
  void set_bottom(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.FloatRectProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float left_;
  float top_;
  float right_;
  float bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class ActiveBufferProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ActiveBufferProto) */ {
 public:
  ActiveBufferProto();
  virtual ~ActiveBufferProto();

  ActiveBufferProto(const ActiveBufferProto& from);
  ActiveBufferProto(ActiveBufferProto&& from) noexcept
    : ActiveBufferProto() {
    *this = ::std::move(from);
  }

  inline ActiveBufferProto& operator=(const ActiveBufferProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveBufferProto& operator=(ActiveBufferProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ActiveBufferProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveBufferProto* internal_default_instance() {
    return reinterpret_cast<const ActiveBufferProto*>(
               &_ActiveBufferProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ActiveBufferProto& a, ActiveBufferProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveBufferProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveBufferProto* New() const final {
    return CreateMaybeMessage<ActiveBufferProto>(nullptr);
  }

  ActiveBufferProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveBufferProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveBufferProto& from);
  void MergeFrom(const ActiveBufferProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveBufferProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ActiveBufferProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kStrideFieldNumber = 3,
    kFormatFieldNumber = 4,
  };
  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 stride = 3;
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 format = 4;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::int32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ActiveBufferProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  ::PROTOBUF_NAMESPACE_ID::int32 format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class ColorProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ColorProto) */ {
 public:
  ColorProto();
  virtual ~ColorProto();

  ColorProto(const ColorProto& from);
  ColorProto(ColorProto&& from) noexcept
    : ColorProto() {
    *this = ::std::move(from);
  }

  inline ColorProto& operator=(const ColorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorProto& operator=(ColorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ColorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorProto* internal_default_instance() {
    return reinterpret_cast<const ColorProto*>(
               &_ColorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ColorProto& a, ColorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorProto* New() const final {
    return CreateMaybeMessage<ColorProto>(nullptr);
  }

  ColorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ColorProto& from);
  void MergeFrom(const ColorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ColorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ColorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class BarrierLayerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BarrierLayerProto) */ {
 public:
  BarrierLayerProto();
  virtual ~BarrierLayerProto();

  BarrierLayerProto(const BarrierLayerProto& from);
  BarrierLayerProto(BarrierLayerProto&& from) noexcept
    : BarrierLayerProto() {
    *this = ::std::move(from);
  }

  inline BarrierLayerProto& operator=(const BarrierLayerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarrierLayerProto& operator=(BarrierLayerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BarrierLayerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BarrierLayerProto* internal_default_instance() {
    return reinterpret_cast<const BarrierLayerProto*>(
               &_BarrierLayerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BarrierLayerProto& a, BarrierLayerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BarrierLayerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BarrierLayerProto* New() const final {
    return CreateMaybeMessage<BarrierLayerProto>(nullptr);
  }

  BarrierLayerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BarrierLayerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BarrierLayerProto& from);
  void MergeFrom(const BarrierLayerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BarrierLayerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BarrierLayerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNumberFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // uint64 frame_number = 2;
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BarrierLayerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class InputWindowInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.InputWindowInfoProto) */ {
 public:
  InputWindowInfoProto();
  virtual ~InputWindowInfoProto();

  InputWindowInfoProto(const InputWindowInfoProto& from);
  InputWindowInfoProto(InputWindowInfoProto&& from) noexcept
    : InputWindowInfoProto() {
    *this = ::std::move(from);
  }

  inline InputWindowInfoProto& operator=(const InputWindowInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputWindowInfoProto& operator=(InputWindowInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InputWindowInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputWindowInfoProto* internal_default_instance() {
    return reinterpret_cast<const InputWindowInfoProto*>(
               &_InputWindowInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InputWindowInfoProto& a, InputWindowInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InputWindowInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputWindowInfoProto* New() const final {
    return CreateMaybeMessage<InputWindowInfoProto>(nullptr);
  }

  InputWindowInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputWindowInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InputWindowInfoProto& from);
  void MergeFrom(const InputWindowInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputWindowInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.InputWindowInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 3,
    kTouchableRegionFieldNumber = 4,
    kTouchableRegionCropFieldNumber = 15,
    kTransformFieldNumber = 16,
    kLayoutParamsFlagsFieldNumber = 1,
    kLayoutParamsTypeFieldNumber = 2,
    kSurfaceInsetFieldNumber = 5,
    kVisibleFieldNumber = 6,
    kCanReceiveKeysFieldNumber = 7,
    kFocusableFieldNumber = 8,
    kHasWallpaperFieldNumber = 9,
    kGlobalScaleFactorFieldNumber = 10,
    kWindowXScaleFieldNumber = 11,
    kWindowYScaleFieldNumber = 12,
    kCropLayerIdFieldNumber = 13,
    kReplaceTouchableRegionWithCropFieldNumber = 14,
  };
  // .android.surfaceflinger.RectProto frame = 3;
  bool has_frame() const;
  void clear_frame();
  const ::android::surfaceflinger::RectProto& frame() const;
  ::android::surfaceflinger::RectProto* release_frame();
  ::android::surfaceflinger::RectProto* mutable_frame();
  void set_allocated_frame(::android::surfaceflinger::RectProto* frame);

  // .android.surfaceflinger.RegionProto touchable_region = 4;
  bool has_touchable_region() const;
  void clear_touchable_region();
  const ::android::surfaceflinger::RegionProto& touchable_region() const;
  ::android::surfaceflinger::RegionProto* release_touchable_region();
  ::android::surfaceflinger::RegionProto* mutable_touchable_region();
  void set_allocated_touchable_region(::android::surfaceflinger::RegionProto* touchable_region);

  // .android.surfaceflinger.RectProto touchable_region_crop = 15;
  bool has_touchable_region_crop() const;
  void clear_touchable_region_crop();
  const ::android::surfaceflinger::RectProto& touchable_region_crop() const;
  ::android::surfaceflinger::RectProto* release_touchable_region_crop();
  ::android::surfaceflinger::RectProto* mutable_touchable_region_crop();
  void set_allocated_touchable_region_crop(::android::surfaceflinger::RectProto* touchable_region_crop);

  // .android.surfaceflinger.TransformProto transform = 16;
  bool has_transform() const;
  void clear_transform();
  const ::android::surfaceflinger::TransformProto& transform() const;
  ::android::surfaceflinger::TransformProto* release_transform();
  ::android::surfaceflinger::TransformProto* mutable_transform();
  void set_allocated_transform(::android::surfaceflinger::TransformProto* transform);

  // uint32 layout_params_flags = 1;
  void clear_layout_params_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 layout_params_flags() const;
  void set_layout_params_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 layout_params_type = 2;
  void clear_layout_params_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 layout_params_type() const;
  void set_layout_params_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 surface_inset = 5;
  void clear_surface_inset();
  ::PROTOBUF_NAMESPACE_ID::uint32 surface_inset() const;
  void set_surface_inset(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool visible = 6;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);

  // bool can_receive_keys = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_can_receive_keys();
  PROTOBUF_DEPRECATED bool can_receive_keys() const;
  PROTOBUF_DEPRECATED void set_can_receive_keys(bool value);

  // bool focusable = 8;
  void clear_focusable();
  bool focusable() const;
  void set_focusable(bool value);

  // bool has_wallpaper = 9;
  void clear_has_wallpaper();
  bool has_wallpaper() const;
  void set_has_wallpaper(bool value);

  // float global_scale_factor = 10;
  void clear_global_scale_factor();
  float global_scale_factor() const;
  void set_global_scale_factor(float value);

  // float window_x_scale = 11 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_window_x_scale();
  PROTOBUF_DEPRECATED float window_x_scale() const;
  PROTOBUF_DEPRECATED void set_window_x_scale(float value);

  // float window_y_scale = 12 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_window_y_scale();
  PROTOBUF_DEPRECATED float window_y_scale() const;
  PROTOBUF_DEPRECATED void set_window_y_scale(float value);

  // uint32 crop_layer_id = 13;
  void clear_crop_layer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_layer_id() const;
  void set_crop_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool replace_touchable_region_with_crop = 14;
  void clear_replace_touchable_region_with_crop();
  bool replace_touchable_region_with_crop() const;
  void set_replace_touchable_region_with_crop(bool value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.InputWindowInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::android::surfaceflinger::RectProto* frame_;
  ::android::surfaceflinger::RegionProto* touchable_region_;
  ::android::surfaceflinger::RectProto* touchable_region_crop_;
  ::android::surfaceflinger::TransformProto* transform_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layout_params_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layout_params_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 surface_inset_;
  bool visible_;
  bool can_receive_keys_;
  bool focusable_;
  bool has_wallpaper_;
  float global_scale_factor_;
  float window_x_scale_;
  float window_y_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_layer_id_;
  bool replace_touchable_region_with_crop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class ColorTransformProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.ColorTransformProto) */ {
 public:
  ColorTransformProto();
  virtual ~ColorTransformProto();

  ColorTransformProto(const ColorTransformProto& from);
  ColorTransformProto(ColorTransformProto&& from) noexcept
    : ColorTransformProto() {
    *this = ::std::move(from);
  }

  inline ColorTransformProto& operator=(const ColorTransformProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorTransformProto& operator=(ColorTransformProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ColorTransformProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorTransformProto* internal_default_instance() {
    return reinterpret_cast<const ColorTransformProto*>(
               &_ColorTransformProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ColorTransformProto& a, ColorTransformProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorTransformProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorTransformProto* New() const final {
    return CreateMaybeMessage<ColorTransformProto>(nullptr);
  }

  ColorTransformProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorTransformProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ColorTransformProto& from);
  void MergeFrom(const ColorTransformProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorTransformProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.ColorTransformProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // repeated float val = 1;
  int val_size() const;
  void clear_val();
  float val(int index) const;
  void set_val(int index, float value);
  void add_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.ColorTransformProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// -------------------------------------------------------------------

class BlurRegion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.surfaceflinger.BlurRegion) */ {
 public:
  BlurRegion();
  virtual ~BlurRegion();

  BlurRegion(const BlurRegion& from);
  BlurRegion(BlurRegion&& from) noexcept
    : BlurRegion() {
    *this = ::std::move(from);
  }

  inline BlurRegion& operator=(const BlurRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlurRegion& operator=(BlurRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BlurRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlurRegion* internal_default_instance() {
    return reinterpret_cast<const BlurRegion*>(
               &_BlurRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlurRegion& a, BlurRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(BlurRegion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlurRegion* New() const final {
    return CreateMaybeMessage<BlurRegion>(nullptr);
  }

  BlurRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlurRegion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlurRegion& from);
  void MergeFrom(const BlurRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlurRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.surfaceflinger.BlurRegion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlurRadiusFieldNumber = 1,
    kCornerRadiusTlFieldNumber = 2,
    kCornerRadiusTrFieldNumber = 3,
    kCornerRadiusBlFieldNumber = 4,
    kCornerRadiusBrFieldNumber = 5,
    kAlphaFieldNumber = 6,
    kLeftFieldNumber = 7,
    kTopFieldNumber = 8,
    kRightFieldNumber = 9,
    kBottomFieldNumber = 10,
  };
  // uint32 blur_radius = 1;
  void clear_blur_radius();
  ::PROTOBUF_NAMESPACE_ID::uint32 blur_radius() const;
  void set_blur_radius(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 corner_radius_tl = 2;
  void clear_corner_radius_tl();
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_tl() const;
  void set_corner_radius_tl(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 corner_radius_tr = 3;
  void clear_corner_radius_tr();
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_tr() const;
  void set_corner_radius_tr(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 corner_radius_bl = 4;
  void clear_corner_radius_bl();
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_bl() const;
  void set_corner_radius_bl(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float corner_radius_br = 5;
  void clear_corner_radius_br();
  float corner_radius_br() const;
  void set_corner_radius_br(float value);

  // float alpha = 6;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);

  // int32 left = 7;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 top = 8;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 right = 9;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bottom = 10;
  void clear_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom() const;
  void set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.surfaceflinger.BlurRegion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blur_radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_tl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_tr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 corner_radius_bl_;
  float corner_radius_br_;
  float alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayersProto

// repeated .android.surfaceflinger.LayerProto layers = 1;
inline int LayersProto::layers_size() const {
  return layers_.size();
}
inline void LayersProto::clear_layers() {
  layers_.Clear();
}
inline ::android::surfaceflinger::LayerProto* LayersProto::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayersProto.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayerProto >*
LayersProto::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayersProto.layers)
  return &layers_;
}
inline const ::android::surfaceflinger::LayerProto& LayersProto::layers(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayersProto.layers)
  return layers_.Get(index);
}
inline ::android::surfaceflinger::LayerProto* LayersProto::add_layers() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayersProto.layers)
  return layers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::LayerProto >&
LayersProto::layers() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayersProto.layers)
  return layers_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LayerProto

// int32 id = 1;
inline void LayerProto::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.id)
  return id_;
}
inline void LayerProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.id)
}

// string name = 2;
inline void LayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LayerProto::name() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.name)
  return name_.GetNoArena();
}
inline void LayerProto::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.name)
}
inline void LayerProto::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayerProto.name)
}
inline void LayerProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayerProto.name)
}
inline void LayerProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayerProto.name)
}
inline std::string* LayerProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerProto::release_name() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.name)
}

// repeated int32 children = 3;
inline int LayerProto::children_size() const {
  return children_.size();
}
inline void LayerProto::clear_children() {
  children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::children(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.children)
  return children_.Get(index);
}
inline void LayerProto::set_children(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.children)
}
inline void LayerProto::add_children(::PROTOBUF_NAMESPACE_ID::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayerProto.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LayerProto::children() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayerProto.children)
  return children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LayerProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayerProto.children)
  return &children_;
}

// repeated int32 relatives = 4;
inline int LayerProto::relatives_size() const {
  return relatives_.size();
}
inline void LayerProto::clear_relatives() {
  relatives_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::relatives(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.relatives)
  return relatives_.Get(index);
}
inline void LayerProto::set_relatives(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  relatives_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.relatives)
}
inline void LayerProto::add_relatives(::PROTOBUF_NAMESPACE_ID::int32 value) {
  relatives_.Add(value);
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayerProto.relatives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LayerProto::relatives() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayerProto.relatives)
  return relatives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LayerProto::mutable_relatives() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayerProto.relatives)
  return &relatives_;
}

// string type = 5;
inline void LayerProto::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LayerProto::type() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.type)
  return type_.GetNoArena();
}
inline void LayerProto::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.type)
}
inline void LayerProto::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayerProto.type)
}
inline void LayerProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayerProto.type)
}
inline void LayerProto::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayerProto.type)
}
inline std::string* LayerProto::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerProto::release_type() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.type)
}

// .android.surfaceflinger.RegionProto transparent_region = 6;
inline bool LayerProto::has_transparent_region() const {
  return this != internal_default_instance() && transparent_region_ != nullptr;
}
inline void LayerProto::clear_transparent_region() {
  if (GetArenaNoVirtual() == nullptr && transparent_region_ != nullptr) {
    delete transparent_region_;
  }
  transparent_region_ = nullptr;
}
inline const ::android::surfaceflinger::RegionProto& LayerProto::transparent_region() const {
  const ::android::surfaceflinger::RegionProto* p = transparent_region_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.transparent_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RegionProto*>(
      &::android::surfaceflinger::_RegionProto_default_instance_);
}
inline ::android::surfaceflinger::RegionProto* LayerProto::release_transparent_region() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.transparent_region)
  
  ::android::surfaceflinger::RegionProto* temp = transparent_region_;
  transparent_region_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RegionProto* LayerProto::mutable_transparent_region() {
  
  if (transparent_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RegionProto>(GetArenaNoVirtual());
    transparent_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.transparent_region)
  return transparent_region_;
}
inline void LayerProto::set_allocated_transparent_region(::android::surfaceflinger::RegionProto* transparent_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transparent_region_;
  }
  if (transparent_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transparent_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transparent_region, submessage_arena);
    }
    
  } else {
    
  }
  transparent_region_ = transparent_region;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.transparent_region)
}

// .android.surfaceflinger.RegionProto visible_region = 7;
inline bool LayerProto::has_visible_region() const {
  return this != internal_default_instance() && visible_region_ != nullptr;
}
inline void LayerProto::clear_visible_region() {
  if (GetArenaNoVirtual() == nullptr && visible_region_ != nullptr) {
    delete visible_region_;
  }
  visible_region_ = nullptr;
}
inline const ::android::surfaceflinger::RegionProto& LayerProto::visible_region() const {
  const ::android::surfaceflinger::RegionProto* p = visible_region_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.visible_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RegionProto*>(
      &::android::surfaceflinger::_RegionProto_default_instance_);
}
inline ::android::surfaceflinger::RegionProto* LayerProto::release_visible_region() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.visible_region)
  
  ::android::surfaceflinger::RegionProto* temp = visible_region_;
  visible_region_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RegionProto* LayerProto::mutable_visible_region() {
  
  if (visible_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RegionProto>(GetArenaNoVirtual());
    visible_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.visible_region)
  return visible_region_;
}
inline void LayerProto::set_allocated_visible_region(::android::surfaceflinger::RegionProto* visible_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visible_region_;
  }
  if (visible_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_region, submessage_arena);
    }
    
  } else {
    
  }
  visible_region_ = visible_region;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.visible_region)
}

// .android.surfaceflinger.RegionProto damage_region = 8;
inline bool LayerProto::has_damage_region() const {
  return this != internal_default_instance() && damage_region_ != nullptr;
}
inline void LayerProto::clear_damage_region() {
  if (GetArenaNoVirtual() == nullptr && damage_region_ != nullptr) {
    delete damage_region_;
  }
  damage_region_ = nullptr;
}
inline const ::android::surfaceflinger::RegionProto& LayerProto::damage_region() const {
  const ::android::surfaceflinger::RegionProto* p = damage_region_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.damage_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RegionProto*>(
      &::android::surfaceflinger::_RegionProto_default_instance_);
}
inline ::android::surfaceflinger::RegionProto* LayerProto::release_damage_region() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.damage_region)
  
  ::android::surfaceflinger::RegionProto* temp = damage_region_;
  damage_region_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RegionProto* LayerProto::mutable_damage_region() {
  
  if (damage_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RegionProto>(GetArenaNoVirtual());
    damage_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.damage_region)
  return damage_region_;
}
inline void LayerProto::set_allocated_damage_region(::android::surfaceflinger::RegionProto* damage_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete damage_region_;
  }
  if (damage_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      damage_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damage_region, submessage_arena);
    }
    
  } else {
    
  }
  damage_region_ = damage_region;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.damage_region)
}

// uint32 layer_stack = 9;
inline void LayerProto::clear_layer_stack() {
  layer_stack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayerProto::layer_stack() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.layer_stack)
  return layer_stack_;
}
inline void LayerProto::set_layer_stack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layer_stack_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.layer_stack)
}

// int32 z = 10;
inline void LayerProto::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::z() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.z)
  return z_;
}
inline void LayerProto::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.z)
}

// .android.surfaceflinger.PositionProto position = 11;
inline bool LayerProto::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void LayerProto::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::android::surfaceflinger::PositionProto& LayerProto::position() const {
  const ::android::surfaceflinger::PositionProto* p = position_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::PositionProto*>(
      &::android::surfaceflinger::_PositionProto_default_instance_);
}
inline ::android::surfaceflinger::PositionProto* LayerProto::release_position() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.position)
  
  ::android::surfaceflinger::PositionProto* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::PositionProto* LayerProto::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::PositionProto>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.position)
  return position_;
}
inline void LayerProto::set_allocated_position(::android::surfaceflinger::PositionProto* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.position)
}

// .android.surfaceflinger.PositionProto requested_position = 12;
inline bool LayerProto::has_requested_position() const {
  return this != internal_default_instance() && requested_position_ != nullptr;
}
inline void LayerProto::clear_requested_position() {
  if (GetArenaNoVirtual() == nullptr && requested_position_ != nullptr) {
    delete requested_position_;
  }
  requested_position_ = nullptr;
}
inline const ::android::surfaceflinger::PositionProto& LayerProto::requested_position() const {
  const ::android::surfaceflinger::PositionProto* p = requested_position_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.requested_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::PositionProto*>(
      &::android::surfaceflinger::_PositionProto_default_instance_);
}
inline ::android::surfaceflinger::PositionProto* LayerProto::release_requested_position() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.requested_position)
  
  ::android::surfaceflinger::PositionProto* temp = requested_position_;
  requested_position_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::PositionProto* LayerProto::mutable_requested_position() {
  
  if (requested_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::PositionProto>(GetArenaNoVirtual());
    requested_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.requested_position)
  return requested_position_;
}
inline void LayerProto::set_allocated_requested_position(::android::surfaceflinger::PositionProto* requested_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requested_position_;
  }
  if (requested_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requested_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_position, submessage_arena);
    }
    
  } else {
    
  }
  requested_position_ = requested_position;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.requested_position)
}

// .android.surfaceflinger.SizeProto size = 13;
inline bool LayerProto::has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline const ::android::surfaceflinger::SizeProto& LayerProto::size() const {
  const ::android::surfaceflinger::SizeProto* p = size_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::SizeProto*>(
      &::android::surfaceflinger::_SizeProto_default_instance_);
}
inline ::android::surfaceflinger::SizeProto* LayerProto::release_size() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.size)
  
  ::android::surfaceflinger::SizeProto* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::SizeProto* LayerProto::mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::SizeProto>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.size)
  return size_;
}
inline void LayerProto::set_allocated_size(::android::surfaceflinger::SizeProto* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.size)
}

// .android.surfaceflinger.RectProto crop = 14;
inline bool LayerProto::has_crop() const {
  return this != internal_default_instance() && crop_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& LayerProto::crop() const {
  const ::android::surfaceflinger::RectProto* p = crop_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.crop)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* LayerProto::release_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.crop)
  
  ::android::surfaceflinger::RectProto* temp = crop_;
  crop_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* LayerProto::mutable_crop() {
  
  if (crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.crop)
  return crop_;
}
inline void LayerProto::set_allocated_crop(::android::surfaceflinger::RectProto* crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(crop_);
  }
  if (crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crop, submessage_arena);
    }
    
  } else {
    
  }
  crop_ = crop;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.crop)
}

// .android.surfaceflinger.RectProto final_crop = 15 [deprecated = true];
inline bool LayerProto::has_final_crop() const {
  return this != internal_default_instance() && final_crop_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& LayerProto::final_crop() const {
  const ::android::surfaceflinger::RectProto* p = final_crop_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.final_crop)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* LayerProto::release_final_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.final_crop)
  
  ::android::surfaceflinger::RectProto* temp = final_crop_;
  final_crop_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* LayerProto::mutable_final_crop() {
  
  if (final_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    final_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.final_crop)
  return final_crop_;
}
inline void LayerProto::set_allocated_final_crop(::android::surfaceflinger::RectProto* final_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_crop_);
  }
  if (final_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      final_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_crop, submessage_arena);
    }
    
  } else {
    
  }
  final_crop_ = final_crop;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.final_crop)
}

// bool is_opaque = 16;
inline void LayerProto::clear_is_opaque() {
  is_opaque_ = false;
}
inline bool LayerProto::is_opaque() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.is_opaque)
  return is_opaque_;
}
inline void LayerProto::set_is_opaque(bool value) {
  
  is_opaque_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.is_opaque)
}

// bool invalidate = 17;
inline void LayerProto::clear_invalidate() {
  invalidate_ = false;
}
inline bool LayerProto::invalidate() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.invalidate)
  return invalidate_;
}
inline void LayerProto::set_invalidate(bool value) {
  
  invalidate_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.invalidate)
}

// string dataspace = 18;
inline void LayerProto::clear_dataspace() {
  dataspace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LayerProto::dataspace() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.dataspace)
  return dataspace_.GetNoArena();
}
inline void LayerProto::set_dataspace(const std::string& value) {
  
  dataspace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.dataspace)
}
inline void LayerProto::set_dataspace(std::string&& value) {
  
  dataspace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayerProto.dataspace)
}
inline void LayerProto::set_dataspace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataspace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayerProto.dataspace)
}
inline void LayerProto::set_dataspace(const char* value, size_t size) {
  
  dataspace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayerProto.dataspace)
}
inline std::string* LayerProto::mutable_dataspace() {
  
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.dataspace)
  return dataspace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerProto::release_dataspace() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.dataspace)
  
  return dataspace_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_dataspace(std::string* dataspace) {
  if (dataspace != nullptr) {
    
  } else {
    
  }
  dataspace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataspace);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.dataspace)
}

// string pixel_format = 19;
inline void LayerProto::clear_pixel_format() {
  pixel_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LayerProto::pixel_format() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.pixel_format)
  return pixel_format_.GetNoArena();
}
inline void LayerProto::set_pixel_format(const std::string& value) {
  
  pixel_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.pixel_format)
}
inline void LayerProto::set_pixel_format(std::string&& value) {
  
  pixel_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.surfaceflinger.LayerProto.pixel_format)
}
inline void LayerProto::set_pixel_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pixel_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.surfaceflinger.LayerProto.pixel_format)
}
inline void LayerProto::set_pixel_format(const char* value, size_t size) {
  
  pixel_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.surfaceflinger.LayerProto.pixel_format)
}
inline std::string* LayerProto::mutable_pixel_format() {
  
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.pixel_format)
  return pixel_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerProto::release_pixel_format() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.pixel_format)
  
  return pixel_format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerProto::set_allocated_pixel_format(std::string* pixel_format) {
  if (pixel_format != nullptr) {
    
  } else {
    
  }
  pixel_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pixel_format);
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.pixel_format)
}

// .android.surfaceflinger.ColorProto color = 20;
inline bool LayerProto::has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline void LayerProto::clear_color() {
  if (GetArenaNoVirtual() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::android::surfaceflinger::ColorProto& LayerProto::color() const {
  const ::android::surfaceflinger::ColorProto* p = color_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::ColorProto*>(
      &::android::surfaceflinger::_ColorProto_default_instance_);
}
inline ::android::surfaceflinger::ColorProto* LayerProto::release_color() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.color)
  
  ::android::surfaceflinger::ColorProto* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::ColorProto* LayerProto::mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::ColorProto>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.color)
  return color_;
}
inline void LayerProto::set_allocated_color(::android::surfaceflinger::ColorProto* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.color)
}

// .android.surfaceflinger.ColorProto requested_color = 21;
inline bool LayerProto::has_requested_color() const {
  return this != internal_default_instance() && requested_color_ != nullptr;
}
inline void LayerProto::clear_requested_color() {
  if (GetArenaNoVirtual() == nullptr && requested_color_ != nullptr) {
    delete requested_color_;
  }
  requested_color_ = nullptr;
}
inline const ::android::surfaceflinger::ColorProto& LayerProto::requested_color() const {
  const ::android::surfaceflinger::ColorProto* p = requested_color_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.requested_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::ColorProto*>(
      &::android::surfaceflinger::_ColorProto_default_instance_);
}
inline ::android::surfaceflinger::ColorProto* LayerProto::release_requested_color() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.requested_color)
  
  ::android::surfaceflinger::ColorProto* temp = requested_color_;
  requested_color_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::ColorProto* LayerProto::mutable_requested_color() {
  
  if (requested_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::ColorProto>(GetArenaNoVirtual());
    requested_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.requested_color)
  return requested_color_;
}
inline void LayerProto::set_allocated_requested_color(::android::surfaceflinger::ColorProto* requested_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requested_color_;
  }
  if (requested_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requested_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_color, submessage_arena);
    }
    
  } else {
    
  }
  requested_color_ = requested_color;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.requested_color)
}

// uint32 flags = 22;
inline void LayerProto::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayerProto::flags() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.flags)
  return flags_;
}
inline void LayerProto::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.flags)
}

// .android.surfaceflinger.TransformProto transform = 23;
inline bool LayerProto::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& LayerProto::transform() const {
  const ::android::surfaceflinger::TransformProto* p = transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* LayerProto::release_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.transform)
  
  ::android::surfaceflinger::TransformProto* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* LayerProto::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.transform)
  return transform_;
}
inline void LayerProto::set_allocated_transform(::android::surfaceflinger::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.transform)
}

// .android.surfaceflinger.TransformProto requested_transform = 24;
inline bool LayerProto::has_requested_transform() const {
  return this != internal_default_instance() && requested_transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& LayerProto::requested_transform() const {
  const ::android::surfaceflinger::TransformProto* p = requested_transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.requested_transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* LayerProto::release_requested_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.requested_transform)
  
  ::android::surfaceflinger::TransformProto* temp = requested_transform_;
  requested_transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* LayerProto::mutable_requested_transform() {
  
  if (requested_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    requested_transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.requested_transform)
  return requested_transform_;
}
inline void LayerProto::set_allocated_requested_transform(::android::surfaceflinger::TransformProto* requested_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requested_transform_);
  }
  if (requested_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requested_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requested_transform, submessage_arena);
    }
    
  } else {
    
  }
  requested_transform_ = requested_transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.requested_transform)
}

// int32 parent = 25;
inline void LayerProto::clear_parent() {
  parent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::parent() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.parent)
  return parent_;
}
inline void LayerProto::set_parent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.parent)
}

// int32 z_order_relative_of = 26;
inline void LayerProto::clear_z_order_relative_of() {
  z_order_relative_of_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::z_order_relative_of() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.z_order_relative_of)
  return z_order_relative_of_;
}
inline void LayerProto::set_z_order_relative_of(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_order_relative_of_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.z_order_relative_of)
}

// .android.surfaceflinger.ActiveBufferProto active_buffer = 27;
inline bool LayerProto::has_active_buffer() const {
  return this != internal_default_instance() && active_buffer_ != nullptr;
}
inline void LayerProto::clear_active_buffer() {
  if (GetArenaNoVirtual() == nullptr && active_buffer_ != nullptr) {
    delete active_buffer_;
  }
  active_buffer_ = nullptr;
}
inline const ::android::surfaceflinger::ActiveBufferProto& LayerProto::active_buffer() const {
  const ::android::surfaceflinger::ActiveBufferProto* p = active_buffer_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.active_buffer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::ActiveBufferProto*>(
      &::android::surfaceflinger::_ActiveBufferProto_default_instance_);
}
inline ::android::surfaceflinger::ActiveBufferProto* LayerProto::release_active_buffer() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.active_buffer)
  
  ::android::surfaceflinger::ActiveBufferProto* temp = active_buffer_;
  active_buffer_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::ActiveBufferProto* LayerProto::mutable_active_buffer() {
  
  if (active_buffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::ActiveBufferProto>(GetArenaNoVirtual());
    active_buffer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.active_buffer)
  return active_buffer_;
}
inline void LayerProto::set_allocated_active_buffer(::android::surfaceflinger::ActiveBufferProto* active_buffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete active_buffer_;
  }
  if (active_buffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      active_buffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_buffer, submessage_arena);
    }
    
  } else {
    
  }
  active_buffer_ = active_buffer;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.active_buffer)
}

// int32 queued_frames = 28;
inline void LayerProto::clear_queued_frames() {
  queued_frames_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::queued_frames() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.queued_frames)
  return queued_frames_;
}
inline void LayerProto::set_queued_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  queued_frames_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.queued_frames)
}

// bool refresh_pending = 29;
inline void LayerProto::clear_refresh_pending() {
  refresh_pending_ = false;
}
inline bool LayerProto::refresh_pending() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.refresh_pending)
  return refresh_pending_;
}
inline void LayerProto::set_refresh_pending(bool value) {
  
  refresh_pending_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.refresh_pending)
}

// .android.surfaceflinger.RectProto hwc_frame = 30;
inline bool LayerProto::has_hwc_frame() const {
  return this != internal_default_instance() && hwc_frame_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& LayerProto::hwc_frame() const {
  const ::android::surfaceflinger::RectProto* p = hwc_frame_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.hwc_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* LayerProto::release_hwc_frame() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.hwc_frame)
  
  ::android::surfaceflinger::RectProto* temp = hwc_frame_;
  hwc_frame_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* LayerProto::mutable_hwc_frame() {
  
  if (hwc_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    hwc_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.hwc_frame)
  return hwc_frame_;
}
inline void LayerProto::set_allocated_hwc_frame(::android::surfaceflinger::RectProto* hwc_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hwc_frame_);
  }
  if (hwc_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hwc_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hwc_frame, submessage_arena);
    }
    
  } else {
    
  }
  hwc_frame_ = hwc_frame;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.hwc_frame)
}

// .android.surfaceflinger.FloatRectProto hwc_crop = 31;
inline bool LayerProto::has_hwc_crop() const {
  return this != internal_default_instance() && hwc_crop_ != nullptr;
}
inline void LayerProto::clear_hwc_crop() {
  if (GetArenaNoVirtual() == nullptr && hwc_crop_ != nullptr) {
    delete hwc_crop_;
  }
  hwc_crop_ = nullptr;
}
inline const ::android::surfaceflinger::FloatRectProto& LayerProto::hwc_crop() const {
  const ::android::surfaceflinger::FloatRectProto* p = hwc_crop_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.hwc_crop)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FloatRectProto*>(
      &::android::surfaceflinger::_FloatRectProto_default_instance_);
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::release_hwc_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.hwc_crop)
  
  ::android::surfaceflinger::FloatRectProto* temp = hwc_crop_;
  hwc_crop_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::mutable_hwc_crop() {
  
  if (hwc_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(GetArenaNoVirtual());
    hwc_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.hwc_crop)
  return hwc_crop_;
}
inline void LayerProto::set_allocated_hwc_crop(::android::surfaceflinger::FloatRectProto* hwc_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hwc_crop_;
  }
  if (hwc_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hwc_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hwc_crop, submessage_arena);
    }
    
  } else {
    
  }
  hwc_crop_ = hwc_crop;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.hwc_crop)
}

// int32 hwc_transform = 32;
inline void LayerProto::clear_hwc_transform() {
  hwc_transform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::hwc_transform() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.hwc_transform)
  return hwc_transform_;
}
inline void LayerProto::set_hwc_transform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hwc_transform_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.hwc_transform)
}

// int32 window_type = 33 [deprecated = true];
inline void LayerProto::clear_window_type() {
  window_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::window_type() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.window_type)
  return window_type_;
}
inline void LayerProto::set_window_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  window_type_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.window_type)
}

// int32 app_id = 34 [deprecated = true];
inline void LayerProto::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::app_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.app_id)
  return app_id_;
}
inline void LayerProto::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.app_id)
}

// .android.surfaceflinger.HwcCompositionType hwc_composition_type = 35;
inline void LayerProto::clear_hwc_composition_type() {
  hwc_composition_type_ = 0;
}
inline ::android::surfaceflinger::HwcCompositionType LayerProto::hwc_composition_type() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.hwc_composition_type)
  return static_cast< ::android::surfaceflinger::HwcCompositionType >(hwc_composition_type_);
}
inline void LayerProto::set_hwc_composition_type(::android::surfaceflinger::HwcCompositionType value) {
  
  hwc_composition_type_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.hwc_composition_type)
}

// bool is_protected = 36;
inline void LayerProto::clear_is_protected() {
  is_protected_ = false;
}
inline bool LayerProto::is_protected() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.is_protected)
  return is_protected_;
}
inline void LayerProto::set_is_protected(bool value) {
  
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.is_protected)
}

// uint64 curr_frame = 37;
inline void LayerProto::clear_curr_frame() {
  curr_frame_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayerProto::curr_frame() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.curr_frame)
  return curr_frame_;
}
inline void LayerProto::set_curr_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  curr_frame_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.curr_frame)
}

// repeated .android.surfaceflinger.BarrierLayerProto barrier_layer = 38;
inline int LayerProto::barrier_layer_size() const {
  return barrier_layer_.size();
}
inline void LayerProto::clear_barrier_layer() {
  barrier_layer_.Clear();
}
inline ::android::surfaceflinger::BarrierLayerProto* LayerProto::mutable_barrier_layer(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.barrier_layer)
  return barrier_layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BarrierLayerProto >*
LayerProto::mutable_barrier_layer() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayerProto.barrier_layer)
  return &barrier_layer_;
}
inline const ::android::surfaceflinger::BarrierLayerProto& LayerProto::barrier_layer(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.barrier_layer)
  return barrier_layer_.Get(index);
}
inline ::android::surfaceflinger::BarrierLayerProto* LayerProto::add_barrier_layer() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayerProto.barrier_layer)
  return barrier_layer_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BarrierLayerProto >&
LayerProto::barrier_layer() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayerProto.barrier_layer)
  return barrier_layer_;
}

// .android.surfaceflinger.TransformProto buffer_transform = 39;
inline bool LayerProto::has_buffer_transform() const {
  return this != internal_default_instance() && buffer_transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& LayerProto::buffer_transform() const {
  const ::android::surfaceflinger::TransformProto* p = buffer_transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.buffer_transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* LayerProto::release_buffer_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.buffer_transform)
  
  ::android::surfaceflinger::TransformProto* temp = buffer_transform_;
  buffer_transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* LayerProto::mutable_buffer_transform() {
  
  if (buffer_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    buffer_transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.buffer_transform)
  return buffer_transform_;
}
inline void LayerProto::set_allocated_buffer_transform(::android::surfaceflinger::TransformProto* buffer_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffer_transform_);
  }
  if (buffer_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buffer_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_transform, submessage_arena);
    }
    
  } else {
    
  }
  buffer_transform_ = buffer_transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.buffer_transform)
}

// int32 effective_scaling_mode = 40;
inline void LayerProto::clear_effective_scaling_mode() {
  effective_scaling_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::effective_scaling_mode() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.effective_scaling_mode)
  return effective_scaling_mode_;
}
inline void LayerProto::set_effective_scaling_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effective_scaling_mode_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.effective_scaling_mode)
}

// float corner_radius = 41;
inline void LayerProto::clear_corner_radius() {
  corner_radius_ = 0;
}
inline float LayerProto::corner_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.corner_radius)
  return corner_radius_;
}
inline void LayerProto::set_corner_radius(float value) {
  
  corner_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.corner_radius)
}

// map<int32, bytes> metadata = 42;
inline int LayerProto::metadata_size() const {
  return metadata_.size();
}
inline void LayerProto::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
LayerProto::metadata() const {
  // @@protoc_insertion_point(field_map:android.surfaceflinger.LayerProto.metadata)
  return metadata_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
LayerProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:android.surfaceflinger.LayerProto.metadata)
  return metadata_.MutableMap();
}

// .android.surfaceflinger.TransformProto effective_transform = 43;
inline bool LayerProto::has_effective_transform() const {
  return this != internal_default_instance() && effective_transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& LayerProto::effective_transform() const {
  const ::android::surfaceflinger::TransformProto* p = effective_transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.effective_transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* LayerProto::release_effective_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.effective_transform)
  
  ::android::surfaceflinger::TransformProto* temp = effective_transform_;
  effective_transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* LayerProto::mutable_effective_transform() {
  
  if (effective_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    effective_transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.effective_transform)
  return effective_transform_;
}
inline void LayerProto::set_allocated_effective_transform(::android::surfaceflinger::TransformProto* effective_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effective_transform_);
  }
  if (effective_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      effective_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effective_transform, submessage_arena);
    }
    
  } else {
    
  }
  effective_transform_ = effective_transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.effective_transform)
}

// .android.surfaceflinger.FloatRectProto source_bounds = 44;
inline bool LayerProto::has_source_bounds() const {
  return this != internal_default_instance() && source_bounds_ != nullptr;
}
inline void LayerProto::clear_source_bounds() {
  if (GetArenaNoVirtual() == nullptr && source_bounds_ != nullptr) {
    delete source_bounds_;
  }
  source_bounds_ = nullptr;
}
inline const ::android::surfaceflinger::FloatRectProto& LayerProto::source_bounds() const {
  const ::android::surfaceflinger::FloatRectProto* p = source_bounds_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.source_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FloatRectProto*>(
      &::android::surfaceflinger::_FloatRectProto_default_instance_);
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::release_source_bounds() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.source_bounds)
  
  ::android::surfaceflinger::FloatRectProto* temp = source_bounds_;
  source_bounds_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::mutable_source_bounds() {
  
  if (source_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(GetArenaNoVirtual());
    source_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.source_bounds)
  return source_bounds_;
}
inline void LayerProto::set_allocated_source_bounds(::android::surfaceflinger::FloatRectProto* source_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_bounds_;
  }
  if (source_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_bounds, submessage_arena);
    }
    
  } else {
    
  }
  source_bounds_ = source_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.source_bounds)
}

// .android.surfaceflinger.FloatRectProto bounds = 45;
inline bool LayerProto::has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline void LayerProto::clear_bounds() {
  if (GetArenaNoVirtual() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::android::surfaceflinger::FloatRectProto& LayerProto::bounds() const {
  const ::android::surfaceflinger::FloatRectProto* p = bounds_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FloatRectProto*>(
      &::android::surfaceflinger::_FloatRectProto_default_instance_);
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::release_bounds() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.bounds)
  
  ::android::surfaceflinger::FloatRectProto* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.bounds)
  return bounds_;
}
inline void LayerProto::set_allocated_bounds(::android::surfaceflinger::FloatRectProto* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.bounds)
}

// .android.surfaceflinger.FloatRectProto screen_bounds = 46;
inline bool LayerProto::has_screen_bounds() const {
  return this != internal_default_instance() && screen_bounds_ != nullptr;
}
inline void LayerProto::clear_screen_bounds() {
  if (GetArenaNoVirtual() == nullptr && screen_bounds_ != nullptr) {
    delete screen_bounds_;
  }
  screen_bounds_ = nullptr;
}
inline const ::android::surfaceflinger::FloatRectProto& LayerProto::screen_bounds() const {
  const ::android::surfaceflinger::FloatRectProto* p = screen_bounds_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.screen_bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FloatRectProto*>(
      &::android::surfaceflinger::_FloatRectProto_default_instance_);
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::release_screen_bounds() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.screen_bounds)
  
  ::android::surfaceflinger::FloatRectProto* temp = screen_bounds_;
  screen_bounds_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::mutable_screen_bounds() {
  
  if (screen_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(GetArenaNoVirtual());
    screen_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.screen_bounds)
  return screen_bounds_;
}
inline void LayerProto::set_allocated_screen_bounds(::android::surfaceflinger::FloatRectProto* screen_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_bounds_;
  }
  if (screen_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_bounds, submessage_arena);
    }
    
  } else {
    
  }
  screen_bounds_ = screen_bounds;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.screen_bounds)
}

// .android.surfaceflinger.InputWindowInfoProto input_window_info = 47;
inline bool LayerProto::has_input_window_info() const {
  return this != internal_default_instance() && input_window_info_ != nullptr;
}
inline void LayerProto::clear_input_window_info() {
  if (GetArenaNoVirtual() == nullptr && input_window_info_ != nullptr) {
    delete input_window_info_;
  }
  input_window_info_ = nullptr;
}
inline const ::android::surfaceflinger::InputWindowInfoProto& LayerProto::input_window_info() const {
  const ::android::surfaceflinger::InputWindowInfoProto* p = input_window_info_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.input_window_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::InputWindowInfoProto*>(
      &::android::surfaceflinger::_InputWindowInfoProto_default_instance_);
}
inline ::android::surfaceflinger::InputWindowInfoProto* LayerProto::release_input_window_info() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.input_window_info)
  
  ::android::surfaceflinger::InputWindowInfoProto* temp = input_window_info_;
  input_window_info_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::InputWindowInfoProto* LayerProto::mutable_input_window_info() {
  
  if (input_window_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::InputWindowInfoProto>(GetArenaNoVirtual());
    input_window_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.input_window_info)
  return input_window_info_;
}
inline void LayerProto::set_allocated_input_window_info(::android::surfaceflinger::InputWindowInfoProto* input_window_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_window_info_;
  }
  if (input_window_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_window_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_window_info, submessage_arena);
    }
    
  } else {
    
  }
  input_window_info_ = input_window_info;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.input_window_info)
}

// .android.surfaceflinger.FloatRectProto corner_radius_crop = 48;
inline bool LayerProto::has_corner_radius_crop() const {
  return this != internal_default_instance() && corner_radius_crop_ != nullptr;
}
inline void LayerProto::clear_corner_radius_crop() {
  if (GetArenaNoVirtual() == nullptr && corner_radius_crop_ != nullptr) {
    delete corner_radius_crop_;
  }
  corner_radius_crop_ = nullptr;
}
inline const ::android::surfaceflinger::FloatRectProto& LayerProto::corner_radius_crop() const {
  const ::android::surfaceflinger::FloatRectProto* p = corner_radius_crop_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.corner_radius_crop)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::FloatRectProto*>(
      &::android::surfaceflinger::_FloatRectProto_default_instance_);
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::release_corner_radius_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.corner_radius_crop)
  
  ::android::surfaceflinger::FloatRectProto* temp = corner_radius_crop_;
  corner_radius_crop_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::FloatRectProto* LayerProto::mutable_corner_radius_crop() {
  
  if (corner_radius_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::FloatRectProto>(GetArenaNoVirtual());
    corner_radius_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.corner_radius_crop)
  return corner_radius_crop_;
}
inline void LayerProto::set_allocated_corner_radius_crop(::android::surfaceflinger::FloatRectProto* corner_radius_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete corner_radius_crop_;
  }
  if (corner_radius_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      corner_radius_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corner_radius_crop, submessage_arena);
    }
    
  } else {
    
  }
  corner_radius_crop_ = corner_radius_crop;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.corner_radius_crop)
}

// float shadow_radius = 49;
inline void LayerProto::clear_shadow_radius() {
  shadow_radius_ = 0;
}
inline float LayerProto::shadow_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.shadow_radius)
  return shadow_radius_;
}
inline void LayerProto::set_shadow_radius(float value) {
  
  shadow_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.shadow_radius)
}

// .android.surfaceflinger.ColorTransformProto color_transform = 50;
inline bool LayerProto::has_color_transform() const {
  return this != internal_default_instance() && color_transform_ != nullptr;
}
inline void LayerProto::clear_color_transform() {
  if (GetArenaNoVirtual() == nullptr && color_transform_ != nullptr) {
    delete color_transform_;
  }
  color_transform_ = nullptr;
}
inline const ::android::surfaceflinger::ColorTransformProto& LayerProto::color_transform() const {
  const ::android::surfaceflinger::ColorTransformProto* p = color_transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.color_transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::ColorTransformProto*>(
      &::android::surfaceflinger::_ColorTransformProto_default_instance_);
}
inline ::android::surfaceflinger::ColorTransformProto* LayerProto::release_color_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.LayerProto.color_transform)
  
  ::android::surfaceflinger::ColorTransformProto* temp = color_transform_;
  color_transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::ColorTransformProto* LayerProto::mutable_color_transform() {
  
  if (color_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::ColorTransformProto>(GetArenaNoVirtual());
    color_transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.color_transform)
  return color_transform_;
}
inline void LayerProto::set_allocated_color_transform(::android::surfaceflinger::ColorTransformProto* color_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_transform_;
  }
  if (color_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_transform, submessage_arena);
    }
    
  } else {
    
  }
  color_transform_ = color_transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.LayerProto.color_transform)
}

// bool is_relative_of = 51;
inline void LayerProto::clear_is_relative_of() {
  is_relative_of_ = false;
}
inline bool LayerProto::is_relative_of() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.is_relative_of)
  return is_relative_of_;
}
inline void LayerProto::set_is_relative_of(bool value) {
  
  is_relative_of_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.is_relative_of)
}

// int32 background_blur_radius = 52;
inline void LayerProto::clear_background_blur_radius() {
  background_blur_radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerProto::background_blur_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.background_blur_radius)
  return background_blur_radius_;
}
inline void LayerProto::set_background_blur_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  background_blur_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.background_blur_radius)
}

// uint32 owner_uid = 53;
inline void LayerProto::clear_owner_uid() {
  owner_uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayerProto::owner_uid() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.owner_uid)
  return owner_uid_;
}
inline void LayerProto::set_owner_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.owner_uid)
}

// repeated .android.surfaceflinger.BlurRegion blur_regions = 54;
inline int LayerProto::blur_regions_size() const {
  return blur_regions_.size();
}
inline void LayerProto::clear_blur_regions() {
  blur_regions_.Clear();
}
inline ::android::surfaceflinger::BlurRegion* LayerProto::mutable_blur_regions(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.LayerProto.blur_regions)
  return blur_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegion >*
LayerProto::mutable_blur_regions() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.LayerProto.blur_regions)
  return &blur_regions_;
}
inline const ::android::surfaceflinger::BlurRegion& LayerProto::blur_regions(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.blur_regions)
  return blur_regions_.Get(index);
}
inline ::android::surfaceflinger::BlurRegion* LayerProto::add_blur_regions() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.LayerProto.blur_regions)
  return blur_regions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::BlurRegion >&
LayerProto::blur_regions() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.LayerProto.blur_regions)
  return blur_regions_;
}

// bool is_trusted_overlay = 55;
inline void LayerProto::clear_is_trusted_overlay() {
  is_trusted_overlay_ = false;
}
inline bool LayerProto::is_trusted_overlay() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.is_trusted_overlay)
  return is_trusted_overlay_;
}
inline void LayerProto::set_is_trusted_overlay(bool value) {
  
  is_trusted_overlay_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.is_trusted_overlay)
}

// float requested_corner_radius = 56;
inline void LayerProto::clear_requested_corner_radius() {
  requested_corner_radius_ = 0;
}
inline float LayerProto::requested_corner_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.LayerProto.requested_corner_radius)
  return requested_corner_radius_;
}
inline void LayerProto::set_requested_corner_radius(float value) {
  
  requested_corner_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.LayerProto.requested_corner_radius)
}

// -------------------------------------------------------------------

// PositionProto

// float x = 1;
inline void PositionProto::clear_x() {
  x_ = 0;
}
inline float PositionProto::x() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PositionProto.x)
  return x_;
}
inline void PositionProto::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PositionProto.x)
}

// float y = 2;
inline void PositionProto::clear_y() {
  y_ = 0;
}
inline float PositionProto::y() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.PositionProto.y)
  return y_;
}
inline void PositionProto::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.PositionProto.y)
}

// -------------------------------------------------------------------

// RegionProto

// repeated .android.surfaceflinger.RectProto rect = 2;
inline int RegionProto::rect_size() const {
  return rect_.size();
}
inline ::android::surfaceflinger::RectProto* RegionProto::mutable_rect(int index) {
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.RegionProto.rect)
  return rect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::RectProto >*
RegionProto::mutable_rect() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.RegionProto.rect)
  return &rect_;
}
inline const ::android::surfaceflinger::RectProto& RegionProto::rect(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.RegionProto.rect)
  return rect_.Get(index);
}
inline ::android::surfaceflinger::RectProto* RegionProto::add_rect() {
  // @@protoc_insertion_point(field_add:android.surfaceflinger.RegionProto.rect)
  return rect_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::surfaceflinger::RectProto >&
RegionProto::rect() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.RegionProto.rect)
  return rect_;
}

// -------------------------------------------------------------------

// FloatRectProto

// float left = 1;
inline void FloatRectProto::clear_left() {
  left_ = 0;
}
inline float FloatRectProto::left() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FloatRectProto.left)
  return left_;
}
inline void FloatRectProto::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FloatRectProto.left)
}

// float top = 2;
inline void FloatRectProto::clear_top() {
  top_ = 0;
}
inline float FloatRectProto::top() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FloatRectProto.top)
  return top_;
}
inline void FloatRectProto::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FloatRectProto.top)
}

// float right = 3;
inline void FloatRectProto::clear_right() {
  right_ = 0;
}
inline float FloatRectProto::right() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FloatRectProto.right)
  return right_;
}
inline void FloatRectProto::set_right(float value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FloatRectProto.right)
}

// float bottom = 4;
inline void FloatRectProto::clear_bottom() {
  bottom_ = 0;
}
inline float FloatRectProto::bottom() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.FloatRectProto.bottom)
  return bottom_;
}
inline void FloatRectProto::set_bottom(float value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.FloatRectProto.bottom)
}

// -------------------------------------------------------------------

// ActiveBufferProto

// uint32 width = 1;
inline void ActiveBufferProto::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActiveBufferProto::width() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ActiveBufferProto.width)
  return width_;
}
inline void ActiveBufferProto::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ActiveBufferProto.width)
}

// uint32 height = 2;
inline void ActiveBufferProto::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActiveBufferProto::height() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ActiveBufferProto.height)
  return height_;
}
inline void ActiveBufferProto::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ActiveBufferProto.height)
}

// uint32 stride = 3;
inline void ActiveBufferProto::clear_stride() {
  stride_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActiveBufferProto::stride() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ActiveBufferProto.stride)
  return stride_;
}
inline void ActiveBufferProto::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stride_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ActiveBufferProto.stride)
}

// int32 format = 4;
inline void ActiveBufferProto::clear_format() {
  format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveBufferProto::format() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ActiveBufferProto.format)
  return format_;
}
inline void ActiveBufferProto::set_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ActiveBufferProto.format)
}

// -------------------------------------------------------------------

// ColorProto

// float r = 1;
inline void ColorProto::clear_r() {
  r_ = 0;
}
inline float ColorProto::r() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ColorProto.r)
  return r_;
}
inline void ColorProto::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ColorProto.r)
}

// float g = 2;
inline void ColorProto::clear_g() {
  g_ = 0;
}
inline float ColorProto::g() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ColorProto.g)
  return g_;
}
inline void ColorProto::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ColorProto.g)
}

// float b = 3;
inline void ColorProto::clear_b() {
  b_ = 0;
}
inline float ColorProto::b() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ColorProto.b)
  return b_;
}
inline void ColorProto::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ColorProto.b)
}

// float a = 4;
inline void ColorProto::clear_a() {
  a_ = 0;
}
inline float ColorProto::a() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ColorProto.a)
  return a_;
}
inline void ColorProto::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ColorProto.a)
}

// -------------------------------------------------------------------

// BarrierLayerProto

// int32 id = 1;
inline void BarrierLayerProto::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BarrierLayerProto::id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BarrierLayerProto.id)
  return id_;
}
inline void BarrierLayerProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BarrierLayerProto.id)
}

// uint64 frame_number = 2;
inline void BarrierLayerProto::clear_frame_number() {
  frame_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BarrierLayerProto::frame_number() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BarrierLayerProto.frame_number)
  return frame_number_;
}
inline void BarrierLayerProto::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BarrierLayerProto.frame_number)
}

// -------------------------------------------------------------------

// InputWindowInfoProto

// uint32 layout_params_flags = 1;
inline void InputWindowInfoProto::clear_layout_params_flags() {
  layout_params_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputWindowInfoProto::layout_params_flags() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.layout_params_flags)
  return layout_params_flags_;
}
inline void InputWindowInfoProto::set_layout_params_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layout_params_flags_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.layout_params_flags)
}

// uint32 layout_params_type = 2;
inline void InputWindowInfoProto::clear_layout_params_type() {
  layout_params_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputWindowInfoProto::layout_params_type() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.layout_params_type)
  return layout_params_type_;
}
inline void InputWindowInfoProto::set_layout_params_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layout_params_type_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.layout_params_type)
}

// .android.surfaceflinger.RectProto frame = 3;
inline bool InputWindowInfoProto::has_frame() const {
  return this != internal_default_instance() && frame_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& InputWindowInfoProto::frame() const {
  const ::android::surfaceflinger::RectProto* p = frame_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* InputWindowInfoProto::release_frame() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.InputWindowInfoProto.frame)
  
  ::android::surfaceflinger::RectProto* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* InputWindowInfoProto::mutable_frame() {
  
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.InputWindowInfoProto.frame)
  return frame_;
}
inline void InputWindowInfoProto::set_allocated_frame(::android::surfaceflinger::RectProto* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.InputWindowInfoProto.frame)
}

// .android.surfaceflinger.RegionProto touchable_region = 4;
inline bool InputWindowInfoProto::has_touchable_region() const {
  return this != internal_default_instance() && touchable_region_ != nullptr;
}
inline void InputWindowInfoProto::clear_touchable_region() {
  if (GetArenaNoVirtual() == nullptr && touchable_region_ != nullptr) {
    delete touchable_region_;
  }
  touchable_region_ = nullptr;
}
inline const ::android::surfaceflinger::RegionProto& InputWindowInfoProto::touchable_region() const {
  const ::android::surfaceflinger::RegionProto* p = touchable_region_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.touchable_region)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RegionProto*>(
      &::android::surfaceflinger::_RegionProto_default_instance_);
}
inline ::android::surfaceflinger::RegionProto* InputWindowInfoProto::release_touchable_region() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.InputWindowInfoProto.touchable_region)
  
  ::android::surfaceflinger::RegionProto* temp = touchable_region_;
  touchable_region_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RegionProto* InputWindowInfoProto::mutable_touchable_region() {
  
  if (touchable_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RegionProto>(GetArenaNoVirtual());
    touchable_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.InputWindowInfoProto.touchable_region)
  return touchable_region_;
}
inline void InputWindowInfoProto::set_allocated_touchable_region(::android::surfaceflinger::RegionProto* touchable_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete touchable_region_;
  }
  if (touchable_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touchable_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region, submessage_arena);
    }
    
  } else {
    
  }
  touchable_region_ = touchable_region;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.InputWindowInfoProto.touchable_region)
}

// uint32 surface_inset = 5;
inline void InputWindowInfoProto::clear_surface_inset() {
  surface_inset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputWindowInfoProto::surface_inset() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.surface_inset)
  return surface_inset_;
}
inline void InputWindowInfoProto::set_surface_inset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  surface_inset_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.surface_inset)
}

// bool visible = 6;
inline void InputWindowInfoProto::clear_visible() {
  visible_ = false;
}
inline bool InputWindowInfoProto::visible() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.visible)
  return visible_;
}
inline void InputWindowInfoProto::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.visible)
}

// bool can_receive_keys = 7 [deprecated = true];
inline void InputWindowInfoProto::clear_can_receive_keys() {
  can_receive_keys_ = false;
}
inline bool InputWindowInfoProto::can_receive_keys() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.can_receive_keys)
  return can_receive_keys_;
}
inline void InputWindowInfoProto::set_can_receive_keys(bool value) {
  
  can_receive_keys_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.can_receive_keys)
}

// bool focusable = 8;
inline void InputWindowInfoProto::clear_focusable() {
  focusable_ = false;
}
inline bool InputWindowInfoProto::focusable() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.focusable)
  return focusable_;
}
inline void InputWindowInfoProto::set_focusable(bool value) {
  
  focusable_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.focusable)
}

// bool has_wallpaper = 9;
inline void InputWindowInfoProto::clear_has_wallpaper() {
  has_wallpaper_ = false;
}
inline bool InputWindowInfoProto::has_wallpaper() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.has_wallpaper)
  return has_wallpaper_;
}
inline void InputWindowInfoProto::set_has_wallpaper(bool value) {
  
  has_wallpaper_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.has_wallpaper)
}

// float global_scale_factor = 10;
inline void InputWindowInfoProto::clear_global_scale_factor() {
  global_scale_factor_ = 0;
}
inline float InputWindowInfoProto::global_scale_factor() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.global_scale_factor)
  return global_scale_factor_;
}
inline void InputWindowInfoProto::set_global_scale_factor(float value) {
  
  global_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.global_scale_factor)
}

// float window_x_scale = 11 [deprecated = true];
inline void InputWindowInfoProto::clear_window_x_scale() {
  window_x_scale_ = 0;
}
inline float InputWindowInfoProto::window_x_scale() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.window_x_scale)
  return window_x_scale_;
}
inline void InputWindowInfoProto::set_window_x_scale(float value) {
  
  window_x_scale_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.window_x_scale)
}

// float window_y_scale = 12 [deprecated = true];
inline void InputWindowInfoProto::clear_window_y_scale() {
  window_y_scale_ = 0;
}
inline float InputWindowInfoProto::window_y_scale() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.window_y_scale)
  return window_y_scale_;
}
inline void InputWindowInfoProto::set_window_y_scale(float value) {
  
  window_y_scale_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.window_y_scale)
}

// uint32 crop_layer_id = 13;
inline void InputWindowInfoProto::clear_crop_layer_id() {
  crop_layer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputWindowInfoProto::crop_layer_id() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.crop_layer_id)
  return crop_layer_id_;
}
inline void InputWindowInfoProto::set_crop_layer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crop_layer_id_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.crop_layer_id)
}

// bool replace_touchable_region_with_crop = 14;
inline void InputWindowInfoProto::clear_replace_touchable_region_with_crop() {
  replace_touchable_region_with_crop_ = false;
}
inline bool InputWindowInfoProto::replace_touchable_region_with_crop() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.replace_touchable_region_with_crop)
  return replace_touchable_region_with_crop_;
}
inline void InputWindowInfoProto::set_replace_touchable_region_with_crop(bool value) {
  
  replace_touchable_region_with_crop_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.InputWindowInfoProto.replace_touchable_region_with_crop)
}

// .android.surfaceflinger.RectProto touchable_region_crop = 15;
inline bool InputWindowInfoProto::has_touchable_region_crop() const {
  return this != internal_default_instance() && touchable_region_crop_ != nullptr;
}
inline const ::android::surfaceflinger::RectProto& InputWindowInfoProto::touchable_region_crop() const {
  const ::android::surfaceflinger::RectProto* p = touchable_region_crop_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.touchable_region_crop)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::RectProto*>(
      &::android::surfaceflinger::_RectProto_default_instance_);
}
inline ::android::surfaceflinger::RectProto* InputWindowInfoProto::release_touchable_region_crop() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.InputWindowInfoProto.touchable_region_crop)
  
  ::android::surfaceflinger::RectProto* temp = touchable_region_crop_;
  touchable_region_crop_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::RectProto* InputWindowInfoProto::mutable_touchable_region_crop() {
  
  if (touchable_region_crop_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::RectProto>(GetArenaNoVirtual());
    touchable_region_crop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.InputWindowInfoProto.touchable_region_crop)
  return touchable_region_crop_;
}
inline void InputWindowInfoProto::set_allocated_touchable_region_crop(::android::surfaceflinger::RectProto* touchable_region_crop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touchable_region_crop_);
  }
  if (touchable_region_crop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touchable_region_crop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchable_region_crop, submessage_arena);
    }
    
  } else {
    
  }
  touchable_region_crop_ = touchable_region_crop;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.InputWindowInfoProto.touchable_region_crop)
}

// .android.surfaceflinger.TransformProto transform = 16;
inline bool InputWindowInfoProto::has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline const ::android::surfaceflinger::TransformProto& InputWindowInfoProto::transform() const {
  const ::android::surfaceflinger::TransformProto* p = transform_;
  // @@protoc_insertion_point(field_get:android.surfaceflinger.InputWindowInfoProto.transform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::surfaceflinger::TransformProto*>(
      &::android::surfaceflinger::_TransformProto_default_instance_);
}
inline ::android::surfaceflinger::TransformProto* InputWindowInfoProto::release_transform() {
  // @@protoc_insertion_point(field_release:android.surfaceflinger.InputWindowInfoProto.transform)
  
  ::android::surfaceflinger::TransformProto* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::android::surfaceflinger::TransformProto* InputWindowInfoProto::mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::surfaceflinger::TransformProto>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.surfaceflinger.InputWindowInfoProto.transform)
  return transform_;
}
inline void InputWindowInfoProto::set_allocated_transform(::android::surfaceflinger::TransformProto* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:android.surfaceflinger.InputWindowInfoProto.transform)
}

// -------------------------------------------------------------------

// ColorTransformProto

// repeated float val = 1;
inline int ColorTransformProto::val_size() const {
  return val_.size();
}
inline void ColorTransformProto::clear_val() {
  val_.Clear();
}
inline float ColorTransformProto::val(int index) const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.ColorTransformProto.val)
  return val_.Get(index);
}
inline void ColorTransformProto::set_val(int index, float value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.surfaceflinger.ColorTransformProto.val)
}
inline void ColorTransformProto::add_val(float value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:android.surfaceflinger.ColorTransformProto.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorTransformProto::val() const {
  // @@protoc_insertion_point(field_list:android.surfaceflinger.ColorTransformProto.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorTransformProto::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:android.surfaceflinger.ColorTransformProto.val)
  return &val_;
}

// -------------------------------------------------------------------

// BlurRegion

// uint32 blur_radius = 1;
inline void BlurRegion::clear_blur_radius() {
  blur_radius_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlurRegion::blur_radius() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.blur_radius)
  return blur_radius_;
}
inline void BlurRegion::set_blur_radius(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blur_radius_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.blur_radius)
}

// uint32 corner_radius_tl = 2;
inline void BlurRegion::clear_corner_radius_tl() {
  corner_radius_tl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlurRegion::corner_radius_tl() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.corner_radius_tl)
  return corner_radius_tl_;
}
inline void BlurRegion::set_corner_radius_tl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  corner_radius_tl_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.corner_radius_tl)
}

// uint32 corner_radius_tr = 3;
inline void BlurRegion::clear_corner_radius_tr() {
  corner_radius_tr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlurRegion::corner_radius_tr() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.corner_radius_tr)
  return corner_radius_tr_;
}
inline void BlurRegion::set_corner_radius_tr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  corner_radius_tr_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.corner_radius_tr)
}

// uint32 corner_radius_bl = 4;
inline void BlurRegion::clear_corner_radius_bl() {
  corner_radius_bl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlurRegion::corner_radius_bl() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.corner_radius_bl)
  return corner_radius_bl_;
}
inline void BlurRegion::set_corner_radius_bl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  corner_radius_bl_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.corner_radius_bl)
}

// float corner_radius_br = 5;
inline void BlurRegion::clear_corner_radius_br() {
  corner_radius_br_ = 0;
}
inline float BlurRegion::corner_radius_br() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.corner_radius_br)
  return corner_radius_br_;
}
inline void BlurRegion::set_corner_radius_br(float value) {
  
  corner_radius_br_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.corner_radius_br)
}

// float alpha = 6;
inline void BlurRegion::clear_alpha() {
  alpha_ = 0;
}
inline float BlurRegion::alpha() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.alpha)
  return alpha_;
}
inline void BlurRegion::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.alpha)
}

// int32 left = 7;
inline void BlurRegion::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegion::left() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.left)
  return left_;
}
inline void BlurRegion::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.left)
}

// int32 top = 8;
inline void BlurRegion::clear_top() {
  top_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegion::top() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.top)
  return top_;
}
inline void BlurRegion::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.top)
}

// int32 right = 9;
inline void BlurRegion::clear_right() {
  right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegion::right() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.right)
  return right_;
}
inline void BlurRegion::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.right)
}

// int32 bottom = 10;
inline void BlurRegion::clear_bottom() {
  bottom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlurRegion::bottom() const {
  // @@protoc_insertion_point(field_get:android.surfaceflinger.BlurRegion.bottom)
  return bottom_;
}
inline void BlurRegion::set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:android.surfaceflinger.BlurRegion.bottom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace surfaceflinger
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::surfaceflinger::HwcCompositionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2flayers_2eproto
